
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017370  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08017610  08017610  00027610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017aa8  08017aa8  00027aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017ab0  08017ab0  00027ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017ab4  08017ab4  00027ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08017ab8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005928  24000120  08017bbc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a48  08017bbc  00035a48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033bb4  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f4  00000000  00000000  00063ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  000693e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000324ce  00000000  00000000  000ae1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b89  00000000  00000000  000e068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00275215  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0cc  00000000  00000000  00275268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080175f8 	.word	0x080175f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080175f8 	.word	0x080175f8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c00 	.word	0x24000c00

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fef8 	bl	801340c <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e01e      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 feed 	bl	801340c <osEventFlagsSet>
}
 8000632:	e013      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d10c      	bne.n	8000656 <HAL_TIM_OC_DelayElapsedCallback+0x56>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2108      	movs	r1, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fee2 	bl	801340c <osEventFlagsSet>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f012 fedc 	bl	801340c <osEventFlagsSet>
}
 8000654:	e002      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		printf("Unknown Timer Interrupt\n");
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000658:	f016 fc1e 	bl	8016e98 <puts>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	24000508 	.word	0x24000508
 8000668:	24000c20 	.word	0x24000c20
 800066c:	24000554 	.word	0x24000554
 8000670:	240005a0 	.word	0x240005a0
 8000674:	08017698 	.word	0x08017698

08000678 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	49f2      	ldr	r1, [pc, #968]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 8000684:	48f2      	ldr	r0, [pc, #968]	; (8000a50 <HAL_UART_RxCpltCallback+0x3d8>)
 8000686:	f00f ff37 	bl	80104f8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800068a:	4bf0      	ldr	r3, [pc, #960]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2be0      	cmp	r3, #224	; 0xe0
 8000694:	f200 8453 	bhi.w	8000f3e <HAL_UART_RxCpltCallback+0x8c6>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <HAL_UART_RxCpltCallback+0x28>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	08000a39 	.word	0x08000a39
 80006a4:	08000a7b 	.word	0x08000a7b
 80006a8:	08000b3d 	.word	0x08000b3d
 80006ac:	08000b73 	.word	0x08000b73
 80006b0:	08000ba7 	.word	0x08000ba7
 80006b4:	08000bdd 	.word	0x08000bdd
 80006b8:	08000c15 	.word	0x08000c15
 80006bc:	08000c4d 	.word	0x08000c4d
 80006c0:	08000c83 	.word	0x08000c83
 80006c4:	08000cb5 	.word	0x08000cb5
 80006c8:	08000ced 	.word	0x08000ced
 80006cc:	08000d2b 	.word	0x08000d2b
 80006d0:	08000e15 	.word	0x08000e15
 80006d4:	08000e5f 	.word	0x08000e5f
 80006d8:	08000ec1 	.word	0x08000ec1
 80006dc:	08000ee9 	.word	0x08000ee9
 80006e0:	08000a25 	.word	0x08000a25
 80006e4:	08000a61 	.word	0x08000a61
 80006e8:	08000b21 	.word	0x08000b21
 80006ec:	08000b59 	.word	0x08000b59
 80006f0:	08000b8d 	.word	0x08000b8d
 80006f4:	08000bc1 	.word	0x08000bc1
 80006f8:	08000bf9 	.word	0x08000bf9
 80006fc:	08000c31 	.word	0x08000c31
 8000700:	08000c69 	.word	0x08000c69
 8000704:	08000c9d 	.word	0x08000c9d
 8000708:	08000cc5 	.word	0x08000cc5
 800070c:	08000d03 	.word	0x08000d03
 8000710:	08000d41 	.word	0x08000d41
 8000714:	08000e23 	.word	0x08000e23
 8000718:	08000e99 	.word	0x08000e99
 800071c:	08000f3f 	.word	0x08000f3f
 8000720:	08000f3f 	.word	0x08000f3f
 8000724:	08000f3f 	.word	0x08000f3f
 8000728:	08000f3f 	.word	0x08000f3f
 800072c:	08000f3f 	.word	0x08000f3f
 8000730:	08000f3f 	.word	0x08000f3f
 8000734:	08000f3f 	.word	0x08000f3f
 8000738:	08000f3f 	.word	0x08000f3f
 800073c:	08000f3f 	.word	0x08000f3f
 8000740:	08000f3f 	.word	0x08000f3f
 8000744:	08000f3f 	.word	0x08000f3f
 8000748:	08000f3f 	.word	0x08000f3f
 800074c:	08000f3f 	.word	0x08000f3f
 8000750:	08000f3f 	.word	0x08000f3f
 8000754:	08000f3f 	.word	0x08000f3f
 8000758:	08000f3f 	.word	0x08000f3f
 800075c:	08000f3f 	.word	0x08000f3f
 8000760:	08000f3f 	.word	0x08000f3f
 8000764:	08000f3f 	.word	0x08000f3f
 8000768:	08000f3f 	.word	0x08000f3f
 800076c:	08000f3f 	.word	0x08000f3f
 8000770:	08000f3f 	.word	0x08000f3f
 8000774:	08000f3f 	.word	0x08000f3f
 8000778:	08000f3f 	.word	0x08000f3f
 800077c:	08000f3f 	.word	0x08000f3f
 8000780:	08000f3f 	.word	0x08000f3f
 8000784:	08000f3f 	.word	0x08000f3f
 8000788:	08000f3f 	.word	0x08000f3f
 800078c:	08000f3f 	.word	0x08000f3f
 8000790:	08000f3f 	.word	0x08000f3f
 8000794:	08000f3f 	.word	0x08000f3f
 8000798:	08000f3f 	.word	0x08000f3f
 800079c:	08000f3f 	.word	0x08000f3f
 80007a0:	08000f3f 	.word	0x08000f3f
 80007a4:	08000f3f 	.word	0x08000f3f
 80007a8:	08000f3f 	.word	0x08000f3f
 80007ac:	08000f3f 	.word	0x08000f3f
 80007b0:	08000f3f 	.word	0x08000f3f
 80007b4:	08000f3f 	.word	0x08000f3f
 80007b8:	08000f3f 	.word	0x08000f3f
 80007bc:	08000f3f 	.word	0x08000f3f
 80007c0:	08000f3f 	.word	0x08000f3f
 80007c4:	08000f3f 	.word	0x08000f3f
 80007c8:	08000f3f 	.word	0x08000f3f
 80007cc:	08000f3f 	.word	0x08000f3f
 80007d0:	08000f3f 	.word	0x08000f3f
 80007d4:	08000f3f 	.word	0x08000f3f
 80007d8:	08000f3f 	.word	0x08000f3f
 80007dc:	08000f3f 	.word	0x08000f3f
 80007e0:	08000f3f 	.word	0x08000f3f
 80007e4:	08000f3f 	.word	0x08000f3f
 80007e8:	08000f3f 	.word	0x08000f3f
 80007ec:	08000f3f 	.word	0x08000f3f
 80007f0:	08000f3f 	.word	0x08000f3f
 80007f4:	08000f3f 	.word	0x08000f3f
 80007f8:	08000f3f 	.word	0x08000f3f
 80007fc:	08000f3f 	.word	0x08000f3f
 8000800:	08000f3f 	.word	0x08000f3f
 8000804:	08000f3f 	.word	0x08000f3f
 8000808:	08000f3f 	.word	0x08000f3f
 800080c:	08000f3f 	.word	0x08000f3f
 8000810:	08000f3f 	.word	0x08000f3f
 8000814:	08000f3f 	.word	0x08000f3f
 8000818:	08000f3f 	.word	0x08000f3f
 800081c:	08000f3f 	.word	0x08000f3f
 8000820:	08000f3f 	.word	0x08000f3f
 8000824:	08000f3f 	.word	0x08000f3f
 8000828:	08000f3f 	.word	0x08000f3f
 800082c:	08000f3f 	.word	0x08000f3f
 8000830:	08000f3f 	.word	0x08000f3f
 8000834:	08000f3f 	.word	0x08000f3f
 8000838:	08000f3f 	.word	0x08000f3f
 800083c:	08000f3f 	.word	0x08000f3f
 8000840:	08000f3f 	.word	0x08000f3f
 8000844:	08000f3f 	.word	0x08000f3f
 8000848:	08000f3f 	.word	0x08000f3f
 800084c:	08000f3f 	.word	0x08000f3f
 8000850:	08000f3f 	.word	0x08000f3f
 8000854:	08000f3f 	.word	0x08000f3f
 8000858:	08000f3f 	.word	0x08000f3f
 800085c:	08000f3f 	.word	0x08000f3f
 8000860:	08000f3f 	.word	0x08000f3f
 8000864:	08000f3f 	.word	0x08000f3f
 8000868:	08000f3f 	.word	0x08000f3f
 800086c:	08000f3f 	.word	0x08000f3f
 8000870:	08000f3f 	.word	0x08000f3f
 8000874:	08000f3f 	.word	0x08000f3f
 8000878:	08000f3f 	.word	0x08000f3f
 800087c:	08000f3f 	.word	0x08000f3f
 8000880:	08000f3f 	.word	0x08000f3f
 8000884:	08000f3f 	.word	0x08000f3f
 8000888:	08000f3f 	.word	0x08000f3f
 800088c:	08000f3f 	.word	0x08000f3f
 8000890:	08000f3f 	.word	0x08000f3f
 8000894:	08000f3f 	.word	0x08000f3f
 8000898:	08000f3f 	.word	0x08000f3f
 800089c:	08000f3f 	.word	0x08000f3f
 80008a0:	08000f3f 	.word	0x08000f3f
 80008a4:	08000f3f 	.word	0x08000f3f
 80008a8:	08000f3f 	.word	0x08000f3f
 80008ac:	08000f3f 	.word	0x08000f3f
 80008b0:	08000f3f 	.word	0x08000f3f
 80008b4:	08000f3f 	.word	0x08000f3f
 80008b8:	08000f3f 	.word	0x08000f3f
 80008bc:	08000f3f 	.word	0x08000f3f
 80008c0:	08000f3f 	.word	0x08000f3f
 80008c4:	08000f3f 	.word	0x08000f3f
 80008c8:	08000f3f 	.word	0x08000f3f
 80008cc:	08000f3f 	.word	0x08000f3f
 80008d0:	08000f3f 	.word	0x08000f3f
 80008d4:	08000f3f 	.word	0x08000f3f
 80008d8:	08000f3f 	.word	0x08000f3f
 80008dc:	08000f3f 	.word	0x08000f3f
 80008e0:	08000f3f 	.word	0x08000f3f
 80008e4:	08000f3f 	.word	0x08000f3f
 80008e8:	08000f3f 	.word	0x08000f3f
 80008ec:	08000f3f 	.word	0x08000f3f
 80008f0:	08000f3f 	.word	0x08000f3f
 80008f4:	08000f3f 	.word	0x08000f3f
 80008f8:	08000f3f 	.word	0x08000f3f
 80008fc:	08000f3f 	.word	0x08000f3f
 8000900:	08000f3f 	.word	0x08000f3f
 8000904:	08000f3f 	.word	0x08000f3f
 8000908:	08000f3f 	.word	0x08000f3f
 800090c:	08000f3f 	.word	0x08000f3f
 8000910:	08000f3f 	.word	0x08000f3f
 8000914:	08000f3f 	.word	0x08000f3f
 8000918:	08000f3f 	.word	0x08000f3f
 800091c:	08000f3f 	.word	0x08000f3f
 8000920:	08000f3f 	.word	0x08000f3f
 8000924:	08000f3f 	.word	0x08000f3f
 8000928:	08000f3f 	.word	0x08000f3f
 800092c:	08000f3f 	.word	0x08000f3f
 8000930:	08000f3f 	.word	0x08000f3f
 8000934:	08000f3f 	.word	0x08000f3f
 8000938:	08000f3f 	.word	0x08000f3f
 800093c:	08000f3f 	.word	0x08000f3f
 8000940:	08000f3f 	.word	0x08000f3f
 8000944:	08000f3f 	.word	0x08000f3f
 8000948:	08000f3f 	.word	0x08000f3f
 800094c:	08000f3f 	.word	0x08000f3f
 8000950:	08000f3f 	.word	0x08000f3f
 8000954:	08000f3f 	.word	0x08000f3f
 8000958:	08000f3f 	.word	0x08000f3f
 800095c:	08000f21 	.word	0x08000f21
 8000960:	08000f3f 	.word	0x08000f3f
 8000964:	08000f3f 	.word	0x08000f3f
 8000968:	08000f3f 	.word	0x08000f3f
 800096c:	08000f3f 	.word	0x08000f3f
 8000970:	08000f3f 	.word	0x08000f3f
 8000974:	08000f3f 	.word	0x08000f3f
 8000978:	08000f3f 	.word	0x08000f3f
 800097c:	08000f3f 	.word	0x08000f3f
 8000980:	08000f3f 	.word	0x08000f3f
 8000984:	08000f3f 	.word	0x08000f3f
 8000988:	08000f3f 	.word	0x08000f3f
 800098c:	08000f3f 	.word	0x08000f3f
 8000990:	08000f3f 	.word	0x08000f3f
 8000994:	08000f3f 	.word	0x08000f3f
 8000998:	08000f3f 	.word	0x08000f3f
 800099c:	08000f27 	.word	0x08000f27
 80009a0:	08000f3f 	.word	0x08000f3f
 80009a4:	08000f3f 	.word	0x08000f3f
 80009a8:	08000f3f 	.word	0x08000f3f
 80009ac:	08000f3f 	.word	0x08000f3f
 80009b0:	08000f3f 	.word	0x08000f3f
 80009b4:	08000f3f 	.word	0x08000f3f
 80009b8:	08000f3f 	.word	0x08000f3f
 80009bc:	08000f3f 	.word	0x08000f3f
 80009c0:	08000f3f 	.word	0x08000f3f
 80009c4:	08000f3f 	.word	0x08000f3f
 80009c8:	08000f3f 	.word	0x08000f3f
 80009cc:	08000f3f 	.word	0x08000f3f
 80009d0:	08000f3f 	.word	0x08000f3f
 80009d4:	08000f3f 	.word	0x08000f3f
 80009d8:	08000f3f 	.word	0x08000f3f
 80009dc:	08000f33 	.word	0x08000f33
 80009e0:	08000f0f 	.word	0x08000f0f
 80009e4:	08000f3f 	.word	0x08000f3f
 80009e8:	08000f3f 	.word	0x08000f3f
 80009ec:	08000f3f 	.word	0x08000f3f
 80009f0:	08000f3f 	.word	0x08000f3f
 80009f4:	08000f3f 	.word	0x08000f3f
 80009f8:	08000f3f 	.word	0x08000f3f
 80009fc:	08000f3f 	.word	0x08000f3f
 8000a00:	08000f3f 	.word	0x08000f3f
 8000a04:	08000f3f 	.word	0x08000f3f
 8000a08:	08000f3f 	.word	0x08000f3f
 8000a0c:	08000f3f 	.word	0x08000f3f
 8000a10:	08000f3f 	.word	0x08000f3f
 8000a14:	08000f3f 	.word	0x08000f3f
 8000a18:	08000f3f 	.word	0x08000f3f
 8000a1c:	08000f3f 	.word	0x08000f3f
 8000a20:	08000efd 	.word	0x08000efd
	case 0x10: {
		printf("SDN1 ON\n");
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a26:	f016 fa37 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 fc7d 	bl	8009330 <HAL_GPIO_WritePin>
		break;
 8000a36:	e28d      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a3a:	f016 fa2d 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a40:	2104      	movs	r1, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 fc73 	bl	8009330 <HAL_GPIO_WritePin>
		break;
 8000a4a:	e283      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
 8000a4c:	24000c24 	.word	0x24000c24
 8000a50:	240005ec 	.word	0x240005ec
 8000a54:	080176b0 	.word	0x080176b0
 8000a58:	58020400 	.word	0x58020400
 8000a5c:	080176b8 	.word	0x080176b8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a60:	48bf      	ldr	r0, [pc, #764]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a62:	f016 fa19 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a66:	4bbf      	ldr	r3, [pc, #764]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a68:	2120      	movs	r1, #32
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 fc5f 	bl	8009330 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a72:	4bbd      	ldr	r3, [pc, #756]	; (8000d68 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		break;
 8000a78:	e26c      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a7a:	48bc      	ldr	r0, [pc, #752]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a7c:	f016 fa0c 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a80:	4bb8      	ldr	r3, [pc, #736]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a82:	2120      	movs	r1, #32
 8000a84:	2200      	movs	r2, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f008 fc52 	bl	8009330 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a8c:	4bb5      	ldr	r3, [pc, #724]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f008 fc4c 	bl	8009330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a98:	4bb5      	ldr	r3, [pc, #724]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f008 fc45 	bl	8009330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000aa6:	4bb2      	ldr	r3, [pc, #712]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	2200      	movs	r2, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 fc3e 	bl	8009330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ab4:	4bae      	ldr	r3, [pc, #696]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aba:	2200      	movs	r2, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f008 fc37 	bl	8009330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ac2:	4bab      	ldr	r3, [pc, #684]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f008 fc31 	bl	8009330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ace:	4ba8      	ldr	r3, [pc, #672]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f008 fc2b 	bl	8009330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ada:	4ba5      	ldr	r3, [pc, #660]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f008 fc24 	bl	8009330 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000ae8:	4b9f      	ldr	r3, [pc, #636]	; (8000d68 <HAL_UART_RxCpltCallback+0x6f0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000aee:	4ba1      	ldr	r3, [pc, #644]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000af4:	4ba0      	ldr	r3, [pc, #640]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000afa:	4ba0      	ldr	r3, [pc, #640]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b00:	4b9f      	ldr	r3, [pc, #636]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b06:	4b9f      	ldr	r3, [pc, #636]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b0c:	4b9e      	ldr	r3, [pc, #632]	; (8000d88 <HAL_UART_RxCpltCallback+0x710>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b12:	4b9e      	ldr	r3, [pc, #632]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b18:	4b9d      	ldr	r3, [pc, #628]	; (8000d90 <HAL_UART_RxCpltCallback+0x718>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]

		break;
 8000b1e:	e219      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b20:	489c      	ldr	r0, [pc, #624]	; (8000d94 <HAL_UART_RxCpltCallback+0x71c>)
 8000b22:	f016 f9b9 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b26:	4b92      	ldr	r3, [pc, #584]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f008 fbfe 	bl	8009330 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b34:	4b8f      	ldr	r3, [pc, #572]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
		break;
 8000b3a:	e20b      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b3c:	4896      	ldr	r0, [pc, #600]	; (8000d98 <HAL_UART_RxCpltCallback+0x720>)
 8000b3e:	f016 f9ab 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b42:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 fbf0 	bl	8009330 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b50:	4b88      	ldr	r3, [pc, #544]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
		break;
 8000b56:	e1fd      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b58:	4890      	ldr	r0, [pc, #576]	; (8000d9c <HAL_UART_RxCpltCallback+0x724>)
 8000b5a:	f016 f99d 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b5e:	4b84      	ldr	r3, [pc, #528]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	2201      	movs	r2, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f008 fbe3 	bl	8009330 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b6a:	4b83      	ldr	r3, [pc, #524]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
		break;
 8000b70:	e1f0      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b72:	488b      	ldr	r0, [pc, #556]	; (8000da0 <HAL_UART_RxCpltCallback+0x728>)
 8000b74:	f016 f990 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b78:	4b7d      	ldr	r3, [pc, #500]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 fbd6 	bl	8009330 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b84:	4b7c      	ldr	r3, [pc, #496]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
		break;
 8000b8a:	e1e3      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b8c:	4885      	ldr	r0, [pc, #532]	; (8000da4 <HAL_UART_RxCpltCallback+0x72c>)
 8000b8e:	f016 f983 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b92:	4b77      	ldr	r3, [pc, #476]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	2201      	movs	r2, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f008 fbc9 	bl	8009330 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000b9e:	4b77      	ldr	r3, [pc, #476]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
		break;
 8000ba4:	e1d6      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000ba6:	4880      	ldr	r0, [pc, #512]	; (8000da8 <HAL_UART_RxCpltCallback+0x730>)
 8000ba8:	f016 f976 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bac:	4b70      	ldr	r3, [pc, #448]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f008 fbbc 	bl	8009330 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bb8:	4b70      	ldr	r3, [pc, #448]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		break;
 8000bbe:	e1c9      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bc0:	487a      	ldr	r0, [pc, #488]	; (8000dac <HAL_UART_RxCpltCallback+0x734>)
 8000bc2:	f016 f969 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bc6:	4b6a      	ldr	r3, [pc, #424]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f008 fbae 	bl	8009330 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000bd4:	4b6a      	ldr	r3, [pc, #424]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
		break;
 8000bda:	e1bb      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bdc:	4874      	ldr	r0, [pc, #464]	; (8000db0 <HAL_UART_RxCpltCallback+0x738>)
 8000bde:	f016 f95b 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000be2:	4b63      	ldr	r3, [pc, #396]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	2200      	movs	r2, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 fba0 	bl	8009330 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000bf0:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		break;
 8000bf6:	e1ad      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000bf8:	486e      	ldr	r0, [pc, #440]	; (8000db4 <HAL_UART_RxCpltCallback+0x73c>)
 8000bfa:	f016 f94d 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c04:	2201      	movs	r2, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 fb92 	bl	8009330 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c0c:	4b5d      	ldr	r3, [pc, #372]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
		break;
 8000c12:	e19f      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c14:	4868      	ldr	r0, [pc, #416]	; (8000db8 <HAL_UART_RxCpltCallback+0x740>)
 8000c16:	f016 f93f 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c1a:	4b55      	ldr	r3, [pc, #340]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	2200      	movs	r2, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f008 fb84 	bl	8009330 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c28:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		break;
 8000c2e:	e191      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c30:	4862      	ldr	r0, [pc, #392]	; (8000dbc <HAL_UART_RxCpltCallback+0x744>)
 8000c32:	f016 f931 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c36:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f008 fb76 	bl	8009330 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c44:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
		break;
 8000c4a:	e183      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c4c:	485c      	ldr	r0, [pc, #368]	; (8000dc0 <HAL_UART_RxCpltCallback+0x748>)
 8000c4e:	f016 f923 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c52:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f008 fb68 	bl	8009330 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c60:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]

		break;
 8000c66:	e175      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c68:	4856      	ldr	r0, [pc, #344]	; (8000dc4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c6a:	f016 f915 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	2201      	movs	r2, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f008 fb5b 	bl	8009330 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <HAL_UART_RxCpltCallback+0x718>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
		break;
 8000c80:	e168      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c82:	4851      	ldr	r0, [pc, #324]	; (8000dc8 <HAL_UART_RxCpltCallback+0x750>)
 8000c84:	f016 f908 	bl	8016e98 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c88:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 fb4e 	bl	8009330 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000c94:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <HAL_UART_RxCpltCallback+0x718>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
		break;
 8000c9a:	e15b      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c9c:	484b      	ldr	r0, [pc, #300]	; (8000dcc <HAL_UART_RxCpltCallback+0x754>)
 8000c9e:	f016 f8fb 	bl	8016e98 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	4a49      	ldr	r2, [pc, #292]	; (8000dd0 <HAL_UART_RxCpltCallback+0x758>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4849      	ldr	r0, [pc, #292]	; (8000dd4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cae:	f004 ffa3 	bl	8005bf8 <HAL_DAC_Start_DMA>
		break;
 8000cb2:	e14f      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cb4:	4848      	ldr	r0, [pc, #288]	; (8000dd8 <HAL_UART_RxCpltCallback+0x760>)
 8000cb6:	f016 f8ef 	bl	8016e98 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4845      	ldr	r0, [pc, #276]	; (8000dd4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cbe:	f005 f85b 	bl	8005d78 <HAL_DAC_Stop_DMA>
		break;
 8000cc2:	e147      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cc4:	4845      	ldr	r0, [pc, #276]	; (8000ddc <HAL_UART_RxCpltCallback+0x764>)
 8000cc6:	f016 f8e7 	bl	8016e98 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cca:	210c      	movs	r1, #12
 8000ccc:	4844      	ldr	r0, [pc, #272]	; (8000de0 <HAL_UART_RxCpltCallback+0x768>)
 8000cce:	f00d ff33 	bl	800eb38 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000cd2:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f012 fb97 	bl	801340c <osEventFlagsSet>
		ERPA_ON = 1;
 8000cde:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <HAL_UART_RxCpltCallback+0x770>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000ce4:	4b41      	ldr	r3, [pc, #260]	; (8000dec <HAL_UART_RxCpltCallback+0x774>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
		break;
 8000cea:	e133      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cec:	4840      	ldr	r0, [pc, #256]	; (8000df0 <HAL_UART_RxCpltCallback+0x778>)
 8000cee:	f016 f8d3 	bl	8016e98 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cf2:	210c      	movs	r1, #12
 8000cf4:	483a      	ldr	r0, [pc, #232]	; (8000de0 <HAL_UART_RxCpltCallback+0x768>)
 8000cf6:	f00e f879 	bl	800edec <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <HAL_UART_RxCpltCallback+0x770>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
		break;
 8000d00:	e128      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d02:	483c      	ldr	r0, [pc, #240]	; (8000df4 <HAL_UART_RxCpltCallback+0x77c>)
 8000d04:	f016 f8c8 	bl	8016e98 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	483b      	ldr	r0, [pc, #236]	; (8000df8 <HAL_UART_RxCpltCallback+0x780>)
 8000d0c:	f00d ff14 	bl	800eb38 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d10:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_UART_RxCpltCallback+0x76c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f012 fb78 	bl	801340c <osEventFlagsSet>
		PMT_ON = 1;
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <HAL_UART_RxCpltCallback+0x784>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <HAL_UART_RxCpltCallback+0x788>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]
		break;
 8000d28:	e114      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d2a:	4836      	ldr	r0, [pc, #216]	; (8000e04 <HAL_UART_RxCpltCallback+0x78c>)
 8000d2c:	f016 f8b4 	bl	8016e98 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	4831      	ldr	r0, [pc, #196]	; (8000df8 <HAL_UART_RxCpltCallback+0x780>)
 8000d34:	f00e f85a 	bl	800edec <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d38:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_UART_RxCpltCallback+0x784>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
		break;
 8000d3e:	e109      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d40:	4831      	ldr	r0, [pc, #196]	; (8000e08 <HAL_UART_RxCpltCallback+0x790>)
 8000d42:	f016 f8a9 	bl	8016e98 <puts>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <HAL_UART_RxCpltCallback+0x76c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f012 fb5d 	bl	801340c <osEventFlagsSet>
		HK_ON = 1;
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_UART_RxCpltCallback+0x794>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_UART_RxCpltCallback+0x798>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
		break;
 8000d5e:	e0f9      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
 8000d60:	080176c4 	.word	0x080176c4
 8000d64:	58020400 	.word	0x58020400
 8000d68:	24000bd8 	.word	0x24000bd8
 8000d6c:	080176d0 	.word	0x080176d0
 8000d70:	58020800 	.word	0x58020800
 8000d74:	24000bd9 	.word	0x24000bd9
 8000d78:	24000bda 	.word	0x24000bda
 8000d7c:	24000bdb 	.word	0x24000bdb
 8000d80:	24000bdc 	.word	0x24000bdc
 8000d84:	24000bdd 	.word	0x24000bdd
 8000d88:	24000bde 	.word	0x24000bde
 8000d8c:	24000bdf 	.word	0x24000bdf
 8000d90:	24000be0 	.word	0x24000be0
 8000d94:	080176dc 	.word	0x080176dc
 8000d98:	080176e8 	.word	0x080176e8
 8000d9c:	080176f8 	.word	0x080176f8
 8000da0:	08017704 	.word	0x08017704
 8000da4:	08017710 	.word	0x08017710
 8000da8:	0801771c 	.word	0x0801771c
 8000dac:	0801772c 	.word	0x0801772c
 8000db0:	08017738 	.word	0x08017738
 8000db4:	08017744 	.word	0x08017744
 8000db8:	08017750 	.word	0x08017750
 8000dbc:	0801775c 	.word	0x0801775c
 8000dc0:	0801776c 	.word	0x0801776c
 8000dc4:	0801777c 	.word	0x0801777c
 8000dc8:	08017788 	.word	0x08017788
 8000dcc:	08017798 	.word	0x08017798
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	240002f4 	.word	0x240002f4
 8000dd8:	080177a8 	.word	0x080177a8
 8000ddc:	080177b8 	.word	0x080177b8
 8000de0:	24000554 	.word	0x24000554
 8000de4:	24000c20 	.word	0x24000c20
 8000de8:	24000c1b 	.word	0x24000c1b
 8000dec:	24000c14 	.word	0x24000c14
 8000df0:	080177c0 	.word	0x080177c0
 8000df4:	080177cc 	.word	0x080177cc
 8000df8:	24000508 	.word	0x24000508
 8000dfc:	24000c1a 	.word	0x24000c1a
 8000e00:	24000c10 	.word	0x24000c10
 8000e04:	080177d4 	.word	0x080177d4
 8000e08:	080177dc 	.word	0x080177dc
 8000e0c:	24000c1c 	.word	0x24000c1c
 8000e10:	24000c18 	.word	0x24000c18
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000e14:	4851      	ldr	r0, [pc, #324]	; (8000f5c <HAL_UART_RxCpltCallback+0x8e4>)
 8000e16:	f016 f83f 	bl	8016e98 <puts>
		HK_ON = 0;
 8000e1a:	4b51      	ldr	r3, [pc, #324]	; (8000f60 <HAL_UART_RxCpltCallback+0x8e8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
		break;
 8000e20:	e098      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e22:	4850      	ldr	r0, [pc, #320]	; (8000f64 <HAL_UART_RxCpltCallback+0x8ec>)
 8000e24:	f016 f838 	bl	8016e98 <puts>
		if (step < 17) {
 8000e28:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b10      	cmp	r3, #16
 8000e2e:	f200 808a 	bhi.w	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
			step += 2;
 8000e32:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3302      	adds	r3, #2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e3c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <HAL_UART_RxCpltCallback+0x8f4>)
 8000e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4848      	ldr	r0, [pc, #288]	; (8000f70 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e50:	f005 f835 	bl	8005ebe <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e54:	2100      	movs	r1, #0
 8000e56:	4846      	ldr	r0, [pc, #280]	; (8000f70 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e58:	f004 fe76 	bl	8005b48 <HAL_DAC_Start>
		}
		break;
 8000e5c:	e073      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e5e:	4845      	ldr	r0, [pc, #276]	; (8000f74 <HAL_UART_RxCpltCallback+0x8fc>)
 8000e60:	f016 f81a 	bl	8016e98 <puts>
		if (step > 3) {
 8000e64:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d96e      	bls.n	8000f4a <HAL_UART_RxCpltCallback+0x8d2>
			step -= 2;
 8000e6c:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3b02      	subs	r3, #2
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e76:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_UART_RxCpltCallback+0x8f4>)
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	4839      	ldr	r0, [pc, #228]	; (8000f70 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e8a:	f005 f818 	bl	8005ebe <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4837      	ldr	r0, [pc, #220]	; (8000f70 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e92:	f004 fe59 	bl	8005b48 <HAL_DAC_Start>
		}
		break;
 8000e96:	e058      	b.n	8000f4a <HAL_UART_RxCpltCallback+0x8d2>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e98:	4837      	ldr	r0, [pc, #220]	; (8000f78 <HAL_UART_RxCpltCallback+0x900>)
 8000e9a:	f015 fffd 	bl	8016e98 <puts>
		if (cadence <= 50000) {
 8000e9e:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d851      	bhi.n	8000f4e <HAL_UART_RxCpltCallback+0x8d6>
			cadence *= 2;
 8000eaa:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000eb2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000eb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb8:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ebe:	e046      	b.n	8000f4e <HAL_UART_RxCpltCallback+0x8d6>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ec0:	482f      	ldr	r0, [pc, #188]	; (8000f80 <HAL_UART_RxCpltCallback+0x908>)
 8000ec2:	f015 ffe9 	bl	8016e98 <puts>
		if (cadence >= 6250) {
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d93f      	bls.n	8000f52 <HAL_UART_RxCpltCallback+0x8da>
			cadence /= 2;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	4a28      	ldr	r2, [pc, #160]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000eda:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee0:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee6:	e034      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x8da>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000ee8:	4826      	ldr	r0, [pc, #152]	; (8000f84 <HAL_UART_RxCpltCallback+0x90c>)
 8000eea:	f015 ffd5 	bl	8016e98 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_UART_RxCpltCallback+0x910>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2116      	movs	r1, #22
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f012 fa89 	bl	801340c <osEventFlagsSet>
		break;
 8000efa:	e02b      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <HAL_UART_RxCpltCallback+0x914>)
 8000efe:	f015 ffcb 	bl	8016e98 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_UART_RxCpltCallback+0x918>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f014 f826 	bl	8014f58 <xTaskResumeFromISR>
		break;
 8000f0c:	e022      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f0e:	4821      	ldr	r0, [pc, #132]	; (8000f94 <HAL_UART_RxCpltCallback+0x91c>)
 8000f10:	f015 ffc2 	bl	8016e98 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_UART_RxCpltCallback+0x920>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f014 f81d 	bl	8014f58 <xTaskResumeFromISR>
		break;
 8000f1e:	e019      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xAF: {
		sync();
 8000f20:	f001 f9fa 	bl	8002318 <sync>
		break;
 8000f24:	e016      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xBF: {
		xTaskResumeFromISR(Science_taskHandle);
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_UART_RxCpltCallback+0x924>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f014 f814 	bl	8014f58 <xTaskResumeFromISR>
		break;
 8000f30:	e010      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0xCF: {
		xTaskResumeFromISR(Idle_taskHandle);
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_UART_RxCpltCallback+0x928>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f014 f80e 	bl	8014f58 <xTaskResumeFromISR>
		break;
 8000f3c:	e00a      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
	}
	default: {
		printf("Unknown Command\n");
 8000f3e:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <HAL_UART_RxCpltCallback+0x92c>)
 8000f40:	f015 ffaa 	bl	8016e98 <puts>
		break;
 8000f44:	e006      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f46:	bf00      	nop
 8000f48:	e004      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f4a:	bf00      	nop
 8000f4c:	e002      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f4e:	bf00      	nop
 8000f50:	e000      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x8dc>
		break;
 8000f52:	bf00      	nop
	}
	}
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	080177e4 	.word	0x080177e4
 8000f60:	24000c1c 	.word	0x24000c1c
 8000f64:	080177ec 	.word	0x080177ec
 8000f68:	24000008 	.word	0x24000008
 8000f6c:	2400000c 	.word	0x2400000c
 8000f70:	240002f4 	.word	0x240002f4
 8000f74:	080177f4 	.word	0x080177f4
 8000f78:	08017800 	.word	0x08017800
 8000f7c:	24000004 	.word	0x24000004
 8000f80:	0801780c 	.word	0x0801780c
 8000f84:	08017818 	.word	0x08017818
 8000f88:	24000c20 	.word	0x24000c20
 8000f8c:	08017828 	.word	0x08017828
 8000f90:	24000704 	.word	0x24000704
 8000f94:	08017834 	.word	0x08017834
 8000f98:	24000964 	.word	0x24000964
 8000f9c:	24000bd0 	.word	0x24000bd0
 8000fa0:	24000bd4 	.word	0x24000bd4
 8000fa4:	08017840 	.word	0x08017840

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f003 f838 	bl	8004020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f8c6 	bl	8001140 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fb4:	f000 f944 	bl	8001240 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f000 feba 	bl	8001d30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbc:	f000 fe80 	bl	8001cc0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fc0:	f000 fdc8 	bl	8001b54 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 fe14 	bl	8001bf0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fc8:	f000 fb50 	bl	800166c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fcc:	f000 fc46 	bl	800185c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fd0:	f000 fd4a 	bl	8001a68 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fd4:	f000 fc9a 	bl	800190c <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fd8:	f000 fa84 	bl	80014e4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fdc:	f000 f960 	bl	80012a0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fe0:	f000 fb12 	bl	8001608 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fe4:	f000 fbe2 	bl	80017ac <MX_SPI1_Init>
  MX_RTC_Init();
 8000fe8:	f000 fb82 	bl	80016f0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fec:	f012 f896 	bl	801311c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	2080      	movs	r0, #128	; 0x80
 8000ff6:	f012 fb06 	bl	8013606 <osMessageQueueNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <main+0x114>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8001000:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <main+0x118>)
 8001002:	2100      	movs	r1, #0
 8001004:	482f      	ldr	r0, [pc, #188]	; (80010c4 <main+0x11c>)
 8001006:	f012 f8d3 	bl	80131b0 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a2e      	ldr	r2, [pc, #184]	; (80010c8 <main+0x120>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8001010:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <main+0x124>)
 8001012:	2100      	movs	r1, #0
 8001014:	482e      	ldr	r0, [pc, #184]	; (80010d0 <main+0x128>)
 8001016:	f012 f8cb 	bl	80131b0 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a2d      	ldr	r2, [pc, #180]	; (80010d4 <main+0x12c>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001020:	4a2d      	ldr	r2, [pc, #180]	; (80010d8 <main+0x130>)
 8001022:	2100      	movs	r1, #0
 8001024:	482d      	ldr	r0, [pc, #180]	; (80010dc <main+0x134>)
 8001026:	f012 f8c3 	bl	80131b0 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <main+0x138>)
 800102e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8001030:	4a2c      	ldr	r2, [pc, #176]	; (80010e4 <main+0x13c>)
 8001032:	2100      	movs	r1, #0
 8001034:	482c      	ldr	r0, [pc, #176]	; (80010e8 <main+0x140>)
 8001036:	f012 f8bb 	bl	80131b0 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <main+0x144>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8001040:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <main+0x148>)
 8001042:	2100      	movs	r1, #0
 8001044:	482b      	ldr	r0, [pc, #172]	; (80010f4 <main+0x14c>)
 8001046:	f012 f8b3 	bl	80131b0 <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <main+0x150>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001050:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <main+0x154>)
 8001052:	2100      	movs	r1, #0
 8001054:	482a      	ldr	r0, [pc, #168]	; (8001100 <main+0x158>)
 8001056:	f012 f8ab 	bl	80131b0 <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <main+0x15c>)
 800105e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <main+0x160>)
 8001062:	2100      	movs	r1, #0
 8001064:	4829      	ldr	r0, [pc, #164]	; (800110c <main+0x164>)
 8001066:	f012 f8a3 	bl	80131b0 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a28      	ldr	r2, [pc, #160]	; (8001110 <main+0x168>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <main+0x16c>)
 8001072:	2100      	movs	r1, #0
 8001074:	4828      	ldr	r0, [pc, #160]	; (8001118 <main+0x170>)
 8001076:	f012 f89b 	bl	80131b0 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a27      	ldr	r2, [pc, #156]	; (800111c <main+0x174>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8001080:	4a27      	ldr	r2, [pc, #156]	; (8001120 <main+0x178>)
 8001082:	2100      	movs	r1, #0
 8001084:	4827      	ldr	r0, [pc, #156]	; (8001124 <main+0x17c>)
 8001086:	f012 f893 	bl	80131b0 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a26      	ldr	r2, [pc, #152]	; (8001128 <main+0x180>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8001090:	4a26      	ldr	r2, [pc, #152]	; (800112c <main+0x184>)
 8001092:	2100      	movs	r1, #0
 8001094:	4826      	ldr	r0, [pc, #152]	; (8001130 <main+0x188>)
 8001096:	f012 f88b 	bl	80131b0 <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a25      	ldr	r2, [pc, #148]	; (8001134 <main+0x18c>)
 800109e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f012 f973 	bl	801338c <osEventFlagsNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <main+0x190>)
 80010aa:	6013      	str	r3, [r2, #0]
	system_setup();
 80010ac:	f001 f99e 	bl	80023ec <system_setup>
	printf("Starting kernal...\n");
 80010b0:	4822      	ldr	r0, [pc, #136]	; (800113c <main+0x194>)
 80010b2:	f015 fef1 	bl	8016e98 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010b6:	f012 f855 	bl	8013164 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010ba:	e7fe      	b.n	80010ba <main+0x112>
 80010bc:	24000c04 	.word	0x24000c04
 80010c0:	0801789c 	.word	0x0801789c
 80010c4:	08002b5d 	.word	0x08002b5d
 80010c8:	240006f8 	.word	0x240006f8
 80010cc:	080178c0 	.word	0x080178c0
 80010d0:	08002ba1 	.word	0x08002ba1
 80010d4:	240006fc 	.word	0x240006fc
 80010d8:	080178e4 	.word	0x080178e4
 80010dc:	08002be5 	.word	0x08002be5
 80010e0:	24000700 	.word	0x24000700
 80010e4:	08017908 	.word	0x08017908
 80010e8:	08002c29 	.word	0x08002c29
 80010ec:	24000704 	.word	0x24000704
 80010f0:	0801792c 	.word	0x0801792c
 80010f4:	08002cd1 	.word	0x08002cd1
 80010f8:	24000964 	.word	0x24000964
 80010fc:	08017950 	.word	0x08017950
 8001100:	08002d79 	.word	0x08002d79
 8001104:	24000bc4 	.word	0x24000bc4
 8001108:	08017974 	.word	0x08017974
 800110c:	08002e31 	.word	0x08002e31
 8001110:	24000bc8 	.word	0x24000bc8
 8001114:	08017998 	.word	0x08017998
 8001118:	08002f29 	.word	0x08002f29
 800111c:	24000bcc 	.word	0x24000bcc
 8001120:	080179bc 	.word	0x080179bc
 8001124:	08002f65 	.word	0x08002f65
 8001128:	24000bd0 	.word	0x24000bd0
 800112c:	080179e0 	.word	0x080179e0
 8001130:	080030bd 	.word	0x080030bd
 8001134:	24000bd4 	.word	0x24000bd4
 8001138:	24000c20 	.word	0x24000c20
 800113c:	08017850 	.word	0x08017850

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09c      	sub	sp, #112	; 0x70
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	224c      	movs	r2, #76	; 0x4c
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f015 fd4c 	bl	8016bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2220      	movs	r2, #32
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f015 fd46 	bl	8016bec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001160:	2002      	movs	r0, #2
 8001162:	f008 ff47 	bl	8009ff4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <SystemClock_Config+0xf8>)
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <SystemClock_Config+0xf8>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <SystemClock_Config+0xf8>)
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <SystemClock_Config+0xfc>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001188:	4a2c      	ldr	r2, [pc, #176]	; (800123c <SystemClock_Config+0xfc>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <SystemClock_Config+0xfc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800119c:	bf00      	nop
 800119e:	4b27      	ldr	r3, [pc, #156]	; (800123c <SystemClock_Config+0xfc>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011aa:	d1f8      	bne.n	800119e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011ac:	2303      	movs	r3, #3
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80011b6:	2309      	movs	r3, #9
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ba:	2340      	movs	r3, #64	; 0x40
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2302      	movs	r3, #2
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c2:	2302      	movs	r3, #2
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011c6:	2304      	movs	r3, #4
 80011c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011ca:	2320      	movs	r3, #32
 80011cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011d2:	2304      	movs	r3, #4
 80011d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011da:	2308      	movs	r3, #8
 80011dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011de:	2300      	movs	r3, #0
 80011e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 ff3c 	bl	800a068 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011f6:	f001 fffb 	bl	80031f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	233f      	movs	r3, #63	; 0x3f
 80011fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2303      	movs	r3, #3
 8001200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2101      	movs	r1, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f009 fb7c 	bl	800a91c <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800122a:	f001 ffe1 	bl	80031f0 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3770      	adds	r7, #112	; 0x70
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	58000400 	.word	0x58000400
 800123c:	58024800 	.word	0x58024800

08001240 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b0      	sub	sp, #192	; 0xc0
 8001244:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	22c0      	movs	r2, #192	; 0xc0
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f015 fccd 	bl	8016bec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001252:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800125e:	2304      	movs	r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001262:	2320      	movs	r3, #32
 8001264:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001266:	2308      	movs	r3, #8
 8001268:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800126a:	2304      	movs	r3, #4
 800126c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4618      	mov	r0, r3
 8001288:	f009 ff16 	bl	800b0b8 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001292:	f001 ffad 	bl	80031f0 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	37c0      	adds	r7, #192	; 0xc0
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c4:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012c6:	4a7b      	ldr	r2, [pc, #492]	; (80014b4 <MX_ADC1_Init+0x214>)
 80012c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012ca:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d2:	4b77      	ldr	r3, [pc, #476]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012d4:	2208      	movs	r2, #8
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d8:	4b75      	ldr	r3, [pc, #468]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012da:	2201      	movs	r2, #1
 80012dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012de:	4b74      	ldr	r3, [pc, #464]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e4:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ea:	4b71      	ldr	r3, [pc, #452]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012f0:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012f2:	220b      	movs	r2, #11
 80012f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b6e      	ldr	r3, [pc, #440]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fc:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001302:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <MX_ADC1_Init+0x210>)
 800130a:	2203      	movs	r2, #3
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800130e:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001316:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800131c:	4b64      	ldr	r3, [pc, #400]	; (80014b0 <MX_ADC1_Init+0x210>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001326:	f003 f907 	bl	8004538 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001330:	f001 ff5e 	bl	80031f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	485c      	ldr	r0, [pc, #368]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001340:	f004 fa22 	bl	8005788 <HAL_ADCEx_MultiModeConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800134a:	f001 ff51 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800134e:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <MX_ADC1_Init+0x218>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001352:	2306      	movs	r3, #6
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001356:	2307      	movs	r3, #7
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001360:	2304      	movs	r3, #4
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	484f      	ldr	r0, [pc, #316]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001372:	f003 fb65 	bl	8004a40 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800137c:	f001 ff38 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001380:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <MX_ADC1_Init+0x21c>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001384:	230c      	movs	r3, #12
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4848      	ldr	r0, [pc, #288]	; (80014b0 <MX_ADC1_Init+0x210>)
 800138e:	f003 fb57 	bl	8004a40 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001398:	f001 ff2a 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800139c:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MX_ADC1_Init+0x220>)
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013a0:	2312      	movs	r3, #18
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4841      	ldr	r0, [pc, #260]	; (80014b0 <MX_ADC1_Init+0x210>)
 80013aa:	f003 fb49 	bl	8004a40 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013b4:	f001 ff1c 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <MX_ADC1_Init+0x224>)
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013bc:	2318      	movs	r3, #24
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	483a      	ldr	r0, [pc, #232]	; (80014b0 <MX_ADC1_Init+0x210>)
 80013c6:	f003 fb3b 	bl	8004a40 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013d0:	f001 ff0e 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013d4:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <MX_ADC1_Init+0x228>)
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4833      	ldr	r0, [pc, #204]	; (80014b0 <MX_ADC1_Init+0x210>)
 80013e4:	f003 fb2c 	bl	8004a40 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013ee:	f001 feff 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013f6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	482b      	ldr	r0, [pc, #172]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001402:	f003 fb1d 	bl	8004a40 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800140c:	f001 fef0 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_ADC1_Init+0x230>)
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001414:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4824      	ldr	r0, [pc, #144]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001420:	f003 fb0e 	bl	8004a40 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800142a:	f001 fee1 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_ADC1_Init+0x234>)
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001432:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	481c      	ldr	r0, [pc, #112]	; (80014b0 <MX_ADC1_Init+0x210>)
 800143e:	f003 faff 	bl	8004a40 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001448:	f001 fed2 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_ADC1_Init+0x238>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001450:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_ADC1_Init+0x210>)
 800145c:	f003 faf0 	bl	8004a40 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001466:	f001 fec3 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_ADC1_Init+0x23c>)
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_ADC1_Init+0x210>)
 800147a:	f003 fae1 	bl	8004a40 <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001484:	f001 feb4 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_ADC1_Init+0x240>)
 800148a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800148c:	f240 2306 	movw	r3, #518	; 0x206
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001498:	f003 fad2 	bl	8004a40 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014a2:	f001 fea5 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2400013c 	.word	0x2400013c
 80014b4:	40022000 	.word	0x40022000
 80014b8:	0c900008 	.word	0x0c900008
 80014bc:	10c00010 	.word	0x10c00010
 80014c0:	14f00020 	.word	0x14f00020
 80014c4:	1d500080 	.word	0x1d500080
 80014c8:	21800100 	.word	0x21800100
 80014cc:	25b00200 	.word	0x25b00200
 80014d0:	2a000400 	.word	0x2a000400
 80014d4:	2e300800 	.word	0x2e300800
 80014d8:	3ac04000 	.word	0x3ac04000
 80014dc:	3ef08000 	.word	0x3ef08000
 80014e0:	47520000 	.word	0x47520000

080014e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <MX_ADC3_Init+0x110>)
 80014fe:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <MX_ADC3_Init+0x114>)
 8001500:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001504:	2208      	movs	r2, #8
 8001506:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <MX_ADC3_Init+0x110>)
 800150a:	2201      	movs	r2, #1
 800150c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001510:	2204      	movs	r2, #4
 8001512:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001516:	2200      	movs	r2, #0
 8001518:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <MX_ADC3_Init+0x110>)
 800151c:	2201      	movs	r2, #1
 800151e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001522:	2204      	movs	r2, #4
 8001524:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001528:	2200      	movs	r2, #0
 800152a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <MX_ADC3_Init+0x110>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <MX_ADC3_Init+0x110>)
 800153a:	2203      	movs	r2, #3
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_ADC3_Init+0x110>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001554:	4827      	ldr	r0, [pc, #156]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001556:	f002 ffef 	bl	8004538 <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001560:	f001 fe46 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <MX_ADC3_Init+0x118>)
 8001566:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2306      	movs	r3, #6
 800156a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800156c:	2307      	movs	r3, #7
 800156e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001570:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001574:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001576:	2304      	movs	r3, #4
 8001578:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001588:	f003 fa5a 	bl	8004a40 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001592:	f001 fe2d 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_ADC3_Init+0x11c>)
 8001598:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800159a:	230c      	movs	r3, #12
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <MX_ADC3_Init+0x110>)
 80015a4:	f003 fa4c 	bl	8004a40 <HAL_ADC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015ae:	f001 fe1f 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015b2:	2301      	movs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015b6:	2312      	movs	r3, #18
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_ADC3_Init+0x110>)
 80015c0:	f003 fa3e 	bl	8004a40 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015ca:	f001 fe11 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_ADC3_Init+0x120>)
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015d2:	2318      	movs	r3, #24
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_ADC3_Init+0x110>)
 80015dc:	f003 fa30 	bl	8004a40 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015e6:	f001 fe03 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	240001a0 	.word	0x240001a0
 80015f8:	58026000 	.word	0x58026000
 80015fc:	cb840000 	.word	0xcb840000
 8001600:	cfb80000 	.word	0xcfb80000
 8001604:	04300002 	.word	0x04300002

08001608 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2224      	movs	r2, #36	; 0x24
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f015 fae9 	bl	8016bec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_DAC1_Init+0x5c>)
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_DAC1_Init+0x60>)
 800161e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_DAC1_Init+0x5c>)
 8001622:	f004 fa6f 	bl	8005b04 <HAL_DAC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800162c:	f001 fde0 	bl	80031f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001634:	230a      	movs	r3, #10
 8001636:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_DAC1_Init+0x5c>)
 800164c:	f004 fc8a 	bl	8005f64 <HAL_DAC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001656:	f001 fdcb 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	240002f4 	.word	0x240002f4
 8001668:	40007400 	.word	0x40007400

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001672:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <MX_I2C1_Init+0x7c>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <MX_I2C1_Init+0x80>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_I2C1_Init+0x78>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001684:	2201      	movs	r2, #1
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_I2C1_Init+0x78>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_I2C1_Init+0x78>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_I2C1_Init+0x78>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a6:	480f      	ldr	r0, [pc, #60]	; (80016e4 <MX_I2C1_Init+0x78>)
 80016a8:	f007 fe5c 	bl	8009364 <HAL_I2C_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016b2:	f001 fd9d 	bl	80031f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b6:	2100      	movs	r1, #0
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <MX_I2C1_Init+0x78>)
 80016ba:	f008 fba3 	bl	8009e04 <HAL_I2CEx_ConfigAnalogFilter>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016c4:	f001 fd94 	bl	80031f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_I2C1_Init+0x78>)
 80016cc:	f008 fbe5 	bl	8009e9a <HAL_I2CEx_ConfigDigitalFilter>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f001 fd8b 	bl	80031f0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f008 fc2a 	bl	8009f34 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	24000380 	.word	0x24000380
 80016e8:	40005400 	.word	0x40005400
 80016ec:	0020081f 	.word	0x0020081f

080016f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001704:	2300      	movs	r3, #0
 8001706:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <MX_RTC_Init+0xb4>)
 800170a:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <MX_RTC_Init+0xb8>)
 800170c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_RTC_Init+0xb4>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <MX_RTC_Init+0xb4>)
 8001716:	2263      	movs	r2, #99	; 0x63
 8001718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_RTC_Init+0xb4>)
 800171c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001720:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <MX_RTC_Init+0xb4>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_RTC_Init+0xb4>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_RTC_Init+0xb4>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_RTC_Init+0xb4>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800173a:	481a      	ldr	r0, [pc, #104]	; (80017a4 <MX_RTC_Init+0xb4>)
 800173c:	f00c f9ba 	bl	800dab4 <HAL_RTC_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001746:	f001 fd53 	bl	80031f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800174a:	2300      	movs	r3, #0
 800174c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800174e:	2300      	movs	r3, #0
 8001750:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001752:	2300      	movs	r3, #0
 8001754:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2201      	movs	r2, #1
 8001762:	4619      	mov	r1, r3
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <MX_RTC_Init+0xb4>)
 8001766:	f00c fa27 	bl	800dbb8 <HAL_RTC_SetTime>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001770:	f001 fd3e 	bl	80031f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001774:	2301      	movs	r3, #1
 8001776:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001778:	2301      	movs	r3, #1
 800177a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800177c:	2301      	movs	r3, #1
 800177e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001780:	2300      	movs	r3, #0
 8001782:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	2201      	movs	r2, #1
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_RTC_Init+0xb4>)
 800178c:	f00c fb0e 	bl	800ddac <HAL_RTC_SetDate>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001796:	f001 fd2b 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	240003d4 	.word	0x240003d4
 80017a8:	58004000 	.word	0x58004000

080017ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017b2:	4a29      	ldr	r2, [pc, #164]	; (8001858 <MX_SPI1_Init+0xac>)
 80017b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017c8:	220f      	movs	r2, #15
 80017ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017e2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_SPI1_Init+0xa8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_SPI1_Init+0xa8>)
 8001802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_SPI1_Init+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_SPI1_Init+0xa8>)
 8001816:	2200      	movs	r2, #0
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_SPI1_Init+0xa8>)
 800181c:	2200      	movs	r2, #0
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_SPI1_Init+0xa8>)
 8001822:	2200      	movs	r2, #0
 8001824:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_SPI1_Init+0xa8>)
 8001828:	2200      	movs	r2, #0
 800182a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_SPI1_Init+0xa8>)
 800182e:	2200      	movs	r2, #0
 8001830:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_SPI1_Init+0xa8>)
 8001834:	2200      	movs	r2, #0
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_SPI1_Init+0xa8>)
 800183a:	2200      	movs	r2, #0
 800183c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_SPI1_Init+0xa8>)
 8001840:	f00c fc5a 	bl	800e0f8 <HAL_SPI_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800184a:	f001 fcd1 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	240003f8 	.word	0x240003f8
 8001858:	40013000 	.word	0x40013000

0800185c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <MX_SPI2_Init+0xa8>)
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <MX_SPI2_Init+0xac>)
 8001864:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <MX_SPI2_Init+0xa8>)
 8001868:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800186c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <MX_SPI2_Init+0xa8>)
 8001870:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001874:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001876:	4b23      	ldr	r3, [pc, #140]	; (8001904 <MX_SPI2_Init+0xa8>)
 8001878:	220f      	movs	r2, #15
 800187a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <MX_SPI2_Init+0xa8>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MX_SPI2_Init+0xa8>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_SPI2_Init+0xa8>)
 800188a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800188e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_SPI2_Init+0xa8>)
 8001892:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001896:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_SPI2_Init+0xa8>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_SPI2_Init+0xa8>)
 80018f0:	f00c fc02 	bl	800e0f8 <HAL_SPI_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018fa:	f001 fc79 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	24000480 	.word	0x24000480
 8001908:	40003800 	.word	0x40003800

0800190c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b09a      	sub	sp, #104	; 0x68
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	222c      	movs	r2, #44	; 0x2c
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f015 f950 	bl	8016bec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <MX_TIM1_Init+0x154>)
 800194e:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <MX_TIM1_Init+0x158>)
 8001950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <MX_TIM1_Init+0x154>)
 8001954:	2231      	movs	r2, #49	; 0x31
 8001956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <MX_TIM1_Init+0x154>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <MX_TIM1_Init+0x154>)
 8001960:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001964:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <MX_TIM1_Init+0x154>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800196c:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <MX_TIM1_Init+0x154>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <MX_TIM1_Init+0x154>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001978:	4839      	ldr	r0, [pc, #228]	; (8001a60 <MX_TIM1_Init+0x154>)
 800197a:	f00d f80e 	bl	800e99a <HAL_TIM_Base_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001984:	f001 fc34 	bl	80031f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800198e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001992:	4619      	mov	r1, r3
 8001994:	4832      	ldr	r0, [pc, #200]	; (8001a60 <MX_TIM1_Init+0x154>)
 8001996:	f00d fd89 	bl	800f4ac <HAL_TIM_ConfigClockSource>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019a0:	f001 fc26 	bl	80031f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019a4:	482e      	ldr	r0, [pc, #184]	; (8001a60 <MX_TIM1_Init+0x154>)
 80019a6:	f00d fb05 	bl	800efb4 <HAL_TIM_PWM_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019b0:	f001 fc1e 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c4:	4619      	mov	r1, r3
 80019c6:	4826      	ldr	r0, [pc, #152]	; (8001a60 <MX_TIM1_Init+0x154>)
 80019c8:	f00e fac6 	bl	800ff58 <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019d2:	f001 fc0d 	bl	80031f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d6:	2360      	movs	r3, #96	; 0x60
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80019da:	f240 13df 	movw	r3, #479	; 0x1df
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	4818      	ldr	r0, [pc, #96]	; (8001a60 <MX_TIM1_Init+0x154>)
 80019fe:	f00d fc41 	bl	800f284 <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001a08:	f001 fbf2 	bl	80031f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <MX_TIM1_Init+0x154>)
 8001a42:	f00e fb17 	bl	8010074 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001a4c:	f001 fbd0 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <MX_TIM1_Init+0x154>)
 8001a52:	f001 ff5d 	bl	8003910 <HAL_TIM_MspPostInit>

}
 8001a56:	bf00      	nop
 8001a58:	3768      	adds	r7, #104	; 0x68
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	24000508 	.word	0x24000508
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001aa4:	2231      	movs	r2, #49	; 0x31
 8001aa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001ab0:	f640 4234 	movw	r2, #3124	; 0xc34
 8001ab4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ac2:	4823      	ldr	r0, [pc, #140]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001ac4:	f00c ff69 	bl	800e99a <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ace:	f001 fb8f 	bl	80031f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001adc:	4619      	mov	r1, r3
 8001ade:	481c      	ldr	r0, [pc, #112]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001ae0:	f00d fce4 	bl	800f4ac <HAL_TIM_ConfigClockSource>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001aea:	f001 fb81 	bl	80031f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aee:	4818      	ldr	r0, [pc, #96]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001af0:	f00d fa60 	bl	800efb4 <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001afa:	f001 fb79 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001afe:	2320      	movs	r3, #32
 8001b00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001b0e:	f00e fa23 	bl	800ff58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b18:	f001 fb6a 	bl	80031f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1c:	2360      	movs	r3, #96	; 0x60
 8001b1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	220c      	movs	r2, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001b34:	f00d fba6 	bl	800f284 <HAL_TIM_PWM_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b3e:	f001 fb57 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <MX_TIM2_Init+0xe8>)
 8001b44:	f001 fee4 	bl	8003910 <HAL_TIM_MspPostInit>

}
 8001b48:	bf00      	nop
 8001b4a:	3738      	adds	r7, #56	; 0x38
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24000554 	.word	0x24000554

08001b54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001b7a:	2263      	movs	r2, #99	; 0x63
 8001b7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001b86:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b98:	4813      	ldr	r0, [pc, #76]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001b9a:	f00c fefe 	bl	800e99a <HAL_TIM_Base_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ba4:	f001 fb24 	bl	80031f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001bb6:	f00d fc79 	bl	800f4ac <HAL_TIM_ConfigClockSource>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bc0:	f001 fb16 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_TIM3_Init+0x94>)
 8001bd2:	f00e f9c1 	bl	800ff58 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bdc:	f001 fb08 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	240005a0 	.word	0x240005a0
 8001bec:	40000400 	.word	0x40000400

08001bf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001bf6:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <MX_USART1_UART_Init+0xcc>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001bfc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c38:	481f      	ldr	r0, [pc, #124]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c3a:	f00e fab7 	bl	80101ac <HAL_UART_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c44:	f001 fad4 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	481b      	ldr	r0, [pc, #108]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c4c:	f011 f957 	bl	8012efe <HAL_UARTEx_SetTxFifoThreshold>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c56:	f001 facb 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c5e:	f011 f98c 	bl	8012f7a <HAL_UARTEx_SetRxFifoThreshold>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c68:	f001 fac2 	bl	80031f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c6c:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c6e:	f011 f90d 	bl	8012e8c <HAL_UARTEx_DisableFifoMode>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c78:	f001 faba 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001c7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c82:	f011 f97a 	bl	8012f7a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001c86:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c88:	f011 f8c5 	bl	8012e16 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001c8c:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c8e:	f011 f88f 	bl	8012db0 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ca0:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <MX_USART1_UART_Init+0xc8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cb0:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	240005ec 	.word	0x240005ec
 8001cbc:	40011000 	.word	0x40011000

08001cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_DMA_Init+0x6c>)
 8001cc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <MX_DMA_Init+0x6c>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_DMA_Init+0x6c>)
 8001cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	200b      	movs	r0, #11
 8001cea:	f003 fee3 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cee:	200b      	movs	r0, #11
 8001cf0:	f003 fefa 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	200c      	movs	r0, #12
 8001cfa:	f003 fedb 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001cfe:	200c      	movs	r0, #12
 8001d00:	f003 fef2 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2105      	movs	r1, #5
 8001d08:	200d      	movs	r0, #13
 8001d0a:	f003 fed3 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d0e:	200d      	movs	r0, #13
 8001d10:	f003 feea 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2105      	movs	r1, #5
 8001d18:	2010      	movs	r0, #16
 8001d1a:	f003 fecb 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f003 fee2 	bl	8005ae8 <HAL_NVIC_EnableIRQ>

}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58024400 	.word	0x58024400

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d56:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6a:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_GPIO_Init+0xe8>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <MX_GPIO_Init+0xec>)
 8001dc6:	f007 fab3 	bl	8009330 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2164      	movs	r1, #100	; 0x64
 8001dce:	4814      	ldr	r0, [pc, #80]	; (8001e20 <MX_GPIO_Init+0xf0>)
 8001dd0:	f007 faae 	bl	8009330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001dd4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001dd8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	480b      	ldr	r0, [pc, #44]	; (8001e1c <MX_GPIO_Init+0xec>)
 8001dee:	f007 f8d7 	bl	8008fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001df2:	2364      	movs	r3, #100	; 0x64
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_GPIO_Init+0xf0>)
 8001e0a:	f007 f8c9 	bl	8008fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58020800 	.word	0x58020800
 8001e20:	58020400 	.word	0x58020400

08001e24 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	b299      	uxth	r1, r3
 8001e36:	f107 0208 	add.w	r2, r7, #8
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2301      	movs	r3, #1
 8001e42:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <poll_i2c_sensor+0x7c>)
 8001e44:	f007 fb2a 	bl	800949c <HAL_I2C_Master_Transmit>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e4c:	7b7b      	ldrb	r3, [r7, #13]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e52:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <poll_i2c_sensor+0x80>)
 8001e54:	f015 f820 	bl	8016e98 <puts>
 8001e58:	e01c      	b.n	8001e94 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	b299      	uxth	r1, r3
 8001e5e:	f107 0208 	add.w	r2, r7, #8
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2302      	movs	r3, #2
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <poll_i2c_sensor+0x7c>)
 8001e6c:	f007 fc2e 	bl	80096cc <HAL_I2C_Master_Receive>
 8001e70:	4603      	mov	r3, r0
 8001e72:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <poll_i2c_sensor+0x84>)
 8001e7c:	f015 f80c 	bl	8016e98 <puts>
 8001e80:	e008      	b.n	8001e94 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e82:	7a3b      	ldrb	r3, [r7, #8]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e8c:	7a7a      	ldrb	r2, [r7, #9]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	10db      	asrs	r3, r3, #3
 8001e92:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	24000380 	.word	0x24000380
 8001ea4:	08017864 	.word	0x08017864
 8001ea8:	08017874 	.word	0x08017874

08001eac <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001eb4:	f107 010c 	add.w	r1, r7, #12
 8001eb8:	2301      	movs	r3, #1
 8001eba:	2201      	movs	r2, #1
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <receive_pmt_spi+0x44>)
 8001ebe:	f00c fa3f 	bl	800e340 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001ec6:	7b7b      	ldrb	r3, [r7, #13]
 8001ec8:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <receive_pmt_spi+0x44>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <receive_pmt_spi+0x44>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7bba      	ldrb	r2, [r7, #14]
 8001ede:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	701a      	strb	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	240003f8 	.word	0x240003f8

08001ef4 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001efc:	f107 010c 	add.w	r1, r7, #12
 8001f00:	2364      	movs	r3, #100	; 0x64
 8001f02:	2201      	movs	r2, #1
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <receive_erpa_spi+0x44>)
 8001f06:	f00c fa1b 	bl	800e340 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f0e:	7b7b      	ldrb	r3, [r7, #13]
 8001f10:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <receive_erpa_spi+0x44>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <receive_erpa_spi+0x44>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f20:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7bba      	ldrb	r2, [r7, #14]
 8001f26:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	701a      	strb	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	24000480 	.word	0x24000480

08001f3c <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <receive_erpa_adc+0x20>)
 8001f46:	885b      	ldrh	r3, [r3, #2]
 8001f48:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	89fa      	ldrh	r2, [r7, #14]
 8001f4e:	801a      	strh	r2, [r3, #0]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	24000c80 	.word	0x24000c80

08001f60 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f68:	2390      	movs	r3, #144	; 0x90
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff5a 	bl	8001e24 <poll_i2c_sensor>
 8001f70:	4603      	mov	r3, r0
 8001f72:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f74:	2394      	movs	r3, #148	; 0x94
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff54 	bl	8001e24 <poll_i2c_sensor>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f80:	2392      	movs	r3, #146	; 0x92
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff4e 	bl	8001e24 <poll_i2c_sensor>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f8c:	2396      	movs	r3, #150	; 0x96
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff48 	bl	8001e24 <poll_i2c_sensor>
 8001f94:	4603      	mov	r3, r0
 8001f96:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	89fa      	ldrh	r2, [r7, #14]
 8001f9c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	89ba      	ldrh	r2, [r7, #12]
 8001fa4:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	897a      	ldrh	r2, [r7, #10]
 8001fac:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3306      	adds	r3, #6
 8001fb2:	893a      	ldrh	r2, [r7, #8]
 8001fb4:	801a      	strh	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <receive_hk_adc1+0xa0>)
 8001fca:	8a9b      	ldrh	r3, [r3, #20]
 8001fcc:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <receive_hk_adc1+0xa0>)
 8001fd0:	8a1b      	ldrh	r3, [r3, #16]
 8001fd2:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <receive_hk_adc1+0xa0>)
 8001fd6:	899b      	ldrh	r3, [r3, #12]
 8001fd8:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <receive_hk_adc1+0xa0>)
 8001fdc:	8a5b      	ldrh	r3, [r3, #18]
 8001fde:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <receive_hk_adc1+0xa0>)
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <receive_hk_adc1+0xa0>)
 8001fe8:	88db      	ldrh	r3, [r3, #6]
 8001fea:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <receive_hk_adc1+0xa0>)
 8001fee:	89db      	ldrh	r3, [r3, #14]
 8001ff0:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <receive_hk_adc1+0xa0>)
 8001ff4:	891b      	ldrh	r3, [r3, #8]
 8001ff6:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <receive_hk_adc1+0xa0>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <receive_hk_adc1+0xa0>)
 8002000:	895b      	ldrh	r3, [r3, #10]
 8002002:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	8bfa      	ldrh	r2, [r7, #30]
 8002008:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3302      	adds	r3, #2
 800200e:	8bba      	ldrh	r2, [r7, #28]
 8002010:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	8b7a      	ldrh	r2, [r7, #26]
 8002018:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3306      	adds	r3, #6
 800201e:	8b3a      	ldrh	r2, [r7, #24]
 8002020:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3308      	adds	r3, #8
 8002026:	8afa      	ldrh	r2, [r7, #22]
 8002028:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	330a      	adds	r3, #10
 800202e:	8aba      	ldrh	r2, [r7, #20]
 8002030:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	330c      	adds	r3, #12
 8002036:	8a7a      	ldrh	r2, [r7, #18]
 8002038:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	330e      	adds	r3, #14
 800203e:	8a3a      	ldrh	r2, [r7, #16]
 8002040:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3310      	adds	r3, #16
 8002046:	89fa      	ldrh	r2, [r7, #14]
 8002048:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3312      	adds	r3, #18
 800204e:	89ba      	ldrh	r2, [r7, #12]
 8002050:	801a      	strh	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	24000c80 	.word	0x24000c80

08002064 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <receive_hk_adc3+0x4c>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <receive_hk_adc3+0x4c>)
 8002074:	885b      	ldrh	r3, [r3, #2]
 8002076:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <receive_hk_adc3+0x4c>)
 800207a:	889b      	ldrh	r3, [r3, #4]
 800207c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <receive_hk_adc3+0x4c>)
 8002080:	88db      	ldrh	r3, [r3, #6]
 8002082:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	89fa      	ldrh	r2, [r7, #14]
 8002088:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3302      	adds	r3, #2
 800208e:	89ba      	ldrh	r2, [r7, #12]
 8002090:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	897a      	ldrh	r2, [r7, #10]
 8002098:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3306      	adds	r3, #6
 800209e:	893a      	ldrh	r2, [r7, #8]
 80020a0:	801a      	strh	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	24000ca0 	.word	0x24000ca0

080020b4 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <get_current_step+0xc0>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d04a      	beq.n	8002160 <get_current_step+0xac>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d0:	da48      	bge.n	8002164 <get_current_step+0xb0>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020d8:	4293      	cmp	r3, r2
 80020da:	d03f      	beq.n	800215c <get_current_step+0xa8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020e2:	4293      	cmp	r3, r2
 80020e4:	dc3e      	bgt.n	8002164 <get_current_step+0xb0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d033      	beq.n	8002158 <get_current_step+0xa4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80020f6:	da35      	bge.n	8002164 <get_current_step+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020fe:	4293      	cmp	r3, r2
 8002100:	d028      	beq.n	8002154 <get_current_step+0xa0>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002108:	4293      	cmp	r3, r2
 800210a:	dc2b      	bgt.n	8002164 <get_current_step+0xb0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f240 7245 	movw	r2, #1861	; 0x745
 8002112:	4293      	cmp	r3, r2
 8002114:	d01c      	beq.n	8002150 <get_current_step+0x9c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f240 7245 	movw	r2, #1861	; 0x745
 800211c:	4293      	cmp	r3, r2
 800211e:	dc21      	bgt.n	8002164 <get_current_step+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002126:	4293      	cmp	r3, r2
 8002128:	d010      	beq.n	800214c <get_current_step+0x98>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002130:	4293      	cmp	r3, r2
 8002132:	dc17      	bgt.n	8002164 <get_current_step+0xb0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <get_current_step+0x90>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002140:	d002      	beq.n	8002148 <get_current_step+0x94>
 8002142:	e00f      	b.n	8002164 <get_current_step+0xb0>
	case 0:
		return 0;
 8002144:	2300      	movs	r3, #0
 8002146:	e00e      	b.n	8002166 <get_current_step+0xb2>
	case 620:
		return 1;
 8002148:	2301      	movs	r3, #1
 800214a:	e00c      	b.n	8002166 <get_current_step+0xb2>
	case 1241:
		return 2;
 800214c:	2302      	movs	r3, #2
 800214e:	e00a      	b.n	8002166 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002150:	2303      	movs	r3, #3
 8002152:	e008      	b.n	8002166 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002154:	2304      	movs	r3, #4
 8002156:	e006      	b.n	8002166 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002158:	2305      	movs	r3, #5
 800215a:	e004      	b.n	8002166 <get_current_step+0xb2>
	case 3723:
		return 6;
 800215c:	2306      	movs	r3, #6
 800215e:	e002      	b.n	8002166 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002160:	2307      	movs	r3, #7
 8002162:	e000      	b.n	8002166 <get_current_step+0xb2>
	default:
		return -1;
 8002164:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40007400 	.word	0x40007400

08002178 <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 800217c:	f000 f8f2 	bl	8002364 <send_ACK>

	vTaskSuspendAll();
 8002180:	f012 ffc2 	bl	8015108 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002184:	2101      	movs	r1, #1
 8002186:	2001      	movs	r0, #1
 8002188:	f007 fef8 	bl	8009f7c <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	SystemClock_Config();
 800218c:	f7fe ffd8 	bl	8001140 <SystemClock_Config>
	xTaskResumeAll();
 8002190:	f012 ffc8 	bl	8015124 <xTaskResumeAll>
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <RTC_SetTime>:

void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d051      	beq.n	8002252 <RTC_SetTime+0xba>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	22ca      	movs	r2, #202	; 0xca
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2253      	movs	r2, #83	; 0x53
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f00b fee6 	bl	800dfa0 <RTC_EnterInitMode>
 80021d4:	4603      	mov	r3, r0
 80021d6:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d129      	bne.n	8002232 <RTC_SetTime+0x9a>

		sTime->TimeFormat = 0x00U;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2200      	movs	r2, #0
 80021e2:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00b ff4b 	bl	800e084 <RTC_ByteToBcd2>
 80021ee:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80021f0:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00b ff44 	bl	800e084 <RTC_ByteToBcd2>
 80021fc:	4603      	mov	r3, r0
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	789b      	ldrb	r3, [r3, #2]
 8002206:	4618      	mov	r0, r3
 8002208:	f00b ff3c 	bl	800e084 <RTC_ByteToBcd2>
 800220c:	4603      	mov	r3, r0
 800220e:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	78db      	ldrb	r3, [r3, #3]
 8002216:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <RTC_SetTime+0xc4>)
 8002224:	400b      	ands	r3, r1
 8002226:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f00b feed 	bl	800e008 <RTC_ExitInitMode>
 800222e:	4603      	mov	r3, r0
 8002230:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	22ff      	movs	r2, #255	; 0xff
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <RTC_SetTime+0xb0>
		hrtc->State = HAL_RTC_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2020 	strb.w	r2, [r3, #32]
 8002250:	e000      	b.n	8002254 <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 8002252:	bf00      	nop

}
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	bf00      	nop
 800225c:	007f7f7f 	.word	0x007f7f7f

08002260 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	; 0x30
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	78db      	ldrb	r3, [r3, #3]
 800227c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	795b      	ldrb	r3, [r3, #5]
 800228c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	799b      	ldrb	r3, [r3, #6]
 8002294:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3307      	adds	r3, #7
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3308      	adds	r3, #8
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80022b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80022b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80022c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80022c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022cc:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80022ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022d2:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80022d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80022d8:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80022da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022dc:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	2200      	movs	r2, #0
 80022e4:	4619      	mov	r1, r3
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <calibrateRTC+0xb4>)
 80022e8:	f00b fd60 	bl	800ddac <HAL_RTC_SetDate>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80022f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <calibrateRTC+0x9e>
		Error_Handler();
 80022fa:	f000 ff79 	bl	80031f0 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2200      	movs	r2, #0
 8002304:	4619      	mov	r1, r3
 8002306:	4803      	ldr	r0, [pc, #12]	; (8002314 <calibrateRTC+0xb4>)
 8002308:	f7ff ff46 	bl	8002198 <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	240003d4 	.word	0x240003d4

08002318 <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
	send_ACK();
 800231e:	f000 f821 	bl	8002364 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002322:	480e      	ldr	r0, [pc, #56]	; (800235c <sync+0x44>)
 8002324:	f00e f9b4 	bl	8010690 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002328:	2364      	movs	r3, #100	; 0x64
 800232a:	2209      	movs	r2, #9
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <sync+0x48>)
 800232e:	480b      	ldr	r0, [pc, #44]	; (800235c <sync+0x44>)
 8002330:	f00e f81a 	bl	8010368 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <sync+0x48>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2bff      	cmp	r3, #255	; 0xff
 800233e:	d1f3      	bne.n	8002328 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <sync+0x48>)
 8002342:	f7ff ff8d 	bl	8002260 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002346:	2201      	movs	r2, #1
 8002348:	4905      	ldr	r1, [pc, #20]	; (8002360 <sync+0x48>)
 800234a:	4804      	ldr	r0, [pc, #16]	; (800235c <sync+0x44>)
 800234c:	f00e f8d4 	bl	80104f8 <HAL_UART_Receive_IT>

	send_ACK();
 8002350:	f000 f808 	bl	8002364 <send_ACK>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	240005ec 	.word	0x240005ec
 8002360:	24000c24 	.word	0x24000c24

08002364 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <send_ACK+0x1c>)
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800236e:	2364      	movs	r3, #100	; 0x64
 8002370:	2201      	movs	r2, #1
 8002372:	4903      	ldr	r1, [pc, #12]	; (8002380 <send_ACK+0x1c>)
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <send_ACK+0x20>)
 8002376:	f00d ff69 	bl	801024c <HAL_UART_Transmit>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	24000ca8 	.word	0x24000ca8
 8002384:	240005ec 	.word	0x240005ec

08002388 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_UART_TxCpltCallback+0x1c>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	24000000 	.word	0x24000000

080023a8 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f014 fbf9 	bl	8016bb0 <malloc>
 80023be:	4603      	mov	r3, r0
 80023c0:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f014 fc01 	bl	8016bd0 <memcpy>
	packet.size = size;
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	82bb      	strh	r3, [r7, #20]
	return packet;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80023f0:	2100      	movs	r1, #0
 80023f2:	481d      	ldr	r0, [pc, #116]	; (8002468 <system_setup+0x7c>)
 80023f4:	f00c fba0 	bl	800eb38 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80023f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023fc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002402:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002406:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800240a:	4818      	ldr	r0, [pc, #96]	; (800246c <system_setup+0x80>)
 800240c:	f003 f958 	bl	80056c0 <HAL_ADCEx_Calibration_Start>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002416:	f000 feeb 	bl	80031f0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800241a:	220b      	movs	r2, #11
 800241c:	4914      	ldr	r1, [pc, #80]	; (8002470 <system_setup+0x84>)
 800241e:	4813      	ldr	r0, [pc, #76]	; (800246c <system_setup+0x80>)
 8002420:	f002 fa2c 	bl	800487c <HAL_ADC_Start_DMA>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800242a:	f000 fee1 	bl	80031f0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800242e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002432:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002436:	480f      	ldr	r0, [pc, #60]	; (8002474 <system_setup+0x88>)
 8002438:	f003 f942 	bl	80056c0 <HAL_ADCEx_Calibration_Start>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002442:	f000 fed5 	bl	80031f0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002446:	2204      	movs	r2, #4
 8002448:	490b      	ldr	r1, [pc, #44]	; (8002478 <system_setup+0x8c>)
 800244a:	480a      	ldr	r0, [pc, #40]	; (8002474 <system_setup+0x88>)
 800244c:	f002 fa16 	bl	800487c <HAL_ADC_Start_DMA>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002456:	f000 fecb 	bl	80031f0 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800245a:	2201      	movs	r2, #1
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <system_setup+0x90>)
 800245e:	4808      	ldr	r0, [pc, #32]	; (8002480 <system_setup+0x94>)
 8002460:	f00e f84a 	bl	80104f8 <HAL_UART_Receive_IT>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	240005a0 	.word	0x240005a0
 800246c:	2400013c 	.word	0x2400013c
 8002470:	24000c80 	.word	0x24000c80
 8002474:	240001a0 	.word	0x240001a0
 8002478:	24000ca0 	.word	0x24000ca0
 800247c:	24000c24 	.word	0x24000c24
 8002480:	240005ec 	.word	0x240005ec

08002484 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <get_uptime+0x88>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <get_uptime+0x8c>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <get_uptime+0x88>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d005      	beq.n	80024b2 <get_uptime+0x2e>
		ms = uptime_millis;
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <get_uptime+0x88>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <get_uptime+0x8c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b8:	fb03 f202 	mul.w	r2, r3, r2
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <get_uptime+0x8c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4914      	ldr	r1, [pc, #80]	; (8002514 <get_uptime+0x90>)
 80024c4:	fba1 1303 	umull	r1, r3, r1, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	6939      	ldr	r1, [r7, #16]
 80024cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	0e1b      	lsrs	r3, r3, #24
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0c1a      	lsrs	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3301      	adds	r3, #1
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0a1a      	lsrs	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3302      	adds	r3, #2
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3303      	adds	r3, #3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	24000c00 	.word	0x24000c00
 8002510:	e000e010 	.word	0xe000e010
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	2200      	movs	r2, #0
 8002526:	4619      	mov	r1, r3
 8002528:	4821      	ldr	r0, [pc, #132]	; (80025b0 <getTimestamp+0x98>)
 800252a:	f00b fbe3 	bl	800dcf4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	2200      	movs	r2, #0
 8002534:	4619      	mov	r1, r3
 8002536:	481e      	ldr	r0, [pc, #120]	; (80025b0 <getTimestamp+0x98>)
 8002538:	f00b fcc0 	bl	800debc <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2264      	movs	r2, #100	; 0x64
 8002540:	fb03 f202 	mul.w	r2, r3, r2
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <getTimestamp+0x9c>)
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3301      	adds	r3, #1
 8002554:	7b7a      	ldrb	r2, [r7, #13]
 8002556:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3302      	adds	r3, #2
 800255c:	7bba      	ldrb	r2, [r7, #14]
 800255e:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3303      	adds	r3, #3
 8002564:	7c3a      	ldrb	r2, [r7, #16]
 8002566:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	7c7a      	ldrb	r2, [r7, #17]
 800256e:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3305      	adds	r3, #5
 8002574:	7cba      	ldrb	r2, [r7, #18]
 8002576:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	0e1a      	lsrs	r2, r3, #24
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3306      	adds	r3, #6
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	0c1a      	lsrs	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3307      	adds	r3, #7
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	0a1a      	lsrs	r2, r3, #8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3308      	adds	r3, #8
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3309      	adds	r3, #9
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	240003d4 	.word	0x240003d4
 80025b4:	000f4240 	.word	0x000f4240

080025b8 <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80025be:	bf00      	nop
 80025c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025c4:	4833      	ldr	r0, [pc, #204]	; (8002694 <sample_pmt+0xdc>)
 80025c6:	f006 fe9b 	bl	8009300 <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f7      	bne.n	80025c0 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80025d0:	200a      	movs	r0, #10
 80025d2:	f014 faed 	bl	8016bb0 <malloc>
 80025d6:	4603      	mov	r3, r0
 80025d8:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80025da:	2002      	movs	r0, #2
 80025dc:	f014 fae8 	bl	8016bb0 <malloc>
 80025e0:	4603      	mov	r3, r0
 80025e2:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80025e4:	2004      	movs	r0, #4
 80025e6:	f014 fae3 	bl	8016bb0 <malloc>
 80025ea:	4603      	mov	r3, r0
 80025ec:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff ff48 	bl	8002484 <get_uptime>

	receive_pmt_spi(pmt_spi);
 80025f4:	6938      	ldr	r0, [r7, #16]
 80025f6:	f7ff fc59 	bl	8001eac <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	22bb      	movs	r2, #187	; 0xbb
 80025fe:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	22bb      	movs	r2, #187	; 0xbb
 8002606:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <sample_pmt+0xe0>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	b29a      	uxth	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3302      	adds	r3, #2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <sample_pmt+0xe0>)
 800261a:	881a      	ldrh	r2, [r3, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3303      	adds	r3, #3
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3304      	adds	r3, #4
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3305      	adds	r3, #5
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	7852      	ldrb	r2, [r2, #1]
 8002636:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3306      	adds	r3, #6
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3307      	adds	r3, #7
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	7852      	ldrb	r2, [r2, #1]
 800264a:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3308      	adds	r3, #8
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	7892      	ldrb	r2, [r2, #2]
 8002654:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3309      	adds	r3, #9
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	78d2      	ldrb	r2, [r2, #3]
 800265e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	220a      	movs	r2, #10
 8002664:	6979      	ldr	r1, [r7, #20]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fe9e 	bl	80023a8 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <sample_pmt+0xe4>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	1d39      	adds	r1, r7, #4
 8002672:	2300      	movs	r3, #0
 8002674:	2200      	movs	r2, #0
 8002676:	f011 f839 	bl	80136ec <osMessageQueuePut>
	free(buffer);
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f014 faa0 	bl	8016bc0 <free>
	free(pmt_spi);
 8002680:	6938      	ldr	r0, [r7, #16]
 8002682:	f014 fa9d 	bl	8016bc0 <free>
	free(uptime);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f014 fa9a 	bl	8016bc0 <free>
}
 800268c:	bf00      	nop
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	58020000 	.word	0x58020000
 8002698:	24000c10 	.word	0x24000c10
 800269c:	24000c04 	.word	0x24000c04

080026a0 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80026a6:	bf00      	nop
 80026a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ac:	4848      	ldr	r0, [pc, #288]	; (80027d0 <sample_erpa+0x130>)
 80026ae:	f006 fe27 	bl	8009300 <HAL_GPIO_ReadPin>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f7      	bne.n	80026a8 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80026b8:	200e      	movs	r0, #14
 80026ba:	f014 fa79 	bl	8016bb0 <malloc>
 80026be:	4603      	mov	r3, r0
 80026c0:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80026c2:	2002      	movs	r0, #2
 80026c4:	f014 fa74 	bl	8016bb0 <malloc>
 80026c8:	4603      	mov	r3, r0
 80026ca:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 80026cc:	2002      	movs	r0, #2
 80026ce:	f014 fa6f 	bl	8016bb0 <malloc>
 80026d2:	4603      	mov	r3, r0
 80026d4:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80026d6:	2004      	movs	r0, #4
 80026d8:	f014 fa6a 	bl	8016bb0 <malloc>
 80026dc:	4603      	mov	r3, r0
 80026de:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 80026e0:	23ff      	movs	r3, #255	; 0xff
 80026e2:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f7ff fecd 	bl	8002484 <get_uptime>
	sweep_step = get_current_step();
 80026ea:	f7ff fce3 	bl	80020b4 <get_current_step>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 80026f2:	69b8      	ldr	r0, [r7, #24]
 80026f4:	f7ff fbfe 	bl	8001ef4 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80026f8:	6978      	ldr	r0, [r7, #20]
 80026fa:	f7ff fc1f 	bl	8001f3c <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	22aa      	movs	r2, #170	; 0xaa
 8002702:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	22aa      	movs	r2, #170	; 0xaa
 800270a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 800270c:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <sample_erpa+0x134>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0c1a      	lsrs	r2, r3, #16
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3302      	adds	r3, #2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <sample_erpa+0x134>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0a1a      	lsrs	r2, r3, #8
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3303      	adds	r3, #3
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <sample_erpa+0x134>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3304      	adds	r3, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3305      	adds	r3, #5
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	b29a      	uxth	r2, r3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3306      	adds	r3, #6
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3307      	adds	r3, #7
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	3308      	adds	r3, #8
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3309      	adds	r3, #9
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	7852      	ldrb	r2, [r2, #1]
 800276a:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	330a      	adds	r3, #10
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	330b      	adds	r3, #11
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	7852      	ldrb	r2, [r2, #1]
 800277e:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	330c      	adds	r3, #12
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	7892      	ldrb	r2, [r2, #2]
 8002788:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	330d      	adds	r3, #13
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	78d2      	ldrb	r2, [r2, #3]
 8002792:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	220e      	movs	r2, #14
 8002798:	69f9      	ldr	r1, [r7, #28]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe04 	bl	80023a8 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <sample_erpa+0x138>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	1d39      	adds	r1, r7, #4
 80027a6:	2300      	movs	r3, #0
 80027a8:	2200      	movs	r2, #0
 80027aa:	f010 ff9f 	bl	80136ec <osMessageQueuePut>
	free(buffer);
 80027ae:	69f8      	ldr	r0, [r7, #28]
 80027b0:	f014 fa06 	bl	8016bc0 <free>
	free(erpa_spi);
 80027b4:	69b8      	ldr	r0, [r7, #24]
 80027b6:	f014 fa03 	bl	8016bc0 <free>
	free(erpa_adc);
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f014 fa00 	bl	8016bc0 <free>
	free(uptime);
 80027c0:	6938      	ldr	r0, [r7, #16]
 80027c2:	f014 f9fd 	bl	8016bc0 <free>
}
 80027c6:	bf00      	nop
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	58020400 	.word	0x58020400
 80027d4:	24000c14 	.word	0x24000c14
 80027d8:	24000c04 	.word	0x24000c04

080027dc <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80027e2:	2036      	movs	r0, #54	; 0x36
 80027e4:	f014 f9e4 	bl	8016bb0 <malloc>
 80027e8:	4603      	mov	r3, r0
 80027ea:	617b      	str	r3, [r7, #20]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80027ec:	2008      	movs	r0, #8
 80027ee:	f014 f9df 	bl	8016bb0 <malloc>
 80027f2:	4603      	mov	r3, r0
 80027f4:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80027f6:	200a      	movs	r0, #10
 80027f8:	f014 f9da 	bl	8016bb0 <malloc>
 80027fc:	4603      	mov	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002800:	2004      	movs	r0, #4
 8002802:	f014 f9d5 	bl	8016bb0 <malloc>
 8002806:	4603      	mov	r3, r0
 8002808:	60bb      	str	r3, [r7, #8]

	get_uptime(uptime);
 800280a:	68b8      	ldr	r0, [r7, #8]
 800280c:	f7ff fe3a 	bl	8002484 <get_uptime>
	getTimestamp(timestamp);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fe81 	bl	8002518 <getTimestamp>
	receive_hk_i2c(hk_i2c);
 8002816:	6938      	ldr	r0, [r7, #16]
 8002818:	f7ff fba2 	bl	8001f60 <receive_hk_i2c>


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	22cc      	movs	r2, #204	; 0xcc
 8002820:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	22cc      	movs	r2, #204	; 0xcc
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800282a:	4ba1      	ldr	r3, [pc, #644]	; (8002ab0 <sample_hk+0x2d4>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3302      	adds	r3, #2
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800283a:	4b9d      	ldr	r3, [pc, #628]	; (8002ab0 <sample_hk+0x2d4>)
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3303      	adds	r3, #3
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002846:	4b9b      	ldr	r3, [pc, #620]	; (8002ab4 <sample_hk+0x2d8>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29a      	uxth	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3304      	adds	r3, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002856:	4b97      	ldr	r3, [pc, #604]	; (8002ab4 <sample_hk+0x2d8>)
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3305      	adds	r3, #5
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 8002862:	4b95      	ldr	r3, [pc, #596]	; (8002ab8 <sample_hk+0x2dc>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	b29a      	uxth	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3306      	adds	r3, #6
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002872:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <sample_hk+0x2dc>)
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3307      	adds	r3, #7
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002884:	121a      	asrs	r2, r3, #8
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3308      	adds	r3, #8
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3309      	adds	r3, #9
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	3302      	adds	r3, #2
 80028a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a4:	121a      	asrs	r2, r3, #8
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	330a      	adds	r3, #10
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	3302      	adds	r3, #2
 80028b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	330b      	adds	r3, #11
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	3304      	adds	r3, #4
 80028c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c6:	121a      	asrs	r2, r3, #8
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	330c      	adds	r3, #12
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	3304      	adds	r3, #4
 80028d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	330d      	adds	r3, #13
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	3306      	adds	r3, #6
 80028e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e8:	121a      	asrs	r2, r3, #8
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	330e      	adds	r3, #14
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	3306      	adds	r3, #6
 80028f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	330f      	adds	r3, #15
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <sample_hk+0x2e0>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29a      	uxth	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3310      	adds	r3, #16
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <sample_hk+0x2e0>)
 8002914:	881a      	ldrh	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3311      	adds	r3, #17
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 800291e:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <sample_hk+0x2e4>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3312      	adds	r3, #18
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <sample_hk+0x2e4>)
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3313      	adds	r3, #19
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 800293a:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <sample_hk+0x2e8>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	b29a      	uxth	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3314      	adds	r3, #20
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 800294a:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <sample_hk+0x2e8>)
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3315      	adds	r3, #21
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002956:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <sample_hk+0x2ec>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b29a      	uxth	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3316      	adds	r3, #22
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002966:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <sample_hk+0x2ec>)
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3317      	adds	r3, #23
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002972:	4b56      	ldr	r3, [pc, #344]	; (8002acc <sample_hk+0x2f0>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3318      	adds	r3, #24
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002982:	4b52      	ldr	r3, [pc, #328]	; (8002acc <sample_hk+0x2f0>)
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3319      	adds	r3, #25
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 800298e:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <sample_hk+0x2f4>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	331a      	adds	r3, #26
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <sample_hk+0x2f4>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	331b      	adds	r3, #27
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <sample_hk+0x2f8>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	331c      	adds	r3, #28
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 80029ba:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <sample_hk+0x2f8>)
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	331d      	adds	r3, #29
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <sample_hk+0x2fc>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	331e      	adds	r3, #30
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <sample_hk+0x2fc>)
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	331f      	adds	r3, #31
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80029e2:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <sample_hk+0x300>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3320      	adds	r3, #32
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <sample_hk+0x300>)
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3321      	adds	r3, #33	; 0x21
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80029fe:	4b38      	ldr	r3, [pc, #224]	; (8002ae0 <sample_hk+0x304>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3322      	adds	r3, #34	; 0x22
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <sample_hk+0x304>)
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3323      	adds	r3, #35	; 0x23
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002a1a:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <sample_hk+0x308>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3324      	adds	r3, #36	; 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <sample_hk+0x308>)
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3325      	adds	r3, #37	; 0x25
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <sample_hk+0x30c>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3326      	adds	r3, #38	; 0x26
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <sample_hk+0x30c>)
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3327      	adds	r3, #39	; 0x27
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3328      	adds	r3, #40	; 0x28
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3329      	adds	r3, #41	; 0x29
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	7852      	ldrb	r2, [r2, #1]
 8002a64:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	332a      	adds	r3, #42	; 0x2a
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	7892      	ldrb	r2, [r2, #2]
 8002a6e:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	332b      	adds	r3, #43	; 0x2b
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	78d2      	ldrb	r2, [r2, #3]
 8002a78:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	332c      	adds	r3, #44	; 0x2c
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	7912      	ldrb	r2, [r2, #4]
 8002a82:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	332d      	adds	r3, #45	; 0x2d
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	7952      	ldrb	r2, [r2, #5]
 8002a8c:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	332e      	adds	r3, #46	; 0x2e
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	7992      	ldrb	r2, [r2, #6]
 8002a96:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	332f      	adds	r3, #47	; 0x2f
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	79d2      	ldrb	r2, [r2, #7]
 8002aa0:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3330      	adds	r3, #48	; 0x30
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	7a12      	ldrb	r2, [r2, #8]
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e01e      	b.n	8002aec <sample_hk+0x310>
 8002aae:	bf00      	nop
 8002ab0:	24000c18 	.word	0x24000c18
 8002ab4:	24000be2 	.word	0x24000be2
 8002ab8:	24000be4 	.word	0x24000be4
 8002abc:	24000be6 	.word	0x24000be6
 8002ac0:	24000be8 	.word	0x24000be8
 8002ac4:	24000bea 	.word	0x24000bea
 8002ac8:	24000bec 	.word	0x24000bec
 8002acc:	24000bee 	.word	0x24000bee
 8002ad0:	24000bf0 	.word	0x24000bf0
 8002ad4:	24000bf2 	.word	0x24000bf2
 8002ad8:	24000bf4 	.word	0x24000bf4
 8002adc:	24000bf6 	.word	0x24000bf6
 8002ae0:	24000bf8 	.word	0x24000bf8
 8002ae4:	24000bfa 	.word	0x24000bfa
 8002ae8:	24000bfc 	.word	0x24000bfc
	buffer[49] = timestamp[9];
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3331      	adds	r3, #49	; 0x31
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	7a52      	ldrb	r2, [r2, #9]
 8002af4:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3332      	adds	r3, #50	; 0x32
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3333      	adds	r3, #51	; 0x33
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	7852      	ldrb	r2, [r2, #1]
 8002b08:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3334      	adds	r3, #52	; 0x34
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	7892      	ldrb	r2, [r2, #2]
 8002b12:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3335      	adds	r3, #53	; 0x35
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	78d2      	ldrb	r2, [r2, #3]
 8002b1c:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002b1e:	463b      	mov	r3, r7
 8002b20:	2236      	movs	r2, #54	; 0x36
 8002b22:	6979      	ldr	r1, [r7, #20]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fc3f 	bl	80023a8 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <sample_hk+0x37c>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	4639      	mov	r1, r7
 8002b30:	2300      	movs	r3, #0
 8002b32:	2200      	movs	r2, #0
 8002b34:	f010 fdda 	bl	80136ec <osMessageQueuePut>

	free(buffer);
 8002b38:	6978      	ldr	r0, [r7, #20]
 8002b3a:	f014 f841 	bl	8016bc0 <free>
	free(hk_i2c);
 8002b3e:	6938      	ldr	r0, [r7, #16]
 8002b40:	f014 f83e 	bl	8016bc0 <free>
	free(timestamp);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f014 f83b 	bl	8016bc0 <free>
	free(uptime);
 8002b4a:	68b8      	ldr	r0, [r7, #8]
 8002b4c:	f014 f838 	bl	8016bc0 <free>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	24000c04 	.word	0x24000c04

08002b5c <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <PMT_init+0x38>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2101      	movs	r1, #1
 8002b70:	f010 fce3 	bl	801353a <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <PMT_init+0x3c>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <PMT_init+0x32>
			sample_pmt();
 8002b7e:	f7ff fd1b 	bl	80025b8 <sample_pmt>
			pmt_seq++;
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <PMT_init+0x40>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <PMT_init+0x40>)
 8002b8c:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002b8e:	f010 fba1 	bl	80132d4 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b92:	e7e7      	b.n	8002b64 <PMT_init+0x8>
 8002b94:	24000c20 	.word	0x24000c20
 8002b98:	24000c1a 	.word	0x24000c1a
 8002b9c:	24000c10 	.word	0x24000c10

08002ba0 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <ERPA_init+0x38>)
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	f010 fcc1 	bl	801353a <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <ERPA_init+0x3c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <ERPA_init+0x30>
			sample_erpa();
 8002bc2:	f7ff fd6d 	bl	80026a0 <sample_erpa>
			erpa_seq++;
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <ERPA_init+0x40>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <ERPA_init+0x40>)
 8002bce:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002bd0:	f010 fb80 	bl	80132d4 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002bd4:	e7e8      	b.n	8002ba8 <ERPA_init+0x8>
 8002bd6:	bf00      	nop
 8002bd8:	24000c20 	.word	0x24000c20
 8002bdc:	24000c1b 	.word	0x24000c1b
 8002be0:	24000c14 	.word	0x24000c14

08002be4 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HK_init+0x38>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	f010 fc9f 	bl	801353a <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HK_init+0x3c>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HK_init+0x32>
			sample_hk();
 8002c06:	f7ff fde9 	bl	80027dc <sample_hk>
			hk_seq++;
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HK_init+0x40>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HK_init+0x40>)
 8002c14:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002c16:	f010 fb5d 	bl	80132d4 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002c1a:	e7e7      	b.n	8002bec <HK_init+0x8>
 8002c1c:	24000c20 	.word	0x24000c20
 8002c20:	24000c1c 	.word	0x24000c1c
 8002c24:	24000c18 	.word	0x24000c18

08002c28 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <GPIO_on_init+0x9c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f010 fb6d 	bl	8013314 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <GPIO_on_init+0xa0>)
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f006 fb75 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c46:	2064      	movs	r0, #100	; 0x64
 8002c48:	f010 fb85 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <GPIO_on_init+0xa0>)
 8002c4e:	2120      	movs	r1, #32
 8002c50:	2201      	movs	r2, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 fb6c 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	f010 fb7c 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <GPIO_on_init+0xa4>)
 8002c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c64:	2201      	movs	r2, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f006 fb62 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c6c:	2064      	movs	r0, #100	; 0x64
 8002c6e:	f010 fb72 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <GPIO_on_init+0xa4>)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	2201      	movs	r2, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f006 fb59 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c7e:	2064      	movs	r0, #100	; 0x64
 8002c80:	f010 fb69 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <GPIO_on_init+0xa4>)
 8002c86:	2140      	movs	r1, #64	; 0x40
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f006 fb50 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c90:	2064      	movs	r0, #100	; 0x64
 8002c92:	f010 fb60 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <GPIO_on_init+0xa4>)
 8002c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f006 fb46 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ca4:	2064      	movs	r0, #100	; 0x64
 8002ca6:	f010 fb56 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <GPIO_on_init+0xa4>)
 8002cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 fb3c 	bl	8009330 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <GPIO_on_init+0x9c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f010 fb29 	bl	8013314 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002cc2:	e7ba      	b.n	8002c3a <GPIO_on_init+0x12>
 8002cc4:	24000704 	.word	0x24000704
 8002cc8:	58020400 	.word	0x58020400
 8002ccc:	58020800 	.word	0x58020800

08002cd0 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <GPIO_off_init+0x9c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f010 fb19 	bl	8013314 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <GPIO_off_init+0xa0>)
 8002ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f006 fb20 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	f010 fb30 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <GPIO_off_init+0xa0>)
 8002cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f006 fb16 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d04:	2064      	movs	r0, #100	; 0x64
 8002d06:	f010 fb26 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <GPIO_off_init+0xa0>)
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f006 fb0d 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d16:	2064      	movs	r0, #100	; 0x64
 8002d18:	f010 fb1d 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <GPIO_off_init+0xa0>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	2200      	movs	r2, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fb04 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d28:	2064      	movs	r0, #100	; 0x64
 8002d2a:	f010 fb14 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <GPIO_off_init+0xa0>)
 8002d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d34:	2200      	movs	r2, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f006 fafa 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d3c:	2064      	movs	r0, #100	; 0x64
 8002d3e:	f010 fb0a 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <GPIO_off_init+0xa4>)
 8002d44:	2120      	movs	r1, #32
 8002d46:	2200      	movs	r2, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f006 faf1 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d4e:	2064      	movs	r0, #100	; 0x64
 8002d50:	f010 fb01 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <GPIO_off_init+0xa4>)
 8002d56:	2104      	movs	r1, #4
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f006 fae8 	bl	8009330 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002d60:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <GPIO_off_init+0x9c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f010 fad5 	bl	8013314 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002d6a:	e7ba      	b.n	8002ce2 <GPIO_off_init+0x12>
 8002d6c:	24000964 	.word	0x24000964
 8002d70:	58020800 	.word	0x58020800
 8002d74:	58020400 	.word	0x58020400

08002d78 <UART_TX_init>:
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <UART_TX_init+0xa4>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d90:	2200      	movs	r2, #0
 8002d92:	4923      	ldr	r1, [pc, #140]	; (8002e20 <UART_TX_init+0xa8>)
 8002d94:	f010 fd0a 	bl	80137ac <osMessageQueueGet>
 8002d98:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d121      	bne.n	8002de4 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002da0:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <UART_TX_init+0xa8>)
 8002da2:	889b      	ldrh	r3, [r3, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dae:	d219      	bcs.n	8002de4 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <UART_TX_init+0xac>)
 8002db4:	4413      	add	r3, r2
 8002db6:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <UART_TX_init+0xa8>)
 8002db8:	6811      	ldr	r1, [r2, #0]
 8002dba:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <UART_TX_init+0xa8>)
 8002dbc:	8892      	ldrh	r2, [r2, #4]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f013 ff06 	bl	8016bd0 <memcpy>
					free(msg.array);
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <UART_TX_init+0xa8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f013 fef9 	bl	8016bc0 <free>
					total_size += msg.size;
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <UART_TX_init+0xa8>)
 8002dd0:	889b      	ldrh	r3, [r3, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f240 32b1 	movw	r2, #945	; 0x3b1
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d803      	bhi.n	8002dec <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ce      	beq.n	8002d88 <UART_TX_init+0x10>
 8002dea:	e000      	b.n	8002dee <UART_TX_init+0x76>
						break;
 8002dec:	bf00      	nop

		if (total_size > 0) {
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	490a      	ldr	r1, [pc, #40]	; (8002e24 <UART_TX_init+0xac>)
 8002dfc:	480a      	ldr	r0, [pc, #40]	; (8002e28 <UART_TX_init+0xb0>)
 8002dfe:	f00d fbc7 	bl	8010590 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002e02:	e001      	b.n	8002e08 <UART_TX_init+0x90>
				osThreadYield();
 8002e04:	f010 fa66 	bl	80132d4 <osThreadYield>
			while (tx_flag == 0) {
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <UART_TX_init+0xb4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f9      	beq.n	8002e04 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <UART_TX_init+0xb4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002e16:	f010 fa5d 	bl	80132d4 <osThreadYield>
		total_size = 0;
 8002e1a:	e7b3      	b.n	8002d84 <UART_TX_init+0xc>
 8002e1c:	24000c04 	.word	0x24000c04
 8002e20:	24000c08 	.word	0x24000c08
 8002e24:	24000cac 	.word	0x24000cac
 8002e28:	240005ec 	.word	0x240005ec
 8002e2c:	24000000 	.word	0x24000000

08002e30 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002e38:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <Voltage_Monitor_init+0xbc>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e40:	2200      	movs	r2, #0
 8002e42:	2108      	movs	r1, #8
 8002e44:	f010 fb79 	bl	801353a <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002e48:	2014      	movs	r0, #20
 8002e4a:	f013 feb1 	bl	8016bb0 <malloc>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002e52:	2008      	movs	r0, #8
 8002e54:	f013 feac 	bl	8016bb0 <malloc>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff f8af 	bl	8001fc0 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002e62:	68b8      	ldr	r0, [r7, #8]
 8002e64:	f7ff f8fe 	bl	8002064 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	885a      	ldrh	r2, [r3, #2]
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <Voltage_Monitor_init+0xc0>)
 8002e6e:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <Voltage_Monitor_init+0xc4>)
 8002e76:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	881a      	ldrh	r2, [r3, #0]
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <Voltage_Monitor_init+0xc8>)
 8002e7e:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	885a      	ldrh	r2, [r3, #2]
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <Voltage_Monitor_init+0xcc>)
 8002e86:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	889a      	ldrh	r2, [r3, #4]
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <Voltage_Monitor_init+0xd0>)
 8002e8e:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	88da      	ldrh	r2, [r3, #6]
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <Voltage_Monitor_init+0xd4>)
 8002e96:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	899a      	ldrh	r2, [r3, #12]
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <Voltage_Monitor_init+0xd8>)
 8002e9e:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88da      	ldrh	r2, [r3, #6]
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <Voltage_Monitor_init+0xdc>)
 8002ea6:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	889a      	ldrh	r2, [r3, #4]
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <Voltage_Monitor_init+0xe0>)
 8002eae:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	89da      	ldrh	r2, [r3, #14]
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <Voltage_Monitor_init+0xe4>)
 8002eb6:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8a1a      	ldrh	r2, [r3, #16]
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <Voltage_Monitor_init+0xe8>)
 8002ebe:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	891a      	ldrh	r2, [r3, #8]
 8002ec4:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <Voltage_Monitor_init+0xec>)
 8002ec6:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	895a      	ldrh	r2, [r3, #10]
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <Voltage_Monitor_init+0xf0>)
 8002ece:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8a5a      	ldrh	r2, [r3, #18]
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <Voltage_Monitor_init+0xf4>)
 8002ed6:	801a      	strh	r2, [r3, #0]
				error_protocol(RAIL_n800v);
			}
		}
#endif

		free(hk_adc1);
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f013 fe71 	bl	8016bc0 <free>
		free(hk_adc3);
 8002ede:	68b8      	ldr	r0, [r7, #8]
 8002ee0:	f013 fe6e 	bl	8016bc0 <free>

		osThreadYield();
 8002ee4:	f010 f9f6 	bl	80132d4 <osThreadYield>
	for (;;) {
 8002ee8:	e7a6      	b.n	8002e38 <Voltage_Monitor_init+0x8>
 8002eea:	bf00      	nop
 8002eec:	24000c20 	.word	0x24000c20
 8002ef0:	24000be2 	.word	0x24000be2
 8002ef4:	24000be4 	.word	0x24000be4
 8002ef8:	24000be6 	.word	0x24000be6
 8002efc:	24000be8 	.word	0x24000be8
 8002f00:	24000bea 	.word	0x24000bea
 8002f04:	24000bec 	.word	0x24000bec
 8002f08:	24000bee 	.word	0x24000bee
 8002f0c:	24000bf0 	.word	0x24000bf0
 8002f10:	24000bf2 	.word	0x24000bf2
 8002f14:	24000bf4 	.word	0x24000bf4
 8002f18:	24000bf6 	.word	0x24000bf6
 8002f1c:	24000bf8 	.word	0x24000bf8
 8002f20:	24000bfa 	.word	0x24000bfa
 8002f24:	24000bfc 	.word	0x24000bfc

08002f28 <FLAG_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <FLAG_init+0x38>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f010 fadf 	bl	80134f8 <osEventFlagsGet>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0316 	and.w	r3, r3, #22
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <FLAG_init+0x38>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2116      	movs	r1, #22
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f010 faa0 	bl	8013494 <osEventFlagsClear>
			enter_stop();
 8002f54:	f7ff f910 	bl	8002178 <enter_stop>
		}
		osDelay(1);
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f010 f9fc 	bl	8013356 <osDelay>
	for (;;) {
 8002f5e:	e7e7      	b.n	8002f30 <FLAG_init+0x8>
 8002f60:	24000c20 	.word	0x24000c20

08002f64 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
	osThreadSuspend(Science_taskHandle);
 8002f6c:	4b48      	ldr	r3, [pc, #288]	; (8003090 <Science_init+0x12c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f010 f9cf 	bl	8013314 <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <Science_init+0x130>)
 8002f78:	2104      	movs	r1, #4
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f006 f9d7 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002f82:	2064      	movs	r0, #100	; 0x64
 8002f84:	f010 f9e7 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <Science_init+0x130>)
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f006 f9ce 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002f94:	2064      	movs	r0, #100	; 0x64
 8002f96:	f010 f9de 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002f9a:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <Science_init+0x134>)
 8002f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f006 f9c4 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fa8:	2064      	movs	r0, #100	; 0x64
 8002faa:	f010 f9d4 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <Science_init+0x134>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f006 f9bb 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fba:	2064      	movs	r0, #100	; 0x64
 8002fbc:	f010 f9cb 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <Science_init+0x134>)
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f006 f9b2 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fcc:	2064      	movs	r0, #100	; 0x64
 8002fce:	f010 f9c2 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <Science_init+0x134>)
 8002fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f006 f9a8 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8002fe0:	2064      	movs	r0, #100	; 0x64
 8002fe2:	f010 f9b8 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <Science_init+0x134>)
 8002fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fec:	2201      	movs	r2, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f006 f99e 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(300);
 8002ff4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ff8:	f010 f9ad 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);// Enable n200v
 8002ffc:	4b26      	ldr	r3, [pc, #152]	; (8003098 <Science_init+0x134>)
 8002ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003002:	2201      	movs	r2, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f006 f993 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(300);
 800300a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800300e:	f010 f9a2 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);// Enable n800v
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <Science_init+0x130>)
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	2201      	movs	r2, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f006 f989 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(300);
 800301e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003022:	f010 f998 	bl	8013356 <osDelay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003026:	b672      	cpsid	i
}
 8003028:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2320      	movs	r3, #32
 8003030:	4a1a      	ldr	r2, [pc, #104]	; (800309c <Science_init+0x138>)
 8003032:	2100      	movs	r1, #0
 8003034:	481a      	ldr	r0, [pc, #104]	; (80030a0 <Science_init+0x13c>)
 8003036:	f002 fddf 	bl	8005bf8 <HAL_DAC_Start_DMA>
		HK_ON = 1;
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <Science_init+0x140>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8003040:	210c      	movs	r1, #12
 8003042:	4819      	ldr	r0, [pc, #100]	; (80030a8 <Science_init+0x144>)
 8003044:	f00b fd78 	bl	800eb38 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <Science_init+0x148>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);				// PMT packet on
 800304e:	2100      	movs	r1, #0
 8003050:	4817      	ldr	r0, [pc, #92]	; (80030b0 <Science_init+0x14c>)
 8003052:	f00b fd71 	bl	800eb38 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8003056:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <Science_init+0x150>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]

		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <Science_init+0x154>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2104      	movs	r1, #4
 8003062:	4618      	mov	r0, r3
 8003064:	f010 f9d2 	bl	801340c <osEventFlagsSet>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <Science_init+0x154>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f010 f9cc 	bl	801340c <osEventFlagsSet>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <Science_init+0x154>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f010 f9c6 	bl	801340c <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 8003080:	b662      	cpsie	i
}
 8003082:	bf00      	nop

		__enable_irq();

		osThreadSuspend(Science_taskHandle);
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <Science_init+0x12c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f010 f943 	bl	8013314 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800308e:	e772      	b.n	8002f76 <Science_init+0x12>
 8003090:	24000bd0 	.word	0x24000bd0
 8003094:	58020400 	.word	0x58020400
 8003098:	58020800 	.word	0x58020800
 800309c:	2400000c 	.word	0x2400000c
 80030a0:	240002f4 	.word	0x240002f4
 80030a4:	24000c1c 	.word	0x24000c1c
 80030a8:	24000554 	.word	0x24000554
 80030ac:	24000c1b 	.word	0x24000c1b
 80030b0:	24000508 	.word	0x24000508
 80030b4:	24000c1a 	.word	0x24000c1a
 80030b8:	24000c20 	.word	0x24000c20

080030bc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
	osThreadSuspend(Idle_taskHandle);
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <Idle_init+0xf0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f010 f923 	bl	8013314 <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80030ce:	2100      	movs	r1, #0
 80030d0:	4837      	ldr	r0, [pc, #220]	; (80031b0 <Idle_init+0xf4>)
 80030d2:	f00b fe8b 	bl	800edec <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 80030d6:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <Idle_init+0xf8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80030dc:	210c      	movs	r1, #12
 80030de:	4836      	ldr	r0, [pc, #216]	; (80031b8 <Idle_init+0xfc>)
 80030e0:	f00b fe84 	bl	800edec <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <Idle_init+0x100>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
		HK_ON = 0;
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <Idle_init+0x104>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80030f0:	2064      	movs	r0, #100	; 0x64
 80030f2:	f010 f930 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET); // Enable n800v
 80030f6:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <Idle_init+0x108>)
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	2200      	movs	r2, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f006 f917 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8003102:	2064      	movs	r0, #100	; 0x64
 8003104:	f010 f927 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET); // Enable n200v
 8003108:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <Idle_init+0x10c>)
 800310a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800310e:	2200      	movs	r2, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f006 f90d 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8003116:	2064      	movs	r0, #100	; 0x64
 8003118:	f010 f91d 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v off pc9
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <Idle_init+0x10c>)
 800311e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003122:	2200      	movs	r2, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f006 f903 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 800312a:	2064      	movs	r0, #100	; 0x64
 800312c:	f010 f913 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v off pc8
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <Idle_init+0x10c>)
 8003132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003136:	2200      	movs	r2, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f006 f8f9 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 800313e:	2064      	movs	r0, #100	; 0x64
 8003140:	f010 f909 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 off pc6
 8003144:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <Idle_init+0x10c>)
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	2200      	movs	r2, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f006 f8f0 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8003150:	2064      	movs	r0, #100	; 0x64
 8003152:	f010 f900 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v off pc7
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <Idle_init+0x10c>)
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	2200      	movs	r2, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f006 f8e7 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8003162:	2064      	movs	r0, #100	; 0x64
 8003164:	f010 f8f7 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 off pc1
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <Idle_init+0x10c>)
 800316a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800316e:	2200      	movs	r2, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f006 f8dd 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8003176:	2064      	movs	r0, #100	; 0x64
 8003178:	f010 f8ed 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys off pb5
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <Idle_init+0x108>)
 800317e:	2120      	movs	r1, #32
 8003180:	2200      	movs	r2, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f006 f8d4 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 8003188:	2064      	movs	r0, #100	; 0x64
 800318a:	f010 f8e4 	bl	8013356 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <Idle_init+0x108>)
 8003190:	2104      	movs	r1, #4
 8003192:	2200      	movs	r2, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f006 f8cb 	bl	8009330 <HAL_GPIO_WritePin>
		osDelay(100);
 800319a:	2064      	movs	r0, #100	; 0x64
 800319c:	f010 f8db 	bl	8013356 <osDelay>

		osThreadSuspend(Idle_taskHandle);
 80031a0:	4b02      	ldr	r3, [pc, #8]	; (80031ac <Idle_init+0xf0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f010 f8b5 	bl	8013314 <osThreadSuspend>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80031aa:	e790      	b.n	80030ce <Idle_init+0x12>
 80031ac:	24000bd4 	.word	0x24000bd4
 80031b0:	24000508 	.word	0x24000508
 80031b4:	24000c1a 	.word	0x24000c1a
 80031b8:	24000554 	.word	0x24000554
 80031bc:	24000c1b 	.word	0x24000c1b
 80031c0:	24000c1c 	.word	0x24000c1c
 80031c4:	58020400 	.word	0x58020400
 80031c8:	58020800 	.word	0x58020800

080031cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031de:	f000 ff5b 	bl	8004098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40001000 	.word	0x40001000

080031f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031f8:	e7fe      	b.n	80031f8 <Error_Handler+0x8>
	...

080031fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_MspInit+0x38>)
 8003204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_MspInit+0x38>)
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_MspInit+0x38>)
 8003214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	210f      	movs	r1, #15
 8003224:	f06f 0001 	mvn.w	r0, #1
 8003228:	f002 fc44 	bl	8005ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58024400 	.word	0x58024400

08003238 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08e      	sub	sp, #56	; 0x38
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7b      	ldr	r2, [pc, #492]	; (8003444 <HAL_ADC_MspInit+0x20c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f040 8091 	bne.w	800337e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800325c:	4b7a      	ldr	r3, [pc, #488]	; (8003448 <HAL_ADC_MspInit+0x210>)
 800325e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003262:	4a79      	ldr	r2, [pc, #484]	; (8003448 <HAL_ADC_MspInit+0x210>)
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800326c:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_ADC_MspInit+0x210>)
 800326e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_ADC_MspInit+0x210>)
 800327c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003280:	4a71      	ldr	r2, [pc, #452]	; (8003448 <HAL_ADC_MspInit+0x210>)
 8003282:	f043 0304 	orr.w	r3, r3, #4
 8003286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800328a:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_ADC_MspInit+0x210>)
 800328c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003298:	4b6b      	ldr	r3, [pc, #428]	; (8003448 <HAL_ADC_MspInit+0x210>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329e:	4a6a      	ldr	r2, [pc, #424]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a8:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	4b64      	ldr	r3, [pc, #400]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80032b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032bc:	4a62      	ldr	r2, [pc, #392]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c6:	4b60      	ldr	r3, [pc, #384]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80032c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80032d4:	2333      	movs	r3, #51	; 0x33
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032d8:	2303      	movs	r3, #3
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e4:	4619      	mov	r1, r3
 80032e6:	4859      	ldr	r0, [pc, #356]	; (800344c <HAL_ADC_MspInit+0x214>)
 80032e8:	f005 fe5a 	bl	8008fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80032ec:	23ce      	movs	r3, #206	; 0xce
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f0:	2303      	movs	r3, #3
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fc:	4619      	mov	r1, r3
 80032fe:	4854      	ldr	r0, [pc, #336]	; (8003450 <HAL_ADC_MspInit+0x218>)
 8003300:	f005 fe4e 	bl	8008fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003304:	2303      	movs	r3, #3
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003308:	2303      	movs	r3, #3
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003314:	4619      	mov	r1, r3
 8003316:	484f      	ldr	r0, [pc, #316]	; (8003454 <HAL_ADC_MspInit+0x21c>)
 8003318:	f005 fe42 	bl	8008fa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800331c:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <HAL_ADC_MspInit+0x220>)
 800331e:	4a4f      	ldr	r2, [pc, #316]	; (800345c <HAL_ADC_MspInit+0x224>)
 8003320:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003324:	2209      	movs	r2, #9
 8003326:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003328:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_ADC_MspInit+0x220>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003334:	4b48      	ldr	r3, [pc, #288]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800333a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_ADC_MspInit+0x220>)
 800333e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003342:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003344:	4b44      	ldr	r3, [pc, #272]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800334a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <HAL_ADC_MspInit+0x220>)
 800334e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003352:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003354:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_ADC_MspInit+0x220>)
 800335c:	2200      	movs	r2, #0
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003360:	483d      	ldr	r0, [pc, #244]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003362:	f002 ffd5 	bl	8006310 <HAL_DMA_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 800336c:	f7ff ff40 	bl	80031f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a39      	ldr	r2, [pc, #228]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003374:	64da      	str	r2, [r3, #76]	; 0x4c
 8003376:	4a38      	ldr	r2, [pc, #224]	; (8003458 <HAL_ADC_MspInit+0x220>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800337c:	e05e      	b.n	800343c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a37      	ldr	r2, [pc, #220]	; (8003460 <HAL_ADC_MspInit+0x228>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d159      	bne.n	800343c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_ADC_MspInit+0x210>)
 800338a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338e:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_ADC_MspInit+0x210>)
 8003390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_ADC_MspInit+0x210>)
 800339a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a6:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_ADC_MspInit+0x210>)
 80033b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80033c4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80033c8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80033cc:	f000 fe90 	bl	80040f0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80033d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80033d4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80033d8:	f000 fe8a 	bl	80040f0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 80033de:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_ADC_MspInit+0x230>)
 80033e0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 80033e4:	2273      	movs	r2, #115	; 0x73
 80033e6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 80033f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033fa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 80033fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003402:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 8003406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800340a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800340c:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 800340e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003412:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 8003416:	2200      	movs	r2, #0
 8003418:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 800341c:	2200      	movs	r2, #0
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003420:	4810      	ldr	r0, [pc, #64]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 8003422:	f002 ff75 	bl	8006310 <HAL_DMA_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 800342c:	f7ff fee0 	bl	80031f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0c      	ldr	r2, [pc, #48]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 8003434:	64da      	str	r2, [r3, #76]	; 0x4c
 8003436:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <HAL_ADC_MspInit+0x22c>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800343c:	bf00      	nop
 800343e:	3738      	adds	r7, #56	; 0x38
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40022000 	.word	0x40022000
 8003448:	58024400 	.word	0x58024400
 800344c:	58020800 	.word	0x58020800
 8003450:	58020000 	.word	0x58020000
 8003454:	58020400 	.word	0x58020400
 8003458:	24000204 	.word	0x24000204
 800345c:	40020010 	.word	0x40020010
 8003460:	58026000 	.word	0x58026000
 8003464:	2400027c 	.word	0x2400027c
 8003468:	40020028 	.word	0x40020028

0800346c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a34      	ldr	r2, [pc, #208]	; (800355c <HAL_DAC_MspInit+0xf0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d161      	bne.n	8003552 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_DAC_MspInit+0xf4>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003494:	4a32      	ldr	r2, [pc, #200]	; (8003560 <HAL_DAC_MspInit+0xf4>)
 8003496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800349a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800349e:	4b30      	ldr	r3, [pc, #192]	; (8003560 <HAL_DAC_MspInit+0xf4>)
 80034a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <HAL_DAC_MspInit+0xf4>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <HAL_DAC_MspInit+0xf4>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034bc:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_DAC_MspInit+0xf4>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034ca:	2310      	movs	r3, #16
 80034cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ce:	2303      	movs	r3, #3
 80034d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4821      	ldr	r0, [pc, #132]	; (8003564 <HAL_DAC_MspInit+0xf8>)
 80034de:	f005 fd5f 	bl	8008fa0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80034e2:	4b21      	ldr	r3, [pc, #132]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 80034e4:	4a21      	ldr	r2, [pc, #132]	; (800356c <HAL_DAC_MspInit+0x100>)
 80034e6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 80034ea:	2243      	movs	r2, #67	; 0x43
 80034ec:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 80034fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003500:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003502:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 8003504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003508:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800350a:	4b17      	ldr	r3, [pc, #92]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 800350c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003510:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 8003514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003518:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 800351c:	2200      	movs	r2, #0
 800351e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 8003522:	2200      	movs	r2, #0
 8003524:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003526:	4810      	ldr	r0, [pc, #64]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 8003528:	f002 fef2 	bl	8006310 <HAL_DMA_Init>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003532:	f7ff fe5d 	bl	80031f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_DAC_MspInit+0xfc>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2105      	movs	r1, #5
 8003546:	2036      	movs	r0, #54	; 0x36
 8003548:	f002 fab4 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800354c:	2036      	movs	r0, #54	; 0x36
 800354e:	f002 facb 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40007400 	.word	0x40007400
 8003560:	58024400 	.word	0x58024400
 8003564:	58020000 	.word	0x58020000
 8003568:	24000308 	.word	0x24000308
 800356c:	40020088 	.word	0x40020088

08003570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b0ba      	sub	sp, #232	; 0xe8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	22c0      	movs	r2, #192	; 0xc0
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f013 fb2b 	bl	8016bec <memset>
  if(hi2c->Instance==I2C1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a27      	ldr	r2, [pc, #156]	; (8003638 <HAL_I2C_MspInit+0xc8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d146      	bne.n	800362e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035a0:	f04f 0208 	mov.w	r2, #8
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035b2:	f107 0310 	add.w	r3, r7, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f007 fd7e 	bl	800b0b8 <HAL_RCCEx_PeriphCLKConfig>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80035c2:	f7ff fe15 	bl	80031f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_I2C_MspInit+0xcc>)
 80035c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <HAL_I2C_MspInit+0xcc>)
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_I2C_MspInit+0xcc>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ec:	2312      	movs	r3, #18
 80035ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035fe:	2304      	movs	r3, #4
 8003600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003604:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003608:	4619      	mov	r1, r3
 800360a:	480d      	ldr	r0, [pc, #52]	; (8003640 <HAL_I2C_MspInit+0xd0>)
 800360c:	f005 fcc8 	bl	8008fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_I2C_MspInit+0xcc>)
 8003612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <HAL_I2C_MspInit+0xcc>)
 8003618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800361c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_I2C_MspInit+0xcc>)
 8003622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800362e:	bf00      	nop
 8003630:	37e8      	adds	r7, #232	; 0xe8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40005400 	.word	0x40005400
 800363c:	58024400 	.word	0x58024400
 8003640:	58020400 	.word	0x58020400

08003644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b0b2      	sub	sp, #200	; 0xc8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800364c:	f107 0308 	add.w	r3, r7, #8
 8003650:	22c0      	movs	r2, #192	; 0xc0
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f013 fac9 	bl	8016bec <memset>
  if(hrtc->Instance==RTC)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <HAL_RTC_MspInit+0x5c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d118      	bne.n	8003696 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003664:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RTC_MspInit+0x60>)
 8003672:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003676:	f107 0308 	add.w	r3, r7, #8
 800367a:	4618      	mov	r0, r3
 800367c:	f007 fd1c 	bl	800b0b8 <HAL_RCCEx_PeriphCLKConfig>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003686:	f7ff fdb3 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_RTC_MspInit+0x64>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a06      	ldr	r2, [pc, #24]	; (80036a8 <HAL_RTC_MspInit+0x64>)
 8003690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003696:	bf00      	nop
 8003698:	37c8      	adds	r7, #200	; 0xc8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	58004000 	.word	0x58004000
 80036a4:	00019300 	.word	0x00019300
 80036a8:	58024400 	.word	0x58024400

080036ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b0bc      	sub	sp, #240	; 0xf0
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036c4:	f107 0318 	add.w	r3, r7, #24
 80036c8:	22c0      	movs	r2, #192	; 0xc0
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f013 fa8d 	bl	8016bec <memset>
  if(hspi->Instance==SPI1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4c      	ldr	r2, [pc, #304]	; (8003808 <HAL_SPI_MspInit+0x15c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d145      	bne.n	8003768 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80036dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ec:	f107 0318 	add.w	r3, r7, #24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f007 fce1 	bl	800b0b8 <HAL_RCCEx_PeriphCLKConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80036fc:	f7ff fd78 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003700:	4b42      	ldr	r3, [pc, #264]	; (800380c <HAL_SPI_MspInit+0x160>)
 8003702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003706:	4a41      	ldr	r2, [pc, #260]	; (800380c <HAL_SPI_MspInit+0x160>)
 8003708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800370c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003710:	4b3e      	ldr	r3, [pc, #248]	; (800380c <HAL_SPI_MspInit+0x160>)
 8003712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371e:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_SPI_MspInit+0x160>)
 8003720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003724:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_SPI_MspInit+0x160>)
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_SPI_MspInit+0x160>)
 8003730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800373c:	2318      	movs	r3, #24
 800373e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003754:	2305      	movs	r3, #5
 8003756:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800375e:	4619      	mov	r1, r3
 8003760:	482b      	ldr	r0, [pc, #172]	; (8003810 <HAL_SPI_MspInit+0x164>)
 8003762:	f005 fc1d 	bl	8008fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003766:	e04a      	b.n	80037fe <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <HAL_SPI_MspInit+0x168>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d145      	bne.n	80037fe <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800377e:	2300      	movs	r3, #0
 8003780:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003782:	f107 0318 	add.w	r3, r7, #24
 8003786:	4618      	mov	r0, r3
 8003788:	f007 fc96 	bl	800b0b8 <HAL_RCCEx_PeriphCLKConfig>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8003792:	f7ff fd2d 	bl	80031f0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003796:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_SPI_MspInit+0x160>)
 8003798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800379c:	4a1b      	ldr	r2, [pc, #108]	; (800380c <HAL_SPI_MspInit+0x160>)
 800379e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_SPI_MspInit+0x160>)
 80037a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b4:	4b15      	ldr	r3, [pc, #84]	; (800380c <HAL_SPI_MspInit+0x160>)
 80037b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ba:	4a14      	ldr	r2, [pc, #80]	; (800380c <HAL_SPI_MspInit+0x160>)
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_SPI_MspInit+0x160>)
 80037c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80037d2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80037d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037ec:	2305      	movs	r3, #5
 80037ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037f6:	4619      	mov	r1, r3
 80037f8:	4805      	ldr	r0, [pc, #20]	; (8003810 <HAL_SPI_MspInit+0x164>)
 80037fa:	f005 fbd1 	bl	8008fa0 <HAL_GPIO_Init>
}
 80037fe:	bf00      	nop
 8003800:	37f0      	adds	r7, #240	; 0xf0
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40013000 	.word	0x40013000
 800380c:	58024400 	.word	0x58024400
 8003810:	58020400 	.word	0x58020400
 8003814:	40003800 	.word	0x40003800

08003818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a37      	ldr	r2, [pc, #220]	; (8003904 <HAL_TIM_Base_MspInit+0xec>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d12f      	bne.n	800388a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 800382c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003830:	4a35      	ldr	r2, [pc, #212]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800383a:	4b33      	ldr	r3, [pc, #204]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 800383c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003848:	2200      	movs	r2, #0
 800384a:	2105      	movs	r1, #5
 800384c:	2018      	movs	r0, #24
 800384e:	f002 f931 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003852:	2018      	movs	r0, #24
 8003854:	f002 f948 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003858:	2200      	movs	r2, #0
 800385a:	2105      	movs	r1, #5
 800385c:	2019      	movs	r0, #25
 800385e:	f002 f929 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003862:	2019      	movs	r0, #25
 8003864:	f002 f940 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003868:	2200      	movs	r2, #0
 800386a:	2105      	movs	r1, #5
 800386c:	201a      	movs	r0, #26
 800386e:	f002 f921 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003872:	201a      	movs	r0, #26
 8003874:	f002 f938 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003878:	2200      	movs	r2, #0
 800387a:	2105      	movs	r1, #5
 800387c:	201b      	movs	r0, #27
 800387e:	f002 f919 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003882:	201b      	movs	r0, #27
 8003884:	f002 f930 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003888:	e038      	b.n	80038fc <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d117      	bne.n	80038c4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 8003896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800389a:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038a4:	4b18      	ldr	r3, [pc, #96]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 80038a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2105      	movs	r1, #5
 80038b6:	201c      	movs	r0, #28
 80038b8:	f002 f8fc 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038bc:	201c      	movs	r0, #28
 80038be:	f002 f913 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
}
 80038c2:	e01b      	b.n	80038fc <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a10      	ldr	r2, [pc, #64]	; (800390c <HAL_TIM_Base_MspInit+0xf4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d116      	bne.n	80038fc <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 80038d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d4:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_TIM_Base_MspInit+0xf0>)
 80038e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2105      	movs	r1, #5
 80038f0:	201d      	movs	r0, #29
 80038f2:	f002 f8df 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038f6:	201d      	movs	r0, #29
 80038f8:	f002 f8f6 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40010000 	.word	0x40010000
 8003908:	58024400 	.word	0x58024400
 800390c:	40000400 	.word	0x40000400

08003910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <HAL_TIM_MspPostInit+0xb8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d120      	bne.n	8003974 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <HAL_TIM_MspPostInit+0xbc>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003938:	4a24      	ldr	r2, [pc, #144]	; (80039cc <HAL_TIM_MspPostInit+0xbc>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_TIM_MspPostInit+0xbc>)
 8003944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003962:	2301      	movs	r3, #1
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	4619      	mov	r1, r3
 800396c:	4818      	ldr	r0, [pc, #96]	; (80039d0 <HAL_TIM_MspPostInit+0xc0>)
 800396e:	f005 fb17 	bl	8008fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003972:	e024      	b.n	80039be <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d11f      	bne.n	80039be <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_TIM_MspPostInit+0xbc>)
 8003980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003984:	4a11      	ldr	r2, [pc, #68]	; (80039cc <HAL_TIM_MspPostInit+0xbc>)
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <HAL_TIM_MspPostInit+0xbc>)
 8003990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800399c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a2:	2302      	movs	r3, #2
 80039a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039ae:	2301      	movs	r3, #1
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b2:	f107 0314 	add.w	r3, r7, #20
 80039b6:	4619      	mov	r1, r3
 80039b8:	4806      	ldr	r0, [pc, #24]	; (80039d4 <HAL_TIM_MspPostInit+0xc4>)
 80039ba:	f005 faf1 	bl	8008fa0 <HAL_GPIO_Init>
}
 80039be:	bf00      	nop
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	58024400 	.word	0x58024400
 80039d0:	58020000 	.word	0x58020000
 80039d4:	58020400 	.word	0x58020400

080039d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b0ba      	sub	sp, #232	; 0xe8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	22c0      	movs	r2, #192	; 0xc0
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f013 f8f7 	bl	8016bec <memset>
  if(huart->Instance==USART1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a41      	ldr	r2, [pc, #260]	; (8003b08 <HAL_UART_MspInit+0x130>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d17b      	bne.n	8003b00 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a08:	f04f 0201 	mov.w	r2, #1
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003a14:	2318      	movs	r3, #24
 8003a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a1a:	f107 0310 	add.w	r3, r7, #16
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f007 fb4a 	bl	800b0b8 <HAL_RCCEx_PeriphCLKConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003a2a:	f7ff fbe1 	bl	80031f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_UART_MspInit+0x134>)
 8003a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a34:	4a35      	ldr	r2, [pc, #212]	; (8003b0c <HAL_UART_MspInit+0x134>)
 8003a36:	f043 0310 	orr.w	r3, r3, #16
 8003a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_UART_MspInit+0x134>)
 8003a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_UART_MspInit+0x134>)
 8003a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a52:	4a2e      	ldr	r2, [pc, #184]	; (8003b0c <HAL_UART_MspInit+0x134>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <HAL_UART_MspInit+0x134>)
 8003a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a84:	2307      	movs	r3, #7
 8003a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481f      	ldr	r0, [pc, #124]	; (8003b10 <HAL_UART_MspInit+0x138>)
 8003a92:	f005 fa85 	bl	8008fa0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003a98:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <HAL_UART_MspInit+0x140>)
 8003a9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003a9e:	222a      	movs	r2, #42	; 0x2a
 8003aa0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003aa4:	2240      	movs	r2, #64	; 0x40
 8003aa6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ad4:	480f      	ldr	r0, [pc, #60]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003ad6:	f002 fc1b 	bl	8006310 <HAL_DMA_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003ae0:	f7ff fb86 	bl	80031f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003ae8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_UART_MspInit+0x13c>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2105      	movs	r1, #5
 8003af4:	2025      	movs	r0, #37	; 0x25
 8003af6:	f001 ffdd 	bl	8005ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003afa:	2025      	movs	r0, #37	; 0x25
 8003afc:	f001 fff4 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b00:	bf00      	nop
 8003b02:	37e8      	adds	r7, #232	; 0xe8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40011000 	.word	0x40011000
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	58020000 	.word	0x58020000
 8003b14:	24000680 	.word	0x24000680
 8003b18:	40020040 	.word	0x40020040

08003b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b090      	sub	sp, #64	; 0x40
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d827      	bhi.n	8003b7a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	2036      	movs	r0, #54	; 0x36
 8003b30:	f001 ffc0 	bl	8005ab4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b34:	2036      	movs	r0, #54	; 0x36
 8003b36:	f001 ffd7 	bl	8005ae8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_InitTick+0xc4>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_InitTick+0xc8>)
 8003b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b46:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <HAL_InitTick+0xc8>)
 8003b48:	f043 0310 	orr.w	r3, r3, #16
 8003b4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_InitTick+0xc8>)
 8003b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b5e:	f107 0210 	add.w	r2, r7, #16
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f007 fa63 	bl	800b034 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_InitTick+0x6a>
 8003b78:	e001      	b.n	8003b7e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02b      	b.n	8003bd6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b7e:	f007 fa2d 	bl	800afdc <HAL_RCC_GetPCLK1Freq>
 8003b82:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003b84:	e004      	b.n	8003b90 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b86:	f007 fa29 	bl	800afdc <HAL_RCC_GetPCLK1Freq>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b92:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_InitTick+0xcc>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	0c9b      	lsrs	r3, r3, #18
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <HAL_InitTick+0xd0>)
 8003ba0:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <HAL_InitTick+0xd4>)
 8003ba2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_InitTick+0xd0>)
 8003ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003baa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003bac:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <HAL_InitTick+0xd0>)
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <HAL_InitTick+0xd0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_InitTick+0xd0>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003bbe:	480b      	ldr	r0, [pc, #44]	; (8003bec <HAL_InitTick+0xd0>)
 8003bc0:	f00a feeb 	bl	800e99a <HAL_TIM_Base_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003bca:	4808      	ldr	r0, [pc, #32]	; (8003bec <HAL_InitTick+0xd0>)
 8003bcc:	f00a ff3c 	bl	800ea48 <HAL_TIM_Base_Start_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	e000      	b.n	8003bd6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3740      	adds	r7, #64	; 0x40
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	24000094 	.word	0x24000094
 8003be4:	58024400 	.word	0x58024400
 8003be8:	431bde83 	.word	0x431bde83
 8003bec:	24001094 	.word	0x24001094
 8003bf0:	40001000 	.word	0x40001000

08003bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003bf8:	e7fe      	b.n	8003bf8 <NMI_Handler+0x4>

08003bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfe:	e7fe      	b.n	8003bfe <HardFault_Handler+0x4>

08003c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <MemManage_Handler+0x4>

08003c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c0a:	e7fe      	b.n	8003c0a <BusFault_Handler+0x4>

08003c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c10:	e7fe      	b.n	8003c10 <UsageFault_Handler+0x4>

08003c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <DMA1_Stream0_IRQHandler+0x10>)
 8003c26:	f003 fe9d 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	24000204 	.word	0x24000204

08003c34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <DMA1_Stream1_IRQHandler+0x10>)
 8003c3a:	f003 fe93 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2400027c 	.word	0x2400027c

08003c48 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <DMA1_Stream2_IRQHandler+0x10>)
 8003c4e:	f003 fe89 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	24000680 	.word	0x24000680

08003c5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <DMA1_Stream5_IRQHandler+0x10>)
 8003c62:	f003 fe7f 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	24000308 	.word	0x24000308

08003c70 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <TIM1_BRK_IRQHandler+0x10>)
 8003c76:	f00b f9fe 	bl	800f076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	24000508 	.word	0x24000508

08003c84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <TIM1_UP_IRQHandler+0x10>)
 8003c8a:	f00b f9f4 	bl	800f076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	24000508 	.word	0x24000508

08003c98 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003c9e:	f00b f9ea 	bl	800f076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24000508 	.word	0x24000508

08003cac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <TIM1_CC_IRQHandler+0x10>)
 8003cb2:	f00b f9e0 	bl	800f076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	24000508 	.word	0x24000508

08003cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM2_IRQHandler+0x10>)
 8003cc6:	f00b f9d6 	bl	800f076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	24000554 	.word	0x24000554

08003cd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <TIM3_IRQHandler+0x10>)
 8003cda:	f00b f9cc 	bl	800f076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	240005a0 	.word	0x240005a0

08003ce8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <USART1_IRQHandler+0x10>)
 8003cee:	f00c fd85 	bl	80107fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	240005ec 	.word	0x240005ec

08003cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <TIM6_DAC_IRQHandler+0x20>)
 8003d02:	791b      	ldrb	r3, [r3, #4]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003d0a:	4804      	ldr	r0, [pc, #16]	; (8003d1c <TIM6_DAC_IRQHandler+0x20>)
 8003d0c:	f002 f881 	bl	8005e12 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003d10:	4803      	ldr	r0, [pc, #12]	; (8003d20 <TIM6_DAC_IRQHandler+0x24>)
 8003d12:	f00b f9b0 	bl	800f076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	240002f4 	.word	0x240002f4
 8003d20:	24001094 	.word	0x24001094

08003d24 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <ITM_SendChar+0x48>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <ITM_SendChar+0x48>)
 8003d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d38:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <ITM_SendChar+0x4c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <ITM_SendChar+0x4c>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003d46:	bf00      	nop
 8003d48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f8      	beq.n	8003d48 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003d56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000edfc 	.word	0xe000edfc
 8003d70:	e0000e00 	.word	0xe0000e00

08003d74 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e00a      	b.n	8003d9c <_read+0x28>
		*ptr++ = __io_getchar();
 8003d86:	f3af 8000 	nop.w
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	60ba      	str	r2, [r7, #8]
 8003d92:	b2ca      	uxtb	r2, r1
 8003d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	dbf0      	blt.n	8003d86 <_read+0x12>
	}

	return len;
 8003da4:	687b      	ldr	r3, [r7, #4]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e009      	b.n	8003dd4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	60ba      	str	r2, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ffab 	bl	8003d24 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dbf1      	blt.n	8003dc0 <_write+0x12>
	}
	return len;
 8003ddc:	687b      	ldr	r3, [r7, #4]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_close>:

int _close(int file) {
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_fstat>:

int _fstat(int file, struct stat *st) {
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <_isatty>:

int _isatty(int file) {
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003e58:	4a14      	ldr	r2, [pc, #80]	; (8003eac <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <_sbrk+0x64>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <_sbrk+0x64>)
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <_sbrk+0x68>)
 8003e70:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <_sbrk+0x64>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d207      	bcs.n	8003e90 <_sbrk+0x40>
		errno = ENOMEM;
 8003e80:	f012 fe6c 	bl	8016b5c <__errno>
 8003e84:	4603      	mov	r3, r0
 8003e86:	220c      	movs	r2, #12
 8003e88:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e8e:	e009      	b.n	8003ea4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <_sbrk+0x64>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <_sbrk+0x64>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <_sbrk+0x64>)
 8003ea0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	24080000 	.word	0x24080000
 8003eb0:	00000400 	.word	0x00000400
 8003eb4:	240010e0 	.word	0x240010e0
 8003eb8:	24005a48 	.word	0x24005a48

08003ebc <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003ec0:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <SystemInit+0xe4>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	4a36      	ldr	r2, [pc, #216]	; (8003fa0 <SystemInit+0xe4>)
 8003ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003ed0:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <SystemInit+0xe8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d807      	bhi.n	8003eec <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003edc:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <SystemInit+0xe8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 030f 	bic.w	r3, r3, #15
 8003ee4:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <SystemInit+0xe8>)
 8003ee6:	f043 0307 	orr.w	r3, r3, #7
 8003eea:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003eec:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <SystemInit+0xec>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <SystemInit+0xec>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <SystemInit+0xec>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <SystemInit+0xec>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4929      	ldr	r1, [pc, #164]	; (8003fa8 <SystemInit+0xec>)
 8003f04:	4b29      	ldr	r3, [pc, #164]	; (8003fac <SystemInit+0xf0>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003f0a:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <SystemInit+0xe8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <SystemInit+0xe8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 030f 	bic.w	r3, r3, #15
 8003f1e:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <SystemInit+0xe8>)
 8003f20:	f043 0307 	orr.w	r3, r3, #7
 8003f24:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <SystemInit+0xec>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <SystemInit+0xec>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <SystemInit+0xec>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <SystemInit+0xec>)
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <SystemInit+0xf4>)
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <SystemInit+0xec>)
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <SystemInit+0xf8>)
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <SystemInit+0xec>)
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <SystemInit+0xfc>)
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003f4a:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <SystemInit+0xec>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <SystemInit+0xec>)
 8003f52:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <SystemInit+0xfc>)
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <SystemInit+0xec>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <SystemInit+0xec>)
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <SystemInit+0xfc>)
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <SystemInit+0xec>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <SystemInit+0xec>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <SystemInit+0xec>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <SystemInit+0xec>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <SystemInit+0x100>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <SystemInit+0x104>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f86:	d202      	bcs.n	8003f8e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <SystemInit+0x108>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <SystemInit+0x10c>)
 8003f90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00
 8003fa4:	52002000 	.word	0x52002000
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fb0:	02020200 	.word	0x02020200
 8003fb4:	01ff0000 	.word	0x01ff0000
 8003fb8:	01010280 	.word	0x01010280
 8003fbc:	5c001000 	.word	0x5c001000
 8003fc0:	ffff0000 	.word	0xffff0000
 8003fc4:	51008108 	.word	0x51008108
 8003fc8:	52004000 	.word	0x52004000

08003fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fd0:	f7ff ff74 	bl	8003ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fd4:	480c      	ldr	r0, [pc, #48]	; (8004008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fd6:	490d      	ldr	r1, [pc, #52]	; (800400c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fdc:	e002      	b.n	8003fe4 <LoopCopyDataInit>

08003fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fe2:	3304      	adds	r3, #4

08003fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fe8:	d3f9      	bcc.n	8003fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fec:	4c0a      	ldr	r4, [pc, #40]	; (8004018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff0:	e001      	b.n	8003ff6 <LoopFillZerobss>

08003ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ff4:	3204      	adds	r2, #4

08003ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ff8:	d3fb      	bcc.n	8003ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ffa:	f012 fdb5 	bl	8016b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ffe:	f7fc ffd3 	bl	8000fa8 <main>
  bx  lr
 8004002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004004:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004008:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800400c:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8004010:	08017ab8 	.word	0x08017ab8
  ldr r2, =_sbss
 8004014:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8004018:	24005a48 	.word	0x24005a48

0800401c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800401c:	e7fe      	b.n	800401c <ADC3_IRQHandler>
	...

08004020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004026:	2003      	movs	r0, #3
 8004028:	f001 fd39 	bl	8005a9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800402c:	f006 fe2c 	bl	800ac88 <HAL_RCC_GetSysClockFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <HAL_Init+0x68>)
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	4913      	ldr	r1, [pc, #76]	; (800408c <HAL_Init+0x6c>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <HAL_Init+0x68>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	4a0e      	ldr	r2, [pc, #56]	; (800408c <HAL_Init+0x6c>)
 8004054:	5cd3      	ldrb	r3, [r2, r3]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <HAL_Init+0x70>)
 8004062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004064:	4a0b      	ldr	r2, [pc, #44]	; (8004094 <HAL_Init+0x74>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800406a:	2005      	movs	r0, #5
 800406c:	f7ff fd56 	bl	8003b1c <HAL_InitTick>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e002      	b.n	8004080 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800407a:	f7ff f8bf 	bl	80031fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	58024400 	.word	0x58024400
 800408c:	08017a04 	.word	0x08017a04
 8004090:	24000090 	.word	0x24000090
 8004094:	2400008c 	.word	0x2400008c

08004098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_IncTick+0x20>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_IncTick+0x24>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4413      	add	r3, r2
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_IncTick+0x24>)
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	24000098 	.word	0x24000098
 80040bc:	240010e4 	.word	0x240010e4

080040c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return uwTick;
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_GetTick+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	240010e4 	.word	0x240010e4

080040d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_GetREVID+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0c1b      	lsrs	r3, r3, #16
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	5c001000 	.word	0x5c001000

080040f0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	4904      	ldr	r1, [pc, #16]	; (8004118 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	58000400 	.word	0x58000400

0800411c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3360      	adds	r3, #96	; 0x60
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	611a      	str	r2, [r3, #16]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3360      	adds	r3, #96	; 0x60
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	431a      	orrs	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	601a      	str	r2, [r3, #0]
  }
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004252:	b480      	push	{r7}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3330      	adds	r3, #48	; 0x30
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	4413      	add	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	211f      	movs	r1, #31
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	401a      	ands	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0e9b      	lsrs	r3, r3, #26
 800428a:	f003 011f 	and.w	r1, r3, #31
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	431a      	orrs	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f023 0203 	bic.w	r2, r3, #3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3314      	adds	r3, #20
 80042e0:	461a      	mov	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	0e5b      	lsrs	r3, r3, #25
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	4413      	add	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0d1b      	lsrs	r3, r3, #20
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	2107      	movs	r1, #7
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	401a      	ands	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	0d1b      	lsrs	r3, r3, #20
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	431a      	orrs	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0318 	and.w	r3, r3, #24
 800434a:	4908      	ldr	r1, [pc, #32]	; (800436c <LL_ADC_SetChannelSingleDiff+0x44>)
 800434c:	40d9      	lsrs	r1, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	400b      	ands	r3, r1
 8004352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004356:	431a      	orrs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	000fffff 	.word	0x000fffff

08004370 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 031f 	and.w	r3, r3, #31
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6093      	str	r3, [r2, #8]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	5fffffc0 	.word	0x5fffffc0

080043b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c4:	d101      	bne.n	80043ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <LL_ADC_EnableInternalRegulator+0x24>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	6fffffc0 	.word	0x6fffffc0

08004400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004414:	d101      	bne.n	800441a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <LL_ADC_Enable+0x24>)
 8004436:	4013      	ands	r3, r2
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	7fffffc0 	.word	0x7fffffc0

08004450 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <LL_ADC_Disable+0x24>)
 800445e:	4013      	ands	r3, r2
 8004460:	f043 0202 	orr.w	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	7fffffc0 	.word	0x7fffffc0

08004478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <LL_ADC_IsEnabled+0x18>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <LL_ADC_IsEnabled+0x1a>
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_IsDisableOngoing+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_IsDisableOngoing+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <LL_ADC_REG_StartConversion+0x24>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	7fffffc0 	.word	0x7fffffc0

080044ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d101      	bne.n	8004504 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b08      	cmp	r3, #8
 8004524:	d101      	bne.n	800452a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b089      	sub	sp, #36	; 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e18f      	b.n	8004872 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fe fe69 	bl	8003238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ff19 	bl	80043b0 <LL_ADC_IsDeepPowerDownEnabled>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff feff 	bl	800438c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff34 	bl	8004400 <LL_ADC_IsInternalRegulatorEnabled>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d114      	bne.n	80045c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff18 	bl	80043d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045a8:	4b87      	ldr	r3, [pc, #540]	; (80047c8 <HAL_ADC_Init+0x290>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	4a87      	ldr	r2, [pc, #540]	; (80047cc <HAL_ADC_Init+0x294>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	3301      	adds	r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045ba:	e002      	b.n	80045c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	3b01      	subs	r3, #1
 80045c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f9      	bne.n	80045bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff17 	bl	8004400 <LL_ADC_IsInternalRegulatorEnabled>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f043 0210 	orr.w	r2, r3, #16
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f043 0201 	orr.w	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff77 	bl	80044ec <LL_ADC_REG_IsConversionOngoing>
 80045fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 8129 	bne.w	8004860 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8125 	bne.w	8004860 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800461e:	f043 0202 	orr.w	r2, r3, #2
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ff24 	bl	8004478 <LL_ADC_IsEnabled>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d136      	bne.n	80046a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_ADC_Init+0x298>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <HAL_ADC_Init+0x112>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a63      	ldr	r2, [pc, #396]	; (80047d4 <HAL_ADC_Init+0x29c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10e      	bne.n	8004668 <HAL_ADC_Init+0x130>
 800464a:	4861      	ldr	r0, [pc, #388]	; (80047d0 <HAL_ADC_Init+0x298>)
 800464c:	f7ff ff14 	bl	8004478 <LL_ADC_IsEnabled>
 8004650:	4604      	mov	r4, r0
 8004652:	4860      	ldr	r0, [pc, #384]	; (80047d4 <HAL_ADC_Init+0x29c>)
 8004654:	f7ff ff10 	bl	8004478 <LL_ADC_IsEnabled>
 8004658:	4603      	mov	r3, r0
 800465a:	4323      	orrs	r3, r4
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e008      	b.n	800467a <HAL_ADC_Init+0x142>
 8004668:	485b      	ldr	r0, [pc, #364]	; (80047d8 <HAL_ADC_Init+0x2a0>)
 800466a:	f7ff ff05 	bl	8004478 <LL_ADC_IsEnabled>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d012      	beq.n	80046a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a53      	ldr	r2, [pc, #332]	; (80047d0 <HAL_ADC_Init+0x298>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_ADC_Init+0x15a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a51      	ldr	r2, [pc, #324]	; (80047d4 <HAL_ADC_Init+0x29c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_ADC_Init+0x15e>
 8004692:	4a52      	ldr	r2, [pc, #328]	; (80047dc <HAL_ADC_Init+0x2a4>)
 8004694:	e000      	b.n	8004698 <HAL_ADC_Init+0x160>
 8004696:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_ADC_Init+0x2a8>)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f7ff fd3c 	bl	800411c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80046a4:	f7ff fd18 	bl	80040d8 <HAL_GetREVID>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d914      	bls.n	80046dc <HAL_ADC_Init+0x1a4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d110      	bne.n	80046dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7d5b      	ldrb	r3, [r3, #21]
 80046be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	7f1b      	ldrb	r3, [r3, #28]
 80046d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046d4:	f043 030c 	orr.w	r3, r3, #12
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e00d      	b.n	80046f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7d5b      	ldrb	r3, [r3, #21]
 80046e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7f1b      	ldrb	r3, [r3, #28]
 80046f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7f1b      	ldrb	r3, [r3, #28]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d106      	bne.n	800470e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	3b01      	subs	r3, #1
 8004706:	045b      	lsls	r3, r3, #17
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <HAL_ADC_Init+0x2ac>)
 8004732:	4013      	ands	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	69b9      	ldr	r1, [r7, #24]
 800473a:	430b      	orrs	r3, r1
 800473c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fed2 	bl	80044ec <LL_ADC_REG_IsConversionOngoing>
 8004748:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fedf 	bl	8004512 <LL_ADC_INJ_IsConversionOngoing>
 8004754:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d15f      	bne.n	800481c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d15c      	bne.n	800481c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	7d1b      	ldrb	r3, [r3, #20]
 8004766:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <HAL_ADC_Init+0x2b0>)
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	69b9      	ldr	r1, [r7, #24]
 8004780:	430b      	orrs	r3, r1
 8004782:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800478a:	2b01      	cmp	r3, #1
 800478c:	d130      	bne.n	80047f0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	4b14      	ldr	r3, [pc, #80]	; (80047ec <HAL_ADC_Init+0x2b4>)
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047a2:	3a01      	subs	r2, #1
 80047a4:	0411      	lsls	r1, r2, #16
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047aa:	4311      	orrs	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047b0:	4311      	orrs	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047b6:	430a      	orrs	r2, r1
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	611a      	str	r2, [r3, #16]
 80047c4:	e01c      	b.n	8004800 <HAL_ADC_Init+0x2c8>
 80047c6:	bf00      	nop
 80047c8:	2400008c 	.word	0x2400008c
 80047cc:	053e2d63 	.word	0x053e2d63
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40022100 	.word	0x40022100
 80047d8:	58026000 	.word	0x58026000
 80047dc:	40022300 	.word	0x40022300
 80047e0:	58026300 	.word	0x58026300
 80047e4:	fff0c003 	.word	0xfff0c003
 80047e8:	ffffbffc 	.word	0xffffbffc
 80047ec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fdec 	bl	80053f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d10c      	bne.n	800483e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f023 010f 	bic.w	r1, r3, #15
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	1e5a      	subs	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
 800483c:	e007      	b.n	800484e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 020f 	bic.w	r2, r2, #15
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
 800485e:	e007      	b.n	8004870 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004870:	7ffb      	ldrb	r3, [r7, #31]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3724      	adds	r7, #36	; 0x24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd90      	pop	{r4, r7, pc}
 800487a:	bf00      	nop

0800487c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <HAL_ADC_Start_DMA+0x168>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_ADC_Start_DMA+0x20>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a54      	ldr	r2, [pc, #336]	; (80049e8 <HAL_ADC_Start_DMA+0x16c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_ADC_Start_DMA+0x24>
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_ADC_Start_DMA+0x170>)
 800489e:	e000      	b.n	80048a2 <HAL_ADC_Start_DMA+0x26>
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_ADC_Start_DMA+0x174>)
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fd64 	bl	8004370 <LL_ADC_GetMultimode>
 80048a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fe1c 	bl	80044ec <LL_ADC_REG_IsConversionOngoing>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f040 808c 	bne.w	80049d4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_Start_DMA+0x4e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e087      	b.n	80049da <HAL_ADC_Start_DMA+0x15e>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d002      	beq.n	80048e4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b09      	cmp	r3, #9
 80048e2:	d170      	bne.n	80049c6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fc07 	bl	80050f8 <ADC_Enable>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d163      	bne.n	80049bc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048f8:	4b3e      	ldr	r3, [pc, #248]	; (80049f4 <HAL_ADC_Start_DMA+0x178>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a37      	ldr	r2, [pc, #220]	; (80049e8 <HAL_ADC_Start_DMA+0x16c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d002      	beq.n	8004914 <HAL_ADC_Start_DMA+0x98>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	e000      	b.n	8004916 <HAL_ADC_Start_DMA+0x9a>
 8004914:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_ADC_Start_DMA+0x168>)
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	4293      	cmp	r3, r2
 800491c:	d002      	beq.n	8004924 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d006      	beq.n	800494a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f023 0206 	bic.w	r2, r3, #6
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	659a      	str	r2, [r3, #88]	; 0x58
 8004948:	e002      	b.n	8004950 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004954:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <HAL_ADC_Start_DMA+0x17c>)
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	4a27      	ldr	r2, [pc, #156]	; (80049fc <HAL_ADC_Start_DMA+0x180>)
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <HAL_ADC_Start_DMA+0x184>)
 8004966:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	221c      	movs	r2, #28
 800496e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0210 	orr.w	r2, r2, #16
 8004986:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f7ff fc89 	bl	80042aa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3340      	adds	r3, #64	; 0x40
 80049a2:	4619      	mov	r1, r3
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f002 f80e 	bl	80069c8 <HAL_DMA_Start_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fd85 	bl	80044c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80049ba:	e00d      	b.n	80049d8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80049c4:	e008      	b.n	80049d8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049d2:	e001      	b.n	80049d8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40022000 	.word	0x40022000
 80049e8:	40022100 	.word	0x40022100
 80049ec:	40022300 	.word	0x40022300
 80049f0:	58026300 	.word	0x58026300
 80049f4:	fffff0fe 	.word	0xfffff0fe
 80049f8:	080052cb 	.word	0x080052cb
 80049fc:	080053a3 	.word	0x080053a3
 8004a00:	080053bf 	.word	0x080053bf

08004a04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b0a1      	sub	sp, #132	; 0x84
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a65      	ldr	r2, [pc, #404]	; (8004bf0 <HAL_ADC_ConfigChannel+0x1b0>)
 8004a5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x2a>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e32e      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x688>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fd38 	bl	80044ec <LL_ADC_REG_IsConversionOngoing>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f040 8313 	bne.w	80050aa <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db2c      	blt.n	8004ae6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d108      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x6a>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0e9b      	lsrs	r3, r3, #26
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	e016      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x98>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	e003      	b.n	8004ace <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ac8:	fab3 f383 	clz	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	69d1      	ldr	r1, [r2, #28]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7ff fbad 	bl	8004252 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fcf5 	bl	80044ec <LL_ADC_REG_IsConversionOngoing>
 8004b02:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fd02 	bl	8004512 <LL_ADC_INJ_IsConversionOngoing>
 8004b0e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 80b8 	bne.w	8004c88 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80b4 	bne.w	8004c88 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f7ff fbcf 	bl	80042d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b32:	4b30      	ldr	r3, [pc, #192]	; (8004bf4 <HAL_ADC_ConfigChannel+0x1b4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3e:	d10b      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x118>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	089b      	lsrs	r3, r3, #2
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	e01d      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x154>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x13e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	089b      	lsrs	r3, r3, #2
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	e00a      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x154>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d02c      	beq.n	8004bf8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6919      	ldr	r1, [r3, #16]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bac:	f7ff faea 	bl	8004184 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6919      	ldr	r1, [r3, #16]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	7e5b      	ldrb	r3, [r3, #25]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d102      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x186>
 8004bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bc4:	e000      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x188>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f7ff fb14 	bl	80041f6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6919      	ldr	r1, [r3, #16]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	7e1b      	ldrb	r3, [r3, #24]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x1a4>
 8004bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004be2:	e000      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x1a6>
 8004be4:	2300      	movs	r3, #0
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7ff faec 	bl	80041c4 <LL_ADC_SetDataRightShift>
 8004bec:	e04c      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x248>
 8004bee:	bf00      	nop
 8004bf0:	47ff0000 	.word	0x47ff0000
 8004bf4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	069b      	lsls	r3, r3, #26
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d107      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	069b      	lsls	r3, r3, #26
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d107      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c3e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	069b      	lsls	r3, r3, #26
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d107      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c62:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	069b      	lsls	r3, r3, #26
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d107      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fbf3 	bl	8004478 <LL_ADC_IsEnabled>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 8211 	bne.w	80050bc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7ff fb3e 	bl	8004328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4aa1      	ldr	r2, [pc, #644]	; (8004f38 <HAL_ADC_ConfigChannel+0x4f8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f040 812e 	bne.w	8004f14 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x2a0>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0e9b      	lsrs	r3, r3, #26
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	2b09      	cmp	r3, #9
 8004cd6:	bf94      	ite	ls
 8004cd8:	2301      	movls	r3, #1
 8004cda:	2300      	movhi	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e019      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x2d4>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	e003      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfe:	fab3 f383 	clz	r3, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2b09      	cmp	r3, #9
 8004d0c:	bf94      	ite	ls
 8004d0e:	2301      	movls	r3, #1
 8004d10:	2300      	movhi	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d079      	beq.n	8004e0c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x2f4>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	0e9b      	lsrs	r3, r3, #26
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	069b      	lsls	r3, r3, #26
 8004d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d32:	e015      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x320>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d44:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	e003      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	069b      	lsls	r3, r3, #26
 8004d5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <HAL_ADC_ConfigChannel+0x340>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0e9b      	lsrs	r3, r3, #26
 8004d72:	3301      	adds	r3, #1
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2101      	movs	r1, #1
 8004d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7e:	e017      	b.n	8004db0 <HAL_ADC_ConfigChannel+0x370>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d88:	fa93 f3a3 	rbit	r3, r3
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d90:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004d98:	2320      	movs	r3, #32
 8004d9a:	e003      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	3301      	adds	r3, #1
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2101      	movs	r1, #1
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	ea42 0103 	orr.w	r1, r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x396>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	0e9b      	lsrs	r3, r3, #26
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f003 021f 	and.w	r2, r3, #31
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	051b      	lsls	r3, r3, #20
 8004dd4:	e018      	b.n	8004e08 <HAL_ADC_ConfigChannel+0x3c8>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	fa93 f3a3 	rbit	r3, r3
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004dee:	2320      	movs	r3, #32
 8004df0:	e003      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	fab3 f383 	clz	r3, r3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 021f 	and.w	r2, r3, #31
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	e07e      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x3e8>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	0e9b      	lsrs	r3, r3, #26
 8004e1e:	3301      	adds	r3, #1
 8004e20:	069b      	lsls	r3, r3, #26
 8004e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e26:	e015      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x414>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	fa93 f3a3 	rbit	r3, r3
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004e40:	2320      	movs	r3, #32
 8004e42:	e003      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	fab3 f383 	clz	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	069b      	lsls	r3, r3, #26
 8004e50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x434>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	0e9b      	lsrs	r3, r3, #26
 8004e66:	3301      	adds	r3, #1
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	e017      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0x464>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	fa93 f3a3 	rbit	r3, r3
 8004e80:	61bb      	str	r3, [r7, #24]
  return result;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	e003      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	ea42 0103 	orr.w	r1, r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x490>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	0e9b      	lsrs	r3, r3, #26
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f003 021f 	and.w	r2, r3, #31
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3b1e      	subs	r3, #30
 8004ec8:	051b      	lsls	r3, r3, #20
 8004eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ece:	e01b      	b.n	8004f08 <HAL_ADC_ConfigChannel+0x4c8>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	60fb      	str	r3, [r7, #12]
  return result;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004ee8:	2320      	movs	r3, #32
 8004eea:	e003      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f003 021f 	and.w	r2, r3, #31
 8004efa:	4613      	mov	r3, r2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	4413      	add	r3, r2
 8004f00:	3b1e      	subs	r3, #30
 8004f02:	051b      	lsls	r3, r3, #20
 8004f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	6892      	ldr	r2, [r2, #8]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f7ff f9de 	bl	80042d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f280 80cf 	bge.w	80050bc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <HAL_ADC_ConfigChannel+0x4fc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_ADC_ConfigChannel+0x4f2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <HAL_ADC_ConfigChannel+0x500>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d10a      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x508>
 8004f32:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_ADC_ConfigChannel+0x504>)
 8004f34:	e009      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x50a>
 8004f36:	bf00      	nop
 8004f38:	47ff0000 	.word	0x47ff0000
 8004f3c:	40022000 	.word	0x40022000
 8004f40:	40022100 	.word	0x40022100
 8004f44:	40022300 	.word	0x40022300
 8004f48:	4b61      	ldr	r3, [pc, #388]	; (80050d0 <HAL_ADC_ConfigChannel+0x690>)
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff f90c 	bl	8004168 <LL_ADC_GetCommonPathInternalCh>
 8004f50:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a5f      	ldr	r2, [pc, #380]	; (80050d4 <HAL_ADC_ConfigChannel+0x694>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_ADC_ConfigChannel+0x526>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a5d      	ldr	r2, [pc, #372]	; (80050d8 <HAL_ADC_ConfigChannel+0x698>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10e      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x544>
 8004f66:	485b      	ldr	r0, [pc, #364]	; (80050d4 <HAL_ADC_ConfigChannel+0x694>)
 8004f68:	f7ff fa86 	bl	8004478 <LL_ADC_IsEnabled>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	485a      	ldr	r0, [pc, #360]	; (80050d8 <HAL_ADC_ConfigChannel+0x698>)
 8004f70:	f7ff fa82 	bl	8004478 <LL_ADC_IsEnabled>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4323      	orrs	r3, r4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e008      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x556>
 8004f84:	4855      	ldr	r0, [pc, #340]	; (80050dc <HAL_ADC_ConfigChannel+0x69c>)
 8004f86:	f7ff fa77 	bl	8004478 <LL_ADC_IsEnabled>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d07d      	beq.n	8005096 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a50      	ldr	r2, [pc, #320]	; (80050e0 <HAL_ADC_ConfigChannel+0x6a0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d130      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x5c6>
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d12b      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_ADC_ConfigChannel+0x69c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	f040 8081 	bne.w	80050bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a45      	ldr	r2, [pc, #276]	; (80050d4 <HAL_ADC_ConfigChannel+0x694>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_ADC_ConfigChannel+0x58e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a43      	ldr	r2, [pc, #268]	; (80050d8 <HAL_ADC_ConfigChannel+0x698>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x592>
 8004fce:	4a45      	ldr	r2, [pc, #276]	; (80050e4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004fd0:	e000      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x594>
 8004fd2:	4a3f      	ldr	r2, [pc, #252]	; (80050d0 <HAL_ADC_ConfigChannel+0x690>)
 8004fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7ff f8b0 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fe2:	4b41      	ldr	r3, [pc, #260]	; (80050e8 <HAL_ADC_ConfigChannel+0x6a8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	4a40      	ldr	r2, [pc, #256]	; (80050ec <HAL_ADC_ConfigChannel+0x6ac>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ff6:	e002      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f9      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005004:	e05a      	b.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a39      	ldr	r2, [pc, #228]	; (80050f0 <HAL_ADC_ConfigChannel+0x6b0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d11e      	bne.n	800504e <HAL_ADC_ConfigChannel+0x60e>
 8005010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d119      	bne.n	800504e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <HAL_ADC_ConfigChannel+0x69c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d14b      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <HAL_ADC_ConfigChannel+0x694>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_ADC_ConfigChannel+0x5f8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <HAL_ADC_ConfigChannel+0x698>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_ADC_ConfigChannel+0x5fc>
 8005038:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <HAL_ADC_ConfigChannel+0x6a4>)
 800503a:	e000      	b.n	800503e <HAL_ADC_ConfigChannel+0x5fe>
 800503c:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <HAL_ADC_ConfigChannel+0x690>)
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7ff f87b 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800504c:	e036      	b.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <HAL_ADC_ConfigChannel+0x6b4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d131      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
 8005058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d12c      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_ADC_ConfigChannel+0x69c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d127      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <HAL_ADC_ConfigChannel+0x694>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_ADC_ConfigChannel+0x640>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <HAL_ADC_ConfigChannel+0x698>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x644>
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_ADC_ConfigChannel+0x6a4>)
 8005082:	e000      	b.n	8005086 <HAL_ADC_ConfigChannel+0x646>
 8005084:	4a12      	ldr	r2, [pc, #72]	; (80050d0 <HAL_ADC_ConfigChannel+0x690>)
 8005086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7ff f857 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
 8005094:	e012      	b.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80050a8:	e008      	b.n	80050bc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3784      	adds	r7, #132	; 0x84
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	58026300 	.word	0x58026300
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40022100 	.word	0x40022100
 80050dc:	58026000 	.word	0x58026000
 80050e0:	cb840000 	.word	0xcb840000
 80050e4:	40022300 	.word	0x40022300
 80050e8:	2400008c 	.word	0x2400008c
 80050ec:	053e2d63 	.word	0x053e2d63
 80050f0:	c7520000 	.word	0xc7520000
 80050f4:	cfb80000 	.word	0xcfb80000

080050f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff f9b7 	bl	8004478 <LL_ADC_IsEnabled>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d16e      	bne.n	80051ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <ADC_Enable+0x100>)
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	f043 0210 	orr.w	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	f043 0201 	orr.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e05a      	b.n	80051f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff f972 	bl	8004428 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005144:	f7fe ffbc 	bl	80040c0 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <ADC_Enable+0x104>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <ADC_Enable+0x66>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a29      	ldr	r2, [pc, #164]	; (8005200 <ADC_Enable+0x108>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <ADC_Enable+0x6a>
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <ADC_Enable+0x10c>)
 8005160:	e000      	b.n	8005164 <ADC_Enable+0x6c>
 8005162:	4b29      	ldr	r3, [pc, #164]	; (8005208 <ADC_Enable+0x110>)
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f903 	bl	8004370 <LL_ADC_GetMultimode>
 800516a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <ADC_Enable+0x108>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d002      	beq.n	800517c <ADC_Enable+0x84>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	e000      	b.n	800517e <ADC_Enable+0x86>
 800517c:	4b1f      	ldr	r3, [pc, #124]	; (80051fc <ADC_Enable+0x104>)
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	4293      	cmp	r3, r2
 8005184:	d02c      	beq.n	80051e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d130      	bne.n	80051ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800518c:	e028      	b.n	80051e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff f970 	bl	8004478 <LL_ADC_IsEnabled>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff f940 	bl	8004428 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051a8:	f7fe ff8a 	bl	80040c0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d914      	bls.n	80051e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d00d      	beq.n	80051e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	f043 0210 	orr.w	r2, r3, #16
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d4:	f043 0201 	orr.w	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e007      	b.n	80051f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d1cf      	bne.n	800518e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	8000003f 	.word	0x8000003f
 80051fc:	40022000 	.word	0x40022000
 8005200:	40022100 	.word	0x40022100
 8005204:	40022300 	.word	0x40022300
 8005208:	58026300 	.word	0x58026300

0800520c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff f940 	bl	800449e <LL_ADC_IsDisableOngoing>
 800521e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff f927 	bl	8004478 <LL_ADC_IsEnabled>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d047      	beq.n	80052c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d144      	bne.n	80052c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 030d 	and.w	r3, r3, #13
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10c      	bne.n	800525e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff f901 	bl	8004450 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2203      	movs	r2, #3
 8005254:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005256:	f7fe ff33 	bl	80040c0 <HAL_GetTick>
 800525a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800525c:	e029      	b.n	80052b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	f043 0210 	orr.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	f043 0201 	orr.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e023      	b.n	80052c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800527a:	f7fe ff21 	bl	80040c0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d914      	bls.n	80052b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	f043 0210 	orr.w	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f043 0201 	orr.w	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e007      	b.n	80052c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1dc      	bne.n	800527a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d14b      	bne.n	800537c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d021      	beq.n	8005342 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe ff92 	bl	800422c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d032      	beq.n	8005374 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d12b      	bne.n	8005374 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d11f      	bne.n	8005374 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
 8005340:	e018      	b.n	8005374 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d111      	bne.n	8005374 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff fb45 	bl	8004a04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800537a:	e00e      	b.n	800539a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fb4f 	bl	8004a2c <HAL_ADC_ErrorCallback>
}
 800538e:	e004      	b.n	800539a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff fb31 	bl	8004a18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	f043 0204 	orr.w	r2, r3, #4
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff fb21 	bl	8004a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a7a      	ldr	r2, [pc, #488]	; (80055ec <ADC_ConfigureBoostMode+0x1f8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <ADC_ConfigureBoostMode+0x1c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a79      	ldr	r2, [pc, #484]	; (80055f0 <ADC_ConfigureBoostMode+0x1fc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d109      	bne.n	8005424 <ADC_ConfigureBoostMode+0x30>
 8005410:	4b78      	ldr	r3, [pc, #480]	; (80055f4 <ADC_ConfigureBoostMode+0x200>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e008      	b.n	8005436 <ADC_ConfigureBoostMode+0x42>
 8005424:	4b74      	ldr	r3, [pc, #464]	; (80055f8 <ADC_ConfigureBoostMode+0x204>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf14      	ite	ne
 8005430:	2301      	movne	r3, #1
 8005432:	2300      	moveq	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01c      	beq.n	8005474 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800543a:	f005 fd9f 	bl	800af7c <HAL_RCC_GetHCLKFreq>
 800543e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005448:	d010      	beq.n	800546c <ADC_ConfigureBoostMode+0x78>
 800544a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800544e:	d873      	bhi.n	8005538 <ADC_ConfigureBoostMode+0x144>
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005454:	d002      	beq.n	800545c <ADC_ConfigureBoostMode+0x68>
 8005456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800545a:	d16d      	bne.n	8005538 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	60fb      	str	r3, [r7, #12]
        break;
 800546a:	e068      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	60fb      	str	r3, [r7, #12]
        break;
 8005472:	e064      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005474:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005478:	f04f 0100 	mov.w	r1, #0
 800547c:	f007 f826 	bl	800c4cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005480:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800548a:	d051      	beq.n	8005530 <ADC_ConfigureBoostMode+0x13c>
 800548c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005490:	d854      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 8005492:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005496:	d047      	beq.n	8005528 <ADC_ConfigureBoostMode+0x134>
 8005498:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800549c:	d84e      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 800549e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054a2:	d03d      	beq.n	8005520 <ADC_ConfigureBoostMode+0x12c>
 80054a4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054a8:	d848      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 80054aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ae:	d033      	beq.n	8005518 <ADC_ConfigureBoostMode+0x124>
 80054b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b4:	d842      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 80054b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054ba:	d029      	beq.n	8005510 <ADC_ConfigureBoostMode+0x11c>
 80054bc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054c0:	d83c      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 80054c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054c6:	d01a      	beq.n	80054fe <ADC_ConfigureBoostMode+0x10a>
 80054c8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054cc:	d836      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 80054ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054d2:	d014      	beq.n	80054fe <ADC_ConfigureBoostMode+0x10a>
 80054d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054d8:	d830      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d00e      	beq.n	80054fe <ADC_ConfigureBoostMode+0x10a>
 80054e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e4:	d82a      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 80054e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054ea:	d008      	beq.n	80054fe <ADC_ConfigureBoostMode+0x10a>
 80054ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054f0:	d824      	bhi.n	800553c <ADC_ConfigureBoostMode+0x148>
 80054f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054f6:	d002      	beq.n	80054fe <ADC_ConfigureBoostMode+0x10a>
 80054f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054fc:	d11e      	bne.n	800553c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	0c9b      	lsrs	r3, r3, #18
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	60fb      	str	r3, [r7, #12]
        break;
 800550e:	e016      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	60fb      	str	r3, [r7, #12]
        break;
 8005516:	e012      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	60fb      	str	r3, [r7, #12]
        break;
 800551e:	e00e      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	60fb      	str	r3, [r7, #12]
        break;
 8005526:	e00a      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	09db      	lsrs	r3, r3, #7
 800552c:	60fb      	str	r3, [r7, #12]
        break;
 800552e:	e006      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	60fb      	str	r3, [r7, #12]
        break;
 8005536:	e002      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800553c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800553e:	f7fe fdcb 	bl	80040d8 <HAL_GetREVID>
 8005542:	4603      	mov	r3, r0
 8005544:	f241 0203 	movw	r2, #4099	; 0x1003
 8005548:	4293      	cmp	r3, r2
 800554a:	d815      	bhi.n	8005578 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <ADC_ConfigureBoostMode+0x208>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d908      	bls.n	8005566 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005562:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005564:	e03e      	b.n	80055e4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005574:	609a      	str	r2, [r3, #8]
}
 8005576:	e035      	b.n	80055e4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <ADC_ConfigureBoostMode+0x20c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d808      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005594:	609a      	str	r2, [r3, #8]
}
 8005596:	e025      	b.n	80055e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <ADC_ConfigureBoostMode+0x210>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d80a      	bhi.n	80055b6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	e016      	b.n	80055e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <ADC_ConfigureBoostMode+0x214>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d80a      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d0:	609a      	str	r2, [r3, #8]
}
 80055d2:	e007      	b.n	80055e4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40022000 	.word	0x40022000
 80055f0:	40022100 	.word	0x40022100
 80055f4:	40022300 	.word	0x40022300
 80055f8:	58026300 	.word	0x58026300
 80055fc:	01312d00 	.word	0x01312d00
 8005600:	005f5e10 	.word	0x005f5e10
 8005604:	00bebc20 	.word	0x00bebc20
 8005608:	017d7840 	.word	0x017d7840

0800560c <LL_ADC_IsEnabled>:
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <LL_ADC_IsEnabled+0x18>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <LL_ADC_IsEnabled+0x1a>
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <LL_ADC_StartCalibration>:
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b09      	ldr	r3, [pc, #36]	; (800566c <LL_ADC_StartCalibration+0x38>)
 8005646:	4013      	ands	r3, r2
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005654:	430a      	orrs	r2, r1
 8005656:	4313      	orrs	r3, r2
 8005658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	3ffeffc0 	.word	0x3ffeffc0

08005670 <LL_ADC_IsCalibrationOnGoing>:
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005684:	d101      	bne.n	800568a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_ADC_REG_IsConversionOngoing>:
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d101      	bne.n	80056b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_ADCEx_Calibration_Start+0x1e>
 80056da:	2302      	movs	r3, #2
 80056dc:	e04c      	b.n	8005778 <HAL_ADCEx_Calibration_Start+0xb8>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff fd90 	bl	800520c <ADC_Disable>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d135      	bne.n	8005762 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fa:	4b21      	ldr	r3, [pc, #132]	; (8005780 <HAL_ADCEx_Calibration_Start+0xc0>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	f043 0202 	orr.w	r2, r3, #2
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff ff90 	bl	8005634 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005714:	e014      	b.n	8005740 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	3301      	adds	r3, #1
 800571a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d30d      	bcc.n	8005740 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	f023 0312 	bic.w	r3, r3, #18
 800572c:	f043 0210 	orr.w	r2, r3, #16
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e01b      	b.n	8005778 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff ff93 	bl	8005670 <LL_ADC_IsCalibrationOnGoing>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e2      	bne.n	8005716 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	f023 0303 	bic.w	r3, r3, #3
 8005758:	f043 0201 	orr.w	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	655a      	str	r2, [r3, #84]	; 0x54
 8005760:	e005      	b.n	800576e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	f043 0210 	orr.w	r2, r3, #16
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	ffffeefd 	.word	0xffffeefd
 8005784:	25c3f800 	.word	0x25c3f800

08005788 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b09f      	sub	sp, #124	; 0x7c
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0be      	b.n	8005924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a5c      	ldr	r2, [pc, #368]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d102      	bne.n	80057c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057c0:	4b5b      	ldr	r3, [pc, #364]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	e001      	b.n	80057ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e09d      	b.n	8005924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff ff54 	bl	8005698 <LL_ADC_REG_IsConversionOngoing>
 80057f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff ff4e 	bl	8005698 <LL_ADC_REG_IsConversionOngoing>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d17f      	bne.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005804:	2b00      	cmp	r3, #0
 8005806:	d17c      	bne.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a47      	ldr	r2, [pc, #284]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a46      	ldr	r2, [pc, #280]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d101      	bne.n	8005820 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800581c:	4b45      	ldr	r3, [pc, #276]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800581e:	e000      	b.n	8005822 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005820:	4b45      	ldr	r3, [pc, #276]	; (8005938 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005822:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d039      	beq.n	80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800582c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	431a      	orrs	r2, r3
 800583a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a3a      	ldr	r2, [pc, #232]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a38      	ldr	r2, [pc, #224]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10e      	bne.n	8005870 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005852:	4836      	ldr	r0, [pc, #216]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005854:	f7ff feda 	bl	800560c <LL_ADC_IsEnabled>
 8005858:	4604      	mov	r4, r0
 800585a:	4835      	ldr	r0, [pc, #212]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800585c:	f7ff fed6 	bl	800560c <LL_ADC_IsEnabled>
 8005860:	4603      	mov	r3, r0
 8005862:	4323      	orrs	r3, r4
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e008      	b.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005870:	4832      	ldr	r0, [pc, #200]	; (800593c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005872:	f7ff fecb 	bl	800560c <LL_ADC_IsEnabled>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d047      	beq.n	8005916 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800588c:	4013      	ands	r3, r2
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	6811      	ldr	r1, [r2, #0]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	430a      	orrs	r2, r1
 8005898:	431a      	orrs	r2, r3
 800589a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800589e:	e03a      	b.n	8005916 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80058a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1e      	ldr	r2, [pc, #120]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10e      	bne.n	80058de <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80058c0:	481a      	ldr	r0, [pc, #104]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058c2:	f7ff fea3 	bl	800560c <LL_ADC_IsEnabled>
 80058c6:	4604      	mov	r4, r0
 80058c8:	4819      	ldr	r0, [pc, #100]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058ca:	f7ff fe9f 	bl	800560c <LL_ADC_IsEnabled>
 80058ce:	4603      	mov	r3, r0
 80058d0:	4323      	orrs	r3, r4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e008      	b.n	80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80058de:	4817      	ldr	r0, [pc, #92]	; (800593c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058e0:	f7ff fe94 	bl	800560c <LL_ADC_IsEnabled>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d010      	beq.n	8005916 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058fe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005900:	e009      	b.n	8005916 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005914:	e000      	b.n	8005918 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005916:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005920:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005924:	4618      	mov	r0, r3
 8005926:	377c      	adds	r7, #124	; 0x7c
 8005928:	46bd      	mov	sp, r7
 800592a:	bd90      	pop	{r4, r7, pc}
 800592c:	40022000 	.word	0x40022000
 8005930:	40022100 	.word	0x40022100
 8005934:	40022300 	.word	0x40022300
 8005938:	58026300 	.word	0x58026300
 800593c:	58026000 	.word	0x58026000
 8005940:	fffff0e0 	.word	0xfffff0e0

08005944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <__NVIC_SetPriorityGrouping+0x40>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005960:	4013      	ands	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <__NVIC_SetPriorityGrouping+0x44>)
 800596e:	4313      	orrs	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005972:	4a04      	ldr	r2, [pc, #16]	; (8005984 <__NVIC_SetPriorityGrouping+0x40>)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	60d3      	str	r3, [r2, #12]
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	e000ed00 	.word	0xe000ed00
 8005988:	05fa0000 	.word	0x05fa0000

0800598c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	f003 0307 	and.w	r3, r3, #7
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	db0b      	blt.n	80059d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	f003 021f 	and.w	r2, r3, #31
 80059c0:	4907      	ldr	r1, [pc, #28]	; (80059e0 <__NVIC_EnableIRQ+0x38>)
 80059c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2001      	movs	r0, #1
 80059ca:	fa00 f202 	lsl.w	r2, r0, r2
 80059ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	e000e100 	.word	0xe000e100

080059e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	6039      	str	r1, [r7, #0]
 80059ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db0a      	blt.n	8005a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	490c      	ldr	r1, [pc, #48]	; (8005a30 <__NVIC_SetPriority+0x4c>)
 80059fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a02:	0112      	lsls	r2, r2, #4
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	440b      	add	r3, r1
 8005a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a0c:	e00a      	b.n	8005a24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	4908      	ldr	r1, [pc, #32]	; (8005a34 <__NVIC_SetPriority+0x50>)
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3b04      	subs	r3, #4
 8005a1c:	0112      	lsls	r2, r2, #4
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	440b      	add	r3, r1
 8005a22:	761a      	strb	r2, [r3, #24]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	e000e100 	.word	0xe000e100
 8005a34:	e000ed00 	.word	0xe000ed00

08005a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	; 0x24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f1c3 0307 	rsb	r3, r3, #7
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	bf28      	it	cs
 8005a56:	2304      	movcs	r3, #4
 8005a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2b06      	cmp	r3, #6
 8005a60:	d902      	bls.n	8005a68 <NVIC_EncodePriority+0x30>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3b03      	subs	r3, #3
 8005a66:	e000      	b.n	8005a6a <NVIC_EncodePriority+0x32>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	43d9      	mvns	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a90:	4313      	orrs	r3, r2
         );
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3724      	adds	r7, #36	; 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ff4c 	bl	8005944 <__NVIC_SetPriorityGrouping>
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ac2:	f7ff ff63 	bl	800598c <__NVIC_GetPriorityGrouping>
 8005ac6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	6978      	ldr	r0, [r7, #20]
 8005ace:	f7ff ffb3 	bl	8005a38 <NVIC_EncodePriority>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ff82 	bl	80059e4 <__NVIC_SetPriority>
}
 8005ae0:	bf00      	nop
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff ff56 	bl	80059a8 <__NVIC_EnableIRQ>
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e014      	b.n	8005b40 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fd fca0 	bl	800346c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e046      	b.n	8005bea <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	795b      	ldrb	r3, [r3, #5]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_DAC_Start+0x20>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e040      	b.n	8005bea <HAL_DAC_Start+0xa2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2201      	movs	r2, #1
 8005b82:	409a      	lsls	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10f      	bne.n	8005bb2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d11d      	bne.n	8005bdc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	e014      	b.n	8005bdc <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d107      	bne.n	8005bdc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0202 	orr.w	r2, r2, #2
 8005bda:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0a2      	b.n	8005d56 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	795b      	ldrb	r3, [r3, #5]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_DAC_Start_DMA+0x24>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e09c      	b.n	8005d56 <HAL_DAC_Start_DMA+0x15e>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2202      	movs	r2, #2
 8005c26:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d129      	bne.n	8005c82 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4a4b      	ldr	r2, [pc, #300]	; (8005d60 <HAL_DAC_Start_DMA+0x168>)
 8005c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <HAL_DAC_Start_DMA+0x16c>)
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	4a49      	ldr	r2, [pc, #292]	; (8005d68 <HAL_DAC_Start_DMA+0x170>)
 8005c44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c54:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_DAC_Start_DMA+0x6c>
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d005      	beq.n	8005c6e <HAL_DAC_Start_DMA+0x76>
 8005c62:	e009      	b.n	8005c78 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	613b      	str	r3, [r7, #16]
        break;
 8005c6c:	e033      	b.n	8005cd6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	613b      	str	r3, [r7, #16]
        break;
 8005c76:	e02e      	b.n	8005cd6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3310      	adds	r3, #16
 8005c7e:	613b      	str	r3, [r7, #16]
        break;
 8005c80:	e029      	b.n	8005cd6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	4a39      	ldr	r2, [pc, #228]	; (8005d6c <HAL_DAC_Start_DMA+0x174>)
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	4a38      	ldr	r2, [pc, #224]	; (8005d70 <HAL_DAC_Start_DMA+0x178>)
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4a37      	ldr	r2, [pc, #220]	; (8005d74 <HAL_DAC_Start_DMA+0x17c>)
 8005c98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ca8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_DAC_Start_DMA+0xc0>
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d005      	beq.n	8005cc2 <HAL_DAC_Start_DMA+0xca>
 8005cb6:	e009      	b.n	8005ccc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3314      	adds	r3, #20
 8005cbe:	613b      	str	r3, [r7, #16]
        break;
 8005cc0:	e009      	b.n	8005cd6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3318      	adds	r3, #24
 8005cc8:	613b      	str	r3, [r7, #16]
        break;
 8005cca:	e004      	b.n	8005cd6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	331c      	adds	r3, #28
 8005cd2:	613b      	str	r3, [r7, #16]
        break;
 8005cd4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d111      	bne.n	8005d00 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6898      	ldr	r0, [r3, #8]
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	f000 fe67 	bl	80069c8 <HAL_DMA_Start_IT>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]
 8005cfe:	e010      	b.n	8005d22 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68d8      	ldr	r0, [r3, #12]
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	f000 fe55 	bl	80069c8 <HAL_DMA_Start_IT>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10c      	bne.n	8005d48 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e005      	b.n	8005d54 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f043 0204 	orr.w	r2, r3, #4
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	080061e9 	.word	0x080061e9
 8005d64:	0800620b 	.word	0x0800620b
 8005d68:	08006227 	.word	0x08006227
 8005d6c:	080062a5 	.word	0x080062a5
 8005d70:	080062c7 	.word	0x080062c7
 8005d74:	080062e3 	.word	0x080062e3

08005d78 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e03e      	b.n	8005e0a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	43da      	mvns	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	400a      	ands	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6819      	ldr	r1, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2201      	movs	r2, #1
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	43da      	mvns	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10d      	bne.n	8005de8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 f863 	bl	8006e9c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e00c      	b.n	8005e02 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 f855 	bl	8006e9c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005e00:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e28:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01d      	beq.n	8005e70 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d018      	beq.n	8005e70 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2204      	movs	r2, #4
 8005e42:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f043 0201 	orr.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e68:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f86f 	bl	8005f4e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01d      	beq.n	8005eb6 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d018      	beq.n	8005eb6 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2204      	movs	r2, #4
 8005e88:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f043 0202 	orr.w	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005eae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f9ed 	bl	8006290 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b087      	sub	sp, #28
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e015      	b.n	8005f06 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	3308      	adds	r3, #8
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e004      	b.n	8005efc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3314      	adds	r3, #20
 8005efa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	461a      	mov	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08a      	sub	sp, #40	; 0x28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_DAC_ConfigChannel+0x1e>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e12a      	b.n	80061dc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	795b      	ldrb	r3, [r3, #5]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_DAC_ConfigChannel+0x2e>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e124      	b.n	80061dc <HAL_DAC_ConfigChannel+0x278>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d17a      	bne.n	800609c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005fa6:	f7fe f88b 	bl	80040c0 <HAL_GetTick>
 8005faa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d13d      	bne.n	800602e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fb2:	e018      	b.n	8005fe6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fb4:	f7fe f884 	bl	80040c0 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d911      	bls.n	8005fe6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc8:	4b86      	ldr	r3, [pc, #536]	; (80061e4 <HAL_DAC_ConfigChannel+0x280>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f043 0208 	orr.w	r2, r3, #8
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e0fa      	b.n	80061dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fec:	4b7d      	ldr	r3, [pc, #500]	; (80061e4 <HAL_DAC_ConfigChannel+0x280>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1df      	bne.n	8005fb4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	6992      	ldr	r2, [r2, #24]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8005ffe:	e020      	b.n	8006042 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006000:	f7fe f85e 	bl	80040c0 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d90f      	bls.n	800602e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006014:	2b00      	cmp	r3, #0
 8006016:	da0a      	bge.n	800602e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f043 0208 	orr.w	r2, r3, #8
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2203      	movs	r2, #3
 8006028:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e0d6      	b.n	80061dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	dbe3      	blt.n	8006000 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	6992      	ldr	r2, [r2, #24]
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006052:	fa01 f303 	lsl.w	r3, r1, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	ea02 0103 	and.w	r1, r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	409a      	lsls	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	21ff      	movs	r1, #255	; 0xff
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	ea02 0103 	and.w	r1, r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	409a      	lsls	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d11d      	bne.n	80060e0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	221f      	movs	r2, #31
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	43db      	mvns	r3, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4013      	ands	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2207      	movs	r2, #7
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4013      	ands	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d102      	bne.n	800610a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
 8006108:	e00f      	b.n	800612a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d102      	bne.n	8006118 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006112:	2301      	movs	r3, #1
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
 8006116:	e008      	b.n	800612a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006120:	2301      	movs	r3, #1
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
 8006124:	e001      	b.n	800612a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006126:	2300      	movs	r3, #0
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	4313      	orrs	r3, r2
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	4313      	orrs	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43da      	mvns	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	400a      	ands	r2, r1
 8006170:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4013      	ands	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	22c0      	movs	r2, #192	; 0xc0
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43da      	mvns	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	400a      	ands	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80061d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3728      	adds	r7, #40	; 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20008000 	.word	0x20008000

080061e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fe8b 	bl	8005f12 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	711a      	strb	r2, [r3, #4]
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7ff fe84 	bl	8005f26 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f043 0204 	orr.w	r2, r3, #4
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fe7a 	bl	8005f3a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	711a      	strb	r2, [r3, #4]
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff ffce 	bl	8006254 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	711a      	strb	r2, [r3, #4]
}
 80062be:	bf00      	nop
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ffc7 	bl	8006268 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f043 0204 	orr.w	r2, r3, #4
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f7ff ffbd 	bl	800627c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	711a      	strb	r2, [r3, #4]
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006318:	f7fd fed2 	bl	80040c0 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e316      	b.n	8006956 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a66      	ldr	r2, [pc, #408]	; (80064c8 <HAL_DMA_Init+0x1b8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d04a      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_DMA_Init+0x1bc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d045      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a63      	ldr	r2, [pc, #396]	; (80064d0 <HAL_DMA_Init+0x1c0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d040      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a62      	ldr	r2, [pc, #392]	; (80064d4 <HAL_DMA_Init+0x1c4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d03b      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a60      	ldr	r2, [pc, #384]	; (80064d8 <HAL_DMA_Init+0x1c8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d036      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5f      	ldr	r2, [pc, #380]	; (80064dc <HAL_DMA_Init+0x1cc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d031      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a5d      	ldr	r2, [pc, #372]	; (80064e0 <HAL_DMA_Init+0x1d0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d02c      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5c      	ldr	r2, [pc, #368]	; (80064e4 <HAL_DMA_Init+0x1d4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d027      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a5a      	ldr	r2, [pc, #360]	; (80064e8 <HAL_DMA_Init+0x1d8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d022      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a59      	ldr	r2, [pc, #356]	; (80064ec <HAL_DMA_Init+0x1dc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d01d      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a57      	ldr	r2, [pc, #348]	; (80064f0 <HAL_DMA_Init+0x1e0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d018      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a56      	ldr	r2, [pc, #344]	; (80064f4 <HAL_DMA_Init+0x1e4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a54      	ldr	r2, [pc, #336]	; (80064f8 <HAL_DMA_Init+0x1e8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00e      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a53      	ldr	r2, [pc, #332]	; (80064fc <HAL_DMA_Init+0x1ec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d009      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a51      	ldr	r2, [pc, #324]	; (8006500 <HAL_DMA_Init+0x1f0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <HAL_DMA_Init+0xb8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a50      	ldr	r2, [pc, #320]	; (8006504 <HAL_DMA_Init+0x1f4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d101      	bne.n	80063cc <HAL_DMA_Init+0xbc>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_DMA_Init+0xbe>
 80063cc:	2300      	movs	r3, #0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 813b 	beq.w	800664a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a37      	ldr	r2, [pc, #220]	; (80064c8 <HAL_DMA_Init+0x1b8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d04a      	beq.n	8006484 <HAL_DMA_Init+0x174>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a36      	ldr	r2, [pc, #216]	; (80064cc <HAL_DMA_Init+0x1bc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d045      	beq.n	8006484 <HAL_DMA_Init+0x174>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <HAL_DMA_Init+0x1c0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d040      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <HAL_DMA_Init+0x1c4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d03b      	beq.n	8006484 <HAL_DMA_Init+0x174>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a31      	ldr	r2, [pc, #196]	; (80064d8 <HAL_DMA_Init+0x1c8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d036      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a30      	ldr	r2, [pc, #192]	; (80064dc <HAL_DMA_Init+0x1cc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d031      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2e      	ldr	r2, [pc, #184]	; (80064e0 <HAL_DMA_Init+0x1d0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d02c      	beq.n	8006484 <HAL_DMA_Init+0x174>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2d      	ldr	r2, [pc, #180]	; (80064e4 <HAL_DMA_Init+0x1d4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d027      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <HAL_DMA_Init+0x1d8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d022      	beq.n	8006484 <HAL_DMA_Init+0x174>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <HAL_DMA_Init+0x1dc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d01d      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <HAL_DMA_Init+0x1e0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a27      	ldr	r2, [pc, #156]	; (80064f4 <HAL_DMA_Init+0x1e4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d013      	beq.n	8006484 <HAL_DMA_Init+0x174>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_DMA_Init+0x1e8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a24      	ldr	r2, [pc, #144]	; (80064fc <HAL_DMA_Init+0x1ec>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_DMA_Init+0x174>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <HAL_DMA_Init+0x1f0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_DMA_Init+0x174>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_DMA_Init+0x1f4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d108      	bne.n	8006496 <HAL_DMA_Init+0x186>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0201 	bic.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e007      	b.n	80064a6 <HAL_DMA_Init+0x196>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064a6:	e02f      	b.n	8006508 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064a8:	f7fd fe0a 	bl	80040c0 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d928      	bls.n	8006508 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2203      	movs	r2, #3
 80064c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e246      	b.n	8006956 <HAL_DMA_Init+0x646>
 80064c8:	40020010 	.word	0x40020010
 80064cc:	40020028 	.word	0x40020028
 80064d0:	40020040 	.word	0x40020040
 80064d4:	40020058 	.word	0x40020058
 80064d8:	40020070 	.word	0x40020070
 80064dc:	40020088 	.word	0x40020088
 80064e0:	400200a0 	.word	0x400200a0
 80064e4:	400200b8 	.word	0x400200b8
 80064e8:	40020410 	.word	0x40020410
 80064ec:	40020428 	.word	0x40020428
 80064f0:	40020440 	.word	0x40020440
 80064f4:	40020458 	.word	0x40020458
 80064f8:	40020470 	.word	0x40020470
 80064fc:	40020488 	.word	0x40020488
 8006500:	400204a0 	.word	0x400204a0
 8006504:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1c8      	bne.n	80064a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4b83      	ldr	r3, [pc, #524]	; (8006730 <HAL_DMA_Init+0x420>)
 8006522:	4013      	ands	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800652e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800653a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006546:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	2b04      	cmp	r3, #4
 800655a:	d107      	bne.n	800656c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	4313      	orrs	r3, r2
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800656c:	4b71      	ldr	r3, [pc, #452]	; (8006734 <HAL_DMA_Init+0x424>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b71      	ldr	r3, [pc, #452]	; (8006738 <HAL_DMA_Init+0x428>)
 8006572:	4013      	ands	r3, r2
 8006574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006578:	d328      	bcc.n	80065cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b28      	cmp	r3, #40	; 0x28
 8006580:	d903      	bls.n	800658a <HAL_DMA_Init+0x27a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b2e      	cmp	r3, #46	; 0x2e
 8006588:	d917      	bls.n	80065ba <HAL_DMA_Init+0x2aa>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b3e      	cmp	r3, #62	; 0x3e
 8006590:	d903      	bls.n	800659a <HAL_DMA_Init+0x28a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b42      	cmp	r3, #66	; 0x42
 8006598:	d90f      	bls.n	80065ba <HAL_DMA_Init+0x2aa>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b46      	cmp	r3, #70	; 0x46
 80065a0:	d903      	bls.n	80065aa <HAL_DMA_Init+0x29a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b48      	cmp	r3, #72	; 0x48
 80065a8:	d907      	bls.n	80065ba <HAL_DMA_Init+0x2aa>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b4e      	cmp	r3, #78	; 0x4e
 80065b0:	d905      	bls.n	80065be <HAL_DMA_Init+0x2ae>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b52      	cmp	r3, #82	; 0x52
 80065b8:	d801      	bhi.n	80065be <HAL_DMA_Init+0x2ae>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <HAL_DMA_Init+0x2b0>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0307 	bic.w	r3, r3, #7
 80065e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d117      	bne.n	8006626 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00e      	beq.n	8006626 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f002 fb3f 	bl	8008c8c <DMA_CheckFifoParam>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e197      	b.n	8006956 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f002 fa7a 	bl	8008b28 <DMA_CalcBaseAndBitshift>
 8006634:	4603      	mov	r3, r0
 8006636:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800663c:	f003 031f 	and.w	r3, r3, #31
 8006640:	223f      	movs	r2, #63	; 0x3f
 8006642:	409a      	lsls	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	609a      	str	r2, [r3, #8]
 8006648:	e0cd      	b.n	80067e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a3b      	ldr	r2, [pc, #236]	; (800673c <HAL_DMA_Init+0x42c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_DMA_Init+0x38a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a39      	ldr	r2, [pc, #228]	; (8006740 <HAL_DMA_Init+0x430>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01d      	beq.n	800669a <HAL_DMA_Init+0x38a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a38      	ldr	r2, [pc, #224]	; (8006744 <HAL_DMA_Init+0x434>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_DMA_Init+0x38a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a36      	ldr	r2, [pc, #216]	; (8006748 <HAL_DMA_Init+0x438>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_DMA_Init+0x38a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a35      	ldr	r2, [pc, #212]	; (800674c <HAL_DMA_Init+0x43c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_DMA_Init+0x38a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a33      	ldr	r2, [pc, #204]	; (8006750 <HAL_DMA_Init+0x440>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_DMA_Init+0x38a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a32      	ldr	r2, [pc, #200]	; (8006754 <HAL_DMA_Init+0x444>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_DMA_Init+0x38a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a30      	ldr	r2, [pc, #192]	; (8006758 <HAL_DMA_Init+0x448>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d101      	bne.n	800669e <HAL_DMA_Init+0x38e>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_DMA_Init+0x390>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8097 	beq.w	80067d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a24      	ldr	r2, [pc, #144]	; (800673c <HAL_DMA_Init+0x42c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d021      	beq.n	80066f4 <HAL_DMA_Init+0x3e4>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a22      	ldr	r2, [pc, #136]	; (8006740 <HAL_DMA_Init+0x430>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01c      	beq.n	80066f4 <HAL_DMA_Init+0x3e4>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a21      	ldr	r2, [pc, #132]	; (8006744 <HAL_DMA_Init+0x434>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d017      	beq.n	80066f4 <HAL_DMA_Init+0x3e4>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <HAL_DMA_Init+0x438>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d012      	beq.n	80066f4 <HAL_DMA_Init+0x3e4>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1e      	ldr	r2, [pc, #120]	; (800674c <HAL_DMA_Init+0x43c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00d      	beq.n	80066f4 <HAL_DMA_Init+0x3e4>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <HAL_DMA_Init+0x440>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d008      	beq.n	80066f4 <HAL_DMA_Init+0x3e4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1b      	ldr	r2, [pc, #108]	; (8006754 <HAL_DMA_Init+0x444>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <HAL_DMA_Init+0x3e4>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a19      	ldr	r2, [pc, #100]	; (8006758 <HAL_DMA_Init+0x448>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <HAL_DMA_Init+0x44c>)
 8006712:	4013      	ands	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d020      	beq.n	8006760 <HAL_DMA_Init+0x450>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d102      	bne.n	800672c <HAL_DMA_Init+0x41c>
 8006726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800672a:	e01a      	b.n	8006762 <HAL_DMA_Init+0x452>
 800672c:	2300      	movs	r3, #0
 800672e:	e018      	b.n	8006762 <HAL_DMA_Init+0x452>
 8006730:	fe10803f 	.word	0xfe10803f
 8006734:	5c001000 	.word	0x5c001000
 8006738:	ffff0000 	.word	0xffff0000
 800673c:	58025408 	.word	0x58025408
 8006740:	5802541c 	.word	0x5802541c
 8006744:	58025430 	.word	0x58025430
 8006748:	58025444 	.word	0x58025444
 800674c:	58025458 	.word	0x58025458
 8006750:	5802546c 	.word	0x5802546c
 8006754:	58025480 	.word	0x58025480
 8006758:	58025494 	.word	0x58025494
 800675c:	fffe000f 	.word	0xfffe000f
 8006760:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68d2      	ldr	r2, [r2, #12]
 8006766:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006790:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	4b6e      	ldr	r3, [pc, #440]	; (8006960 <HAL_DMA_Init+0x650>)
 80067a8:	4413      	add	r3, r2
 80067aa:	4a6e      	ldr	r2, [pc, #440]	; (8006964 <HAL_DMA_Init+0x654>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	091b      	lsrs	r3, r3, #4
 80067b2:	009a      	lsls	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f002 f9b5 	bl	8008b28 <DMA_CalcBaseAndBitshift>
 80067be:	4603      	mov	r3, r0
 80067c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2201      	movs	r2, #1
 80067cc:	409a      	lsls	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	605a      	str	r2, [r3, #4]
 80067d2:	e008      	b.n	80067e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2240      	movs	r2, #64	; 0x40
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2203      	movs	r2, #3
 80067de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e0b7      	b.n	8006956 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a5f      	ldr	r2, [pc, #380]	; (8006968 <HAL_DMA_Init+0x658>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d072      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a5d      	ldr	r2, [pc, #372]	; (800696c <HAL_DMA_Init+0x65c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d06d      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a5c      	ldr	r2, [pc, #368]	; (8006970 <HAL_DMA_Init+0x660>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d068      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a5a      	ldr	r2, [pc, #360]	; (8006974 <HAL_DMA_Init+0x664>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d063      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a59      	ldr	r2, [pc, #356]	; (8006978 <HAL_DMA_Init+0x668>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d05e      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a57      	ldr	r2, [pc, #348]	; (800697c <HAL_DMA_Init+0x66c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d059      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a56      	ldr	r2, [pc, #344]	; (8006980 <HAL_DMA_Init+0x670>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d054      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a54      	ldr	r2, [pc, #336]	; (8006984 <HAL_DMA_Init+0x674>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d04f      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a53      	ldr	r2, [pc, #332]	; (8006988 <HAL_DMA_Init+0x678>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d04a      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a51      	ldr	r2, [pc, #324]	; (800698c <HAL_DMA_Init+0x67c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d045      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a50      	ldr	r2, [pc, #320]	; (8006990 <HAL_DMA_Init+0x680>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d040      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a4e      	ldr	r2, [pc, #312]	; (8006994 <HAL_DMA_Init+0x684>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d03b      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4d      	ldr	r2, [pc, #308]	; (8006998 <HAL_DMA_Init+0x688>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d036      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a4b      	ldr	r2, [pc, #300]	; (800699c <HAL_DMA_Init+0x68c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a4a      	ldr	r2, [pc, #296]	; (80069a0 <HAL_DMA_Init+0x690>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d02c      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a48      	ldr	r2, [pc, #288]	; (80069a4 <HAL_DMA_Init+0x694>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d027      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a47      	ldr	r2, [pc, #284]	; (80069a8 <HAL_DMA_Init+0x698>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a45      	ldr	r2, [pc, #276]	; (80069ac <HAL_DMA_Init+0x69c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a44      	ldr	r2, [pc, #272]	; (80069b0 <HAL_DMA_Init+0x6a0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a42      	ldr	r2, [pc, #264]	; (80069b4 <HAL_DMA_Init+0x6a4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a41      	ldr	r2, [pc, #260]	; (80069b8 <HAL_DMA_Init+0x6a8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3f      	ldr	r2, [pc, #252]	; (80069bc <HAL_DMA_Init+0x6ac>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3e      	ldr	r2, [pc, #248]	; (80069c0 <HAL_DMA_Init+0x6b0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_DMA_Init+0x5c6>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3c      	ldr	r2, [pc, #240]	; (80069c4 <HAL_DMA_Init+0x6b4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <HAL_DMA_Init+0x5ca>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <HAL_DMA_Init+0x5cc>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d032      	beq.n	8006946 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f002 fa4f 	bl	8008d84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b80      	cmp	r3, #128	; 0x80
 80068ec:	d102      	bne.n	80068f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006908:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d010      	beq.n	8006934 <HAL_DMA_Init+0x624>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b08      	cmp	r3, #8
 8006918:	d80c      	bhi.n	8006934 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f002 facc 	bl	8008eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	e008      	b.n	8006946 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	a7fdabf8 	.word	0xa7fdabf8
 8006964:	cccccccd 	.word	0xcccccccd
 8006968:	40020010 	.word	0x40020010
 800696c:	40020028 	.word	0x40020028
 8006970:	40020040 	.word	0x40020040
 8006974:	40020058 	.word	0x40020058
 8006978:	40020070 	.word	0x40020070
 800697c:	40020088 	.word	0x40020088
 8006980:	400200a0 	.word	0x400200a0
 8006984:	400200b8 	.word	0x400200b8
 8006988:	40020410 	.word	0x40020410
 800698c:	40020428 	.word	0x40020428
 8006990:	40020440 	.word	0x40020440
 8006994:	40020458 	.word	0x40020458
 8006998:	40020470 	.word	0x40020470
 800699c:	40020488 	.word	0x40020488
 80069a0:	400204a0 	.word	0x400204a0
 80069a4:	400204b8 	.word	0x400204b8
 80069a8:	58025408 	.word	0x58025408
 80069ac:	5802541c 	.word	0x5802541c
 80069b0:	58025430 	.word	0x58025430
 80069b4:	58025444 	.word	0x58025444
 80069b8:	58025458 	.word	0x58025458
 80069bc:	5802546c 	.word	0x5802546c
 80069c0:	58025480 	.word	0x58025480
 80069c4:	58025494 	.word	0x58025494

080069c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e226      	b.n	8006e32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_DMA_Start_IT+0x2a>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e21f      	b.n	8006e32 <HAL_DMA_Start_IT+0x46a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	f040 820a 	bne.w	8006e1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a68      	ldr	r2, [pc, #416]	; (8006bbc <HAL_DMA_Start_IT+0x1f4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d04a      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a66      	ldr	r2, [pc, #408]	; (8006bc0 <HAL_DMA_Start_IT+0x1f8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d045      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a65      	ldr	r2, [pc, #404]	; (8006bc4 <HAL_DMA_Start_IT+0x1fc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d040      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a63      	ldr	r2, [pc, #396]	; (8006bc8 <HAL_DMA_Start_IT+0x200>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d03b      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a62      	ldr	r2, [pc, #392]	; (8006bcc <HAL_DMA_Start_IT+0x204>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d036      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a60      	ldr	r2, [pc, #384]	; (8006bd0 <HAL_DMA_Start_IT+0x208>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d031      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a5f      	ldr	r2, [pc, #380]	; (8006bd4 <HAL_DMA_Start_IT+0x20c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d02c      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a5d      	ldr	r2, [pc, #372]	; (8006bd8 <HAL_DMA_Start_IT+0x210>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d027      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a5c      	ldr	r2, [pc, #368]	; (8006bdc <HAL_DMA_Start_IT+0x214>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a5a      	ldr	r2, [pc, #360]	; (8006be0 <HAL_DMA_Start_IT+0x218>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a59      	ldr	r2, [pc, #356]	; (8006be4 <HAL_DMA_Start_IT+0x21c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a57      	ldr	r2, [pc, #348]	; (8006be8 <HAL_DMA_Start_IT+0x220>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a56      	ldr	r2, [pc, #344]	; (8006bec <HAL_DMA_Start_IT+0x224>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a54      	ldr	r2, [pc, #336]	; (8006bf0 <HAL_DMA_Start_IT+0x228>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a53      	ldr	r2, [pc, #332]	; (8006bf4 <HAL_DMA_Start_IT+0x22c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_DMA_Start_IT+0xee>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a51      	ldr	r2, [pc, #324]	; (8006bf8 <HAL_DMA_Start_IT+0x230>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d108      	bne.n	8006ac8 <HAL_DMA_Start_IT+0x100>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e007      	b.n	8006ad8 <HAL_DMA_Start_IT+0x110>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f001 fe76 	bl	80087d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a34      	ldr	r2, [pc, #208]	; (8006bbc <HAL_DMA_Start_IT+0x1f4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d04a      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a33      	ldr	r2, [pc, #204]	; (8006bc0 <HAL_DMA_Start_IT+0x1f8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d045      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a31      	ldr	r2, [pc, #196]	; (8006bc4 <HAL_DMA_Start_IT+0x1fc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d040      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a30      	ldr	r2, [pc, #192]	; (8006bc8 <HAL_DMA_Start_IT+0x200>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2e      	ldr	r2, [pc, #184]	; (8006bcc <HAL_DMA_Start_IT+0x204>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d036      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2d      	ldr	r2, [pc, #180]	; (8006bd0 <HAL_DMA_Start_IT+0x208>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d031      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <HAL_DMA_Start_IT+0x20c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <HAL_DMA_Start_IT+0x210>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d027      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <HAL_DMA_Start_IT+0x214>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d022      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <HAL_DMA_Start_IT+0x218>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a25      	ldr	r2, [pc, #148]	; (8006be4 <HAL_DMA_Start_IT+0x21c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a24      	ldr	r2, [pc, #144]	; (8006be8 <HAL_DMA_Start_IT+0x220>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a22      	ldr	r2, [pc, #136]	; (8006bec <HAL_DMA_Start_IT+0x224>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <HAL_DMA_Start_IT+0x228>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1f      	ldr	r2, [pc, #124]	; (8006bf4 <HAL_DMA_Start_IT+0x22c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_DMA_Start_IT+0x1bc>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_DMA_Start_IT+0x230>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d101      	bne.n	8006b88 <HAL_DMA_Start_IT+0x1c0>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <HAL_DMA_Start_IT+0x1c2>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d036      	beq.n	8006bfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f023 021e 	bic.w	r2, r3, #30
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0216 	orr.w	r2, r2, #22
 8006ba0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03e      	beq.n	8006c28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0208 	orr.w	r2, r2, #8
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e035      	b.n	8006c28 <HAL_DMA_Start_IT+0x260>
 8006bbc:	40020010 	.word	0x40020010
 8006bc0:	40020028 	.word	0x40020028
 8006bc4:	40020040 	.word	0x40020040
 8006bc8:	40020058 	.word	0x40020058
 8006bcc:	40020070 	.word	0x40020070
 8006bd0:	40020088 	.word	0x40020088
 8006bd4:	400200a0 	.word	0x400200a0
 8006bd8:	400200b8 	.word	0x400200b8
 8006bdc:	40020410 	.word	0x40020410
 8006be0:	40020428 	.word	0x40020428
 8006be4:	40020440 	.word	0x40020440
 8006be8:	40020458 	.word	0x40020458
 8006bec:	40020470 	.word	0x40020470
 8006bf0:	40020488 	.word	0x40020488
 8006bf4:	400204a0 	.word	0x400204a0
 8006bf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f023 020e 	bic.w	r2, r3, #14
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 020a 	orr.w	r2, r2, #10
 8006c0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0204 	orr.w	r2, r2, #4
 8006c26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a83      	ldr	r2, [pc, #524]	; (8006e3c <HAL_DMA_Start_IT+0x474>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d072      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a82      	ldr	r2, [pc, #520]	; (8006e40 <HAL_DMA_Start_IT+0x478>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d06d      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a80      	ldr	r2, [pc, #512]	; (8006e44 <HAL_DMA_Start_IT+0x47c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d068      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a7f      	ldr	r2, [pc, #508]	; (8006e48 <HAL_DMA_Start_IT+0x480>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d063      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a7d      	ldr	r2, [pc, #500]	; (8006e4c <HAL_DMA_Start_IT+0x484>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d05e      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a7c      	ldr	r2, [pc, #496]	; (8006e50 <HAL_DMA_Start_IT+0x488>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d059      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a7a      	ldr	r2, [pc, #488]	; (8006e54 <HAL_DMA_Start_IT+0x48c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d054      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a79      	ldr	r2, [pc, #484]	; (8006e58 <HAL_DMA_Start_IT+0x490>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d04f      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a77      	ldr	r2, [pc, #476]	; (8006e5c <HAL_DMA_Start_IT+0x494>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d04a      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a76      	ldr	r2, [pc, #472]	; (8006e60 <HAL_DMA_Start_IT+0x498>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d045      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a74      	ldr	r2, [pc, #464]	; (8006e64 <HAL_DMA_Start_IT+0x49c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d040      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a73      	ldr	r2, [pc, #460]	; (8006e68 <HAL_DMA_Start_IT+0x4a0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d03b      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a71      	ldr	r2, [pc, #452]	; (8006e6c <HAL_DMA_Start_IT+0x4a4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d036      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a70      	ldr	r2, [pc, #448]	; (8006e70 <HAL_DMA_Start_IT+0x4a8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d031      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a6e      	ldr	r2, [pc, #440]	; (8006e74 <HAL_DMA_Start_IT+0x4ac>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d02c      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6d      	ldr	r2, [pc, #436]	; (8006e78 <HAL_DMA_Start_IT+0x4b0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d027      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6b      	ldr	r2, [pc, #428]	; (8006e7c <HAL_DMA_Start_IT+0x4b4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d022      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6a      	ldr	r2, [pc, #424]	; (8006e80 <HAL_DMA_Start_IT+0x4b8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d01d      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a68      	ldr	r2, [pc, #416]	; (8006e84 <HAL_DMA_Start_IT+0x4bc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d018      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a67      	ldr	r2, [pc, #412]	; (8006e88 <HAL_DMA_Start_IT+0x4c0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a65      	ldr	r2, [pc, #404]	; (8006e8c <HAL_DMA_Start_IT+0x4c4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a64      	ldr	r2, [pc, #400]	; (8006e90 <HAL_DMA_Start_IT+0x4c8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a62      	ldr	r2, [pc, #392]	; (8006e94 <HAL_DMA_Start_IT+0x4cc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_DMA_Start_IT+0x350>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a61      	ldr	r2, [pc, #388]	; (8006e98 <HAL_DMA_Start_IT+0x4d0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d101      	bne.n	8006d1c <HAL_DMA_Start_IT+0x354>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e000      	b.n	8006d1e <HAL_DMA_Start_IT+0x356>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01a      	beq.n	8006d58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a37      	ldr	r2, [pc, #220]	; (8006e3c <HAL_DMA_Start_IT+0x474>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d04a      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a36      	ldr	r2, [pc, #216]	; (8006e40 <HAL_DMA_Start_IT+0x478>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d045      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a34      	ldr	r2, [pc, #208]	; (8006e44 <HAL_DMA_Start_IT+0x47c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d040      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a33      	ldr	r2, [pc, #204]	; (8006e48 <HAL_DMA_Start_IT+0x480>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d03b      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a31      	ldr	r2, [pc, #196]	; (8006e4c <HAL_DMA_Start_IT+0x484>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d036      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_DMA_Start_IT+0x488>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d031      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2e      	ldr	r2, [pc, #184]	; (8006e54 <HAL_DMA_Start_IT+0x48c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d02c      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <HAL_DMA_Start_IT+0x490>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d027      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <HAL_DMA_Start_IT+0x494>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d022      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <HAL_DMA_Start_IT+0x498>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d01d      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <HAL_DMA_Start_IT+0x49c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d018      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <HAL_DMA_Start_IT+0x4a0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d013      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <HAL_DMA_Start_IT+0x4a4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00e      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <HAL_DMA_Start_IT+0x4a8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d009      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <HAL_DMA_Start_IT+0x4ac>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <HAL_DMA_Start_IT+0x430>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a21      	ldr	r2, [pc, #132]	; (8006e78 <HAL_DMA_Start_IT+0x4b0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d108      	bne.n	8006e0a <HAL_DMA_Start_IT+0x442>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e012      	b.n	8006e30 <HAL_DMA_Start_IT+0x468>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e009      	b.n	8006e30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40020010 	.word	0x40020010
 8006e40:	40020028 	.word	0x40020028
 8006e44:	40020040 	.word	0x40020040
 8006e48:	40020058 	.word	0x40020058
 8006e4c:	40020070 	.word	0x40020070
 8006e50:	40020088 	.word	0x40020088
 8006e54:	400200a0 	.word	0x400200a0
 8006e58:	400200b8 	.word	0x400200b8
 8006e5c:	40020410 	.word	0x40020410
 8006e60:	40020428 	.word	0x40020428
 8006e64:	40020440 	.word	0x40020440
 8006e68:	40020458 	.word	0x40020458
 8006e6c:	40020470 	.word	0x40020470
 8006e70:	40020488 	.word	0x40020488
 8006e74:	400204a0 	.word	0x400204a0
 8006e78:	400204b8 	.word	0x400204b8
 8006e7c:	58025408 	.word	0x58025408
 8006e80:	5802541c 	.word	0x5802541c
 8006e84:	58025430 	.word	0x58025430
 8006e88:	58025444 	.word	0x58025444
 8006e8c:	58025458 	.word	0x58025458
 8006e90:	5802546c 	.word	0x5802546c
 8006e94:	58025480 	.word	0x58025480
 8006e98:	58025494 	.word	0x58025494

08006e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006ea4:	f7fd f90c 	bl	80040c0 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e2dc      	b.n	800746e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d008      	beq.n	8006ed2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2280      	movs	r2, #128	; 0x80
 8006ec4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e2cd      	b.n	800746e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a76      	ldr	r2, [pc, #472]	; (80070b0 <HAL_DMA_Abort+0x214>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d04a      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a74      	ldr	r2, [pc, #464]	; (80070b4 <HAL_DMA_Abort+0x218>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d045      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a73      	ldr	r2, [pc, #460]	; (80070b8 <HAL_DMA_Abort+0x21c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d040      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a71      	ldr	r2, [pc, #452]	; (80070bc <HAL_DMA_Abort+0x220>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d03b      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a70      	ldr	r2, [pc, #448]	; (80070c0 <HAL_DMA_Abort+0x224>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d036      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6e      	ldr	r2, [pc, #440]	; (80070c4 <HAL_DMA_Abort+0x228>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d031      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6d      	ldr	r2, [pc, #436]	; (80070c8 <HAL_DMA_Abort+0x22c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d02c      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6b      	ldr	r2, [pc, #428]	; (80070cc <HAL_DMA_Abort+0x230>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d027      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6a      	ldr	r2, [pc, #424]	; (80070d0 <HAL_DMA_Abort+0x234>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a68      	ldr	r2, [pc, #416]	; (80070d4 <HAL_DMA_Abort+0x238>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01d      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a67      	ldr	r2, [pc, #412]	; (80070d8 <HAL_DMA_Abort+0x23c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a65      	ldr	r2, [pc, #404]	; (80070dc <HAL_DMA_Abort+0x240>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a64      	ldr	r2, [pc, #400]	; (80070e0 <HAL_DMA_Abort+0x244>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a62      	ldr	r2, [pc, #392]	; (80070e4 <HAL_DMA_Abort+0x248>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a61      	ldr	r2, [pc, #388]	; (80070e8 <HAL_DMA_Abort+0x24c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_DMA_Abort+0xd6>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a5f      	ldr	r2, [pc, #380]	; (80070ec <HAL_DMA_Abort+0x250>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d101      	bne.n	8006f76 <HAL_DMA_Abort+0xda>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <HAL_DMA_Abort+0xdc>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d013      	beq.n	8006fa4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 021e 	bic.w	r2, r2, #30
 8006f8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e00a      	b.n	8006fba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 020e 	bic.w	r2, r2, #14
 8006fb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a3c      	ldr	r2, [pc, #240]	; (80070b0 <HAL_DMA_Abort+0x214>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d072      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a3a      	ldr	r2, [pc, #232]	; (80070b4 <HAL_DMA_Abort+0x218>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d06d      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a39      	ldr	r2, [pc, #228]	; (80070b8 <HAL_DMA_Abort+0x21c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d068      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a37      	ldr	r2, [pc, #220]	; (80070bc <HAL_DMA_Abort+0x220>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d063      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a36      	ldr	r2, [pc, #216]	; (80070c0 <HAL_DMA_Abort+0x224>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d05e      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a34      	ldr	r2, [pc, #208]	; (80070c4 <HAL_DMA_Abort+0x228>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d059      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a33      	ldr	r2, [pc, #204]	; (80070c8 <HAL_DMA_Abort+0x22c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d054      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a31      	ldr	r2, [pc, #196]	; (80070cc <HAL_DMA_Abort+0x230>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d04f      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a30      	ldr	r2, [pc, #192]	; (80070d0 <HAL_DMA_Abort+0x234>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d04a      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2e      	ldr	r2, [pc, #184]	; (80070d4 <HAL_DMA_Abort+0x238>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d045      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2d      	ldr	r2, [pc, #180]	; (80070d8 <HAL_DMA_Abort+0x23c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d040      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2b      	ldr	r2, [pc, #172]	; (80070dc <HAL_DMA_Abort+0x240>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d03b      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <HAL_DMA_Abort+0x244>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d036      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a28      	ldr	r2, [pc, #160]	; (80070e4 <HAL_DMA_Abort+0x248>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d031      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <HAL_DMA_Abort+0x24c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d02c      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <HAL_DMA_Abort+0x250>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d027      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <HAL_DMA_Abort+0x254>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d022      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <HAL_DMA_Abort+0x258>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01d      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a21      	ldr	r2, [pc, #132]	; (80070f8 <HAL_DMA_Abort+0x25c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d018      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <HAL_DMA_Abort+0x260>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <HAL_DMA_Abort+0x264>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00e      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <HAL_DMA_Abort+0x268>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d009      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1b      	ldr	r2, [pc, #108]	; (8007108 <HAL_DMA_Abort+0x26c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d004      	beq.n	80070aa <HAL_DMA_Abort+0x20e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a19      	ldr	r2, [pc, #100]	; (800710c <HAL_DMA_Abort+0x270>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d132      	bne.n	8007110 <HAL_DMA_Abort+0x274>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e031      	b.n	8007112 <HAL_DMA_Abort+0x276>
 80070ae:	bf00      	nop
 80070b0:	40020010 	.word	0x40020010
 80070b4:	40020028 	.word	0x40020028
 80070b8:	40020040 	.word	0x40020040
 80070bc:	40020058 	.word	0x40020058
 80070c0:	40020070 	.word	0x40020070
 80070c4:	40020088 	.word	0x40020088
 80070c8:	400200a0 	.word	0x400200a0
 80070cc:	400200b8 	.word	0x400200b8
 80070d0:	40020410 	.word	0x40020410
 80070d4:	40020428 	.word	0x40020428
 80070d8:	40020440 	.word	0x40020440
 80070dc:	40020458 	.word	0x40020458
 80070e0:	40020470 	.word	0x40020470
 80070e4:	40020488 	.word	0x40020488
 80070e8:	400204a0 	.word	0x400204a0
 80070ec:	400204b8 	.word	0x400204b8
 80070f0:	58025408 	.word	0x58025408
 80070f4:	5802541c 	.word	0x5802541c
 80070f8:	58025430 	.word	0x58025430
 80070fc:	58025444 	.word	0x58025444
 8007100:	58025458 	.word	0x58025458
 8007104:	5802546c 	.word	0x5802546c
 8007108:	58025480 	.word	0x58025480
 800710c:	58025494 	.word	0x58025494
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d007      	beq.n	8007126 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007124:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6d      	ldr	r2, [pc, #436]	; (80072e0 <HAL_DMA_Abort+0x444>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d04a      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a6b      	ldr	r2, [pc, #428]	; (80072e4 <HAL_DMA_Abort+0x448>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d045      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a6a      	ldr	r2, [pc, #424]	; (80072e8 <HAL_DMA_Abort+0x44c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d040      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a68      	ldr	r2, [pc, #416]	; (80072ec <HAL_DMA_Abort+0x450>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d03b      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a67      	ldr	r2, [pc, #412]	; (80072f0 <HAL_DMA_Abort+0x454>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d036      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a65      	ldr	r2, [pc, #404]	; (80072f4 <HAL_DMA_Abort+0x458>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d031      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a64      	ldr	r2, [pc, #400]	; (80072f8 <HAL_DMA_Abort+0x45c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d02c      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a62      	ldr	r2, [pc, #392]	; (80072fc <HAL_DMA_Abort+0x460>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d027      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a61      	ldr	r2, [pc, #388]	; (8007300 <HAL_DMA_Abort+0x464>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d022      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a5f      	ldr	r2, [pc, #380]	; (8007304 <HAL_DMA_Abort+0x468>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d01d      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a5e      	ldr	r2, [pc, #376]	; (8007308 <HAL_DMA_Abort+0x46c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a5c      	ldr	r2, [pc, #368]	; (800730c <HAL_DMA_Abort+0x470>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a5b      	ldr	r2, [pc, #364]	; (8007310 <HAL_DMA_Abort+0x474>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00e      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a59      	ldr	r2, [pc, #356]	; (8007314 <HAL_DMA_Abort+0x478>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a58      	ldr	r2, [pc, #352]	; (8007318 <HAL_DMA_Abort+0x47c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <HAL_DMA_Abort+0x32a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a56      	ldr	r2, [pc, #344]	; (800731c <HAL_DMA_Abort+0x480>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d108      	bne.n	80071d8 <HAL_DMA_Abort+0x33c>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e007      	b.n	80071e8 <HAL_DMA_Abort+0x34c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071e8:	e013      	b.n	8007212 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071ea:	f7fc ff69 	bl	80040c0 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d90c      	bls.n	8007212 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2203      	movs	r2, #3
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e12d      	b.n	800746e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2f      	ldr	r2, [pc, #188]	; (80072e0 <HAL_DMA_Abort+0x444>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d04a      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2d      	ldr	r2, [pc, #180]	; (80072e4 <HAL_DMA_Abort+0x448>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d045      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2c      	ldr	r2, [pc, #176]	; (80072e8 <HAL_DMA_Abort+0x44c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d040      	beq.n	80072be <HAL_DMA_Abort+0x422>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2a      	ldr	r2, [pc, #168]	; (80072ec <HAL_DMA_Abort+0x450>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d03b      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a29      	ldr	r2, [pc, #164]	; (80072f0 <HAL_DMA_Abort+0x454>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d036      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a27      	ldr	r2, [pc, #156]	; (80072f4 <HAL_DMA_Abort+0x458>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d031      	beq.n	80072be <HAL_DMA_Abort+0x422>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a26      	ldr	r2, [pc, #152]	; (80072f8 <HAL_DMA_Abort+0x45c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d02c      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a24      	ldr	r2, [pc, #144]	; (80072fc <HAL_DMA_Abort+0x460>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d027      	beq.n	80072be <HAL_DMA_Abort+0x422>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a23      	ldr	r2, [pc, #140]	; (8007300 <HAL_DMA_Abort+0x464>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d022      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a21      	ldr	r2, [pc, #132]	; (8007304 <HAL_DMA_Abort+0x468>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01d      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a20      	ldr	r2, [pc, #128]	; (8007308 <HAL_DMA_Abort+0x46c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d018      	beq.n	80072be <HAL_DMA_Abort+0x422>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1e      	ldr	r2, [pc, #120]	; (800730c <HAL_DMA_Abort+0x470>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <HAL_DMA_Abort+0x422>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1d      	ldr	r2, [pc, #116]	; (8007310 <HAL_DMA_Abort+0x474>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_DMA_Abort+0x422>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <HAL_DMA_Abort+0x478>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_DMA_Abort+0x422>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <HAL_DMA_Abort+0x47c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_DMA_Abort+0x422>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a18      	ldr	r2, [pc, #96]	; (800731c <HAL_DMA_Abort+0x480>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d101      	bne.n	80072c2 <HAL_DMA_Abort+0x426>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <HAL_DMA_Abort+0x428>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d02b      	beq.n	8007320 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	223f      	movs	r2, #63	; 0x3f
 80072d8:	409a      	lsls	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	609a      	str	r2, [r3, #8]
 80072de:	e02a      	b.n	8007336 <HAL_DMA_Abort+0x49a>
 80072e0:	40020010 	.word	0x40020010
 80072e4:	40020028 	.word	0x40020028
 80072e8:	40020040 	.word	0x40020040
 80072ec:	40020058 	.word	0x40020058
 80072f0:	40020070 	.word	0x40020070
 80072f4:	40020088 	.word	0x40020088
 80072f8:	400200a0 	.word	0x400200a0
 80072fc:	400200b8 	.word	0x400200b8
 8007300:	40020410 	.word	0x40020410
 8007304:	40020428 	.word	0x40020428
 8007308:	40020440 	.word	0x40020440
 800730c:	40020458 	.word	0x40020458
 8007310:	40020470 	.word	0x40020470
 8007314:	40020488 	.word	0x40020488
 8007318:	400204a0 	.word	0x400204a0
 800731c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007324:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	2201      	movs	r2, #1
 8007330:	409a      	lsls	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a4f      	ldr	r2, [pc, #316]	; (8007478 <HAL_DMA_Abort+0x5dc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d072      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a4d      	ldr	r2, [pc, #308]	; (800747c <HAL_DMA_Abort+0x5e0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d06d      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a4c      	ldr	r2, [pc, #304]	; (8007480 <HAL_DMA_Abort+0x5e4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d068      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <HAL_DMA_Abort+0x5e8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d063      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a49      	ldr	r2, [pc, #292]	; (8007488 <HAL_DMA_Abort+0x5ec>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d05e      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a47      	ldr	r2, [pc, #284]	; (800748c <HAL_DMA_Abort+0x5f0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d059      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a46      	ldr	r2, [pc, #280]	; (8007490 <HAL_DMA_Abort+0x5f4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d054      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a44      	ldr	r2, [pc, #272]	; (8007494 <HAL_DMA_Abort+0x5f8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d04f      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a43      	ldr	r2, [pc, #268]	; (8007498 <HAL_DMA_Abort+0x5fc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d04a      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a41      	ldr	r2, [pc, #260]	; (800749c <HAL_DMA_Abort+0x600>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d045      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a40      	ldr	r2, [pc, #256]	; (80074a0 <HAL_DMA_Abort+0x604>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d040      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a3e      	ldr	r2, [pc, #248]	; (80074a4 <HAL_DMA_Abort+0x608>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d03b      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a3d      	ldr	r2, [pc, #244]	; (80074a8 <HAL_DMA_Abort+0x60c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d036      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a3b      	ldr	r2, [pc, #236]	; (80074ac <HAL_DMA_Abort+0x610>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d031      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a3a      	ldr	r2, [pc, #232]	; (80074b0 <HAL_DMA_Abort+0x614>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d02c      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a38      	ldr	r2, [pc, #224]	; (80074b4 <HAL_DMA_Abort+0x618>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d027      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <HAL_DMA_Abort+0x61c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d022      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a35      	ldr	r2, [pc, #212]	; (80074bc <HAL_DMA_Abort+0x620>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01d      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a34      	ldr	r2, [pc, #208]	; (80074c0 <HAL_DMA_Abort+0x624>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d018      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a32      	ldr	r2, [pc, #200]	; (80074c4 <HAL_DMA_Abort+0x628>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a31      	ldr	r2, [pc, #196]	; (80074c8 <HAL_DMA_Abort+0x62c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2f      	ldr	r2, [pc, #188]	; (80074cc <HAL_DMA_Abort+0x630>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a2e      	ldr	r2, [pc, #184]	; (80074d0 <HAL_DMA_Abort+0x634>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_DMA_Abort+0x58a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a2c      	ldr	r2, [pc, #176]	; (80074d4 <HAL_DMA_Abort+0x638>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d101      	bne.n	800742a <HAL_DMA_Abort+0x58e>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <HAL_DMA_Abort+0x590>
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d015      	beq.n	800745c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007438:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00c      	beq.n	800745c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800744c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007450:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800745a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40020010 	.word	0x40020010
 800747c:	40020028 	.word	0x40020028
 8007480:	40020040 	.word	0x40020040
 8007484:	40020058 	.word	0x40020058
 8007488:	40020070 	.word	0x40020070
 800748c:	40020088 	.word	0x40020088
 8007490:	400200a0 	.word	0x400200a0
 8007494:	400200b8 	.word	0x400200b8
 8007498:	40020410 	.word	0x40020410
 800749c:	40020428 	.word	0x40020428
 80074a0:	40020440 	.word	0x40020440
 80074a4:	40020458 	.word	0x40020458
 80074a8:	40020470 	.word	0x40020470
 80074ac:	40020488 	.word	0x40020488
 80074b0:	400204a0 	.word	0x400204a0
 80074b4:	400204b8 	.word	0x400204b8
 80074b8:	58025408 	.word	0x58025408
 80074bc:	5802541c 	.word	0x5802541c
 80074c0:	58025430 	.word	0x58025430
 80074c4:	58025444 	.word	0x58025444
 80074c8:	58025458 	.word	0x58025458
 80074cc:	5802546c 	.word	0x5802546c
 80074d0:	58025480 	.word	0x58025480
 80074d4:	58025494 	.word	0x58025494

080074d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e237      	b.n	800795a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d004      	beq.n	8007500 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2280      	movs	r2, #128	; 0x80
 80074fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e22c      	b.n	800795a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a5c      	ldr	r2, [pc, #368]	; (8007678 <HAL_DMA_Abort_IT+0x1a0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d04a      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a5b      	ldr	r2, [pc, #364]	; (800767c <HAL_DMA_Abort_IT+0x1a4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d045      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a59      	ldr	r2, [pc, #356]	; (8007680 <HAL_DMA_Abort_IT+0x1a8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d040      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a58      	ldr	r2, [pc, #352]	; (8007684 <HAL_DMA_Abort_IT+0x1ac>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d03b      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a56      	ldr	r2, [pc, #344]	; (8007688 <HAL_DMA_Abort_IT+0x1b0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d036      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a55      	ldr	r2, [pc, #340]	; (800768c <HAL_DMA_Abort_IT+0x1b4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d031      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a53      	ldr	r2, [pc, #332]	; (8007690 <HAL_DMA_Abort_IT+0x1b8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d02c      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a52      	ldr	r2, [pc, #328]	; (8007694 <HAL_DMA_Abort_IT+0x1bc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d027      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a50      	ldr	r2, [pc, #320]	; (8007698 <HAL_DMA_Abort_IT+0x1c0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d022      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a4f      	ldr	r2, [pc, #316]	; (800769c <HAL_DMA_Abort_IT+0x1c4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d01d      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a4d      	ldr	r2, [pc, #308]	; (80076a0 <HAL_DMA_Abort_IT+0x1c8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d018      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a4c      	ldr	r2, [pc, #304]	; (80076a4 <HAL_DMA_Abort_IT+0x1cc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d013      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a4a      	ldr	r2, [pc, #296]	; (80076a8 <HAL_DMA_Abort_IT+0x1d0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00e      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a49      	ldr	r2, [pc, #292]	; (80076ac <HAL_DMA_Abort_IT+0x1d4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a47      	ldr	r2, [pc, #284]	; (80076b0 <HAL_DMA_Abort_IT+0x1d8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <HAL_DMA_Abort_IT+0xc8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a46      	ldr	r2, [pc, #280]	; (80076b4 <HAL_DMA_Abort_IT+0x1dc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d101      	bne.n	80075a4 <HAL_DMA_Abort_IT+0xcc>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <HAL_DMA_Abort_IT+0xce>
 80075a4:	2300      	movs	r3, #0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8086 	beq.w	80076b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2204      	movs	r2, #4
 80075b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <HAL_DMA_Abort_IT+0x1a0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d04a      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2e      	ldr	r2, [pc, #184]	; (800767c <HAL_DMA_Abort_IT+0x1a4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d045      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a2c      	ldr	r2, [pc, #176]	; (8007680 <HAL_DMA_Abort_IT+0x1a8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d040      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a2b      	ldr	r2, [pc, #172]	; (8007684 <HAL_DMA_Abort_IT+0x1ac>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d03b      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a29      	ldr	r2, [pc, #164]	; (8007688 <HAL_DMA_Abort_IT+0x1b0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d036      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a28      	ldr	r2, [pc, #160]	; (800768c <HAL_DMA_Abort_IT+0x1b4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d031      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a26      	ldr	r2, [pc, #152]	; (8007690 <HAL_DMA_Abort_IT+0x1b8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d02c      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a25      	ldr	r2, [pc, #148]	; (8007694 <HAL_DMA_Abort_IT+0x1bc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d027      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a23      	ldr	r2, [pc, #140]	; (8007698 <HAL_DMA_Abort_IT+0x1c0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d022      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a22      	ldr	r2, [pc, #136]	; (800769c <HAL_DMA_Abort_IT+0x1c4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d01d      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a20      	ldr	r2, [pc, #128]	; (80076a0 <HAL_DMA_Abort_IT+0x1c8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1f      	ldr	r2, [pc, #124]	; (80076a4 <HAL_DMA_Abort_IT+0x1cc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1d      	ldr	r2, [pc, #116]	; (80076a8 <HAL_DMA_Abort_IT+0x1d0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1c      	ldr	r2, [pc, #112]	; (80076ac <HAL_DMA_Abort_IT+0x1d4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1a      	ldr	r2, [pc, #104]	; (80076b0 <HAL_DMA_Abort_IT+0x1d8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_DMA_Abort_IT+0x17c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a19      	ldr	r2, [pc, #100]	; (80076b4 <HAL_DMA_Abort_IT+0x1dc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d108      	bne.n	8007666 <HAL_DMA_Abort_IT+0x18e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0201 	bic.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e178      	b.n	8007958 <HAL_DMA_Abort_IT+0x480>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e16f      	b.n	8007958 <HAL_DMA_Abort_IT+0x480>
 8007678:	40020010 	.word	0x40020010
 800767c:	40020028 	.word	0x40020028
 8007680:	40020040 	.word	0x40020040
 8007684:	40020058 	.word	0x40020058
 8007688:	40020070 	.word	0x40020070
 800768c:	40020088 	.word	0x40020088
 8007690:	400200a0 	.word	0x400200a0
 8007694:	400200b8 	.word	0x400200b8
 8007698:	40020410 	.word	0x40020410
 800769c:	40020428 	.word	0x40020428
 80076a0:	40020440 	.word	0x40020440
 80076a4:	40020458 	.word	0x40020458
 80076a8:	40020470 	.word	0x40020470
 80076ac:	40020488 	.word	0x40020488
 80076b0:	400204a0 	.word	0x400204a0
 80076b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 020e 	bic.w	r2, r2, #14
 80076c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6c      	ldr	r2, [pc, #432]	; (8007880 <HAL_DMA_Abort_IT+0x3a8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d04a      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6b      	ldr	r2, [pc, #428]	; (8007884 <HAL_DMA_Abort_IT+0x3ac>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d045      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a69      	ldr	r2, [pc, #420]	; (8007888 <HAL_DMA_Abort_IT+0x3b0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d040      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a68      	ldr	r2, [pc, #416]	; (800788c <HAL_DMA_Abort_IT+0x3b4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d03b      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a66      	ldr	r2, [pc, #408]	; (8007890 <HAL_DMA_Abort_IT+0x3b8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d036      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a65      	ldr	r2, [pc, #404]	; (8007894 <HAL_DMA_Abort_IT+0x3bc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d031      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a63      	ldr	r2, [pc, #396]	; (8007898 <HAL_DMA_Abort_IT+0x3c0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d02c      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a62      	ldr	r2, [pc, #392]	; (800789c <HAL_DMA_Abort_IT+0x3c4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d027      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a60      	ldr	r2, [pc, #384]	; (80078a0 <HAL_DMA_Abort_IT+0x3c8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d022      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a5f      	ldr	r2, [pc, #380]	; (80078a4 <HAL_DMA_Abort_IT+0x3cc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d01d      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5d      	ldr	r2, [pc, #372]	; (80078a8 <HAL_DMA_Abort_IT+0x3d0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d018      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a5c      	ldr	r2, [pc, #368]	; (80078ac <HAL_DMA_Abort_IT+0x3d4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a5a      	ldr	r2, [pc, #360]	; (80078b0 <HAL_DMA_Abort_IT+0x3d8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00e      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a59      	ldr	r2, [pc, #356]	; (80078b4 <HAL_DMA_Abort_IT+0x3dc>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d009      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a57      	ldr	r2, [pc, #348]	; (80078b8 <HAL_DMA_Abort_IT+0x3e0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_DMA_Abort_IT+0x290>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a56      	ldr	r2, [pc, #344]	; (80078bc <HAL_DMA_Abort_IT+0x3e4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d108      	bne.n	800777a <HAL_DMA_Abort_IT+0x2a2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0201 	bic.w	r2, r2, #1
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	e007      	b.n	800778a <HAL_DMA_Abort_IT+0x2b2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a3c      	ldr	r2, [pc, #240]	; (8007880 <HAL_DMA_Abort_IT+0x3a8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d072      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a3a      	ldr	r2, [pc, #232]	; (8007884 <HAL_DMA_Abort_IT+0x3ac>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d06d      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a39      	ldr	r2, [pc, #228]	; (8007888 <HAL_DMA_Abort_IT+0x3b0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d068      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a37      	ldr	r2, [pc, #220]	; (800788c <HAL_DMA_Abort_IT+0x3b4>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d063      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a36      	ldr	r2, [pc, #216]	; (8007890 <HAL_DMA_Abort_IT+0x3b8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d05e      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a34      	ldr	r2, [pc, #208]	; (8007894 <HAL_DMA_Abort_IT+0x3bc>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d059      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a33      	ldr	r2, [pc, #204]	; (8007898 <HAL_DMA_Abort_IT+0x3c0>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d054      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a31      	ldr	r2, [pc, #196]	; (800789c <HAL_DMA_Abort_IT+0x3c4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d04f      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a30      	ldr	r2, [pc, #192]	; (80078a0 <HAL_DMA_Abort_IT+0x3c8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d04a      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a2e      	ldr	r2, [pc, #184]	; (80078a4 <HAL_DMA_Abort_IT+0x3cc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d045      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a2d      	ldr	r2, [pc, #180]	; (80078a8 <HAL_DMA_Abort_IT+0x3d0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d040      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a2b      	ldr	r2, [pc, #172]	; (80078ac <HAL_DMA_Abort_IT+0x3d4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d03b      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a2a      	ldr	r2, [pc, #168]	; (80078b0 <HAL_DMA_Abort_IT+0x3d8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d036      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a28      	ldr	r2, [pc, #160]	; (80078b4 <HAL_DMA_Abort_IT+0x3dc>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d031      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a27      	ldr	r2, [pc, #156]	; (80078b8 <HAL_DMA_Abort_IT+0x3e0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d02c      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a25      	ldr	r2, [pc, #148]	; (80078bc <HAL_DMA_Abort_IT+0x3e4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d027      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a24      	ldr	r2, [pc, #144]	; (80078c0 <HAL_DMA_Abort_IT+0x3e8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d022      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a22      	ldr	r2, [pc, #136]	; (80078c4 <HAL_DMA_Abort_IT+0x3ec>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d01d      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a21      	ldr	r2, [pc, #132]	; (80078c8 <HAL_DMA_Abort_IT+0x3f0>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d018      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <HAL_DMA_Abort_IT+0x3f4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <HAL_DMA_Abort_IT+0x3f8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00e      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1c      	ldr	r2, [pc, #112]	; (80078d4 <HAL_DMA_Abort_IT+0x3fc>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d009      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <HAL_DMA_Abort_IT+0x400>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_DMA_Abort_IT+0x3a2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a19      	ldr	r2, [pc, #100]	; (80078dc <HAL_DMA_Abort_IT+0x404>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d132      	bne.n	80078e0 <HAL_DMA_Abort_IT+0x408>
 800787a:	2301      	movs	r3, #1
 800787c:	e031      	b.n	80078e2 <HAL_DMA_Abort_IT+0x40a>
 800787e:	bf00      	nop
 8007880:	40020010 	.word	0x40020010
 8007884:	40020028 	.word	0x40020028
 8007888:	40020040 	.word	0x40020040
 800788c:	40020058 	.word	0x40020058
 8007890:	40020070 	.word	0x40020070
 8007894:	40020088 	.word	0x40020088
 8007898:	400200a0 	.word	0x400200a0
 800789c:	400200b8 	.word	0x400200b8
 80078a0:	40020410 	.word	0x40020410
 80078a4:	40020428 	.word	0x40020428
 80078a8:	40020440 	.word	0x40020440
 80078ac:	40020458 	.word	0x40020458
 80078b0:	40020470 	.word	0x40020470
 80078b4:	40020488 	.word	0x40020488
 80078b8:	400204a0 	.word	0x400204a0
 80078bc:	400204b8 	.word	0x400204b8
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
 80078e0:	2300      	movs	r3, #0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d028      	beq.n	8007938 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	2201      	movs	r2, #1
 8007906:	409a      	lsls	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007914:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800792c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007936:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop

08007964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	; 0x28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007970:	4b67      	ldr	r3, [pc, #412]	; (8007b10 <HAL_DMA_IRQHandler+0x1ac>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a67      	ldr	r2, [pc, #412]	; (8007b14 <HAL_DMA_IRQHandler+0x1b0>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0a9b      	lsrs	r3, r3, #10
 800797c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007982:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a5f      	ldr	r2, [pc, #380]	; (8007b18 <HAL_DMA_IRQHandler+0x1b4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d04a      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a5d      	ldr	r2, [pc, #372]	; (8007b1c <HAL_DMA_IRQHandler+0x1b8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d045      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a5c      	ldr	r2, [pc, #368]	; (8007b20 <HAL_DMA_IRQHandler+0x1bc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d040      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a5a      	ldr	r2, [pc, #360]	; (8007b24 <HAL_DMA_IRQHandler+0x1c0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d03b      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a59      	ldr	r2, [pc, #356]	; (8007b28 <HAL_DMA_IRQHandler+0x1c4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d036      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a57      	ldr	r2, [pc, #348]	; (8007b2c <HAL_DMA_IRQHandler+0x1c8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d031      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a56      	ldr	r2, [pc, #344]	; (8007b30 <HAL_DMA_IRQHandler+0x1cc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d02c      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a54      	ldr	r2, [pc, #336]	; (8007b34 <HAL_DMA_IRQHandler+0x1d0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d027      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a53      	ldr	r2, [pc, #332]	; (8007b38 <HAL_DMA_IRQHandler+0x1d4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d022      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a51      	ldr	r2, [pc, #324]	; (8007b3c <HAL_DMA_IRQHandler+0x1d8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d01d      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a50      	ldr	r2, [pc, #320]	; (8007b40 <HAL_DMA_IRQHandler+0x1dc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d018      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a4e      	ldr	r2, [pc, #312]	; (8007b44 <HAL_DMA_IRQHandler+0x1e0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a4d      	ldr	r2, [pc, #308]	; (8007b48 <HAL_DMA_IRQHandler+0x1e4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00e      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a4b      	ldr	r2, [pc, #300]	; (8007b4c <HAL_DMA_IRQHandler+0x1e8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a4a      	ldr	r2, [pc, #296]	; (8007b50 <HAL_DMA_IRQHandler+0x1ec>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xd2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a48      	ldr	r2, [pc, #288]	; (8007b54 <HAL_DMA_IRQHandler+0x1f0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d101      	bne.n	8007a3a <HAL_DMA_IRQHandler+0xd6>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <HAL_DMA_IRQHandler+0xd8>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 842b 	beq.w	8008298 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a46:	f003 031f 	and.w	r3, r3, #31
 8007a4a:	2208      	movs	r2, #8
 8007a4c:	409a      	lsls	r2, r3
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80a2 	beq.w	8007b9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a2e      	ldr	r2, [pc, #184]	; (8007b18 <HAL_DMA_IRQHandler+0x1b4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d04a      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a2d      	ldr	r2, [pc, #180]	; (8007b1c <HAL_DMA_IRQHandler+0x1b8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d045      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a2b      	ldr	r2, [pc, #172]	; (8007b20 <HAL_DMA_IRQHandler+0x1bc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d040      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a2a      	ldr	r2, [pc, #168]	; (8007b24 <HAL_DMA_IRQHandler+0x1c0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d03b      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a28      	ldr	r2, [pc, #160]	; (8007b28 <HAL_DMA_IRQHandler+0x1c4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d036      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a27      	ldr	r2, [pc, #156]	; (8007b2c <HAL_DMA_IRQHandler+0x1c8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d031      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a25      	ldr	r2, [pc, #148]	; (8007b30 <HAL_DMA_IRQHandler+0x1cc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d02c      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a24      	ldr	r2, [pc, #144]	; (8007b34 <HAL_DMA_IRQHandler+0x1d0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d027      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a22      	ldr	r2, [pc, #136]	; (8007b38 <HAL_DMA_IRQHandler+0x1d4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d022      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a21      	ldr	r2, [pc, #132]	; (8007b3c <HAL_DMA_IRQHandler+0x1d8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d01d      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1f      	ldr	r2, [pc, #124]	; (8007b40 <HAL_DMA_IRQHandler+0x1dc>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d018      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1e      	ldr	r2, [pc, #120]	; (8007b44 <HAL_DMA_IRQHandler+0x1e0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d013      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1c      	ldr	r2, [pc, #112]	; (8007b48 <HAL_DMA_IRQHandler+0x1e4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00e      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1b      	ldr	r2, [pc, #108]	; (8007b4c <HAL_DMA_IRQHandler+0x1e8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a19      	ldr	r2, [pc, #100]	; (8007b50 <HAL_DMA_IRQHandler+0x1ec>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x194>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a18      	ldr	r2, [pc, #96]	; (8007b54 <HAL_DMA_IRQHandler+0x1f0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d12f      	bne.n	8007b58 <HAL_DMA_IRQHandler+0x1f4>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bf14      	ite	ne
 8007b06:	2301      	movne	r3, #1
 8007b08:	2300      	moveq	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	e02e      	b.n	8007b6c <HAL_DMA_IRQHandler+0x208>
 8007b0e:	bf00      	nop
 8007b10:	2400008c 	.word	0x2400008c
 8007b14:	1b4e81b5 	.word	0x1b4e81b5
 8007b18:	40020010 	.word	0x40020010
 8007b1c:	40020028 	.word	0x40020028
 8007b20:	40020040 	.word	0x40020040
 8007b24:	40020058 	.word	0x40020058
 8007b28:	40020070 	.word	0x40020070
 8007b2c:	40020088 	.word	0x40020088
 8007b30:	400200a0 	.word	0x400200a0
 8007b34:	400200b8 	.word	0x400200b8
 8007b38:	40020410 	.word	0x40020410
 8007b3c:	40020428 	.word	0x40020428
 8007b40:	40020440 	.word	0x40020440
 8007b44:	40020458 	.word	0x40020458
 8007b48:	40020470 	.word	0x40020470
 8007b4c:	40020488 	.word	0x40020488
 8007b50:	400204a0 	.word	0x400204a0
 8007b54:	400204b8 	.word	0x400204b8
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d015      	beq.n	8007b9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0204 	bic.w	r2, r2, #4
 8007b7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b84:	f003 031f 	and.w	r3, r3, #31
 8007b88:	2208      	movs	r2, #8
 8007b8a:	409a      	lsls	r2, r3
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b94:	f043 0201 	orr.w	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d06e      	beq.n	8007c90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a69      	ldr	r2, [pc, #420]	; (8007d5c <HAL_DMA_IRQHandler+0x3f8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d04a      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a67      	ldr	r2, [pc, #412]	; (8007d60 <HAL_DMA_IRQHandler+0x3fc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d045      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a66      	ldr	r2, [pc, #408]	; (8007d64 <HAL_DMA_IRQHandler+0x400>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d040      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a64      	ldr	r2, [pc, #400]	; (8007d68 <HAL_DMA_IRQHandler+0x404>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d03b      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a63      	ldr	r2, [pc, #396]	; (8007d6c <HAL_DMA_IRQHandler+0x408>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d036      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a61      	ldr	r2, [pc, #388]	; (8007d70 <HAL_DMA_IRQHandler+0x40c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d031      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a60      	ldr	r2, [pc, #384]	; (8007d74 <HAL_DMA_IRQHandler+0x410>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d02c      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a5e      	ldr	r2, [pc, #376]	; (8007d78 <HAL_DMA_IRQHandler+0x414>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d027      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a5d      	ldr	r2, [pc, #372]	; (8007d7c <HAL_DMA_IRQHandler+0x418>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d022      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a5b      	ldr	r2, [pc, #364]	; (8007d80 <HAL_DMA_IRQHandler+0x41c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d01d      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a5a      	ldr	r2, [pc, #360]	; (8007d84 <HAL_DMA_IRQHandler+0x420>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d018      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a58      	ldr	r2, [pc, #352]	; (8007d88 <HAL_DMA_IRQHandler+0x424>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d013      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a57      	ldr	r2, [pc, #348]	; (8007d8c <HAL_DMA_IRQHandler+0x428>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00e      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a55      	ldr	r2, [pc, #340]	; (8007d90 <HAL_DMA_IRQHandler+0x42c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a54      	ldr	r2, [pc, #336]	; (8007d94 <HAL_DMA_IRQHandler+0x430>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_DMA_IRQHandler+0x2ee>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a52      	ldr	r2, [pc, #328]	; (8007d98 <HAL_DMA_IRQHandler+0x434>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10a      	bne.n	8007c68 <HAL_DMA_IRQHandler+0x304>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e003      	b.n	8007c70 <HAL_DMA_IRQHandler+0x30c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00d      	beq.n	8007c90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	409a      	lsls	r2, r3
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c88:	f043 0202 	orr.w	r2, r3, #2
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c94:	f003 031f 	and.w	r3, r3, #31
 8007c98:	2204      	movs	r2, #4
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 808f 	beq.w	8007dc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a2c      	ldr	r2, [pc, #176]	; (8007d5c <HAL_DMA_IRQHandler+0x3f8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d04a      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a2a      	ldr	r2, [pc, #168]	; (8007d60 <HAL_DMA_IRQHandler+0x3fc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d045      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a29      	ldr	r2, [pc, #164]	; (8007d64 <HAL_DMA_IRQHandler+0x400>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d040      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a27      	ldr	r2, [pc, #156]	; (8007d68 <HAL_DMA_IRQHandler+0x404>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d03b      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <HAL_DMA_IRQHandler+0x408>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d036      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a24      	ldr	r2, [pc, #144]	; (8007d70 <HAL_DMA_IRQHandler+0x40c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d031      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a23      	ldr	r2, [pc, #140]	; (8007d74 <HAL_DMA_IRQHandler+0x410>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d02c      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <HAL_DMA_IRQHandler+0x414>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d027      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a20      	ldr	r2, [pc, #128]	; (8007d7c <HAL_DMA_IRQHandler+0x418>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d022      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1e      	ldr	r2, [pc, #120]	; (8007d80 <HAL_DMA_IRQHandler+0x41c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d01d      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <HAL_DMA_IRQHandler+0x420>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d018      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1b      	ldr	r2, [pc, #108]	; (8007d88 <HAL_DMA_IRQHandler+0x424>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d013      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1a      	ldr	r2, [pc, #104]	; (8007d8c <HAL_DMA_IRQHandler+0x428>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00e      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_DMA_IRQHandler+0x42c>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d009      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a17      	ldr	r2, [pc, #92]	; (8007d94 <HAL_DMA_IRQHandler+0x430>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d004      	beq.n	8007d46 <HAL_DMA_IRQHandler+0x3e2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <HAL_DMA_IRQHandler+0x434>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d12a      	bne.n	8007d9c <HAL_DMA_IRQHandler+0x438>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf14      	ite	ne
 8007d54:	2301      	movne	r3, #1
 8007d56:	2300      	moveq	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	e023      	b.n	8007da4 <HAL_DMA_IRQHandler+0x440>
 8007d5c:	40020010 	.word	0x40020010
 8007d60:	40020028 	.word	0x40020028
 8007d64:	40020040 	.word	0x40020040
 8007d68:	40020058 	.word	0x40020058
 8007d6c:	40020070 	.word	0x40020070
 8007d70:	40020088 	.word	0x40020088
 8007d74:	400200a0 	.word	0x400200a0
 8007d78:	400200b8 	.word	0x400200b8
 8007d7c:	40020410 	.word	0x40020410
 8007d80:	40020428 	.word	0x40020428
 8007d84:	40020440 	.word	0x40020440
 8007d88:	40020458 	.word	0x40020458
 8007d8c:	40020470 	.word	0x40020470
 8007d90:	40020488 	.word	0x40020488
 8007d94:	400204a0 	.word	0x400204a0
 8007d98:	400204b8 	.word	0x400204b8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00d      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	2204      	movs	r2, #4
 8007db2:	409a      	lsls	r2, r3
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbc:	f043 0204 	orr.w	r2, r3, #4
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc8:	f003 031f 	and.w	r3, r3, #31
 8007dcc:	2210      	movs	r2, #16
 8007dce:	409a      	lsls	r2, r3
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80a6 	beq.w	8007f26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a85      	ldr	r2, [pc, #532]	; (8007ff4 <HAL_DMA_IRQHandler+0x690>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d04a      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a83      	ldr	r2, [pc, #524]	; (8007ff8 <HAL_DMA_IRQHandler+0x694>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d045      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a82      	ldr	r2, [pc, #520]	; (8007ffc <HAL_DMA_IRQHandler+0x698>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d040      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a80      	ldr	r2, [pc, #512]	; (8008000 <HAL_DMA_IRQHandler+0x69c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d03b      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a7f      	ldr	r2, [pc, #508]	; (8008004 <HAL_DMA_IRQHandler+0x6a0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d036      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a7d      	ldr	r2, [pc, #500]	; (8008008 <HAL_DMA_IRQHandler+0x6a4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d031      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a7c      	ldr	r2, [pc, #496]	; (800800c <HAL_DMA_IRQHandler+0x6a8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d02c      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a7a      	ldr	r2, [pc, #488]	; (8008010 <HAL_DMA_IRQHandler+0x6ac>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d027      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a79      	ldr	r2, [pc, #484]	; (8008014 <HAL_DMA_IRQHandler+0x6b0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d022      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a77      	ldr	r2, [pc, #476]	; (8008018 <HAL_DMA_IRQHandler+0x6b4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d01d      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a76      	ldr	r2, [pc, #472]	; (800801c <HAL_DMA_IRQHandler+0x6b8>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d018      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a74      	ldr	r2, [pc, #464]	; (8008020 <HAL_DMA_IRQHandler+0x6bc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d013      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a73      	ldr	r2, [pc, #460]	; (8008024 <HAL_DMA_IRQHandler+0x6c0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00e      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a71      	ldr	r2, [pc, #452]	; (8008028 <HAL_DMA_IRQHandler+0x6c4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d009      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a70      	ldr	r2, [pc, #448]	; (800802c <HAL_DMA_IRQHandler+0x6c8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d004      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x516>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a6e      	ldr	r2, [pc, #440]	; (8008030 <HAL_DMA_IRQHandler+0x6cc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d10a      	bne.n	8007e90 <HAL_DMA_IRQHandler+0x52c>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	e009      	b.n	8007ea4 <HAL_DMA_IRQHandler+0x540>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d03e      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d018      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d024      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
 8007ee4:	e01f      	b.n	8007f26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d01b      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	e016      	b.n	8007f26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d107      	bne.n	8007f16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0208 	bic.w	r2, r2, #8
 8007f14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2a:	f003 031f 	and.w	r3, r3, #31
 8007f2e:	2220      	movs	r2, #32
 8007f30:	409a      	lsls	r2, r3
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	4013      	ands	r3, r2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8110 	beq.w	800815c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <HAL_DMA_IRQHandler+0x690>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d04a      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a2b      	ldr	r2, [pc, #172]	; (8007ff8 <HAL_DMA_IRQHandler+0x694>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d045      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a29      	ldr	r2, [pc, #164]	; (8007ffc <HAL_DMA_IRQHandler+0x698>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d040      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a28      	ldr	r2, [pc, #160]	; (8008000 <HAL_DMA_IRQHandler+0x69c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d03b      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a26      	ldr	r2, [pc, #152]	; (8008004 <HAL_DMA_IRQHandler+0x6a0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d036      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a25      	ldr	r2, [pc, #148]	; (8008008 <HAL_DMA_IRQHandler+0x6a4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d031      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a23      	ldr	r2, [pc, #140]	; (800800c <HAL_DMA_IRQHandler+0x6a8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d02c      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a22      	ldr	r2, [pc, #136]	; (8008010 <HAL_DMA_IRQHandler+0x6ac>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d027      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a20      	ldr	r2, [pc, #128]	; (8008014 <HAL_DMA_IRQHandler+0x6b0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d022      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1f      	ldr	r2, [pc, #124]	; (8008018 <HAL_DMA_IRQHandler+0x6b4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d01d      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1d      	ldr	r2, [pc, #116]	; (800801c <HAL_DMA_IRQHandler+0x6b8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d018      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <HAL_DMA_IRQHandler+0x6bc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d013      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <HAL_DMA_IRQHandler+0x6c0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00e      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a19      	ldr	r2, [pc, #100]	; (8008028 <HAL_DMA_IRQHandler+0x6c4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d009      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a17      	ldr	r2, [pc, #92]	; (800802c <HAL_DMA_IRQHandler+0x6c8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d004      	beq.n	8007fdc <HAL_DMA_IRQHandler+0x678>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a16      	ldr	r2, [pc, #88]	; (8008030 <HAL_DMA_IRQHandler+0x6cc>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d12b      	bne.n	8008034 <HAL_DMA_IRQHandler+0x6d0>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0310 	and.w	r3, r3, #16
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf14      	ite	ne
 8007fea:	2301      	movne	r3, #1
 8007fec:	2300      	moveq	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	e02a      	b.n	8008048 <HAL_DMA_IRQHandler+0x6e4>
 8007ff2:	bf00      	nop
 8007ff4:	40020010 	.word	0x40020010
 8007ff8:	40020028 	.word	0x40020028
 8007ffc:	40020040 	.word	0x40020040
 8008000:	40020058 	.word	0x40020058
 8008004:	40020070 	.word	0x40020070
 8008008:	40020088 	.word	0x40020088
 800800c:	400200a0 	.word	0x400200a0
 8008010:	400200b8 	.word	0x400200b8
 8008014:	40020410 	.word	0x40020410
 8008018:	40020428 	.word	0x40020428
 800801c:	40020440 	.word	0x40020440
 8008020:	40020458 	.word	0x40020458
 8008024:	40020470 	.word	0x40020470
 8008028:	40020488 	.word	0x40020488
 800802c:	400204a0 	.word	0x400204a0
 8008030:	400204b8 	.word	0x400204b8
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	bf14      	ite	ne
 8008042:	2301      	movne	r3, #1
 8008044:	2300      	moveq	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8087 	beq.w	800815c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	2220      	movs	r2, #32
 8008058:	409a      	lsls	r2, r3
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b04      	cmp	r3, #4
 8008068:	d139      	bne.n	80080de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0216 	bic.w	r2, r2, #22
 8008078:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695a      	ldr	r2, [r3, #20]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008088:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <HAL_DMA_IRQHandler+0x736>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0208 	bic.w	r2, r2, #8
 80080a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	223f      	movs	r2, #63	; 0x3f
 80080b4:	409a      	lsls	r2, r3
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 834a 	beq.w	8008768 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
          }
          return;
 80080dc:	e344      	b.n	8008768 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d018      	beq.n	800811e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d108      	bne.n	800810c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d02c      	beq.n	800815c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
 800810a:	e027      	b.n	800815c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d023      	beq.n	800815c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	4798      	blx	r3
 800811c:	e01e      	b.n	800815c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10f      	bne.n	800814c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0210 	bic.w	r2, r2, #16
 800813a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8306 	beq.w	8008772 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 8088 	beq.w	8008284 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2204      	movs	r2, #4
 8008178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a7a      	ldr	r2, [pc, #488]	; (800836c <HAL_DMA_IRQHandler+0xa08>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d04a      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a79      	ldr	r2, [pc, #484]	; (8008370 <HAL_DMA_IRQHandler+0xa0c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d045      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a77      	ldr	r2, [pc, #476]	; (8008374 <HAL_DMA_IRQHandler+0xa10>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d040      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a76      	ldr	r2, [pc, #472]	; (8008378 <HAL_DMA_IRQHandler+0xa14>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d03b      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a74      	ldr	r2, [pc, #464]	; (800837c <HAL_DMA_IRQHandler+0xa18>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d036      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a73      	ldr	r2, [pc, #460]	; (8008380 <HAL_DMA_IRQHandler+0xa1c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d031      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a71      	ldr	r2, [pc, #452]	; (8008384 <HAL_DMA_IRQHandler+0xa20>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d02c      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a70      	ldr	r2, [pc, #448]	; (8008388 <HAL_DMA_IRQHandler+0xa24>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d027      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a6e      	ldr	r2, [pc, #440]	; (800838c <HAL_DMA_IRQHandler+0xa28>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d022      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a6d      	ldr	r2, [pc, #436]	; (8008390 <HAL_DMA_IRQHandler+0xa2c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d01d      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a6b      	ldr	r2, [pc, #428]	; (8008394 <HAL_DMA_IRQHandler+0xa30>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d018      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a6a      	ldr	r2, [pc, #424]	; (8008398 <HAL_DMA_IRQHandler+0xa34>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d013      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a68      	ldr	r2, [pc, #416]	; (800839c <HAL_DMA_IRQHandler+0xa38>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00e      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a67      	ldr	r2, [pc, #412]	; (80083a0 <HAL_DMA_IRQHandler+0xa3c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d009      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a65      	ldr	r2, [pc, #404]	; (80083a4 <HAL_DMA_IRQHandler+0xa40>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <HAL_DMA_IRQHandler+0x8b8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a64      	ldr	r2, [pc, #400]	; (80083a8 <HAL_DMA_IRQHandler+0xa44>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d108      	bne.n	800822e <HAL_DMA_IRQHandler+0x8ca>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e007      	b.n	800823e <HAL_DMA_IRQHandler+0x8da>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0201 	bic.w	r2, r2, #1
 800823c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008246:	429a      	cmp	r2, r3
 8008248:	d307      	bcc.n	800825a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f2      	bne.n	800823e <HAL_DMA_IRQHandler+0x8da>
 8008258:	e000      	b.n	800825c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800825a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2203      	movs	r2, #3
 800826e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008272:	e003      	b.n	800827c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8272 	beq.w	8008772 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
 8008296:	e26c      	b.n	8008772 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a43      	ldr	r2, [pc, #268]	; (80083ac <HAL_DMA_IRQHandler+0xa48>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d022      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x984>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a42      	ldr	r2, [pc, #264]	; (80083b0 <HAL_DMA_IRQHandler+0xa4c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d01d      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x984>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a40      	ldr	r2, [pc, #256]	; (80083b4 <HAL_DMA_IRQHandler+0xa50>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d018      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x984>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a3f      	ldr	r2, [pc, #252]	; (80083b8 <HAL_DMA_IRQHandler+0xa54>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x984>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a3d      	ldr	r2, [pc, #244]	; (80083bc <HAL_DMA_IRQHandler+0xa58>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00e      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x984>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a3c      	ldr	r2, [pc, #240]	; (80083c0 <HAL_DMA_IRQHandler+0xa5c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d009      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x984>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a3a      	ldr	r2, [pc, #232]	; (80083c4 <HAL_DMA_IRQHandler+0xa60>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d004      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x984>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a39      	ldr	r2, [pc, #228]	; (80083c8 <HAL_DMA_IRQHandler+0xa64>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d101      	bne.n	80082ec <HAL_DMA_IRQHandler+0x988>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e000      	b.n	80082ee <HAL_DMA_IRQHandler+0x98a>
 80082ec:	2300      	movs	r3, #0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 823f 	beq.w	8008772 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	2204      	movs	r2, #4
 8008306:	409a      	lsls	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80cd 	beq.w	80084ac <HAL_DMA_IRQHandler+0xb48>
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80c7 	beq.w	80084ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2204      	movs	r2, #4
 8008328:	409a      	lsls	r2, r3
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d049      	beq.n	80083cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d109      	bne.n	8008356 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 8210 	beq.w	800876c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008354:	e20a      	b.n	800876c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 8206 	beq.w	800876c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008368:	e200      	b.n	800876c <HAL_DMA_IRQHandler+0xe08>
 800836a:	bf00      	nop
 800836c:	40020010 	.word	0x40020010
 8008370:	40020028 	.word	0x40020028
 8008374:	40020040 	.word	0x40020040
 8008378:	40020058 	.word	0x40020058
 800837c:	40020070 	.word	0x40020070
 8008380:	40020088 	.word	0x40020088
 8008384:	400200a0 	.word	0x400200a0
 8008388:	400200b8 	.word	0x400200b8
 800838c:	40020410 	.word	0x40020410
 8008390:	40020428 	.word	0x40020428
 8008394:	40020440 	.word	0x40020440
 8008398:	40020458 	.word	0x40020458
 800839c:	40020470 	.word	0x40020470
 80083a0:	40020488 	.word	0x40020488
 80083a4:	400204a0 	.word	0x400204a0
 80083a8:	400204b8 	.word	0x400204b8
 80083ac:	58025408 	.word	0x58025408
 80083b0:	5802541c 	.word	0x5802541c
 80083b4:	58025430 	.word	0x58025430
 80083b8:	58025444 	.word	0x58025444
 80083bc:	58025458 	.word	0x58025458
 80083c0:	5802546c 	.word	0x5802546c
 80083c4:	58025480 	.word	0x58025480
 80083c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d160      	bne.n	8008498 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a7f      	ldr	r2, [pc, #508]	; (80085d8 <HAL_DMA_IRQHandler+0xc74>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d04a      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a7d      	ldr	r2, [pc, #500]	; (80085dc <HAL_DMA_IRQHandler+0xc78>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d045      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a7c      	ldr	r2, [pc, #496]	; (80085e0 <HAL_DMA_IRQHandler+0xc7c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d040      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a7a      	ldr	r2, [pc, #488]	; (80085e4 <HAL_DMA_IRQHandler+0xc80>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d03b      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a79      	ldr	r2, [pc, #484]	; (80085e8 <HAL_DMA_IRQHandler+0xc84>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d036      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a77      	ldr	r2, [pc, #476]	; (80085ec <HAL_DMA_IRQHandler+0xc88>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d031      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a76      	ldr	r2, [pc, #472]	; (80085f0 <HAL_DMA_IRQHandler+0xc8c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d02c      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a74      	ldr	r2, [pc, #464]	; (80085f4 <HAL_DMA_IRQHandler+0xc90>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d027      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a73      	ldr	r2, [pc, #460]	; (80085f8 <HAL_DMA_IRQHandler+0xc94>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d022      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a71      	ldr	r2, [pc, #452]	; (80085fc <HAL_DMA_IRQHandler+0xc98>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01d      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a70      	ldr	r2, [pc, #448]	; (8008600 <HAL_DMA_IRQHandler+0xc9c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d018      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a6e      	ldr	r2, [pc, #440]	; (8008604 <HAL_DMA_IRQHandler+0xca0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a6d      	ldr	r2, [pc, #436]	; (8008608 <HAL_DMA_IRQHandler+0xca4>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00e      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a6b      	ldr	r2, [pc, #428]	; (800860c <HAL_DMA_IRQHandler+0xca8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d009      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a6a      	ldr	r2, [pc, #424]	; (8008610 <HAL_DMA_IRQHandler+0xcac>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d004      	beq.n	8008476 <HAL_DMA_IRQHandler+0xb12>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a68      	ldr	r2, [pc, #416]	; (8008614 <HAL_DMA_IRQHandler+0xcb0>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d108      	bne.n	8008488 <HAL_DMA_IRQHandler+0xb24>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0208 	bic.w	r2, r2, #8
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e007      	b.n	8008498 <HAL_DMA_IRQHandler+0xb34>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0204 	bic.w	r2, r2, #4
 8008496:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8165 	beq.w	800876c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084aa:	e15f      	b.n	800876c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b0:	f003 031f 	and.w	r3, r3, #31
 80084b4:	2202      	movs	r2, #2
 80084b6:	409a      	lsls	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80c5 	beq.w	800864c <HAL_DMA_IRQHandler+0xce8>
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80bf 	beq.w	800864c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d2:	f003 031f 	and.w	r3, r3, #31
 80084d6:	2202      	movs	r2, #2
 80084d8:	409a      	lsls	r2, r3
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d018      	beq.n	800851a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 813a 	beq.w	8008770 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008504:	e134      	b.n	8008770 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8130 	beq.w	8008770 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008518:	e12a      	b.n	8008770 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 8089 	bne.w	8008638 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a2b      	ldr	r2, [pc, #172]	; (80085d8 <HAL_DMA_IRQHandler+0xc74>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d04a      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a29      	ldr	r2, [pc, #164]	; (80085dc <HAL_DMA_IRQHandler+0xc78>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d045      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a28      	ldr	r2, [pc, #160]	; (80085e0 <HAL_DMA_IRQHandler+0xc7c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d040      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a26      	ldr	r2, [pc, #152]	; (80085e4 <HAL_DMA_IRQHandler+0xc80>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d03b      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a25      	ldr	r2, [pc, #148]	; (80085e8 <HAL_DMA_IRQHandler+0xc84>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d036      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a23      	ldr	r2, [pc, #140]	; (80085ec <HAL_DMA_IRQHandler+0xc88>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d031      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a22      	ldr	r2, [pc, #136]	; (80085f0 <HAL_DMA_IRQHandler+0xc8c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d02c      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a20      	ldr	r2, [pc, #128]	; (80085f4 <HAL_DMA_IRQHandler+0xc90>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d027      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1f      	ldr	r2, [pc, #124]	; (80085f8 <HAL_DMA_IRQHandler+0xc94>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d022      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1d      	ldr	r2, [pc, #116]	; (80085fc <HAL_DMA_IRQHandler+0xc98>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d01d      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <HAL_DMA_IRQHandler+0xc9c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d018      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1a      	ldr	r2, [pc, #104]	; (8008604 <HAL_DMA_IRQHandler+0xca0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d013      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a19      	ldr	r2, [pc, #100]	; (8008608 <HAL_DMA_IRQHandler+0xca4>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00e      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a17      	ldr	r2, [pc, #92]	; (800860c <HAL_DMA_IRQHandler+0xca8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d009      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a16      	ldr	r2, [pc, #88]	; (8008610 <HAL_DMA_IRQHandler+0xcac>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d004      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xc62>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a14      	ldr	r2, [pc, #80]	; (8008614 <HAL_DMA_IRQHandler+0xcb0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d128      	bne.n	8008618 <HAL_DMA_IRQHandler+0xcb4>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0214 	bic.w	r2, r2, #20
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	e027      	b.n	8008628 <HAL_DMA_IRQHandler+0xcc4>
 80085d8:	40020010 	.word	0x40020010
 80085dc:	40020028 	.word	0x40020028
 80085e0:	40020040 	.word	0x40020040
 80085e4:	40020058 	.word	0x40020058
 80085e8:	40020070 	.word	0x40020070
 80085ec:	40020088 	.word	0x40020088
 80085f0:	400200a0 	.word	0x400200a0
 80085f4:	400200b8 	.word	0x400200b8
 80085f8:	40020410 	.word	0x40020410
 80085fc:	40020428 	.word	0x40020428
 8008600:	40020440 	.word	0x40020440
 8008604:	40020458 	.word	0x40020458
 8008608:	40020470 	.word	0x40020470
 800860c:	40020488 	.word	0x40020488
 8008610:	400204a0 	.word	0x400204a0
 8008614:	400204b8 	.word	0x400204b8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 020a 	bic.w	r2, r2, #10
 8008626:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 8097 	beq.w	8008770 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800864a:	e091      	b.n	8008770 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	2208      	movs	r2, #8
 8008656:	409a      	lsls	r2, r3
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8088 	beq.w	8008772 <HAL_DMA_IRQHandler+0xe0e>
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8082 	beq.w	8008772 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a41      	ldr	r2, [pc, #260]	; (8008778 <HAL_DMA_IRQHandler+0xe14>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d04a      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a3f      	ldr	r2, [pc, #252]	; (800877c <HAL_DMA_IRQHandler+0xe18>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d045      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a3e      	ldr	r2, [pc, #248]	; (8008780 <HAL_DMA_IRQHandler+0xe1c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d040      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a3c      	ldr	r2, [pc, #240]	; (8008784 <HAL_DMA_IRQHandler+0xe20>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d03b      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a3b      	ldr	r2, [pc, #236]	; (8008788 <HAL_DMA_IRQHandler+0xe24>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d036      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a39      	ldr	r2, [pc, #228]	; (800878c <HAL_DMA_IRQHandler+0xe28>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d031      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a38      	ldr	r2, [pc, #224]	; (8008790 <HAL_DMA_IRQHandler+0xe2c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d02c      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a36      	ldr	r2, [pc, #216]	; (8008794 <HAL_DMA_IRQHandler+0xe30>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d027      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a35      	ldr	r2, [pc, #212]	; (8008798 <HAL_DMA_IRQHandler+0xe34>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a33      	ldr	r2, [pc, #204]	; (800879c <HAL_DMA_IRQHandler+0xe38>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01d      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a32      	ldr	r2, [pc, #200]	; (80087a0 <HAL_DMA_IRQHandler+0xe3c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a30      	ldr	r2, [pc, #192]	; (80087a4 <HAL_DMA_IRQHandler+0xe40>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a2f      	ldr	r2, [pc, #188]	; (80087a8 <HAL_DMA_IRQHandler+0xe44>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a2d      	ldr	r2, [pc, #180]	; (80087ac <HAL_DMA_IRQHandler+0xe48>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a2c      	ldr	r2, [pc, #176]	; (80087b0 <HAL_DMA_IRQHandler+0xe4c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_DMA_IRQHandler+0xdaa>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a2a      	ldr	r2, [pc, #168]	; (80087b4 <HAL_DMA_IRQHandler+0xe50>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d108      	bne.n	8008720 <HAL_DMA_IRQHandler+0xdbc>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 021c 	bic.w	r2, r2, #28
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	e007      	b.n	8008730 <HAL_DMA_IRQHandler+0xdcc>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 020e 	bic.w	r2, r2, #14
 800872e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008734:	f003 031f 	and.w	r3, r3, #31
 8008738:	2201      	movs	r2, #1
 800873a:	409a      	lsls	r2, r3
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d009      	beq.n	8008772 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
 8008766:	e004      	b.n	8008772 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008768:	bf00      	nop
 800876a:	e002      	b.n	8008772 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008770:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	40020010 	.word	0x40020010
 800877c:	40020028 	.word	0x40020028
 8008780:	40020040 	.word	0x40020040
 8008784:	40020058 	.word	0x40020058
 8008788:	40020070 	.word	0x40020070
 800878c:	40020088 	.word	0x40020088
 8008790:	400200a0 	.word	0x400200a0
 8008794:	400200b8 	.word	0x400200b8
 8008798:	40020410 	.word	0x40020410
 800879c:	40020428 	.word	0x40020428
 80087a0:	40020440 	.word	0x40020440
 80087a4:	40020458 	.word	0x40020458
 80087a8:	40020470 	.word	0x40020470
 80087ac:	40020488 	.word	0x40020488
 80087b0:	400204a0 	.word	0x400204a0
 80087b4:	400204b8 	.word	0x400204b8

080087b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a7f      	ldr	r2, [pc, #508]	; (80089ec <DMA_SetConfig+0x21c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d072      	beq.n	80088da <DMA_SetConfig+0x10a>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a7d      	ldr	r2, [pc, #500]	; (80089f0 <DMA_SetConfig+0x220>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d06d      	beq.n	80088da <DMA_SetConfig+0x10a>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a7c      	ldr	r2, [pc, #496]	; (80089f4 <DMA_SetConfig+0x224>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d068      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a7a      	ldr	r2, [pc, #488]	; (80089f8 <DMA_SetConfig+0x228>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d063      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a79      	ldr	r2, [pc, #484]	; (80089fc <DMA_SetConfig+0x22c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d05e      	beq.n	80088da <DMA_SetConfig+0x10a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a77      	ldr	r2, [pc, #476]	; (8008a00 <DMA_SetConfig+0x230>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d059      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a76      	ldr	r2, [pc, #472]	; (8008a04 <DMA_SetConfig+0x234>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d054      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a74      	ldr	r2, [pc, #464]	; (8008a08 <DMA_SetConfig+0x238>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d04f      	beq.n	80088da <DMA_SetConfig+0x10a>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a73      	ldr	r2, [pc, #460]	; (8008a0c <DMA_SetConfig+0x23c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d04a      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a71      	ldr	r2, [pc, #452]	; (8008a10 <DMA_SetConfig+0x240>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d045      	beq.n	80088da <DMA_SetConfig+0x10a>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a70      	ldr	r2, [pc, #448]	; (8008a14 <DMA_SetConfig+0x244>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d040      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a6e      	ldr	r2, [pc, #440]	; (8008a18 <DMA_SetConfig+0x248>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d03b      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a6d      	ldr	r2, [pc, #436]	; (8008a1c <DMA_SetConfig+0x24c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d036      	beq.n	80088da <DMA_SetConfig+0x10a>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a6b      	ldr	r2, [pc, #428]	; (8008a20 <DMA_SetConfig+0x250>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d031      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a6a      	ldr	r2, [pc, #424]	; (8008a24 <DMA_SetConfig+0x254>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d02c      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a68      	ldr	r2, [pc, #416]	; (8008a28 <DMA_SetConfig+0x258>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d027      	beq.n	80088da <DMA_SetConfig+0x10a>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a67      	ldr	r2, [pc, #412]	; (8008a2c <DMA_SetConfig+0x25c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d022      	beq.n	80088da <DMA_SetConfig+0x10a>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a65      	ldr	r2, [pc, #404]	; (8008a30 <DMA_SetConfig+0x260>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d01d      	beq.n	80088da <DMA_SetConfig+0x10a>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a64      	ldr	r2, [pc, #400]	; (8008a34 <DMA_SetConfig+0x264>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d018      	beq.n	80088da <DMA_SetConfig+0x10a>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a62      	ldr	r2, [pc, #392]	; (8008a38 <DMA_SetConfig+0x268>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d013      	beq.n	80088da <DMA_SetConfig+0x10a>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a61      	ldr	r2, [pc, #388]	; (8008a3c <DMA_SetConfig+0x26c>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00e      	beq.n	80088da <DMA_SetConfig+0x10a>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a5f      	ldr	r2, [pc, #380]	; (8008a40 <DMA_SetConfig+0x270>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d009      	beq.n	80088da <DMA_SetConfig+0x10a>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a5e      	ldr	r2, [pc, #376]	; (8008a44 <DMA_SetConfig+0x274>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d004      	beq.n	80088da <DMA_SetConfig+0x10a>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a5c      	ldr	r2, [pc, #368]	; (8008a48 <DMA_SetConfig+0x278>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d101      	bne.n	80088de <DMA_SetConfig+0x10e>
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <DMA_SetConfig+0x110>
 80088de:	2300      	movs	r3, #0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00d      	beq.n	8008900 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a39      	ldr	r2, [pc, #228]	; (80089ec <DMA_SetConfig+0x21c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d04a      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <DMA_SetConfig+0x220>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d045      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a36      	ldr	r2, [pc, #216]	; (80089f4 <DMA_SetConfig+0x224>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d040      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a35      	ldr	r2, [pc, #212]	; (80089f8 <DMA_SetConfig+0x228>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d03b      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a33      	ldr	r2, [pc, #204]	; (80089fc <DMA_SetConfig+0x22c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d036      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a32      	ldr	r2, [pc, #200]	; (8008a00 <DMA_SetConfig+0x230>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d031      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a30      	ldr	r2, [pc, #192]	; (8008a04 <DMA_SetConfig+0x234>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d02c      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a2f      	ldr	r2, [pc, #188]	; (8008a08 <DMA_SetConfig+0x238>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d027      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a2d      	ldr	r2, [pc, #180]	; (8008a0c <DMA_SetConfig+0x23c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d022      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a2c      	ldr	r2, [pc, #176]	; (8008a10 <DMA_SetConfig+0x240>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d01d      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <DMA_SetConfig+0x244>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d018      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a29      	ldr	r2, [pc, #164]	; (8008a18 <DMA_SetConfig+0x248>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d013      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a27      	ldr	r2, [pc, #156]	; (8008a1c <DMA_SetConfig+0x24c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00e      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a26      	ldr	r2, [pc, #152]	; (8008a20 <DMA_SetConfig+0x250>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d009      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a24      	ldr	r2, [pc, #144]	; (8008a24 <DMA_SetConfig+0x254>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d004      	beq.n	80089a0 <DMA_SetConfig+0x1d0>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a23      	ldr	r2, [pc, #140]	; (8008a28 <DMA_SetConfig+0x258>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d101      	bne.n	80089a4 <DMA_SetConfig+0x1d4>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e000      	b.n	80089a6 <DMA_SetConfig+0x1d6>
 80089a4:	2300      	movs	r3, #0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d059      	beq.n	8008a5e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ae:	f003 031f 	and.w	r3, r3, #31
 80089b2:	223f      	movs	r2, #63	; 0x3f
 80089b4:	409a      	lsls	r2, r3
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d138      	bne.n	8008a4c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089ea:	e086      	b.n	8008afa <DMA_SetConfig+0x32a>
 80089ec:	40020010 	.word	0x40020010
 80089f0:	40020028 	.word	0x40020028
 80089f4:	40020040 	.word	0x40020040
 80089f8:	40020058 	.word	0x40020058
 80089fc:	40020070 	.word	0x40020070
 8008a00:	40020088 	.word	0x40020088
 8008a04:	400200a0 	.word	0x400200a0
 8008a08:	400200b8 	.word	0x400200b8
 8008a0c:	40020410 	.word	0x40020410
 8008a10:	40020428 	.word	0x40020428
 8008a14:	40020440 	.word	0x40020440
 8008a18:	40020458 	.word	0x40020458
 8008a1c:	40020470 	.word	0x40020470
 8008a20:	40020488 	.word	0x40020488
 8008a24:	400204a0 	.word	0x400204a0
 8008a28:	400204b8 	.word	0x400204b8
 8008a2c:	58025408 	.word	0x58025408
 8008a30:	5802541c 	.word	0x5802541c
 8008a34:	58025430 	.word	0x58025430
 8008a38:	58025444 	.word	0x58025444
 8008a3c:	58025458 	.word	0x58025458
 8008a40:	5802546c 	.word	0x5802546c
 8008a44:	58025480 	.word	0x58025480
 8008a48:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	60da      	str	r2, [r3, #12]
}
 8008a5c:	e04d      	b.n	8008afa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a29      	ldr	r2, [pc, #164]	; (8008b08 <DMA_SetConfig+0x338>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d022      	beq.n	8008aae <DMA_SetConfig+0x2de>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <DMA_SetConfig+0x33c>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d01d      	beq.n	8008aae <DMA_SetConfig+0x2de>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a26      	ldr	r2, [pc, #152]	; (8008b10 <DMA_SetConfig+0x340>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d018      	beq.n	8008aae <DMA_SetConfig+0x2de>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a24      	ldr	r2, [pc, #144]	; (8008b14 <DMA_SetConfig+0x344>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <DMA_SetConfig+0x2de>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a23      	ldr	r2, [pc, #140]	; (8008b18 <DMA_SetConfig+0x348>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00e      	beq.n	8008aae <DMA_SetConfig+0x2de>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a21      	ldr	r2, [pc, #132]	; (8008b1c <DMA_SetConfig+0x34c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d009      	beq.n	8008aae <DMA_SetConfig+0x2de>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a20      	ldr	r2, [pc, #128]	; (8008b20 <DMA_SetConfig+0x350>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d004      	beq.n	8008aae <DMA_SetConfig+0x2de>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1e      	ldr	r2, [pc, #120]	; (8008b24 <DMA_SetConfig+0x354>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d101      	bne.n	8008ab2 <DMA_SetConfig+0x2e2>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <DMA_SetConfig+0x2e4>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d020      	beq.n	8008afa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abc:	f003 031f 	and.w	r3, r3, #31
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b40      	cmp	r3, #64	; 0x40
 8008ad6:	d108      	bne.n	8008aea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	60da      	str	r2, [r3, #12]
}
 8008ae8:	e007      	b.n	8008afa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	60da      	str	r2, [r3, #12]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	58025408 	.word	0x58025408
 8008b0c:	5802541c 	.word	0x5802541c
 8008b10:	58025430 	.word	0x58025430
 8008b14:	58025444 	.word	0x58025444
 8008b18:	58025458 	.word	0x58025458
 8008b1c:	5802546c 	.word	0x5802546c
 8008b20:	58025480 	.word	0x58025480
 8008b24:	58025494 	.word	0x58025494

08008b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a42      	ldr	r2, [pc, #264]	; (8008c40 <DMA_CalcBaseAndBitshift+0x118>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d04a      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a41      	ldr	r2, [pc, #260]	; (8008c44 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d045      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a3f      	ldr	r2, [pc, #252]	; (8008c48 <DMA_CalcBaseAndBitshift+0x120>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d040      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a3e      	ldr	r2, [pc, #248]	; (8008c4c <DMA_CalcBaseAndBitshift+0x124>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d03b      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a3c      	ldr	r2, [pc, #240]	; (8008c50 <DMA_CalcBaseAndBitshift+0x128>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d036      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a3b      	ldr	r2, [pc, #236]	; (8008c54 <DMA_CalcBaseAndBitshift+0x12c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d031      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a39      	ldr	r2, [pc, #228]	; (8008c58 <DMA_CalcBaseAndBitshift+0x130>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d02c      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a38      	ldr	r2, [pc, #224]	; (8008c5c <DMA_CalcBaseAndBitshift+0x134>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d027      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a36      	ldr	r2, [pc, #216]	; (8008c60 <DMA_CalcBaseAndBitshift+0x138>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d022      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a35      	ldr	r2, [pc, #212]	; (8008c64 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d01d      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a33      	ldr	r2, [pc, #204]	; (8008c68 <DMA_CalcBaseAndBitshift+0x140>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d018      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a32      	ldr	r2, [pc, #200]	; (8008c6c <DMA_CalcBaseAndBitshift+0x144>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d013      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a30      	ldr	r2, [pc, #192]	; (8008c70 <DMA_CalcBaseAndBitshift+0x148>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d00e      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a2f      	ldr	r2, [pc, #188]	; (8008c74 <DMA_CalcBaseAndBitshift+0x14c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d009      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a2d      	ldr	r2, [pc, #180]	; (8008c78 <DMA_CalcBaseAndBitshift+0x150>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d004      	beq.n	8008bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a2c      	ldr	r2, [pc, #176]	; (8008c7c <DMA_CalcBaseAndBitshift+0x154>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d101      	bne.n	8008bd4 <DMA_CalcBaseAndBitshift+0xac>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e000      	b.n	8008bd6 <DMA_CalcBaseAndBitshift+0xae>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d024      	beq.n	8008c24 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	3b10      	subs	r3, #16
 8008be2:	4a27      	ldr	r2, [pc, #156]	; (8008c80 <DMA_CalcBaseAndBitshift+0x158>)
 8008be4:	fba2 2303 	umull	r2, r3, r2, r3
 8008be8:	091b      	lsrs	r3, r3, #4
 8008bea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	4a24      	ldr	r2, [pc, #144]	; (8008c84 <DMA_CalcBaseAndBitshift+0x15c>)
 8008bf4:	5cd3      	ldrb	r3, [r2, r3]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d908      	bls.n	8008c14 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	4b1f      	ldr	r3, [pc, #124]	; (8008c88 <DMA_CalcBaseAndBitshift+0x160>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	659a      	str	r2, [r3, #88]	; 0x58
 8008c12:	e00d      	b.n	8008c30 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4b1b      	ldr	r3, [pc, #108]	; (8008c88 <DMA_CalcBaseAndBitshift+0x160>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6593      	str	r3, [r2, #88]	; 0x58
 8008c22:	e005      	b.n	8008c30 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	40020010 	.word	0x40020010
 8008c44:	40020028 	.word	0x40020028
 8008c48:	40020040 	.word	0x40020040
 8008c4c:	40020058 	.word	0x40020058
 8008c50:	40020070 	.word	0x40020070
 8008c54:	40020088 	.word	0x40020088
 8008c58:	400200a0 	.word	0x400200a0
 8008c5c:	400200b8 	.word	0x400200b8
 8008c60:	40020410 	.word	0x40020410
 8008c64:	40020428 	.word	0x40020428
 8008c68:	40020440 	.word	0x40020440
 8008c6c:	40020458 	.word	0x40020458
 8008c70:	40020470 	.word	0x40020470
 8008c74:	40020488 	.word	0x40020488
 8008c78:	400204a0 	.word	0x400204a0
 8008c7c:	400204b8 	.word	0x400204b8
 8008c80:	aaaaaaab 	.word	0xaaaaaaab
 8008c84:	08017a14 	.word	0x08017a14
 8008c88:	fffffc00 	.word	0xfffffc00

08008c8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d120      	bne.n	8008ce2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d858      	bhi.n	8008d5a <DMA_CheckFifoParam+0xce>
 8008ca8:	a201      	add	r2, pc, #4	; (adr r2, 8008cb0 <DMA_CheckFifoParam+0x24>)
 8008caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cae:	bf00      	nop
 8008cb0:	08008cc1 	.word	0x08008cc1
 8008cb4:	08008cd3 	.word	0x08008cd3
 8008cb8:	08008cc1 	.word	0x08008cc1
 8008cbc:	08008d5b 	.word	0x08008d5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d048      	beq.n	8008d5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cd0:	e045      	b.n	8008d5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cda:	d142      	bne.n	8008d62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ce0:	e03f      	b.n	8008d62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cea:	d123      	bne.n	8008d34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d838      	bhi.n	8008d66 <DMA_CheckFifoParam+0xda>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <DMA_CheckFifoParam+0x70>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d13 	.word	0x08008d13
 8008d04:	08008d0d 	.word	0x08008d0d
 8008d08:	08008d25 	.word	0x08008d25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
        break;
 8008d10:	e030      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d025      	beq.n	8008d6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d22:	e022      	b.n	8008d6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d2c:	d11f      	bne.n	8008d6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d32:	e01c      	b.n	8008d6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d902      	bls.n	8008d42 <DMA_CheckFifoParam+0xb6>
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d003      	beq.n	8008d48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d40:	e018      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	73fb      	strb	r3, [r7, #15]
        break;
 8008d46:	e015      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00e      	beq.n	8008d72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
    break;
 8008d58:	e00b      	b.n	8008d72 <DMA_CheckFifoParam+0xe6>
        break;
 8008d5a:	bf00      	nop
 8008d5c:	e00a      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
        break;
 8008d5e:	bf00      	nop
 8008d60:	e008      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
        break;
 8008d62:	bf00      	nop
 8008d64:	e006      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
        break;
 8008d66:	bf00      	nop
 8008d68:	e004      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
        break;
 8008d6a:	bf00      	nop
 8008d6c:	e002      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
        break;
 8008d6e:	bf00      	nop
 8008d70:	e000      	b.n	8008d74 <DMA_CheckFifoParam+0xe8>
    break;
 8008d72:	bf00      	nop
    }
  }

  return status;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop

08008d84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d022      	beq.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a36      	ldr	r2, [pc, #216]	; (8008e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d01d      	beq.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a35      	ldr	r2, [pc, #212]	; (8008e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d018      	beq.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a33      	ldr	r2, [pc, #204]	; (8008e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d013      	beq.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a32      	ldr	r2, [pc, #200]	; (8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00e      	beq.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a30      	ldr	r2, [pc, #192]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d009      	beq.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a2f      	ldr	r2, [pc, #188]	; (8008e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d004      	beq.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a2d      	ldr	r2, [pc, #180]	; (8008e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d101      	bne.n	8008de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008de6:	2300      	movs	r3, #0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01a      	beq.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	3b08      	subs	r3, #8
 8008df4:	4a28      	ldr	r2, [pc, #160]	; (8008e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008df6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfa:	091b      	lsrs	r3, r3, #4
 8008dfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4b26      	ldr	r3, [pc, #152]	; (8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a24      	ldr	r2, [pc, #144]	; (8008ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008e10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f003 031f 	and.w	r3, r3, #31
 8008e18:	2201      	movs	r2, #1
 8008e1a:	409a      	lsls	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e20:	e024      	b.n	8008e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	3b10      	subs	r3, #16
 8008e2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e30:	091b      	lsrs	r3, r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4a1c      	ldr	r2, [pc, #112]	; (8008ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d806      	bhi.n	8008e4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4a1b      	ldr	r2, [pc, #108]	; (8008eac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d902      	bls.n	8008e4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3308      	adds	r3, #8
 8008e48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	461a      	mov	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a16      	ldr	r2, [pc, #88]	; (8008eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f003 031f 	and.w	r3, r3, #31
 8008e64:	2201      	movs	r2, #1
 8008e66:	409a      	lsls	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e6c:	bf00      	nop
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	58025408 	.word	0x58025408
 8008e7c:	5802541c 	.word	0x5802541c
 8008e80:	58025430 	.word	0x58025430
 8008e84:	58025444 	.word	0x58025444
 8008e88:	58025458 	.word	0x58025458
 8008e8c:	5802546c 	.word	0x5802546c
 8008e90:	58025480 	.word	0x58025480
 8008e94:	58025494 	.word	0x58025494
 8008e98:	cccccccd 	.word	0xcccccccd
 8008e9c:	16009600 	.word	0x16009600
 8008ea0:	58025880 	.word	0x58025880
 8008ea4:	aaaaaaab 	.word	0xaaaaaaab
 8008ea8:	400204b8 	.word	0x400204b8
 8008eac:	4002040f 	.word	0x4002040f
 8008eb0:	10008200 	.word	0x10008200
 8008eb4:	40020880 	.word	0x40020880

08008eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d04a      	beq.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d847      	bhi.n	8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a25      	ldr	r2, [pc, #148]	; (8008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d022      	beq.n	8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a24      	ldr	r2, [pc, #144]	; (8008f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d01d      	beq.n	8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a22      	ldr	r2, [pc, #136]	; (8008f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d018      	beq.n	8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a21      	ldr	r2, [pc, #132]	; (8008f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d013      	beq.n	8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a1f      	ldr	r2, [pc, #124]	; (8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00e      	beq.n	8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a1e      	ldr	r2, [pc, #120]	; (8008f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d009      	beq.n	8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a1c      	ldr	r2, [pc, #112]	; (8008f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d004      	beq.n	8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a1b      	ldr	r2, [pc, #108]	; (8008f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d101      	bne.n	8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a15      	ldr	r2, [pc, #84]	; (8008f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f40:	671a      	str	r2, [r3, #112]	; 0x70
 8008f42:	e009      	b.n	8008f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	409a      	lsls	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	58025408 	.word	0x58025408
 8008f74:	5802541c 	.word	0x5802541c
 8008f78:	58025430 	.word	0x58025430
 8008f7c:	58025444 	.word	0x58025444
 8008f80:	58025458 	.word	0x58025458
 8008f84:	5802546c 	.word	0x5802546c
 8008f88:	58025480 	.word	0x58025480
 8008f8c:	58025494 	.word	0x58025494
 8008f90:	1600963f 	.word	0x1600963f
 8008f94:	58025940 	.word	0x58025940
 8008f98:	1000823f 	.word	0x1000823f
 8008f9c:	40020940 	.word	0x40020940

08008fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b089      	sub	sp, #36	; 0x24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008fae:	4b89      	ldr	r3, [pc, #548]	; (80091d4 <HAL_GPIO_Init+0x234>)
 8008fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fb2:	e194      	b.n	80092de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	2101      	movs	r1, #1
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 8186 	beq.w	80092d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d005      	beq.n	8008fe4 <HAL_GPIO_Init+0x44>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d130      	bne.n	8009046 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	2203      	movs	r2, #3
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	43db      	mvns	r3, r3
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	fa02 f303 	lsl.w	r3, r2, r3
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	4313      	orrs	r3, r2
 800900c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800901a:	2201      	movs	r2, #1
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	fa02 f303 	lsl.w	r3, r2, r3
 8009022:	43db      	mvns	r3, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4013      	ands	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	091b      	lsrs	r3, r3, #4
 8009030:	f003 0201 	and.w	r2, r3, #1
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	4313      	orrs	r3, r2
 800903e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	2b03      	cmp	r3, #3
 8009050:	d017      	beq.n	8009082 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	2203      	movs	r2, #3
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	43db      	mvns	r3, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4013      	ands	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	4313      	orrs	r3, r2
 800907a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	2b02      	cmp	r3, #2
 800908c:	d123      	bne.n	80090d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	08da      	lsrs	r2, r3, #3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3208      	adds	r2, #8
 8009096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	220f      	movs	r2, #15
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	43db      	mvns	r3, r3
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	4013      	ands	r3, r2
 80090b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	691a      	ldr	r2, [r3, #16]
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	fa02 f303 	lsl.w	r3, r2, r3
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	08da      	lsrs	r2, r3, #3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3208      	adds	r2, #8
 80090d0:	69b9      	ldr	r1, [r7, #24]
 80090d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	2203      	movs	r2, #3
 80090e2:	fa02 f303 	lsl.w	r3, r2, r3
 80090e6:	43db      	mvns	r3, r3
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	4013      	ands	r3, r2
 80090ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f003 0203 	and.w	r2, r3, #3
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	4313      	orrs	r3, r2
 8009102:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80e0 	beq.w	80092d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009118:	4b2f      	ldr	r3, [pc, #188]	; (80091d8 <HAL_GPIO_Init+0x238>)
 800911a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800911e:	4a2e      	ldr	r2, [pc, #184]	; (80091d8 <HAL_GPIO_Init+0x238>)
 8009120:	f043 0302 	orr.w	r3, r3, #2
 8009124:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009128:	4b2b      	ldr	r3, [pc, #172]	; (80091d8 <HAL_GPIO_Init+0x238>)
 800912a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009136:	4a29      	ldr	r2, [pc, #164]	; (80091dc <HAL_GPIO_Init+0x23c>)
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	089b      	lsrs	r3, r3, #2
 800913c:	3302      	adds	r3, #2
 800913e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	220f      	movs	r2, #15
 800914e:	fa02 f303 	lsl.w	r3, r2, r3
 8009152:	43db      	mvns	r3, r3
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	4013      	ands	r3, r2
 8009158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a20      	ldr	r2, [pc, #128]	; (80091e0 <HAL_GPIO_Init+0x240>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d052      	beq.n	8009208 <HAL_GPIO_Init+0x268>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1f      	ldr	r2, [pc, #124]	; (80091e4 <HAL_GPIO_Init+0x244>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d031      	beq.n	80091ce <HAL_GPIO_Init+0x22e>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a1e      	ldr	r2, [pc, #120]	; (80091e8 <HAL_GPIO_Init+0x248>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d02b      	beq.n	80091ca <HAL_GPIO_Init+0x22a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1d      	ldr	r2, [pc, #116]	; (80091ec <HAL_GPIO_Init+0x24c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d025      	beq.n	80091c6 <HAL_GPIO_Init+0x226>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a1c      	ldr	r2, [pc, #112]	; (80091f0 <HAL_GPIO_Init+0x250>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d01f      	beq.n	80091c2 <HAL_GPIO_Init+0x222>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a1b      	ldr	r2, [pc, #108]	; (80091f4 <HAL_GPIO_Init+0x254>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d019      	beq.n	80091be <HAL_GPIO_Init+0x21e>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a1a      	ldr	r2, [pc, #104]	; (80091f8 <HAL_GPIO_Init+0x258>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <HAL_GPIO_Init+0x21a>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a19      	ldr	r2, [pc, #100]	; (80091fc <HAL_GPIO_Init+0x25c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00d      	beq.n	80091b6 <HAL_GPIO_Init+0x216>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a18      	ldr	r2, [pc, #96]	; (8009200 <HAL_GPIO_Init+0x260>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d007      	beq.n	80091b2 <HAL_GPIO_Init+0x212>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a17      	ldr	r2, [pc, #92]	; (8009204 <HAL_GPIO_Init+0x264>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d101      	bne.n	80091ae <HAL_GPIO_Init+0x20e>
 80091aa:	2309      	movs	r3, #9
 80091ac:	e02d      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091ae:	230a      	movs	r3, #10
 80091b0:	e02b      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091b2:	2308      	movs	r3, #8
 80091b4:	e029      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091b6:	2307      	movs	r3, #7
 80091b8:	e027      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091ba:	2306      	movs	r3, #6
 80091bc:	e025      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091be:	2305      	movs	r3, #5
 80091c0:	e023      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091c2:	2304      	movs	r3, #4
 80091c4:	e021      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091c6:	2303      	movs	r3, #3
 80091c8:	e01f      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e01d      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e01b      	b.n	800920a <HAL_GPIO_Init+0x26a>
 80091d2:	bf00      	nop
 80091d4:	58000080 	.word	0x58000080
 80091d8:	58024400 	.word	0x58024400
 80091dc:	58000400 	.word	0x58000400
 80091e0:	58020000 	.word	0x58020000
 80091e4:	58020400 	.word	0x58020400
 80091e8:	58020800 	.word	0x58020800
 80091ec:	58020c00 	.word	0x58020c00
 80091f0:	58021000 	.word	0x58021000
 80091f4:	58021400 	.word	0x58021400
 80091f8:	58021800 	.word	0x58021800
 80091fc:	58021c00 	.word	0x58021c00
 8009200:	58022000 	.word	0x58022000
 8009204:	58022400 	.word	0x58022400
 8009208:	2300      	movs	r3, #0
 800920a:	69fa      	ldr	r2, [r7, #28]
 800920c:	f002 0203 	and.w	r2, r2, #3
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	4093      	lsls	r3, r2
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	4313      	orrs	r3, r2
 8009218:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800921a:	4938      	ldr	r1, [pc, #224]	; (80092fc <HAL_GPIO_Init+0x35c>)
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	089b      	lsrs	r3, r3, #2
 8009220:	3302      	adds	r3, #2
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	43db      	mvns	r3, r3
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	4013      	ands	r3, r2
 8009238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800924e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	43db      	mvns	r3, r3
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	4013      	ands	r3, r2
 8009266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	4313      	orrs	r3, r2
 800927a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800927c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	43db      	mvns	r3, r3
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	4013      	ands	r3, r2
 8009292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80092a0:	69ba      	ldr	r2, [r7, #24]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	43db      	mvns	r3, r3
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	4013      	ands	r3, r2
 80092bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	3301      	adds	r3, #1
 80092dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f47f ae63 	bne.w	8008fb4 <HAL_GPIO_Init+0x14>
  }
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	3724      	adds	r7, #36	; 0x24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	58000400 	.word	0x58000400

08009300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	887b      	ldrh	r3, [r7, #2]
 8009312:	4013      	ands	r3, r2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009318:	2301      	movs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]
 800931c:	e001      	b.n	8009322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	807b      	strh	r3, [r7, #2]
 800933c:	4613      	mov	r3, r2
 800933e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009340:	787b      	ldrb	r3, [r7, #1]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009346:	887a      	ldrh	r2, [r7, #2]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800934c:	e003      	b.n	8009356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800934e:	887b      	ldrh	r3, [r7, #2]
 8009350:	041a      	lsls	r2, r3, #16
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	619a      	str	r2, [r3, #24]
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
	...

08009364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e08b      	b.n	800948e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7fa f8f0 	bl	8003570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2224      	movs	r2, #36	; 0x24
 8009394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0201 	bic.w	r2, r2, #1
 80093a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d107      	bne.n	80093de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093da:	609a      	str	r2, [r3, #8]
 80093dc:	e006      	b.n	80093ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80093ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d108      	bne.n	8009406 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009402:	605a      	str	r2, [r3, #4]
 8009404:	e007      	b.n	8009416 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6859      	ldr	r1, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <HAL_I2C_Init+0x134>)
 8009422:	430b      	orrs	r3, r1
 8009424:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009434:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	69d9      	ldr	r1, [r3, #28]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1a      	ldr	r2, [r3, #32]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	02008000 	.word	0x02008000

0800949c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	607a      	str	r2, [r7, #4]
 80094a6:	461a      	mov	r2, r3
 80094a8:	460b      	mov	r3, r1
 80094aa:	817b      	strh	r3, [r7, #10]
 80094ac:	4613      	mov	r3, r2
 80094ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b20      	cmp	r3, #32
 80094ba:	f040 80fd 	bne.w	80096b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d101      	bne.n	80094cc <HAL_I2C_Master_Transmit+0x30>
 80094c8:	2302      	movs	r3, #2
 80094ca:	e0f6      	b.n	80096ba <HAL_I2C_Master_Transmit+0x21e>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094d4:	f7fa fdf4 	bl	80040c0 <HAL_GetTick>
 80094d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	2319      	movs	r3, #25
 80094e0:	2201      	movs	r2, #1
 80094e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fa0a 	bl	8009900 <I2C_WaitOnFlagUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e0e1      	b.n	80096ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2221      	movs	r2, #33	; 0x21
 80094fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2210      	movs	r2, #16
 8009502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	893a      	ldrh	r2, [r7, #8]
 8009516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009522:	b29b      	uxth	r3, r3
 8009524:	2bff      	cmp	r3, #255	; 0xff
 8009526:	d906      	bls.n	8009536 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	22ff      	movs	r2, #255	; 0xff
 800952c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800952e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e007      	b.n	8009546 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009544:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954a:	2b00      	cmp	r3, #0
 800954c:	d024      	beq.n	8009598 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009568:	b29b      	uxth	r3, r3
 800956a:	3b01      	subs	r3, #1
 800956c:	b29a      	uxth	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009576:	3b01      	subs	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009582:	b2db      	uxtb	r3, r3
 8009584:	3301      	adds	r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	8979      	ldrh	r1, [r7, #10]
 800958a:	4b4e      	ldr	r3, [pc, #312]	; (80096c4 <HAL_I2C_Master_Transmit+0x228>)
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f000 fc05 	bl	8009da0 <I2C_TransferConfig>
 8009596:	e066      	b.n	8009666 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959c:	b2da      	uxtb	r2, r3
 800959e:	8979      	ldrh	r1, [r7, #10]
 80095a0:	4b48      	ldr	r3, [pc, #288]	; (80096c4 <HAL_I2C_Master_Transmit+0x228>)
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 fbfa 	bl	8009da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80095ac:	e05b      	b.n	8009666 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	6a39      	ldr	r1, [r7, #32]
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 f9fd 	bl	80099b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e07b      	b.n	80096ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	781a      	ldrb	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095dc:	b29b      	uxth	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d034      	beq.n	8009666 <HAL_I2C_Master_Transmit+0x1ca>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009600:	2b00      	cmp	r3, #0
 8009602:	d130      	bne.n	8009666 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2200      	movs	r2, #0
 800960c:	2180      	movs	r1, #128	; 0x80
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f976 	bl	8009900 <I2C_WaitOnFlagUntilTimeout>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e04d      	b.n	80096ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009622:	b29b      	uxth	r3, r3
 8009624:	2bff      	cmp	r3, #255	; 0xff
 8009626:	d90e      	bls.n	8009646 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	22ff      	movs	r2, #255	; 0xff
 800962c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009632:	b2da      	uxtb	r2, r3
 8009634:	8979      	ldrh	r1, [r7, #10]
 8009636:	2300      	movs	r3, #0
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 fbae 	bl	8009da0 <I2C_TransferConfig>
 8009644:	e00f      	b.n	8009666 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964a:	b29a      	uxth	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009654:	b2da      	uxtb	r2, r3
 8009656:	8979      	ldrh	r1, [r7, #10]
 8009658:	2300      	movs	r3, #0
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 fb9d 	bl	8009da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800966a:	b29b      	uxth	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d19e      	bne.n	80095ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	6a39      	ldr	r1, [r7, #32]
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 f9e3 	bl	8009a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e01a      	b.n	80096ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2220      	movs	r2, #32
 800968a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6859      	ldr	r1, [r3, #4]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <HAL_I2C_Master_Transmit+0x22c>)
 8009698:	400b      	ands	r3, r1
 800969a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2220      	movs	r2, #32
 80096a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	80002000 	.word	0x80002000
 80096c8:	fe00e800 	.word	0xfe00e800

080096cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af02      	add	r7, sp, #8
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	607a      	str	r2, [r7, #4]
 80096d6:	461a      	mov	r2, r3
 80096d8:	460b      	mov	r3, r1
 80096da:	817b      	strh	r3, [r7, #10]
 80096dc:	4613      	mov	r3, r2
 80096de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	f040 80db 	bne.w	80098a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d101      	bne.n	80096fc <HAL_I2C_Master_Receive+0x30>
 80096f8:	2302      	movs	r3, #2
 80096fa:	e0d4      	b.n	80098a6 <HAL_I2C_Master_Receive+0x1da>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009704:	f7fa fcdc 	bl	80040c0 <HAL_GetTick>
 8009708:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	2319      	movs	r3, #25
 8009710:	2201      	movs	r2, #1
 8009712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 f8f2 	bl	8009900 <I2C_WaitOnFlagUntilTimeout>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e0bf      	b.n	80098a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2222      	movs	r2, #34	; 0x22
 800972a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2210      	movs	r2, #16
 8009732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	893a      	ldrh	r2, [r7, #8]
 8009746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009752:	b29b      	uxth	r3, r3
 8009754:	2bff      	cmp	r3, #255	; 0xff
 8009756:	d90e      	bls.n	8009776 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	22ff      	movs	r2, #255	; 0xff
 800975c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009762:	b2da      	uxtb	r2, r3
 8009764:	8979      	ldrh	r1, [r7, #10]
 8009766:	4b52      	ldr	r3, [pc, #328]	; (80098b0 <HAL_I2C_Master_Receive+0x1e4>)
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fb16 	bl	8009da0 <I2C_TransferConfig>
 8009774:	e06d      	b.n	8009852 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977a:	b29a      	uxth	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009784:	b2da      	uxtb	r2, r3
 8009786:	8979      	ldrh	r1, [r7, #10]
 8009788:	4b49      	ldr	r3, [pc, #292]	; (80098b0 <HAL_I2C_Master_Receive+0x1e4>)
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 fb05 	bl	8009da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009796:	e05c      	b.n	8009852 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	6a39      	ldr	r1, [r7, #32]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f993 	bl	8009ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e07c      	b.n	80098a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	b2d2      	uxtb	r2, r2
 80097b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	b29a      	uxth	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d034      	beq.n	8009852 <HAL_I2C_Master_Receive+0x186>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d130      	bne.n	8009852 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	2200      	movs	r2, #0
 80097f8:	2180      	movs	r1, #128	; 0x80
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 f880 	bl	8009900 <I2C_WaitOnFlagUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e04d      	b.n	80098a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980e:	b29b      	uxth	r3, r3
 8009810:	2bff      	cmp	r3, #255	; 0xff
 8009812:	d90e      	bls.n	8009832 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	22ff      	movs	r2, #255	; 0xff
 8009818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800981e:	b2da      	uxtb	r2, r3
 8009820:	8979      	ldrh	r1, [r7, #10]
 8009822:	2300      	movs	r3, #0
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fab8 	bl	8009da0 <I2C_TransferConfig>
 8009830:	e00f      	b.n	8009852 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009836:	b29a      	uxth	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009840:	b2da      	uxtb	r2, r3
 8009842:	8979      	ldrh	r1, [r7, #10]
 8009844:	2300      	movs	r3, #0
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 faa7 	bl	8009da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d19d      	bne.n	8009798 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	6a39      	ldr	r1, [r7, #32]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f8ed 	bl	8009a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e01a      	b.n	80098a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2220      	movs	r2, #32
 8009876:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6859      	ldr	r1, [r3, #4]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <HAL_I2C_Master_Receive+0x1e8>)
 8009884:	400b      	ands	r3, r1
 8009886:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2220      	movs	r2, #32
 800988c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	e000      	b.n	80098a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80098a4:	2302      	movs	r3, #2
  }
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	80002400 	.word	0x80002400
 80098b4:	fe00e800 	.word	0xfe00e800

080098b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d103      	bne.n	80098d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2200      	movs	r2, #0
 80098d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d007      	beq.n	80098f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	619a      	str	r2, [r3, #24]
  }
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	4613      	mov	r3, r2
 800990e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009910:	e03b      	b.n	800998a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 f962 	bl	8009be0 <I2C_IsErrorOccurred>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e041      	b.n	80099aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992c:	d02d      	beq.n	800998a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800992e:	f7fa fbc7 	bl	80040c0 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d302      	bcc.n	8009944 <I2C_WaitOnFlagUntilTimeout+0x44>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d122      	bne.n	800998a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699a      	ldr	r2, [r3, #24]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	4013      	ands	r3, r2
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	429a      	cmp	r2, r3
 8009952:	bf0c      	ite	eq
 8009954:	2301      	moveq	r3, #1
 8009956:	2300      	movne	r3, #0
 8009958:	b2db      	uxtb	r3, r3
 800995a:	461a      	mov	r2, r3
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	429a      	cmp	r2, r3
 8009960:	d113      	bne.n	800998a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009966:	f043 0220 	orr.w	r2, r3, #32
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2220      	movs	r2, #32
 8009972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e00f      	b.n	80099aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4013      	ands	r3, r2
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	429a      	cmp	r2, r3
 8009998:	bf0c      	ite	eq
 800999a:	2301      	moveq	r3, #1
 800999c:	2300      	movne	r3, #0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	461a      	mov	r2, r3
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d0b4      	beq.n	8009912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099be:	e033      	b.n	8009a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 f90b 	bl	8009be0 <I2C_IsErrorOccurred>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e031      	b.n	8009a38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099da:	d025      	beq.n	8009a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099dc:	f7fa fb70 	bl	80040c0 <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d302      	bcc.n	80099f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d11a      	bne.n	8009a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d013      	beq.n	8009a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a04:	f043 0220 	orr.w	r2, r3, #32
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e007      	b.n	8009a38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d1c4      	bne.n	80099c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a4c:	e02f      	b.n	8009aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f8c4 	bl	8009be0 <I2C_IsErrorOccurred>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e02d      	b.n	8009abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a62:	f7fa fb2d 	bl	80040c0 <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d302      	bcc.n	8009a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11a      	bne.n	8009aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d013      	beq.n	8009aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8a:	f043 0220 	orr.w	r2, r3, #32
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e007      	b.n	8009abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d1c8      	bne.n	8009a4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009ad8:	e071      	b.n	8009bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	68b9      	ldr	r1, [r7, #8]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 f87e 	bl	8009be0 <I2C_IsErrorOccurred>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d13b      	bne.n	8009b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d138      	bne.n	8009b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d105      	bne.n	8009b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	f003 0310 	and.w	r3, r3, #16
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d121      	bne.n	8009b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2210      	movs	r2, #16
 8009b30:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2204      	movs	r2, #4
 8009b36:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6859      	ldr	r1, [r3, #4]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009b4c:	400b      	ands	r3, r1
 8009b4e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	75fb      	strb	r3, [r7, #23]
 8009b6c:	e002      	b.n	8009b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009b74:	f7fa faa4 	bl	80040c0 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d302      	bcc.n	8009b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d119      	bne.n	8009bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d116      	bne.n	8009bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d00f      	beq.n	8009bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba2:	f043 0220 	orr.w	r2, r3, #32
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d002      	beq.n	8009bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d083      	beq.n	8009ada <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	fe00e800 	.word	0xfe00e800

08009be0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	f003 0310 	and.w	r3, r3, #16
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d068      	beq.n	8009cde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2210      	movs	r2, #16
 8009c12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c14:	e049      	b.n	8009caa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c1c:	d045      	beq.n	8009caa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c1e:	f7fa fa4f 	bl	80040c0 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d302      	bcc.n	8009c34 <I2C_IsErrorOccurred+0x54>
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d13a      	bne.n	8009caa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c56:	d121      	bne.n	8009c9c <I2C_IsErrorOccurred+0xbc>
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5e:	d01d      	beq.n	8009c9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c60:	7cfb      	ldrb	r3, [r7, #19]
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	d01a      	beq.n	8009c9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c76:	f7fa fa23 	bl	80040c0 <HAL_GetTick>
 8009c7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c7c:	e00e      	b.n	8009c9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c7e:	f7fa fa1f 	bl	80040c0 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	2b19      	cmp	r3, #25
 8009c8a:	d907      	bls.n	8009c9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	f043 0320 	orr.w	r3, r3, #32
 8009c92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c9a:	e006      	b.n	8009caa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	d1e9      	bne.n	8009c7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b20      	cmp	r3, #32
 8009cb6:	d003      	beq.n	8009cc0 <I2C_IsErrorOccurred+0xe0>
 8009cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0aa      	beq.n	8009c16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d103      	bne.n	8009cd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	f043 0304 	orr.w	r3, r3, #4
 8009cd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00b      	beq.n	8009d08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	f043 0308 	orr.w	r3, r3, #8
 8009d18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00b      	beq.n	8009d4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	f043 0302 	orr.w	r3, r3, #2
 8009d3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d01c      	beq.n	8009d8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff fdaf 	bl	80098b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6859      	ldr	r1, [r3, #4]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <I2C_IsErrorOccurred+0x1bc>)
 8009d66:	400b      	ands	r3, r1
 8009d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	431a      	orrs	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3728      	adds	r7, #40	; 0x28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	fe00e800 	.word	0xfe00e800

08009da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	607b      	str	r3, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	817b      	strh	r3, [r7, #10]
 8009dae:	4613      	mov	r3, r2
 8009db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009db2:	897b      	ldrh	r3, [r7, #10]
 8009db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009db8:	7a7b      	ldrb	r3, [r7, #9]
 8009dba:	041b      	lsls	r3, r3, #16
 8009dbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	0d5b      	lsrs	r3, r3, #21
 8009dda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009dde:	4b08      	ldr	r3, [pc, #32]	; (8009e00 <I2C_TransferConfig+0x60>)
 8009de0:	430b      	orrs	r3, r1
 8009de2:	43db      	mvns	r3, r3
 8009de4:	ea02 0103 	and.w	r1, r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	430a      	orrs	r2, r1
 8009df0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009df2:	bf00      	nop
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	03ff63ff 	.word	0x03ff63ff

08009e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	d138      	bne.n	8009e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d101      	bne.n	8009e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e032      	b.n	8009e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2224      	movs	r2, #36	; 0x24
 8009e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0201 	bic.w	r2, r2, #1
 8009e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6819      	ldr	r1, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0201 	orr.w	r2, r2, #1
 8009e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	e000      	b.n	8009e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e8c:	2302      	movs	r3, #2
  }
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b20      	cmp	r3, #32
 8009eae:	d139      	bne.n	8009f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d101      	bne.n	8009ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e033      	b.n	8009f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2224      	movs	r2, #36	; 0x24
 8009eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0201 	bic.w	r2, r2, #1
 8009edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	021b      	lsls	r3, r3, #8
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f042 0201 	orr.w	r2, r2, #1
 8009f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	e000      	b.n	8009f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f24:	2302      	movs	r3, #2
  }
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
	...

08009f34 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f3c:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f42:	4a0c      	ldr	r2, [pc, #48]	; (8009f74 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f44:	f043 0302 	orr.w	r3, r3, #2
 8009f48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009f4c:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	4906      	ldr	r1, [pc, #24]	; (8009f78 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	604b      	str	r3, [r1, #4]
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	58024400 	.word	0x58024400
 8009f78:	58000400 	.word	0x58000400

08009f7c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009f88:	4b18      	ldr	r3, [pc, #96]	; (8009fec <HAL_PWR_EnterSTOPMode+0x70>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f023 0201 	bic.w	r2, r3, #1
 8009f90:	4916      	ldr	r1, [pc, #88]	; (8009fec <HAL_PWR_EnterSTOPMode+0x70>)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009f98:	4b14      	ldr	r3, [pc, #80]	; (8009fec <HAL_PWR_EnterSTOPMode+0x70>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	4a13      	ldr	r2, [pc, #76]	; (8009fec <HAL_PWR_EnterSTOPMode+0x70>)
 8009f9e:	f023 0305 	bic.w	r3, r3, #5
 8009fa2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009fa4:	4b11      	ldr	r3, [pc, #68]	; (8009fec <HAL_PWR_EnterSTOPMode+0x70>)
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	4a10      	ldr	r2, [pc, #64]	; (8009fec <HAL_PWR_EnterSTOPMode+0x70>)
 8009faa:	f023 0302 	bic.w	r3, r3, #2
 8009fae:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fb0:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	4a0e      	ldr	r2, [pc, #56]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fb6:	f043 0304 	orr.w	r3, r3, #4
 8009fba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fbc:	f3bf 8f4f 	dsb	sy
}
 8009fc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fc2:	f3bf 8f6f 	isb	sy
}
 8009fc6:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d101      	bne.n	8009fd2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009fce:	bf30      	wfi
 8009fd0:	e000      	b.n	8009fd4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009fd2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fd4:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	4a05      	ldr	r2, [pc, #20]	; (8009ff0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009fda:	f023 0304 	bic.w	r3, r3, #4
 8009fde:	6113      	str	r3, [r2, #16]
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	58024800 	.word	0x58024800
 8009ff0:	e000ed00 	.word	0xe000ed00

08009ff4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009ffc:	4b19      	ldr	r3, [pc, #100]	; (800a064 <HAL_PWREx_ConfigSupply+0x70>)
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b04      	cmp	r3, #4
 800a006:	d00a      	beq.n	800a01e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a008:	4b16      	ldr	r3, [pc, #88]	; (800a064 <HAL_PWREx_ConfigSupply+0x70>)
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	f003 0307 	and.w	r3, r3, #7
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d001      	beq.n	800a01a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e01f      	b.n	800a05a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e01d      	b.n	800a05a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a01e:	4b11      	ldr	r3, [pc, #68]	; (800a064 <HAL_PWREx_ConfigSupply+0x70>)
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f023 0207 	bic.w	r2, r3, #7
 800a026:	490f      	ldr	r1, [pc, #60]	; (800a064 <HAL_PWREx_ConfigSupply+0x70>)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a02e:	f7fa f847 	bl	80040c0 <HAL_GetTick>
 800a032:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a034:	e009      	b.n	800a04a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a036:	f7fa f843 	bl	80040c0 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a044:	d901      	bls.n	800a04a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e007      	b.n	800a05a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a04a:	4b06      	ldr	r3, [pc, #24]	; (800a064 <HAL_PWREx_ConfigSupply+0x70>)
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a056:	d1ee      	bne.n	800a036 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	58024800 	.word	0x58024800

0800a068 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08c      	sub	sp, #48	; 0x30
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d102      	bne.n	800a07c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	f000 bc48 	b.w	800a90c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8088 	beq.w	800a19a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a08a:	4b99      	ldr	r3, [pc, #612]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a092:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a094:	4b96      	ldr	r3, [pc, #600]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a098:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	2b10      	cmp	r3, #16
 800a09e:	d007      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x48>
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	2b18      	cmp	r3, #24
 800a0a4:	d111      	bne.n	800a0ca <HAL_RCC_OscConfig+0x62>
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d10c      	bne.n	800a0ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0b0:	4b8f      	ldr	r3, [pc, #572]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d06d      	beq.n	800a198 <HAL_RCC_OscConfig+0x130>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d169      	bne.n	800a198 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f000 bc21 	b.w	800a90c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0d2:	d106      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x7a>
 800a0d4:	4b86      	ldr	r3, [pc, #536]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a85      	ldr	r2, [pc, #532]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a0da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	e02e      	b.n	800a140 <HAL_RCC_OscConfig+0xd8>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10c      	bne.n	800a104 <HAL_RCC_OscConfig+0x9c>
 800a0ea:	4b81      	ldr	r3, [pc, #516]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a80      	ldr	r2, [pc, #512]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a0f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	4b7e      	ldr	r3, [pc, #504]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a7d      	ldr	r2, [pc, #500]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a0fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a100:	6013      	str	r3, [r2, #0]
 800a102:	e01d      	b.n	800a140 <HAL_RCC_OscConfig+0xd8>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a10c:	d10c      	bne.n	800a128 <HAL_RCC_OscConfig+0xc0>
 800a10e:	4b78      	ldr	r3, [pc, #480]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a77      	ldr	r2, [pc, #476]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	4b75      	ldr	r3, [pc, #468]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a74      	ldr	r2, [pc, #464]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	e00b      	b.n	800a140 <HAL_RCC_OscConfig+0xd8>
 800a128:	4b71      	ldr	r3, [pc, #452]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a70      	ldr	r2, [pc, #448]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a12e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	4b6e      	ldr	r3, [pc, #440]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a6d      	ldr	r2, [pc, #436]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a13a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a13e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d013      	beq.n	800a170 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a148:	f7f9 ffba 	bl	80040c0 <HAL_GetTick>
 800a14c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a14e:	e008      	b.n	800a162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a150:	f7f9 ffb6 	bl	80040c0 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	2b64      	cmp	r3, #100	; 0x64
 800a15c:	d901      	bls.n	800a162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e3d4      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a162:	4b63      	ldr	r3, [pc, #396]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0f0      	beq.n	800a150 <HAL_RCC_OscConfig+0xe8>
 800a16e:	e014      	b.n	800a19a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a170:	f7f9 ffa6 	bl	80040c0 <HAL_GetTick>
 800a174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a178:	f7f9 ffa2 	bl	80040c0 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b64      	cmp	r3, #100	; 0x64
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e3c0      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a18a:	4b59      	ldr	r3, [pc, #356]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1f0      	bne.n	800a178 <HAL_RCC_OscConfig+0x110>
 800a196:	e000      	b.n	800a19a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 80ca 	beq.w	800a33c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1a8:	4b51      	ldr	r3, [pc, #324]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1b2:	4b4f      	ldr	r3, [pc, #316]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <HAL_RCC_OscConfig+0x166>
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	2b18      	cmp	r3, #24
 800a1c2:	d156      	bne.n	800a272 <HAL_RCC_OscConfig+0x20a>
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	f003 0303 	and.w	r3, r3, #3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d151      	bne.n	800a272 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1ce:	4b48      	ldr	r3, [pc, #288]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0304 	and.w	r3, r3, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d005      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x17e>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e392      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1e6:	4b42      	ldr	r3, [pc, #264]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f023 0219 	bic.w	r2, r3, #25
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	493f      	ldr	r1, [pc, #252]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f8:	f7f9 ff62 	bl	80040c0 <HAL_GetTick>
 800a1fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1fe:	e008      	b.n	800a212 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a200:	f7f9 ff5e 	bl	80040c0 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d901      	bls.n	800a212 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e37c      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a212:	4b37      	ldr	r3, [pc, #220]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0f0      	beq.n	800a200 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a21e:	f7f9 ff5b 	bl	80040d8 <HAL_GetREVID>
 800a222:	4603      	mov	r3, r0
 800a224:	f241 0203 	movw	r2, #4099	; 0x1003
 800a228:	4293      	cmp	r3, r2
 800a22a:	d817      	bhi.n	800a25c <HAL_RCC_OscConfig+0x1f4>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	2b40      	cmp	r3, #64	; 0x40
 800a232:	d108      	bne.n	800a246 <HAL_RCC_OscConfig+0x1de>
 800a234:	4b2e      	ldr	r3, [pc, #184]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a23c:	4a2c      	ldr	r2, [pc, #176]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a23e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a242:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a244:	e07a      	b.n	800a33c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a246:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	031b      	lsls	r3, r3, #12
 800a254:	4926      	ldr	r1, [pc, #152]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a256:	4313      	orrs	r3, r2
 800a258:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a25a:	e06f      	b.n	800a33c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a25c:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	061b      	lsls	r3, r3, #24
 800a26a:	4921      	ldr	r1, [pc, #132]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a270:	e064      	b.n	800a33c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d047      	beq.n	800a30a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a27a:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f023 0219 	bic.w	r2, r3, #25
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	491a      	ldr	r1, [pc, #104]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28c:	f7f9 ff18 	bl	80040c0 <HAL_GetTick>
 800a290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a294:	f7f9 ff14 	bl	80040c0 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e332      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2a6:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0f0      	beq.n	800a294 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2b2:	f7f9 ff11 	bl	80040d8 <HAL_GetREVID>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d819      	bhi.n	800a2f4 <HAL_RCC_OscConfig+0x28c>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	2b40      	cmp	r3, #64	; 0x40
 800a2c6:	d108      	bne.n	800a2da <HAL_RCC_OscConfig+0x272>
 800a2c8:	4b09      	ldr	r3, [pc, #36]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a2d0:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a2d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2d6:	6053      	str	r3, [r2, #4]
 800a2d8:	e030      	b.n	800a33c <HAL_RCC_OscConfig+0x2d4>
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	031b      	lsls	r3, r3, #12
 800a2e8:	4901      	ldr	r1, [pc, #4]	; (800a2f0 <HAL_RCC_OscConfig+0x288>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	604b      	str	r3, [r1, #4]
 800a2ee:	e025      	b.n	800a33c <HAL_RCC_OscConfig+0x2d4>
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	4b9a      	ldr	r3, [pc, #616]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	061b      	lsls	r3, r3, #24
 800a302:	4997      	ldr	r1, [pc, #604]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a304:	4313      	orrs	r3, r2
 800a306:	604b      	str	r3, [r1, #4]
 800a308:	e018      	b.n	800a33c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a30a:	4b95      	ldr	r3, [pc, #596]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a94      	ldr	r2, [pc, #592]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a316:	f7f9 fed3 	bl	80040c0 <HAL_GetTick>
 800a31a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a31c:	e008      	b.n	800a330 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a31e:	f7f9 fecf 	bl	80040c0 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d901      	bls.n	800a330 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e2ed      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a330:	4b8b      	ldr	r3, [pc, #556]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1f0      	bne.n	800a31e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 80a9 	beq.w	800a49c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a34a:	4b85      	ldr	r3, [pc, #532]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a352:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a354:	4b82      	ldr	r3, [pc, #520]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a358:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d007      	beq.n	800a370 <HAL_RCC_OscConfig+0x308>
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	2b18      	cmp	r3, #24
 800a364:	d13a      	bne.n	800a3dc <HAL_RCC_OscConfig+0x374>
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d135      	bne.n	800a3dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a370:	4b7b      	ldr	r3, [pc, #492]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d005      	beq.n	800a388 <HAL_RCC_OscConfig+0x320>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	2b80      	cmp	r3, #128	; 0x80
 800a382:	d001      	beq.n	800a388 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e2c1      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a388:	f7f9 fea6 	bl	80040d8 <HAL_GetREVID>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a392:	4293      	cmp	r3, r2
 800a394:	d817      	bhi.n	800a3c6 <HAL_RCC_OscConfig+0x35e>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	2b20      	cmp	r3, #32
 800a39c:	d108      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x348>
 800a39e:	4b70      	ldr	r3, [pc, #448]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3a6:	4a6e      	ldr	r2, [pc, #440]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3ae:	e075      	b.n	800a49c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3b0:	4b6b      	ldr	r3, [pc, #428]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	069b      	lsls	r3, r3, #26
 800a3be:	4968      	ldr	r1, [pc, #416]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3c4:	e06a      	b.n	800a49c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3c6:	4b66      	ldr	r3, [pc, #408]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	061b      	lsls	r3, r3, #24
 800a3d4:	4962      	ldr	r1, [pc, #392]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3da:	e05f      	b.n	800a49c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d042      	beq.n	800a46a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a3e4:	4b5e      	ldr	r3, [pc, #376]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a5d      	ldr	r2, [pc, #372]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f0:	f7f9 fe66 	bl	80040c0 <HAL_GetTick>
 800a3f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3f6:	e008      	b.n	800a40a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3f8:	f7f9 fe62 	bl	80040c0 <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	2b02      	cmp	r3, #2
 800a404:	d901      	bls.n	800a40a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e280      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a40a:	4b55      	ldr	r3, [pc, #340]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0f0      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a416:	f7f9 fe5f 	bl	80040d8 <HAL_GetREVID>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a420:	4293      	cmp	r3, r2
 800a422:	d817      	bhi.n	800a454 <HAL_RCC_OscConfig+0x3ec>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	2b20      	cmp	r3, #32
 800a42a:	d108      	bne.n	800a43e <HAL_RCC_OscConfig+0x3d6>
 800a42c:	4b4c      	ldr	r3, [pc, #304]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a434:	4a4a      	ldr	r2, [pc, #296]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a436:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a43a:	6053      	str	r3, [r2, #4]
 800a43c:	e02e      	b.n	800a49c <HAL_RCC_OscConfig+0x434>
 800a43e:	4b48      	ldr	r3, [pc, #288]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	069b      	lsls	r3, r3, #26
 800a44c:	4944      	ldr	r1, [pc, #272]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	604b      	str	r3, [r1, #4]
 800a452:	e023      	b.n	800a49c <HAL_RCC_OscConfig+0x434>
 800a454:	4b42      	ldr	r3, [pc, #264]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	061b      	lsls	r3, r3, #24
 800a462:	493f      	ldr	r1, [pc, #252]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a464:	4313      	orrs	r3, r2
 800a466:	60cb      	str	r3, [r1, #12]
 800a468:	e018      	b.n	800a49c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a46a:	4b3d      	ldr	r3, [pc, #244]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a3c      	ldr	r2, [pc, #240]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a476:	f7f9 fe23 	bl	80040c0 <HAL_GetTick>
 800a47a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a47c:	e008      	b.n	800a490 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a47e:	f7f9 fe1f 	bl	80040c0 <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d901      	bls.n	800a490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e23d      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a490:	4b33      	ldr	r3, [pc, #204]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1f0      	bne.n	800a47e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d036      	beq.n	800a516 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d019      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4b0:	4b2b      	ldr	r3, [pc, #172]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a4b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4b4:	4a2a      	ldr	r2, [pc, #168]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a4b6:	f043 0301 	orr.w	r3, r3, #1
 800a4ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4bc:	f7f9 fe00 	bl	80040c0 <HAL_GetTick>
 800a4c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4c4:	f7f9 fdfc 	bl	80040c0 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e21a      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4d6:	4b22      	ldr	r3, [pc, #136]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a4d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f0      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x45c>
 800a4e2:	e018      	b.n	800a516 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4e4:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4e8:	4a1d      	ldr	r2, [pc, #116]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f0:	f7f9 fde6 	bl	80040c0 <HAL_GetTick>
 800a4f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4f6:	e008      	b.n	800a50a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4f8:	f7f9 fde2 	bl	80040c0 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e200      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a50a:	4b15      	ldr	r3, [pc, #84]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a50c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1f0      	bne.n	800a4f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d039      	beq.n	800a596 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d01c      	beq.n	800a564 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a52a:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a534:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a536:	f7f9 fdc3 	bl	80040c0 <HAL_GetTick>
 800a53a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a53c:	e008      	b.n	800a550 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a53e:	f7f9 fdbf 	bl	80040c0 <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d901      	bls.n	800a550 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e1dd      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a550:	4b03      	ldr	r3, [pc, #12]	; (800a560 <HAL_RCC_OscConfig+0x4f8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0f0      	beq.n	800a53e <HAL_RCC_OscConfig+0x4d6>
 800a55c:	e01b      	b.n	800a596 <HAL_RCC_OscConfig+0x52e>
 800a55e:	bf00      	nop
 800a560:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a564:	4b9b      	ldr	r3, [pc, #620]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a9a      	ldr	r2, [pc, #616]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a56a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a56e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a570:	f7f9 fda6 	bl	80040c0 <HAL_GetTick>
 800a574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a576:	e008      	b.n	800a58a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a578:	f7f9 fda2 	bl	80040c0 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d901      	bls.n	800a58a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e1c0      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a58a:	4b92      	ldr	r3, [pc, #584]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1f0      	bne.n	800a578 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8081 	beq.w	800a6a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a5a4:	4b8c      	ldr	r3, [pc, #560]	; (800a7d8 <HAL_RCC_OscConfig+0x770>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a8b      	ldr	r2, [pc, #556]	; (800a7d8 <HAL_RCC_OscConfig+0x770>)
 800a5aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5b0:	f7f9 fd86 	bl	80040c0 <HAL_GetTick>
 800a5b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5b6:	e008      	b.n	800a5ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5b8:	f7f9 fd82 	bl	80040c0 <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	2b64      	cmp	r3, #100	; 0x64
 800a5c4:	d901      	bls.n	800a5ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e1a0      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5ca:	4b83      	ldr	r3, [pc, #524]	; (800a7d8 <HAL_RCC_OscConfig+0x770>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0f0      	beq.n	800a5b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d106      	bne.n	800a5ec <HAL_RCC_OscConfig+0x584>
 800a5de:	4b7d      	ldr	r3, [pc, #500]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e2:	4a7c      	ldr	r2, [pc, #496]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a5e4:	f043 0301 	orr.w	r3, r3, #1
 800a5e8:	6713      	str	r3, [r2, #112]	; 0x70
 800a5ea:	e02d      	b.n	800a648 <HAL_RCC_OscConfig+0x5e0>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10c      	bne.n	800a60e <HAL_RCC_OscConfig+0x5a6>
 800a5f4:	4b77      	ldr	r3, [pc, #476]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f8:	4a76      	ldr	r2, [pc, #472]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a5fa:	f023 0301 	bic.w	r3, r3, #1
 800a5fe:	6713      	str	r3, [r2, #112]	; 0x70
 800a600:	4b74      	ldr	r3, [pc, #464]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a604:	4a73      	ldr	r2, [pc, #460]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a606:	f023 0304 	bic.w	r3, r3, #4
 800a60a:	6713      	str	r3, [r2, #112]	; 0x70
 800a60c:	e01c      	b.n	800a648 <HAL_RCC_OscConfig+0x5e0>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	2b05      	cmp	r3, #5
 800a614:	d10c      	bne.n	800a630 <HAL_RCC_OscConfig+0x5c8>
 800a616:	4b6f      	ldr	r3, [pc, #444]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61a:	4a6e      	ldr	r2, [pc, #440]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a61c:	f043 0304 	orr.w	r3, r3, #4
 800a620:	6713      	str	r3, [r2, #112]	; 0x70
 800a622:	4b6c      	ldr	r3, [pc, #432]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a626:	4a6b      	ldr	r2, [pc, #428]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a628:	f043 0301 	orr.w	r3, r3, #1
 800a62c:	6713      	str	r3, [r2, #112]	; 0x70
 800a62e:	e00b      	b.n	800a648 <HAL_RCC_OscConfig+0x5e0>
 800a630:	4b68      	ldr	r3, [pc, #416]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a634:	4a67      	ldr	r2, [pc, #412]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a636:	f023 0301 	bic.w	r3, r3, #1
 800a63a:	6713      	str	r3, [r2, #112]	; 0x70
 800a63c:	4b65      	ldr	r3, [pc, #404]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a63e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a640:	4a64      	ldr	r2, [pc, #400]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a642:	f023 0304 	bic.w	r3, r3, #4
 800a646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d015      	beq.n	800a67c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a650:	f7f9 fd36 	bl	80040c0 <HAL_GetTick>
 800a654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a656:	e00a      	b.n	800a66e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a658:	f7f9 fd32 	bl	80040c0 <HAL_GetTick>
 800a65c:	4602      	mov	r2, r0
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	f241 3288 	movw	r2, #5000	; 0x1388
 800a666:	4293      	cmp	r3, r2
 800a668:	d901      	bls.n	800a66e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e14e      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a66e:	4b59      	ldr	r3, [pc, #356]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0ee      	beq.n	800a658 <HAL_RCC_OscConfig+0x5f0>
 800a67a:	e014      	b.n	800a6a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a67c:	f7f9 fd20 	bl	80040c0 <HAL_GetTick>
 800a680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a682:	e00a      	b.n	800a69a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a684:	f7f9 fd1c 	bl	80040c0 <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a692:	4293      	cmp	r3, r2
 800a694:	d901      	bls.n	800a69a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e138      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a69a:	4b4e      	ldr	r3, [pc, #312]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69e:	f003 0302 	and.w	r3, r3, #2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1ee      	bne.n	800a684 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 812d 	beq.w	800a90a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a6b0:	4b48      	ldr	r3, [pc, #288]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6b8:	2b18      	cmp	r3, #24
 800a6ba:	f000 80bd 	beq.w	800a838 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	f040 809e 	bne.w	800a804 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6c8:	4b42      	ldr	r3, [pc, #264]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a41      	ldr	r2, [pc, #260]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a6ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d4:	f7f9 fcf4 	bl	80040c0 <HAL_GetTick>
 800a6d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6da:	e008      	b.n	800a6ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6dc:	f7f9 fcf0 	bl	80040c0 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d901      	bls.n	800a6ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e10e      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ee:	4b39      	ldr	r3, [pc, #228]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1f0      	bne.n	800a6dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6fa:	4b36      	ldr	r3, [pc, #216]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a6fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6fe:	4b37      	ldr	r3, [pc, #220]	; (800a7dc <HAL_RCC_OscConfig+0x774>)
 800a700:	4013      	ands	r3, r2
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a70a:	0112      	lsls	r2, r2, #4
 800a70c:	430a      	orrs	r2, r1
 800a70e:	4931      	ldr	r1, [pc, #196]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a710:	4313      	orrs	r3, r2
 800a712:	628b      	str	r3, [r1, #40]	; 0x28
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a718:	3b01      	subs	r3, #1
 800a71a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a722:	3b01      	subs	r3, #1
 800a724:	025b      	lsls	r3, r3, #9
 800a726:	b29b      	uxth	r3, r3
 800a728:	431a      	orrs	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72e:	3b01      	subs	r3, #1
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73c:	3b01      	subs	r3, #1
 800a73e:	061b      	lsls	r3, r3, #24
 800a740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a744:	4923      	ldr	r1, [pc, #140]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a746:	4313      	orrs	r3, r2
 800a748:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a74a:	4b22      	ldr	r3, [pc, #136]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74e:	4a21      	ldr	r2, [pc, #132]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a750:	f023 0301 	bic.w	r3, r3, #1
 800a754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a756:	4b1f      	ldr	r3, [pc, #124]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a75a:	4b21      	ldr	r3, [pc, #132]	; (800a7e0 <HAL_RCC_OscConfig+0x778>)
 800a75c:	4013      	ands	r3, r2
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a762:	00d2      	lsls	r2, r2, #3
 800a764:	491b      	ldr	r1, [pc, #108]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a766:	4313      	orrs	r3, r2
 800a768:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a76a:	4b1a      	ldr	r3, [pc, #104]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	f023 020c 	bic.w	r2, r3, #12
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	4917      	ldr	r1, [pc, #92]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a778:	4313      	orrs	r3, r2
 800a77a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a77c:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a780:	f023 0202 	bic.w	r2, r3, #2
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a788:	4912      	ldr	r1, [pc, #72]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a78e:	4b11      	ldr	r3, [pc, #68]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a792:	4a10      	ldr	r2, [pc, #64]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a79a:	4b0e      	ldr	r3, [pc, #56]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79e:	4a0d      	ldr	r2, [pc, #52]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a7a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a7a6:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	4a0a      	ldr	r2, [pc, #40]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a7ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a7b2:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	4a07      	ldr	r2, [pc, #28]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a7b8:	f043 0301 	orr.w	r3, r3, #1
 800a7bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a04      	ldr	r2, [pc, #16]	; (800a7d4 <HAL_RCC_OscConfig+0x76c>)
 800a7c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ca:	f7f9 fc79 	bl	80040c0 <HAL_GetTick>
 800a7ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7d0:	e011      	b.n	800a7f6 <HAL_RCC_OscConfig+0x78e>
 800a7d2:	bf00      	nop
 800a7d4:	58024400 	.word	0x58024400
 800a7d8:	58024800 	.word	0x58024800
 800a7dc:	fffffc0c 	.word	0xfffffc0c
 800a7e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7e4:	f7f9 fc6c 	bl	80040c0 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d901      	bls.n	800a7f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e08a      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7f6:	4b47      	ldr	r3, [pc, #284]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d0f0      	beq.n	800a7e4 <HAL_RCC_OscConfig+0x77c>
 800a802:	e082      	b.n	800a90a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a804:	4b43      	ldr	r3, [pc, #268]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a42      	ldr	r2, [pc, #264]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a80a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a80e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a810:	f7f9 fc56 	bl	80040c0 <HAL_GetTick>
 800a814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a816:	e008      	b.n	800a82a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a818:	f7f9 fc52 	bl	80040c0 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d901      	bls.n	800a82a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e070      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a82a:	4b3a      	ldr	r3, [pc, #232]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1f0      	bne.n	800a818 <HAL_RCC_OscConfig+0x7b0>
 800a836:	e068      	b.n	800a90a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a838:	4b36      	ldr	r3, [pc, #216]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a83e:	4b35      	ldr	r3, [pc, #212]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d031      	beq.n	800a8b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f003 0203 	and.w	r2, r3, #3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a856:	429a      	cmp	r2, r3
 800a858:	d12a      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	091b      	lsrs	r3, r3, #4
 800a85e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a866:	429a      	cmp	r2, r3
 800a868:	d122      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a874:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a876:	429a      	cmp	r2, r3
 800a878:	d11a      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	0a5b      	lsrs	r3, r3, #9
 800a87e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a886:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a888:	429a      	cmp	r2, r3
 800a88a:	d111      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	0c1b      	lsrs	r3, r3, #16
 800a890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a898:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d108      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	0e1b      	lsrs	r3, r3, #24
 800a8a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d001      	beq.n	800a8b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e02b      	b.n	800a90c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a8b4:	4b17      	ldr	r3, [pc, #92]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b8:	08db      	lsrs	r3, r3, #3
 800a8ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d01f      	beq.n	800a90a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a8ca:	4b12      	ldr	r3, [pc, #72]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	4a11      	ldr	r2, [pc, #68]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a8d0:	f023 0301 	bic.w	r3, r3, #1
 800a8d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8d6:	f7f9 fbf3 	bl	80040c0 <HAL_GetTick>
 800a8da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a8dc:	bf00      	nop
 800a8de:	f7f9 fbef 	bl	80040c0 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d0f9      	beq.n	800a8de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a8ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ee:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <HAL_RCC_OscConfig+0x8b0>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8f6:	00d2      	lsls	r2, r2, #3
 800a8f8:	4906      	ldr	r1, [pc, #24]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a8fe:	4b05      	ldr	r3, [pc, #20]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	4a04      	ldr	r2, [pc, #16]	; (800a914 <HAL_RCC_OscConfig+0x8ac>)
 800a904:	f043 0301 	orr.w	r3, r3, #1
 800a908:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3730      	adds	r7, #48	; 0x30
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	58024400 	.word	0x58024400
 800a918:	ffff0007 	.word	0xffff0007

0800a91c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e19c      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a930:	4b8a      	ldr	r3, [pc, #552]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 030f 	and.w	r3, r3, #15
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d910      	bls.n	800a960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a93e:	4b87      	ldr	r3, [pc, #540]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f023 020f 	bic.w	r2, r3, #15
 800a946:	4985      	ldr	r1, [pc, #532]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a94e:	4b83      	ldr	r3, [pc, #524]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 030f 	and.w	r3, r3, #15
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d001      	beq.n	800a960 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e184      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d010      	beq.n	800a98e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	691a      	ldr	r2, [r3, #16]
 800a970:	4b7b      	ldr	r3, [pc, #492]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a978:	429a      	cmp	r2, r3
 800a97a:	d908      	bls.n	800a98e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a97c:	4b78      	ldr	r3, [pc, #480]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	4975      	ldr	r1, [pc, #468]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d010      	beq.n	800a9bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	695a      	ldr	r2, [r3, #20]
 800a99e:	4b70      	ldr	r3, [pc, #448]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d908      	bls.n	800a9bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9aa:	4b6d      	ldr	r3, [pc, #436]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	496a      	ldr	r1, [pc, #424]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d010      	beq.n	800a9ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	699a      	ldr	r2, [r3, #24]
 800a9cc:	4b64      	ldr	r3, [pc, #400]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d908      	bls.n	800a9ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9d8:	4b61      	ldr	r3, [pc, #388]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	495e      	ldr	r1, [pc, #376]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d010      	beq.n	800aa18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	69da      	ldr	r2, [r3, #28]
 800a9fa:	4b59      	ldr	r3, [pc, #356]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d908      	bls.n	800aa18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa06:	4b56      	ldr	r3, [pc, #344]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	4953      	ldr	r1, [pc, #332]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d010      	beq.n	800aa46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	4b4d      	ldr	r3, [pc, #308]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	f003 030f 	and.w	r3, r3, #15
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d908      	bls.n	800aa46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa34:	4b4a      	ldr	r3, [pc, #296]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	f023 020f 	bic.w	r2, r3, #15
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	4947      	ldr	r1, [pc, #284]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d055      	beq.n	800aafe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa52:	4b43      	ldr	r3, [pc, #268]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	4940      	ldr	r1, [pc, #256]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d107      	bne.n	800aa7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa6c:	4b3c      	ldr	r3, [pc, #240]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d121      	bne.n	800aabc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e0f6      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d107      	bne.n	800aa94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa84:	4b36      	ldr	r3, [pc, #216]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d115      	bne.n	800aabc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e0ea      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d107      	bne.n	800aaac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa9c:	4b30      	ldr	r3, [pc, #192]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d109      	bne.n	800aabc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e0de      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaac:	4b2c      	ldr	r3, [pc, #176]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e0d6      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aabc:	4b28      	ldr	r3, [pc, #160]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f023 0207 	bic.w	r2, r3, #7
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4925      	ldr	r1, [pc, #148]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aaca:	4313      	orrs	r3, r2
 800aacc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aace:	f7f9 faf7 	bl	80040c0 <HAL_GetTick>
 800aad2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aad4:	e00a      	b.n	800aaec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aad6:	f7f9 faf3 	bl	80040c0 <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e0be      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaec:	4b1c      	ldr	r3, [pc, #112]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d1eb      	bne.n	800aad6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d010      	beq.n	800ab2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	f003 030f 	and.w	r3, r3, #15
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d208      	bcs.n	800ab2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab1a:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	f023 020f 	bic.w	r2, r3, #15
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	490e      	ldr	r1, [pc, #56]	; (800ab60 <HAL_RCC_ClockConfig+0x244>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab2c:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d214      	bcs.n	800ab64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab3a:	4b08      	ldr	r3, [pc, #32]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f023 020f 	bic.w	r2, r3, #15
 800ab42:	4906      	ldr	r1, [pc, #24]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab4a:	4b04      	ldr	r3, [pc, #16]	; (800ab5c <HAL_RCC_ClockConfig+0x240>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 030f 	and.w	r3, r3, #15
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d005      	beq.n	800ab64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e086      	b.n	800ac6a <HAL_RCC_ClockConfig+0x34e>
 800ab5c:	52002000 	.word	0x52002000
 800ab60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d010      	beq.n	800ab92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691a      	ldr	r2, [r3, #16]
 800ab74:	4b3f      	ldr	r3, [pc, #252]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d208      	bcs.n	800ab92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab80:	4b3c      	ldr	r3, [pc, #240]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	4939      	ldr	r1, [pc, #228]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 0308 	and.w	r3, r3, #8
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d010      	beq.n	800abc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	695a      	ldr	r2, [r3, #20]
 800aba2:	4b34      	ldr	r3, [pc, #208]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abaa:	429a      	cmp	r2, r3
 800abac:	d208      	bcs.n	800abc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abae:	4b31      	ldr	r3, [pc, #196]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	492e      	ldr	r1, [pc, #184]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0310 	and.w	r3, r3, #16
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d010      	beq.n	800abee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	699a      	ldr	r2, [r3, #24]
 800abd0:	4b28      	ldr	r3, [pc, #160]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abd8:	429a      	cmp	r2, r3
 800abda:	d208      	bcs.n	800abee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abdc:	4b25      	ldr	r3, [pc, #148]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	4922      	ldr	r1, [pc, #136]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800abea:	4313      	orrs	r3, r2
 800abec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d010      	beq.n	800ac1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69da      	ldr	r2, [r3, #28]
 800abfe:	4b1d      	ldr	r3, [pc, #116]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d208      	bcs.n	800ac1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac0a:	4b1a      	ldr	r3, [pc, #104]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	4917      	ldr	r1, [pc, #92]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac1c:	f000 f834 	bl	800ac88 <HAL_RCC_GetSysClockFreq>
 800ac20:	4602      	mov	r2, r0
 800ac22:	4b14      	ldr	r3, [pc, #80]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	0a1b      	lsrs	r3, r3, #8
 800ac28:	f003 030f 	and.w	r3, r3, #15
 800ac2c:	4912      	ldr	r1, [pc, #72]	; (800ac78 <HAL_RCC_ClockConfig+0x35c>)
 800ac2e:	5ccb      	ldrb	r3, [r1, r3]
 800ac30:	f003 031f 	and.w	r3, r3, #31
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
 800ac38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac3a:	4b0e      	ldr	r3, [pc, #56]	; (800ac74 <HAL_RCC_ClockConfig+0x358>)
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	f003 030f 	and.w	r3, r3, #15
 800ac42:	4a0d      	ldr	r2, [pc, #52]	; (800ac78 <HAL_RCC_ClockConfig+0x35c>)
 800ac44:	5cd3      	ldrb	r3, [r2, r3]
 800ac46:	f003 031f 	and.w	r3, r3, #31
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac50:	4a0a      	ldr	r2, [pc, #40]	; (800ac7c <HAL_RCC_ClockConfig+0x360>)
 800ac52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac54:	4a0a      	ldr	r2, [pc, #40]	; (800ac80 <HAL_RCC_ClockConfig+0x364>)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <HAL_RCC_ClockConfig+0x368>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f8 ff5c 	bl	8003b1c <HAL_InitTick>
 800ac64:	4603      	mov	r3, r0
 800ac66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	58024400 	.word	0x58024400
 800ac78:	08017a04 	.word	0x08017a04
 800ac7c:	24000090 	.word	0x24000090
 800ac80:	2400008c 	.word	0x2400008c
 800ac84:	24000094 	.word	0x24000094

0800ac88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b089      	sub	sp, #36	; 0x24
 800ac8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac8e:	4bb3      	ldr	r3, [pc, #716]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac96:	2b18      	cmp	r3, #24
 800ac98:	f200 8155 	bhi.w	800af46 <HAL_RCC_GetSysClockFreq+0x2be>
 800ac9c:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ac9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca2:	bf00      	nop
 800aca4:	0800ad09 	.word	0x0800ad09
 800aca8:	0800af47 	.word	0x0800af47
 800acac:	0800af47 	.word	0x0800af47
 800acb0:	0800af47 	.word	0x0800af47
 800acb4:	0800af47 	.word	0x0800af47
 800acb8:	0800af47 	.word	0x0800af47
 800acbc:	0800af47 	.word	0x0800af47
 800acc0:	0800af47 	.word	0x0800af47
 800acc4:	0800ad2f 	.word	0x0800ad2f
 800acc8:	0800af47 	.word	0x0800af47
 800accc:	0800af47 	.word	0x0800af47
 800acd0:	0800af47 	.word	0x0800af47
 800acd4:	0800af47 	.word	0x0800af47
 800acd8:	0800af47 	.word	0x0800af47
 800acdc:	0800af47 	.word	0x0800af47
 800ace0:	0800af47 	.word	0x0800af47
 800ace4:	0800ad35 	.word	0x0800ad35
 800ace8:	0800af47 	.word	0x0800af47
 800acec:	0800af47 	.word	0x0800af47
 800acf0:	0800af47 	.word	0x0800af47
 800acf4:	0800af47 	.word	0x0800af47
 800acf8:	0800af47 	.word	0x0800af47
 800acfc:	0800af47 	.word	0x0800af47
 800ad00:	0800af47 	.word	0x0800af47
 800ad04:	0800ad3b 	.word	0x0800ad3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad08:	4b94      	ldr	r3, [pc, #592]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d009      	beq.n	800ad28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad14:	4b91      	ldr	r3, [pc, #580]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	08db      	lsrs	r3, r3, #3
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	4a90      	ldr	r2, [pc, #576]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad20:	fa22 f303 	lsr.w	r3, r2, r3
 800ad24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ad26:	e111      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad28:	4b8d      	ldr	r3, [pc, #564]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad2a:	61bb      	str	r3, [r7, #24]
      break;
 800ad2c:	e10e      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ad2e:	4b8d      	ldr	r3, [pc, #564]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad30:	61bb      	str	r3, [r7, #24]
      break;
 800ad32:	e10b      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ad34:	4b8c      	ldr	r3, [pc, #560]	; (800af68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ad36:	61bb      	str	r3, [r7, #24]
      break;
 800ad38:	e108      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad3a:	4b88      	ldr	r3, [pc, #544]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3e:	f003 0303 	and.w	r3, r3, #3
 800ad42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad44:	4b85      	ldr	r3, [pc, #532]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	091b      	lsrs	r3, r3, #4
 800ad4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad50:	4b82      	ldr	r3, [pc, #520]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad5a:	4b80      	ldr	r3, [pc, #512]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5e:	08db      	lsrs	r3, r3, #3
 800ad60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	fb02 f303 	mul.w	r3, r2, r3
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 80e1 	beq.w	800af40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	f000 8083 	beq.w	800ae8c <HAL_RCC_GetSysClockFreq+0x204>
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	f200 80a1 	bhi.w	800aed0 <HAL_RCC_GetSysClockFreq+0x248>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d003      	beq.n	800ad9c <HAL_RCC_GetSysClockFreq+0x114>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d056      	beq.n	800ae48 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad9a:	e099      	b.n	800aed0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad9c:	4b6f      	ldr	r3, [pc, #444]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0320 	and.w	r3, r3, #32
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d02d      	beq.n	800ae04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ada8:	4b6c      	ldr	r3, [pc, #432]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	08db      	lsrs	r3, r3, #3
 800adae:	f003 0303 	and.w	r3, r3, #3
 800adb2:	4a6b      	ldr	r2, [pc, #428]	; (800af60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800adb4:	fa22 f303 	lsr.w	r3, r2, r3
 800adb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	ee07 3a90 	vmov	s15, r3
 800adc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add2:	4b62      	ldr	r3, [pc, #392]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ade6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800af6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800adea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ae02:	e087      	b.n	800af14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800af70 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ae12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae16:	4b51      	ldr	r3, [pc, #324]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae26:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800af6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae46:	e065      	b.n	800af14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae52:	eddf 6a48 	vldr	s13, [pc, #288]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5a:	4b40      	ldr	r3, [pc, #256]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800af6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae8a:	e043      	b.n	800af14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae96:	eddf 6a38 	vldr	s13, [pc, #224]	; 800af78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae9e:	4b2f      	ldr	r3, [pc, #188]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeae:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800af6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aeb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aece:	e021      	b.n	800af14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeda:	eddf 6a26 	vldr	s13, [pc, #152]	; 800af74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee2:	4b1e      	ldr	r3, [pc, #120]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aef6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800af6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af14:	4b11      	ldr	r3, [pc, #68]	; (800af5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	0a5b      	lsrs	r3, r3, #9
 800af1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af1e:	3301      	adds	r3, #1
 800af20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	ee07 3a90 	vmov	s15, r3
 800af28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800af30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af38:	ee17 3a90 	vmov	r3, s15
 800af3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800af3e:	e005      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800af40:	2300      	movs	r3, #0
 800af42:	61bb      	str	r3, [r7, #24]
      break;
 800af44:	e002      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800af46:	4b07      	ldr	r3, [pc, #28]	; (800af64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af48:	61bb      	str	r3, [r7, #24]
      break;
 800af4a:	bf00      	nop
  }

  return sysclockfreq;
 800af4c:	69bb      	ldr	r3, [r7, #24]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3724      	adds	r7, #36	; 0x24
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	58024400 	.word	0x58024400
 800af60:	03d09000 	.word	0x03d09000
 800af64:	003d0900 	.word	0x003d0900
 800af68:	017d7840 	.word	0x017d7840
 800af6c:	46000000 	.word	0x46000000
 800af70:	4c742400 	.word	0x4c742400
 800af74:	4a742400 	.word	0x4a742400
 800af78:	4bbebc20 	.word	0x4bbebc20

0800af7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800af82:	f7ff fe81 	bl	800ac88 <HAL_RCC_GetSysClockFreq>
 800af86:	4602      	mov	r2, r0
 800af88:	4b10      	ldr	r3, [pc, #64]	; (800afcc <HAL_RCC_GetHCLKFreq+0x50>)
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	0a1b      	lsrs	r3, r3, #8
 800af8e:	f003 030f 	and.w	r3, r3, #15
 800af92:	490f      	ldr	r1, [pc, #60]	; (800afd0 <HAL_RCC_GetHCLKFreq+0x54>)
 800af94:	5ccb      	ldrb	r3, [r1, r3]
 800af96:	f003 031f 	and.w	r3, r3, #31
 800af9a:	fa22 f303 	lsr.w	r3, r2, r3
 800af9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800afa0:	4b0a      	ldr	r3, [pc, #40]	; (800afcc <HAL_RCC_GetHCLKFreq+0x50>)
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	f003 030f 	and.w	r3, r3, #15
 800afa8:	4a09      	ldr	r2, [pc, #36]	; (800afd0 <HAL_RCC_GetHCLKFreq+0x54>)
 800afaa:	5cd3      	ldrb	r3, [r2, r3]
 800afac:	f003 031f 	and.w	r3, r3, #31
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	fa22 f303 	lsr.w	r3, r2, r3
 800afb6:	4a07      	ldr	r2, [pc, #28]	; (800afd4 <HAL_RCC_GetHCLKFreq+0x58>)
 800afb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afba:	4a07      	ldr	r2, [pc, #28]	; (800afd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800afc0:	4b04      	ldr	r3, [pc, #16]	; (800afd4 <HAL_RCC_GetHCLKFreq+0x58>)
 800afc2:	681b      	ldr	r3, [r3, #0]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	58024400 	.word	0x58024400
 800afd0:	08017a04 	.word	0x08017a04
 800afd4:	24000090 	.word	0x24000090
 800afd8:	2400008c 	.word	0x2400008c

0800afdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800afe0:	f7ff ffcc 	bl	800af7c <HAL_RCC_GetHCLKFreq>
 800afe4:	4602      	mov	r2, r0
 800afe6:	4b06      	ldr	r3, [pc, #24]	; (800b000 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	091b      	lsrs	r3, r3, #4
 800afec:	f003 0307 	and.w	r3, r3, #7
 800aff0:	4904      	ldr	r1, [pc, #16]	; (800b004 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aff2:	5ccb      	ldrb	r3, [r1, r3]
 800aff4:	f003 031f 	and.w	r3, r3, #31
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800affc:	4618      	mov	r0, r3
 800affe:	bd80      	pop	{r7, pc}
 800b000:	58024400 	.word	0x58024400
 800b004:	08017a04 	.word	0x08017a04

0800b008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b00c:	f7ff ffb6 	bl	800af7c <HAL_RCC_GetHCLKFreq>
 800b010:	4602      	mov	r2, r0
 800b012:	4b06      	ldr	r3, [pc, #24]	; (800b02c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	0a1b      	lsrs	r3, r3, #8
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	4904      	ldr	r1, [pc, #16]	; (800b030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b01e:	5ccb      	ldrb	r3, [r1, r3]
 800b020:	f003 031f 	and.w	r3, r3, #31
 800b024:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b028:	4618      	mov	r0, r3
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	58024400 	.word	0x58024400
 800b030:	08017a04 	.word	0x08017a04

0800b034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	223f      	movs	r2, #63	; 0x3f
 800b042:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b044:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	f003 0207 	and.w	r2, r3, #7
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b050:	4b17      	ldr	r3, [pc, #92]	; (800b0b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b05c:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b068:	4b11      	ldr	r3, [pc, #68]	; (800b0b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b074:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b080:	4b0b      	ldr	r3, [pc, #44]	; (800b0b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b08c:	4b08      	ldr	r3, [pc, #32]	; (800b0b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b08e:	6a1b      	ldr	r3, [r3, #32]
 800b090:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b098:	4b06      	ldr	r3, [pc, #24]	; (800b0b4 <HAL_RCC_GetClockConfig+0x80>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 020f 	and.w	r2, r3, #15
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	601a      	str	r2, [r3, #0]
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	52002000 	.word	0x52002000

0800b0b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0bc:	b0ca      	sub	sp, #296	; 0x128
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b0dc:	2500      	movs	r5, #0
 800b0de:	ea54 0305 	orrs.w	r3, r4, r5
 800b0e2:	d049      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0ee:	d02f      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b0f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0f4:	d828      	bhi.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0fa:	d01a      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b0fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b100:	d822      	bhi.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b10a:	d007      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b10c:	e01c      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b10e:	4bb8      	ldr	r3, [pc, #736]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	4ab7      	ldr	r2, [pc, #732]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b11a:	e01a      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b120:	3308      	adds	r3, #8
 800b122:	2102      	movs	r1, #2
 800b124:	4618      	mov	r0, r3
 800b126:	f002 fb61 	bl	800d7ec <RCCEx_PLL2_Config>
 800b12a:	4603      	mov	r3, r0
 800b12c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b130:	e00f      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b136:	3328      	adds	r3, #40	; 0x28
 800b138:	2102      	movs	r1, #2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f002 fc08 	bl	800d950 <RCCEx_PLL3_Config>
 800b140:	4603      	mov	r3, r0
 800b142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b146:	e004      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b14e:	e000      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b150:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b15a:	4ba5      	ldr	r3, [pc, #660]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b15e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b168:	4aa1      	ldr	r2, [pc, #644]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b16a:	430b      	orrs	r3, r1
 800b16c:	6513      	str	r3, [r2, #80]	; 0x50
 800b16e:	e003      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b184:	f04f 0900 	mov.w	r9, #0
 800b188:	ea58 0309 	orrs.w	r3, r8, r9
 800b18c:	d047      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b194:	2b04      	cmp	r3, #4
 800b196:	d82a      	bhi.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b198:	a201      	add	r2, pc, #4	; (adr r2, 800b1a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19e:	bf00      	nop
 800b1a0:	0800b1b5 	.word	0x0800b1b5
 800b1a4:	0800b1c3 	.word	0x0800b1c3
 800b1a8:	0800b1d9 	.word	0x0800b1d9
 800b1ac:	0800b1f7 	.word	0x0800b1f7
 800b1b0:	0800b1f7 	.word	0x0800b1f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1b4:	4b8e      	ldr	r3, [pc, #568]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b8:	4a8d      	ldr	r2, [pc, #564]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1c0:	e01a      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c6:	3308      	adds	r3, #8
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f002 fb0e 	bl	800d7ec <RCCEx_PLL2_Config>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1d6:	e00f      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1dc:	3328      	adds	r3, #40	; 0x28
 800b1de:	2100      	movs	r1, #0
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f002 fbb5 	bl	800d950 <RCCEx_PLL3_Config>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ec:	e004      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1f4:	e000      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b200:	4b7b      	ldr	r3, [pc, #492]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b204:	f023 0107 	bic.w	r1, r3, #7
 800b208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b20e:	4a78      	ldr	r2, [pc, #480]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b210:	430b      	orrs	r3, r1
 800b212:	6513      	str	r3, [r2, #80]	; 0x50
 800b214:	e003      	b.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b22a:	f04f 0b00 	mov.w	fp, #0
 800b22e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b232:	d04c      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b23e:	d030      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b244:	d829      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b246:	2bc0      	cmp	r3, #192	; 0xc0
 800b248:	d02d      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b24a:	2bc0      	cmp	r3, #192	; 0xc0
 800b24c:	d825      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b24e:	2b80      	cmp	r3, #128	; 0x80
 800b250:	d018      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b252:	2b80      	cmp	r3, #128	; 0x80
 800b254:	d821      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b25a:	2b40      	cmp	r3, #64	; 0x40
 800b25c:	d007      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b25e:	e01c      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b260:	4b63      	ldr	r3, [pc, #396]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	4a62      	ldr	r2, [pc, #392]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b26a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b26c:	e01c      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b272:	3308      	adds	r3, #8
 800b274:	2100      	movs	r1, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f002 fab8 	bl	800d7ec <RCCEx_PLL2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b282:	e011      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b288:	3328      	adds	r3, #40	; 0x28
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f002 fb5f 	bl	800d950 <RCCEx_PLL3_Config>
 800b292:	4603      	mov	r3, r0
 800b294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b298:	e006      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2a0:	e002      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b2a2:	bf00      	nop
 800b2a4:	e000      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b2a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b2b0:	4b4f      	ldr	r3, [pc, #316]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2be:	4a4c      	ldr	r2, [pc, #304]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2c0:	430b      	orrs	r3, r1
 800b2c2:	6513      	str	r3, [r2, #80]	; 0x50
 800b2c4:	e003      	b.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b2da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	d053      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2fa:	d035      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b2fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b300:	d82e      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b302:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b306:	d031      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b308:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b30c:	d828      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b30e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b312:	d01a      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b318:	d822      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b31e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b322:	d007      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b324:	e01c      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b326:	4b32      	ldr	r3, [pc, #200]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32a:	4a31      	ldr	r2, [pc, #196]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b32c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b332:	e01c      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b338:	3308      	adds	r3, #8
 800b33a:	2100      	movs	r1, #0
 800b33c:	4618      	mov	r0, r3
 800b33e:	f002 fa55 	bl	800d7ec <RCCEx_PLL2_Config>
 800b342:	4603      	mov	r3, r0
 800b344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b348:	e011      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b34e:	3328      	adds	r3, #40	; 0x28
 800b350:	2100      	movs	r1, #0
 800b352:	4618      	mov	r0, r3
 800b354:	f002 fafc 	bl	800d950 <RCCEx_PLL3_Config>
 800b358:	4603      	mov	r3, r0
 800b35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b35e:	e006      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b366:	e002      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b368:	bf00      	nop
 800b36a:	e000      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b36e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10b      	bne.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b376:	4b1e      	ldr	r3, [pc, #120]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b382:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b386:	4a1a      	ldr	r2, [pc, #104]	; (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b388:	430b      	orrs	r3, r1
 800b38a:	6593      	str	r3, [r2, #88]	; 0x58
 800b38c:	e003      	b.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b38e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b3a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	d056      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3c2:	d038      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b3c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3c8:	d831      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3ce:	d034      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b3d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3d4:	d82b      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3da:	d01d      	beq.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b3dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3e0:	d825      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d006      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b3e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3ea:	d00a      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b3ec:	e01f      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3ee:	bf00      	nop
 800b3f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3f4:	4ba2      	ldr	r3, [pc, #648]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4aa1      	ldr	r2, [pc, #644]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b400:	e01c      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b406:	3308      	adds	r3, #8
 800b408:	2100      	movs	r1, #0
 800b40a:	4618      	mov	r0, r3
 800b40c:	f002 f9ee 	bl	800d7ec <RCCEx_PLL2_Config>
 800b410:	4603      	mov	r3, r0
 800b412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b416:	e011      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41c:	3328      	adds	r3, #40	; 0x28
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f002 fa95 	bl	800d950 <RCCEx_PLL3_Config>
 800b426:	4603      	mov	r3, r0
 800b428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b42c:	e006      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b434:	e002      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b436:	bf00      	nop
 800b438:	e000      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b43c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10b      	bne.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b444:	4b8e      	ldr	r3, [pc, #568]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b448:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b450:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b454:	4a8a      	ldr	r2, [pc, #552]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b456:	430b      	orrs	r3, r1
 800b458:	6593      	str	r3, [r2, #88]	; 0x58
 800b45a:	e003      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b460:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b474:	2300      	movs	r3, #0
 800b476:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b47a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b47e:	460b      	mov	r3, r1
 800b480:	4313      	orrs	r3, r2
 800b482:	d03a      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48a:	2b30      	cmp	r3, #48	; 0x30
 800b48c:	d01f      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b48e:	2b30      	cmp	r3, #48	; 0x30
 800b490:	d819      	bhi.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b492:	2b20      	cmp	r3, #32
 800b494:	d00c      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b496:	2b20      	cmp	r3, #32
 800b498:	d815      	bhi.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d019      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b49e:	2b10      	cmp	r3, #16
 800b4a0:	d111      	bne.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a2:	4b77      	ldr	r3, [pc, #476]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	4a76      	ldr	r2, [pc, #472]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4ae:	e011      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	2102      	movs	r1, #2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f002 f997 	bl	800d7ec <RCCEx_PLL2_Config>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4c4:	e006      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4cc:	e002      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4ce:	bf00      	nop
 800b4d0:	e000      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4dc:	4b68      	ldr	r3, [pc, #416]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ea:	4a65      	ldr	r2, [pc, #404]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4f0:	e003      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b506:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b50a:	2300      	movs	r3, #0
 800b50c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b510:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b514:	460b      	mov	r3, r1
 800b516:	4313      	orrs	r3, r2
 800b518:	d051      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b524:	d035      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b52a:	d82e      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b52c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b530:	d031      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b532:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b536:	d828      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b53c:	d01a      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b53e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b542:	d822      	bhi.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b544:	2b00      	cmp	r3, #0
 800b546:	d003      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54c:	d007      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b54e:	e01c      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b550:	4b4b      	ldr	r3, [pc, #300]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b554:	4a4a      	ldr	r2, [pc, #296]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b55a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b55c:	e01c      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b562:	3308      	adds	r3, #8
 800b564:	2100      	movs	r1, #0
 800b566:	4618      	mov	r0, r3
 800b568:	f002 f940 	bl	800d7ec <RCCEx_PLL2_Config>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b572:	e011      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b578:	3328      	adds	r3, #40	; 0x28
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 f9e7 	bl	800d950 <RCCEx_PLL3_Config>
 800b582:	4603      	mov	r3, r0
 800b584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b588:	e006      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b590:	e002      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b592:	bf00      	nop
 800b594:	e000      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b596:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b5a0:	4b37      	ldr	r3, [pc, #220]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ae:	4a34      	ldr	r2, [pc, #208]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	6513      	str	r3, [r2, #80]	; 0x50
 800b5b4:	e003      	b.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b5ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b5d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	d056      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5e8:	d033      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b5ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5ee:	d82c      	bhi.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5f4:	d02f      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b5f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5fa:	d826      	bhi.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b600:	d02b      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b602:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b606:	d820      	bhi.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b60c:	d012      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b60e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b612:	d81a      	bhi.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b614:	2b00      	cmp	r3, #0
 800b616:	d022      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b61c:	d115      	bne.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b622:	3308      	adds	r3, #8
 800b624:	2101      	movs	r1, #1
 800b626:	4618      	mov	r0, r3
 800b628:	f002 f8e0 	bl	800d7ec <RCCEx_PLL2_Config>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b632:	e015      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b638:	3328      	adds	r3, #40	; 0x28
 800b63a:	2101      	movs	r1, #1
 800b63c:	4618      	mov	r0, r3
 800b63e:	f002 f987 	bl	800d950 <RCCEx_PLL3_Config>
 800b642:	4603      	mov	r3, r0
 800b644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b648:	e00a      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b650:	e006      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b652:	bf00      	nop
 800b654:	e004      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b656:	bf00      	nop
 800b658:	e002      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b65a:	bf00      	nop
 800b65c:	e000      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b65e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10d      	bne.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b668:	4b05      	ldr	r3, [pc, #20]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b676:	4a02      	ldr	r2, [pc, #8]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b678:	430b      	orrs	r3, r1
 800b67a:	6513      	str	r3, [r2, #80]	; 0x50
 800b67c:	e006      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b67e:	bf00      	nop
 800b680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b69c:	2300      	movs	r3, #0
 800b69e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	d055      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b8:	d033      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b6ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6be:	d82c      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c4:	d02f      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ca:	d826      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6d0:	d02b      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b6d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6d6:	d820      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6dc:	d012      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e2:	d81a      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d022      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b6e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ec:	d115      	bne.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f002 f878 	bl	800d7ec <RCCEx_PLL2_Config>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b702:	e015      	b.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b708:	3328      	adds	r3, #40	; 0x28
 800b70a:	2101      	movs	r1, #1
 800b70c:	4618      	mov	r0, r3
 800b70e:	f002 f91f 	bl	800d950 <RCCEx_PLL3_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b718:	e00a      	b.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b720:	e006      	b.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b722:	bf00      	nop
 800b724:	e004      	b.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b726:	bf00      	nop
 800b728:	e002      	b.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b72a:	bf00      	nop
 800b72c:	e000      	b.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b72e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10b      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b738:	4ba3      	ldr	r3, [pc, #652]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b73c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b744:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b748:	4a9f      	ldr	r2, [pc, #636]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b74a:	430b      	orrs	r3, r1
 800b74c:	6593      	str	r3, [r2, #88]	; 0x58
 800b74e:	e003      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b768:	2300      	movs	r3, #0
 800b76a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b76e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b772:	460b      	mov	r3, r1
 800b774:	4313      	orrs	r3, r2
 800b776:	d037      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b782:	d00e      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b788:	d816      	bhi.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d018      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b78e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b792:	d111      	bne.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b794:	4b8c      	ldr	r3, [pc, #560]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	4a8b      	ldr	r2, [pc, #556]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b79e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7a0:	e00f      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f002 f81e 	bl	800d7ec <RCCEx_PLL2_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7b6:	e004      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7be:	e000      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b7c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10a      	bne.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7ca:	4b7f      	ldr	r3, [pc, #508]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d8:	4a7b      	ldr	r2, [pc, #492]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7da:	430b      	orrs	r3, r1
 800b7dc:	6513      	str	r3, [r2, #80]	; 0x50
 800b7de:	e003      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b7f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b7fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b802:	460b      	mov	r3, r1
 800b804:	4313      	orrs	r3, r2
 800b806:	d039      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d81c      	bhi.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b812:	a201      	add	r2, pc, #4	; (adr r2, 800b818 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b818:	0800b855 	.word	0x0800b855
 800b81c:	0800b829 	.word	0x0800b829
 800b820:	0800b837 	.word	0x0800b837
 800b824:	0800b855 	.word	0x0800b855
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b828:	4b67      	ldr	r3, [pc, #412]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	4a66      	ldr	r2, [pc, #408]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b82e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b834:	e00f      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83a:	3308      	adds	r3, #8
 800b83c:	2102      	movs	r1, #2
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 ffd4 	bl	800d7ec <RCCEx_PLL2_Config>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b84a:	e004      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b852:	e000      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b854:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10a      	bne.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b85e:	4b5a      	ldr	r3, [pc, #360]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b862:	f023 0103 	bic.w	r1, r3, #3
 800b866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b86c:	4a56      	ldr	r2, [pc, #344]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b86e:	430b      	orrs	r3, r1
 800b870:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b872:	e003      	b.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b88c:	2300      	movs	r3, #0
 800b88e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b892:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b896:	460b      	mov	r3, r1
 800b898:	4313      	orrs	r3, r2
 800b89a:	f000 809f 	beq.w	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b89e:	4b4b      	ldr	r3, [pc, #300]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a4a      	ldr	r2, [pc, #296]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8aa:	f7f8 fc09 	bl	80040c0 <HAL_GetTick>
 800b8ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8b2:	e00b      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8b4:	f7f8 fc04 	bl	80040c0 <HAL_GetTick>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	2b64      	cmp	r3, #100	; 0x64
 800b8c2:	d903      	bls.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8ca:	e005      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8cc:	4b3f      	ldr	r3, [pc, #252]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d0ed      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b8d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d179      	bne.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8e0:	4b39      	ldr	r3, [pc, #228]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8ec:	4053      	eors	r3, r2
 800b8ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d015      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8f6:	4b34      	ldr	r3, [pc, #208]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b902:	4b31      	ldr	r3, [pc, #196]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b906:	4a30      	ldr	r2, [pc, #192]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b90c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b90e:	4b2e      	ldr	r3, [pc, #184]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b912:	4a2d      	ldr	r2, [pc, #180]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b918:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b91a:	4a2b      	ldr	r2, [pc, #172]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b91c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b920:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b92e:	d118      	bne.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b930:	f7f8 fbc6 	bl	80040c0 <HAL_GetTick>
 800b934:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b938:	e00d      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b93a:	f7f8 fbc1 	bl	80040c0 <HAL_GetTick>
 800b93e:	4602      	mov	r2, r0
 800b940:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b944:	1ad2      	subs	r2, r2, r3
 800b946:	f241 3388 	movw	r3, #5000	; 0x1388
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d903      	bls.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b954:	e005      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b956:	4b1c      	ldr	r3, [pc, #112]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95a:	f003 0302 	and.w	r3, r3, #2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0eb      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b966:	2b00      	cmp	r3, #0
 800b968:	d129      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b97a:	d10e      	bne.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b97c:	4b12      	ldr	r3, [pc, #72]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b98c:	091a      	lsrs	r2, r3, #4
 800b98e:	4b10      	ldr	r3, [pc, #64]	; (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b990:	4013      	ands	r3, r2
 800b992:	4a0d      	ldr	r2, [pc, #52]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b994:	430b      	orrs	r3, r1
 800b996:	6113      	str	r3, [r2, #16]
 800b998:	e005      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b99a:	4b0b      	ldr	r3, [pc, #44]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	4a0a      	ldr	r2, [pc, #40]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9a4:	6113      	str	r3, [r2, #16]
 800b9a6:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9b6:	4a04      	ldr	r2, [pc, #16]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	6713      	str	r3, [r2, #112]	; 0x70
 800b9bc:	e00e      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b9c6:	e009      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b9c8:	58024400 	.word	0x58024400
 800b9cc:	58024800 	.word	0x58024800
 800b9d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f002 0301 	and.w	r3, r2, #1
 800b9e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	f000 8089 	beq.w	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba04:	2b28      	cmp	r3, #40	; 0x28
 800ba06:	d86b      	bhi.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ba08:	a201      	add	r2, pc, #4	; (adr r2, 800ba10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0e:	bf00      	nop
 800ba10:	0800bae9 	.word	0x0800bae9
 800ba14:	0800bae1 	.word	0x0800bae1
 800ba18:	0800bae1 	.word	0x0800bae1
 800ba1c:	0800bae1 	.word	0x0800bae1
 800ba20:	0800bae1 	.word	0x0800bae1
 800ba24:	0800bae1 	.word	0x0800bae1
 800ba28:	0800bae1 	.word	0x0800bae1
 800ba2c:	0800bae1 	.word	0x0800bae1
 800ba30:	0800bab5 	.word	0x0800bab5
 800ba34:	0800bae1 	.word	0x0800bae1
 800ba38:	0800bae1 	.word	0x0800bae1
 800ba3c:	0800bae1 	.word	0x0800bae1
 800ba40:	0800bae1 	.word	0x0800bae1
 800ba44:	0800bae1 	.word	0x0800bae1
 800ba48:	0800bae1 	.word	0x0800bae1
 800ba4c:	0800bae1 	.word	0x0800bae1
 800ba50:	0800bacb 	.word	0x0800bacb
 800ba54:	0800bae1 	.word	0x0800bae1
 800ba58:	0800bae1 	.word	0x0800bae1
 800ba5c:	0800bae1 	.word	0x0800bae1
 800ba60:	0800bae1 	.word	0x0800bae1
 800ba64:	0800bae1 	.word	0x0800bae1
 800ba68:	0800bae1 	.word	0x0800bae1
 800ba6c:	0800bae1 	.word	0x0800bae1
 800ba70:	0800bae9 	.word	0x0800bae9
 800ba74:	0800bae1 	.word	0x0800bae1
 800ba78:	0800bae1 	.word	0x0800bae1
 800ba7c:	0800bae1 	.word	0x0800bae1
 800ba80:	0800bae1 	.word	0x0800bae1
 800ba84:	0800bae1 	.word	0x0800bae1
 800ba88:	0800bae1 	.word	0x0800bae1
 800ba8c:	0800bae1 	.word	0x0800bae1
 800ba90:	0800bae9 	.word	0x0800bae9
 800ba94:	0800bae1 	.word	0x0800bae1
 800ba98:	0800bae1 	.word	0x0800bae1
 800ba9c:	0800bae1 	.word	0x0800bae1
 800baa0:	0800bae1 	.word	0x0800bae1
 800baa4:	0800bae1 	.word	0x0800bae1
 800baa8:	0800bae1 	.word	0x0800bae1
 800baac:	0800bae1 	.word	0x0800bae1
 800bab0:	0800bae9 	.word	0x0800bae9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab8:	3308      	adds	r3, #8
 800baba:	2101      	movs	r1, #1
 800babc:	4618      	mov	r0, r3
 800babe:	f001 fe95 	bl	800d7ec <RCCEx_PLL2_Config>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bac8:	e00f      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	3328      	adds	r3, #40	; 0x28
 800bad0:	2101      	movs	r1, #1
 800bad2:	4618      	mov	r0, r3
 800bad4:	f001 ff3c 	bl	800d950 <RCCEx_PLL3_Config>
 800bad8:	4603      	mov	r3, r0
 800bada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bade:	e004      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bae6:	e000      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800baf2:	4bbf      	ldr	r3, [pc, #764]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bafe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb00:	4abb      	ldr	r2, [pc, #748]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb02:	430b      	orrs	r3, r1
 800bb04:	6553      	str	r3, [r2, #84]	; 0x54
 800bb06:	e003      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	f002 0302 	and.w	r3, r2, #2
 800bb1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb20:	2300      	movs	r3, #0
 800bb22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	d041      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb36:	2b05      	cmp	r3, #5
 800bb38:	d824      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bb3a:	a201      	add	r2, pc, #4	; (adr r2, 800bb40 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb40:	0800bb8d 	.word	0x0800bb8d
 800bb44:	0800bb59 	.word	0x0800bb59
 800bb48:	0800bb6f 	.word	0x0800bb6f
 800bb4c:	0800bb8d 	.word	0x0800bb8d
 800bb50:	0800bb8d 	.word	0x0800bb8d
 800bb54:	0800bb8d 	.word	0x0800bb8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	2101      	movs	r1, #1
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 fe43 	bl	800d7ec <RCCEx_PLL2_Config>
 800bb66:	4603      	mov	r3, r0
 800bb68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb6c:	e00f      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	3328      	adds	r3, #40	; 0x28
 800bb74:	2101      	movs	r1, #1
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 feea 	bl	800d950 <RCCEx_PLL3_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb82:	e004      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb8a:	e000      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bb8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10a      	bne.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb96:	4b96      	ldr	r3, [pc, #600]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9a:	f023 0107 	bic.w	r1, r3, #7
 800bb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bba4:	4a92      	ldr	r2, [pc, #584]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bba6:	430b      	orrs	r3, r1
 800bba8:	6553      	str	r3, [r2, #84]	; 0x54
 800bbaa:	e003      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f002 0304 	and.w	r3, r2, #4
 800bbc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	d044      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbdc:	2b05      	cmp	r3, #5
 800bbde:	d825      	bhi.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bbe0:	a201      	add	r2, pc, #4	; (adr r2, 800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe6:	bf00      	nop
 800bbe8:	0800bc35 	.word	0x0800bc35
 800bbec:	0800bc01 	.word	0x0800bc01
 800bbf0:	0800bc17 	.word	0x0800bc17
 800bbf4:	0800bc35 	.word	0x0800bc35
 800bbf8:	0800bc35 	.word	0x0800bc35
 800bbfc:	0800bc35 	.word	0x0800bc35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc04:	3308      	adds	r3, #8
 800bc06:	2101      	movs	r1, #1
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f001 fdef 	bl	800d7ec <RCCEx_PLL2_Config>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc14:	e00f      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1a:	3328      	adds	r3, #40	; 0x28
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f001 fe96 	bl	800d950 <RCCEx_PLL3_Config>
 800bc24:	4603      	mov	r3, r0
 800bc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc2a:	e004      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc32:	e000      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bc34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10b      	bne.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc3e:	4b6c      	ldr	r3, [pc, #432]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc42:	f023 0107 	bic.w	r1, r3, #7
 800bc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc4e:	4a68      	ldr	r2, [pc, #416]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc50:	430b      	orrs	r3, r1
 800bc52:	6593      	str	r3, [r2, #88]	; 0x58
 800bc54:	e003      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f002 0320 	and.w	r3, r2, #32
 800bc6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	d055      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc8a:	d033      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bc8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc90:	d82c      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc96:	d02f      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bc98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc9c:	d826      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bca2:	d02b      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bca8:	d820      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcae:	d012      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bcb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb4:	d81a      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d022      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bcba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcbe:	d115      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc4:	3308      	adds	r3, #8
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f001 fd8f 	bl	800d7ec <RCCEx_PLL2_Config>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcd4:	e015      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcda:	3328      	adds	r3, #40	; 0x28
 800bcdc:	2102      	movs	r1, #2
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 fe36 	bl	800d950 <RCCEx_PLL3_Config>
 800bce4:	4603      	mov	r3, r0
 800bce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcea:	e00a      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcf2:	e006      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcf4:	bf00      	nop
 800bcf6:	e004      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcf8:	bf00      	nop
 800bcfa:	e002      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcfc:	bf00      	nop
 800bcfe:	e000      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd0a:	4b39      	ldr	r3, [pc, #228]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd1a:	4a35      	ldr	r2, [pc, #212]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	6553      	str	r3, [r2, #84]	; 0x54
 800bd20:	e003      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4313      	orrs	r3, r2
 800bd48:	d058      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd56:	d033      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bd58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd5c:	d82c      	bhi.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd62:	d02f      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bd64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd68:	d826      	bhi.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd6e:	d02b      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bd70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd74:	d820      	bhi.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd7a:	d012      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bd7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd80:	d81a      	bhi.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d022      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bd86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd8a:	d115      	bne.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd90:	3308      	adds	r3, #8
 800bd92:	2100      	movs	r1, #0
 800bd94:	4618      	mov	r0, r3
 800bd96:	f001 fd29 	bl	800d7ec <RCCEx_PLL2_Config>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bda0:	e015      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda6:	3328      	adds	r3, #40	; 0x28
 800bda8:	2102      	movs	r1, #2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f001 fdd0 	bl	800d950 <RCCEx_PLL3_Config>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bdb6:	e00a      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdbe:	e006      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdc0:	bf00      	nop
 800bdc2:	e004      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdc4:	bf00      	nop
 800bdc6:	e002      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdc8:	bf00      	nop
 800bdca:	e000      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10e      	bne.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdd6:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdda:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bdde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bde6:	4a02      	ldr	r2, [pc, #8]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bde8:	430b      	orrs	r3, r1
 800bdea:	6593      	str	r3, [r2, #88]	; 0x58
 800bdec:	e006      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bdee:	bf00      	nop
 800bdf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bdfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800be08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be0c:	2300      	movs	r3, #0
 800be0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800be16:	460b      	mov	r3, r1
 800be18:	4313      	orrs	r3, r2
 800be1a:	d055      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be28:	d033      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800be2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be2e:	d82c      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be34:	d02f      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800be36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be3a:	d826      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be40:	d02b      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800be42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be46:	d820      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be4c:	d012      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800be4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be52:	d81a      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be54:	2b00      	cmp	r3, #0
 800be56:	d022      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800be58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be5c:	d115      	bne.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be62:	3308      	adds	r3, #8
 800be64:	2100      	movs	r1, #0
 800be66:	4618      	mov	r0, r3
 800be68:	f001 fcc0 	bl	800d7ec <RCCEx_PLL2_Config>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be72:	e015      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be78:	3328      	adds	r3, #40	; 0x28
 800be7a:	2102      	movs	r1, #2
 800be7c:	4618      	mov	r0, r3
 800be7e:	f001 fd67 	bl	800d950 <RCCEx_PLL3_Config>
 800be82:	4603      	mov	r3, r0
 800be84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be88:	e00a      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be90:	e006      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be92:	bf00      	nop
 800be94:	e004      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be96:	bf00      	nop
 800be98:	e002      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be9a:	bf00      	nop
 800be9c:	e000      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10b      	bne.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bea8:	4ba1      	ldr	r3, [pc, #644]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800beb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beb8:	4a9d      	ldr	r2, [pc, #628]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beba:	430b      	orrs	r3, r1
 800bebc:	6593      	str	r3, [r2, #88]	; 0x58
 800bebe:	e003      	b.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f002 0308 	and.w	r3, r2, #8
 800bed4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bed8:	2300      	movs	r3, #0
 800beda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bede:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bee2:	460b      	mov	r3, r1
 800bee4:	4313      	orrs	r3, r2
 800bee6:	d01e      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef4:	d10c      	bne.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800befa:	3328      	adds	r3, #40	; 0x28
 800befc:	2102      	movs	r1, #2
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 fd26 	bl	800d950 <RCCEx_PLL3_Config>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bf10:	4b87      	ldr	r3, [pc, #540]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf20:	4a83      	ldr	r2, [pc, #524]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf22:	430b      	orrs	r3, r1
 800bf24:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f002 0310 	and.w	r3, r2, #16
 800bf32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf36:	2300      	movs	r3, #0
 800bf38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf3c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf40:	460b      	mov	r3, r1
 800bf42:	4313      	orrs	r3, r2
 800bf44:	d01e      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf52:	d10c      	bne.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf58:	3328      	adds	r3, #40	; 0x28
 800bf5a:	2102      	movs	r1, #2
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 fcf7 	bl	800d950 <RCCEx_PLL3_Config>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf6e:	4b70      	ldr	r3, [pc, #448]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf7e:	4a6c      	ldr	r2, [pc, #432]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf80:	430b      	orrs	r3, r1
 800bf82:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf94:	2300      	movs	r3, #0
 800bf96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf9a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	d03e      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb0:	d022      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bfb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb6:	d81b      	bhi.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bfbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc0:	d00b      	beq.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bfc2:	e015      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc8:	3308      	adds	r3, #8
 800bfca:	2100      	movs	r1, #0
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f001 fc0d 	bl	800d7ec <RCCEx_PLL2_Config>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfd8:	e00f      	b.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfde:	3328      	adds	r3, #40	; 0x28
 800bfe0:	2102      	movs	r1, #2
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f001 fcb4 	bl	800d950 <RCCEx_PLL3_Config>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfee:	e004      	b.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bff6:	e000      	b.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10b      	bne.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c002:	4b4b      	ldr	r3, [pc, #300]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c006:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c00e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c012:	4a47      	ldr	r2, [pc, #284]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c014:	430b      	orrs	r3, r1
 800c016:	6593      	str	r3, [r2, #88]	; 0x58
 800c018:	e003      	b.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c01a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c01e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c02e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c030:	2300      	movs	r3, #0
 800c032:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c034:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c038:	460b      	mov	r3, r1
 800c03a:	4313      	orrs	r3, r2
 800c03c:	d03b      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c04a:	d01f      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c04c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c050:	d818      	bhi.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c056:	d003      	beq.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c05c:	d007      	beq.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c05e:	e011      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c060:	4b33      	ldr	r3, [pc, #204]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c064:	4a32      	ldr	r2, [pc, #200]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c06a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c06c:	e00f      	b.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c072:	3328      	adds	r3, #40	; 0x28
 800c074:	2101      	movs	r1, #1
 800c076:	4618      	mov	r0, r3
 800c078:	f001 fc6a 	bl	800d950 <RCCEx_PLL3_Config>
 800c07c:	4603      	mov	r3, r0
 800c07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c082:	e004      	b.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c08a:	e000      	b.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c08c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c08e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10b      	bne.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c096:	4b26      	ldr	r3, [pc, #152]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0a6:	4a22      	ldr	r2, [pc, #136]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0a8:	430b      	orrs	r3, r1
 800c0aa:	6553      	str	r3, [r2, #84]	; 0x54
 800c0ac:	e003      	b.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c0c2:	673b      	str	r3, [r7, #112]	; 0x70
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	677b      	str	r3, [r7, #116]	; 0x74
 800c0c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	d034      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0e0:	d007      	beq.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c0e2:	e011      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e4:	4b12      	ldr	r3, [pc, #72]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	4a11      	ldr	r2, [pc, #68]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0f0:	e00e      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	2102      	movs	r1, #2
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f001 fb76 	bl	800d7ec <RCCEx_PLL2_Config>
 800c100:	4603      	mov	r3, r0
 800c102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c106:	e003      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c10e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10d      	bne.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c118:	4b05      	ldr	r3, [pc, #20]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c11c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c126:	4a02      	ldr	r2, [pc, #8]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c128:	430b      	orrs	r3, r1
 800c12a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c12c:	e006      	b.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c12e:	bf00      	nop
 800c130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c138:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c148:	66bb      	str	r3, [r7, #104]	; 0x68
 800c14a:	2300      	movs	r3, #0
 800c14c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c14e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c152:	460b      	mov	r3, r1
 800c154:	4313      	orrs	r3, r2
 800c156:	d00c      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15c:	3328      	adds	r3, #40	; 0x28
 800c15e:	2102      	movs	r1, #2
 800c160:	4618      	mov	r0, r3
 800c162:	f001 fbf5 	bl	800d950 <RCCEx_PLL3_Config>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c17e:	663b      	str	r3, [r7, #96]	; 0x60
 800c180:	2300      	movs	r3, #0
 800c182:	667b      	str	r3, [r7, #100]	; 0x64
 800c184:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c188:	460b      	mov	r3, r1
 800c18a:	4313      	orrs	r3, r2
 800c18c:	d038      	beq.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c19a:	d018      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c19c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1a0:	d811      	bhi.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a6:	d014      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ac:	d80b      	bhi.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d011      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b6:	d106      	bne.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1b8:	4bc3      	ldr	r3, [pc, #780]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	4ac2      	ldr	r2, [pc, #776]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c1c4:	e008      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1cc:	e004      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1ce:	bf00      	nop
 800c1d0:	e002      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1d2:	bf00      	nop
 800c1d4:	e000      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10b      	bne.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1e0:	4bb9      	ldr	r3, [pc, #740]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f0:	4ab5      	ldr	r2, [pc, #724]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1f2:	430b      	orrs	r3, r1
 800c1f4:	6553      	str	r3, [r2, #84]	; 0x54
 800c1f6:	e003      	b.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c208:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c20c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c20e:	2300      	movs	r3, #0
 800c210:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c212:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c216:	460b      	mov	r3, r1
 800c218:	4313      	orrs	r3, r2
 800c21a:	d009      	beq.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c21c:	4baa      	ldr	r3, [pc, #680]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c220:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c22a:	4aa7      	ldr	r2, [pc, #668]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c22c:	430b      	orrs	r3, r1
 800c22e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c23c:	653b      	str	r3, [r7, #80]	; 0x50
 800c23e:	2300      	movs	r3, #0
 800c240:	657b      	str	r3, [r7, #84]	; 0x54
 800c242:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c246:	460b      	mov	r3, r1
 800c248:	4313      	orrs	r3, r2
 800c24a:	d00a      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c24c:	4b9e      	ldr	r3, [pc, #632]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c258:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c25c:	4a9a      	ldr	r2, [pc, #616]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c25e:	430b      	orrs	r3, r1
 800c260:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c26e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c270:	2300      	movs	r3, #0
 800c272:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c274:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c278:	460b      	mov	r3, r1
 800c27a:	4313      	orrs	r3, r2
 800c27c:	d009      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c27e:	4b92      	ldr	r3, [pc, #584]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c282:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c28c:	4a8e      	ldr	r2, [pc, #568]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c28e:	430b      	orrs	r3, r1
 800c290:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c29e:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c2a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	d00e      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c2ae:	4b86      	ldr	r3, [pc, #536]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	4a85      	ldr	r2, [pc, #532]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2b8:	6113      	str	r3, [r2, #16]
 800c2ba:	4b83      	ldr	r3, [pc, #524]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2bc:	6919      	ldr	r1, [r3, #16]
 800c2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c2c6:	4a80      	ldr	r2, [pc, #512]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2c8:	430b      	orrs	r3, r1
 800c2ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c2d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2da:	2300      	movs	r3, #0
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	d009      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2e8:	4b77      	ldr	r3, [pc, #476]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f6:	4a74      	ldr	r2, [pc, #464]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2f8:	430b      	orrs	r3, r1
 800c2fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c308:	633b      	str	r3, [r7, #48]	; 0x30
 800c30a:	2300      	movs	r3, #0
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34
 800c30e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c312:	460b      	mov	r3, r1
 800c314:	4313      	orrs	r3, r2
 800c316:	d00a      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c318:	4b6b      	ldr	r3, [pc, #428]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c328:	4a67      	ldr	r2, [pc, #412]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c32a:	430b      	orrs	r3, r1
 800c32c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	2100      	movs	r1, #0
 800c338:	62b9      	str	r1, [r7, #40]	; 0x28
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c340:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c344:	460b      	mov	r3, r1
 800c346:	4313      	orrs	r3, r2
 800c348:	d011      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34e:	3308      	adds	r3, #8
 800c350:	2100      	movs	r1, #0
 800c352:	4618      	mov	r0, r3
 800c354:	f001 fa4a 	bl	800d7ec <RCCEx_PLL2_Config>
 800c358:	4603      	mov	r3, r0
 800c35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c35e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c36a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	2100      	movs	r1, #0
 800c378:	6239      	str	r1, [r7, #32]
 800c37a:	f003 0302 	and.w	r3, r3, #2
 800c37e:	627b      	str	r3, [r7, #36]	; 0x24
 800c380:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c384:	460b      	mov	r3, r1
 800c386:	4313      	orrs	r3, r2
 800c388:	d011      	beq.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c38e:	3308      	adds	r3, #8
 800c390:	2101      	movs	r1, #1
 800c392:	4618      	mov	r0, r3
 800c394:	f001 fa2a 	bl	800d7ec <RCCEx_PLL2_Config>
 800c398:	4603      	mov	r3, r0
 800c39a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c39e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	61b9      	str	r1, [r7, #24]
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	61fb      	str	r3, [r7, #28]
 800c3c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	d011      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	2102      	movs	r1, #2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f001 fa0a 	bl	800d7ec <RCCEx_PLL2_Config>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	6139      	str	r1, [r7, #16]
 800c3fa:	f003 0308 	and.w	r3, r3, #8
 800c3fe:	617b      	str	r3, [r7, #20]
 800c400:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c404:	460b      	mov	r3, r1
 800c406:	4313      	orrs	r3, r2
 800c408:	d011      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c40e:	3328      	adds	r3, #40	; 0x28
 800c410:	2100      	movs	r1, #0
 800c412:	4618      	mov	r0, r3
 800c414:	f001 fa9c 	bl	800d950 <RCCEx_PLL3_Config>
 800c418:	4603      	mov	r3, r0
 800c41a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c41e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c42a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	2100      	movs	r1, #0
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	f003 0310 	and.w	r3, r3, #16
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c444:	460b      	mov	r3, r1
 800c446:	4313      	orrs	r3, r2
 800c448:	d011      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c44e:	3328      	adds	r3, #40	; 0x28
 800c450:	2101      	movs	r1, #1
 800c452:	4618      	mov	r0, r3
 800c454:	f001 fa7c 	bl	800d950 <RCCEx_PLL3_Config>
 800c458:	4603      	mov	r3, r0
 800c45a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c45e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c462:	2b00      	cmp	r3, #0
 800c464:	d003      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c46a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	2100      	movs	r1, #0
 800c478:	6039      	str	r1, [r7, #0]
 800c47a:	f003 0320 	and.w	r3, r3, #32
 800c47e:	607b      	str	r3, [r7, #4]
 800c480:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c484:	460b      	mov	r3, r1
 800c486:	4313      	orrs	r3, r2
 800c488:	d011      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c48e:	3328      	adds	r3, #40	; 0x28
 800c490:	2102      	movs	r1, #2
 800c492:	4618      	mov	r0, r3
 800c494:	f001 fa5c 	bl	800d950 <RCCEx_PLL3_Config>
 800c498:	4603      	mov	r3, r0
 800c49a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c49e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c4ae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e000      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4c8:	58024400 	.word	0x58024400

0800c4cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b090      	sub	sp, #64	; 0x40
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c4d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4da:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	f040 8094 	bne.w	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c4e4:	4b9e      	ldr	r3, [pc, #632]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4e8:	f003 0307 	and.w	r3, r3, #7
 800c4ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	2b04      	cmp	r3, #4
 800c4f2:	f200 8087 	bhi.w	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c4f6:	a201      	add	r2, pc, #4	; (adr r2, 800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c511 	.word	0x0800c511
 800c500:	0800c539 	.word	0x0800c539
 800c504:	0800c561 	.word	0x0800c561
 800c508:	0800c5fd 	.word	0x0800c5fd
 800c50c:	0800c589 	.word	0x0800c589
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c510:	4b93      	ldr	r3, [pc, #588]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c51c:	d108      	bne.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c51e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c522:	4618      	mov	r0, r3
 800c524:	f001 f810 	bl	800d548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c52c:	f000 bd45 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c534:	f000 bd41 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c538:	4b89      	ldr	r3, [pc, #548]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c544:	d108      	bne.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c546:	f107 0318 	add.w	r3, r7, #24
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 fd54 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c554:	f000 bd31 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c558:	2300      	movs	r3, #0
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c55c:	f000 bd2d 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c560:	4b7f      	ldr	r3, [pc, #508]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c56c:	d108      	bne.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c56e:	f107 030c 	add.w	r3, r7, #12
 800c572:	4618      	mov	r0, r3
 800c574:	f000 fe94 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c57c:	f000 bd1d 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c584:	f000 bd19 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c588:	4b75      	ldr	r3, [pc, #468]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c58c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c590:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c592:	4b73      	ldr	r3, [pc, #460]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0304 	and.w	r3, r3, #4
 800c59a:	2b04      	cmp	r3, #4
 800c59c:	d10c      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5a4:	4b6e      	ldr	r3, [pc, #440]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	08db      	lsrs	r3, r3, #3
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	4a6d      	ldr	r2, [pc, #436]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5b6:	e01f      	b.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5b8:	4b69      	ldr	r3, [pc, #420]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5c4:	d106      	bne.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5cc:	d102      	bne.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5ce:	4b66      	ldr	r3, [pc, #408]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5d2:	e011      	b.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5d4:	4b62      	ldr	r3, [pc, #392]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e0:	d106      	bne.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5e8:	d102      	bne.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5ea:	4b60      	ldr	r3, [pc, #384]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ee:	e003      	b.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5f4:	f000 bce1 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5f8:	f000 bcdf 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5fc:	4b5c      	ldr	r3, [pc, #368]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c600:	f000 bcdb 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c608:	f000 bcd7 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c60c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c610:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c614:	430b      	orrs	r3, r1
 800c616:	f040 80ad 	bne.w	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c61a:	4b51      	ldr	r3, [pc, #324]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c61e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c622:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62a:	d056      	beq.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c632:	f200 8090 	bhi.w	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	2bc0      	cmp	r3, #192	; 0xc0
 800c63a:	f000 8088 	beq.w	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	2bc0      	cmp	r3, #192	; 0xc0
 800c642:	f200 8088 	bhi.w	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	2b80      	cmp	r3, #128	; 0x80
 800c64a:	d032      	beq.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	2b80      	cmp	r3, #128	; 0x80
 800c650:	f200 8081 	bhi.w	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	2b40      	cmp	r3, #64	; 0x40
 800c65e:	d014      	beq.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c660:	e079      	b.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c662:	4b3f      	ldr	r3, [pc, #252]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c66a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c66e:	d108      	bne.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c674:	4618      	mov	r0, r3
 800c676:	f000 ff67 	bl	800d548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c67e:	f000 bc9c 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c686:	f000 bc98 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c68a:	4b35      	ldr	r3, [pc, #212]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c696:	d108      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c698:	f107 0318 	add.w	r3, r7, #24
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fcab 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a6:	f000 bc88 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ae:	f000 bc84 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6b2:	4b2b      	ldr	r3, [pc, #172]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6be:	d108      	bne.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6c0:	f107 030c 	add.w	r3, r7, #12
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 fdeb 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ce:	f000 bc74 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d6:	f000 bc70 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6da:	4b21      	ldr	r3, [pc, #132]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6e4:	4b1e      	ldr	r3, [pc, #120]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 0304 	and.w	r3, r3, #4
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	d10c      	bne.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d109      	bne.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6f6:	4b1a      	ldr	r3, [pc, #104]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	08db      	lsrs	r3, r3, #3
 800c6fc:	f003 0303 	and.w	r3, r3, #3
 800c700:	4a18      	ldr	r2, [pc, #96]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c702:	fa22 f303 	lsr.w	r3, r2, r3
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c708:	e01f      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c70a:	4b15      	ldr	r3, [pc, #84]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c716:	d106      	bne.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c71e:	d102      	bne.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c720:	4b11      	ldr	r3, [pc, #68]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c724:	e011      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c726:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c72e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c732:	d106      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c73a:	d102      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c73c:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c740:	e003      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c746:	f000 bc38 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c74a:	f000 bc36 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c74e:	4b08      	ldr	r3, [pc, #32]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c752:	f000 bc32 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75a:	f000 bc2e 	b.w	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c75e:	bf00      	nop
 800c760:	58024400 	.word	0x58024400
 800c764:	03d09000 	.word	0x03d09000
 800c768:	003d0900 	.word	0x003d0900
 800c76c:	017d7840 	.word	0x017d7840
 800c770:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c774:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c778:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c77c:	430b      	orrs	r3, r1
 800c77e:	f040 809c 	bne.w	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c782:	4b9e      	ldr	r3, [pc, #632]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c786:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c78a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c792:	d054      	beq.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c79a:	f200 808b 	bhi.w	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7a4:	f000 8083 	beq.w	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c7ae:	f200 8081 	bhi.w	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7b8:	d02f      	beq.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7c0:	d878      	bhi.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d004      	beq.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7ce:	d012      	beq.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7d0:	e070      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7d2:	4b8a      	ldr	r3, [pc, #552]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7de:	d107      	bne.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 feaf 	bl	800d548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ee:	e3e4      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f4:	e3e1      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7f6:	4b81      	ldr	r3, [pc, #516]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c802:	d107      	bne.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c804:	f107 0318 	add.w	r3, r7, #24
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 fbf5 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c80e:	69bb      	ldr	r3, [r7, #24]
 800c810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c812:	e3d2      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c818:	e3cf      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c81a:	4b78      	ldr	r3, [pc, #480]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c826:	d107      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c828:	f107 030c 	add.w	r3, r7, #12
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fd37 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c836:	e3c0      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83c:	e3bd      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c83e:	4b6f      	ldr	r3, [pc, #444]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c846:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c848:	4b6c      	ldr	r3, [pc, #432]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0304 	and.w	r3, r3, #4
 800c850:	2b04      	cmp	r3, #4
 800c852:	d10c      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c856:	2b00      	cmp	r3, #0
 800c858:	d109      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c85a:	4b68      	ldr	r3, [pc, #416]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	08db      	lsrs	r3, r3, #3
 800c860:	f003 0303 	and.w	r3, r3, #3
 800c864:	4a66      	ldr	r2, [pc, #408]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c866:	fa22 f303 	lsr.w	r3, r2, r3
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c86c:	e01e      	b.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c86e:	4b63      	ldr	r3, [pc, #396]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c87a:	d106      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c882:	d102      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c884:	4b5f      	ldr	r3, [pc, #380]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c888:	e010      	b.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c88a:	4b5c      	ldr	r3, [pc, #368]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c896:	d106      	bne.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c89e:	d102      	bne.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8a0:	4b59      	ldr	r3, [pc, #356]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a4:	e002      	b.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8aa:	e386      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8ac:	e385      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8ae:	4b57      	ldr	r3, [pc, #348]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b2:	e382      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b8:	e37f      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c8ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8be:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8c2:	430b      	orrs	r3, r1
 800c8c4:	f040 80a7 	bne.w	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8c8:	4b4c      	ldr	r3, [pc, #304]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8d8:	d055      	beq.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8e0:	f200 8096 	bhi.w	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8ea:	f000 8084 	beq.w	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8f4:	f200 808c 	bhi.w	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8fe:	d030      	beq.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c906:	f200 8083 	bhi.w	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d004      	beq.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c916:	d012      	beq.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c918:	e07a      	b.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c91a:	4b38      	ldr	r3, [pc, #224]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c926:	d107      	bne.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 fe0b 	bl	800d548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c936:	e340      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93c:	e33d      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c93e:	4b2f      	ldr	r3, [pc, #188]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c94a:	d107      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94c:	f107 0318 	add.w	r3, r7, #24
 800c950:	4618      	mov	r0, r3
 800c952:	f000 fb51 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c95a:	e32e      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c960:	e32b      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c962:	4b26      	ldr	r3, [pc, #152]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c96a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c96e:	d107      	bne.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c970:	f107 030c 	add.w	r3, r7, #12
 800c974:	4618      	mov	r0, r3
 800c976:	f000 fc93 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c97e:	e31c      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c980:	2300      	movs	r3, #0
 800c982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c984:	e319      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c986:	4b1d      	ldr	r3, [pc, #116]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c98a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c98e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c990:	4b1a      	ldr	r3, [pc, #104]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 0304 	and.w	r3, r3, #4
 800c998:	2b04      	cmp	r3, #4
 800c99a:	d10c      	bne.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d109      	bne.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9a2:	4b16      	ldr	r3, [pc, #88]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	08db      	lsrs	r3, r3, #3
 800c9a8:	f003 0303 	and.w	r3, r3, #3
 800c9ac:	4a14      	ldr	r2, [pc, #80]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b4:	e01e      	b.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9b6:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c2:	d106      	bne.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9ca:	d102      	bne.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d0:	e010      	b.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9d2:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9de:	d106      	bne.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9e6:	d102      	bne.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9e8:	4b07      	ldr	r3, [pc, #28]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ec:	e002      	b.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9f2:	e2e2      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9f4:	e2e1      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9f6:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9fa:	e2de      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9fc:	58024400 	.word	0x58024400
 800ca00:	03d09000 	.word	0x03d09000
 800ca04:	003d0900 	.word	0x003d0900
 800ca08:	017d7840 	.word	0x017d7840
 800ca0c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca14:	e2d1      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca1e:	430b      	orrs	r3, r1
 800ca20:	f040 809c 	bne.w	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca24:	4b93      	ldr	r3, [pc, #588]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca28:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca34:	d054      	beq.n	800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca3c:	f200 808b 	bhi.w	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca46:	f000 8083 	beq.w	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca50:	f200 8081 	bhi.w	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca5a:	d02f      	beq.n	800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca62:	d878      	bhi.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d004      	beq.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca70:	d012      	beq.n	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ca72:	e070      	b.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca74:	4b7f      	ldr	r3, [pc, #508]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca80:	d107      	bne.n	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 fd5e 	bl	800d548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca90:	e293      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca96:	e290      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca98:	4b76      	ldr	r3, [pc, #472]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caa4:	d107      	bne.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa6:	f107 0318 	add.w	r3, r7, #24
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 faa4 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cab4:	e281      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caba:	e27e      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cabc:	4b6d      	ldr	r3, [pc, #436]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cac8:	d107      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caca:	f107 030c 	add.w	r3, r7, #12
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 fbe6 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad8:	e26f      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cade:	e26c      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cae0:	4b64      	ldr	r3, [pc, #400]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cae8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caea:	4b62      	ldr	r3, [pc, #392]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0304 	and.w	r3, r3, #4
 800caf2:	2b04      	cmp	r3, #4
 800caf4:	d10c      	bne.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800caf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d109      	bne.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cafc:	4b5d      	ldr	r3, [pc, #372]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	08db      	lsrs	r3, r3, #3
 800cb02:	f003 0303 	and.w	r3, r3, #3
 800cb06:	4a5c      	ldr	r2, [pc, #368]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb08:	fa22 f303 	lsr.w	r3, r2, r3
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb0e:	e01e      	b.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb10:	4b58      	ldr	r3, [pc, #352]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb1c:	d106      	bne.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb24:	d102      	bne.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb26:	4b55      	ldr	r3, [pc, #340]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb2a:	e010      	b.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb2c:	4b51      	ldr	r3, [pc, #324]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb38:	d106      	bne.n	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb40:	d102      	bne.n	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb42:	4b4f      	ldr	r3, [pc, #316]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb46:	e002      	b.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb4c:	e235      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb4e:	e234      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb50:	4b4c      	ldr	r3, [pc, #304]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb54:	e231      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb5a:	e22e      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb60:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb64:	430b      	orrs	r3, r1
 800cb66:	f040 808f 	bne.w	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb6a:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb6e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb72:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb7a:	d06b      	beq.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb82:	d874      	bhi.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb8a:	d056      	beq.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb92:	d86c      	bhi.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb9a:	d03b      	beq.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cba2:	d864      	bhi.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbaa:	d021      	beq.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbb2:	d85c      	bhi.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d004      	beq.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc0:	d004      	beq.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cbc2:	e054      	b.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cbc4:	f7fe fa0a 	bl	800afdc <HAL_RCC_GetPCLK1Freq>
 800cbc8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbca:	e1f6      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbcc:	4b29      	ldr	r3, [pc, #164]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbd8:	d107      	bne.n	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbda:	f107 0318 	add.w	r3, r7, #24
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fa0a 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbe8:	e1e7      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbee:	e1e4      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbf0:	4b20      	ldr	r3, [pc, #128]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbfc:	d107      	bne.n	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbfe:	f107 030c 	add.w	r3, r7, #12
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 fb4c 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc0c:	e1d5      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc12:	e1d2      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc14:	4b17      	ldr	r3, [pc, #92]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	2b04      	cmp	r3, #4
 800cc1e:	d109      	bne.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc20:	4b14      	ldr	r3, [pc, #80]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	08db      	lsrs	r3, r3, #3
 800cc26:	f003 0303 	and.w	r3, r3, #3
 800cc2a:	4a13      	ldr	r2, [pc, #76]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc2c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc32:	e1c2      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc38:	e1bf      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc3a:	4b0e      	ldr	r3, [pc, #56]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc46:	d102      	bne.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cc48:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4c:	e1b5      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc52:	e1b2      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc54:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc60:	d102      	bne.n	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc66:	e1a8      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc6c:	e1a5      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc72:	e1a2      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc74:	58024400 	.word	0x58024400
 800cc78:	03d09000 	.word	0x03d09000
 800cc7c:	003d0900 	.word	0x003d0900
 800cc80:	017d7840 	.word	0x017d7840
 800cc84:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc8c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc90:	430b      	orrs	r3, r1
 800cc92:	d173      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc94:	4b9c      	ldr	r3, [pc, #624]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cca4:	d02f      	beq.n	800cd06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccac:	d863      	bhi.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d004      	beq.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccba:	d012      	beq.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ccbc:	e05b      	b.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccbe:	4b92      	ldr	r3, [pc, #584]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccca:	d107      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cccc:	f107 0318 	add.w	r3, r7, #24
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 f991 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccda:	e16e      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce0:	e16b      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cce2:	4b89      	ldr	r3, [pc, #548]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccee:	d107      	bne.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccf0:	f107 030c 	add.w	r3, r7, #12
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 fad3 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccfe:	e15c      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd04:	e159      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd06:	4b80      	ldr	r3, [pc, #512]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd10:	4b7d      	ldr	r3, [pc, #500]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	2b04      	cmp	r3, #4
 800cd1a:	d10c      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d109      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd22:	4b79      	ldr	r3, [pc, #484]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	08db      	lsrs	r3, r3, #3
 800cd28:	f003 0303 	and.w	r3, r3, #3
 800cd2c:	4a77      	ldr	r2, [pc, #476]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd34:	e01e      	b.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd36:	4b74      	ldr	r3, [pc, #464]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd42:	d106      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd4a:	d102      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd4c:	4b70      	ldr	r3, [pc, #448]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd50:	e010      	b.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd52:	4b6d      	ldr	r3, [pc, #436]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd5e:	d106      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd66:	d102      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd68:	4b6a      	ldr	r3, [pc, #424]	; (800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd6c:	e002      	b.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd72:	e122      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd74:	e121      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7a:	e11e      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd80:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd84:	430b      	orrs	r3, r1
 800cd86:	d133      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd88:	4b5f      	ldr	r3, [pc, #380]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d004      	beq.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd9e:	d012      	beq.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cda0:	e023      	b.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cda2:	4b59      	ldr	r3, [pc, #356]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdae:	d107      	bne.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f000 fbc7 	bl	800d548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdbe:	e0fc      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc4:	e0f9      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdc6:	4b50      	ldr	r3, [pc, #320]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdd2:	d107      	bne.n	800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdd4:	f107 0318 	add.w	r3, r7, #24
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 f90d 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cde2:	e0ea      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde8:	e0e7      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdee:	e0e4      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cdf8:	430b      	orrs	r3, r1
 800cdfa:	f040 808d 	bne.w	800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cdfe:	4b42      	ldr	r3, [pc, #264]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ce06:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce0e:	d06b      	beq.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce16:	d874      	bhi.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce1e:	d056      	beq.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce26:	d86c      	bhi.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce2e:	d03b      	beq.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce36:	d864      	bhi.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce3e:	d021      	beq.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce46:	d85c      	bhi.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d004      	beq.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce54:	d004      	beq.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ce56:	e054      	b.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce58:	f000 f8b8 	bl	800cfcc <HAL_RCCEx_GetD3PCLK1Freq>
 800ce5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce5e:	e0ac      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce60:	4b29      	ldr	r3, [pc, #164]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce6c:	d107      	bne.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce6e:	f107 0318 	add.w	r3, r7, #24
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 f8c0 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce7c:	e09d      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce82:	e09a      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce84:	4b20      	ldr	r3, [pc, #128]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce90:	d107      	bne.n	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce92:	f107 030c 	add.w	r3, r7, #12
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fa02 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea0:	e08b      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea6:	e088      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cea8:	4b17      	ldr	r3, [pc, #92]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f003 0304 	and.w	r3, r3, #4
 800ceb0:	2b04      	cmp	r3, #4
 800ceb2:	d109      	bne.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ceb4:	4b14      	ldr	r3, [pc, #80]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	08db      	lsrs	r3, r3, #3
 800ceba:	f003 0303 	and.w	r3, r3, #3
 800cebe:	4a13      	ldr	r2, [pc, #76]	; (800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cec0:	fa22 f303 	lsr.w	r3, r2, r3
 800cec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cec6:	e078      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cec8:	2300      	movs	r3, #0
 800ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cecc:	e075      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cece:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ced6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceda:	d102      	bne.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cedc:	4b0c      	ldr	r3, [pc, #48]	; (800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cee0:	e06b      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee6:	e068      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cee8:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cef4:	d102      	bne.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cef6:	4b07      	ldr	r3, [pc, #28]	; (800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cefa:	e05e      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf00:	e05b      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf06:	e058      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cf08:	58024400 	.word	0x58024400
 800cf0c:	03d09000 	.word	0x03d09000
 800cf10:	003d0900 	.word	0x003d0900
 800cf14:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf1c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf20:	430b      	orrs	r3, r1
 800cf22:	d148      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf24:	4b27      	ldr	r3, [pc, #156]	; (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf34:	d02a      	beq.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf3c:	d838      	bhi.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d004      	beq.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf4a:	d00d      	beq.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cf4c:	e030      	b.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf4e:	4b1d      	ldr	r3, [pc, #116]	; (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf5a:	d102      	bne.n	800cf62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cf5c:	4b1a      	ldr	r3, [pc, #104]	; (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf60:	e02b      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf66:	e028      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf68:	4b16      	ldr	r3, [pc, #88]	; (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf74:	d107      	bne.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 fae4 	bl	800d548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf84:	e019      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf8a:	e016      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf8c:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf98:	d107      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf9a:	f107 0318 	add.w	r3, r7, #24
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 f82a 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfa8:	e007      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfae:	e004      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb4:	e001      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3740      	adds	r7, #64	; 0x40
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	58024400 	.word	0x58024400
 800cfc8:	017d7840 	.word	0x017d7840

0800cfcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfd0:	f7fd ffd4 	bl	800af7c <HAL_RCC_GetHCLKFreq>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	4b06      	ldr	r3, [pc, #24]	; (800cff0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	091b      	lsrs	r3, r3, #4
 800cfdc:	f003 0307 	and.w	r3, r3, #7
 800cfe0:	4904      	ldr	r1, [pc, #16]	; (800cff4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfe2:	5ccb      	ldrb	r3, [r1, r3]
 800cfe4:	f003 031f 	and.w	r3, r3, #31
 800cfe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	58024400 	.word	0x58024400
 800cff4:	08017a04 	.word	0x08017a04

0800cff8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b089      	sub	sp, #36	; 0x24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d000:	4ba1      	ldr	r3, [pc, #644]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d004:	f003 0303 	and.w	r3, r3, #3
 800d008:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d00a:	4b9f      	ldr	r3, [pc, #636]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00e:	0b1b      	lsrs	r3, r3, #12
 800d010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d014:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d016:	4b9c      	ldr	r3, [pc, #624]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01a:	091b      	lsrs	r3, r3, #4
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d022:	4b99      	ldr	r3, [pc, #612]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d026:	08db      	lsrs	r3, r3, #3
 800d028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	fb02 f303 	mul.w	r3, r2, r3
 800d032:	ee07 3a90 	vmov	s15, r3
 800d036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f000 8111 	beq.w	800d268 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	f000 8083 	beq.w	800d154 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b02      	cmp	r3, #2
 800d052:	f200 80a1 	bhi.w	800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d056      	beq.n	800d110 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d062:	e099      	b.n	800d198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d064:	4b88      	ldr	r3, [pc, #544]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0320 	and.w	r3, r3, #32
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d02d      	beq.n	800d0cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d070:	4b85      	ldr	r3, [pc, #532]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	08db      	lsrs	r3, r3, #3
 800d076:	f003 0303 	and.w	r3, r3, #3
 800d07a:	4a84      	ldr	r2, [pc, #528]	; (800d28c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d07c:	fa22 f303 	lsr.w	r3, r2, r3
 800d080:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	ee07 3a90 	vmov	s15, r3
 800d088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d09a:	4b7b      	ldr	r3, [pc, #492]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0ca:	e087      	b.n	800d1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	ee07 3a90 	vmov	s15, r3
 800d0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d294 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0de:	4b6a      	ldr	r3, [pc, #424]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e6:	ee07 3a90 	vmov	s15, r3
 800d0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d10e:	e065      	b.n	800d1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d122:	4b59      	ldr	r3, [pc, #356]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12a:	ee07 3a90 	vmov	s15, r3
 800d12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d132:	ed97 6a03 	vldr	s12, [r7, #12]
 800d136:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d152:	e043      	b.n	800d1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d29c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d166:	4b48      	ldr	r3, [pc, #288]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d16e:	ee07 3a90 	vmov	s15, r3
 800d172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d176:	ed97 6a03 	vldr	s12, [r7, #12]
 800d17a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d196:	e021      	b.n	800d1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1aa:	4b37      	ldr	r3, [pc, #220]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b2:	ee07 3a90 	vmov	s15, r3
 800d1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1dc:	4b2a      	ldr	r3, [pc, #168]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e0:	0a5b      	lsrs	r3, r3, #9
 800d1e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1e6:	ee07 3a90 	vmov	s15, r3
 800d1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d202:	ee17 2a90 	vmov	r2, s15
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d20a:	4b1f      	ldr	r3, [pc, #124]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20e:	0c1b      	lsrs	r3, r3, #16
 800d210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d214:	ee07 3a90 	vmov	s15, r3
 800d218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d220:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d224:	edd7 6a07 	vldr	s13, [r7, #28]
 800d228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d230:	ee17 2a90 	vmov	r2, s15
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d238:	4b13      	ldr	r3, [pc, #76]	; (800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23c:	0e1b      	lsrs	r3, r3, #24
 800d23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d24e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d252:	edd7 6a07 	vldr	s13, [r7, #28]
 800d256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d25e:	ee17 2a90 	vmov	r2, s15
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d266:	e008      	b.n	800d27a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
}
 800d27a:	bf00      	nop
 800d27c:	3724      	adds	r7, #36	; 0x24
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	58024400 	.word	0x58024400
 800d28c:	03d09000 	.word	0x03d09000
 800d290:	46000000 	.word	0x46000000
 800d294:	4c742400 	.word	0x4c742400
 800d298:	4a742400 	.word	0x4a742400
 800d29c:	4bbebc20 	.word	0x4bbebc20

0800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b089      	sub	sp, #36	; 0x24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2a8:	4ba1      	ldr	r3, [pc, #644]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ac:	f003 0303 	and.w	r3, r3, #3
 800d2b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d2b2:	4b9f      	ldr	r3, [pc, #636]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b6:	0d1b      	lsrs	r3, r3, #20
 800d2b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d2be:	4b9c      	ldr	r3, [pc, #624]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c2:	0a1b      	lsrs	r3, r3, #8
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d2ca:	4b99      	ldr	r3, [pc, #612]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ce:	08db      	lsrs	r3, r3, #3
 800d2d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2d4:	693a      	ldr	r2, [r7, #16]
 800d2d6:	fb02 f303 	mul.w	r3, r2, r3
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 8111 	beq.w	800d510 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	f000 8083 	beq.w	800d3fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	f200 80a1 	bhi.w	800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d003      	beq.n	800d30c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d056      	beq.n	800d3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d30a:	e099      	b.n	800d440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d30c:	4b88      	ldr	r3, [pc, #544]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 0320 	and.w	r3, r3, #32
 800d314:	2b00      	cmp	r3, #0
 800d316:	d02d      	beq.n	800d374 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d318:	4b85      	ldr	r3, [pc, #532]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	08db      	lsrs	r3, r3, #3
 800d31e:	f003 0303 	and.w	r3, r3, #3
 800d322:	4a84      	ldr	r2, [pc, #528]	; (800d534 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d324:	fa22 f303 	lsr.w	r3, r2, r3
 800d328:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	ee07 3a90 	vmov	s15, r3
 800d330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	ee07 3a90 	vmov	s15, r3
 800d33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d342:	4b7b      	ldr	r3, [pc, #492]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d34a:	ee07 3a90 	vmov	s15, r3
 800d34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d352:	ed97 6a03 	vldr	s12, [r7, #12]
 800d356:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d36e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d372:	e087      	b.n	800d484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	ee07 3a90 	vmov	s15, r3
 800d37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d53c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d386:	4b6a      	ldr	r3, [pc, #424]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d38e:	ee07 3a90 	vmov	s15, r3
 800d392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d396:	ed97 6a03 	vldr	s12, [r7, #12]
 800d39a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3b6:	e065      	b.n	800d484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	ee07 3a90 	vmov	s15, r3
 800d3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ca:	4b59      	ldr	r3, [pc, #356]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3de:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3fa:	e043      	b.n	800d484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	ee07 3a90 	vmov	s15, r3
 800d402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d406:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d40e:	4b48      	ldr	r3, [pc, #288]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d416:	ee07 3a90 	vmov	s15, r3
 800d41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d422:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d42e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d43a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d43e:	e021      	b.n	800d484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	ee07 3a90 	vmov	s15, r3
 800d446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d452:	4b37      	ldr	r3, [pc, #220]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d462:	ed97 6a03 	vldr	s12, [r7, #12]
 800d466:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d47e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d482:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d484:	4b2a      	ldr	r3, [pc, #168]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d488:	0a5b      	lsrs	r3, r3, #9
 800d48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d48e:	ee07 3a90 	vmov	s15, r3
 800d492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d49a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d49e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4aa:	ee17 2a90 	vmov	r2, s15
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d4b2:	4b1f      	ldr	r3, [pc, #124]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b6:	0c1b      	lsrs	r3, r3, #16
 800d4b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4bc:	ee07 3a90 	vmov	s15, r3
 800d4c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4d8:	ee17 2a90 	vmov	r2, s15
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4e0:	4b13      	ldr	r3, [pc, #76]	; (800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e4:	0e1b      	lsrs	r3, r3, #24
 800d4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d506:	ee17 2a90 	vmov	r2, s15
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d50e:	e008      	b.n	800d522 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	609a      	str	r2, [r3, #8]
}
 800d522:	bf00      	nop
 800d524:	3724      	adds	r7, #36	; 0x24
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop
 800d530:	58024400 	.word	0x58024400
 800d534:	03d09000 	.word	0x03d09000
 800d538:	46000000 	.word	0x46000000
 800d53c:	4c742400 	.word	0x4c742400
 800d540:	4a742400 	.word	0x4a742400
 800d544:	4bbebc20 	.word	0x4bbebc20

0800d548 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d548:	b480      	push	{r7}
 800d54a:	b089      	sub	sp, #36	; 0x24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d550:	4ba0      	ldr	r3, [pc, #640]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d554:	f003 0303 	and.w	r3, r3, #3
 800d558:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d55a:	4b9e      	ldr	r3, [pc, #632]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55e:	091b      	lsrs	r3, r3, #4
 800d560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d564:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d566:	4b9b      	ldr	r3, [pc, #620]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d570:	4b98      	ldr	r3, [pc, #608]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d574:	08db      	lsrs	r3, r3, #3
 800d576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d57a:	693a      	ldr	r2, [r7, #16]
 800d57c:	fb02 f303 	mul.w	r3, r2, r3
 800d580:	ee07 3a90 	vmov	s15, r3
 800d584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d588:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 8111 	beq.w	800d7b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	2b02      	cmp	r3, #2
 800d598:	f000 8083 	beq.w	800d6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	f200 80a1 	bhi.w	800d6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d003      	beq.n	800d5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d056      	beq.n	800d65e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d5b0:	e099      	b.n	800d6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5b2:	4b88      	ldr	r3, [pc, #544]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f003 0320 	and.w	r3, r3, #32
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d02d      	beq.n	800d61a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5be:	4b85      	ldr	r3, [pc, #532]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	08db      	lsrs	r3, r3, #3
 800d5c4:	f003 0303 	and.w	r3, r3, #3
 800d5c8:	4a83      	ldr	r2, [pc, #524]	; (800d7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	ee07 3a90 	vmov	s15, r3
 800d5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	ee07 3a90 	vmov	s15, r3
 800d5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5e8:	4b7a      	ldr	r3, [pc, #488]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f0:	ee07 3a90 	vmov	s15, r3
 800d5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d614:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d618:	e087      	b.n	800d72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	ee07 3a90 	vmov	s15, r3
 800d620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d624:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d62c:	4b69      	ldr	r3, [pc, #420]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d634:	ee07 3a90 	vmov	s15, r3
 800d638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d63c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d640:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d64c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d65c:	e065      	b.n	800d72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	ee07 3a90 	vmov	s15, r3
 800d664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d668:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d66c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d670:	4b58      	ldr	r3, [pc, #352]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d678:	ee07 3a90 	vmov	s15, r3
 800d67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d680:	ed97 6a03 	vldr	s12, [r7, #12]
 800d684:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d68c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d69c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6a0:	e043      	b.n	800d72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	ee07 3a90 	vmov	s15, r3
 800d6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d6b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6b4:	4b47      	ldr	r3, [pc, #284]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6bc:	ee07 3a90 	vmov	s15, r3
 800d6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6e4:	e021      	b.n	800d72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	ee07 3a90 	vmov	s15, r3
 800d6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6f8:	4b36      	ldr	r3, [pc, #216]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d700:	ee07 3a90 	vmov	s15, r3
 800d704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d708:	ed97 6a03 	vldr	s12, [r7, #12]
 800d70c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d728:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d72a:	4b2a      	ldr	r3, [pc, #168]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72e:	0a5b      	lsrs	r3, r3, #9
 800d730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d734:	ee07 3a90 	vmov	s15, r3
 800d738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d73c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d740:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d744:	edd7 6a07 	vldr	s13, [r7, #28]
 800d748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d750:	ee17 2a90 	vmov	r2, s15
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d758:	4b1e      	ldr	r3, [pc, #120]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d75c:	0c1b      	lsrs	r3, r3, #16
 800d75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d762:	ee07 3a90 	vmov	s15, r3
 800d766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d76e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d772:	edd7 6a07 	vldr	s13, [r7, #28]
 800d776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d77a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d77e:	ee17 2a90 	vmov	r2, s15
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d786:	4b13      	ldr	r3, [pc, #76]	; (800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78a:	0e1b      	lsrs	r3, r3, #24
 800d78c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d790:	ee07 3a90 	vmov	s15, r3
 800d794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d79c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ac:	ee17 2a90 	vmov	r2, s15
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d7b4:	e008      	b.n	800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	609a      	str	r2, [r3, #8]
}
 800d7c8:	bf00      	nop
 800d7ca:	3724      	adds	r7, #36	; 0x24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	58024400 	.word	0x58024400
 800d7d8:	03d09000 	.word	0x03d09000
 800d7dc:	46000000 	.word	0x46000000
 800d7e0:	4c742400 	.word	0x4c742400
 800d7e4:	4a742400 	.word	0x4a742400
 800d7e8:	4bbebc20 	.word	0x4bbebc20

0800d7ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7fa:	4b53      	ldr	r3, [pc, #332]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fe:	f003 0303 	and.w	r3, r3, #3
 800d802:	2b03      	cmp	r3, #3
 800d804:	d101      	bne.n	800d80a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e099      	b.n	800d93e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d80a:	4b4f      	ldr	r3, [pc, #316]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a4e      	ldr	r2, [pc, #312]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d816:	f7f6 fc53 	bl	80040c0 <HAL_GetTick>
 800d81a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d81c:	e008      	b.n	800d830 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d81e:	f7f6 fc4f 	bl	80040c0 <HAL_GetTick>
 800d822:	4602      	mov	r2, r0
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d901      	bls.n	800d830 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d82c:	2303      	movs	r3, #3
 800d82e:	e086      	b.n	800d93e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d830:	4b45      	ldr	r3, [pc, #276]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1f0      	bne.n	800d81e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d83c:	4b42      	ldr	r3, [pc, #264]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d840:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	031b      	lsls	r3, r3, #12
 800d84a:	493f      	ldr	r1, [pc, #252]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d84c:	4313      	orrs	r3, r2
 800d84e:	628b      	str	r3, [r1, #40]	; 0x28
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	3b01      	subs	r3, #1
 800d856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	3b01      	subs	r3, #1
 800d860:	025b      	lsls	r3, r3, #9
 800d862:	b29b      	uxth	r3, r3
 800d864:	431a      	orrs	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	3b01      	subs	r3, #1
 800d86c:	041b      	lsls	r3, r3, #16
 800d86e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d872:	431a      	orrs	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	3b01      	subs	r3, #1
 800d87a:	061b      	lsls	r3, r3, #24
 800d87c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d880:	4931      	ldr	r1, [pc, #196]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d882:	4313      	orrs	r3, r2
 800d884:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d886:	4b30      	ldr	r3, [pc, #192]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	492d      	ldr	r1, [pc, #180]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d894:	4313      	orrs	r3, r2
 800d896:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d898:	4b2b      	ldr	r3, [pc, #172]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89c:	f023 0220 	bic.w	r2, r3, #32
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	4928      	ldr	r1, [pc, #160]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d8aa:	4b27      	ldr	r3, [pc, #156]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ae:	4a26      	ldr	r2, [pc, #152]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8b0:	f023 0310 	bic.w	r3, r3, #16
 800d8b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8b6:	4b24      	ldr	r3, [pc, #144]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8ba:	4b24      	ldr	r3, [pc, #144]	; (800d94c <RCCEx_PLL2_Config+0x160>)
 800d8bc:	4013      	ands	r3, r2
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	69d2      	ldr	r2, [r2, #28]
 800d8c2:	00d2      	lsls	r2, r2, #3
 800d8c4:	4920      	ldr	r1, [pc, #128]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8ca:	4b1f      	ldr	r3, [pc, #124]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ce:	4a1e      	ldr	r2, [pc, #120]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8d0:	f043 0310 	orr.w	r3, r3, #16
 800d8d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d106      	bne.n	800d8ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8dc:	4b1a      	ldr	r3, [pc, #104]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e0:	4a19      	ldr	r2, [pc, #100]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8e8:	e00f      	b.n	800d90a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d106      	bne.n	800d8fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8f0:	4b15      	ldr	r3, [pc, #84]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f4:	4a14      	ldr	r2, [pc, #80]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d8f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8fc:	e005      	b.n	800d90a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8fe:	4b12      	ldr	r3, [pc, #72]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d902:	4a11      	ldr	r2, [pc, #68]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d908:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d90a:	4b0f      	ldr	r3, [pc, #60]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a0e      	ldr	r2, [pc, #56]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d916:	f7f6 fbd3 	bl	80040c0 <HAL_GetTick>
 800d91a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d91c:	e008      	b.n	800d930 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d91e:	f7f6 fbcf 	bl	80040c0 <HAL_GetTick>
 800d922:	4602      	mov	r2, r0
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	1ad3      	subs	r3, r2, r3
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d901      	bls.n	800d930 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d92c:	2303      	movs	r3, #3
 800d92e:	e006      	b.n	800d93e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <RCCEx_PLL2_Config+0x15c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d0f0      	beq.n	800d91e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	58024400 	.word	0x58024400
 800d94c:	ffff0007 	.word	0xffff0007

0800d950 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d95a:	2300      	movs	r3, #0
 800d95c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d95e:	4b53      	ldr	r3, [pc, #332]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d962:	f003 0303 	and.w	r3, r3, #3
 800d966:	2b03      	cmp	r3, #3
 800d968:	d101      	bne.n	800d96e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	e099      	b.n	800daa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d96e:	4b4f      	ldr	r3, [pc, #316]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a4e      	ldr	r2, [pc, #312]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d97a:	f7f6 fba1 	bl	80040c0 <HAL_GetTick>
 800d97e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d980:	e008      	b.n	800d994 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d982:	f7f6 fb9d 	bl	80040c0 <HAL_GetTick>
 800d986:	4602      	mov	r2, r0
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d901      	bls.n	800d994 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d990:	2303      	movs	r3, #3
 800d992:	e086      	b.n	800daa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d994:	4b45      	ldr	r3, [pc, #276]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1f0      	bne.n	800d982 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d9a0:	4b42      	ldr	r3, [pc, #264]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	051b      	lsls	r3, r3, #20
 800d9ae:	493f      	ldr	r1, [pc, #252]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	628b      	str	r3, [r1, #40]	; 0x28
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	025b      	lsls	r3, r3, #9
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	041b      	lsls	r3, r3, #16
 800d9d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	061b      	lsls	r3, r3, #24
 800d9e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9e4:	4931      	ldr	r1, [pc, #196]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9ea:	4b30      	ldr	r3, [pc, #192]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	492d      	ldr	r1, [pc, #180]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9fc:	4b2b      	ldr	r3, [pc, #172]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	4928      	ldr	r1, [pc, #160]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da0a:	4313      	orrs	r3, r2
 800da0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da0e:	4b27      	ldr	r3, [pc, #156]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da12:	4a26      	ldr	r2, [pc, #152]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da1a:	4b24      	ldr	r3, [pc, #144]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da1e:	4b24      	ldr	r3, [pc, #144]	; (800dab0 <RCCEx_PLL3_Config+0x160>)
 800da20:	4013      	ands	r3, r2
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	69d2      	ldr	r2, [r2, #28]
 800da26:	00d2      	lsls	r2, r2, #3
 800da28:	4920      	ldr	r1, [pc, #128]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da2a:	4313      	orrs	r3, r2
 800da2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da2e:	4b1f      	ldr	r3, [pc, #124]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da32:	4a1e      	ldr	r2, [pc, #120]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d106      	bne.n	800da4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da40:	4b1a      	ldr	r3, [pc, #104]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da44:	4a19      	ldr	r2, [pc, #100]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da4c:	e00f      	b.n	800da6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	2b01      	cmp	r3, #1
 800da52:	d106      	bne.n	800da62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da54:	4b15      	ldr	r3, [pc, #84]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da58:	4a14      	ldr	r2, [pc, #80]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da60:	e005      	b.n	800da6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da62:	4b12      	ldr	r3, [pc, #72]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da66:	4a11      	ldr	r2, [pc, #68]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da6e:	4b0f      	ldr	r3, [pc, #60]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a0e      	ldr	r2, [pc, #56]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da7a:	f7f6 fb21 	bl	80040c0 <HAL_GetTick>
 800da7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da80:	e008      	b.n	800da94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da82:	f7f6 fb1d 	bl	80040c0 <HAL_GetTick>
 800da86:	4602      	mov	r2, r0
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d901      	bls.n	800da94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da90:	2303      	movs	r3, #3
 800da92:	e006      	b.n	800daa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da94:	4b05      	ldr	r3, [pc, #20]	; (800daac <RCCEx_PLL3_Config+0x15c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d0f0      	beq.n	800da82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800daa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	58024400 	.word	0x58024400
 800dab0:	ffff0007 	.word	0xffff0007

0800dab4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d071      	beq.n	800dbaa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7f5 fdb2 	bl	8003644 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2202      	movs	r2, #2
 800dae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	f003 0310 	and.w	r3, r3, #16
 800daf2:	2b10      	cmp	r3, #16
 800daf4:	d050      	beq.n	800db98 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	22ca      	movs	r2, #202	; 0xca
 800dafc:	625a      	str	r2, [r3, #36]	; 0x24
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2253      	movs	r2, #83	; 0x53
 800db04:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fa4a 	bl	800dfa0 <RTC_EnterInitMode>
 800db0c:	4603      	mov	r3, r0
 800db0e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800db10:	7bfb      	ldrb	r3, [r7, #15]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d124      	bne.n	800db60 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	6899      	ldr	r1, [r3, #8]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	4b24      	ldr	r3, [pc, #144]	; (800dbb4 <HAL_RTC_Init+0x100>)
 800db22:	400b      	ands	r3, r1
 800db24:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6899      	ldr	r1, [r3, #8]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	431a      	orrs	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	699b      	ldr	r3, [r3, #24]
 800db3a:	431a      	orrs	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	430a      	orrs	r2, r1
 800db42:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	0419      	lsls	r1, r3, #16
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	68da      	ldr	r2, [r3, #12]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	430a      	orrs	r2, r1
 800db54:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fa56 	bl	800e008 <RTC_ExitInitMode>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d113      	bne.n	800db8e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f022 0203 	bic.w	r2, r2, #3
 800db74:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	69da      	ldr	r2, [r3, #28]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	431a      	orrs	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	22ff      	movs	r2, #255	; 0xff
 800db94:	625a      	str	r2, [r3, #36]	; 0x24
 800db96:	e001      	b.n	800db9c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800db98:	2300      	movs	r3, #0
 800db9a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d103      	bne.n	800dbaa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	ff8fffbf 	.word	0xff8fffbf

0800dbb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dbb8:	b590      	push	{r4, r7, lr}
 800dbba:	b087      	sub	sp, #28
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d101      	bne.n	800dbd2 <HAL_RTC_SetTime+0x1a>
 800dbce:	2302      	movs	r3, #2
 800dbd0:	e089      	b.n	800dce6 <HAL_RTC_SetTime+0x12e>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2202      	movs	r2, #2
 800dbde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	22ca      	movs	r2, #202	; 0xca
 800dbe8:	625a      	str	r2, [r3, #36]	; 0x24
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2253      	movs	r2, #83	; 0x53
 800dbf0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f000 f9d4 	bl	800dfa0 <RTC_EnterInitMode>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dbfc:	7cfb      	ldrb	r3, [r7, #19]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d161      	bne.n	800dcc6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d126      	bne.n	800dc56 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d102      	bne.n	800dc1c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f000 fa2f 	bl	800e084 <RTC_ByteToBcd2>
 800dc26:	4603      	mov	r3, r0
 800dc28:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	785b      	ldrb	r3, [r3, #1]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f000 fa28 	bl	800e084 <RTC_ByteToBcd2>
 800dc34:	4603      	mov	r3, r0
 800dc36:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc38:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	789b      	ldrb	r3, [r3, #2]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 fa20 	bl	800e084 <RTC_ByteToBcd2>
 800dc44:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc46:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	78db      	ldrb	r3, [r3, #3]
 800dc4e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc50:	4313      	orrs	r3, r2
 800dc52:	617b      	str	r3, [r7, #20]
 800dc54:	e018      	b.n	800dc88 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2200      	movs	r2, #0
 800dc68:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc76:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc7c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	78db      	ldrb	r3, [r3, #3]
 800dc82:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc84:	4313      	orrs	r3, r2
 800dc86:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	6979      	ldr	r1, [r7, #20]
 800dc8e:	4b18      	ldr	r3, [pc, #96]	; (800dcf0 <HAL_RTC_SetTime+0x138>)
 800dc90:	400b      	ands	r3, r1
 800dc92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dca2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6899      	ldr	r1, [r3, #8]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	68da      	ldr	r2, [r3, #12]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	431a      	orrs	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f000 f9a3 	bl	800e008 <RTC_ExitInitMode>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	22ff      	movs	r2, #255	; 0xff
 800dccc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dcce:	7cfb      	ldrb	r3, [r7, #19]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d103      	bne.n	800dcdc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dce4:	7cfb      	ldrb	r3, [r7, #19]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	371c      	adds	r7, #28
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd90      	pop	{r4, r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	007f7f7f 	.word	0x007f7f7f

0800dcf4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	4b22      	ldr	r3, [pc, #136]	; (800dda8 <HAL_RTC_GetTime+0xb4>)
 800dd20:	4013      	ands	r3, r2
 800dd22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	0c1b      	lsrs	r3, r3, #16
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	0a1b      	lsrs	r3, r3, #8
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	0d9b      	lsrs	r3, r3, #22
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d11a      	bne.n	800dd9e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 f9a9 	bl	800e0c4 <RTC_Bcd2ToByte>
 800dd72:	4603      	mov	r3, r0
 800dd74:	461a      	mov	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	785b      	ldrb	r3, [r3, #1]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 f9a0 	bl	800e0c4 <RTC_Bcd2ToByte>
 800dd84:	4603      	mov	r3, r0
 800dd86:	461a      	mov	r2, r3
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	789b      	ldrb	r3, [r3, #2]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f000 f997 	bl	800e0c4 <RTC_Bcd2ToByte>
 800dd96:	4603      	mov	r3, r0
 800dd98:	461a      	mov	r2, r3
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	007f7f7f 	.word	0x007f7f7f

0800ddac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ddac:	b590      	push	{r4, r7, lr}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d101      	bne.n	800ddc6 <HAL_RTC_SetDate+0x1a>
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	e073      	b.n	800deae <HAL_RTC_SetDate+0x102>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10e      	bne.n	800ddfa <HAL_RTC_SetDate+0x4e>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	f003 0310 	and.w	r3, r3, #16
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d008      	beq.n	800ddfa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	785b      	ldrb	r3, [r3, #1]
 800ddec:	f023 0310 	bic.w	r3, r3, #16
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	330a      	adds	r3, #10
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d11c      	bne.n	800de3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	78db      	ldrb	r3, [r3, #3]
 800de04:	4618      	mov	r0, r3
 800de06:	f000 f93d 	bl	800e084 <RTC_ByteToBcd2>
 800de0a:	4603      	mov	r3, r0
 800de0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	785b      	ldrb	r3, [r3, #1]
 800de12:	4618      	mov	r0, r3
 800de14:	f000 f936 	bl	800e084 <RTC_ByteToBcd2>
 800de18:	4603      	mov	r3, r0
 800de1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	789b      	ldrb	r3, [r3, #2]
 800de22:	4618      	mov	r0, r3
 800de24:	f000 f92e 	bl	800e084 <RTC_ByteToBcd2>
 800de28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de34:	4313      	orrs	r3, r2
 800de36:	617b      	str	r3, [r7, #20]
 800de38:	e00e      	b.n	800de58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	78db      	ldrb	r3, [r3, #3]
 800de3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de54:	4313      	orrs	r3, r2
 800de56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	22ca      	movs	r2, #202	; 0xca
 800de5e:	625a      	str	r2, [r3, #36]	; 0x24
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2253      	movs	r2, #83	; 0x53
 800de66:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f000 f899 	bl	800dfa0 <RTC_EnterInitMode>
 800de6e:	4603      	mov	r3, r0
 800de70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800de72:	7cfb      	ldrb	r3, [r7, #19]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10a      	bne.n	800de8e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	6979      	ldr	r1, [r7, #20]
 800de7e:	4b0e      	ldr	r3, [pc, #56]	; (800deb8 <HAL_RTC_SetDate+0x10c>)
 800de80:	400b      	ands	r3, r1
 800de82:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f000 f8bf 	bl	800e008 <RTC_ExitInitMode>
 800de8a:	4603      	mov	r3, r0
 800de8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	22ff      	movs	r2, #255	; 0xff
 800de94:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de96:	7cfb      	ldrb	r3, [r7, #19]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d103      	bne.n	800dea4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2201      	movs	r2, #1
 800dea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800deac:	7cfb      	ldrb	r3, [r7, #19]


}
 800deae:	4618      	mov	r0, r3
 800deb0:	371c      	adds	r7, #28
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd90      	pop	{r4, r7, pc}
 800deb6:	bf00      	nop
 800deb8:	00ffff3f 	.word	0x00ffff3f

0800debc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	4b21      	ldr	r3, [pc, #132]	; (800df54 <HAL_RTC_GetDate+0x98>)
 800ded0:	4013      	ands	r3, r2
 800ded2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	0c1b      	lsrs	r3, r3, #16
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	0a1b      	lsrs	r3, r3, #8
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f003 031f 	and.w	r3, r3, #31
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	b2db      	uxtb	r3, r3
 800def2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800def6:	b2da      	uxtb	r2, r3
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	0b5b      	lsrs	r3, r3, #13
 800df00:	b2db      	uxtb	r3, r3
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	b2da      	uxtb	r2, r3
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d11a      	bne.n	800df48 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	78db      	ldrb	r3, [r3, #3]
 800df16:	4618      	mov	r0, r3
 800df18:	f000 f8d4 	bl	800e0c4 <RTC_Bcd2ToByte>
 800df1c:	4603      	mov	r3, r0
 800df1e:	461a      	mov	r2, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	4618      	mov	r0, r3
 800df2a:	f000 f8cb 	bl	800e0c4 <RTC_Bcd2ToByte>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	789b      	ldrb	r3, [r3, #2]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 f8c2 	bl	800e0c4 <RTC_Bcd2ToByte>
 800df40:	4603      	mov	r3, r0
 800df42:	461a      	mov	r2, r3
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3718      	adds	r7, #24
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	00ffff3f 	.word	0x00ffff3f

0800df58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a0d      	ldr	r2, [pc, #52]	; (800df9c <HAL_RTC_WaitForSynchro+0x44>)
 800df66:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800df68:	f7f6 f8aa 	bl	80040c0 <HAL_GetTick>
 800df6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df6e:	e009      	b.n	800df84 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df70:	f7f6 f8a6 	bl	80040c0 <HAL_GetTick>
 800df74:	4602      	mov	r2, r0
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df7e:	d901      	bls.n	800df84 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800df80:	2303      	movs	r3, #3
 800df82:	e007      	b.n	800df94 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f003 0320 	and.w	r3, r3, #32
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d0ee      	beq.n	800df70 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	0003ff5f 	.word	0x0003ff5f

0800dfa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d120      	bne.n	800dffc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dfc4:	f7f6 f87c 	bl	80040c0 <HAL_GetTick>
 800dfc8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfca:	e00d      	b.n	800dfe8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dfcc:	f7f6 f878 	bl	80040c0 <HAL_GetTick>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfda:	d905      	bls.n	800dfe8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2203      	movs	r2, #3
 800dfe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d102      	bne.n	800dffc <RTC_EnterInitMode+0x5c>
 800dff6:	7bfb      	ldrb	r3, [r7, #15]
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d1e7      	bne.n	800dfcc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
	...

0800e008 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e014:	4b1a      	ldr	r3, [pc, #104]	; (800e080 <RTC_ExitInitMode+0x78>)
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	4a19      	ldr	r2, [pc, #100]	; (800e080 <RTC_ExitInitMode+0x78>)
 800e01a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e01e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e020:	4b17      	ldr	r3, [pc, #92]	; (800e080 <RTC_ExitInitMode+0x78>)
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f003 0320 	and.w	r3, r3, #32
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10c      	bne.n	800e046 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff ff93 	bl	800df58 <HAL_RTC_WaitForSynchro>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d01e      	beq.n	800e076 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2203      	movs	r2, #3
 800e03c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e040:	2303      	movs	r3, #3
 800e042:	73fb      	strb	r3, [r7, #15]
 800e044:	e017      	b.n	800e076 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e046:	4b0e      	ldr	r3, [pc, #56]	; (800e080 <RTC_ExitInitMode+0x78>)
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	4a0d      	ldr	r2, [pc, #52]	; (800e080 <RTC_ExitInitMode+0x78>)
 800e04c:	f023 0320 	bic.w	r3, r3, #32
 800e050:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7ff ff80 	bl	800df58 <HAL_RTC_WaitForSynchro>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d005      	beq.n	800e06a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2203      	movs	r2, #3
 800e062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e066:	2303      	movs	r3, #3
 800e068:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e06a:	4b05      	ldr	r3, [pc, #20]	; (800e080 <RTC_ExitInitMode+0x78>)
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	4a04      	ldr	r2, [pc, #16]	; (800e080 <RTC_ExitInitMode+0x78>)
 800e070:	f043 0320 	orr.w	r3, r3, #32
 800e074:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e076:	7bfb      	ldrb	r3, [r7, #15]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	58004000 	.word	0x58004000

0800e084 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	4603      	mov	r3, r0
 800e08c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e08e:	2300      	movs	r3, #0
 800e090:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e092:	79fb      	ldrb	r3, [r7, #7]
 800e094:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e096:	e005      	b.n	800e0a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3301      	adds	r3, #1
 800e09c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e09e:	7afb      	ldrb	r3, [r7, #11]
 800e0a0:	3b0a      	subs	r3, #10
 800e0a2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e0a4:	7afb      	ldrb	r3, [r7, #11]
 800e0a6:	2b09      	cmp	r3, #9
 800e0a8:	d8f6      	bhi.n	800e098 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	011b      	lsls	r3, r3, #4
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	7afb      	ldrb	r3, [r7, #11]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	b2db      	uxtb	r3, r3
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b085      	sub	sp, #20
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	091b      	lsrs	r3, r3, #4
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	0092      	lsls	r2, r2, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	005b      	lsls	r3, r3, #1
 800e0dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e0de:	79fb      	ldrb	r3, [r7, #7]
 800e0e0:	f003 030f 	and.w	r3, r3, #15
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	7bfb      	ldrb	r3, [r7, #15]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	b2db      	uxtb	r3, r3
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3714      	adds	r7, #20
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr

0800e0f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d101      	bne.n	800e10a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e106:	2301      	movs	r3, #1
 800e108:	e10f      	b.n	800e32a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a87      	ldr	r2, [pc, #540]	; (800e334 <HAL_SPI_Init+0x23c>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d00f      	beq.n	800e13a <HAL_SPI_Init+0x42>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a86      	ldr	r2, [pc, #536]	; (800e338 <HAL_SPI_Init+0x240>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d00a      	beq.n	800e13a <HAL_SPI_Init+0x42>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a84      	ldr	r2, [pc, #528]	; (800e33c <HAL_SPI_Init+0x244>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d005      	beq.n	800e13a <HAL_SPI_Init+0x42>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	2b0f      	cmp	r3, #15
 800e134:	d901      	bls.n	800e13a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	e0f7      	b.n	800e32a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fc12 	bl	800e964 <SPI_GetPacketSize>
 800e140:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a7b      	ldr	r2, [pc, #492]	; (800e334 <HAL_SPI_Init+0x23c>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d00c      	beq.n	800e166 <HAL_SPI_Init+0x6e>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a79      	ldr	r2, [pc, #484]	; (800e338 <HAL_SPI_Init+0x240>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d007      	beq.n	800e166 <HAL_SPI_Init+0x6e>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a78      	ldr	r2, [pc, #480]	; (800e33c <HAL_SPI_Init+0x244>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d002      	beq.n	800e166 <HAL_SPI_Init+0x6e>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b08      	cmp	r3, #8
 800e164:	d811      	bhi.n	800e18a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e16a:	4a72      	ldr	r2, [pc, #456]	; (800e334 <HAL_SPI_Init+0x23c>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d009      	beq.n	800e184 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a70      	ldr	r2, [pc, #448]	; (800e338 <HAL_SPI_Init+0x240>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d004      	beq.n	800e184 <HAL_SPI_Init+0x8c>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a6f      	ldr	r2, [pc, #444]	; (800e33c <HAL_SPI_Init+0x244>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d104      	bne.n	800e18e <HAL_SPI_Init+0x96>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b10      	cmp	r3, #16
 800e188:	d901      	bls.n	800e18e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	e0cd      	b.n	800e32a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e194:	b2db      	uxtb	r3, r3
 800e196:	2b00      	cmp	r3, #0
 800e198:	d106      	bne.n	800e1a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7f5 fa82 	bl	80036ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2202      	movs	r2, #2
 800e1ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f022 0201 	bic.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e1ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	699b      	ldr	r3, [r3, #24]
 800e1d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1d4:	d119      	bne.n	800e20a <HAL_SPI_Init+0x112>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1de:	d103      	bne.n	800e1e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d008      	beq.n	800e1fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10c      	bne.n	800e20a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1f8:	d107      	bne.n	800e20a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e208:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00f      	beq.n	800e236 <HAL_SPI_Init+0x13e>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	2b06      	cmp	r3, #6
 800e21c:	d90b      	bls.n	800e236 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	430a      	orrs	r2, r1
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	e007      	b.n	800e246 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e244:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	69da      	ldr	r2, [r3, #28]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e24e:	431a      	orrs	r2, r3
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	431a      	orrs	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e258:	ea42 0103 	orr.w	r1, r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	430a      	orrs	r2, r1
 800e266:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e270:	431a      	orrs	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e276:	431a      	orrs	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	431a      	orrs	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	431a      	orrs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	431a      	orrs	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	431a      	orrs	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	431a      	orrs	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e29a:	431a      	orrs	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	431a      	orrs	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a6:	ea42 0103 	orr.w	r1, r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	430a      	orrs	r2, r1
 800e2b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d113      	bne.n	800e2e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f022 0201 	bic.w	r2, r2, #1
 800e2f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00a      	beq.n	800e318 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	430a      	orrs	r2, r1
 800e316:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	40013000 	.word	0x40013000
 800e338:	40003800 	.word	0x40003800
 800e33c:	40003c00 	.word	0x40003c00

0800e340 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	603b      	str	r3, [r7, #0]
 800e34c:	4613      	mov	r3, r2
 800e34e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e354:	095b      	lsrs	r3, r3, #5
 800e356:	b29b      	uxth	r3, r3
 800e358:	3301      	adds	r3, #1
 800e35a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3330      	adds	r3, #48	; 0x30
 800e362:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e364:	f7f5 feac 	bl	80040c0 <HAL_GetTick>
 800e368:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b01      	cmp	r3, #1
 800e374:	d001      	beq.n	800e37a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e376:	2302      	movs	r3, #2
 800e378:	e250      	b.n	800e81c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <HAL_SPI_Receive+0x46>
 800e380:	88fb      	ldrh	r3, [r7, #6]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	e248      	b.n	800e81c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e390:	2b01      	cmp	r3, #1
 800e392:	d101      	bne.n	800e398 <HAL_SPI_Receive+0x58>
 800e394:	2302      	movs	r3, #2
 800e396:	e241      	b.n	800e81c <HAL_SPI_Receive+0x4dc>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2204      	movs	r2, #4
 800e3a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	88fa      	ldrh	r2, [r7, #6]
 800e3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	88fa      	ldrh	r2, [r7, #6]
 800e3c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e3f0:	d108      	bne.n	800e404 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	e009      	b.n	800e418 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e416:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	4b95      	ldr	r3, [pc, #596]	; (800e674 <HAL_SPI_Receive+0x334>)
 800e420:	4013      	ands	r3, r2
 800e422:	88f9      	ldrh	r1, [r7, #6]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	430b      	orrs	r3, r1
 800e42a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e444:	d107      	bne.n	800e456 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e454:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	2b0f      	cmp	r3, #15
 800e45c:	d96c      	bls.n	800e538 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e45e:	e064      	b.n	800e52a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	695b      	ldr	r3, [r3, #20]
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	2b01      	cmp	r3, #1
 800e474:	d114      	bne.n	800e4a0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e47e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e480:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e486:	1d1a      	adds	r2, r3, #4
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e492:	b29b      	uxth	r3, r3
 800e494:	3b01      	subs	r3, #1
 800e496:	b29a      	uxth	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e49e:	e044      	b.n	800e52a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	8bfa      	ldrh	r2, [r7, #30]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d919      	bls.n	800e4e2 <HAL_SPI_Receive+0x1a2>
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d014      	beq.n	800e4e2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4c2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c8:	1d1a      	adds	r2, r3, #4
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4e0:	e023      	b.n	800e52a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4e2:	f7f5 fded 	bl	80040c0 <HAL_GetTick>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d803      	bhi.n	800e4fa <HAL_SPI_Receive+0x1ba>
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4f8:	d102      	bne.n	800e500 <HAL_SPI_Receive+0x1c0>
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d114      	bne.n	800e52a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f000 f98f 	bl	800e824 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e50c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2201      	movs	r2, #1
 800e51a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2200      	movs	r2, #0
 800e522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e526:	2303      	movs	r3, #3
 800e528:	e178      	b.n	800e81c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e530:	b29b      	uxth	r3, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	d194      	bne.n	800e460 <HAL_SPI_Receive+0x120>
 800e536:	e15e      	b.n	800e7f6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	2b07      	cmp	r3, #7
 800e53e:	f240 8153 	bls.w	800e7e8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e542:	e08f      	b.n	800e664 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	2b01      	cmp	r3, #1
 800e558:	d114      	bne.n	800e584 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e55e:	69ba      	ldr	r2, [r7, #24]
 800e560:	8812      	ldrh	r2, [r2, #0]
 800e562:	b292      	uxth	r2, r2
 800e564:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e56a:	1c9a      	adds	r2, r3, #2
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e576:	b29b      	uxth	r3, r3
 800e578:	3b01      	subs	r3, #1
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e582:	e06f      	b.n	800e664 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	8bfa      	ldrh	r2, [r7, #30]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d924      	bls.n	800e5dc <HAL_SPI_Receive+0x29c>
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d01f      	beq.n	800e5dc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a0:	69ba      	ldr	r2, [r7, #24]
 800e5a2:	8812      	ldrh	r2, [r2, #0]
 800e5a4:	b292      	uxth	r2, r2
 800e5a6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ac:	1c9a      	adds	r2, r3, #2
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5b6:	69ba      	ldr	r2, [r7, #24]
 800e5b8:	8812      	ldrh	r2, [r2, #0]
 800e5ba:	b292      	uxth	r2, r2
 800e5bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c2:	1c9a      	adds	r2, r3, #2
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	3b02      	subs	r3, #2
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5da:	e043      	b.n	800e664 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d119      	bne.n	800e61c <HAL_SPI_Receive+0x2dc>
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d014      	beq.n	800e61c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f6:	69ba      	ldr	r2, [r7, #24]
 800e5f8:	8812      	ldrh	r2, [r2, #0]
 800e5fa:	b292      	uxth	r2, r2
 800e5fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e602:	1c9a      	adds	r2, r3, #2
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e60e:	b29b      	uxth	r3, r3
 800e610:	3b01      	subs	r3, #1
 800e612:	b29a      	uxth	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e61a:	e023      	b.n	800e664 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e61c:	f7f5 fd50 	bl	80040c0 <HAL_GetTick>
 800e620:	4602      	mov	r2, r0
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d803      	bhi.n	800e634 <HAL_SPI_Receive+0x2f4>
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e632:	d102      	bne.n	800e63a <HAL_SPI_Receive+0x2fa>
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d114      	bne.n	800e664 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 f8f2 	bl	800e824 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2201      	movs	r2, #1
 800e654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e660:	2303      	movs	r3, #3
 800e662:	e0db      	b.n	800e81c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f47f af69 	bne.w	800e544 <HAL_SPI_Receive+0x204>
 800e672:	e0c0      	b.n	800e7f6 <HAL_SPI_Receive+0x4b6>
 800e674:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d117      	bne.n	800e6be <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e69a:	7812      	ldrb	r2, [r2, #0]
 800e69c:	b2d2      	uxtb	r2, r2
 800e69e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6a4:	1c5a      	adds	r2, r3, #1
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6bc:	e094      	b.n	800e7e8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	8bfa      	ldrh	r2, [r7, #30]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d946      	bls.n	800e75a <HAL_SPI_Receive+0x41a>
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d041      	beq.n	800e75a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6e2:	7812      	ldrb	r2, [r2, #0]
 800e6e4:	b2d2      	uxtb	r2, r2
 800e6e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6fe:	7812      	ldrb	r2, [r2, #0]
 800e700:	b2d2      	uxtb	r2, r2
 800e702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e708:	1c5a      	adds	r2, r3, #1
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e71a:	7812      	ldrb	r2, [r2, #0]
 800e71c:	b2d2      	uxtb	r2, r2
 800e71e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e724:	1c5a      	adds	r2, r3, #1
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e736:	7812      	ldrb	r2, [r2, #0]
 800e738:	b2d2      	uxtb	r2, r2
 800e73a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e740:	1c5a      	adds	r2, r3, #1
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	3b04      	subs	r3, #4
 800e750:	b29a      	uxth	r2, r3
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e758:	e046      	b.n	800e7e8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e760:	b29b      	uxth	r3, r3
 800e762:	2b03      	cmp	r3, #3
 800e764:	d81c      	bhi.n	800e7a0 <HAL_SPI_Receive+0x460>
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d017      	beq.n	800e7a0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e77c:	7812      	ldrb	r2, [r2, #0]
 800e77e:	b2d2      	uxtb	r2, r2
 800e780:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e786:	1c5a      	adds	r2, r3, #1
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e792:	b29b      	uxth	r3, r3
 800e794:	3b01      	subs	r3, #1
 800e796:	b29a      	uxth	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e79e:	e023      	b.n	800e7e8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7a0:	f7f5 fc8e 	bl	80040c0 <HAL_GetTick>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d803      	bhi.n	800e7b8 <HAL_SPI_Receive+0x478>
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7b6:	d102      	bne.n	800e7be <HAL_SPI_Receive+0x47e>
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d114      	bne.n	800e7e8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f000 f830 	bl	800e824 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e7e4:	2303      	movs	r3, #3
 800e7e6:	e019      	b.n	800e81c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f47f af41 	bne.w	800e678 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f000 f814 	bl	800e824 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e816:	2301      	movs	r3, #1
 800e818:	e000      	b.n	800e81c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e81a:	2300      	movs	r3, #0
  }
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3720      	adds	r7, #32
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	699a      	ldr	r2, [r3, #24]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f042 0208 	orr.w	r2, r2, #8
 800e842:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	699a      	ldr	r2, [r3, #24]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f042 0210 	orr.w	r2, r2, #16
 800e852:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f022 0201 	bic.w	r2, r2, #1
 800e862:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6919      	ldr	r1, [r3, #16]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	4b3c      	ldr	r3, [pc, #240]	; (800e960 <SPI_CloseTransfer+0x13c>)
 800e870:	400b      	ands	r3, r1
 800e872:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	689a      	ldr	r2, [r3, #8]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e882:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	2b04      	cmp	r3, #4
 800e88e:	d014      	beq.n	800e8ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f003 0320 	and.w	r3, r3, #32
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00f      	beq.n	800e8ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	699a      	ldr	r2, [r3, #24]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f042 0220 	orr.w	r2, r2, #32
 800e8b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d014      	beq.n	800e8f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00f      	beq.n	800e8f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8d6:	f043 0204 	orr.w	r2, r3, #4
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	699a      	ldr	r2, [r3, #24]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00f      	beq.n	800e91a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e900:	f043 0201 	orr.w	r2, r3, #1
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	699a      	ldr	r2, [r3, #24]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e918:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00f      	beq.n	800e944 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e92a:	f043 0208 	orr.w	r2, r3, #8
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	699a      	ldr	r2, [r3, #24]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e942:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e954:	bf00      	nop
 800e956:	3714      	adds	r7, #20
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	fffffc90 	.word	0xfffffc90

0800e964 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e970:	095b      	lsrs	r3, r3, #5
 800e972:	3301      	adds	r3, #1
 800e974:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	3301      	adds	r3, #1
 800e97c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	3307      	adds	r3, #7
 800e982:	08db      	lsrs	r3, r3, #3
 800e984:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	68fa      	ldr	r2, [r7, #12]
 800e98a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b082      	sub	sp, #8
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e049      	b.n	800ea40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d106      	bne.n	800e9c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7f4 ff29 	bl	8003818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2202      	movs	r2, #2
 800e9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f000 fe7d 	bl	800f6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2201      	movs	r2, #1
 800ea02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2201      	movs	r2, #1
 800ea12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2201      	movs	r2, #1
 800ea22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d001      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e054      	b.n	800eb0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2202      	movs	r2, #2
 800ea64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	68da      	ldr	r2, [r3, #12]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f042 0201 	orr.w	r2, r2, #1
 800ea76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a26      	ldr	r2, [pc, #152]	; (800eb18 <HAL_TIM_Base_Start_IT+0xd0>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d022      	beq.n	800eac8 <HAL_TIM_Base_Start_IT+0x80>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea8a:	d01d      	beq.n	800eac8 <HAL_TIM_Base_Start_IT+0x80>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a22      	ldr	r2, [pc, #136]	; (800eb1c <HAL_TIM_Base_Start_IT+0xd4>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d018      	beq.n	800eac8 <HAL_TIM_Base_Start_IT+0x80>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a21      	ldr	r2, [pc, #132]	; (800eb20 <HAL_TIM_Base_Start_IT+0xd8>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d013      	beq.n	800eac8 <HAL_TIM_Base_Start_IT+0x80>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a1f      	ldr	r2, [pc, #124]	; (800eb24 <HAL_TIM_Base_Start_IT+0xdc>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d00e      	beq.n	800eac8 <HAL_TIM_Base_Start_IT+0x80>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a1e      	ldr	r2, [pc, #120]	; (800eb28 <HAL_TIM_Base_Start_IT+0xe0>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d009      	beq.n	800eac8 <HAL_TIM_Base_Start_IT+0x80>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a1c      	ldr	r2, [pc, #112]	; (800eb2c <HAL_TIM_Base_Start_IT+0xe4>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d004      	beq.n	800eac8 <HAL_TIM_Base_Start_IT+0x80>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a1b      	ldr	r2, [pc, #108]	; (800eb30 <HAL_TIM_Base_Start_IT+0xe8>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d115      	bne.n	800eaf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	689a      	ldr	r2, [r3, #8]
 800eace:	4b19      	ldr	r3, [pc, #100]	; (800eb34 <HAL_TIM_Base_Start_IT+0xec>)
 800ead0:	4013      	ands	r3, r2
 800ead2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b06      	cmp	r3, #6
 800ead8:	d015      	beq.n	800eb06 <HAL_TIM_Base_Start_IT+0xbe>
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eae0:	d011      	beq.n	800eb06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f042 0201 	orr.w	r2, r2, #1
 800eaf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaf2:	e008      	b.n	800eb06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f042 0201 	orr.w	r2, r2, #1
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	e000      	b.n	800eb08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3714      	adds	r7, #20
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	40010000 	.word	0x40010000
 800eb1c:	40000400 	.word	0x40000400
 800eb20:	40000800 	.word	0x40000800
 800eb24:	40000c00 	.word	0x40000c00
 800eb28:	40010400 	.word	0x40010400
 800eb2c:	40001800 	.word	0x40001800
 800eb30:	40014000 	.word	0x40014000
 800eb34:	00010007 	.word	0x00010007

0800eb38 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d109      	bne.n	800eb60 <HAL_TIM_OC_Start_IT+0x28>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	bf14      	ite	ne
 800eb58:	2301      	movne	r3, #1
 800eb5a:	2300      	moveq	r3, #0
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	e03c      	b.n	800ebda <HAL_TIM_OC_Start_IT+0xa2>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b04      	cmp	r3, #4
 800eb64:	d109      	bne.n	800eb7a <HAL_TIM_OC_Start_IT+0x42>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	bf14      	ite	ne
 800eb72:	2301      	movne	r3, #1
 800eb74:	2300      	moveq	r3, #0
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	e02f      	b.n	800ebda <HAL_TIM_OC_Start_IT+0xa2>
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b08      	cmp	r3, #8
 800eb7e:	d109      	bne.n	800eb94 <HAL_TIM_OC_Start_IT+0x5c>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	bf14      	ite	ne
 800eb8c:	2301      	movne	r3, #1
 800eb8e:	2300      	moveq	r3, #0
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	e022      	b.n	800ebda <HAL_TIM_OC_Start_IT+0xa2>
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	2b0c      	cmp	r3, #12
 800eb98:	d109      	bne.n	800ebae <HAL_TIM_OC_Start_IT+0x76>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	bf14      	ite	ne
 800eba6:	2301      	movne	r3, #1
 800eba8:	2300      	moveq	r3, #0
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	e015      	b.n	800ebda <HAL_TIM_OC_Start_IT+0xa2>
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2b10      	cmp	r3, #16
 800ebb2:	d109      	bne.n	800ebc8 <HAL_TIM_OC_Start_IT+0x90>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	bf14      	ite	ne
 800ebc0:	2301      	movne	r3, #1
 800ebc2:	2300      	moveq	r3, #0
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	e008      	b.n	800ebda <HAL_TIM_OC_Start_IT+0xa2>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	bf14      	ite	ne
 800ebd4:	2301      	movne	r3, #1
 800ebd6:	2300      	moveq	r3, #0
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e0ec      	b.n	800edbc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d104      	bne.n	800ebf2 <HAL_TIM_OC_Start_IT+0xba>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2202      	movs	r2, #2
 800ebec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebf0:	e023      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x102>
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	d104      	bne.n	800ec02 <HAL_TIM_OC_Start_IT+0xca>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2202      	movs	r2, #2
 800ebfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec00:	e01b      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x102>
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	2b08      	cmp	r3, #8
 800ec06:	d104      	bne.n	800ec12 <HAL_TIM_OC_Start_IT+0xda>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec10:	e013      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x102>
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b0c      	cmp	r3, #12
 800ec16:	d104      	bne.n	800ec22 <HAL_TIM_OC_Start_IT+0xea>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2202      	movs	r2, #2
 800ec1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec20:	e00b      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x102>
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	2b10      	cmp	r3, #16
 800ec26:	d104      	bne.n	800ec32 <HAL_TIM_OC_Start_IT+0xfa>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2202      	movs	r2, #2
 800ec2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec30:	e003      	b.n	800ec3a <HAL_TIM_OC_Start_IT+0x102>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2202      	movs	r2, #2
 800ec36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	2b0c      	cmp	r3, #12
 800ec3e:	d841      	bhi.n	800ecc4 <HAL_TIM_OC_Start_IT+0x18c>
 800ec40:	a201      	add	r2, pc, #4	; (adr r2, 800ec48 <HAL_TIM_OC_Start_IT+0x110>)
 800ec42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec46:	bf00      	nop
 800ec48:	0800ec7d 	.word	0x0800ec7d
 800ec4c:	0800ecc5 	.word	0x0800ecc5
 800ec50:	0800ecc5 	.word	0x0800ecc5
 800ec54:	0800ecc5 	.word	0x0800ecc5
 800ec58:	0800ec8f 	.word	0x0800ec8f
 800ec5c:	0800ecc5 	.word	0x0800ecc5
 800ec60:	0800ecc5 	.word	0x0800ecc5
 800ec64:	0800ecc5 	.word	0x0800ecc5
 800ec68:	0800eca1 	.word	0x0800eca1
 800ec6c:	0800ecc5 	.word	0x0800ecc5
 800ec70:	0800ecc5 	.word	0x0800ecc5
 800ec74:	0800ecc5 	.word	0x0800ecc5
 800ec78:	0800ecb3 	.word	0x0800ecb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	68da      	ldr	r2, [r3, #12]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f042 0202 	orr.w	r2, r2, #2
 800ec8a:	60da      	str	r2, [r3, #12]
      break;
 800ec8c:	e01d      	b.n	800ecca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68da      	ldr	r2, [r3, #12]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f042 0204 	orr.w	r2, r2, #4
 800ec9c:	60da      	str	r2, [r3, #12]
      break;
 800ec9e:	e014      	b.n	800ecca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	68da      	ldr	r2, [r3, #12]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f042 0208 	orr.w	r2, r2, #8
 800ecae:	60da      	str	r2, [r3, #12]
      break;
 800ecb0:	e00b      	b.n	800ecca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68da      	ldr	r2, [r3, #12]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f042 0210 	orr.w	r2, r2, #16
 800ecc0:	60da      	str	r2, [r3, #12]
      break;
 800ecc2:	e002      	b.n	800ecca <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ecc8:	bf00      	nop
  }

  if (status == HAL_OK)
 800ecca:	7bfb      	ldrb	r3, [r7, #15]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d174      	bne.n	800edba <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f001 f917 	bl	800ff0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4a38      	ldr	r2, [pc, #224]	; (800edc4 <HAL_TIM_OC_Start_IT+0x28c>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d013      	beq.n	800ed10 <HAL_TIM_OC_Start_IT+0x1d8>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a36      	ldr	r2, [pc, #216]	; (800edc8 <HAL_TIM_OC_Start_IT+0x290>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d00e      	beq.n	800ed10 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a35      	ldr	r2, [pc, #212]	; (800edcc <HAL_TIM_OC_Start_IT+0x294>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d009      	beq.n	800ed10 <HAL_TIM_OC_Start_IT+0x1d8>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a33      	ldr	r2, [pc, #204]	; (800edd0 <HAL_TIM_OC_Start_IT+0x298>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d004      	beq.n	800ed10 <HAL_TIM_OC_Start_IT+0x1d8>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4a32      	ldr	r2, [pc, #200]	; (800edd4 <HAL_TIM_OC_Start_IT+0x29c>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d101      	bne.n	800ed14 <HAL_TIM_OC_Start_IT+0x1dc>
 800ed10:	2301      	movs	r3, #1
 800ed12:	e000      	b.n	800ed16 <HAL_TIM_OC_Start_IT+0x1de>
 800ed14:	2300      	movs	r3, #0
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d007      	beq.n	800ed2a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a25      	ldr	r2, [pc, #148]	; (800edc4 <HAL_TIM_OC_Start_IT+0x28c>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d022      	beq.n	800ed7a <HAL_TIM_OC_Start_IT+0x242>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed3c:	d01d      	beq.n	800ed7a <HAL_TIM_OC_Start_IT+0x242>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a25      	ldr	r2, [pc, #148]	; (800edd8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d018      	beq.n	800ed7a <HAL_TIM_OC_Start_IT+0x242>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a23      	ldr	r2, [pc, #140]	; (800eddc <HAL_TIM_OC_Start_IT+0x2a4>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d013      	beq.n	800ed7a <HAL_TIM_OC_Start_IT+0x242>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a22      	ldr	r2, [pc, #136]	; (800ede0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d00e      	beq.n	800ed7a <HAL_TIM_OC_Start_IT+0x242>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a19      	ldr	r2, [pc, #100]	; (800edc8 <HAL_TIM_OC_Start_IT+0x290>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d009      	beq.n	800ed7a <HAL_TIM_OC_Start_IT+0x242>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a1e      	ldr	r2, [pc, #120]	; (800ede4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d004      	beq.n	800ed7a <HAL_TIM_OC_Start_IT+0x242>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a15      	ldr	r2, [pc, #84]	; (800edcc <HAL_TIM_OC_Start_IT+0x294>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d115      	bne.n	800eda6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	689a      	ldr	r2, [r3, #8]
 800ed80:	4b19      	ldr	r3, [pc, #100]	; (800ede8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ed82:	4013      	ands	r3, r2
 800ed84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	2b06      	cmp	r3, #6
 800ed8a:	d015      	beq.n	800edb8 <HAL_TIM_OC_Start_IT+0x280>
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed92:	d011      	beq.n	800edb8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f042 0201 	orr.w	r2, r2, #1
 800eda2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eda4:	e008      	b.n	800edb8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f042 0201 	orr.w	r2, r2, #1
 800edb4:	601a      	str	r2, [r3, #0]
 800edb6:	e000      	b.n	800edba <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edb8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800edba:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	40010000 	.word	0x40010000
 800edc8:	40010400 	.word	0x40010400
 800edcc:	40014000 	.word	0x40014000
 800edd0:	40014400 	.word	0x40014400
 800edd4:	40014800 	.word	0x40014800
 800edd8:	40000400 	.word	0x40000400
 800eddc:	40000800 	.word	0x40000800
 800ede0:	40000c00 	.word	0x40000c00
 800ede4:	40001800 	.word	0x40001800
 800ede8:	00010007 	.word	0x00010007

0800edec <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b0c      	cmp	r3, #12
 800edfe:	d841      	bhi.n	800ee84 <HAL_TIM_OC_Stop_IT+0x98>
 800ee00:	a201      	add	r2, pc, #4	; (adr r2, 800ee08 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ee02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee06:	bf00      	nop
 800ee08:	0800ee3d 	.word	0x0800ee3d
 800ee0c:	0800ee85 	.word	0x0800ee85
 800ee10:	0800ee85 	.word	0x0800ee85
 800ee14:	0800ee85 	.word	0x0800ee85
 800ee18:	0800ee4f 	.word	0x0800ee4f
 800ee1c:	0800ee85 	.word	0x0800ee85
 800ee20:	0800ee85 	.word	0x0800ee85
 800ee24:	0800ee85 	.word	0x0800ee85
 800ee28:	0800ee61 	.word	0x0800ee61
 800ee2c:	0800ee85 	.word	0x0800ee85
 800ee30:	0800ee85 	.word	0x0800ee85
 800ee34:	0800ee85 	.word	0x0800ee85
 800ee38:	0800ee73 	.word	0x0800ee73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68da      	ldr	r2, [r3, #12]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f022 0202 	bic.w	r2, r2, #2
 800ee4a:	60da      	str	r2, [r3, #12]
      break;
 800ee4c:	e01d      	b.n	800ee8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	68da      	ldr	r2, [r3, #12]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f022 0204 	bic.w	r2, r2, #4
 800ee5c:	60da      	str	r2, [r3, #12]
      break;
 800ee5e:	e014      	b.n	800ee8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	68da      	ldr	r2, [r3, #12]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f022 0208 	bic.w	r2, r2, #8
 800ee6e:	60da      	str	r2, [r3, #12]
      break;
 800ee70:	e00b      	b.n	800ee8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	68da      	ldr	r2, [r3, #12]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f022 0210 	bic.w	r2, r2, #16
 800ee80:	60da      	str	r2, [r3, #12]
      break;
 800ee82:	e002      	b.n	800ee8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	73fb      	strb	r3, [r7, #15]
      break;
 800ee88:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f040 8081 	bne.w	800ef94 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2200      	movs	r2, #0
 800ee98:	6839      	ldr	r1, [r7, #0]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f001 f836 	bl	800ff0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a3e      	ldr	r2, [pc, #248]	; (800efa0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d013      	beq.n	800eed2 <HAL_TIM_OC_Stop_IT+0xe6>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a3d      	ldr	r2, [pc, #244]	; (800efa4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d00e      	beq.n	800eed2 <HAL_TIM_OC_Stop_IT+0xe6>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a3b      	ldr	r2, [pc, #236]	; (800efa8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d009      	beq.n	800eed2 <HAL_TIM_OC_Stop_IT+0xe6>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a3a      	ldr	r2, [pc, #232]	; (800efac <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d004      	beq.n	800eed2 <HAL_TIM_OC_Stop_IT+0xe6>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a38      	ldr	r2, [pc, #224]	; (800efb0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d101      	bne.n	800eed6 <HAL_TIM_OC_Stop_IT+0xea>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e000      	b.n	800eed8 <HAL_TIM_OC_Stop_IT+0xec>
 800eed6:	2300      	movs	r3, #0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d017      	beq.n	800ef0c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6a1a      	ldr	r2, [r3, #32]
 800eee2:	f241 1311 	movw	r3, #4369	; 0x1111
 800eee6:	4013      	ands	r3, r2
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10f      	bne.n	800ef0c <HAL_TIM_OC_Stop_IT+0x120>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	6a1a      	ldr	r2, [r3, #32]
 800eef2:	f240 4344 	movw	r3, #1092	; 0x444
 800eef6:	4013      	ands	r3, r2
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d107      	bne.n	800ef0c <HAL_TIM_OC_Stop_IT+0x120>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ef0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6a1a      	ldr	r2, [r3, #32]
 800ef12:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef16:	4013      	ands	r3, r2
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10f      	bne.n	800ef3c <HAL_TIM_OC_Stop_IT+0x150>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6a1a      	ldr	r2, [r3, #32]
 800ef22:	f240 4344 	movw	r3, #1092	; 0x444
 800ef26:	4013      	ands	r3, r2
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d107      	bne.n	800ef3c <HAL_TIM_OC_Stop_IT+0x150>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f022 0201 	bic.w	r2, r2, #1
 800ef3a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d104      	bne.n	800ef4c <HAL_TIM_OC_Stop_IT+0x160>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef4a:	e023      	b.n	800ef94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	2b04      	cmp	r3, #4
 800ef50:	d104      	bne.n	800ef5c <HAL_TIM_OC_Stop_IT+0x170>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef5a:	e01b      	b.n	800ef94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	2b08      	cmp	r3, #8
 800ef60:	d104      	bne.n	800ef6c <HAL_TIM_OC_Stop_IT+0x180>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef6a:	e013      	b.n	800ef94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	2b0c      	cmp	r3, #12
 800ef70:	d104      	bne.n	800ef7c <HAL_TIM_OC_Stop_IT+0x190>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef7a:	e00b      	b.n	800ef94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2b10      	cmp	r3, #16
 800ef80:	d104      	bne.n	800ef8c <HAL_TIM_OC_Stop_IT+0x1a0>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2201      	movs	r2, #1
 800ef86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef8a:	e003      	b.n	800ef94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ef94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3710      	adds	r7, #16
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	40010000 	.word	0x40010000
 800efa4:	40010400 	.word	0x40010400
 800efa8:	40014000 	.word	0x40014000
 800efac:	40014400 	.word	0x40014400
 800efb0:	40014800 	.word	0x40014800

0800efb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d101      	bne.n	800efc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	e049      	b.n	800f05a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d106      	bne.n	800efe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 f841 	bl	800f062 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2202      	movs	r2, #2
 800efe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	3304      	adds	r3, #4
 800eff0:	4619      	mov	r1, r3
 800eff2:	4610      	mov	r0, r2
 800eff4:	f000 fb70 	bl	800f6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2201      	movs	r2, #1
 800f044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2201      	movs	r2, #1
 800f054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f058:	2300      	movs	r3, #0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3708      	adds	r7, #8
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f06a:	bf00      	nop
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b084      	sub	sp, #16
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	f003 0302 	and.w	r3, r3, #2
 800f094:	2b00      	cmp	r3, #0
 800f096:	d020      	beq.n	800f0da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f003 0302 	and.w	r3, r3, #2
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d01b      	beq.n	800f0da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f06f 0202 	mvn.w	r2, #2
 800f0aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	f003 0303 	and.w	r3, r3, #3
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d003      	beq.n	800f0c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f000 faeb 	bl	800f69c <HAL_TIM_IC_CaptureCallback>
 800f0c6:	e005      	b.n	800f0d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7f1 fa99 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 faee 	bl	800f6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	f003 0304 	and.w	r3, r3, #4
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d020      	beq.n	800f126 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f003 0304 	and.w	r3, r3, #4
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d01b      	beq.n	800f126 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f06f 0204 	mvn.w	r2, #4
 800f0f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2202      	movs	r2, #2
 800f0fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 fac5 	bl	800f69c <HAL_TIM_IC_CaptureCallback>
 800f112:	e005      	b.n	800f120 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7f1 fa73 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fac8 	bl	800f6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	f003 0308 	and.w	r3, r3, #8
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d020      	beq.n	800f172 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f003 0308 	and.w	r3, r3, #8
 800f136:	2b00      	cmp	r3, #0
 800f138:	d01b      	beq.n	800f172 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f06f 0208 	mvn.w	r2, #8
 800f142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2204      	movs	r2, #4
 800f148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	69db      	ldr	r3, [r3, #28]
 800f150:	f003 0303 	and.w	r3, r3, #3
 800f154:	2b00      	cmp	r3, #0
 800f156:	d003      	beq.n	800f160 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fa9f 	bl	800f69c <HAL_TIM_IC_CaptureCallback>
 800f15e:	e005      	b.n	800f16c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7f1 fa4d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 faa2 	bl	800f6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	f003 0310 	and.w	r3, r3, #16
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d020      	beq.n	800f1be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f003 0310 	and.w	r3, r3, #16
 800f182:	2b00      	cmp	r3, #0
 800f184:	d01b      	beq.n	800f1be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f06f 0210 	mvn.w	r2, #16
 800f18e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2208      	movs	r2, #8
 800f194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	69db      	ldr	r3, [r3, #28]
 800f19c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d003      	beq.n	800f1ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fa79 	bl	800f69c <HAL_TIM_IC_CaptureCallback>
 800f1aa:	e005      	b.n	800f1b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f7f1 fa27 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 fa7c 	bl	800f6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	f003 0301 	and.w	r3, r3, #1
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00c      	beq.n	800f1e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d007      	beq.n	800f1e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f06f 0201 	mvn.w	r2, #1
 800f1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f7f3 fff5 	bl	80031cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d104      	bne.n	800f1f6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00c      	beq.n	800f210 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d007      	beq.n	800f210 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 ffba 	bl	8010184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00c      	beq.n	800f234 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f220:	2b00      	cmp	r3, #0
 800f222:	d007      	beq.n	800f234 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f22c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 ffb2 	bl	8010198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00c      	beq.n	800f258 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 fa36 	bl	800f6c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	f003 0320 	and.w	r3, r3, #32
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00c      	beq.n	800f27c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f003 0320 	and.w	r3, r3, #32
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d007      	beq.n	800f27c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f06f 0220 	mvn.w	r2, #32
 800f274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 ff7a 	bl	8010170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f27c:	bf00      	nop
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f290:	2300      	movs	r3, #0
 800f292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d101      	bne.n	800f2a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f29e:	2302      	movs	r3, #2
 800f2a0:	e0ff      	b.n	800f4a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b14      	cmp	r3, #20
 800f2ae:	f200 80f0 	bhi.w	800f492 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f2b2:	a201      	add	r2, pc, #4	; (adr r2, 800f2b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b8:	0800f30d 	.word	0x0800f30d
 800f2bc:	0800f493 	.word	0x0800f493
 800f2c0:	0800f493 	.word	0x0800f493
 800f2c4:	0800f493 	.word	0x0800f493
 800f2c8:	0800f34d 	.word	0x0800f34d
 800f2cc:	0800f493 	.word	0x0800f493
 800f2d0:	0800f493 	.word	0x0800f493
 800f2d4:	0800f493 	.word	0x0800f493
 800f2d8:	0800f38f 	.word	0x0800f38f
 800f2dc:	0800f493 	.word	0x0800f493
 800f2e0:	0800f493 	.word	0x0800f493
 800f2e4:	0800f493 	.word	0x0800f493
 800f2e8:	0800f3cf 	.word	0x0800f3cf
 800f2ec:	0800f493 	.word	0x0800f493
 800f2f0:	0800f493 	.word	0x0800f493
 800f2f4:	0800f493 	.word	0x0800f493
 800f2f8:	0800f411 	.word	0x0800f411
 800f2fc:	0800f493 	.word	0x0800f493
 800f300:	0800f493 	.word	0x0800f493
 800f304:	0800f493 	.word	0x0800f493
 800f308:	0800f451 	.word	0x0800f451
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68b9      	ldr	r1, [r7, #8]
 800f312:	4618      	mov	r0, r3
 800f314:	f000 fa86 	bl	800f824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f042 0208 	orr.w	r2, r2, #8
 800f326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	699a      	ldr	r2, [r3, #24]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f022 0204 	bic.w	r2, r2, #4
 800f336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	6999      	ldr	r1, [r3, #24]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	691a      	ldr	r2, [r3, #16]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	430a      	orrs	r2, r1
 800f348:	619a      	str	r2, [r3, #24]
      break;
 800f34a:	e0a5      	b.n	800f498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68b9      	ldr	r1, [r7, #8]
 800f352:	4618      	mov	r0, r3
 800f354:	f000 faf6 	bl	800f944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	699a      	ldr	r2, [r3, #24]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	699a      	ldr	r2, [r3, #24]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	6999      	ldr	r1, [r3, #24]
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	021a      	lsls	r2, r3, #8
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	430a      	orrs	r2, r1
 800f38a:	619a      	str	r2, [r3, #24]
      break;
 800f38c:	e084      	b.n	800f498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	4618      	mov	r0, r3
 800f396:	f000 fb5f 	bl	800fa58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	69da      	ldr	r2, [r3, #28]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f042 0208 	orr.w	r2, r2, #8
 800f3a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	69da      	ldr	r2, [r3, #28]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f022 0204 	bic.w	r2, r2, #4
 800f3b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	69d9      	ldr	r1, [r3, #28]
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	691a      	ldr	r2, [r3, #16]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	61da      	str	r2, [r3, #28]
      break;
 800f3cc:	e064      	b.n	800f498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	68b9      	ldr	r1, [r7, #8]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f000 fbc7 	bl	800fb68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	69da      	ldr	r2, [r3, #28]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	69da      	ldr	r2, [r3, #28]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	69d9      	ldr	r1, [r3, #28]
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	691b      	ldr	r3, [r3, #16]
 800f404:	021a      	lsls	r2, r3, #8
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	430a      	orrs	r2, r1
 800f40c:	61da      	str	r2, [r3, #28]
      break;
 800f40e:	e043      	b.n	800f498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68b9      	ldr	r1, [r7, #8]
 800f416:	4618      	mov	r0, r3
 800f418:	f000 fc10 	bl	800fc3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f042 0208 	orr.w	r2, r2, #8
 800f42a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f022 0204 	bic.w	r2, r2, #4
 800f43a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	691a      	ldr	r2, [r3, #16]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	430a      	orrs	r2, r1
 800f44c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f44e:	e023      	b.n	800f498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	68b9      	ldr	r1, [r7, #8]
 800f456:	4618      	mov	r0, r3
 800f458:	f000 fc54 	bl	800fd04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f46a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f47a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	021a      	lsls	r2, r3, #8
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	430a      	orrs	r2, r1
 800f48e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f490:	e002      	b.n	800f498 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f492:	2301      	movs	r3, #1
 800f494:	75fb      	strb	r3, [r7, #23]
      break;
 800f496:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3718      	adds	r7, #24
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop

0800f4ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d101      	bne.n	800f4c8 <HAL_TIM_ConfigClockSource+0x1c>
 800f4c4:	2302      	movs	r3, #2
 800f4c6:	e0dc      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x1d6>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2202      	movs	r2, #2
 800f4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	4b6a      	ldr	r3, [pc, #424]	; (800f68c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f4e4:	4013      	ands	r3, r2
 800f4e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	68ba      	ldr	r2, [r7, #8]
 800f4f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a64      	ldr	r2, [pc, #400]	; (800f690 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	f000 80a9 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f504:	4a62      	ldr	r2, [pc, #392]	; (800f690 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f506:	4293      	cmp	r3, r2
 800f508:	f200 80ae 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f50c:	4a61      	ldr	r2, [pc, #388]	; (800f694 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	f000 80a1 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f514:	4a5f      	ldr	r2, [pc, #380]	; (800f694 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f516:	4293      	cmp	r3, r2
 800f518:	f200 80a6 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f51c:	4a5e      	ldr	r2, [pc, #376]	; (800f698 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	f000 8099 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f524:	4a5c      	ldr	r2, [pc, #368]	; (800f698 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f526:	4293      	cmp	r3, r2
 800f528:	f200 809e 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f52c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f530:	f000 8091 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f534:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f538:	f200 8096 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f53c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f540:	f000 8089 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f548:	f200 808e 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f550:	d03e      	beq.n	800f5d0 <HAL_TIM_ConfigClockSource+0x124>
 800f552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f556:	f200 8087 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f55a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f55e:	f000 8086 	beq.w	800f66e <HAL_TIM_ConfigClockSource+0x1c2>
 800f562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f566:	d87f      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f568:	2b70      	cmp	r3, #112	; 0x70
 800f56a:	d01a      	beq.n	800f5a2 <HAL_TIM_ConfigClockSource+0xf6>
 800f56c:	2b70      	cmp	r3, #112	; 0x70
 800f56e:	d87b      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f570:	2b60      	cmp	r3, #96	; 0x60
 800f572:	d050      	beq.n	800f616 <HAL_TIM_ConfigClockSource+0x16a>
 800f574:	2b60      	cmp	r3, #96	; 0x60
 800f576:	d877      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f578:	2b50      	cmp	r3, #80	; 0x50
 800f57a:	d03c      	beq.n	800f5f6 <HAL_TIM_ConfigClockSource+0x14a>
 800f57c:	2b50      	cmp	r3, #80	; 0x50
 800f57e:	d873      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f580:	2b40      	cmp	r3, #64	; 0x40
 800f582:	d058      	beq.n	800f636 <HAL_TIM_ConfigClockSource+0x18a>
 800f584:	2b40      	cmp	r3, #64	; 0x40
 800f586:	d86f      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f588:	2b30      	cmp	r3, #48	; 0x30
 800f58a:	d064      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f58c:	2b30      	cmp	r3, #48	; 0x30
 800f58e:	d86b      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f590:	2b20      	cmp	r3, #32
 800f592:	d060      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f594:	2b20      	cmp	r3, #32
 800f596:	d867      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d05c      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f59c:	2b10      	cmp	r3, #16
 800f59e:	d05a      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1aa>
 800f5a0:	e062      	b.n	800f668 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6818      	ldr	r0, [r3, #0]
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	6899      	ldr	r1, [r3, #8]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	685a      	ldr	r2, [r3, #4]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	f000 fc8b 	bl	800fecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f5c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	609a      	str	r2, [r3, #8]
      break;
 800f5ce:	e04f      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6818      	ldr	r0, [r3, #0]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	6899      	ldr	r1, [r3, #8]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	f000 fc74 	bl	800fecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	689a      	ldr	r2, [r3, #8]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5f2:	609a      	str	r2, [r3, #8]
      break;
 800f5f4:	e03c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	6859      	ldr	r1, [r3, #4]
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	461a      	mov	r2, r3
 800f604:	f000 fbe4 	bl	800fdd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2150      	movs	r1, #80	; 0x50
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 fc3e 	bl	800fe90 <TIM_ITRx_SetConfig>
      break;
 800f614:	e02c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	6859      	ldr	r1, [r3, #4]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	461a      	mov	r2, r3
 800f624:	f000 fc03 	bl	800fe2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2160      	movs	r1, #96	; 0x60
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fc2e 	bl	800fe90 <TIM_ITRx_SetConfig>
      break;
 800f634:	e01c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6818      	ldr	r0, [r3, #0]
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	6859      	ldr	r1, [r3, #4]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	461a      	mov	r2, r3
 800f644:	f000 fbc4 	bl	800fdd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2140      	movs	r1, #64	; 0x40
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 fc1e 	bl	800fe90 <TIM_ITRx_SetConfig>
      break;
 800f654:	e00c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4619      	mov	r1, r3
 800f660:	4610      	mov	r0, r2
 800f662:	f000 fc15 	bl	800fe90 <TIM_ITRx_SetConfig>
      break;
 800f666:	e003      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f668:	2301      	movs	r3, #1
 800f66a:	73fb      	strb	r3, [r7, #15]
      break;
 800f66c:	e000      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f66e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f680:	7bfb      	ldrb	r3, [r7, #15]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	ffceff88 	.word	0xffceff88
 800f690:	00100040 	.word	0x00100040
 800f694:	00100030 	.word	0x00100030
 800f698:	00100020 	.word	0x00100020

0800f69c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6a4:	bf00      	nop
 800f6a6:	370c      	adds	r7, #12
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6b8:	bf00      	nop
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	4a46      	ldr	r2, [pc, #280]	; (800f804 <TIM_Base_SetConfig+0x12c>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d013      	beq.n	800f718 <TIM_Base_SetConfig+0x40>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6f6:	d00f      	beq.n	800f718 <TIM_Base_SetConfig+0x40>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a43      	ldr	r2, [pc, #268]	; (800f808 <TIM_Base_SetConfig+0x130>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d00b      	beq.n	800f718 <TIM_Base_SetConfig+0x40>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a42      	ldr	r2, [pc, #264]	; (800f80c <TIM_Base_SetConfig+0x134>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d007      	beq.n	800f718 <TIM_Base_SetConfig+0x40>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a41      	ldr	r2, [pc, #260]	; (800f810 <TIM_Base_SetConfig+0x138>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d003      	beq.n	800f718 <TIM_Base_SetConfig+0x40>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a40      	ldr	r2, [pc, #256]	; (800f814 <TIM_Base_SetConfig+0x13c>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d108      	bne.n	800f72a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f71e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	4313      	orrs	r3, r2
 800f728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4a35      	ldr	r2, [pc, #212]	; (800f804 <TIM_Base_SetConfig+0x12c>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d01f      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f738:	d01b      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a32      	ldr	r2, [pc, #200]	; (800f808 <TIM_Base_SetConfig+0x130>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d017      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a31      	ldr	r2, [pc, #196]	; (800f80c <TIM_Base_SetConfig+0x134>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d013      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a30      	ldr	r2, [pc, #192]	; (800f810 <TIM_Base_SetConfig+0x138>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d00f      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a2f      	ldr	r2, [pc, #188]	; (800f814 <TIM_Base_SetConfig+0x13c>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d00b      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a2e      	ldr	r2, [pc, #184]	; (800f818 <TIM_Base_SetConfig+0x140>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d007      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4a2d      	ldr	r2, [pc, #180]	; (800f81c <TIM_Base_SetConfig+0x144>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d003      	beq.n	800f772 <TIM_Base_SetConfig+0x9a>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	4a2c      	ldr	r2, [pc, #176]	; (800f820 <TIM_Base_SetConfig+0x148>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d108      	bne.n	800f784 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	4313      	orrs	r3, r2
 800f782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	695b      	ldr	r3, [r3, #20]
 800f78e:	4313      	orrs	r3, r2
 800f790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	689a      	ldr	r2, [r3, #8]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a16      	ldr	r2, [pc, #88]	; (800f804 <TIM_Base_SetConfig+0x12c>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d00f      	beq.n	800f7d0 <TIM_Base_SetConfig+0xf8>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a18      	ldr	r2, [pc, #96]	; (800f814 <TIM_Base_SetConfig+0x13c>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d00b      	beq.n	800f7d0 <TIM_Base_SetConfig+0xf8>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a17      	ldr	r2, [pc, #92]	; (800f818 <TIM_Base_SetConfig+0x140>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d007      	beq.n	800f7d0 <TIM_Base_SetConfig+0xf8>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a16      	ldr	r2, [pc, #88]	; (800f81c <TIM_Base_SetConfig+0x144>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d003      	beq.n	800f7d0 <TIM_Base_SetConfig+0xf8>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4a15      	ldr	r2, [pc, #84]	; (800f820 <TIM_Base_SetConfig+0x148>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d103      	bne.n	800f7d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	691a      	ldr	r2, [r3, #16]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	f003 0301 	and.w	r3, r3, #1
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d105      	bne.n	800f7f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	f023 0201 	bic.w	r2, r3, #1
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	611a      	str	r2, [r3, #16]
  }
}
 800f7f6:	bf00      	nop
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	40010000 	.word	0x40010000
 800f808:	40000400 	.word	0x40000400
 800f80c:	40000800 	.word	0x40000800
 800f810:	40000c00 	.word	0x40000c00
 800f814:	40010400 	.word	0x40010400
 800f818:	40014000 	.word	0x40014000
 800f81c:	40014400 	.word	0x40014400
 800f820:	40014800 	.word	0x40014800

0800f824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a1b      	ldr	r3, [r3, #32]
 800f832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6a1b      	ldr	r3, [r3, #32]
 800f838:	f023 0201 	bic.w	r2, r3, #1
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	4b37      	ldr	r3, [pc, #220]	; (800f92c <TIM_OC1_SetConfig+0x108>)
 800f850:	4013      	ands	r3, r2
 800f852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f023 0303 	bic.w	r3, r3, #3
 800f85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	4313      	orrs	r3, r2
 800f864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	f023 0302 	bic.w	r3, r3, #2
 800f86c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	697a      	ldr	r2, [r7, #20]
 800f874:	4313      	orrs	r3, r2
 800f876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a2d      	ldr	r2, [pc, #180]	; (800f930 <TIM_OC1_SetConfig+0x10c>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d00f      	beq.n	800f8a0 <TIM_OC1_SetConfig+0x7c>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a2c      	ldr	r2, [pc, #176]	; (800f934 <TIM_OC1_SetConfig+0x110>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d00b      	beq.n	800f8a0 <TIM_OC1_SetConfig+0x7c>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4a2b      	ldr	r2, [pc, #172]	; (800f938 <TIM_OC1_SetConfig+0x114>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d007      	beq.n	800f8a0 <TIM_OC1_SetConfig+0x7c>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a2a      	ldr	r2, [pc, #168]	; (800f93c <TIM_OC1_SetConfig+0x118>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d003      	beq.n	800f8a0 <TIM_OC1_SetConfig+0x7c>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a29      	ldr	r2, [pc, #164]	; (800f940 <TIM_OC1_SetConfig+0x11c>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d10c      	bne.n	800f8ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	f023 0308 	bic.w	r3, r3, #8
 800f8a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	697a      	ldr	r2, [r7, #20]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	f023 0304 	bic.w	r3, r3, #4
 800f8b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4a1c      	ldr	r2, [pc, #112]	; (800f930 <TIM_OC1_SetConfig+0x10c>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d00f      	beq.n	800f8e2 <TIM_OC1_SetConfig+0xbe>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4a1b      	ldr	r2, [pc, #108]	; (800f934 <TIM_OC1_SetConfig+0x110>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d00b      	beq.n	800f8e2 <TIM_OC1_SetConfig+0xbe>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a1a      	ldr	r2, [pc, #104]	; (800f938 <TIM_OC1_SetConfig+0x114>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d007      	beq.n	800f8e2 <TIM_OC1_SetConfig+0xbe>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a19      	ldr	r2, [pc, #100]	; (800f93c <TIM_OC1_SetConfig+0x118>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d003      	beq.n	800f8e2 <TIM_OC1_SetConfig+0xbe>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4a18      	ldr	r2, [pc, #96]	; (800f940 <TIM_OC1_SetConfig+0x11c>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d111      	bne.n	800f906 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	695b      	ldr	r3, [r3, #20]
 800f8f6:	693a      	ldr	r2, [r7, #16]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	699b      	ldr	r3, [r3, #24]
 800f900:	693a      	ldr	r2, [r7, #16]
 800f902:	4313      	orrs	r3, r2
 800f904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	685a      	ldr	r2, [r3, #4]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	697a      	ldr	r2, [r7, #20]
 800f91e:	621a      	str	r2, [r3, #32]
}
 800f920:	bf00      	nop
 800f922:	371c      	adds	r7, #28
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr
 800f92c:	fffeff8f 	.word	0xfffeff8f
 800f930:	40010000 	.word	0x40010000
 800f934:	40010400 	.word	0x40010400
 800f938:	40014000 	.word	0x40014000
 800f93c:	40014400 	.word	0x40014400
 800f940:	40014800 	.word	0x40014800

0800f944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f944:	b480      	push	{r7}
 800f946:	b087      	sub	sp, #28
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a1b      	ldr	r3, [r3, #32]
 800f958:	f023 0210 	bic.w	r2, r3, #16
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	699b      	ldr	r3, [r3, #24]
 800f96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	4b34      	ldr	r3, [pc, #208]	; (800fa40 <TIM_OC2_SetConfig+0xfc>)
 800f970:	4013      	ands	r3, r2
 800f972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f97a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	021b      	lsls	r3, r3, #8
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	4313      	orrs	r3, r2
 800f986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	f023 0320 	bic.w	r3, r3, #32
 800f98e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	689b      	ldr	r3, [r3, #8]
 800f994:	011b      	lsls	r3, r3, #4
 800f996:	697a      	ldr	r2, [r7, #20]
 800f998:	4313      	orrs	r3, r2
 800f99a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a29      	ldr	r2, [pc, #164]	; (800fa44 <TIM_OC2_SetConfig+0x100>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d003      	beq.n	800f9ac <TIM_OC2_SetConfig+0x68>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4a28      	ldr	r2, [pc, #160]	; (800fa48 <TIM_OC2_SetConfig+0x104>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d10d      	bne.n	800f9c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	011b      	lsls	r3, r3, #4
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4a1e      	ldr	r2, [pc, #120]	; (800fa44 <TIM_OC2_SetConfig+0x100>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d00f      	beq.n	800f9f0 <TIM_OC2_SetConfig+0xac>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a1d      	ldr	r2, [pc, #116]	; (800fa48 <TIM_OC2_SetConfig+0x104>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d00b      	beq.n	800f9f0 <TIM_OC2_SetConfig+0xac>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a1c      	ldr	r2, [pc, #112]	; (800fa4c <TIM_OC2_SetConfig+0x108>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d007      	beq.n	800f9f0 <TIM_OC2_SetConfig+0xac>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a1b      	ldr	r2, [pc, #108]	; (800fa50 <TIM_OC2_SetConfig+0x10c>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d003      	beq.n	800f9f0 <TIM_OC2_SetConfig+0xac>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a1a      	ldr	r2, [pc, #104]	; (800fa54 <TIM_OC2_SetConfig+0x110>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d113      	bne.n	800fa18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	695b      	ldr	r3, [r3, #20]
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	699b      	ldr	r3, [r3, #24]
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	693a      	ldr	r2, [r7, #16]
 800fa14:	4313      	orrs	r3, r2
 800fa16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	693a      	ldr	r2, [r7, #16]
 800fa1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	697a      	ldr	r2, [r7, #20]
 800fa30:	621a      	str	r2, [r3, #32]
}
 800fa32:	bf00      	nop
 800fa34:	371c      	adds	r7, #28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	feff8fff 	.word	0xfeff8fff
 800fa44:	40010000 	.word	0x40010000
 800fa48:	40010400 	.word	0x40010400
 800fa4c:	40014000 	.word	0x40014000
 800fa50:	40014400 	.word	0x40014400
 800fa54:	40014800 	.word	0x40014800

0800fa58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b087      	sub	sp, #28
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6a1b      	ldr	r3, [r3, #32]
 800fa6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	69db      	ldr	r3, [r3, #28]
 800fa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	4b33      	ldr	r3, [pc, #204]	; (800fb50 <TIM_OC3_SetConfig+0xf8>)
 800fa84:	4013      	ands	r3, r2
 800fa86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f023 0303 	bic.w	r3, r3, #3
 800fa8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800faa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	021b      	lsls	r3, r3, #8
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	4313      	orrs	r3, r2
 800faac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4a28      	ldr	r2, [pc, #160]	; (800fb54 <TIM_OC3_SetConfig+0xfc>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d003      	beq.n	800fabe <TIM_OC3_SetConfig+0x66>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4a27      	ldr	r2, [pc, #156]	; (800fb58 <TIM_OC3_SetConfig+0x100>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d10d      	bne.n	800fada <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	021b      	lsls	r3, r3, #8
 800facc:	697a      	ldr	r2, [r7, #20]
 800face:	4313      	orrs	r3, r2
 800fad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4a1d      	ldr	r2, [pc, #116]	; (800fb54 <TIM_OC3_SetConfig+0xfc>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d00f      	beq.n	800fb02 <TIM_OC3_SetConfig+0xaa>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4a1c      	ldr	r2, [pc, #112]	; (800fb58 <TIM_OC3_SetConfig+0x100>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d00b      	beq.n	800fb02 <TIM_OC3_SetConfig+0xaa>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4a1b      	ldr	r2, [pc, #108]	; (800fb5c <TIM_OC3_SetConfig+0x104>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d007      	beq.n	800fb02 <TIM_OC3_SetConfig+0xaa>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4a1a      	ldr	r2, [pc, #104]	; (800fb60 <TIM_OC3_SetConfig+0x108>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d003      	beq.n	800fb02 <TIM_OC3_SetConfig+0xaa>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4a19      	ldr	r2, [pc, #100]	; (800fb64 <TIM_OC3_SetConfig+0x10c>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d113      	bne.n	800fb2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	695b      	ldr	r3, [r3, #20]
 800fb16:	011b      	lsls	r3, r3, #4
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	699b      	ldr	r3, [r3, #24]
 800fb22:	011b      	lsls	r3, r3, #4
 800fb24:	693a      	ldr	r2, [r7, #16]
 800fb26:	4313      	orrs	r3, r2
 800fb28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	693a      	ldr	r2, [r7, #16]
 800fb2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	685a      	ldr	r2, [r3, #4]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	697a      	ldr	r2, [r7, #20]
 800fb42:	621a      	str	r2, [r3, #32]
}
 800fb44:	bf00      	nop
 800fb46:	371c      	adds	r7, #28
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr
 800fb50:	fffeff8f 	.word	0xfffeff8f
 800fb54:	40010000 	.word	0x40010000
 800fb58:	40010400 	.word	0x40010400
 800fb5c:	40014000 	.word	0x40014000
 800fb60:	40014400 	.word	0x40014400
 800fb64:	40014800 	.word	0x40014800

0800fb68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b087      	sub	sp, #28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	69db      	ldr	r3, [r3, #28]
 800fb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb90:	68fa      	ldr	r2, [r7, #12]
 800fb92:	4b24      	ldr	r3, [pc, #144]	; (800fc24 <TIM_OC4_SetConfig+0xbc>)
 800fb94:	4013      	ands	r3, r2
 800fb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	021b      	lsls	r3, r3, #8
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	031b      	lsls	r3, r3, #12
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a19      	ldr	r2, [pc, #100]	; (800fc28 <TIM_OC4_SetConfig+0xc0>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d00f      	beq.n	800fbe8 <TIM_OC4_SetConfig+0x80>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a18      	ldr	r2, [pc, #96]	; (800fc2c <TIM_OC4_SetConfig+0xc4>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d00b      	beq.n	800fbe8 <TIM_OC4_SetConfig+0x80>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4a17      	ldr	r2, [pc, #92]	; (800fc30 <TIM_OC4_SetConfig+0xc8>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d007      	beq.n	800fbe8 <TIM_OC4_SetConfig+0x80>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a16      	ldr	r2, [pc, #88]	; (800fc34 <TIM_OC4_SetConfig+0xcc>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d003      	beq.n	800fbe8 <TIM_OC4_SetConfig+0x80>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a15      	ldr	r2, [pc, #84]	; (800fc38 <TIM_OC4_SetConfig+0xd0>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d109      	bne.n	800fbfc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	695b      	ldr	r3, [r3, #20]
 800fbf4:	019b      	lsls	r3, r3, #6
 800fbf6:	697a      	ldr	r2, [r7, #20]
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	685a      	ldr	r2, [r3, #4]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	693a      	ldr	r2, [r7, #16]
 800fc14:	621a      	str	r2, [r3, #32]
}
 800fc16:	bf00      	nop
 800fc18:	371c      	adds	r7, #28
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	feff8fff 	.word	0xfeff8fff
 800fc28:	40010000 	.word	0x40010000
 800fc2c:	40010400 	.word	0x40010400
 800fc30:	40014000 	.word	0x40014000
 800fc34:	40014400 	.word	0x40014400
 800fc38:	40014800 	.word	0x40014800

0800fc3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b087      	sub	sp, #28
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a1b      	ldr	r3, [r3, #32]
 800fc4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a1b      	ldr	r3, [r3, #32]
 800fc50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	4b21      	ldr	r3, [pc, #132]	; (800fcec <TIM_OC5_SetConfig+0xb0>)
 800fc68:	4013      	ands	r3, r2
 800fc6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	68fa      	ldr	r2, [r7, #12]
 800fc72:	4313      	orrs	r3, r2
 800fc74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fc7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	041b      	lsls	r3, r3, #16
 800fc84:	693a      	ldr	r2, [r7, #16]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a18      	ldr	r2, [pc, #96]	; (800fcf0 <TIM_OC5_SetConfig+0xb4>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d00f      	beq.n	800fcb2 <TIM_OC5_SetConfig+0x76>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4a17      	ldr	r2, [pc, #92]	; (800fcf4 <TIM_OC5_SetConfig+0xb8>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d00b      	beq.n	800fcb2 <TIM_OC5_SetConfig+0x76>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a16      	ldr	r2, [pc, #88]	; (800fcf8 <TIM_OC5_SetConfig+0xbc>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d007      	beq.n	800fcb2 <TIM_OC5_SetConfig+0x76>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4a15      	ldr	r2, [pc, #84]	; (800fcfc <TIM_OC5_SetConfig+0xc0>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d003      	beq.n	800fcb2 <TIM_OC5_SetConfig+0x76>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a14      	ldr	r2, [pc, #80]	; (800fd00 <TIM_OC5_SetConfig+0xc4>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d109      	bne.n	800fcc6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	695b      	ldr	r3, [r3, #20]
 800fcbe:	021b      	lsls	r3, r3, #8
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	693a      	ldr	r2, [r7, #16]
 800fcde:	621a      	str	r2, [r3, #32]
}
 800fce0:	bf00      	nop
 800fce2:	371c      	adds	r7, #28
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	fffeff8f 	.word	0xfffeff8f
 800fcf0:	40010000 	.word	0x40010000
 800fcf4:	40010400 	.word	0x40010400
 800fcf8:	40014000 	.word	0x40014000
 800fcfc:	40014400 	.word	0x40014400
 800fd00:	40014800 	.word	0x40014800

0800fd04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b087      	sub	sp, #28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6a1b      	ldr	r3, [r3, #32]
 800fd12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6a1b      	ldr	r3, [r3, #32]
 800fd18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	4b22      	ldr	r3, [pc, #136]	; (800fdb8 <TIM_OC6_SetConfig+0xb4>)
 800fd30:	4013      	ands	r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	021b      	lsls	r3, r3, #8
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	051b      	lsls	r3, r3, #20
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	4313      	orrs	r3, r2
 800fd52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4a19      	ldr	r2, [pc, #100]	; (800fdbc <TIM_OC6_SetConfig+0xb8>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d00f      	beq.n	800fd7c <TIM_OC6_SetConfig+0x78>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a18      	ldr	r2, [pc, #96]	; (800fdc0 <TIM_OC6_SetConfig+0xbc>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d00b      	beq.n	800fd7c <TIM_OC6_SetConfig+0x78>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a17      	ldr	r2, [pc, #92]	; (800fdc4 <TIM_OC6_SetConfig+0xc0>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d007      	beq.n	800fd7c <TIM_OC6_SetConfig+0x78>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a16      	ldr	r2, [pc, #88]	; (800fdc8 <TIM_OC6_SetConfig+0xc4>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d003      	beq.n	800fd7c <TIM_OC6_SetConfig+0x78>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a15      	ldr	r2, [pc, #84]	; (800fdcc <TIM_OC6_SetConfig+0xc8>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d109      	bne.n	800fd90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	695b      	ldr	r3, [r3, #20]
 800fd88:	029b      	lsls	r3, r3, #10
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	693a      	ldr	r2, [r7, #16]
 800fda8:	621a      	str	r2, [r3, #32]
}
 800fdaa:	bf00      	nop
 800fdac:	371c      	adds	r7, #28
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	feff8fff 	.word	0xfeff8fff
 800fdbc:	40010000 	.word	0x40010000
 800fdc0:	40010400 	.word	0x40010400
 800fdc4:	40014000 	.word	0x40014000
 800fdc8:	40014400 	.word	0x40014400
 800fdcc:	40014800 	.word	0x40014800

0800fdd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b087      	sub	sp, #28
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6a1b      	ldr	r3, [r3, #32]
 800fde0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	6a1b      	ldr	r3, [r3, #32]
 800fde6:	f023 0201 	bic.w	r2, r3, #1
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	699b      	ldr	r3, [r3, #24]
 800fdf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fdfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	011b      	lsls	r3, r3, #4
 800fe00:	693a      	ldr	r2, [r7, #16]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	f023 030a 	bic.w	r3, r3, #10
 800fe0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	4313      	orrs	r3, r2
 800fe14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	697a      	ldr	r2, [r7, #20]
 800fe20:	621a      	str	r2, [r3, #32]
}
 800fe22:	bf00      	nop
 800fe24:	371c      	adds	r7, #28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr

0800fe2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe2e:	b480      	push	{r7}
 800fe30:	b087      	sub	sp, #28
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	60f8      	str	r0, [r7, #12]
 800fe36:	60b9      	str	r1, [r7, #8]
 800fe38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6a1b      	ldr	r3, [r3, #32]
 800fe3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	6a1b      	ldr	r3, [r3, #32]
 800fe44:	f023 0210 	bic.w	r2, r3, #16
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	031b      	lsls	r3, r3, #12
 800fe5e:	693a      	ldr	r2, [r7, #16]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	011b      	lsls	r3, r3, #4
 800fe70:	697a      	ldr	r2, [r7, #20]
 800fe72:	4313      	orrs	r3, r2
 800fe74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	621a      	str	r2, [r3, #32]
}
 800fe82:	bf00      	nop
 800fe84:	371c      	adds	r7, #28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
	...

0800fe90 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b085      	sub	sp, #20
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	4b09      	ldr	r3, [pc, #36]	; (800fec8 <TIM_ITRx_SetConfig+0x38>)
 800fea4:	4013      	ands	r3, r2
 800fea6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fea8:	683a      	ldr	r2, [r7, #0]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	4313      	orrs	r3, r2
 800feae:	f043 0307 	orr.w	r3, r3, #7
 800feb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	609a      	str	r2, [r3, #8]
}
 800feba:	bf00      	nop
 800febc:	3714      	adds	r7, #20
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	ffcfff8f 	.word	0xffcfff8f

0800fecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fecc:	b480      	push	{r7}
 800fece:	b087      	sub	sp, #28
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
 800fed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	021a      	lsls	r2, r3, #8
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	431a      	orrs	r2, r3
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	4313      	orrs	r3, r2
 800fef4:	697a      	ldr	r2, [r7, #20]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	609a      	str	r2, [r3, #8]
}
 800ff00:	bf00      	nop
 800ff02:	371c      	adds	r7, #28
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b087      	sub	sp, #28
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	f003 031f 	and.w	r3, r3, #31
 800ff1e:	2201      	movs	r2, #1
 800ff20:	fa02 f303 	lsl.w	r3, r2, r3
 800ff24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6a1a      	ldr	r2, [r3, #32]
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	43db      	mvns	r3, r3
 800ff2e:	401a      	ands	r2, r3
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6a1a      	ldr	r2, [r3, #32]
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	f003 031f 	and.w	r3, r3, #31
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	fa01 f303 	lsl.w	r3, r1, r3
 800ff44:	431a      	orrs	r2, r3
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	621a      	str	r2, [r3, #32]
}
 800ff4a:	bf00      	nop
 800ff4c:	371c      	adds	r7, #28
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
	...

0800ff58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d101      	bne.n	800ff70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff6c:	2302      	movs	r3, #2
 800ff6e:	e06d      	b.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2202      	movs	r2, #2
 800ff7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a30      	ldr	r2, [pc, #192]	; (8010058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d004      	beq.n	800ffa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4a2f      	ldr	r2, [pc, #188]	; (801005c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d108      	bne.n	800ffb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ffaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4a20      	ldr	r2, [pc, #128]	; (8010058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d022      	beq.n	8010020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffe2:	d01d      	beq.n	8010020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4a1d      	ldr	r2, [pc, #116]	; (8010060 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d018      	beq.n	8010020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4a1c      	ldr	r2, [pc, #112]	; (8010064 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d013      	beq.n	8010020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a1a      	ldr	r2, [pc, #104]	; (8010068 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d00e      	beq.n	8010020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a15      	ldr	r2, [pc, #84]	; (801005c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d009      	beq.n	8010020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a16      	ldr	r2, [pc, #88]	; (801006c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d004      	beq.n	8010020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a15      	ldr	r2, [pc, #84]	; (8010070 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d10c      	bne.n	801003a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010026:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	4313      	orrs	r3, r2
 8010030:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	68ba      	ldr	r2, [r7, #8]
 8010038:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2201      	movs	r2, #1
 801003e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2200      	movs	r2, #0
 8010046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801004a:	2300      	movs	r3, #0
}
 801004c:	4618      	mov	r0, r3
 801004e:	3714      	adds	r7, #20
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr
 8010058:	40010000 	.word	0x40010000
 801005c:	40010400 	.word	0x40010400
 8010060:	40000400 	.word	0x40000400
 8010064:	40000800 	.word	0x40000800
 8010068:	40000c00 	.word	0x40000c00
 801006c:	40001800 	.word	0x40001800
 8010070:	40014000 	.word	0x40014000

08010074 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801007e:	2300      	movs	r3, #0
 8010080:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010088:	2b01      	cmp	r3, #1
 801008a:	d101      	bne.n	8010090 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801008c:	2302      	movs	r3, #2
 801008e:	e065      	b.n	801015c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2201      	movs	r2, #1
 8010094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	4313      	orrs	r3, r2
 80100a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	689b      	ldr	r3, [r3, #8]
 80100b0:	4313      	orrs	r3, r2
 80100b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	4313      	orrs	r3, r2
 80100c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4313      	orrs	r3, r2
 80100ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	4313      	orrs	r3, r2
 80100dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	695b      	ldr	r3, [r3, #20]
 80100e8:	4313      	orrs	r3, r2
 80100ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f6:	4313      	orrs	r3, r2
 80100f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	699b      	ldr	r3, [r3, #24]
 8010104:	041b      	lsls	r3, r3, #16
 8010106:	4313      	orrs	r3, r2
 8010108:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4a16      	ldr	r2, [pc, #88]	; (8010168 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d004      	beq.n	801011e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4a14      	ldr	r2, [pc, #80]	; (801016c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d115      	bne.n	801014a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010128:	051b      	lsls	r3, r3, #20
 801012a:	4313      	orrs	r3, r2
 801012c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	69db      	ldr	r3, [r3, #28]
 8010138:	4313      	orrs	r3, r2
 801013a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	6a1b      	ldr	r3, [r3, #32]
 8010146:	4313      	orrs	r3, r2
 8010148:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801015a:	2300      	movs	r3, #0
}
 801015c:	4618      	mov	r0, r3
 801015e:	3714      	adds	r7, #20
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr
 8010168:	40010000 	.word	0x40010000
 801016c:	40010400 	.word	0x40010400

08010170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801018c:	bf00      	nop
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80101a0:	bf00      	nop
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101ba:	2301      	movs	r3, #1
 80101bc:	e042      	b.n	8010244 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d106      	bne.n	80101d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7f3 fc01 	bl	80039d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2224      	movs	r2, #36	; 0x24
 80101da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f022 0201 	bic.w	r2, r2, #1
 80101ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f001 fc42 	bl	8011a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f000 fed7 	bl	8010fb0 <UART_SetConfig>
 8010202:	4603      	mov	r3, r0
 8010204:	2b01      	cmp	r3, #1
 8010206:	d101      	bne.n	801020c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	e01b      	b.n	8010244 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801021a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	689a      	ldr	r2, [r3, #8]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801022a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f042 0201 	orr.w	r2, r2, #1
 801023a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f001 fcc1 	bl	8011bc4 <UART_CheckIdleState>
 8010242:	4603      	mov	r3, r0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b08a      	sub	sp, #40	; 0x28
 8010250:	af02      	add	r7, sp, #8
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	603b      	str	r3, [r7, #0]
 8010258:	4613      	mov	r3, r2
 801025a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010262:	2b20      	cmp	r3, #32
 8010264:	d17b      	bne.n	801035e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d002      	beq.n	8010272 <HAL_UART_Transmit+0x26>
 801026c:	88fb      	ldrh	r3, [r7, #6]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d101      	bne.n	8010276 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010272:	2301      	movs	r3, #1
 8010274:	e074      	b.n	8010360 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2221      	movs	r2, #33	; 0x21
 8010282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010286:	f7f3 ff1b 	bl	80040c0 <HAL_GetTick>
 801028a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	88fa      	ldrh	r2, [r7, #6]
 8010290:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	88fa      	ldrh	r2, [r7, #6]
 8010298:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102a4:	d108      	bne.n	80102b8 <HAL_UART_Transmit+0x6c>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d104      	bne.n	80102b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80102ae:	2300      	movs	r3, #0
 80102b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	61bb      	str	r3, [r7, #24]
 80102b6:	e003      	b.n	80102c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102bc:	2300      	movs	r3, #0
 80102be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80102c0:	e030      	b.n	8010324 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	9300      	str	r3, [sp, #0]
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2200      	movs	r2, #0
 80102ca:	2180      	movs	r1, #128	; 0x80
 80102cc:	68f8      	ldr	r0, [r7, #12]
 80102ce:	f001 fd23 	bl	8011d18 <UART_WaitOnFlagUntilTimeout>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d005      	beq.n	80102e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2220      	movs	r2, #32
 80102dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80102e0:	2303      	movs	r3, #3
 80102e2:	e03d      	b.n	8010360 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d10b      	bne.n	8010302 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	3302      	adds	r3, #2
 80102fe:	61bb      	str	r3, [r7, #24]
 8010300:	e007      	b.n	8010312 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	781a      	ldrb	r2, [r3, #0]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	3301      	adds	r3, #1
 8010310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010318:	b29b      	uxth	r3, r3
 801031a:	3b01      	subs	r3, #1
 801031c:	b29a      	uxth	r2, r3
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801032a:	b29b      	uxth	r3, r3
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1c8      	bne.n	80102c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	2200      	movs	r2, #0
 8010338:	2140      	movs	r1, #64	; 0x40
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f001 fcec 	bl	8011d18 <UART_WaitOnFlagUntilTimeout>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d005      	beq.n	8010352 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2220      	movs	r2, #32
 801034a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801034e:	2303      	movs	r3, #3
 8010350:	e006      	b.n	8010360 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2220      	movs	r2, #32
 8010356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801035a:	2300      	movs	r3, #0
 801035c:	e000      	b.n	8010360 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801035e:	2302      	movs	r3, #2
  }
}
 8010360:	4618      	mov	r0, r3
 8010362:	3720      	adds	r7, #32
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b08a      	sub	sp, #40	; 0x28
 801036c:	af02      	add	r7, sp, #8
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	603b      	str	r3, [r7, #0]
 8010374:	4613      	mov	r3, r2
 8010376:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801037e:	2b20      	cmp	r3, #32
 8010380:	f040 80b5 	bne.w	80104ee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d002      	beq.n	8010390 <HAL_UART_Receive+0x28>
 801038a:	88fb      	ldrh	r3, [r7, #6]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010390:	2301      	movs	r3, #1
 8010392:	e0ad      	b.n	80104f0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2200      	movs	r2, #0
 8010398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2222      	movs	r2, #34	; 0x22
 80103a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80103aa:	f7f3 fe89 	bl	80040c0 <HAL_GetTick>
 80103ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	88fa      	ldrh	r2, [r7, #6]
 80103b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	88fa      	ldrh	r2, [r7, #6]
 80103bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103c8:	d10e      	bne.n	80103e8 <HAL_UART_Receive+0x80>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	691b      	ldr	r3, [r3, #16]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d105      	bne.n	80103de <HAL_UART_Receive+0x76>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80103d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103dc:	e02d      	b.n	801043a <HAL_UART_Receive+0xd2>
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	22ff      	movs	r2, #255	; 0xff
 80103e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103e6:	e028      	b.n	801043a <HAL_UART_Receive+0xd2>
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10d      	bne.n	801040c <HAL_UART_Receive+0xa4>
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	691b      	ldr	r3, [r3, #16]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d104      	bne.n	8010402 <HAL_UART_Receive+0x9a>
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	22ff      	movs	r2, #255	; 0xff
 80103fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010400:	e01b      	b.n	801043a <HAL_UART_Receive+0xd2>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	227f      	movs	r2, #127	; 0x7f
 8010406:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801040a:	e016      	b.n	801043a <HAL_UART_Receive+0xd2>
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010414:	d10d      	bne.n	8010432 <HAL_UART_Receive+0xca>
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d104      	bne.n	8010428 <HAL_UART_Receive+0xc0>
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	227f      	movs	r2, #127	; 0x7f
 8010422:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010426:	e008      	b.n	801043a <HAL_UART_Receive+0xd2>
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	223f      	movs	r2, #63	; 0x3f
 801042c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010430:	e003      	b.n	801043a <HAL_UART_Receive+0xd2>
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2200      	movs	r2, #0
 8010436:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010440:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	689b      	ldr	r3, [r3, #8]
 8010446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801044a:	d108      	bne.n	801045e <HAL_UART_Receive+0xf6>
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	691b      	ldr	r3, [r3, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d104      	bne.n	801045e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010454:	2300      	movs	r3, #0
 8010456:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	61bb      	str	r3, [r7, #24]
 801045c:	e003      	b.n	8010466 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010462:	2300      	movs	r3, #0
 8010464:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010466:	e036      	b.n	80104d6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	2200      	movs	r2, #0
 8010470:	2120      	movs	r1, #32
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	f001 fc50 	bl	8011d18 <UART_WaitOnFlagUntilTimeout>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d005      	beq.n	801048a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2220      	movs	r2, #32
 8010482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010486:	2303      	movs	r3, #3
 8010488:	e032      	b.n	80104f0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10c      	bne.n	80104aa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010496:	b29a      	uxth	r2, r3
 8010498:	8a7b      	ldrh	r3, [r7, #18]
 801049a:	4013      	ands	r3, r2
 801049c:	b29a      	uxth	r2, r3
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	3302      	adds	r3, #2
 80104a6:	61bb      	str	r3, [r7, #24]
 80104a8:	e00c      	b.n	80104c4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	8a7b      	ldrh	r3, [r7, #18]
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	4013      	ands	r3, r2
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	3301      	adds	r3, #1
 80104c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	3b01      	subs	r3, #1
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104dc:	b29b      	uxth	r3, r3
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1c2      	bne.n	8010468 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2220      	movs	r2, #32
 80104e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80104ea:	2300      	movs	r3, #0
 80104ec:	e000      	b.n	80104f0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80104ee:	2302      	movs	r3, #2
  }
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3720      	adds	r7, #32
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08a      	sub	sp, #40	; 0x28
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	4613      	mov	r3, r2
 8010504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801050c:	2b20      	cmp	r3, #32
 801050e:	d137      	bne.n	8010580 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d002      	beq.n	801051c <HAL_UART_Receive_IT+0x24>
 8010516:	88fb      	ldrh	r3, [r7, #6]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d101      	bne.n	8010520 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801051c:	2301      	movs	r3, #1
 801051e:	e030      	b.n	8010582 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2200      	movs	r2, #0
 8010524:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a18      	ldr	r2, [pc, #96]	; (801058c <HAL_UART_Receive_IT+0x94>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d01f      	beq.n	8010570 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801053a:	2b00      	cmp	r3, #0
 801053c:	d018      	beq.n	8010570 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	e853 3f00 	ldrex	r3, [r3]
 801054a:	613b      	str	r3, [r7, #16]
   return(result);
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010552:	627b      	str	r3, [r7, #36]	; 0x24
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	461a      	mov	r2, r3
 801055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055c:	623b      	str	r3, [r7, #32]
 801055e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010560:	69f9      	ldr	r1, [r7, #28]
 8010562:	6a3a      	ldr	r2, [r7, #32]
 8010564:	e841 2300 	strex	r3, r2, [r1]
 8010568:	61bb      	str	r3, [r7, #24]
   return(result);
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1e6      	bne.n	801053e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010570:	88fb      	ldrh	r3, [r7, #6]
 8010572:	461a      	mov	r2, r3
 8010574:	68b9      	ldr	r1, [r7, #8]
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f001 fc3c 	bl	8011df4 <UART_Start_Receive_IT>
 801057c:	4603      	mov	r3, r0
 801057e:	e000      	b.n	8010582 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010580:	2302      	movs	r3, #2
  }
}
 8010582:	4618      	mov	r0, r3
 8010584:	3728      	adds	r7, #40	; 0x28
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	58000c00 	.word	0x58000c00

08010590 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b08a      	sub	sp, #40	; 0x28
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4613      	mov	r3, r2
 801059c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105a4:	2b20      	cmp	r3, #32
 80105a6:	d167      	bne.n	8010678 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d002      	beq.n	80105b4 <HAL_UART_Transmit_DMA+0x24>
 80105ae:	88fb      	ldrh	r3, [r7, #6]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d101      	bne.n	80105b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80105b4:	2301      	movs	r3, #1
 80105b6:	e060      	b.n	801067a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	88fa      	ldrh	r2, [r7, #6]
 80105c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	88fa      	ldrh	r2, [r7, #6]
 80105ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2200      	movs	r2, #0
 80105d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2221      	movs	r2, #33	; 0x21
 80105da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d028      	beq.n	8010638 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ea:	4a26      	ldr	r2, [pc, #152]	; (8010684 <HAL_UART_Transmit_DMA+0xf4>)
 80105ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105f2:	4a25      	ldr	r2, [pc, #148]	; (8010688 <HAL_UART_Transmit_DMA+0xf8>)
 80105f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105fa:	4a24      	ldr	r2, [pc, #144]	; (801068c <HAL_UART_Transmit_DMA+0xfc>)
 80105fc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010602:	2200      	movs	r2, #0
 8010604:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801060e:	4619      	mov	r1, r3
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	3328      	adds	r3, #40	; 0x28
 8010616:	461a      	mov	r2, r3
 8010618:	88fb      	ldrh	r3, [r7, #6]
 801061a:	f7f6 f9d5 	bl	80069c8 <HAL_DMA_Start_IT>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d009      	beq.n	8010638 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2210      	movs	r2, #16
 8010628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2220      	movs	r2, #32
 8010630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010634:	2301      	movs	r3, #1
 8010636:	e020      	b.n	801067a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2240      	movs	r2, #64	; 0x40
 801063e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	3308      	adds	r3, #8
 8010646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	e853 3f00 	ldrex	r3, [r3]
 801064e:	613b      	str	r3, [r7, #16]
   return(result);
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010656:	627b      	str	r3, [r7, #36]	; 0x24
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	3308      	adds	r3, #8
 801065e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010660:	623a      	str	r2, [r7, #32]
 8010662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010664:	69f9      	ldr	r1, [r7, #28]
 8010666:	6a3a      	ldr	r2, [r7, #32]
 8010668:	e841 2300 	strex	r3, r2, [r1]
 801066c:	61bb      	str	r3, [r7, #24]
   return(result);
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1e5      	bne.n	8010640 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010674:	2300      	movs	r3, #0
 8010676:	e000      	b.n	801067a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010678:	2302      	movs	r3, #2
  }
}
 801067a:	4618      	mov	r0, r3
 801067c:	3728      	adds	r7, #40	; 0x28
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	08012189 	.word	0x08012189
 8010688:	0801221f 	.word	0x0801221f
 801068c:	0801223b 	.word	0x0801223b

08010690 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b09a      	sub	sp, #104	; 0x68
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801069e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106a0:	e853 3f00 	ldrex	r3, [r3]
 80106a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80106a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106ac:	667b      	str	r3, [r7, #100]	; 0x64
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	461a      	mov	r2, r3
 80106b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106b6:	657b      	str	r3, [r7, #84]	; 0x54
 80106b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106be:	e841 2300 	strex	r3, r2, [r1]
 80106c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80106c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d1e6      	bne.n	8010698 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	3308      	adds	r3, #8
 80106d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	e853 3f00 	ldrex	r3, [r3]
 80106d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80106da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106dc:	4b46      	ldr	r3, [pc, #280]	; (80107f8 <HAL_UART_AbortReceive+0x168>)
 80106de:	4013      	ands	r3, r2
 80106e0:	663b      	str	r3, [r7, #96]	; 0x60
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	3308      	adds	r3, #8
 80106e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80106ea:	643a      	str	r2, [r7, #64]	; 0x40
 80106ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106f2:	e841 2300 	strex	r3, r2, [r1]
 80106f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80106f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1e5      	bne.n	80106ca <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010702:	2b01      	cmp	r3, #1
 8010704:	d118      	bne.n	8010738 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070c:	6a3b      	ldr	r3, [r7, #32]
 801070e:	e853 3f00 	ldrex	r3, [r3]
 8010712:	61fb      	str	r3, [r7, #28]
   return(result);
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	f023 0310 	bic.w	r3, r3, #16
 801071a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	461a      	mov	r2, r3
 8010722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010726:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801072a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801072c:	e841 2300 	strex	r3, r2, [r1]
 8010730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010734:	2b00      	cmp	r3, #0
 8010736:	d1e6      	bne.n	8010706 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010742:	2b40      	cmp	r3, #64	; 0x40
 8010744:	d13b      	bne.n	80107be <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	3308      	adds	r3, #8
 801074c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	e853 3f00 	ldrex	r3, [r3]
 8010754:	60bb      	str	r3, [r7, #8]
   return(result);
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801075c:	65bb      	str	r3, [r7, #88]	; 0x58
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	3308      	adds	r3, #8
 8010764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010766:	61ba      	str	r2, [r7, #24]
 8010768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076a:	6979      	ldr	r1, [r7, #20]
 801076c:	69ba      	ldr	r2, [r7, #24]
 801076e:	e841 2300 	strex	r3, r2, [r1]
 8010772:	613b      	str	r3, [r7, #16]
   return(result);
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1e5      	bne.n	8010746 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010780:	2b00      	cmp	r3, #0
 8010782:	d01c      	beq.n	80107be <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801078a:	2200      	movs	r2, #0
 801078c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010794:	4618      	mov	r0, r3
 8010796:	f7f6 fb81 	bl	8006e9c <HAL_DMA_Abort>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00e      	beq.n	80107be <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7f8 f806 	bl	80087b8 <HAL_DMA_GetError>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b20      	cmp	r3, #32
 80107b0:	d105      	bne.n	80107be <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2210      	movs	r2, #16
 80107b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80107ba:	2303      	movs	r3, #3
 80107bc:	e017      	b.n	80107ee <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	220f      	movs	r2, #15
 80107cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	699a      	ldr	r2, [r3, #24]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f042 0208 	orr.w	r2, r2, #8
 80107dc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2220      	movs	r2, #32
 80107e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2200      	movs	r2, #0
 80107ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3768      	adds	r7, #104	; 0x68
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	effffffe 	.word	0xeffffffe

080107fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b0ba      	sub	sp, #232	; 0xe8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	69db      	ldr	r3, [r3, #28]
 801080a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010822:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010826:	f640 030f 	movw	r3, #2063	; 0x80f
 801082a:	4013      	ands	r3, r2
 801082c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010834:	2b00      	cmp	r3, #0
 8010836:	d11b      	bne.n	8010870 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801083c:	f003 0320 	and.w	r3, r3, #32
 8010840:	2b00      	cmp	r3, #0
 8010842:	d015      	beq.n	8010870 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010848:	f003 0320 	and.w	r3, r3, #32
 801084c:	2b00      	cmp	r3, #0
 801084e:	d105      	bne.n	801085c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d009      	beq.n	8010870 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 8377 	beq.w	8010f54 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	4798      	blx	r3
      }
      return;
 801086e:	e371      	b.n	8010f54 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 8123 	beq.w	8010ac0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801087a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801087e:	4b8d      	ldr	r3, [pc, #564]	; (8010ab4 <HAL_UART_IRQHandler+0x2b8>)
 8010880:	4013      	ands	r3, r2
 8010882:	2b00      	cmp	r3, #0
 8010884:	d106      	bne.n	8010894 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801088a:	4b8b      	ldr	r3, [pc, #556]	; (8010ab8 <HAL_UART_IRQHandler+0x2bc>)
 801088c:	4013      	ands	r3, r2
 801088e:	2b00      	cmp	r3, #0
 8010890:	f000 8116 	beq.w	8010ac0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010898:	f003 0301 	and.w	r3, r3, #1
 801089c:	2b00      	cmp	r3, #0
 801089e:	d011      	beq.n	80108c4 <HAL_UART_IRQHandler+0xc8>
 80108a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d00b      	beq.n	80108c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2201      	movs	r2, #1
 80108b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108ba:	f043 0201 	orr.w	r2, r3, #1
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108c8:	f003 0302 	and.w	r3, r3, #2
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d011      	beq.n	80108f4 <HAL_UART_IRQHandler+0xf8>
 80108d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108d4:	f003 0301 	and.w	r3, r3, #1
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00b      	beq.n	80108f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2202      	movs	r2, #2
 80108e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108ea:	f043 0204 	orr.w	r2, r3, #4
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108f8:	f003 0304 	and.w	r3, r3, #4
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d011      	beq.n	8010924 <HAL_UART_IRQHandler+0x128>
 8010900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010904:	f003 0301 	and.w	r3, r3, #1
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00b      	beq.n	8010924 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	2204      	movs	r2, #4
 8010912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801091a:	f043 0202 	orr.w	r2, r3, #2
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010928:	f003 0308 	and.w	r3, r3, #8
 801092c:	2b00      	cmp	r3, #0
 801092e:	d017      	beq.n	8010960 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010934:	f003 0320 	and.w	r3, r3, #32
 8010938:	2b00      	cmp	r3, #0
 801093a:	d105      	bne.n	8010948 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801093c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010940:	4b5c      	ldr	r3, [pc, #368]	; (8010ab4 <HAL_UART_IRQHandler+0x2b8>)
 8010942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00b      	beq.n	8010960 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2208      	movs	r2, #8
 801094e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010956:	f043 0208 	orr.w	r2, r3, #8
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010968:	2b00      	cmp	r3, #0
 801096a:	d012      	beq.n	8010992 <HAL_UART_IRQHandler+0x196>
 801096c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00c      	beq.n	8010992 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010988:	f043 0220 	orr.w	r2, r3, #32
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 82dd 	beq.w	8010f58 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801099e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109a2:	f003 0320 	and.w	r3, r3, #32
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d013      	beq.n	80109d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80109aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109ae:	f003 0320 	and.w	r3, r3, #32
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d105      	bne.n	80109c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d007      	beq.n	80109d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d003      	beq.n	80109d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	689b      	ldr	r3, [r3, #8]
 80109e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e6:	2b40      	cmp	r3, #64	; 0x40
 80109e8:	d005      	beq.n	80109f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80109ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80109ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d054      	beq.n	8010aa0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f001 fb60 	bl	80120bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a06:	2b40      	cmp	r3, #64	; 0x40
 8010a08:	d146      	bne.n	8010a98 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	3308      	adds	r3, #8
 8010a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a18:	e853 3f00 	ldrex	r3, [r3]
 8010a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	3308      	adds	r3, #8
 8010a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010a46:	e841 2300 	strex	r3, r2, [r1]
 8010a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1d9      	bne.n	8010a0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d017      	beq.n	8010a90 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a66:	4a15      	ldr	r2, [pc, #84]	; (8010abc <HAL_UART_IRQHandler+0x2c0>)
 8010a68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7f6 fd31 	bl	80074d8 <HAL_DMA_Abort_IT>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d019      	beq.n	8010ab0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a8e:	e00f      	b.n	8010ab0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f000 fa77 	bl	8010f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a96:	e00b      	b.n	8010ab0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f000 fa73 	bl	8010f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a9e:	e007      	b.n	8010ab0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f000 fa6f 	bl	8010f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010aae:	e253      	b.n	8010f58 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ab0:	bf00      	nop
    return;
 8010ab2:	e251      	b.n	8010f58 <HAL_UART_IRQHandler+0x75c>
 8010ab4:	10000001 	.word	0x10000001
 8010ab8:	04000120 	.word	0x04000120
 8010abc:	080122bb 	.word	0x080122bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	f040 81e7 	bne.w	8010e98 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ace:	f003 0310 	and.w	r3, r3, #16
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 81e0 	beq.w	8010e98 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010adc:	f003 0310 	and.w	r3, r3, #16
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f000 81d9 	beq.w	8010e98 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2210      	movs	r2, #16
 8010aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010af8:	2b40      	cmp	r3, #64	; 0x40
 8010afa:	f040 8151 	bne.w	8010da0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4a96      	ldr	r2, [pc, #600]	; (8010d60 <HAL_UART_IRQHandler+0x564>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d068      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a93      	ldr	r2, [pc, #588]	; (8010d64 <HAL_UART_IRQHandler+0x568>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d061      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a91      	ldr	r2, [pc, #580]	; (8010d68 <HAL_UART_IRQHandler+0x56c>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d05a      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a8e      	ldr	r2, [pc, #568]	; (8010d6c <HAL_UART_IRQHandler+0x570>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d053      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a8c      	ldr	r2, [pc, #560]	; (8010d70 <HAL_UART_IRQHandler+0x574>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d04c      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a89      	ldr	r2, [pc, #548]	; (8010d74 <HAL_UART_IRQHandler+0x578>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d045      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a87      	ldr	r2, [pc, #540]	; (8010d78 <HAL_UART_IRQHandler+0x57c>)
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d03e      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4a84      	ldr	r2, [pc, #528]	; (8010d7c <HAL_UART_IRQHandler+0x580>)
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d037      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4a82      	ldr	r2, [pc, #520]	; (8010d80 <HAL_UART_IRQHandler+0x584>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d030      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4a7f      	ldr	r2, [pc, #508]	; (8010d84 <HAL_UART_IRQHandler+0x588>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d029      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4a7d      	ldr	r2, [pc, #500]	; (8010d88 <HAL_UART_IRQHandler+0x58c>)
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d022      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a7a      	ldr	r2, [pc, #488]	; (8010d8c <HAL_UART_IRQHandler+0x590>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d01b      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	4a78      	ldr	r2, [pc, #480]	; (8010d90 <HAL_UART_IRQHandler+0x594>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d014      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a75      	ldr	r2, [pc, #468]	; (8010d94 <HAL_UART_IRQHandler+0x598>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d00d      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a73      	ldr	r2, [pc, #460]	; (8010d98 <HAL_UART_IRQHandler+0x59c>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d006      	beq.n	8010bde <HAL_UART_IRQHandler+0x3e2>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4a70      	ldr	r2, [pc, #448]	; (8010d9c <HAL_UART_IRQHandler+0x5a0>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d106      	bne.n	8010bec <HAL_UART_IRQHandler+0x3f0>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	e005      	b.n	8010bf8 <HAL_UART_IRQHandler+0x3fc>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 81ab 	beq.w	8010f5c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010c10:	429a      	cmp	r2, r3
 8010c12:	f080 81a3 	bcs.w	8010f5c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c26:	69db      	ldr	r3, [r3, #28]
 8010c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c2c:	f000 8087 	beq.w	8010d3e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c3c:	e853 3f00 	ldrex	r3, [r3]
 8010c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	461a      	mov	r2, r3
 8010c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010c5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010c6a:	e841 2300 	strex	r3, r2, [r1]
 8010c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d1da      	bne.n	8010c30 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	3308      	adds	r3, #8
 8010c80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c84:	e853 3f00 	ldrex	r3, [r3]
 8010c88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c8c:	f023 0301 	bic.w	r3, r3, #1
 8010c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	3308      	adds	r3, #8
 8010c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010c9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010caa:	e841 2300 	strex	r3, r2, [r1]
 8010cae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d1e1      	bne.n	8010c7a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	3308      	adds	r3, #8
 8010cbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cc0:	e853 3f00 	ldrex	r3, [r3]
 8010cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010cda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010cdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ce2:	e841 2300 	strex	r3, r2, [r1]
 8010ce6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d1e3      	bne.n	8010cb6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2220      	movs	r2, #32
 8010cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d04:	e853 3f00 	ldrex	r3, [r3]
 8010d08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d0c:	f023 0310 	bic.w	r3, r3, #16
 8010d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	461a      	mov	r2, r3
 8010d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d26:	e841 2300 	strex	r3, r2, [r1]
 8010d2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d1e4      	bne.n	8010cfc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7f6 f8af 	bl	8006e9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2202      	movs	r2, #2
 8010d42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	1ad3      	subs	r3, r2, r3
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	4619      	mov	r1, r3
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 f91d 	bl	8010f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d5e:	e0fd      	b.n	8010f5c <HAL_UART_IRQHandler+0x760>
 8010d60:	40020010 	.word	0x40020010
 8010d64:	40020028 	.word	0x40020028
 8010d68:	40020040 	.word	0x40020040
 8010d6c:	40020058 	.word	0x40020058
 8010d70:	40020070 	.word	0x40020070
 8010d74:	40020088 	.word	0x40020088
 8010d78:	400200a0 	.word	0x400200a0
 8010d7c:	400200b8 	.word	0x400200b8
 8010d80:	40020410 	.word	0x40020410
 8010d84:	40020428 	.word	0x40020428
 8010d88:	40020440 	.word	0x40020440
 8010d8c:	40020458 	.word	0x40020458
 8010d90:	40020470 	.word	0x40020470
 8010d94:	40020488 	.word	0x40020488
 8010d98:	400204a0 	.word	0x400204a0
 8010d9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f000 80cf 	beq.w	8010f60 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 80ca 	beq.w	8010f60 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd4:	e853 3f00 	ldrex	r3, [r3]
 8010dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	461a      	mov	r2, r3
 8010dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dee:	647b      	str	r3, [r7, #68]	; 0x44
 8010df0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010df6:	e841 2300 	strex	r3, r2, [r1]
 8010dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1e4      	bne.n	8010dcc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	3308      	adds	r3, #8
 8010e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	e853 3f00 	ldrex	r3, [r3]
 8010e10:	623b      	str	r3, [r7, #32]
   return(result);
 8010e12:	6a3a      	ldr	r2, [r7, #32]
 8010e14:	4b55      	ldr	r3, [pc, #340]	; (8010f6c <HAL_UART_IRQHandler+0x770>)
 8010e16:	4013      	ands	r3, r2
 8010e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	3308      	adds	r3, #8
 8010e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010e26:	633a      	str	r2, [r7, #48]	; 0x30
 8010e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e2e:	e841 2300 	strex	r3, r2, [r1]
 8010e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d1e3      	bne.n	8010e02 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2220      	movs	r2, #32
 8010e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	e853 3f00 	ldrex	r3, [r3]
 8010e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	f023 0310 	bic.w	r3, r3, #16
 8010e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e70:	61fb      	str	r3, [r7, #28]
 8010e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e74:	69b9      	ldr	r1, [r7, #24]
 8010e76:	69fa      	ldr	r2, [r7, #28]
 8010e78:	e841 2300 	strex	r3, r2, [r1]
 8010e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d1e4      	bne.n	8010e4e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2202      	movs	r2, #2
 8010e88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010e8e:	4619      	mov	r1, r3
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f881 	bl	8010f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e96:	e063      	b.n	8010f60 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d00e      	beq.n	8010ec2 <HAL_UART_IRQHandler+0x6c6>
 8010ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d008      	beq.n	8010ec2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f001 ff5a 	bl	8012d74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ec0:	e051      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d014      	beq.n	8010ef8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d105      	bne.n	8010ee6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d008      	beq.n	8010ef8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d03a      	beq.n	8010f64 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	4798      	blx	r3
    }
    return;
 8010ef6:	e035      	b.n	8010f64 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d009      	beq.n	8010f18 <HAL_UART_IRQHandler+0x71c>
 8010f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d003      	beq.n	8010f18 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f001 f9e8 	bl	80122e6 <UART_EndTransmit_IT>
    return;
 8010f16:	e026      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d009      	beq.n	8010f38 <HAL_UART_IRQHandler+0x73c>
 8010f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d003      	beq.n	8010f38 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f001 ff33 	bl	8012d9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f36:	e016      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d010      	beq.n	8010f66 <HAL_UART_IRQHandler+0x76a>
 8010f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	da0c      	bge.n	8010f66 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f001 ff1b 	bl	8012d88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f52:	e008      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
      return;
 8010f54:	bf00      	nop
 8010f56:	e006      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
    return;
 8010f58:	bf00      	nop
 8010f5a:	e004      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
      return;
 8010f5c:	bf00      	nop
 8010f5e:	e002      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
      return;
 8010f60:	bf00      	nop
 8010f62:	e000      	b.n	8010f66 <HAL_UART_IRQHandler+0x76a>
    return;
 8010f64:	bf00      	nop
  }
}
 8010f66:	37e8      	adds	r7, #232	; 0xe8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	effffffe 	.word	0xeffffffe

08010f70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010f78:	bf00      	nop
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010f8c:	bf00      	nop
 8010f8e:	370c      	adds	r7, #12
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr

08010f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b083      	sub	sp, #12
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010fa4:	bf00      	nop
 8010fa6:	370c      	adds	r7, #12
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr

08010fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010fb4:	b092      	sub	sp, #72	; 0x48
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	689a      	ldr	r2, [r3, #8]
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	691b      	ldr	r3, [r3, #16]
 8010fc8:	431a      	orrs	r2, r3
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	695b      	ldr	r3, [r3, #20]
 8010fce:	431a      	orrs	r2, r3
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	69db      	ldr	r3, [r3, #28]
 8010fd4:	4313      	orrs	r3, r2
 8010fd6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	681a      	ldr	r2, [r3, #0]
 8010fde:	4bbe      	ldr	r3, [pc, #760]	; (80112d8 <UART_SetConfig+0x328>)
 8010fe0:	4013      	ands	r3, r2
 8010fe2:	697a      	ldr	r2, [r7, #20]
 8010fe4:	6812      	ldr	r2, [r2, #0]
 8010fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fe8:	430b      	orrs	r3, r1
 8010fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	68da      	ldr	r2, [r3, #12]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	430a      	orrs	r2, r1
 8011000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	699b      	ldr	r3, [r3, #24]
 8011006:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4ab3      	ldr	r2, [pc, #716]	; (80112dc <UART_SetConfig+0x32c>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d004      	beq.n	801101c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011018:	4313      	orrs	r3, r2
 801101a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	689a      	ldr	r2, [r3, #8]
 8011022:	4baf      	ldr	r3, [pc, #700]	; (80112e0 <UART_SetConfig+0x330>)
 8011024:	4013      	ands	r3, r2
 8011026:	697a      	ldr	r2, [r7, #20]
 8011028:	6812      	ldr	r2, [r2, #0]
 801102a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801102c:	430b      	orrs	r3, r1
 801102e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011036:	f023 010f 	bic.w	r1, r3, #15
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	430a      	orrs	r2, r1
 8011044:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4aa6      	ldr	r2, [pc, #664]	; (80112e4 <UART_SetConfig+0x334>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d177      	bne.n	8011140 <UART_SetConfig+0x190>
 8011050:	4ba5      	ldr	r3, [pc, #660]	; (80112e8 <UART_SetConfig+0x338>)
 8011052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011058:	2b28      	cmp	r3, #40	; 0x28
 801105a:	d86d      	bhi.n	8011138 <UART_SetConfig+0x188>
 801105c:	a201      	add	r2, pc, #4	; (adr r2, 8011064 <UART_SetConfig+0xb4>)
 801105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011062:	bf00      	nop
 8011064:	08011109 	.word	0x08011109
 8011068:	08011139 	.word	0x08011139
 801106c:	08011139 	.word	0x08011139
 8011070:	08011139 	.word	0x08011139
 8011074:	08011139 	.word	0x08011139
 8011078:	08011139 	.word	0x08011139
 801107c:	08011139 	.word	0x08011139
 8011080:	08011139 	.word	0x08011139
 8011084:	08011111 	.word	0x08011111
 8011088:	08011139 	.word	0x08011139
 801108c:	08011139 	.word	0x08011139
 8011090:	08011139 	.word	0x08011139
 8011094:	08011139 	.word	0x08011139
 8011098:	08011139 	.word	0x08011139
 801109c:	08011139 	.word	0x08011139
 80110a0:	08011139 	.word	0x08011139
 80110a4:	08011119 	.word	0x08011119
 80110a8:	08011139 	.word	0x08011139
 80110ac:	08011139 	.word	0x08011139
 80110b0:	08011139 	.word	0x08011139
 80110b4:	08011139 	.word	0x08011139
 80110b8:	08011139 	.word	0x08011139
 80110bc:	08011139 	.word	0x08011139
 80110c0:	08011139 	.word	0x08011139
 80110c4:	08011121 	.word	0x08011121
 80110c8:	08011139 	.word	0x08011139
 80110cc:	08011139 	.word	0x08011139
 80110d0:	08011139 	.word	0x08011139
 80110d4:	08011139 	.word	0x08011139
 80110d8:	08011139 	.word	0x08011139
 80110dc:	08011139 	.word	0x08011139
 80110e0:	08011139 	.word	0x08011139
 80110e4:	08011129 	.word	0x08011129
 80110e8:	08011139 	.word	0x08011139
 80110ec:	08011139 	.word	0x08011139
 80110f0:	08011139 	.word	0x08011139
 80110f4:	08011139 	.word	0x08011139
 80110f8:	08011139 	.word	0x08011139
 80110fc:	08011139 	.word	0x08011139
 8011100:	08011139 	.word	0x08011139
 8011104:	08011131 	.word	0x08011131
 8011108:	2301      	movs	r3, #1
 801110a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110e:	e222      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011110:	2304      	movs	r3, #4
 8011112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011116:	e21e      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011118:	2308      	movs	r3, #8
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111e:	e21a      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011120:	2310      	movs	r3, #16
 8011122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011126:	e216      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011128:	2320      	movs	r3, #32
 801112a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112e:	e212      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011130:	2340      	movs	r3, #64	; 0x40
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e20e      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011138:	2380      	movs	r3, #128	; 0x80
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e20a      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4a69      	ldr	r2, [pc, #420]	; (80112ec <UART_SetConfig+0x33c>)
 8011146:	4293      	cmp	r3, r2
 8011148:	d130      	bne.n	80111ac <UART_SetConfig+0x1fc>
 801114a:	4b67      	ldr	r3, [pc, #412]	; (80112e8 <UART_SetConfig+0x338>)
 801114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801114e:	f003 0307 	and.w	r3, r3, #7
 8011152:	2b05      	cmp	r3, #5
 8011154:	d826      	bhi.n	80111a4 <UART_SetConfig+0x1f4>
 8011156:	a201      	add	r2, pc, #4	; (adr r2, 801115c <UART_SetConfig+0x1ac>)
 8011158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801115c:	08011175 	.word	0x08011175
 8011160:	0801117d 	.word	0x0801117d
 8011164:	08011185 	.word	0x08011185
 8011168:	0801118d 	.word	0x0801118d
 801116c:	08011195 	.word	0x08011195
 8011170:	0801119d 	.word	0x0801119d
 8011174:	2300      	movs	r3, #0
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117a:	e1ec      	b.n	8011556 <UART_SetConfig+0x5a6>
 801117c:	2304      	movs	r3, #4
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e1e8      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011184:	2308      	movs	r3, #8
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e1e4      	b.n	8011556 <UART_SetConfig+0x5a6>
 801118c:	2310      	movs	r3, #16
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e1e0      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011194:	2320      	movs	r3, #32
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e1dc      	b.n	8011556 <UART_SetConfig+0x5a6>
 801119c:	2340      	movs	r3, #64	; 0x40
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e1d8      	b.n	8011556 <UART_SetConfig+0x5a6>
 80111a4:	2380      	movs	r3, #128	; 0x80
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e1d4      	b.n	8011556 <UART_SetConfig+0x5a6>
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4a4f      	ldr	r2, [pc, #316]	; (80112f0 <UART_SetConfig+0x340>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d130      	bne.n	8011218 <UART_SetConfig+0x268>
 80111b6:	4b4c      	ldr	r3, [pc, #304]	; (80112e8 <UART_SetConfig+0x338>)
 80111b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111ba:	f003 0307 	and.w	r3, r3, #7
 80111be:	2b05      	cmp	r3, #5
 80111c0:	d826      	bhi.n	8011210 <UART_SetConfig+0x260>
 80111c2:	a201      	add	r2, pc, #4	; (adr r2, 80111c8 <UART_SetConfig+0x218>)
 80111c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c8:	080111e1 	.word	0x080111e1
 80111cc:	080111e9 	.word	0x080111e9
 80111d0:	080111f1 	.word	0x080111f1
 80111d4:	080111f9 	.word	0x080111f9
 80111d8:	08011201 	.word	0x08011201
 80111dc:	08011209 	.word	0x08011209
 80111e0:	2300      	movs	r3, #0
 80111e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e6:	e1b6      	b.n	8011556 <UART_SetConfig+0x5a6>
 80111e8:	2304      	movs	r3, #4
 80111ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ee:	e1b2      	b.n	8011556 <UART_SetConfig+0x5a6>
 80111f0:	2308      	movs	r3, #8
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e1ae      	b.n	8011556 <UART_SetConfig+0x5a6>
 80111f8:	2310      	movs	r3, #16
 80111fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fe:	e1aa      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011200:	2320      	movs	r3, #32
 8011202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011206:	e1a6      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011208:	2340      	movs	r3, #64	; 0x40
 801120a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120e:	e1a2      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011210:	2380      	movs	r3, #128	; 0x80
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011216:	e19e      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4a35      	ldr	r2, [pc, #212]	; (80112f4 <UART_SetConfig+0x344>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d130      	bne.n	8011284 <UART_SetConfig+0x2d4>
 8011222:	4b31      	ldr	r3, [pc, #196]	; (80112e8 <UART_SetConfig+0x338>)
 8011224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011226:	f003 0307 	and.w	r3, r3, #7
 801122a:	2b05      	cmp	r3, #5
 801122c:	d826      	bhi.n	801127c <UART_SetConfig+0x2cc>
 801122e:	a201      	add	r2, pc, #4	; (adr r2, 8011234 <UART_SetConfig+0x284>)
 8011230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011234:	0801124d 	.word	0x0801124d
 8011238:	08011255 	.word	0x08011255
 801123c:	0801125d 	.word	0x0801125d
 8011240:	08011265 	.word	0x08011265
 8011244:	0801126d 	.word	0x0801126d
 8011248:	08011275 	.word	0x08011275
 801124c:	2300      	movs	r3, #0
 801124e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011252:	e180      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011254:	2304      	movs	r3, #4
 8011256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125a:	e17c      	b.n	8011556 <UART_SetConfig+0x5a6>
 801125c:	2308      	movs	r3, #8
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e178      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011264:	2310      	movs	r3, #16
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e174      	b.n	8011556 <UART_SetConfig+0x5a6>
 801126c:	2320      	movs	r3, #32
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e170      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011274:	2340      	movs	r3, #64	; 0x40
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e16c      	b.n	8011556 <UART_SetConfig+0x5a6>
 801127c:	2380      	movs	r3, #128	; 0x80
 801127e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011282:	e168      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4a1b      	ldr	r2, [pc, #108]	; (80112f8 <UART_SetConfig+0x348>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d142      	bne.n	8011314 <UART_SetConfig+0x364>
 801128e:	4b16      	ldr	r3, [pc, #88]	; (80112e8 <UART_SetConfig+0x338>)
 8011290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011292:	f003 0307 	and.w	r3, r3, #7
 8011296:	2b05      	cmp	r3, #5
 8011298:	d838      	bhi.n	801130c <UART_SetConfig+0x35c>
 801129a:	a201      	add	r2, pc, #4	; (adr r2, 80112a0 <UART_SetConfig+0x2f0>)
 801129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a0:	080112b9 	.word	0x080112b9
 80112a4:	080112c1 	.word	0x080112c1
 80112a8:	080112c9 	.word	0x080112c9
 80112ac:	080112d1 	.word	0x080112d1
 80112b0:	080112fd 	.word	0x080112fd
 80112b4:	08011305 	.word	0x08011305
 80112b8:	2300      	movs	r3, #0
 80112ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112be:	e14a      	b.n	8011556 <UART_SetConfig+0x5a6>
 80112c0:	2304      	movs	r3, #4
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c6:	e146      	b.n	8011556 <UART_SetConfig+0x5a6>
 80112c8:	2308      	movs	r3, #8
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e142      	b.n	8011556 <UART_SetConfig+0x5a6>
 80112d0:	2310      	movs	r3, #16
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e13e      	b.n	8011556 <UART_SetConfig+0x5a6>
 80112d8:	cfff69f3 	.word	0xcfff69f3
 80112dc:	58000c00 	.word	0x58000c00
 80112e0:	11fff4ff 	.word	0x11fff4ff
 80112e4:	40011000 	.word	0x40011000
 80112e8:	58024400 	.word	0x58024400
 80112ec:	40004400 	.word	0x40004400
 80112f0:	40004800 	.word	0x40004800
 80112f4:	40004c00 	.word	0x40004c00
 80112f8:	40005000 	.word	0x40005000
 80112fc:	2320      	movs	r3, #32
 80112fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011302:	e128      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011304:	2340      	movs	r3, #64	; 0x40
 8011306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130a:	e124      	b.n	8011556 <UART_SetConfig+0x5a6>
 801130c:	2380      	movs	r3, #128	; 0x80
 801130e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011312:	e120      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4acb      	ldr	r2, [pc, #812]	; (8011648 <UART_SetConfig+0x698>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d176      	bne.n	801140c <UART_SetConfig+0x45c>
 801131e:	4bcb      	ldr	r3, [pc, #812]	; (801164c <UART_SetConfig+0x69c>)
 8011320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011326:	2b28      	cmp	r3, #40	; 0x28
 8011328:	d86c      	bhi.n	8011404 <UART_SetConfig+0x454>
 801132a:	a201      	add	r2, pc, #4	; (adr r2, 8011330 <UART_SetConfig+0x380>)
 801132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011330:	080113d5 	.word	0x080113d5
 8011334:	08011405 	.word	0x08011405
 8011338:	08011405 	.word	0x08011405
 801133c:	08011405 	.word	0x08011405
 8011340:	08011405 	.word	0x08011405
 8011344:	08011405 	.word	0x08011405
 8011348:	08011405 	.word	0x08011405
 801134c:	08011405 	.word	0x08011405
 8011350:	080113dd 	.word	0x080113dd
 8011354:	08011405 	.word	0x08011405
 8011358:	08011405 	.word	0x08011405
 801135c:	08011405 	.word	0x08011405
 8011360:	08011405 	.word	0x08011405
 8011364:	08011405 	.word	0x08011405
 8011368:	08011405 	.word	0x08011405
 801136c:	08011405 	.word	0x08011405
 8011370:	080113e5 	.word	0x080113e5
 8011374:	08011405 	.word	0x08011405
 8011378:	08011405 	.word	0x08011405
 801137c:	08011405 	.word	0x08011405
 8011380:	08011405 	.word	0x08011405
 8011384:	08011405 	.word	0x08011405
 8011388:	08011405 	.word	0x08011405
 801138c:	08011405 	.word	0x08011405
 8011390:	080113ed 	.word	0x080113ed
 8011394:	08011405 	.word	0x08011405
 8011398:	08011405 	.word	0x08011405
 801139c:	08011405 	.word	0x08011405
 80113a0:	08011405 	.word	0x08011405
 80113a4:	08011405 	.word	0x08011405
 80113a8:	08011405 	.word	0x08011405
 80113ac:	08011405 	.word	0x08011405
 80113b0:	080113f5 	.word	0x080113f5
 80113b4:	08011405 	.word	0x08011405
 80113b8:	08011405 	.word	0x08011405
 80113bc:	08011405 	.word	0x08011405
 80113c0:	08011405 	.word	0x08011405
 80113c4:	08011405 	.word	0x08011405
 80113c8:	08011405 	.word	0x08011405
 80113cc:	08011405 	.word	0x08011405
 80113d0:	080113fd 	.word	0x080113fd
 80113d4:	2301      	movs	r3, #1
 80113d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113da:	e0bc      	b.n	8011556 <UART_SetConfig+0x5a6>
 80113dc:	2304      	movs	r3, #4
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e2:	e0b8      	b.n	8011556 <UART_SetConfig+0x5a6>
 80113e4:	2308      	movs	r3, #8
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ea:	e0b4      	b.n	8011556 <UART_SetConfig+0x5a6>
 80113ec:	2310      	movs	r3, #16
 80113ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f2:	e0b0      	b.n	8011556 <UART_SetConfig+0x5a6>
 80113f4:	2320      	movs	r3, #32
 80113f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fa:	e0ac      	b.n	8011556 <UART_SetConfig+0x5a6>
 80113fc:	2340      	movs	r3, #64	; 0x40
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011402:	e0a8      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011404:	2380      	movs	r3, #128	; 0x80
 8011406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140a:	e0a4      	b.n	8011556 <UART_SetConfig+0x5a6>
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4a8f      	ldr	r2, [pc, #572]	; (8011650 <UART_SetConfig+0x6a0>)
 8011412:	4293      	cmp	r3, r2
 8011414:	d130      	bne.n	8011478 <UART_SetConfig+0x4c8>
 8011416:	4b8d      	ldr	r3, [pc, #564]	; (801164c <UART_SetConfig+0x69c>)
 8011418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801141a:	f003 0307 	and.w	r3, r3, #7
 801141e:	2b05      	cmp	r3, #5
 8011420:	d826      	bhi.n	8011470 <UART_SetConfig+0x4c0>
 8011422:	a201      	add	r2, pc, #4	; (adr r2, 8011428 <UART_SetConfig+0x478>)
 8011424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011428:	08011441 	.word	0x08011441
 801142c:	08011449 	.word	0x08011449
 8011430:	08011451 	.word	0x08011451
 8011434:	08011459 	.word	0x08011459
 8011438:	08011461 	.word	0x08011461
 801143c:	08011469 	.word	0x08011469
 8011440:	2300      	movs	r3, #0
 8011442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011446:	e086      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011448:	2304      	movs	r3, #4
 801144a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144e:	e082      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011450:	2308      	movs	r3, #8
 8011452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011456:	e07e      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011458:	2310      	movs	r3, #16
 801145a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145e:	e07a      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011460:	2320      	movs	r3, #32
 8011462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011466:	e076      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011468:	2340      	movs	r3, #64	; 0x40
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e072      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011470:	2380      	movs	r3, #128	; 0x80
 8011472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011476:	e06e      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4a75      	ldr	r2, [pc, #468]	; (8011654 <UART_SetConfig+0x6a4>)
 801147e:	4293      	cmp	r3, r2
 8011480:	d130      	bne.n	80114e4 <UART_SetConfig+0x534>
 8011482:	4b72      	ldr	r3, [pc, #456]	; (801164c <UART_SetConfig+0x69c>)
 8011484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011486:	f003 0307 	and.w	r3, r3, #7
 801148a:	2b05      	cmp	r3, #5
 801148c:	d826      	bhi.n	80114dc <UART_SetConfig+0x52c>
 801148e:	a201      	add	r2, pc, #4	; (adr r2, 8011494 <UART_SetConfig+0x4e4>)
 8011490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011494:	080114ad 	.word	0x080114ad
 8011498:	080114b5 	.word	0x080114b5
 801149c:	080114bd 	.word	0x080114bd
 80114a0:	080114c5 	.word	0x080114c5
 80114a4:	080114cd 	.word	0x080114cd
 80114a8:	080114d5 	.word	0x080114d5
 80114ac:	2300      	movs	r3, #0
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b2:	e050      	b.n	8011556 <UART_SetConfig+0x5a6>
 80114b4:	2304      	movs	r3, #4
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ba:	e04c      	b.n	8011556 <UART_SetConfig+0x5a6>
 80114bc:	2308      	movs	r3, #8
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c2:	e048      	b.n	8011556 <UART_SetConfig+0x5a6>
 80114c4:	2310      	movs	r3, #16
 80114c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ca:	e044      	b.n	8011556 <UART_SetConfig+0x5a6>
 80114cc:	2320      	movs	r3, #32
 80114ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114d2:	e040      	b.n	8011556 <UART_SetConfig+0x5a6>
 80114d4:	2340      	movs	r3, #64	; 0x40
 80114d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114da:	e03c      	b.n	8011556 <UART_SetConfig+0x5a6>
 80114dc:	2380      	movs	r3, #128	; 0x80
 80114de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114e2:	e038      	b.n	8011556 <UART_SetConfig+0x5a6>
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a5b      	ldr	r2, [pc, #364]	; (8011658 <UART_SetConfig+0x6a8>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d130      	bne.n	8011550 <UART_SetConfig+0x5a0>
 80114ee:	4b57      	ldr	r3, [pc, #348]	; (801164c <UART_SetConfig+0x69c>)
 80114f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114f2:	f003 0307 	and.w	r3, r3, #7
 80114f6:	2b05      	cmp	r3, #5
 80114f8:	d826      	bhi.n	8011548 <UART_SetConfig+0x598>
 80114fa:	a201      	add	r2, pc, #4	; (adr r2, 8011500 <UART_SetConfig+0x550>)
 80114fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011500:	08011519 	.word	0x08011519
 8011504:	08011521 	.word	0x08011521
 8011508:	08011529 	.word	0x08011529
 801150c:	08011531 	.word	0x08011531
 8011510:	08011539 	.word	0x08011539
 8011514:	08011541 	.word	0x08011541
 8011518:	2302      	movs	r3, #2
 801151a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151e:	e01a      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011520:	2304      	movs	r3, #4
 8011522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011526:	e016      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011528:	2308      	movs	r3, #8
 801152a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152e:	e012      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011530:	2310      	movs	r3, #16
 8011532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011536:	e00e      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011538:	2320      	movs	r3, #32
 801153a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153e:	e00a      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011540:	2340      	movs	r3, #64	; 0x40
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e006      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011548:	2380      	movs	r3, #128	; 0x80
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e002      	b.n	8011556 <UART_SetConfig+0x5a6>
 8011550:	2380      	movs	r3, #128	; 0x80
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4a3f      	ldr	r2, [pc, #252]	; (8011658 <UART_SetConfig+0x6a8>)
 801155c:	4293      	cmp	r3, r2
 801155e:	f040 80f8 	bne.w	8011752 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011562:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011566:	2b20      	cmp	r3, #32
 8011568:	dc46      	bgt.n	80115f8 <UART_SetConfig+0x648>
 801156a:	2b02      	cmp	r3, #2
 801156c:	f2c0 8082 	blt.w	8011674 <UART_SetConfig+0x6c4>
 8011570:	3b02      	subs	r3, #2
 8011572:	2b1e      	cmp	r3, #30
 8011574:	d87e      	bhi.n	8011674 <UART_SetConfig+0x6c4>
 8011576:	a201      	add	r2, pc, #4	; (adr r2, 801157c <UART_SetConfig+0x5cc>)
 8011578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801157c:	080115ff 	.word	0x080115ff
 8011580:	08011675 	.word	0x08011675
 8011584:	08011607 	.word	0x08011607
 8011588:	08011675 	.word	0x08011675
 801158c:	08011675 	.word	0x08011675
 8011590:	08011675 	.word	0x08011675
 8011594:	08011617 	.word	0x08011617
 8011598:	08011675 	.word	0x08011675
 801159c:	08011675 	.word	0x08011675
 80115a0:	08011675 	.word	0x08011675
 80115a4:	08011675 	.word	0x08011675
 80115a8:	08011675 	.word	0x08011675
 80115ac:	08011675 	.word	0x08011675
 80115b0:	08011675 	.word	0x08011675
 80115b4:	08011627 	.word	0x08011627
 80115b8:	08011675 	.word	0x08011675
 80115bc:	08011675 	.word	0x08011675
 80115c0:	08011675 	.word	0x08011675
 80115c4:	08011675 	.word	0x08011675
 80115c8:	08011675 	.word	0x08011675
 80115cc:	08011675 	.word	0x08011675
 80115d0:	08011675 	.word	0x08011675
 80115d4:	08011675 	.word	0x08011675
 80115d8:	08011675 	.word	0x08011675
 80115dc:	08011675 	.word	0x08011675
 80115e0:	08011675 	.word	0x08011675
 80115e4:	08011675 	.word	0x08011675
 80115e8:	08011675 	.word	0x08011675
 80115ec:	08011675 	.word	0x08011675
 80115f0:	08011675 	.word	0x08011675
 80115f4:	08011667 	.word	0x08011667
 80115f8:	2b40      	cmp	r3, #64	; 0x40
 80115fa:	d037      	beq.n	801166c <UART_SetConfig+0x6bc>
 80115fc:	e03a      	b.n	8011674 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80115fe:	f7fb fce5 	bl	800cfcc <HAL_RCCEx_GetD3PCLK1Freq>
 8011602:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011604:	e03c      	b.n	8011680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801160a:	4618      	mov	r0, r3
 801160c:	f7fb fcf4 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011614:	e034      	b.n	8011680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011616:	f107 0318 	add.w	r3, r7, #24
 801161a:	4618      	mov	r0, r3
 801161c:	f7fb fe40 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011624:	e02c      	b.n	8011680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011626:	4b09      	ldr	r3, [pc, #36]	; (801164c <UART_SetConfig+0x69c>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f003 0320 	and.w	r3, r3, #32
 801162e:	2b00      	cmp	r3, #0
 8011630:	d016      	beq.n	8011660 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011632:	4b06      	ldr	r3, [pc, #24]	; (801164c <UART_SetConfig+0x69c>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	08db      	lsrs	r3, r3, #3
 8011638:	f003 0303 	and.w	r3, r3, #3
 801163c:	4a07      	ldr	r2, [pc, #28]	; (801165c <UART_SetConfig+0x6ac>)
 801163e:	fa22 f303 	lsr.w	r3, r2, r3
 8011642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011644:	e01c      	b.n	8011680 <UART_SetConfig+0x6d0>
 8011646:	bf00      	nop
 8011648:	40011400 	.word	0x40011400
 801164c:	58024400 	.word	0x58024400
 8011650:	40007800 	.word	0x40007800
 8011654:	40007c00 	.word	0x40007c00
 8011658:	58000c00 	.word	0x58000c00
 801165c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011660:	4b9d      	ldr	r3, [pc, #628]	; (80118d8 <UART_SetConfig+0x928>)
 8011662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011664:	e00c      	b.n	8011680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011666:	4b9d      	ldr	r3, [pc, #628]	; (80118dc <UART_SetConfig+0x92c>)
 8011668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801166a:	e009      	b.n	8011680 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801166c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011672:	e005      	b.n	8011680 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011674:	2300      	movs	r3, #0
 8011676:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011678:	2301      	movs	r3, #1
 801167a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801167e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 81de 	beq.w	8011a44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801168c:	4a94      	ldr	r2, [pc, #592]	; (80118e0 <UART_SetConfig+0x930>)
 801168e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011692:	461a      	mov	r2, r3
 8011694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011696:	fbb3 f3f2 	udiv	r3, r3, r2
 801169a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	685a      	ldr	r2, [r3, #4]
 80116a0:	4613      	mov	r3, r2
 80116a2:	005b      	lsls	r3, r3, #1
 80116a4:	4413      	add	r3, r2
 80116a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d305      	bcc.n	80116b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80116b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d903      	bls.n	80116c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80116b8:	2301      	movs	r3, #1
 80116ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116be:	e1c1      	b.n	8011a44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c2:	2200      	movs	r2, #0
 80116c4:	60bb      	str	r3, [r7, #8]
 80116c6:	60fa      	str	r2, [r7, #12]
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116cc:	4a84      	ldr	r2, [pc, #528]	; (80118e0 <UART_SetConfig+0x930>)
 80116ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	2200      	movs	r2, #0
 80116d6:	603b      	str	r3, [r7, #0]
 80116d8:	607a      	str	r2, [r7, #4]
 80116da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80116e2:	f7ee fdfd 	bl	80002e0 <__aeabi_uldivmod>
 80116e6:	4602      	mov	r2, r0
 80116e8:	460b      	mov	r3, r1
 80116ea:	4610      	mov	r0, r2
 80116ec:	4619      	mov	r1, r3
 80116ee:	f04f 0200 	mov.w	r2, #0
 80116f2:	f04f 0300 	mov.w	r3, #0
 80116f6:	020b      	lsls	r3, r1, #8
 80116f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80116fc:	0202      	lsls	r2, r0, #8
 80116fe:	6979      	ldr	r1, [r7, #20]
 8011700:	6849      	ldr	r1, [r1, #4]
 8011702:	0849      	lsrs	r1, r1, #1
 8011704:	2000      	movs	r0, #0
 8011706:	460c      	mov	r4, r1
 8011708:	4605      	mov	r5, r0
 801170a:	eb12 0804 	adds.w	r8, r2, r4
 801170e:	eb43 0905 	adc.w	r9, r3, r5
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	469a      	mov	sl, r3
 801171a:	4693      	mov	fp, r2
 801171c:	4652      	mov	r2, sl
 801171e:	465b      	mov	r3, fp
 8011720:	4640      	mov	r0, r8
 8011722:	4649      	mov	r1, r9
 8011724:	f7ee fddc 	bl	80002e0 <__aeabi_uldivmod>
 8011728:	4602      	mov	r2, r0
 801172a:	460b      	mov	r3, r1
 801172c:	4613      	mov	r3, r2
 801172e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011736:	d308      	bcc.n	801174a <UART_SetConfig+0x79a>
 8011738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801173e:	d204      	bcs.n	801174a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011746:	60da      	str	r2, [r3, #12]
 8011748:	e17c      	b.n	8011a44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801174a:	2301      	movs	r3, #1
 801174c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011750:	e178      	b.n	8011a44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	69db      	ldr	r3, [r3, #28]
 8011756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801175a:	f040 80c5 	bne.w	80118e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801175e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011762:	2b20      	cmp	r3, #32
 8011764:	dc48      	bgt.n	80117f8 <UART_SetConfig+0x848>
 8011766:	2b00      	cmp	r3, #0
 8011768:	db7b      	blt.n	8011862 <UART_SetConfig+0x8b2>
 801176a:	2b20      	cmp	r3, #32
 801176c:	d879      	bhi.n	8011862 <UART_SetConfig+0x8b2>
 801176e:	a201      	add	r2, pc, #4	; (adr r2, 8011774 <UART_SetConfig+0x7c4>)
 8011770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011774:	080117ff 	.word	0x080117ff
 8011778:	08011807 	.word	0x08011807
 801177c:	08011863 	.word	0x08011863
 8011780:	08011863 	.word	0x08011863
 8011784:	0801180f 	.word	0x0801180f
 8011788:	08011863 	.word	0x08011863
 801178c:	08011863 	.word	0x08011863
 8011790:	08011863 	.word	0x08011863
 8011794:	0801181f 	.word	0x0801181f
 8011798:	08011863 	.word	0x08011863
 801179c:	08011863 	.word	0x08011863
 80117a0:	08011863 	.word	0x08011863
 80117a4:	08011863 	.word	0x08011863
 80117a8:	08011863 	.word	0x08011863
 80117ac:	08011863 	.word	0x08011863
 80117b0:	08011863 	.word	0x08011863
 80117b4:	0801182f 	.word	0x0801182f
 80117b8:	08011863 	.word	0x08011863
 80117bc:	08011863 	.word	0x08011863
 80117c0:	08011863 	.word	0x08011863
 80117c4:	08011863 	.word	0x08011863
 80117c8:	08011863 	.word	0x08011863
 80117cc:	08011863 	.word	0x08011863
 80117d0:	08011863 	.word	0x08011863
 80117d4:	08011863 	.word	0x08011863
 80117d8:	08011863 	.word	0x08011863
 80117dc:	08011863 	.word	0x08011863
 80117e0:	08011863 	.word	0x08011863
 80117e4:	08011863 	.word	0x08011863
 80117e8:	08011863 	.word	0x08011863
 80117ec:	08011863 	.word	0x08011863
 80117f0:	08011863 	.word	0x08011863
 80117f4:	08011855 	.word	0x08011855
 80117f8:	2b40      	cmp	r3, #64	; 0x40
 80117fa:	d02e      	beq.n	801185a <UART_SetConfig+0x8aa>
 80117fc:	e031      	b.n	8011862 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117fe:	f7f9 fbed 	bl	800afdc <HAL_RCC_GetPCLK1Freq>
 8011802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011804:	e033      	b.n	801186e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011806:	f7f9 fbff 	bl	800b008 <HAL_RCC_GetPCLK2Freq>
 801180a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801180c:	e02f      	b.n	801186e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011812:	4618      	mov	r0, r3
 8011814:	f7fb fbf0 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801181c:	e027      	b.n	801186e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801181e:	f107 0318 	add.w	r3, r7, #24
 8011822:	4618      	mov	r0, r3
 8011824:	f7fb fd3c 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801182c:	e01f      	b.n	801186e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801182e:	4b2d      	ldr	r3, [pc, #180]	; (80118e4 <UART_SetConfig+0x934>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f003 0320 	and.w	r3, r3, #32
 8011836:	2b00      	cmp	r3, #0
 8011838:	d009      	beq.n	801184e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801183a:	4b2a      	ldr	r3, [pc, #168]	; (80118e4 <UART_SetConfig+0x934>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	08db      	lsrs	r3, r3, #3
 8011840:	f003 0303 	and.w	r3, r3, #3
 8011844:	4a24      	ldr	r2, [pc, #144]	; (80118d8 <UART_SetConfig+0x928>)
 8011846:	fa22 f303 	lsr.w	r3, r2, r3
 801184a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801184c:	e00f      	b.n	801186e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801184e:	4b22      	ldr	r3, [pc, #136]	; (80118d8 <UART_SetConfig+0x928>)
 8011850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011852:	e00c      	b.n	801186e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011854:	4b21      	ldr	r3, [pc, #132]	; (80118dc <UART_SetConfig+0x92c>)
 8011856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011858:	e009      	b.n	801186e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801185e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011860:	e005      	b.n	801186e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011862:	2300      	movs	r3, #0
 8011864:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011866:	2301      	movs	r3, #1
 8011868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801186c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011870:	2b00      	cmp	r3, #0
 8011872:	f000 80e7 	beq.w	8011a44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187a:	4a19      	ldr	r2, [pc, #100]	; (80118e0 <UART_SetConfig+0x930>)
 801187c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011880:	461a      	mov	r2, r3
 8011882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011884:	fbb3 f3f2 	udiv	r3, r3, r2
 8011888:	005a      	lsls	r2, r3, #1
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	085b      	lsrs	r3, r3, #1
 8011890:	441a      	add	r2, r3
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	fbb2 f3f3 	udiv	r3, r2, r3
 801189a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801189c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189e:	2b0f      	cmp	r3, #15
 80118a0:	d916      	bls.n	80118d0 <UART_SetConfig+0x920>
 80118a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118a8:	d212      	bcs.n	80118d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80118aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	f023 030f 	bic.w	r3, r3, #15
 80118b2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80118b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b6:	085b      	lsrs	r3, r3, #1
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	f003 0307 	and.w	r3, r3, #7
 80118be:	b29a      	uxth	r2, r3
 80118c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80118c2:	4313      	orrs	r3, r2
 80118c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80118cc:	60da      	str	r2, [r3, #12]
 80118ce:	e0b9      	b.n	8011a44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80118d0:	2301      	movs	r3, #1
 80118d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80118d6:	e0b5      	b.n	8011a44 <UART_SetConfig+0xa94>
 80118d8:	03d09000 	.word	0x03d09000
 80118dc:	003d0900 	.word	0x003d0900
 80118e0:	08017a1c 	.word	0x08017a1c
 80118e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80118e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118ec:	2b20      	cmp	r3, #32
 80118ee:	dc49      	bgt.n	8011984 <UART_SetConfig+0x9d4>
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	db7c      	blt.n	80119ee <UART_SetConfig+0xa3e>
 80118f4:	2b20      	cmp	r3, #32
 80118f6:	d87a      	bhi.n	80119ee <UART_SetConfig+0xa3e>
 80118f8:	a201      	add	r2, pc, #4	; (adr r2, 8011900 <UART_SetConfig+0x950>)
 80118fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118fe:	bf00      	nop
 8011900:	0801198b 	.word	0x0801198b
 8011904:	08011993 	.word	0x08011993
 8011908:	080119ef 	.word	0x080119ef
 801190c:	080119ef 	.word	0x080119ef
 8011910:	0801199b 	.word	0x0801199b
 8011914:	080119ef 	.word	0x080119ef
 8011918:	080119ef 	.word	0x080119ef
 801191c:	080119ef 	.word	0x080119ef
 8011920:	080119ab 	.word	0x080119ab
 8011924:	080119ef 	.word	0x080119ef
 8011928:	080119ef 	.word	0x080119ef
 801192c:	080119ef 	.word	0x080119ef
 8011930:	080119ef 	.word	0x080119ef
 8011934:	080119ef 	.word	0x080119ef
 8011938:	080119ef 	.word	0x080119ef
 801193c:	080119ef 	.word	0x080119ef
 8011940:	080119bb 	.word	0x080119bb
 8011944:	080119ef 	.word	0x080119ef
 8011948:	080119ef 	.word	0x080119ef
 801194c:	080119ef 	.word	0x080119ef
 8011950:	080119ef 	.word	0x080119ef
 8011954:	080119ef 	.word	0x080119ef
 8011958:	080119ef 	.word	0x080119ef
 801195c:	080119ef 	.word	0x080119ef
 8011960:	080119ef 	.word	0x080119ef
 8011964:	080119ef 	.word	0x080119ef
 8011968:	080119ef 	.word	0x080119ef
 801196c:	080119ef 	.word	0x080119ef
 8011970:	080119ef 	.word	0x080119ef
 8011974:	080119ef 	.word	0x080119ef
 8011978:	080119ef 	.word	0x080119ef
 801197c:	080119ef 	.word	0x080119ef
 8011980:	080119e1 	.word	0x080119e1
 8011984:	2b40      	cmp	r3, #64	; 0x40
 8011986:	d02e      	beq.n	80119e6 <UART_SetConfig+0xa36>
 8011988:	e031      	b.n	80119ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801198a:	f7f9 fb27 	bl	800afdc <HAL_RCC_GetPCLK1Freq>
 801198e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011990:	e033      	b.n	80119fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011992:	f7f9 fb39 	bl	800b008 <HAL_RCC_GetPCLK2Freq>
 8011996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011998:	e02f      	b.n	80119fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801199e:	4618      	mov	r0, r3
 80119a0:	f7fb fb2a 	bl	800cff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80119a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119a8:	e027      	b.n	80119fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119aa:	f107 0318 	add.w	r3, r7, #24
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fb fc76 	bl	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119b8:	e01f      	b.n	80119fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119ba:	4b2d      	ldr	r3, [pc, #180]	; (8011a70 <UART_SetConfig+0xac0>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f003 0320 	and.w	r3, r3, #32
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d009      	beq.n	80119da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119c6:	4b2a      	ldr	r3, [pc, #168]	; (8011a70 <UART_SetConfig+0xac0>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	08db      	lsrs	r3, r3, #3
 80119cc:	f003 0303 	and.w	r3, r3, #3
 80119d0:	4a28      	ldr	r2, [pc, #160]	; (8011a74 <UART_SetConfig+0xac4>)
 80119d2:	fa22 f303 	lsr.w	r3, r2, r3
 80119d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119d8:	e00f      	b.n	80119fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80119da:	4b26      	ldr	r3, [pc, #152]	; (8011a74 <UART_SetConfig+0xac4>)
 80119dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119de:	e00c      	b.n	80119fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119e0:	4b25      	ldr	r3, [pc, #148]	; (8011a78 <UART_SetConfig+0xac8>)
 80119e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119e4:	e009      	b.n	80119fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ec:	e005      	b.n	80119fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80119ee:	2300      	movs	r3, #0
 80119f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80119f8:	bf00      	nop
    }

    if (pclk != 0U)
 80119fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d021      	beq.n	8011a44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a04:	4a1d      	ldr	r2, [pc, #116]	; (8011a7c <UART_SetConfig+0xacc>)
 8011a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	085b      	lsrs	r3, r3, #1
 8011a18:	441a      	add	r2, r3
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a26:	2b0f      	cmp	r3, #15
 8011a28:	d909      	bls.n	8011a3e <UART_SetConfig+0xa8e>
 8011a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a30:	d205      	bcs.n	8011a3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	60da      	str	r2, [r3, #12]
 8011a3c:	e002      	b.n	8011a44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011a3e:	2301      	movs	r3, #1
 8011a40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	2200      	movs	r2, #0
 8011a58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011a60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3748      	adds	r7, #72	; 0x48
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a6e:	bf00      	nop
 8011a70:	58024400 	.word	0x58024400
 8011a74:	03d09000 	.word	0x03d09000
 8011a78:	003d0900 	.word	0x003d0900
 8011a7c:	08017a1c 	.word	0x08017a1c

08011a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a8c:	f003 0308 	and.w	r3, r3, #8
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00a      	beq.n	8011aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	430a      	orrs	r2, r1
 8011aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aae:	f003 0301 	and.w	r3, r3, #1
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d00a      	beq.n	8011acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	685b      	ldr	r3, [r3, #4]
 8011abc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	430a      	orrs	r2, r1
 8011aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ad0:	f003 0302 	and.w	r3, r3, #2
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d00a      	beq.n	8011aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	430a      	orrs	r2, r1
 8011aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011af2:	f003 0304 	and.w	r3, r3, #4
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00a      	beq.n	8011b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	430a      	orrs	r2, r1
 8011b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b14:	f003 0310 	and.w	r3, r3, #16
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d00a      	beq.n	8011b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	689b      	ldr	r3, [r3, #8]
 8011b22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	430a      	orrs	r2, r1
 8011b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b36:	f003 0320 	and.w	r3, r3, #32
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d00a      	beq.n	8011b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	430a      	orrs	r2, r1
 8011b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d01a      	beq.n	8011b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	430a      	orrs	r2, r1
 8011b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b7e:	d10a      	bne.n	8011b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	430a      	orrs	r2, r1
 8011b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00a      	beq.n	8011bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	430a      	orrs	r2, r1
 8011bb6:	605a      	str	r2, [r3, #4]
  }
}
 8011bb8:	bf00      	nop
 8011bba:	370c      	adds	r7, #12
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b098      	sub	sp, #96	; 0x60
 8011bc8:	af02      	add	r7, sp, #8
 8011bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011bd4:	f7f2 fa74 	bl	80040c0 <HAL_GetTick>
 8011bd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f003 0308 	and.w	r3, r3, #8
 8011be4:	2b08      	cmp	r3, #8
 8011be6:	d12f      	bne.n	8011c48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011bec:	9300      	str	r3, [sp, #0]
 8011bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f000 f88e 	bl	8011d18 <UART_WaitOnFlagUntilTimeout>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d022      	beq.n	8011c48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0a:	e853 3f00 	ldrex	r3, [r3]
 8011c0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c16:	653b      	str	r3, [r7, #80]	; 0x50
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c20:	647b      	str	r3, [r7, #68]	; 0x44
 8011c22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c28:	e841 2300 	strex	r3, r2, [r1]
 8011c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1e6      	bne.n	8011c02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2220      	movs	r2, #32
 8011c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c44:	2303      	movs	r3, #3
 8011c46:	e063      	b.n	8011d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	f003 0304 	and.w	r3, r3, #4
 8011c52:	2b04      	cmp	r3, #4
 8011c54:	d149      	bne.n	8011cea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011c56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f000 f857 	bl	8011d18 <UART_WaitOnFlagUntilTimeout>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d03c      	beq.n	8011cea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c78:	e853 3f00 	ldrex	r3, [r3]
 8011c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8011c90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c96:	e841 2300 	strex	r3, r2, [r1]
 8011c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d1e6      	bne.n	8011c70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	3308      	adds	r3, #8
 8011ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	e853 3f00 	ldrex	r3, [r3]
 8011cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f023 0301 	bic.w	r3, r3, #1
 8011cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	3308      	adds	r3, #8
 8011cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cc2:	61fa      	str	r2, [r7, #28]
 8011cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc6:	69b9      	ldr	r1, [r7, #24]
 8011cc8:	69fa      	ldr	r2, [r7, #28]
 8011cca:	e841 2300 	strex	r3, r2, [r1]
 8011cce:	617b      	str	r3, [r7, #20]
   return(result);
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1e5      	bne.n	8011ca2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2220      	movs	r2, #32
 8011cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	e012      	b.n	8011d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2220      	movs	r2, #32
 8011cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2220      	movs	r2, #32
 8011cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d0e:	2300      	movs	r3, #0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3758      	adds	r7, #88	; 0x58
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	603b      	str	r3, [r7, #0]
 8011d24:	4613      	mov	r3, r2
 8011d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d28:	e04f      	b.n	8011dca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d30:	d04b      	beq.n	8011dca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d32:	f7f2 f9c5 	bl	80040c0 <HAL_GetTick>
 8011d36:	4602      	mov	r2, r0
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	1ad3      	subs	r3, r2, r3
 8011d3c:	69ba      	ldr	r2, [r7, #24]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d302      	bcc.n	8011d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d101      	bne.n	8011d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011d48:	2303      	movs	r3, #3
 8011d4a:	e04e      	b.n	8011dea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f003 0304 	and.w	r3, r3, #4
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d037      	beq.n	8011dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	2b80      	cmp	r3, #128	; 0x80
 8011d5e:	d034      	beq.n	8011dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	2b40      	cmp	r3, #64	; 0x40
 8011d64:	d031      	beq.n	8011dca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	69db      	ldr	r3, [r3, #28]
 8011d6c:	f003 0308 	and.w	r3, r3, #8
 8011d70:	2b08      	cmp	r3, #8
 8011d72:	d110      	bne.n	8011d96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2208      	movs	r2, #8
 8011d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f000 f99d 	bl	80120bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2208      	movs	r2, #8
 8011d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011d92:	2301      	movs	r3, #1
 8011d94:	e029      	b.n	8011dea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	69db      	ldr	r3, [r3, #28]
 8011d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011da4:	d111      	bne.n	8011dca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f000 f983 	bl	80120bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2220      	movs	r2, #32
 8011dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011dc6:	2303      	movs	r3, #3
 8011dc8:	e00f      	b.n	8011dea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	69da      	ldr	r2, [r3, #28]
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	4013      	ands	r3, r2
 8011dd4:	68ba      	ldr	r2, [r7, #8]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	bf0c      	ite	eq
 8011dda:	2301      	moveq	r3, #1
 8011ddc:	2300      	movne	r3, #0
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	461a      	mov	r2, r3
 8011de2:	79fb      	ldrb	r3, [r7, #7]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d0a0      	beq.n	8011d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
	...

08011df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b0a3      	sub	sp, #140	; 0x8c
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	4613      	mov	r3, r2
 8011e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	68ba      	ldr	r2, [r7, #8]
 8011e06:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	88fa      	ldrh	r2, [r7, #6]
 8011e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	88fa      	ldrh	r2, [r7, #6]
 8011e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e26:	d10e      	bne.n	8011e46 <UART_Start_Receive_IT+0x52>
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	691b      	ldr	r3, [r3, #16]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d105      	bne.n	8011e3c <UART_Start_Receive_IT+0x48>
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011e36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e3a:	e02d      	b.n	8011e98 <UART_Start_Receive_IT+0xa4>
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	22ff      	movs	r2, #255	; 0xff
 8011e40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e44:	e028      	b.n	8011e98 <UART_Start_Receive_IT+0xa4>
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10d      	bne.n	8011e6a <UART_Start_Receive_IT+0x76>
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	691b      	ldr	r3, [r3, #16]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d104      	bne.n	8011e60 <UART_Start_Receive_IT+0x6c>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	22ff      	movs	r2, #255	; 0xff
 8011e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e5e:	e01b      	b.n	8011e98 <UART_Start_Receive_IT+0xa4>
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	227f      	movs	r2, #127	; 0x7f
 8011e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e68:	e016      	b.n	8011e98 <UART_Start_Receive_IT+0xa4>
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011e72:	d10d      	bne.n	8011e90 <UART_Start_Receive_IT+0x9c>
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d104      	bne.n	8011e86 <UART_Start_Receive_IT+0x92>
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	227f      	movs	r2, #127	; 0x7f
 8011e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e84:	e008      	b.n	8011e98 <UART_Start_Receive_IT+0xa4>
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	223f      	movs	r2, #63	; 0x3f
 8011e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e8e:	e003      	b.n	8011e98 <UART_Start_Receive_IT+0xa4>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2200      	movs	r2, #0
 8011e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	2222      	movs	r2, #34	; 0x22
 8011ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	3308      	adds	r3, #8
 8011eae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011eb2:	e853 3f00 	ldrex	r3, [r3]
 8011eb6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011eba:	f043 0301 	orr.w	r3, r3, #1
 8011ebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3308      	adds	r3, #8
 8011ec8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ecc:	673a      	str	r2, [r7, #112]	; 0x70
 8011ece:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011ed2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ed4:	e841 2300 	strex	r3, r2, [r1]
 8011ed8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d1e3      	bne.n	8011ea8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ee8:	d14f      	bne.n	8011f8a <UART_Start_Receive_IT+0x196>
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ef0:	88fa      	ldrh	r2, [r7, #6]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d349      	bcc.n	8011f8a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	689b      	ldr	r3, [r3, #8]
 8011efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011efe:	d107      	bne.n	8011f10 <UART_Start_Receive_IT+0x11c>
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	691b      	ldr	r3, [r3, #16]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d103      	bne.n	8011f10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	4a47      	ldr	r2, [pc, #284]	; (8012028 <UART_Start_Receive_IT+0x234>)
 8011f0c:	675a      	str	r2, [r3, #116]	; 0x74
 8011f0e:	e002      	b.n	8011f16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	4a46      	ldr	r2, [pc, #280]	; (801202c <UART_Start_Receive_IT+0x238>)
 8011f14:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	691b      	ldr	r3, [r3, #16]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d01a      	beq.n	8011f54 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f26:	e853 3f00 	ldrex	r3, [r3]
 8011f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f42:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011f46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f48:	e841 2300 	strex	r3, r2, [r1]
 8011f4c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d1e4      	bne.n	8011f1e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	3308      	adds	r3, #8
 8011f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f5e:	e853 3f00 	ldrex	r3, [r3]
 8011f62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	3308      	adds	r3, #8
 8011f72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f74:	64ba      	str	r2, [r7, #72]	; 0x48
 8011f76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f7c:	e841 2300 	strex	r3, r2, [r1]
 8011f80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1e5      	bne.n	8011f54 <UART_Start_Receive_IT+0x160>
 8011f88:	e046      	b.n	8012018 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	689b      	ldr	r3, [r3, #8]
 8011f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f92:	d107      	bne.n	8011fa4 <UART_Start_Receive_IT+0x1b0>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	691b      	ldr	r3, [r3, #16]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d103      	bne.n	8011fa4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	4a24      	ldr	r2, [pc, #144]	; (8012030 <UART_Start_Receive_IT+0x23c>)
 8011fa0:	675a      	str	r2, [r3, #116]	; 0x74
 8011fa2:	e002      	b.n	8011faa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	4a23      	ldr	r2, [pc, #140]	; (8012034 <UART_Start_Receive_IT+0x240>)
 8011fa8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	691b      	ldr	r3, [r3, #16]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d019      	beq.n	8011fe6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fba:	e853 3f00 	ldrex	r3, [r3]
 8011fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011fc6:	677b      	str	r3, [r7, #116]	; 0x74
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	461a      	mov	r2, r3
 8011fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8011fd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fd8:	e841 2300 	strex	r3, r2, [r1]
 8011fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d1e6      	bne.n	8011fb2 <UART_Start_Receive_IT+0x1be>
 8011fe4:	e018      	b.n	8012018 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	e853 3f00 	ldrex	r3, [r3]
 8011ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	f043 0320 	orr.w	r3, r3, #32
 8011ffa:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	461a      	mov	r2, r3
 8012002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012004:	623b      	str	r3, [r7, #32]
 8012006:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012008:	69f9      	ldr	r1, [r7, #28]
 801200a:	6a3a      	ldr	r2, [r7, #32]
 801200c:	e841 2300 	strex	r3, r2, [r1]
 8012010:	61bb      	str	r3, [r7, #24]
   return(result);
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1e6      	bne.n	8011fe6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012018:	2300      	movs	r3, #0
}
 801201a:	4618      	mov	r0, r3
 801201c:	378c      	adds	r7, #140	; 0x8c
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	08012a0d 	.word	0x08012a0d
 801202c:	080126ad 	.word	0x080126ad
 8012030:	080124f5 	.word	0x080124f5
 8012034:	0801233d 	.word	0x0801233d

08012038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012038:	b480      	push	{r7}
 801203a:	b08f      	sub	sp, #60	; 0x3c
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012046:	6a3b      	ldr	r3, [r7, #32]
 8012048:	e853 3f00 	ldrex	r3, [r3]
 801204c:	61fb      	str	r3, [r7, #28]
   return(result);
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012054:	637b      	str	r3, [r7, #52]	; 0x34
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	461a      	mov	r2, r3
 801205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012060:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012066:	e841 2300 	strex	r3, r2, [r1]
 801206a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206e:	2b00      	cmp	r3, #0
 8012070:	d1e6      	bne.n	8012040 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	3308      	adds	r3, #8
 8012078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	e853 3f00 	ldrex	r3, [r3]
 8012080:	60bb      	str	r3, [r7, #8]
   return(result);
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012088:	633b      	str	r3, [r7, #48]	; 0x30
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	3308      	adds	r3, #8
 8012090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012092:	61ba      	str	r2, [r7, #24]
 8012094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012096:	6979      	ldr	r1, [r7, #20]
 8012098:	69ba      	ldr	r2, [r7, #24]
 801209a:	e841 2300 	strex	r3, r2, [r1]
 801209e:	613b      	str	r3, [r7, #16]
   return(result);
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1e5      	bne.n	8012072 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2220      	movs	r2, #32
 80120aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80120ae:	bf00      	nop
 80120b0:	373c      	adds	r7, #60	; 0x3c
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
	...

080120bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80120bc:	b480      	push	{r7}
 80120be:	b095      	sub	sp, #84	; 0x54
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120cc:	e853 3f00 	ldrex	r3, [r3]
 80120d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80120d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	461a      	mov	r2, r3
 80120e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120e2:	643b      	str	r3, [r7, #64]	; 0x40
 80120e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120ea:	e841 2300 	strex	r3, r2, [r1]
 80120ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d1e6      	bne.n	80120c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	3308      	adds	r3, #8
 80120fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fe:	6a3b      	ldr	r3, [r7, #32]
 8012100:	e853 3f00 	ldrex	r3, [r3]
 8012104:	61fb      	str	r3, [r7, #28]
   return(result);
 8012106:	69fa      	ldr	r2, [r7, #28]
 8012108:	4b1e      	ldr	r3, [pc, #120]	; (8012184 <UART_EndRxTransfer+0xc8>)
 801210a:	4013      	ands	r3, r2
 801210c:	64bb      	str	r3, [r7, #72]	; 0x48
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3308      	adds	r3, #8
 8012114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012118:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801211e:	e841 2300 	strex	r3, r2, [r1]
 8012122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1e5      	bne.n	80120f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801212e:	2b01      	cmp	r3, #1
 8012130:	d118      	bne.n	8012164 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	e853 3f00 	ldrex	r3, [r3]
 801213e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	f023 0310 	bic.w	r3, r3, #16
 8012146:	647b      	str	r3, [r7, #68]	; 0x44
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	461a      	mov	r2, r3
 801214e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012150:	61bb      	str	r3, [r7, #24]
 8012152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012154:	6979      	ldr	r1, [r7, #20]
 8012156:	69ba      	ldr	r2, [r7, #24]
 8012158:	e841 2300 	strex	r3, r2, [r1]
 801215c:	613b      	str	r3, [r7, #16]
   return(result);
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d1e6      	bne.n	8012132 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2220      	movs	r2, #32
 8012168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2200      	movs	r2, #0
 8012170:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012178:	bf00      	nop
 801217a:	3754      	adds	r7, #84	; 0x54
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr
 8012184:	effffffe 	.word	0xeffffffe

08012188 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b090      	sub	sp, #64	; 0x40
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012194:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	69db      	ldr	r3, [r3, #28]
 801219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801219e:	d037      	beq.n	8012210 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80121a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121a2:	2200      	movs	r2, #0
 80121a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80121a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	3308      	adds	r3, #8
 80121ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b2:	e853 3f00 	ldrex	r3, [r3]
 80121b6:	623b      	str	r3, [r7, #32]
   return(result);
 80121b8:	6a3b      	ldr	r3, [r7, #32]
 80121ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80121be:	63bb      	str	r3, [r7, #56]	; 0x38
 80121c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	3308      	adds	r3, #8
 80121c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121c8:	633a      	str	r2, [r7, #48]	; 0x30
 80121ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121d0:	e841 2300 	strex	r3, r2, [r1]
 80121d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d1e5      	bne.n	80121a8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	e853 3f00 	ldrex	r3, [r3]
 80121e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121f0:	637b      	str	r3, [r7, #52]	; 0x34
 80121f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	461a      	mov	r2, r3
 80121f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121fa:	61fb      	str	r3, [r7, #28]
 80121fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fe:	69b9      	ldr	r1, [r7, #24]
 8012200:	69fa      	ldr	r2, [r7, #28]
 8012202:	e841 2300 	strex	r3, r2, [r1]
 8012206:	617b      	str	r3, [r7, #20]
   return(result);
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d1e6      	bne.n	80121dc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801220e:	e002      	b.n	8012216 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012212:	f7f0 f8b9 	bl	8002388 <HAL_UART_TxCpltCallback>
}
 8012216:	bf00      	nop
 8012218:	3740      	adds	r7, #64	; 0x40
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b084      	sub	sp, #16
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801222a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f7fe fe9f 	bl	8010f70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012232:	bf00      	nop
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b086      	sub	sp, #24
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012246:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801224e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012256:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012262:	2b80      	cmp	r3, #128	; 0x80
 8012264:	d109      	bne.n	801227a <UART_DMAError+0x40>
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	2b21      	cmp	r3, #33	; 0x21
 801226a:	d106      	bne.n	801227a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2200      	movs	r2, #0
 8012270:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012274:	6978      	ldr	r0, [r7, #20]
 8012276:	f7ff fedf 	bl	8012038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012284:	2b40      	cmp	r3, #64	; 0x40
 8012286:	d109      	bne.n	801229c <UART_DMAError+0x62>
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2b22      	cmp	r3, #34	; 0x22
 801228c:	d106      	bne.n	801229c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	2200      	movs	r2, #0
 8012292:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012296:	6978      	ldr	r0, [r7, #20]
 8012298:	f7ff ff10 	bl	80120bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122a2:	f043 0210 	orr.w	r2, r3, #16
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80122ac:	6978      	ldr	r0, [r7, #20]
 80122ae:	f7fe fe69 	bl	8010f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122b2:	bf00      	nop
 80122b4:	3718      	adds	r7, #24
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b084      	sub	sp, #16
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2200      	movs	r2, #0
 80122cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2200      	movs	r2, #0
 80122d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80122d8:	68f8      	ldr	r0, [r7, #12]
 80122da:	f7fe fe53 	bl	8010f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122de:	bf00      	nop
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b088      	sub	sp, #32
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	e853 3f00 	ldrex	r3, [r3]
 80122fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012302:	61fb      	str	r3, [r7, #28]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	461a      	mov	r2, r3
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	61bb      	str	r3, [r7, #24]
 801230e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012310:	6979      	ldr	r1, [r7, #20]
 8012312:	69ba      	ldr	r2, [r7, #24]
 8012314:	e841 2300 	strex	r3, r2, [r1]
 8012318:	613b      	str	r3, [r7, #16]
   return(result);
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d1e6      	bne.n	80122ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2220      	movs	r2, #32
 8012324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f7f0 f82a 	bl	8002388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012334:	bf00      	nop
 8012336:	3720      	adds	r7, #32
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b09c      	sub	sp, #112	; 0x70
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801234a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012354:	2b22      	cmp	r3, #34	; 0x22
 8012356:	f040 80be 	bne.w	80124d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012360:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012364:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012368:	b2d9      	uxtb	r1, r3
 801236a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801236e:	b2da      	uxtb	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012374:	400a      	ands	r2, r1
 8012376:	b2d2      	uxtb	r2, r2
 8012378:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801237e:	1c5a      	adds	r2, r3, #1
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801238a:	b29b      	uxth	r3, r3
 801238c:	3b01      	subs	r3, #1
 801238e:	b29a      	uxth	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801239c:	b29b      	uxth	r3, r3
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f040 80a1 	bne.w	80124e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123ac:	e853 3f00 	ldrex	r3, [r3]
 80123b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80123b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	461a      	mov	r2, r3
 80123c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80123c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123ca:	e841 2300 	strex	r3, r2, [r1]
 80123ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80123d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d1e6      	bne.n	80123a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	3308      	adds	r3, #8
 80123dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e0:	e853 3f00 	ldrex	r3, [r3]
 80123e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e8:	f023 0301 	bic.w	r3, r3, #1
 80123ec:	667b      	str	r3, [r7, #100]	; 0x64
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	3308      	adds	r3, #8
 80123f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80123f6:	647a      	str	r2, [r7, #68]	; 0x44
 80123f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123fe:	e841 2300 	strex	r3, r2, [r1]
 8012402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012406:	2b00      	cmp	r3, #0
 8012408:	d1e5      	bne.n	80123d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2220      	movs	r2, #32
 801240e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2200      	movs	r2, #0
 8012416:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2200      	movs	r2, #0
 801241c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	4a33      	ldr	r2, [pc, #204]	; (80124f0 <UART_RxISR_8BIT+0x1b4>)
 8012424:	4293      	cmp	r3, r2
 8012426:	d01f      	beq.n	8012468 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012432:	2b00      	cmp	r3, #0
 8012434:	d018      	beq.n	8012468 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243e:	e853 3f00 	ldrex	r3, [r3]
 8012442:	623b      	str	r3, [r7, #32]
   return(result);
 8012444:	6a3b      	ldr	r3, [r7, #32]
 8012446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801244a:	663b      	str	r3, [r7, #96]	; 0x60
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	461a      	mov	r2, r3
 8012452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012454:	633b      	str	r3, [r7, #48]	; 0x30
 8012456:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801245a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801245c:	e841 2300 	strex	r3, r2, [r1]
 8012460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1e6      	bne.n	8012436 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801246c:	2b01      	cmp	r3, #1
 801246e:	d12e      	bne.n	80124ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	e853 3f00 	ldrex	r3, [r3]
 8012482:	60fb      	str	r3, [r7, #12]
   return(result);
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f023 0310 	bic.w	r3, r3, #16
 801248a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	461a      	mov	r2, r3
 8012492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012494:	61fb      	str	r3, [r7, #28]
 8012496:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012498:	69b9      	ldr	r1, [r7, #24]
 801249a:	69fa      	ldr	r2, [r7, #28]
 801249c:	e841 2300 	strex	r3, r2, [r1]
 80124a0:	617b      	str	r3, [r7, #20]
   return(result);
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d1e6      	bne.n	8012476 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	69db      	ldr	r3, [r3, #28]
 80124ae:	f003 0310 	and.w	r3, r3, #16
 80124b2:	2b10      	cmp	r3, #16
 80124b4:	d103      	bne.n	80124be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2210      	movs	r2, #16
 80124bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124c4:	4619      	mov	r1, r3
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f7fe fd66 	bl	8010f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124cc:	e00b      	b.n	80124e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7ee f8d2 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 80124d4:	e007      	b.n	80124e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	699a      	ldr	r2, [r3, #24]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f042 0208 	orr.w	r2, r2, #8
 80124e4:	619a      	str	r2, [r3, #24]
}
 80124e6:	bf00      	nop
 80124e8:	3770      	adds	r7, #112	; 0x70
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	58000c00 	.word	0x58000c00

080124f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b09c      	sub	sp, #112	; 0x70
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012502:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801250c:	2b22      	cmp	r3, #34	; 0x22
 801250e:	f040 80be 	bne.w	801268e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012518:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012520:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012522:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012526:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801252a:	4013      	ands	r3, r2
 801252c:	b29a      	uxth	r2, r3
 801252e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012530:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012536:	1c9a      	adds	r2, r3, #2
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012542:	b29b      	uxth	r3, r3
 8012544:	3b01      	subs	r3, #1
 8012546:	b29a      	uxth	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012554:	b29b      	uxth	r3, r3
 8012556:	2b00      	cmp	r3, #0
 8012558:	f040 80a1 	bne.w	801269e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012564:	e853 3f00 	ldrex	r3, [r3]
 8012568:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801256a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801256c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012570:	667b      	str	r3, [r7, #100]	; 0x64
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	461a      	mov	r2, r3
 8012578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801257a:	657b      	str	r3, [r7, #84]	; 0x54
 801257c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801257e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012582:	e841 2300 	strex	r3, r2, [r1]
 8012586:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801258a:	2b00      	cmp	r3, #0
 801258c:	d1e6      	bne.n	801255c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	3308      	adds	r3, #8
 8012594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012598:	e853 3f00 	ldrex	r3, [r3]
 801259c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a0:	f023 0301 	bic.w	r3, r3, #1
 80125a4:	663b      	str	r3, [r7, #96]	; 0x60
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	3308      	adds	r3, #8
 80125ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125ae:	643a      	str	r2, [r7, #64]	; 0x40
 80125b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80125b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125b6:	e841 2300 	strex	r3, r2, [r1]
 80125ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80125bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d1e5      	bne.n	801258e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2220      	movs	r2, #32
 80125c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	4a33      	ldr	r2, [pc, #204]	; (80126a8 <UART_RxISR_16BIT+0x1b4>)
 80125dc:	4293      	cmp	r3, r2
 80125de:	d01f      	beq.n	8012620 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d018      	beq.n	8012620 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125f4:	6a3b      	ldr	r3, [r7, #32]
 80125f6:	e853 3f00 	ldrex	r3, [r3]
 80125fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80125fc:	69fb      	ldr	r3, [r7, #28]
 80125fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	461a      	mov	r2, r3
 801260a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801260c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801260e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012614:	e841 2300 	strex	r3, r2, [r1]
 8012618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261c:	2b00      	cmp	r3, #0
 801261e:	d1e6      	bne.n	80125ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012624:	2b01      	cmp	r3, #1
 8012626:	d12e      	bne.n	8012686 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	e853 3f00 	ldrex	r3, [r3]
 801263a:	60bb      	str	r3, [r7, #8]
   return(result);
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	f023 0310 	bic.w	r3, r3, #16
 8012642:	65bb      	str	r3, [r7, #88]	; 0x58
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	461a      	mov	r2, r3
 801264a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801264c:	61bb      	str	r3, [r7, #24]
 801264e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012650:	6979      	ldr	r1, [r7, #20]
 8012652:	69ba      	ldr	r2, [r7, #24]
 8012654:	e841 2300 	strex	r3, r2, [r1]
 8012658:	613b      	str	r3, [r7, #16]
   return(result);
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d1e6      	bne.n	801262e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	69db      	ldr	r3, [r3, #28]
 8012666:	f003 0310 	and.w	r3, r3, #16
 801266a:	2b10      	cmp	r3, #16
 801266c:	d103      	bne.n	8012676 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2210      	movs	r2, #16
 8012674:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801267c:	4619      	mov	r1, r3
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f7fe fc8a 	bl	8010f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012684:	e00b      	b.n	801269e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7ed fff6 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 801268c:	e007      	b.n	801269e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	699a      	ldr	r2, [r3, #24]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f042 0208 	orr.w	r2, r2, #8
 801269c:	619a      	str	r2, [r3, #24]
}
 801269e:	bf00      	nop
 80126a0:	3770      	adds	r7, #112	; 0x70
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	58000c00 	.word	0x58000c00

080126ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b0ac      	sub	sp, #176	; 0xb0
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	69db      	ldr	r3, [r3, #28]
 80126c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	689b      	ldr	r3, [r3, #8]
 80126d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126e2:	2b22      	cmp	r3, #34	; 0x22
 80126e4:	f040 8180 	bne.w	80129e8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126f2:	e123      	b.n	801293c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80126fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012702:	b2d9      	uxtb	r1, r3
 8012704:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012708:	b2da      	uxtb	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801270e:	400a      	ands	r2, r1
 8012710:	b2d2      	uxtb	r2, r2
 8012712:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012718:	1c5a      	adds	r2, r3, #1
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012724:	b29b      	uxth	r3, r3
 8012726:	3b01      	subs	r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	69db      	ldr	r3, [r3, #28]
 8012736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801273a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801273e:	f003 0307 	and.w	r3, r3, #7
 8012742:	2b00      	cmp	r3, #0
 8012744:	d053      	beq.n	80127ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801274a:	f003 0301 	and.w	r3, r3, #1
 801274e:	2b00      	cmp	r3, #0
 8012750:	d011      	beq.n	8012776 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801275a:	2b00      	cmp	r3, #0
 801275c:	d00b      	beq.n	8012776 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2201      	movs	r2, #1
 8012764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801276c:	f043 0201 	orr.w	r2, r3, #1
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801277a:	f003 0302 	and.w	r3, r3, #2
 801277e:	2b00      	cmp	r3, #0
 8012780:	d011      	beq.n	80127a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012786:	f003 0301 	and.w	r3, r3, #1
 801278a:	2b00      	cmp	r3, #0
 801278c:	d00b      	beq.n	80127a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	2202      	movs	r2, #2
 8012794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801279c:	f043 0204 	orr.w	r2, r3, #4
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80127a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127aa:	f003 0304 	and.w	r3, r3, #4
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d011      	beq.n	80127d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80127b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127b6:	f003 0301 	and.w	r3, r3, #1
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00b      	beq.n	80127d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2204      	movs	r2, #4
 80127c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127cc:	f043 0202 	orr.w	r2, r3, #2
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d006      	beq.n	80127ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7fe fbcf 	bl	8010f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2200      	movs	r2, #0
 80127ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	f040 80a0 	bne.w	801293c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012804:	e853 3f00 	ldrex	r3, [r3]
 8012808:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801280a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801280c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	461a      	mov	r2, r3
 801281a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801281e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012820:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012822:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012824:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012826:	e841 2300 	strex	r3, r2, [r1]
 801282a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801282c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1e4      	bne.n	80127fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	3308      	adds	r3, #8
 8012838:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801283a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801283c:	e853 3f00 	ldrex	r3, [r3]
 8012840:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012844:	4b6e      	ldr	r3, [pc, #440]	; (8012a00 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012846:	4013      	ands	r3, r2
 8012848:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	3308      	adds	r3, #8
 8012852:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012856:	66ba      	str	r2, [r7, #104]	; 0x68
 8012858:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801285a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801285c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801285e:	e841 2300 	strex	r3, r2, [r1]
 8012862:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1e3      	bne.n	8012832 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2220      	movs	r2, #32
 801286e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2200      	movs	r2, #0
 8012876:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2200      	movs	r2, #0
 801287c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	4a60      	ldr	r2, [pc, #384]	; (8012a04 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d021      	beq.n	80128cc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012892:	2b00      	cmp	r3, #0
 8012894:	d01a      	beq.n	80128cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801289e:	e853 3f00 	ldrex	r3, [r3]
 80128a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80128a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80128aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	461a      	mov	r2, r3
 80128b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80128b8:	657b      	str	r3, [r7, #84]	; 0x54
 80128ba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128c0:	e841 2300 	strex	r3, r2, [r1]
 80128c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80128c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d1e4      	bne.n	8012896 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d130      	bne.n	8012936 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2200      	movs	r2, #0
 80128d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128e2:	e853 3f00 	ldrex	r3, [r3]
 80128e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ea:	f023 0310 	bic.w	r3, r3, #16
 80128ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	461a      	mov	r2, r3
 80128f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80128fc:	643b      	str	r3, [r7, #64]	; 0x40
 80128fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012904:	e841 2300 	strex	r3, r2, [r1]
 8012908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290c:	2b00      	cmp	r3, #0
 801290e:	d1e4      	bne.n	80128da <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	69db      	ldr	r3, [r3, #28]
 8012916:	f003 0310 	and.w	r3, r3, #16
 801291a:	2b10      	cmp	r3, #16
 801291c:	d103      	bne.n	8012926 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	2210      	movs	r2, #16
 8012924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801292c:	4619      	mov	r1, r3
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7fe fb32 	bl	8010f98 <HAL_UARTEx_RxEventCallback>
 8012934:	e002      	b.n	801293c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ed fe9e 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801293c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012940:	2b00      	cmp	r3, #0
 8012942:	d006      	beq.n	8012952 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012948:	f003 0320 	and.w	r3, r3, #32
 801294c:	2b00      	cmp	r3, #0
 801294e:	f47f aed1 	bne.w	80126f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012958:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801295c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012960:	2b00      	cmp	r3, #0
 8012962:	d049      	beq.n	80129f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801296a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801296e:	429a      	cmp	r2, r3
 8012970:	d242      	bcs.n	80129f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	3308      	adds	r3, #8
 8012978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801297a:	6a3b      	ldr	r3, [r7, #32]
 801297c:	e853 3f00 	ldrex	r3, [r3]
 8012980:	61fb      	str	r3, [r7, #28]
   return(result);
 8012982:	69fb      	ldr	r3, [r7, #28]
 8012984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	3308      	adds	r3, #8
 8012992:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012998:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801299a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801299c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801299e:	e841 2300 	strex	r3, r2, [r1]
 80129a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80129a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1e3      	bne.n	8012972 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4a16      	ldr	r2, [pc, #88]	; (8012a08 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80129ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	e853 3f00 	ldrex	r3, [r3]
 80129bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	f043 0320 	orr.w	r3, r3, #32
 80129c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	461a      	mov	r2, r3
 80129ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129d2:	61bb      	str	r3, [r7, #24]
 80129d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129d6:	6979      	ldr	r1, [r7, #20]
 80129d8:	69ba      	ldr	r2, [r7, #24]
 80129da:	e841 2300 	strex	r3, r2, [r1]
 80129de:	613b      	str	r3, [r7, #16]
   return(result);
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1e4      	bne.n	80129b0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80129e6:	e007      	b.n	80129f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	699a      	ldr	r2, [r3, #24]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f042 0208 	orr.w	r2, r2, #8
 80129f6:	619a      	str	r2, [r3, #24]
}
 80129f8:	bf00      	nop
 80129fa:	37b0      	adds	r7, #176	; 0xb0
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	effffffe 	.word	0xeffffffe
 8012a04:	58000c00 	.word	0x58000c00
 8012a08:	0801233d 	.word	0x0801233d

08012a0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b0ae      	sub	sp, #184	; 0xb8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	69db      	ldr	r3, [r3, #28]
 8012a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a42:	2b22      	cmp	r3, #34	; 0x22
 8012a44:	f040 8184 	bne.w	8012d50 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a52:	e127      	b.n	8012ca4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012a66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012a6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012a6e:	4013      	ands	r3, r2
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012a76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a7c:	1c9a      	adds	r2, r3, #2
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	3b01      	subs	r3, #1
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	69db      	ldr	r3, [r3, #28]
 8012a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012aa2:	f003 0307 	and.w	r3, r3, #7
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d053      	beq.n	8012b52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012aae:	f003 0301 	and.w	r3, r3, #1
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d011      	beq.n	8012ada <UART_RxISR_16BIT_FIFOEN+0xce>
 8012ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d00b      	beq.n	8012ada <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ad0:	f043 0201 	orr.w	r2, r3, #1
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012ade:	f003 0302 	and.w	r3, r3, #2
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d011      	beq.n	8012b0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012aea:	f003 0301 	and.w	r3, r3, #1
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00b      	beq.n	8012b0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2202      	movs	r2, #2
 8012af8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b00:	f043 0204 	orr.w	r2, r3, #4
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b0e:	f003 0304 	and.w	r3, r3, #4
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d011      	beq.n	8012b3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b1a:	f003 0301 	and.w	r3, r3, #1
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00b      	beq.n	8012b3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2204      	movs	r2, #4
 8012b28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b30:	f043 0202 	orr.w	r2, r3, #2
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d006      	beq.n	8012b52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f7fe fa1d 	bl	8010f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	f040 80a2 	bne.w	8012ca4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b68:	e853 3f00 	ldrex	r3, [r3]
 8012b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012b86:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b8e:	e841 2300 	strex	r3, r2, [r1]
 8012b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d1e2      	bne.n	8012b60 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	3308      	adds	r3, #8
 8012ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ba4:	e853 3f00 	ldrex	r3, [r3]
 8012ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012baa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012bac:	4b6e      	ldr	r3, [pc, #440]	; (8012d68 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012bae:	4013      	ands	r3, r2
 8012bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	3308      	adds	r3, #8
 8012bba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012bc6:	e841 2300 	strex	r3, r2, [r1]
 8012bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d1e3      	bne.n	8012b9a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2220      	movs	r2, #32
 8012bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	4a60      	ldr	r2, [pc, #384]	; (8012d6c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d021      	beq.n	8012c34 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d01a      	beq.n	8012c34 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c06:	e853 3f00 	ldrex	r3, [r3]
 8012c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c20:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c28:	e841 2300 	strex	r3, r2, [r1]
 8012c2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d1e4      	bne.n	8012bfe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d130      	bne.n	8012c9e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4a:	e853 3f00 	ldrex	r3, [r3]
 8012c4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c52:	f023 0310 	bic.w	r3, r3, #16
 8012c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	461a      	mov	r2, r3
 8012c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012c64:	647b      	str	r3, [r7, #68]	; 0x44
 8012c66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c6c:	e841 2300 	strex	r3, r2, [r1]
 8012c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1e4      	bne.n	8012c42 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	69db      	ldr	r3, [r3, #28]
 8012c7e:	f003 0310 	and.w	r3, r3, #16
 8012c82:	2b10      	cmp	r3, #16
 8012c84:	d103      	bne.n	8012c8e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	2210      	movs	r2, #16
 8012c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c94:	4619      	mov	r1, r3
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7fe f97e 	bl	8010f98 <HAL_UARTEx_RxEventCallback>
 8012c9c:	e002      	b.n	8012ca4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7ed fcea 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012ca4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d006      	beq.n	8012cba <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012cac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012cb0:	f003 0320 	and.w	r3, r3, #32
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f47f aecd 	bne.w	8012a54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cc0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012cc4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d049      	beq.n	8012d60 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012cd2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d242      	bcs.n	8012d60 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	3308      	adds	r3, #8
 8012ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce4:	e853 3f00 	ldrex	r3, [r3]
 8012ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8012cea:	6a3b      	ldr	r3, [r7, #32]
 8012cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	3308      	adds	r3, #8
 8012cfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012cfe:	633a      	str	r2, [r7, #48]	; 0x30
 8012d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d06:	e841 2300 	strex	r3, r2, [r1]
 8012d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d1e3      	bne.n	8012cda <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4a16      	ldr	r2, [pc, #88]	; (8012d70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012d16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	e853 3f00 	ldrex	r3, [r3]
 8012d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	f043 0320 	orr.w	r3, r3, #32
 8012d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	461a      	mov	r2, r3
 8012d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d3a:	61fb      	str	r3, [r7, #28]
 8012d3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d3e:	69b9      	ldr	r1, [r7, #24]
 8012d40:	69fa      	ldr	r2, [r7, #28]
 8012d42:	e841 2300 	strex	r3, r2, [r1]
 8012d46:	617b      	str	r3, [r7, #20]
   return(result);
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d1e4      	bne.n	8012d18 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d4e:	e007      	b.n	8012d60 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	699a      	ldr	r2, [r3, #24]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	f042 0208 	orr.w	r2, r2, #8
 8012d5e:	619a      	str	r2, [r3, #24]
}
 8012d60:	bf00      	nop
 8012d62:	37b8      	adds	r7, #184	; 0xb8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	effffffe 	.word	0xeffffffe
 8012d6c:	58000c00 	.word	0x58000c00
 8012d70:	080124f5 	.word	0x080124f5

08012d74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012d7c:	bf00      	nop
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b083      	sub	sp, #12
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d90:	bf00      	nop
 8012d92:	370c      	adds	r7, #12
 8012d94:	46bd      	mov	sp, r7
 8012d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9a:	4770      	bx	lr

08012d9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012da4:	bf00      	nop
 8012da6:	370c      	adds	r7, #12
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr

08012db0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b089      	sub	sp, #36	; 0x24
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d101      	bne.n	8012dc6 <HAL_UARTEx_EnableStopMode+0x16>
 8012dc2:	2302      	movs	r3, #2
 8012dc4:	e021      	b.n	8012e0a <HAL_UARTEx_EnableStopMode+0x5a>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2201      	movs	r2, #1
 8012dca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	e853 3f00 	ldrex	r3, [r3]
 8012dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	f043 0302 	orr.w	r3, r3, #2
 8012de2:	61fb      	str	r3, [r7, #28]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	461a      	mov	r2, r3
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	61bb      	str	r3, [r7, #24]
 8012dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df0:	6979      	ldr	r1, [r7, #20]
 8012df2:	69ba      	ldr	r2, [r7, #24]
 8012df4:	e841 2300 	strex	r3, r2, [r1]
 8012df8:	613b      	str	r3, [r7, #16]
   return(result);
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d1e6      	bne.n	8012dce <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2200      	movs	r2, #0
 8012e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e08:	2300      	movs	r3, #0
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3724      	adds	r7, #36	; 0x24
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e14:	4770      	bx	lr

08012e16 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b084      	sub	sp, #16
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	d101      	bne.n	8012e2c <HAL_UARTEx_EnableFifoMode+0x16>
 8012e28:	2302      	movs	r3, #2
 8012e2a:	e02b      	b.n	8012e84 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2224      	movs	r2, #36	; 0x24
 8012e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	681a      	ldr	r2, [r3, #0]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f022 0201 	bic.w	r2, r2, #1
 8012e52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012e62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	68fa      	ldr	r2, [r7, #12]
 8012e6a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 f8c3 	bl	8012ff8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2220      	movs	r2, #32
 8012e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e82:	2300      	movs	r3, #0
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	d101      	bne.n	8012ea2 <HAL_UARTEx_DisableFifoMode+0x16>
 8012e9e:	2302      	movs	r3, #2
 8012ea0:	e027      	b.n	8012ef2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2224      	movs	r2, #36	; 0x24
 8012eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f022 0201 	bic.w	r2, r2, #1
 8012ec8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012ed0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2220      	movs	r2, #32
 8012ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2200      	movs	r2, #0
 8012eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3714      	adds	r7, #20
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr

08012efe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012efe:	b580      	push	{r7, lr}
 8012f00:	b084      	sub	sp, #16
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
 8012f06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d101      	bne.n	8012f16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012f12:	2302      	movs	r3, #2
 8012f14:	e02d      	b.n	8012f72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2201      	movs	r2, #1
 8012f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2224      	movs	r2, #36	; 0x24
 8012f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	681a      	ldr	r2, [r3, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	f022 0201 	bic.w	r2, r2, #1
 8012f3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	689b      	ldr	r3, [r3, #8]
 8012f44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	683a      	ldr	r2, [r7, #0]
 8012f4e:	430a      	orrs	r2, r1
 8012f50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 f850 	bl	8012ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	68fa      	ldr	r2, [r7, #12]
 8012f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2220      	movs	r2, #32
 8012f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f70:	2300      	movs	r3, #0
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3710      	adds	r7, #16
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012f7a:	b580      	push	{r7, lr}
 8012f7c:	b084      	sub	sp, #16
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
 8012f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f8a:	2b01      	cmp	r3, #1
 8012f8c:	d101      	bne.n	8012f92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012f8e:	2302      	movs	r3, #2
 8012f90:	e02d      	b.n	8012fee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2201      	movs	r2, #1
 8012f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2224      	movs	r2, #36	; 0x24
 8012f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f022 0201 	bic.w	r2, r2, #1
 8012fb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	689b      	ldr	r3, [r3, #8]
 8012fc0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	683a      	ldr	r2, [r7, #0]
 8012fca:	430a      	orrs	r2, r1
 8012fcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 f812 	bl	8012ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	68fa      	ldr	r2, [r7, #12]
 8012fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2220      	movs	r2, #32
 8012fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012fec:	2300      	movs	r3, #0
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
	...

08012ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b085      	sub	sp, #20
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013004:	2b00      	cmp	r3, #0
 8013006:	d108      	bne.n	801301a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2201      	movs	r2, #1
 801300c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2201      	movs	r2, #1
 8013014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013018:	e031      	b.n	801307e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801301a:	2310      	movs	r3, #16
 801301c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801301e:	2310      	movs	r3, #16
 8013020:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	0e5b      	lsrs	r3, r3, #25
 801302a:	b2db      	uxtb	r3, r3
 801302c:	f003 0307 	and.w	r3, r3, #7
 8013030:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	689b      	ldr	r3, [r3, #8]
 8013038:	0f5b      	lsrs	r3, r3, #29
 801303a:	b2db      	uxtb	r3, r3
 801303c:	f003 0307 	and.w	r3, r3, #7
 8013040:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013042:	7bbb      	ldrb	r3, [r7, #14]
 8013044:	7b3a      	ldrb	r2, [r7, #12]
 8013046:	4911      	ldr	r1, [pc, #68]	; (801308c <UARTEx_SetNbDataToProcess+0x94>)
 8013048:	5c8a      	ldrb	r2, [r1, r2]
 801304a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801304e:	7b3a      	ldrb	r2, [r7, #12]
 8013050:	490f      	ldr	r1, [pc, #60]	; (8013090 <UARTEx_SetNbDataToProcess+0x98>)
 8013052:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013054:	fb93 f3f2 	sdiv	r3, r3, r2
 8013058:	b29a      	uxth	r2, r3
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013060:	7bfb      	ldrb	r3, [r7, #15]
 8013062:	7b7a      	ldrb	r2, [r7, #13]
 8013064:	4909      	ldr	r1, [pc, #36]	; (801308c <UARTEx_SetNbDataToProcess+0x94>)
 8013066:	5c8a      	ldrb	r2, [r1, r2]
 8013068:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801306c:	7b7a      	ldrb	r2, [r7, #13]
 801306e:	4908      	ldr	r1, [pc, #32]	; (8013090 <UARTEx_SetNbDataToProcess+0x98>)
 8013070:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013072:	fb93 f3f2 	sdiv	r3, r3, r2
 8013076:	b29a      	uxth	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801307e:	bf00      	nop
 8013080:	3714      	adds	r7, #20
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr
 801308a:	bf00      	nop
 801308c:	08017a34 	.word	0x08017a34
 8013090:	08017a3c 	.word	0x08017a3c

08013094 <__NVIC_SetPriority>:
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	4603      	mov	r3, r0
 801309c:	6039      	str	r1, [r7, #0]
 801309e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80130a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	db0a      	blt.n	80130be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	b2da      	uxtb	r2, r3
 80130ac:	490c      	ldr	r1, [pc, #48]	; (80130e0 <__NVIC_SetPriority+0x4c>)
 80130ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130b2:	0112      	lsls	r2, r2, #4
 80130b4:	b2d2      	uxtb	r2, r2
 80130b6:	440b      	add	r3, r1
 80130b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80130bc:	e00a      	b.n	80130d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	b2da      	uxtb	r2, r3
 80130c2:	4908      	ldr	r1, [pc, #32]	; (80130e4 <__NVIC_SetPriority+0x50>)
 80130c4:	88fb      	ldrh	r3, [r7, #6]
 80130c6:	f003 030f 	and.w	r3, r3, #15
 80130ca:	3b04      	subs	r3, #4
 80130cc:	0112      	lsls	r2, r2, #4
 80130ce:	b2d2      	uxtb	r2, r2
 80130d0:	440b      	add	r3, r1
 80130d2:	761a      	strb	r2, [r3, #24]
}
 80130d4:	bf00      	nop
 80130d6:	370c      	adds	r7, #12
 80130d8:	46bd      	mov	sp, r7
 80130da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130de:	4770      	bx	lr
 80130e0:	e000e100 	.word	0xe000e100
 80130e4:	e000ed00 	.word	0xe000ed00

080130e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80130ec:	4b05      	ldr	r3, [pc, #20]	; (8013104 <SysTick_Handler+0x1c>)
 80130ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80130f0:	f002 fc92 	bl	8015a18 <xTaskGetSchedulerState>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b01      	cmp	r3, #1
 80130f8:	d001      	beq.n	80130fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80130fa:	f003 fab5 	bl	8016668 <xPortSysTickHandler>
  }
}
 80130fe:	bf00      	nop
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	e000e010 	.word	0xe000e010

08013108 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013108:	b580      	push	{r7, lr}
 801310a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801310c:	2100      	movs	r1, #0
 801310e:	f06f 0004 	mvn.w	r0, #4
 8013112:	f7ff ffbf 	bl	8013094 <__NVIC_SetPriority>
#endif
}
 8013116:	bf00      	nop
 8013118:	bd80      	pop	{r7, pc}
	...

0801311c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801311c:	b480      	push	{r7}
 801311e:	b083      	sub	sp, #12
 8013120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013122:	f3ef 8305 	mrs	r3, IPSR
 8013126:	603b      	str	r3, [r7, #0]
  return(result);
 8013128:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801312a:	2b00      	cmp	r3, #0
 801312c:	d003      	beq.n	8013136 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801312e:	f06f 0305 	mvn.w	r3, #5
 8013132:	607b      	str	r3, [r7, #4]
 8013134:	e00c      	b.n	8013150 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013136:	4b0a      	ldr	r3, [pc, #40]	; (8013160 <osKernelInitialize+0x44>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d105      	bne.n	801314a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801313e:	4b08      	ldr	r3, [pc, #32]	; (8013160 <osKernelInitialize+0x44>)
 8013140:	2201      	movs	r2, #1
 8013142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013144:	2300      	movs	r3, #0
 8013146:	607b      	str	r3, [r7, #4]
 8013148:	e002      	b.n	8013150 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801314e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013150:	687b      	ldr	r3, [r7, #4]
}
 8013152:	4618      	mov	r0, r3
 8013154:	370c      	adds	r7, #12
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	240010e8 	.word	0x240010e8

08013164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013164:	b580      	push	{r7, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801316a:	f3ef 8305 	mrs	r3, IPSR
 801316e:	603b      	str	r3, [r7, #0]
  return(result);
 8013170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013172:	2b00      	cmp	r3, #0
 8013174:	d003      	beq.n	801317e <osKernelStart+0x1a>
    stat = osErrorISR;
 8013176:	f06f 0305 	mvn.w	r3, #5
 801317a:	607b      	str	r3, [r7, #4]
 801317c:	e010      	b.n	80131a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801317e:	4b0b      	ldr	r3, [pc, #44]	; (80131ac <osKernelStart+0x48>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d109      	bne.n	801319a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013186:	f7ff ffbf 	bl	8013108 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801318a:	4b08      	ldr	r3, [pc, #32]	; (80131ac <osKernelStart+0x48>)
 801318c:	2202      	movs	r2, #2
 801318e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013190:	f001 ff54 	bl	801503c <vTaskStartScheduler>
      stat = osOK;
 8013194:	2300      	movs	r3, #0
 8013196:	607b      	str	r3, [r7, #4]
 8013198:	e002      	b.n	80131a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801319a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801319e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80131a0:	687b      	ldr	r3, [r7, #4]
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	240010e8 	.word	0x240010e8

080131b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b08e      	sub	sp, #56	; 0x38
 80131b4:	af04      	add	r7, sp, #16
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	60b9      	str	r1, [r7, #8]
 80131ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80131bc:	2300      	movs	r3, #0
 80131be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131c0:	f3ef 8305 	mrs	r3, IPSR
 80131c4:	617b      	str	r3, [r7, #20]
  return(result);
 80131c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d17e      	bne.n	80132ca <osThreadNew+0x11a>
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d07b      	beq.n	80132ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80131d2:	2380      	movs	r3, #128	; 0x80
 80131d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80131d6:	2318      	movs	r3, #24
 80131d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80131da:	2300      	movs	r3, #0
 80131dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80131de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d045      	beq.n	8013276 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d002      	beq.n	80131f8 <osThreadNew+0x48>
        name = attr->name;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	699b      	ldr	r3, [r3, #24]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d002      	beq.n	8013206 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	699b      	ldr	r3, [r3, #24]
 8013204:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d008      	beq.n	801321e <osThreadNew+0x6e>
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	2b38      	cmp	r3, #56	; 0x38
 8013210:	d805      	bhi.n	801321e <osThreadNew+0x6e>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	f003 0301 	and.w	r3, r3, #1
 801321a:	2b00      	cmp	r3, #0
 801321c:	d001      	beq.n	8013222 <osThreadNew+0x72>
        return (NULL);
 801321e:	2300      	movs	r3, #0
 8013220:	e054      	b.n	80132cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	695b      	ldr	r3, [r3, #20]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d003      	beq.n	8013232 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	695b      	ldr	r3, [r3, #20]
 801322e:	089b      	lsrs	r3, r3, #2
 8013230:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d00e      	beq.n	8013258 <osThreadNew+0xa8>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	2b5b      	cmp	r3, #91	; 0x5b
 8013240:	d90a      	bls.n	8013258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013246:	2b00      	cmp	r3, #0
 8013248:	d006      	beq.n	8013258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	695b      	ldr	r3, [r3, #20]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d002      	beq.n	8013258 <osThreadNew+0xa8>
        mem = 1;
 8013252:	2301      	movs	r3, #1
 8013254:	61bb      	str	r3, [r7, #24]
 8013256:	e010      	b.n	801327a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	689b      	ldr	r3, [r3, #8]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d10c      	bne.n	801327a <osThreadNew+0xca>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d108      	bne.n	801327a <osThreadNew+0xca>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	691b      	ldr	r3, [r3, #16]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d104      	bne.n	801327a <osThreadNew+0xca>
          mem = 0;
 8013270:	2300      	movs	r3, #0
 8013272:	61bb      	str	r3, [r7, #24]
 8013274:	e001      	b.n	801327a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	2b01      	cmp	r3, #1
 801327e:	d110      	bne.n	80132a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013288:	9202      	str	r2, [sp, #8]
 801328a:	9301      	str	r3, [sp, #4]
 801328c:	69fb      	ldr	r3, [r7, #28]
 801328e:	9300      	str	r3, [sp, #0]
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	6a3a      	ldr	r2, [r7, #32]
 8013294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013296:	68f8      	ldr	r0, [r7, #12]
 8013298:	f001 fbe0 	bl	8014a5c <xTaskCreateStatic>
 801329c:	4603      	mov	r3, r0
 801329e:	613b      	str	r3, [r7, #16]
 80132a0:	e013      	b.n	80132ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80132a2:	69bb      	ldr	r3, [r7, #24]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d110      	bne.n	80132ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	f107 0310 	add.w	r3, r7, #16
 80132b0:	9301      	str	r3, [sp, #4]
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	9300      	str	r3, [sp, #0]
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132ba:	68f8      	ldr	r0, [r7, #12]
 80132bc:	f001 fc2b 	bl	8014b16 <xTaskCreate>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	d001      	beq.n	80132ca <osThreadNew+0x11a>
            hTask = NULL;
 80132c6:	2300      	movs	r3, #0
 80132c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80132ca:	693b      	ldr	r3, [r7, #16]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3728      	adds	r7, #40	; 0x28
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132da:	f3ef 8305 	mrs	r3, IPSR
 80132de:	603b      	str	r3, [r7, #0]
  return(result);
 80132e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d003      	beq.n	80132ee <osThreadYield+0x1a>
    stat = osErrorISR;
 80132e6:	f06f 0305 	mvn.w	r3, #5
 80132ea:	607b      	str	r3, [r7, #4]
 80132ec:	e009      	b.n	8013302 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80132ee:	2300      	movs	r3, #0
 80132f0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80132f2:	4b07      	ldr	r3, [pc, #28]	; (8013310 <osThreadYield+0x3c>)
 80132f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132f8:	601a      	str	r2, [r3, #0]
 80132fa:	f3bf 8f4f 	dsb	sy
 80132fe:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013302:	687b      	ldr	r3, [r7, #4]
}
 8013304:	4618      	mov	r0, r3
 8013306:	370c      	adds	r7, #12
 8013308:	46bd      	mov	sp, r7
 801330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330e:	4770      	bx	lr
 8013310:	e000ed04 	.word	0xe000ed04

08013314 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013314:	b580      	push	{r7, lr}
 8013316:	b086      	sub	sp, #24
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013320:	f3ef 8305 	mrs	r3, IPSR
 8013324:	60fb      	str	r3, [r7, #12]
  return(result);
 8013326:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013328:	2b00      	cmp	r3, #0
 801332a:	d003      	beq.n	8013334 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801332c:	f06f 0305 	mvn.w	r3, #5
 8013330:	617b      	str	r3, [r7, #20]
 8013332:	e00b      	b.n	801334c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d103      	bne.n	8013342 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801333a:	f06f 0303 	mvn.w	r3, #3
 801333e:	617b      	str	r3, [r7, #20]
 8013340:	e004      	b.n	801334c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8013342:	2300      	movs	r3, #0
 8013344:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8013346:	6938      	ldr	r0, [r7, #16]
 8013348:	f001 fd5e 	bl	8014e08 <vTaskSuspend>
  }

  return (stat);
 801334c:	697b      	ldr	r3, [r7, #20]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013356:	b580      	push	{r7, lr}
 8013358:	b084      	sub	sp, #16
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801335e:	f3ef 8305 	mrs	r3, IPSR
 8013362:	60bb      	str	r3, [r7, #8]
  return(result);
 8013364:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013366:	2b00      	cmp	r3, #0
 8013368:	d003      	beq.n	8013372 <osDelay+0x1c>
    stat = osErrorISR;
 801336a:	f06f 0305 	mvn.w	r3, #5
 801336e:	60fb      	str	r3, [r7, #12]
 8013370:	e007      	b.n	8013382 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013372:	2300      	movs	r3, #0
 8013374:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d002      	beq.n	8013382 <osDelay+0x2c>
      vTaskDelay(ticks);
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f001 fd0f 	bl	8014da0 <vTaskDelay>
    }
  }

  return (stat);
 8013382:	68fb      	ldr	r3, [r7, #12]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3710      	adds	r7, #16
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013394:	2300      	movs	r3, #0
 8013396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013398:	f3ef 8305 	mrs	r3, IPSR
 801339c:	60fb      	str	r3, [r7, #12]
  return(result);
 801339e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d12d      	bne.n	8013400 <osEventFlagsNew+0x74>
    mem = -1;
 80133a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133a8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d015      	beq.n	80133dc <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	689b      	ldr	r3, [r3, #8]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d006      	beq.n	80133c6 <osEventFlagsNew+0x3a>
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	2b1f      	cmp	r3, #31
 80133be:	d902      	bls.n	80133c6 <osEventFlagsNew+0x3a>
        mem = 1;
 80133c0:	2301      	movs	r3, #1
 80133c2:	613b      	str	r3, [r7, #16]
 80133c4:	e00c      	b.n	80133e0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	689b      	ldr	r3, [r3, #8]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d108      	bne.n	80133e0 <osEventFlagsNew+0x54>
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	68db      	ldr	r3, [r3, #12]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d104      	bne.n	80133e0 <osEventFlagsNew+0x54>
          mem = 0;
 80133d6:	2300      	movs	r3, #0
 80133d8:	613b      	str	r3, [r7, #16]
 80133da:	e001      	b.n	80133e0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80133dc:	2300      	movs	r3, #0
 80133de:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d106      	bne.n	80133f4 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	689b      	ldr	r3, [r3, #8]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f000 fa70 	bl	80138d0 <xEventGroupCreateStatic>
 80133f0:	6178      	str	r0, [r7, #20]
 80133f2:	e005      	b.n	8013400 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d102      	bne.n	8013400 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80133fa:	f000 faa0 	bl	801393e <xEventGroupCreate>
 80133fe:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013400:	697b      	ldr	r3, [r7, #20]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3718      	adds	r7, #24
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
	...

0801340c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801340c:	b580      	push	{r7, lr}
 801340e:	b086      	sub	sp, #24
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d004      	beq.n	801342a <osEventFlagsSet+0x1e>
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013426:	2b00      	cmp	r3, #0
 8013428:	d003      	beq.n	8013432 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801342a:	f06f 0303 	mvn.w	r3, #3
 801342e:	617b      	str	r3, [r7, #20]
 8013430:	e028      	b.n	8013484 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013432:	f3ef 8305 	mrs	r3, IPSR
 8013436:	60fb      	str	r3, [r7, #12]
  return(result);
 8013438:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801343a:	2b00      	cmp	r3, #0
 801343c:	d01d      	beq.n	801347a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801343e:	2300      	movs	r3, #0
 8013440:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8013442:	f107 0308 	add.w	r3, r7, #8
 8013446:	461a      	mov	r2, r3
 8013448:	6839      	ldr	r1, [r7, #0]
 801344a:	6938      	ldr	r0, [r7, #16]
 801344c:	f000 fc98 	bl	8013d80 <xEventGroupSetBitsFromISR>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d103      	bne.n	801345e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013456:	f06f 0302 	mvn.w	r3, #2
 801345a:	617b      	str	r3, [r7, #20]
 801345c:	e012      	b.n	8013484 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d00d      	beq.n	8013484 <osEventFlagsSet+0x78>
 8013468:	4b09      	ldr	r3, [pc, #36]	; (8013490 <osEventFlagsSet+0x84>)
 801346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	f3bf 8f6f 	isb	sy
 8013478:	e004      	b.n	8013484 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801347a:	6839      	ldr	r1, [r7, #0]
 801347c:	6938      	ldr	r0, [r7, #16]
 801347e:	f000 fbb7 	bl	8013bf0 <xEventGroupSetBits>
 8013482:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013484:	697b      	ldr	r3, [r7, #20]
}
 8013486:	4618      	mov	r0, r3
 8013488:	3718      	adds	r7, #24
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	e000ed04 	.word	0xe000ed04

08013494 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013494:	b580      	push	{r7, lr}
 8013496:	b086      	sub	sp, #24
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
 801349c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d004      	beq.n	80134b2 <osEventFlagsClear+0x1e>
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d003      	beq.n	80134ba <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80134b2:	f06f 0303 	mvn.w	r3, #3
 80134b6:	617b      	str	r3, [r7, #20]
 80134b8:	e019      	b.n	80134ee <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134ba:	f3ef 8305 	mrs	r3, IPSR
 80134be:	60fb      	str	r3, [r7, #12]
  return(result);
 80134c0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00e      	beq.n	80134e4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80134c6:	6938      	ldr	r0, [r7, #16]
 80134c8:	f000 fb6e 	bl	8013ba8 <xEventGroupGetBitsFromISR>
 80134cc:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80134ce:	6839      	ldr	r1, [r7, #0]
 80134d0:	6938      	ldr	r0, [r7, #16]
 80134d2:	f000 fb55 	bl	8013b80 <xEventGroupClearBitsFromISR>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d108      	bne.n	80134ee <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80134dc:	f06f 0302 	mvn.w	r3, #2
 80134e0:	617b      	str	r3, [r7, #20]
 80134e2:	e004      	b.n	80134ee <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80134e4:	6839      	ldr	r1, [r7, #0]
 80134e6:	6938      	ldr	r0, [r7, #16]
 80134e8:	f000 fb12 	bl	8013b10 <xEventGroupClearBits>
 80134ec:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80134ee:	697b      	ldr	r3, [r7, #20]
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3718      	adds	r7, #24
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b086      	sub	sp, #24
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d102      	bne.n	8013510 <osEventFlagsGet+0x18>
    rflags = 0U;
 801350a:	2300      	movs	r3, #0
 801350c:	617b      	str	r3, [r7, #20]
 801350e:	e00f      	b.n	8013530 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013510:	f3ef 8305 	mrs	r3, IPSR
 8013514:	60fb      	str	r3, [r7, #12]
  return(result);
 8013516:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013518:	2b00      	cmp	r3, #0
 801351a:	d004      	beq.n	8013526 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801351c:	6938      	ldr	r0, [r7, #16]
 801351e:	f000 fb43 	bl	8013ba8 <xEventGroupGetBitsFromISR>
 8013522:	6178      	str	r0, [r7, #20]
 8013524:	e004      	b.n	8013530 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8013526:	2100      	movs	r1, #0
 8013528:	6938      	ldr	r0, [r7, #16]
 801352a:	f000 faf1 	bl	8013b10 <xEventGroupClearBits>
 801352e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013530:	697b      	ldr	r3, [r7, #20]
}
 8013532:	4618      	mov	r0, r3
 8013534:	3718      	adds	r7, #24
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801353a:	b580      	push	{r7, lr}
 801353c:	b08c      	sub	sp, #48	; 0x30
 801353e:	af02      	add	r7, sp, #8
 8013540:	60f8      	str	r0, [r7, #12]
 8013542:	60b9      	str	r1, [r7, #8]
 8013544:	607a      	str	r2, [r7, #4]
 8013546:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801354c:	69bb      	ldr	r3, [r7, #24]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d004      	beq.n	801355c <osEventFlagsWait+0x22>
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013558:	2b00      	cmp	r3, #0
 801355a:	d003      	beq.n	8013564 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801355c:	f06f 0303 	mvn.w	r3, #3
 8013560:	61fb      	str	r3, [r7, #28]
 8013562:	e04b      	b.n	80135fc <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013564:	f3ef 8305 	mrs	r3, IPSR
 8013568:	617b      	str	r3, [r7, #20]
  return(result);
 801356a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801356c:	2b00      	cmp	r3, #0
 801356e:	d003      	beq.n	8013578 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8013570:	f06f 0305 	mvn.w	r3, #5
 8013574:	61fb      	str	r3, [r7, #28]
 8013576:	e041      	b.n	80135fc <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f003 0301 	and.w	r3, r3, #1
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8013582:	2301      	movs	r3, #1
 8013584:	627b      	str	r3, [r7, #36]	; 0x24
 8013586:	e001      	b.n	801358c <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013588:	2300      	movs	r3, #0
 801358a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f003 0302 	and.w	r3, r3, #2
 8013592:	2b00      	cmp	r3, #0
 8013594:	d002      	beq.n	801359c <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013596:	2300      	movs	r3, #0
 8013598:	623b      	str	r3, [r7, #32]
 801359a:	e001      	b.n	80135a0 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801359c:	2301      	movs	r3, #1
 801359e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	9300      	str	r3, [sp, #0]
 80135a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a6:	6a3a      	ldr	r2, [r7, #32]
 80135a8:	68b9      	ldr	r1, [r7, #8]
 80135aa:	69b8      	ldr	r0, [r7, #24]
 80135ac:	f000 f9e2 	bl	8013974 <xEventGroupWaitBits>
 80135b0:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f003 0301 	and.w	r3, r3, #1
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d010      	beq.n	80135de <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80135bc:	68ba      	ldr	r2, [r7, #8]
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	4013      	ands	r3, r2
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d019      	beq.n	80135fc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d003      	beq.n	80135d6 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80135ce:	f06f 0301 	mvn.w	r3, #1
 80135d2:	61fb      	str	r3, [r7, #28]
 80135d4:	e012      	b.n	80135fc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80135d6:	f06f 0302 	mvn.w	r3, #2
 80135da:	61fb      	str	r3, [r7, #28]
 80135dc:	e00e      	b.n	80135fc <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80135de:	68ba      	ldr	r2, [r7, #8]
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	4013      	ands	r3, r2
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d109      	bne.n	80135fc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d003      	beq.n	80135f6 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80135ee:	f06f 0301 	mvn.w	r3, #1
 80135f2:	61fb      	str	r3, [r7, #28]
 80135f4:	e002      	b.n	80135fc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80135f6:	f06f 0302 	mvn.w	r3, #2
 80135fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80135fc:	69fb      	ldr	r3, [r7, #28]
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3728      	adds	r7, #40	; 0x28
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}

08013606 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013606:	b580      	push	{r7, lr}
 8013608:	b08a      	sub	sp, #40	; 0x28
 801360a:	af02      	add	r7, sp, #8
 801360c:	60f8      	str	r0, [r7, #12]
 801360e:	60b9      	str	r1, [r7, #8]
 8013610:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013612:	2300      	movs	r3, #0
 8013614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013616:	f3ef 8305 	mrs	r3, IPSR
 801361a:	613b      	str	r3, [r7, #16]
  return(result);
 801361c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801361e:	2b00      	cmp	r3, #0
 8013620:	d15f      	bne.n	80136e2 <osMessageQueueNew+0xdc>
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d05c      	beq.n	80136e2 <osMessageQueueNew+0xdc>
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d059      	beq.n	80136e2 <osMessageQueueNew+0xdc>
    mem = -1;
 801362e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013632:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d029      	beq.n	801368e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d012      	beq.n	8013668 <osMessageQueueNew+0x62>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	2b4f      	cmp	r3, #79	; 0x4f
 8013648:	d90e      	bls.n	8013668 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801364e:	2b00      	cmp	r3, #0
 8013650:	d00a      	beq.n	8013668 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	695a      	ldr	r2, [r3, #20]
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	68b9      	ldr	r1, [r7, #8]
 801365a:	fb01 f303 	mul.w	r3, r1, r3
 801365e:	429a      	cmp	r2, r3
 8013660:	d302      	bcc.n	8013668 <osMessageQueueNew+0x62>
        mem = 1;
 8013662:	2301      	movs	r3, #1
 8013664:	61bb      	str	r3, [r7, #24]
 8013666:	e014      	b.n	8013692 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	689b      	ldr	r3, [r3, #8]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d110      	bne.n	8013692 <osMessageQueueNew+0x8c>
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d10c      	bne.n	8013692 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801367c:	2b00      	cmp	r3, #0
 801367e:	d108      	bne.n	8013692 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	695b      	ldr	r3, [r3, #20]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d104      	bne.n	8013692 <osMessageQueueNew+0x8c>
          mem = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	61bb      	str	r3, [r7, #24]
 801368c:	e001      	b.n	8013692 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801368e:	2300      	movs	r3, #0
 8013690:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013692:	69bb      	ldr	r3, [r7, #24]
 8013694:	2b01      	cmp	r3, #1
 8013696:	d10b      	bne.n	80136b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	691a      	ldr	r2, [r3, #16]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	689b      	ldr	r3, [r3, #8]
 80136a0:	2100      	movs	r1, #0
 80136a2:	9100      	str	r1, [sp, #0]
 80136a4:	68b9      	ldr	r1, [r7, #8]
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f000 fc9a 	bl	8013fe0 <xQueueGenericCreateStatic>
 80136ac:	61f8      	str	r0, [r7, #28]
 80136ae:	e008      	b.n	80136c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d105      	bne.n	80136c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80136b6:	2200      	movs	r2, #0
 80136b8:	68b9      	ldr	r1, [r7, #8]
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	f000 fd08 	bl	80140d0 <xQueueGenericCreate>
 80136c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80136c2:	69fb      	ldr	r3, [r7, #28]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d00c      	beq.n	80136e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d003      	beq.n	80136d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	617b      	str	r3, [r7, #20]
 80136d4:	e001      	b.n	80136da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80136d6:	2300      	movs	r3, #0
 80136d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80136da:	6979      	ldr	r1, [r7, #20]
 80136dc:	69f8      	ldr	r0, [r7, #28]
 80136de:	f001 f95f 	bl	80149a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80136e2:	69fb      	ldr	r3, [r7, #28]
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3720      	adds	r7, #32
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b088      	sub	sp, #32
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	603b      	str	r3, [r7, #0]
 80136f8:	4613      	mov	r3, r2
 80136fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013700:	2300      	movs	r3, #0
 8013702:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013704:	f3ef 8305 	mrs	r3, IPSR
 8013708:	617b      	str	r3, [r7, #20]
  return(result);
 801370a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801370c:	2b00      	cmp	r3, #0
 801370e:	d028      	beq.n	8013762 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d005      	beq.n	8013722 <osMessageQueuePut+0x36>
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d002      	beq.n	8013722 <osMessageQueuePut+0x36>
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d003      	beq.n	801372a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013722:	f06f 0303 	mvn.w	r3, #3
 8013726:	61fb      	str	r3, [r7, #28]
 8013728:	e038      	b.n	801379c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801372a:	2300      	movs	r3, #0
 801372c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801372e:	f107 0210 	add.w	r2, r7, #16
 8013732:	2300      	movs	r3, #0
 8013734:	68b9      	ldr	r1, [r7, #8]
 8013736:	69b8      	ldr	r0, [r7, #24]
 8013738:	f000 fe26 	bl	8014388 <xQueueGenericSendFromISR>
 801373c:	4603      	mov	r3, r0
 801373e:	2b01      	cmp	r3, #1
 8013740:	d003      	beq.n	801374a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8013742:	f06f 0302 	mvn.w	r3, #2
 8013746:	61fb      	str	r3, [r7, #28]
 8013748:	e028      	b.n	801379c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d025      	beq.n	801379c <osMessageQueuePut+0xb0>
 8013750:	4b15      	ldr	r3, [pc, #84]	; (80137a8 <osMessageQueuePut+0xbc>)
 8013752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013756:	601a      	str	r2, [r3, #0]
 8013758:	f3bf 8f4f 	dsb	sy
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	e01c      	b.n	801379c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d002      	beq.n	801376e <osMessageQueuePut+0x82>
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d103      	bne.n	8013776 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801376e:	f06f 0303 	mvn.w	r3, #3
 8013772:	61fb      	str	r3, [r7, #28]
 8013774:	e012      	b.n	801379c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013776:	2300      	movs	r3, #0
 8013778:	683a      	ldr	r2, [r7, #0]
 801377a:	68b9      	ldr	r1, [r7, #8]
 801377c:	69b8      	ldr	r0, [r7, #24]
 801377e:	f000 fd05 	bl	801418c <xQueueGenericSend>
 8013782:	4603      	mov	r3, r0
 8013784:	2b01      	cmp	r3, #1
 8013786:	d009      	beq.n	801379c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d003      	beq.n	8013796 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801378e:	f06f 0301 	mvn.w	r3, #1
 8013792:	61fb      	str	r3, [r7, #28]
 8013794:	e002      	b.n	801379c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013796:	f06f 0302 	mvn.w	r3, #2
 801379a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801379c:	69fb      	ldr	r3, [r7, #28]
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3720      	adds	r7, #32
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	e000ed04 	.word	0xe000ed04

080137ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b088      	sub	sp, #32
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80137be:	2300      	movs	r3, #0
 80137c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137c2:	f3ef 8305 	mrs	r3, IPSR
 80137c6:	617b      	str	r3, [r7, #20]
  return(result);
 80137c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d028      	beq.n	8013820 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d005      	beq.n	80137e0 <osMessageQueueGet+0x34>
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d002      	beq.n	80137e0 <osMessageQueueGet+0x34>
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d003      	beq.n	80137e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80137e0:	f06f 0303 	mvn.w	r3, #3
 80137e4:	61fb      	str	r3, [r7, #28]
 80137e6:	e037      	b.n	8013858 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80137e8:	2300      	movs	r3, #0
 80137ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80137ec:	f107 0310 	add.w	r3, r7, #16
 80137f0:	461a      	mov	r2, r3
 80137f2:	68b9      	ldr	r1, [r7, #8]
 80137f4:	69b8      	ldr	r0, [r7, #24]
 80137f6:	f000 ff43 	bl	8014680 <xQueueReceiveFromISR>
 80137fa:	4603      	mov	r3, r0
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d003      	beq.n	8013808 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013800:	f06f 0302 	mvn.w	r3, #2
 8013804:	61fb      	str	r3, [r7, #28]
 8013806:	e027      	b.n	8013858 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d024      	beq.n	8013858 <osMessageQueueGet+0xac>
 801380e:	4b15      	ldr	r3, [pc, #84]	; (8013864 <osMessageQueueGet+0xb8>)
 8013810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	f3bf 8f4f 	dsb	sy
 801381a:	f3bf 8f6f 	isb	sy
 801381e:	e01b      	b.n	8013858 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d002      	beq.n	801382c <osMessageQueueGet+0x80>
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d103      	bne.n	8013834 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801382c:	f06f 0303 	mvn.w	r3, #3
 8013830:	61fb      	str	r3, [r7, #28]
 8013832:	e011      	b.n	8013858 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013834:	683a      	ldr	r2, [r7, #0]
 8013836:	68b9      	ldr	r1, [r7, #8]
 8013838:	69b8      	ldr	r0, [r7, #24]
 801383a:	f000 fe41 	bl	80144c0 <xQueueReceive>
 801383e:	4603      	mov	r3, r0
 8013840:	2b01      	cmp	r3, #1
 8013842:	d009      	beq.n	8013858 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d003      	beq.n	8013852 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801384a:	f06f 0301 	mvn.w	r3, #1
 801384e:	61fb      	str	r3, [r7, #28]
 8013850:	e002      	b.n	8013858 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013852:	f06f 0302 	mvn.w	r3, #2
 8013856:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013858:	69fb      	ldr	r3, [r7, #28]
}
 801385a:	4618      	mov	r0, r3
 801385c:	3720      	adds	r7, #32
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	e000ed04 	.word	0xe000ed04

08013868 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013868:	b480      	push	{r7}
 801386a:	b085      	sub	sp, #20
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	4a07      	ldr	r2, [pc, #28]	; (8013894 <vApplicationGetIdleTaskMemory+0x2c>)
 8013878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	4a06      	ldr	r2, [pc, #24]	; (8013898 <vApplicationGetIdleTaskMemory+0x30>)
 801387e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2280      	movs	r2, #128	; 0x80
 8013884:	601a      	str	r2, [r3, #0]
}
 8013886:	bf00      	nop
 8013888:	3714      	adds	r7, #20
 801388a:	46bd      	mov	sp, r7
 801388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013890:	4770      	bx	lr
 8013892:	bf00      	nop
 8013894:	240010ec 	.word	0x240010ec
 8013898:	24001148 	.word	0x24001148

0801389c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	4a07      	ldr	r2, [pc, #28]	; (80138c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80138ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	4a06      	ldr	r2, [pc, #24]	; (80138cc <vApplicationGetTimerTaskMemory+0x30>)
 80138b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138ba:	601a      	str	r2, [r3, #0]
}
 80138bc:	bf00      	nop
 80138be:	3714      	adds	r7, #20
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr
 80138c8:	24001348 	.word	0x24001348
 80138cc:	240013a4 	.word	0x240013a4

080138d0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b086      	sub	sp, #24
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d10a      	bne.n	80138f4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80138de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e2:	f383 8811 	msr	BASEPRI, r3
 80138e6:	f3bf 8f6f 	isb	sy
 80138ea:	f3bf 8f4f 	dsb	sy
 80138ee:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80138f0:	bf00      	nop
 80138f2:	e7fe      	b.n	80138f2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80138f4:	2320      	movs	r3, #32
 80138f6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	2b20      	cmp	r3, #32
 80138fc:	d00a      	beq.n	8013914 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80138fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013902:	f383 8811 	msr	BASEPRI, r3
 8013906:	f3bf 8f6f 	isb	sy
 801390a:	f3bf 8f4f 	dsb	sy
 801390e:	60fb      	str	r3, [r7, #12]
}
 8013910:	bf00      	nop
 8013912:	e7fe      	b.n	8013912 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d00a      	beq.n	8013934 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	2200      	movs	r2, #0
 8013922:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	3304      	adds	r3, #4
 8013928:	4618      	mov	r0, r3
 801392a:	f000 fa3d 	bl	8013da8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	2201      	movs	r2, #1
 8013932:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013934:	697b      	ldr	r3, [r7, #20]
	}
 8013936:	4618      	mov	r0, r3
 8013938:	3718      	adds	r7, #24
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}

0801393e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801393e:	b580      	push	{r7, lr}
 8013940:	b082      	sub	sp, #8
 8013942:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013944:	2020      	movs	r0, #32
 8013946:	f002 ff1f 	bl	8016788 <pvPortMalloc>
 801394a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d00a      	beq.n	8013968 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2200      	movs	r2, #0
 8013956:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	3304      	adds	r3, #4
 801395c:	4618      	mov	r0, r3
 801395e:	f000 fa23 	bl	8013da8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013968:	687b      	ldr	r3, [r7, #4]
	}
 801396a:	4618      	mov	r0, r3
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
	...

08013974 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b090      	sub	sp, #64	; 0x40
 8013978:	af00      	add	r7, sp, #0
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	607a      	str	r2, [r7, #4]
 8013980:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013986:	2300      	movs	r3, #0
 8013988:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801398a:	2300      	movs	r3, #0
 801398c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d10a      	bne.n	80139aa <xEventGroupWaitBits+0x36>
	__asm volatile
 8013994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013998:	f383 8811 	msr	BASEPRI, r3
 801399c:	f3bf 8f6f 	isb	sy
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	623b      	str	r3, [r7, #32]
}
 80139a6:	bf00      	nop
 80139a8:	e7fe      	b.n	80139a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d00a      	beq.n	80139ca <xEventGroupWaitBits+0x56>
	__asm volatile
 80139b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b8:	f383 8811 	msr	BASEPRI, r3
 80139bc:	f3bf 8f6f 	isb	sy
 80139c0:	f3bf 8f4f 	dsb	sy
 80139c4:	61fb      	str	r3, [r7, #28]
}
 80139c6:	bf00      	nop
 80139c8:	e7fe      	b.n	80139c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d10a      	bne.n	80139e6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80139d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d4:	f383 8811 	msr	BASEPRI, r3
 80139d8:	f3bf 8f6f 	isb	sy
 80139dc:	f3bf 8f4f 	dsb	sy
 80139e0:	61bb      	str	r3, [r7, #24]
}
 80139e2:	bf00      	nop
 80139e4:	e7fe      	b.n	80139e4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139e6:	f002 f817 	bl	8015a18 <xTaskGetSchedulerState>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d102      	bne.n	80139f6 <xEventGroupWaitBits+0x82>
 80139f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d101      	bne.n	80139fa <xEventGroupWaitBits+0x86>
 80139f6:	2301      	movs	r3, #1
 80139f8:	e000      	b.n	80139fc <xEventGroupWaitBits+0x88>
 80139fa:	2300      	movs	r3, #0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d10a      	bne.n	8013a16 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a04:	f383 8811 	msr	BASEPRI, r3
 8013a08:	f3bf 8f6f 	isb	sy
 8013a0c:	f3bf 8f4f 	dsb	sy
 8013a10:	617b      	str	r3, [r7, #20]
}
 8013a12:	bf00      	nop
 8013a14:	e7fe      	b.n	8013a14 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013a16:	f001 fb77 	bl	8015108 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013a20:	683a      	ldr	r2, [r7, #0]
 8013a22:	68b9      	ldr	r1, [r7, #8]
 8013a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a26:	f000 f988 	bl	8013d3a <prvTestWaitCondition>
 8013a2a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d00e      	beq.n	8013a50 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a34:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d028      	beq.n	8013a92 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	43db      	mvns	r3, r3
 8013a48:	401a      	ands	r2, r3
 8013a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a4c:	601a      	str	r2, [r3, #0]
 8013a4e:	e020      	b.n	8013a92 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d104      	bne.n	8013a60 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a58:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8013a5e:	e018      	b.n	8013a92 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d003      	beq.n	8013a6e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013a6c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d003      	beq.n	8013a7c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013a7a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a7e:	1d18      	adds	r0, r3, #4
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a84:	4313      	orrs	r3, r2
 8013a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a88:	4619      	mov	r1, r3
 8013a8a:	f001 fd3d 	bl	8015508 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013a92:	f001 fb47 	bl	8015124 <xTaskResumeAll>
 8013a96:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d031      	beq.n	8013b02 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d107      	bne.n	8013ab4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013aa4:	4b19      	ldr	r3, [pc, #100]	; (8013b0c <xEventGroupWaitBits+0x198>)
 8013aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aaa:	601a      	str	r2, [r3, #0]
 8013aac:	f3bf 8f4f 	dsb	sy
 8013ab0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013ab4:	f002 f83c 	bl	8015b30 <uxTaskResetEventItemValue>
 8013ab8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d11a      	bne.n	8013afa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013ac4:	f002 fd3e 	bl	8016544 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013ace:	683a      	ldr	r2, [r7, #0]
 8013ad0:	68b9      	ldr	r1, [r7, #8]
 8013ad2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ad4:	f000 f931 	bl	8013d3a <prvTestWaitCondition>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d009      	beq.n	8013af2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d006      	beq.n	8013af2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	43db      	mvns	r3, r3
 8013aec:	401a      	ands	r2, r3
 8013aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013af2:	2301      	movs	r3, #1
 8013af4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013af6:	f002 fd55 	bl	80165a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b00:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013b04:	4618      	mov	r0, r3
 8013b06:	3740      	adds	r7, #64	; 0x40
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	e000ed04 	.word	0xe000ed04

08013b10 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d10a      	bne.n	8013b3a <xEventGroupClearBits+0x2a>
	__asm volatile
 8013b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b28:	f383 8811 	msr	BASEPRI, r3
 8013b2c:	f3bf 8f6f 	isb	sy
 8013b30:	f3bf 8f4f 	dsb	sy
 8013b34:	60fb      	str	r3, [r7, #12]
}
 8013b36:	bf00      	nop
 8013b38:	e7fe      	b.n	8013b38 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d00a      	beq.n	8013b5a <xEventGroupClearBits+0x4a>
	__asm volatile
 8013b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b48:	f383 8811 	msr	BASEPRI, r3
 8013b4c:	f3bf 8f6f 	isb	sy
 8013b50:	f3bf 8f4f 	dsb	sy
 8013b54:	60bb      	str	r3, [r7, #8]
}
 8013b56:	bf00      	nop
 8013b58:	e7fe      	b.n	8013b58 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013b5a:	f002 fcf3 	bl	8016544 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	681a      	ldr	r2, [r3, #0]
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	43db      	mvns	r3, r3
 8013b6c:	401a      	ands	r2, r3
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013b72:	f002 fd17 	bl	80165a4 <vPortExitCritical>

	return uxReturn;
 8013b76:	693b      	ldr	r3, [r7, #16]
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3718      	adds	r7, #24
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b084      	sub	sp, #16
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	683a      	ldr	r2, [r7, #0]
 8013b8e:	6879      	ldr	r1, [r7, #4]
 8013b90:	4804      	ldr	r0, [pc, #16]	; (8013ba4 <xEventGroupClearBitsFromISR+0x24>)
 8013b92:	f002 fb87 	bl	80162a4 <xTimerPendFunctionCallFromISR>
 8013b96:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013b98:	68fb      	ldr	r3, [r7, #12]
	}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3710      	adds	r7, #16
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	08013d21 	.word	0x08013d21

08013ba8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013ba8:	b480      	push	{r7}
 8013baa:	b089      	sub	sp, #36	; 0x24
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013bb4:	f3ef 8211 	mrs	r2, BASEPRI
 8013bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbc:	f383 8811 	msr	BASEPRI, r3
 8013bc0:	f3bf 8f6f 	isb	sy
 8013bc4:	f3bf 8f4f 	dsb	sy
 8013bc8:	60fa      	str	r2, [r7, #12]
 8013bca:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bce:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	617b      	str	r3, [r7, #20]
 8013bd6:	69bb      	ldr	r3, [r7, #24]
 8013bd8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013be0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013be2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013be4:	4618      	mov	r0, r3
 8013be6:	3724      	adds	r7, #36	; 0x24
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr

08013bf0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b08e      	sub	sp, #56	; 0x38
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013c02:	2300      	movs	r3, #0
 8013c04:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d10a      	bne.n	8013c22 <xEventGroupSetBits+0x32>
	__asm volatile
 8013c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c10:	f383 8811 	msr	BASEPRI, r3
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	613b      	str	r3, [r7, #16]
}
 8013c1e:	bf00      	nop
 8013c20:	e7fe      	b.n	8013c20 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d00a      	beq.n	8013c42 <xEventGroupSetBits+0x52>
	__asm volatile
 8013c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c30:	f383 8811 	msr	BASEPRI, r3
 8013c34:	f3bf 8f6f 	isb	sy
 8013c38:	f3bf 8f4f 	dsb	sy
 8013c3c:	60fb      	str	r3, [r7, #12]
}
 8013c3e:	bf00      	nop
 8013c40:	e7fe      	b.n	8013c40 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c44:	3304      	adds	r3, #4
 8013c46:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4a:	3308      	adds	r3, #8
 8013c4c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013c4e:	f001 fa5b 	bl	8015108 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	68db      	ldr	r3, [r3, #12]
 8013c56:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	431a      	orrs	r2, r3
 8013c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c62:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013c64:	e03c      	b.n	8013ce0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013c72:	2300      	movs	r3, #0
 8013c74:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013c76:	69bb      	ldr	r3, [r7, #24]
 8013c78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c7c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013c84:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d108      	bne.n	8013ca2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	4013      	ands	r3, r2
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00b      	beq.n	8013cb4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ca0:	e008      	b.n	8013cb4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	4013      	ands	r3, r2
 8013caa:	69ba      	ldr	r2, [r7, #24]
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d101      	bne.n	8013cb4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d010      	beq.n	8013cdc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d003      	beq.n	8013ccc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	4313      	orrs	r3, r2
 8013cca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013cd8:	f001 fce2 	bl	80156a0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ce2:	6a3b      	ldr	r3, [r7, #32]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d1be      	bne.n	8013c66 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cea:	681a      	ldr	r2, [r3, #0]
 8013cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cee:	43db      	mvns	r3, r3
 8013cf0:	401a      	ands	r2, r3
 8013cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013cf6:	f001 fa15 	bl	8015124 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfc:	681b      	ldr	r3, [r3, #0]
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3738      	adds	r7, #56	; 0x38
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013d06:	b580      	push	{r7, lr}
 8013d08:	b082      	sub	sp, #8
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
 8013d0e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013d10:	6839      	ldr	r1, [r7, #0]
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ff ff6c 	bl	8013bf0 <xEventGroupSetBits>
}
 8013d18:	bf00      	nop
 8013d1a:	3708      	adds	r7, #8
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013d2a:	6839      	ldr	r1, [r7, #0]
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f7ff feef 	bl	8013b10 <xEventGroupClearBits>
}
 8013d32:	bf00      	nop
 8013d34:	3708      	adds	r7, #8
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}

08013d3a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013d3a:	b480      	push	{r7}
 8013d3c:	b087      	sub	sp, #28
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	60f8      	str	r0, [r7, #12]
 8013d42:	60b9      	str	r1, [r7, #8]
 8013d44:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013d46:	2300      	movs	r3, #0
 8013d48:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d107      	bne.n	8013d60 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	4013      	ands	r3, r2
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d00a      	beq.n	8013d70 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	617b      	str	r3, [r7, #20]
 8013d5e:	e007      	b.n	8013d70 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013d60:	68fa      	ldr	r2, [r7, #12]
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	4013      	ands	r3, r2
 8013d66:	68ba      	ldr	r2, [r7, #8]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d101      	bne.n	8013d70 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013d70:	697b      	ldr	r3, [r7, #20]
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	371c      	adds	r7, #28
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr
	...

08013d80 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	68ba      	ldr	r2, [r7, #8]
 8013d90:	68f9      	ldr	r1, [r7, #12]
 8013d92:	4804      	ldr	r0, [pc, #16]	; (8013da4 <xEventGroupSetBitsFromISR+0x24>)
 8013d94:	f002 fa86 	bl	80162a4 <xTimerPendFunctionCallFromISR>
 8013d98:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013d9a:	697b      	ldr	r3, [r7, #20]
	}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3718      	adds	r7, #24
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	08013d07 	.word	0x08013d07

08013da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013da8:	b480      	push	{r7}
 8013daa:	b083      	sub	sp, #12
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f103 0208 	add.w	r2, r3, #8
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f103 0208 	add.w	r2, r3, #8
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f103 0208 	add.w	r2, r3, #8
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013ddc:	bf00      	nop
 8013dde:	370c      	adds	r7, #12
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013de8:	b480      	push	{r7}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2200      	movs	r2, #0
 8013df4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013df6:	bf00      	nop
 8013df8:	370c      	adds	r7, #12
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr

08013e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e02:	b480      	push	{r7}
 8013e04:	b085      	sub	sp, #20
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
 8013e0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	68fa      	ldr	r2, [r7, #12]
 8013e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	689a      	ldr	r2, [r3, #8]
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	683a      	ldr	r2, [r7, #0]
 8013e26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	683a      	ldr	r2, [r7, #0]
 8013e2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	687a      	ldr	r2, [r7, #4]
 8013e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	1c5a      	adds	r2, r3, #1
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	601a      	str	r2, [r3, #0]
}
 8013e3e:	bf00      	nop
 8013e40:	3714      	adds	r7, #20
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr

08013e4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e4a:	b480      	push	{r7}
 8013e4c:	b085      	sub	sp, #20
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
 8013e52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e60:	d103      	bne.n	8013e6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	691b      	ldr	r3, [r3, #16]
 8013e66:	60fb      	str	r3, [r7, #12]
 8013e68:	e00c      	b.n	8013e84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	3308      	adds	r3, #8
 8013e6e:	60fb      	str	r3, [r7, #12]
 8013e70:	e002      	b.n	8013e78 <vListInsert+0x2e>
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	60fb      	str	r3, [r7, #12]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	68ba      	ldr	r2, [r7, #8]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d2f6      	bcs.n	8013e72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	685a      	ldr	r2, [r3, #4]
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	683a      	ldr	r2, [r7, #0]
 8013e92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	68fa      	ldr	r2, [r7, #12]
 8013e98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	683a      	ldr	r2, [r7, #0]
 8013e9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	1c5a      	adds	r2, r3, #1
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	601a      	str	r2, [r3, #0]
}
 8013eb0:	bf00      	nop
 8013eb2:	3714      	adds	r7, #20
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b085      	sub	sp, #20
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	6892      	ldr	r2, [r2, #8]
 8013ed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	689b      	ldr	r3, [r3, #8]
 8013ed8:	687a      	ldr	r2, [r7, #4]
 8013eda:	6852      	ldr	r2, [r2, #4]
 8013edc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d103      	bne.n	8013ef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	689a      	ldr	r2, [r3, #8]
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	1e5a      	subs	r2, r3, #1
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681b      	ldr	r3, [r3, #0]
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3714      	adds	r7, #20
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr

08013f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d10a      	bne.n	8013f3a <xQueueGenericReset+0x2a>
	__asm volatile
 8013f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f28:	f383 8811 	msr	BASEPRI, r3
 8013f2c:	f3bf 8f6f 	isb	sy
 8013f30:	f3bf 8f4f 	dsb	sy
 8013f34:	60bb      	str	r3, [r7, #8]
}
 8013f36:	bf00      	nop
 8013f38:	e7fe      	b.n	8013f38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013f3a:	f002 fb03 	bl	8016544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681a      	ldr	r2, [r3, #0]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f46:	68f9      	ldr	r1, [r7, #12]
 8013f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f4a:	fb01 f303 	mul.w	r3, r1, r3
 8013f4e:	441a      	add	r2, r3
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2200      	movs	r2, #0
 8013f58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	681a      	ldr	r2, [r3, #0]
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f6a:	3b01      	subs	r3, #1
 8013f6c:	68f9      	ldr	r1, [r7, #12]
 8013f6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f70:	fb01 f303 	mul.w	r3, r1, r3
 8013f74:	441a      	add	r2, r3
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	22ff      	movs	r2, #255	; 0xff
 8013f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	22ff      	movs	r2, #255	; 0xff
 8013f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d114      	bne.n	8013fba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	691b      	ldr	r3, [r3, #16]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d01a      	beq.n	8013fce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	3310      	adds	r3, #16
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f001 fb1b 	bl	80155d8 <xTaskRemoveFromEventList>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d012      	beq.n	8013fce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013fa8:	4b0c      	ldr	r3, [pc, #48]	; (8013fdc <xQueueGenericReset+0xcc>)
 8013faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fae:	601a      	str	r2, [r3, #0]
 8013fb0:	f3bf 8f4f 	dsb	sy
 8013fb4:	f3bf 8f6f 	isb	sy
 8013fb8:	e009      	b.n	8013fce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	3310      	adds	r3, #16
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7ff fef2 	bl	8013da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	3324      	adds	r3, #36	; 0x24
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7ff feed 	bl	8013da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013fce:	f002 fae9 	bl	80165a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013fd2:	2301      	movs	r3, #1
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3710      	adds	r7, #16
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	e000ed04 	.word	0xe000ed04

08013fe0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b08e      	sub	sp, #56	; 0x38
 8013fe4:	af02      	add	r7, sp, #8
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	60b9      	str	r1, [r7, #8]
 8013fea:	607a      	str	r2, [r7, #4]
 8013fec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d10a      	bne.n	801400a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff8:	f383 8811 	msr	BASEPRI, r3
 8013ffc:	f3bf 8f6f 	isb	sy
 8014000:	f3bf 8f4f 	dsb	sy
 8014004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014006:	bf00      	nop
 8014008:	e7fe      	b.n	8014008 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d10a      	bne.n	8014026 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014014:	f383 8811 	msr	BASEPRI, r3
 8014018:	f3bf 8f6f 	isb	sy
 801401c:	f3bf 8f4f 	dsb	sy
 8014020:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014022:	bf00      	nop
 8014024:	e7fe      	b.n	8014024 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d002      	beq.n	8014032 <xQueueGenericCreateStatic+0x52>
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d001      	beq.n	8014036 <xQueueGenericCreateStatic+0x56>
 8014032:	2301      	movs	r3, #1
 8014034:	e000      	b.n	8014038 <xQueueGenericCreateStatic+0x58>
 8014036:	2300      	movs	r3, #0
 8014038:	2b00      	cmp	r3, #0
 801403a:	d10a      	bne.n	8014052 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014040:	f383 8811 	msr	BASEPRI, r3
 8014044:	f3bf 8f6f 	isb	sy
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	623b      	str	r3, [r7, #32]
}
 801404e:	bf00      	nop
 8014050:	e7fe      	b.n	8014050 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d102      	bne.n	801405e <xQueueGenericCreateStatic+0x7e>
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d101      	bne.n	8014062 <xQueueGenericCreateStatic+0x82>
 801405e:	2301      	movs	r3, #1
 8014060:	e000      	b.n	8014064 <xQueueGenericCreateStatic+0x84>
 8014062:	2300      	movs	r3, #0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d10a      	bne.n	801407e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801406c:	f383 8811 	msr	BASEPRI, r3
 8014070:	f3bf 8f6f 	isb	sy
 8014074:	f3bf 8f4f 	dsb	sy
 8014078:	61fb      	str	r3, [r7, #28]
}
 801407a:	bf00      	nop
 801407c:	e7fe      	b.n	801407c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801407e:	2350      	movs	r3, #80	; 0x50
 8014080:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	2b50      	cmp	r3, #80	; 0x50
 8014086:	d00a      	beq.n	801409e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408c:	f383 8811 	msr	BASEPRI, r3
 8014090:	f3bf 8f6f 	isb	sy
 8014094:	f3bf 8f4f 	dsb	sy
 8014098:	61bb      	str	r3, [r7, #24]
}
 801409a:	bf00      	nop
 801409c:	e7fe      	b.n	801409c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801409e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80140a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d00d      	beq.n	80140c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80140aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ac:	2201      	movs	r2, #1
 80140ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80140b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80140b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	4613      	mov	r3, r2
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	68b9      	ldr	r1, [r7, #8]
 80140c0:	68f8      	ldr	r0, [r7, #12]
 80140c2:	f000 f83f 	bl	8014144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3730      	adds	r7, #48	; 0x30
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b08a      	sub	sp, #40	; 0x28
 80140d4:	af02      	add	r7, sp, #8
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	4613      	mov	r3, r2
 80140dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d10a      	bne.n	80140fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80140e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e8:	f383 8811 	msr	BASEPRI, r3
 80140ec:	f3bf 8f6f 	isb	sy
 80140f0:	f3bf 8f4f 	dsb	sy
 80140f4:	613b      	str	r3, [r7, #16]
}
 80140f6:	bf00      	nop
 80140f8:	e7fe      	b.n	80140f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	68ba      	ldr	r2, [r7, #8]
 80140fe:	fb02 f303 	mul.w	r3, r2, r3
 8014102:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	3350      	adds	r3, #80	; 0x50
 8014108:	4618      	mov	r0, r3
 801410a:	f002 fb3d 	bl	8016788 <pvPortMalloc>
 801410e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014110:	69bb      	ldr	r3, [r7, #24]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d011      	beq.n	801413a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	3350      	adds	r3, #80	; 0x50
 801411e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	2200      	movs	r2, #0
 8014124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014128:	79fa      	ldrb	r2, [r7, #7]
 801412a:	69bb      	ldr	r3, [r7, #24]
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	4613      	mov	r3, r2
 8014130:	697a      	ldr	r2, [r7, #20]
 8014132:	68b9      	ldr	r1, [r7, #8]
 8014134:	68f8      	ldr	r0, [r7, #12]
 8014136:	f000 f805 	bl	8014144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801413a:	69bb      	ldr	r3, [r7, #24]
	}
 801413c:	4618      	mov	r0, r3
 801413e:	3720      	adds	r7, #32
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b084      	sub	sp, #16
 8014148:	af00      	add	r7, sp, #0
 801414a:	60f8      	str	r0, [r7, #12]
 801414c:	60b9      	str	r1, [r7, #8]
 801414e:	607a      	str	r2, [r7, #4]
 8014150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d103      	bne.n	8014160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	69ba      	ldr	r2, [r7, #24]
 801415c:	601a      	str	r2, [r3, #0]
 801415e:	e002      	b.n	8014166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	68fa      	ldr	r2, [r7, #12]
 801416a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	68ba      	ldr	r2, [r7, #8]
 8014170:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014172:	2101      	movs	r1, #1
 8014174:	69b8      	ldr	r0, [r7, #24]
 8014176:	f7ff fecb 	bl	8013f10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801417a:	69bb      	ldr	r3, [r7, #24]
 801417c:	78fa      	ldrb	r2, [r7, #3]
 801417e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014182:	bf00      	nop
 8014184:	3710      	adds	r7, #16
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
	...

0801418c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b08e      	sub	sp, #56	; 0x38
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	607a      	str	r2, [r7, #4]
 8014198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801419a:	2300      	movs	r3, #0
 801419c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80141a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d10a      	bne.n	80141be <xQueueGenericSend+0x32>
	__asm volatile
 80141a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ac:	f383 8811 	msr	BASEPRI, r3
 80141b0:	f3bf 8f6f 	isb	sy
 80141b4:	f3bf 8f4f 	dsb	sy
 80141b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80141ba:	bf00      	nop
 80141bc:	e7fe      	b.n	80141bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d103      	bne.n	80141cc <xQueueGenericSend+0x40>
 80141c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d101      	bne.n	80141d0 <xQueueGenericSend+0x44>
 80141cc:	2301      	movs	r3, #1
 80141ce:	e000      	b.n	80141d2 <xQueueGenericSend+0x46>
 80141d0:	2300      	movs	r3, #0
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d10a      	bne.n	80141ec <xQueueGenericSend+0x60>
	__asm volatile
 80141d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141da:	f383 8811 	msr	BASEPRI, r3
 80141de:	f3bf 8f6f 	isb	sy
 80141e2:	f3bf 8f4f 	dsb	sy
 80141e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141e8:	bf00      	nop
 80141ea:	e7fe      	b.n	80141ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	2b02      	cmp	r3, #2
 80141f0:	d103      	bne.n	80141fa <xQueueGenericSend+0x6e>
 80141f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141f6:	2b01      	cmp	r3, #1
 80141f8:	d101      	bne.n	80141fe <xQueueGenericSend+0x72>
 80141fa:	2301      	movs	r3, #1
 80141fc:	e000      	b.n	8014200 <xQueueGenericSend+0x74>
 80141fe:	2300      	movs	r3, #0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10a      	bne.n	801421a <xQueueGenericSend+0x8e>
	__asm volatile
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	f383 8811 	msr	BASEPRI, r3
 801420c:	f3bf 8f6f 	isb	sy
 8014210:	f3bf 8f4f 	dsb	sy
 8014214:	623b      	str	r3, [r7, #32]
}
 8014216:	bf00      	nop
 8014218:	e7fe      	b.n	8014218 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801421a:	f001 fbfd 	bl	8015a18 <xTaskGetSchedulerState>
 801421e:	4603      	mov	r3, r0
 8014220:	2b00      	cmp	r3, #0
 8014222:	d102      	bne.n	801422a <xQueueGenericSend+0x9e>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d101      	bne.n	801422e <xQueueGenericSend+0xa2>
 801422a:	2301      	movs	r3, #1
 801422c:	e000      	b.n	8014230 <xQueueGenericSend+0xa4>
 801422e:	2300      	movs	r3, #0
 8014230:	2b00      	cmp	r3, #0
 8014232:	d10a      	bne.n	801424a <xQueueGenericSend+0xbe>
	__asm volatile
 8014234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014238:	f383 8811 	msr	BASEPRI, r3
 801423c:	f3bf 8f6f 	isb	sy
 8014240:	f3bf 8f4f 	dsb	sy
 8014244:	61fb      	str	r3, [r7, #28]
}
 8014246:	bf00      	nop
 8014248:	e7fe      	b.n	8014248 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801424a:	f002 f97b 	bl	8016544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014256:	429a      	cmp	r2, r3
 8014258:	d302      	bcc.n	8014260 <xQueueGenericSend+0xd4>
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	2b02      	cmp	r3, #2
 801425e:	d129      	bne.n	80142b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014260:	683a      	ldr	r2, [r7, #0]
 8014262:	68b9      	ldr	r1, [r7, #8]
 8014264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014266:	f000 fa8b 	bl	8014780 <prvCopyDataToQueue>
 801426a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014270:	2b00      	cmp	r3, #0
 8014272:	d010      	beq.n	8014296 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014276:	3324      	adds	r3, #36	; 0x24
 8014278:	4618      	mov	r0, r3
 801427a:	f001 f9ad 	bl	80155d8 <xTaskRemoveFromEventList>
 801427e:	4603      	mov	r3, r0
 8014280:	2b00      	cmp	r3, #0
 8014282:	d013      	beq.n	80142ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014284:	4b3f      	ldr	r3, [pc, #252]	; (8014384 <xQueueGenericSend+0x1f8>)
 8014286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801428a:	601a      	str	r2, [r3, #0]
 801428c:	f3bf 8f4f 	dsb	sy
 8014290:	f3bf 8f6f 	isb	sy
 8014294:	e00a      	b.n	80142ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014298:	2b00      	cmp	r3, #0
 801429a:	d007      	beq.n	80142ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801429c:	4b39      	ldr	r3, [pc, #228]	; (8014384 <xQueueGenericSend+0x1f8>)
 801429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142a2:	601a      	str	r2, [r3, #0]
 80142a4:	f3bf 8f4f 	dsb	sy
 80142a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80142ac:	f002 f97a 	bl	80165a4 <vPortExitCritical>
				return pdPASS;
 80142b0:	2301      	movs	r3, #1
 80142b2:	e063      	b.n	801437c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d103      	bne.n	80142c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80142ba:	f002 f973 	bl	80165a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80142be:	2300      	movs	r3, #0
 80142c0:	e05c      	b.n	801437c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80142c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d106      	bne.n	80142d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80142c8:	f107 0314 	add.w	r3, r7, #20
 80142cc:	4618      	mov	r0, r3
 80142ce:	f001 fa49 	bl	8015764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80142d2:	2301      	movs	r3, #1
 80142d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142d6:	f002 f965 	bl	80165a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142da:	f000 ff15 	bl	8015108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80142de:	f002 f931 	bl	8016544 <vPortEnterCritical>
 80142e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142e8:	b25b      	sxtb	r3, r3
 80142ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142ee:	d103      	bne.n	80142f8 <xQueueGenericSend+0x16c>
 80142f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f2:	2200      	movs	r2, #0
 80142f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142fe:	b25b      	sxtb	r3, r3
 8014300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014304:	d103      	bne.n	801430e <xQueueGenericSend+0x182>
 8014306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014308:	2200      	movs	r2, #0
 801430a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801430e:	f002 f949 	bl	80165a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014312:	1d3a      	adds	r2, r7, #4
 8014314:	f107 0314 	add.w	r3, r7, #20
 8014318:	4611      	mov	r1, r2
 801431a:	4618      	mov	r0, r3
 801431c:	f001 fa38 	bl	8015790 <xTaskCheckForTimeOut>
 8014320:	4603      	mov	r3, r0
 8014322:	2b00      	cmp	r3, #0
 8014324:	d124      	bne.n	8014370 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014328:	f000 fb22 	bl	8014970 <prvIsQueueFull>
 801432c:	4603      	mov	r3, r0
 801432e:	2b00      	cmp	r3, #0
 8014330:	d018      	beq.n	8014364 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014334:	3310      	adds	r3, #16
 8014336:	687a      	ldr	r2, [r7, #4]
 8014338:	4611      	mov	r1, r2
 801433a:	4618      	mov	r0, r3
 801433c:	f001 f8c0 	bl	80154c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014342:	f000 faad 	bl	80148a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014346:	f000 feed 	bl	8015124 <xTaskResumeAll>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	f47f af7c 	bne.w	801424a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014352:	4b0c      	ldr	r3, [pc, #48]	; (8014384 <xQueueGenericSend+0x1f8>)
 8014354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014358:	601a      	str	r2, [r3, #0]
 801435a:	f3bf 8f4f 	dsb	sy
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	e772      	b.n	801424a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014366:	f000 fa9b 	bl	80148a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801436a:	f000 fedb 	bl	8015124 <xTaskResumeAll>
 801436e:	e76c      	b.n	801424a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014372:	f000 fa95 	bl	80148a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014376:	f000 fed5 	bl	8015124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801437a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801437c:	4618      	mov	r0, r3
 801437e:	3738      	adds	r7, #56	; 0x38
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}
 8014384:	e000ed04 	.word	0xe000ed04

08014388 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b090      	sub	sp, #64	; 0x40
 801438c:	af00      	add	r7, sp, #0
 801438e:	60f8      	str	r0, [r7, #12]
 8014390:	60b9      	str	r1, [r7, #8]
 8014392:	607a      	str	r2, [r7, #4]
 8014394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439c:	2b00      	cmp	r3, #0
 801439e:	d10a      	bne.n	80143b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80143a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a4:	f383 8811 	msr	BASEPRI, r3
 80143a8:	f3bf 8f6f 	isb	sy
 80143ac:	f3bf 8f4f 	dsb	sy
 80143b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80143b2:	bf00      	nop
 80143b4:	e7fe      	b.n	80143b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d103      	bne.n	80143c4 <xQueueGenericSendFromISR+0x3c>
 80143bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d101      	bne.n	80143c8 <xQueueGenericSendFromISR+0x40>
 80143c4:	2301      	movs	r3, #1
 80143c6:	e000      	b.n	80143ca <xQueueGenericSendFromISR+0x42>
 80143c8:	2300      	movs	r3, #0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d10a      	bne.n	80143e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80143ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d2:	f383 8811 	msr	BASEPRI, r3
 80143d6:	f3bf 8f6f 	isb	sy
 80143da:	f3bf 8f4f 	dsb	sy
 80143de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143e0:	bf00      	nop
 80143e2:	e7fe      	b.n	80143e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	2b02      	cmp	r3, #2
 80143e8:	d103      	bne.n	80143f2 <xQueueGenericSendFromISR+0x6a>
 80143ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d101      	bne.n	80143f6 <xQueueGenericSendFromISR+0x6e>
 80143f2:	2301      	movs	r3, #1
 80143f4:	e000      	b.n	80143f8 <xQueueGenericSendFromISR+0x70>
 80143f6:	2300      	movs	r3, #0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d10a      	bne.n	8014412 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80143fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014400:	f383 8811 	msr	BASEPRI, r3
 8014404:	f3bf 8f6f 	isb	sy
 8014408:	f3bf 8f4f 	dsb	sy
 801440c:	623b      	str	r3, [r7, #32]
}
 801440e:	bf00      	nop
 8014410:	e7fe      	b.n	8014410 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014412:	f002 f979 	bl	8016708 <vPortValidateInterruptPriority>
	__asm volatile
 8014416:	f3ef 8211 	mrs	r2, BASEPRI
 801441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801441e:	f383 8811 	msr	BASEPRI, r3
 8014422:	f3bf 8f6f 	isb	sy
 8014426:	f3bf 8f4f 	dsb	sy
 801442a:	61fa      	str	r2, [r7, #28]
 801442c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801442e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014430:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801443a:	429a      	cmp	r2, r3
 801443c:	d302      	bcc.n	8014444 <xQueueGenericSendFromISR+0xbc>
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	2b02      	cmp	r3, #2
 8014442:	d12f      	bne.n	80144a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801444a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014452:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014454:	683a      	ldr	r2, [r7, #0]
 8014456:	68b9      	ldr	r1, [r7, #8]
 8014458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801445a:	f000 f991 	bl	8014780 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801445e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014466:	d112      	bne.n	801448e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801446c:	2b00      	cmp	r3, #0
 801446e:	d016      	beq.n	801449e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014472:	3324      	adds	r3, #36	; 0x24
 8014474:	4618      	mov	r0, r3
 8014476:	f001 f8af 	bl	80155d8 <xTaskRemoveFromEventList>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d00e      	beq.n	801449e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00b      	beq.n	801449e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2201      	movs	r2, #1
 801448a:	601a      	str	r2, [r3, #0]
 801448c:	e007      	b.n	801449e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801448e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014492:	3301      	adds	r3, #1
 8014494:	b2db      	uxtb	r3, r3
 8014496:	b25a      	sxtb	r2, r3
 8014498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801449e:	2301      	movs	r3, #1
 80144a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80144a2:	e001      	b.n	80144a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80144a4:	2300      	movs	r3, #0
 80144a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80144a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144aa:	617b      	str	r3, [r7, #20]
	__asm volatile
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	f383 8811 	msr	BASEPRI, r3
}
 80144b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3740      	adds	r7, #64	; 0x40
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
	...

080144c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b08c      	sub	sp, #48	; 0x30
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	60f8      	str	r0, [r7, #12]
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80144cc:	2300      	movs	r3, #0
 80144ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80144d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d10a      	bne.n	80144f0 <xQueueReceive+0x30>
	__asm volatile
 80144da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144de:	f383 8811 	msr	BASEPRI, r3
 80144e2:	f3bf 8f6f 	isb	sy
 80144e6:	f3bf 8f4f 	dsb	sy
 80144ea:	623b      	str	r3, [r7, #32]
}
 80144ec:	bf00      	nop
 80144ee:	e7fe      	b.n	80144ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d103      	bne.n	80144fe <xQueueReceive+0x3e>
 80144f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d101      	bne.n	8014502 <xQueueReceive+0x42>
 80144fe:	2301      	movs	r3, #1
 8014500:	e000      	b.n	8014504 <xQueueReceive+0x44>
 8014502:	2300      	movs	r3, #0
 8014504:	2b00      	cmp	r3, #0
 8014506:	d10a      	bne.n	801451e <xQueueReceive+0x5e>
	__asm volatile
 8014508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801450c:	f383 8811 	msr	BASEPRI, r3
 8014510:	f3bf 8f6f 	isb	sy
 8014514:	f3bf 8f4f 	dsb	sy
 8014518:	61fb      	str	r3, [r7, #28]
}
 801451a:	bf00      	nop
 801451c:	e7fe      	b.n	801451c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801451e:	f001 fa7b 	bl	8015a18 <xTaskGetSchedulerState>
 8014522:	4603      	mov	r3, r0
 8014524:	2b00      	cmp	r3, #0
 8014526:	d102      	bne.n	801452e <xQueueReceive+0x6e>
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d101      	bne.n	8014532 <xQueueReceive+0x72>
 801452e:	2301      	movs	r3, #1
 8014530:	e000      	b.n	8014534 <xQueueReceive+0x74>
 8014532:	2300      	movs	r3, #0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d10a      	bne.n	801454e <xQueueReceive+0x8e>
	__asm volatile
 8014538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801453c:	f383 8811 	msr	BASEPRI, r3
 8014540:	f3bf 8f6f 	isb	sy
 8014544:	f3bf 8f4f 	dsb	sy
 8014548:	61bb      	str	r3, [r7, #24]
}
 801454a:	bf00      	nop
 801454c:	e7fe      	b.n	801454c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801454e:	f001 fff9 	bl	8016544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014556:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	2b00      	cmp	r3, #0
 801455c:	d01f      	beq.n	801459e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801455e:	68b9      	ldr	r1, [r7, #8]
 8014560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014562:	f000 f977 	bl	8014854 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014568:	1e5a      	subs	r2, r3, #1
 801456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801456c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014570:	691b      	ldr	r3, [r3, #16]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d00f      	beq.n	8014596 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014578:	3310      	adds	r3, #16
 801457a:	4618      	mov	r0, r3
 801457c:	f001 f82c 	bl	80155d8 <xTaskRemoveFromEventList>
 8014580:	4603      	mov	r3, r0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d007      	beq.n	8014596 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014586:	4b3d      	ldr	r3, [pc, #244]	; (801467c <xQueueReceive+0x1bc>)
 8014588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801458c:	601a      	str	r2, [r3, #0]
 801458e:	f3bf 8f4f 	dsb	sy
 8014592:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014596:	f002 f805 	bl	80165a4 <vPortExitCritical>
				return pdPASS;
 801459a:	2301      	movs	r3, #1
 801459c:	e069      	b.n	8014672 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d103      	bne.n	80145ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80145a4:	f001 fffe 	bl	80165a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80145a8:	2300      	movs	r3, #0
 80145aa:	e062      	b.n	8014672 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80145ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d106      	bne.n	80145c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80145b2:	f107 0310 	add.w	r3, r7, #16
 80145b6:	4618      	mov	r0, r3
 80145b8:	f001 f8d4 	bl	8015764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80145bc:	2301      	movs	r3, #1
 80145be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80145c0:	f001 fff0 	bl	80165a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145c4:	f000 fda0 	bl	8015108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145c8:	f001 ffbc 	bl	8016544 <vPortEnterCritical>
 80145cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145d2:	b25b      	sxtb	r3, r3
 80145d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145d8:	d103      	bne.n	80145e2 <xQueueReceive+0x122>
 80145da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145dc:	2200      	movs	r2, #0
 80145de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145e8:	b25b      	sxtb	r3, r3
 80145ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145ee:	d103      	bne.n	80145f8 <xQueueReceive+0x138>
 80145f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f2:	2200      	movs	r2, #0
 80145f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145f8:	f001 ffd4 	bl	80165a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80145fc:	1d3a      	adds	r2, r7, #4
 80145fe:	f107 0310 	add.w	r3, r7, #16
 8014602:	4611      	mov	r1, r2
 8014604:	4618      	mov	r0, r3
 8014606:	f001 f8c3 	bl	8015790 <xTaskCheckForTimeOut>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d123      	bne.n	8014658 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014612:	f000 f997 	bl	8014944 <prvIsQueueEmpty>
 8014616:	4603      	mov	r3, r0
 8014618:	2b00      	cmp	r3, #0
 801461a:	d017      	beq.n	801464c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801461e:	3324      	adds	r3, #36	; 0x24
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	4611      	mov	r1, r2
 8014624:	4618      	mov	r0, r3
 8014626:	f000 ff4b 	bl	80154c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801462a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801462c:	f000 f938 	bl	80148a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014630:	f000 fd78 	bl	8015124 <xTaskResumeAll>
 8014634:	4603      	mov	r3, r0
 8014636:	2b00      	cmp	r3, #0
 8014638:	d189      	bne.n	801454e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801463a:	4b10      	ldr	r3, [pc, #64]	; (801467c <xQueueReceive+0x1bc>)
 801463c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014640:	601a      	str	r2, [r3, #0]
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	f3bf 8f6f 	isb	sy
 801464a:	e780      	b.n	801454e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801464c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801464e:	f000 f927 	bl	80148a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014652:	f000 fd67 	bl	8015124 <xTaskResumeAll>
 8014656:	e77a      	b.n	801454e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801465a:	f000 f921 	bl	80148a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801465e:	f000 fd61 	bl	8015124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014664:	f000 f96e 	bl	8014944 <prvIsQueueEmpty>
 8014668:	4603      	mov	r3, r0
 801466a:	2b00      	cmp	r3, #0
 801466c:	f43f af6f 	beq.w	801454e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014672:	4618      	mov	r0, r3
 8014674:	3730      	adds	r7, #48	; 0x30
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	e000ed04 	.word	0xe000ed04

08014680 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b08e      	sub	sp, #56	; 0x38
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014692:	2b00      	cmp	r3, #0
 8014694:	d10a      	bne.n	80146ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801469a:	f383 8811 	msr	BASEPRI, r3
 801469e:	f3bf 8f6f 	isb	sy
 80146a2:	f3bf 8f4f 	dsb	sy
 80146a6:	623b      	str	r3, [r7, #32]
}
 80146a8:	bf00      	nop
 80146aa:	e7fe      	b.n	80146aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d103      	bne.n	80146ba <xQueueReceiveFromISR+0x3a>
 80146b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d101      	bne.n	80146be <xQueueReceiveFromISR+0x3e>
 80146ba:	2301      	movs	r3, #1
 80146bc:	e000      	b.n	80146c0 <xQueueReceiveFromISR+0x40>
 80146be:	2300      	movs	r3, #0
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d10a      	bne.n	80146da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80146c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c8:	f383 8811 	msr	BASEPRI, r3
 80146cc:	f3bf 8f6f 	isb	sy
 80146d0:	f3bf 8f4f 	dsb	sy
 80146d4:	61fb      	str	r3, [r7, #28]
}
 80146d6:	bf00      	nop
 80146d8:	e7fe      	b.n	80146d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146da:	f002 f815 	bl	8016708 <vPortValidateInterruptPriority>
	__asm volatile
 80146de:	f3ef 8211 	mrs	r2, BASEPRI
 80146e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e6:	f383 8811 	msr	BASEPRI, r3
 80146ea:	f3bf 8f6f 	isb	sy
 80146ee:	f3bf 8f4f 	dsb	sy
 80146f2:	61ba      	str	r2, [r7, #24]
 80146f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80146f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80146fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014702:	2b00      	cmp	r3, #0
 8014704:	d02f      	beq.n	8014766 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801470c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014710:	68b9      	ldr	r1, [r7, #8]
 8014712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014714:	f000 f89e 	bl	8014854 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471a:	1e5a      	subs	r2, r3, #1
 801471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014728:	d112      	bne.n	8014750 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	691b      	ldr	r3, [r3, #16]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d016      	beq.n	8014760 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014734:	3310      	adds	r3, #16
 8014736:	4618      	mov	r0, r3
 8014738:	f000 ff4e 	bl	80155d8 <xTaskRemoveFromEventList>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d00e      	beq.n	8014760 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d00b      	beq.n	8014760 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2201      	movs	r2, #1
 801474c:	601a      	str	r2, [r3, #0]
 801474e:	e007      	b.n	8014760 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014754:	3301      	adds	r3, #1
 8014756:	b2db      	uxtb	r3, r3
 8014758:	b25a      	sxtb	r2, r3
 801475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014760:	2301      	movs	r3, #1
 8014762:	637b      	str	r3, [r7, #52]	; 0x34
 8014764:	e001      	b.n	801476a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014766:	2300      	movs	r3, #0
 8014768:	637b      	str	r3, [r7, #52]	; 0x34
 801476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801476c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	f383 8811 	msr	BASEPRI, r3
}
 8014774:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014778:	4618      	mov	r0, r3
 801477a:	3738      	adds	r7, #56	; 0x38
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b086      	sub	sp, #24
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801478c:	2300      	movs	r3, #0
 801478e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014794:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801479a:	2b00      	cmp	r3, #0
 801479c:	d10d      	bne.n	80147ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d14d      	bne.n	8014842 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	689b      	ldr	r3, [r3, #8]
 80147aa:	4618      	mov	r0, r3
 80147ac:	f001 f952 	bl	8015a54 <xTaskPriorityDisinherit>
 80147b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	2200      	movs	r2, #0
 80147b6:	609a      	str	r2, [r3, #8]
 80147b8:	e043      	b.n	8014842 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d119      	bne.n	80147f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6858      	ldr	r0, [r3, #4]
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147c8:	461a      	mov	r2, r3
 80147ca:	68b9      	ldr	r1, [r7, #8]
 80147cc:	f002 fa00 	bl	8016bd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	685a      	ldr	r2, [r3, #4]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147d8:	441a      	add	r2, r3
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	685a      	ldr	r2, [r3, #4]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	689b      	ldr	r3, [r3, #8]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d32b      	bcc.n	8014842 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	681a      	ldr	r2, [r3, #0]
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	605a      	str	r2, [r3, #4]
 80147f2:	e026      	b.n	8014842 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	68d8      	ldr	r0, [r3, #12]
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147fc:	461a      	mov	r2, r3
 80147fe:	68b9      	ldr	r1, [r7, #8]
 8014800:	f002 f9e6 	bl	8016bd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	68da      	ldr	r2, [r3, #12]
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801480c:	425b      	negs	r3, r3
 801480e:	441a      	add	r2, r3
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	68da      	ldr	r2, [r3, #12]
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	429a      	cmp	r2, r3
 801481e:	d207      	bcs.n	8014830 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	689a      	ldr	r2, [r3, #8]
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014828:	425b      	negs	r3, r3
 801482a:	441a      	add	r2, r3
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b02      	cmp	r3, #2
 8014834:	d105      	bne.n	8014842 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d002      	beq.n	8014842 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	3b01      	subs	r3, #1
 8014840:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	1c5a      	adds	r2, r3, #1
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801484a:	697b      	ldr	r3, [r7, #20]
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}

08014854 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014862:	2b00      	cmp	r3, #0
 8014864:	d018      	beq.n	8014898 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	68da      	ldr	r2, [r3, #12]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801486e:	441a      	add	r2, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	68da      	ldr	r2, [r3, #12]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	689b      	ldr	r3, [r3, #8]
 801487c:	429a      	cmp	r2, r3
 801487e:	d303      	bcc.n	8014888 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681a      	ldr	r2, [r3, #0]
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	68d9      	ldr	r1, [r3, #12]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014890:	461a      	mov	r2, r3
 8014892:	6838      	ldr	r0, [r7, #0]
 8014894:	f002 f99c 	bl	8016bd0 <memcpy>
	}
}
 8014898:	bf00      	nop
 801489a:	3708      	adds	r7, #8
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}

080148a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80148a8:	f001 fe4c 	bl	8016544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148b4:	e011      	b.n	80148da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d012      	beq.n	80148e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	3324      	adds	r3, #36	; 0x24
 80148c2:	4618      	mov	r0, r3
 80148c4:	f000 fe88 	bl	80155d8 <xTaskRemoveFromEventList>
 80148c8:	4603      	mov	r3, r0
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d001      	beq.n	80148d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80148ce:	f000 ffc1 	bl	8015854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80148d2:	7bfb      	ldrb	r3, [r7, #15]
 80148d4:	3b01      	subs	r3, #1
 80148d6:	b2db      	uxtb	r3, r3
 80148d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	dce9      	bgt.n	80148b6 <prvUnlockQueue+0x16>
 80148e2:	e000      	b.n	80148e6 <prvUnlockQueue+0x46>
					break;
 80148e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	22ff      	movs	r2, #255	; 0xff
 80148ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80148ee:	f001 fe59 	bl	80165a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80148f2:	f001 fe27 	bl	8016544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148fe:	e011      	b.n	8014924 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	691b      	ldr	r3, [r3, #16]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d012      	beq.n	801492e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	3310      	adds	r3, #16
 801490c:	4618      	mov	r0, r3
 801490e:	f000 fe63 	bl	80155d8 <xTaskRemoveFromEventList>
 8014912:	4603      	mov	r3, r0
 8014914:	2b00      	cmp	r3, #0
 8014916:	d001      	beq.n	801491c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014918:	f000 ff9c 	bl	8015854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801491c:	7bbb      	ldrb	r3, [r7, #14]
 801491e:	3b01      	subs	r3, #1
 8014920:	b2db      	uxtb	r3, r3
 8014922:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014928:	2b00      	cmp	r3, #0
 801492a:	dce9      	bgt.n	8014900 <prvUnlockQueue+0x60>
 801492c:	e000      	b.n	8014930 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801492e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	22ff      	movs	r2, #255	; 0xff
 8014934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014938:	f001 fe34 	bl	80165a4 <vPortExitCritical>
}
 801493c:	bf00      	nop
 801493e:	3710      	adds	r7, #16
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}

08014944 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801494c:	f001 fdfa 	bl	8016544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014954:	2b00      	cmp	r3, #0
 8014956:	d102      	bne.n	801495e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014958:	2301      	movs	r3, #1
 801495a:	60fb      	str	r3, [r7, #12]
 801495c:	e001      	b.n	8014962 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801495e:	2300      	movs	r3, #0
 8014960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014962:	f001 fe1f 	bl	80165a4 <vPortExitCritical>

	return xReturn;
 8014966:	68fb      	ldr	r3, [r7, #12]
}
 8014968:	4618      	mov	r0, r3
 801496a:	3710      	adds	r7, #16
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014978:	f001 fde4 	bl	8016544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014984:	429a      	cmp	r2, r3
 8014986:	d102      	bne.n	801498e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014988:	2301      	movs	r3, #1
 801498a:	60fb      	str	r3, [r7, #12]
 801498c:	e001      	b.n	8014992 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801498e:	2300      	movs	r3, #0
 8014990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014992:	f001 fe07 	bl	80165a4 <vPortExitCritical>

	return xReturn;
 8014996:	68fb      	ldr	r3, [r7, #12]
}
 8014998:	4618      	mov	r0, r3
 801499a:	3710      	adds	r7, #16
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80149a0:	b480      	push	{r7}
 80149a2:	b085      	sub	sp, #20
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149aa:	2300      	movs	r3, #0
 80149ac:	60fb      	str	r3, [r7, #12]
 80149ae:	e014      	b.n	80149da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80149b0:	4a0f      	ldr	r2, [pc, #60]	; (80149f0 <vQueueAddToRegistry+0x50>)
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d10b      	bne.n	80149d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80149bc:	490c      	ldr	r1, [pc, #48]	; (80149f0 <vQueueAddToRegistry+0x50>)
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	683a      	ldr	r2, [r7, #0]
 80149c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80149c6:	4a0a      	ldr	r2, [pc, #40]	; (80149f0 <vQueueAddToRegistry+0x50>)
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	00db      	lsls	r3, r3, #3
 80149cc:	4413      	add	r3, r2
 80149ce:	687a      	ldr	r2, [r7, #4]
 80149d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80149d2:	e006      	b.n	80149e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	3301      	adds	r3, #1
 80149d8:	60fb      	str	r3, [r7, #12]
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2b07      	cmp	r3, #7
 80149de:	d9e7      	bls.n	80149b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80149e0:	bf00      	nop
 80149e2:	bf00      	nop
 80149e4:	3714      	adds	r7, #20
 80149e6:	46bd      	mov	sp, r7
 80149e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ec:	4770      	bx	lr
 80149ee:	bf00      	nop
 80149f0:	240017a4 	.word	0x240017a4

080149f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b086      	sub	sp, #24
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014a04:	f001 fd9e 	bl	8016544 <vPortEnterCritical>
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a0e:	b25b      	sxtb	r3, r3
 8014a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a14:	d103      	bne.n	8014a1e <vQueueWaitForMessageRestricted+0x2a>
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a24:	b25b      	sxtb	r3, r3
 8014a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a2a:	d103      	bne.n	8014a34 <vQueueWaitForMessageRestricted+0x40>
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014a34:	f001 fdb6 	bl	80165a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d106      	bne.n	8014a4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	3324      	adds	r3, #36	; 0x24
 8014a44:	687a      	ldr	r2, [r7, #4]
 8014a46:	68b9      	ldr	r1, [r7, #8]
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f000 fd99 	bl	8015580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014a4e:	6978      	ldr	r0, [r7, #20]
 8014a50:	f7ff ff26 	bl	80148a0 <prvUnlockQueue>
	}
 8014a54:	bf00      	nop
 8014a56:	3718      	adds	r7, #24
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b08e      	sub	sp, #56	; 0x38
 8014a60:	af04      	add	r7, sp, #16
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
 8014a68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d10a      	bne.n	8014a86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a74:	f383 8811 	msr	BASEPRI, r3
 8014a78:	f3bf 8f6f 	isb	sy
 8014a7c:	f3bf 8f4f 	dsb	sy
 8014a80:	623b      	str	r3, [r7, #32]
}
 8014a82:	bf00      	nop
 8014a84:	e7fe      	b.n	8014a84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d10a      	bne.n	8014aa2 <xTaskCreateStatic+0x46>
	__asm volatile
 8014a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a90:	f383 8811 	msr	BASEPRI, r3
 8014a94:	f3bf 8f6f 	isb	sy
 8014a98:	f3bf 8f4f 	dsb	sy
 8014a9c:	61fb      	str	r3, [r7, #28]
}
 8014a9e:	bf00      	nop
 8014aa0:	e7fe      	b.n	8014aa0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014aa2:	235c      	movs	r3, #92	; 0x5c
 8014aa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	2b5c      	cmp	r3, #92	; 0x5c
 8014aaa:	d00a      	beq.n	8014ac2 <xTaskCreateStatic+0x66>
	__asm volatile
 8014aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab0:	f383 8811 	msr	BASEPRI, r3
 8014ab4:	f3bf 8f6f 	isb	sy
 8014ab8:	f3bf 8f4f 	dsb	sy
 8014abc:	61bb      	str	r3, [r7, #24]
}
 8014abe:	bf00      	nop
 8014ac0:	e7fe      	b.n	8014ac0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014ac2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d01e      	beq.n	8014b08 <xTaskCreateStatic+0xac>
 8014aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d01b      	beq.n	8014b08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ad8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014adc:	2202      	movs	r2, #2
 8014ade:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	9303      	str	r3, [sp, #12]
 8014ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae8:	9302      	str	r3, [sp, #8]
 8014aea:	f107 0314 	add.w	r3, r7, #20
 8014aee:	9301      	str	r3, [sp, #4]
 8014af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	68b9      	ldr	r1, [r7, #8]
 8014afa:	68f8      	ldr	r0, [r7, #12]
 8014afc:	f000 f850 	bl	8014ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b02:	f000 f8dd 	bl	8014cc0 <prvAddNewTaskToReadyList>
 8014b06:	e001      	b.n	8014b0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014b0c:	697b      	ldr	r3, [r7, #20]
	}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3728      	adds	r7, #40	; 0x28
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}

08014b16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014b16:	b580      	push	{r7, lr}
 8014b18:	b08c      	sub	sp, #48	; 0x30
 8014b1a:	af04      	add	r7, sp, #16
 8014b1c:	60f8      	str	r0, [r7, #12]
 8014b1e:	60b9      	str	r1, [r7, #8]
 8014b20:	603b      	str	r3, [r7, #0]
 8014b22:	4613      	mov	r3, r2
 8014b24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014b26:	88fb      	ldrh	r3, [r7, #6]
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f001 fe2c 	bl	8016788 <pvPortMalloc>
 8014b30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d00e      	beq.n	8014b56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014b38:	205c      	movs	r0, #92	; 0x5c
 8014b3a:	f001 fe25 	bl	8016788 <pvPortMalloc>
 8014b3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d003      	beq.n	8014b4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	697a      	ldr	r2, [r7, #20]
 8014b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8014b4c:	e005      	b.n	8014b5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014b4e:	6978      	ldr	r0, [r7, #20]
 8014b50:	f001 fee6 	bl	8016920 <vPortFree>
 8014b54:	e001      	b.n	8014b5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014b56:	2300      	movs	r3, #0
 8014b58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d017      	beq.n	8014b90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014b60:	69fb      	ldr	r3, [r7, #28]
 8014b62:	2200      	movs	r2, #0
 8014b64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014b68:	88fa      	ldrh	r2, [r7, #6]
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	9303      	str	r3, [sp, #12]
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	9302      	str	r3, [sp, #8]
 8014b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b74:	9301      	str	r3, [sp, #4]
 8014b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	68b9      	ldr	r1, [r7, #8]
 8014b7e:	68f8      	ldr	r0, [r7, #12]
 8014b80:	f000 f80e 	bl	8014ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b84:	69f8      	ldr	r0, [r7, #28]
 8014b86:	f000 f89b 	bl	8014cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	61bb      	str	r3, [r7, #24]
 8014b8e:	e002      	b.n	8014b96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b96:	69bb      	ldr	r3, [r7, #24]
	}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3720      	adds	r7, #32
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b088      	sub	sp, #32
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	607a      	str	r2, [r7, #4]
 8014bac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	21a5      	movs	r1, #165	; 0xa5
 8014bba:	f002 f817 	bl	8016bec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bc2:	6879      	ldr	r1, [r7, #4]
 8014bc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014bc8:	440b      	add	r3, r1
 8014bca:	009b      	lsls	r3, r3, #2
 8014bcc:	4413      	add	r3, r2
 8014bce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	f023 0307 	bic.w	r3, r3, #7
 8014bd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014bd8:	69bb      	ldr	r3, [r7, #24]
 8014bda:	f003 0307 	and.w	r3, r3, #7
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d00a      	beq.n	8014bf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be6:	f383 8811 	msr	BASEPRI, r3
 8014bea:	f3bf 8f6f 	isb	sy
 8014bee:	f3bf 8f4f 	dsb	sy
 8014bf2:	617b      	str	r3, [r7, #20]
}
 8014bf4:	bf00      	nop
 8014bf6:	e7fe      	b.n	8014bf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d01f      	beq.n	8014c3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014bfe:	2300      	movs	r3, #0
 8014c00:	61fb      	str	r3, [r7, #28]
 8014c02:	e012      	b.n	8014c2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014c04:	68ba      	ldr	r2, [r7, #8]
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	4413      	add	r3, r2
 8014c0a:	7819      	ldrb	r1, [r3, #0]
 8014c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c0e:	69fb      	ldr	r3, [r7, #28]
 8014c10:	4413      	add	r3, r2
 8014c12:	3334      	adds	r3, #52	; 0x34
 8014c14:	460a      	mov	r2, r1
 8014c16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014c18:	68ba      	ldr	r2, [r7, #8]
 8014c1a:	69fb      	ldr	r3, [r7, #28]
 8014c1c:	4413      	add	r3, r2
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d006      	beq.n	8014c32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	3301      	adds	r3, #1
 8014c28:	61fb      	str	r3, [r7, #28]
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	2b0f      	cmp	r3, #15
 8014c2e:	d9e9      	bls.n	8014c04 <prvInitialiseNewTask+0x64>
 8014c30:	e000      	b.n	8014c34 <prvInitialiseNewTask+0x94>
			{
				break;
 8014c32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c36:	2200      	movs	r2, #0
 8014c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014c3c:	e003      	b.n	8014c46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c40:	2200      	movs	r2, #0
 8014c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c48:	2b37      	cmp	r3, #55	; 0x37
 8014c4a:	d901      	bls.n	8014c50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014c4c:	2337      	movs	r3, #55	; 0x37
 8014c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5e:	2200      	movs	r2, #0
 8014c60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c64:	3304      	adds	r3, #4
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7ff f8be 	bl	8013de8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6e:	3318      	adds	r3, #24
 8014c70:	4618      	mov	r0, r3
 8014c72:	f7ff f8b9 	bl	8013de8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8e:	2200      	movs	r2, #0
 8014c90:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c94:	2200      	movs	r2, #0
 8014c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014c9a:	683a      	ldr	r2, [r7, #0]
 8014c9c:	68f9      	ldr	r1, [r7, #12]
 8014c9e:	69b8      	ldr	r0, [r7, #24]
 8014ca0:	f001 fb20 	bl	80162e4 <pxPortInitialiseStack>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d002      	beq.n	8014cb6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cb6:	bf00      	nop
 8014cb8:	3720      	adds	r7, #32
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
	...

08014cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014cc8:	f001 fc3c 	bl	8016544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014ccc:	4b2d      	ldr	r3, [pc, #180]	; (8014d84 <prvAddNewTaskToReadyList+0xc4>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	4a2c      	ldr	r2, [pc, #176]	; (8014d84 <prvAddNewTaskToReadyList+0xc4>)
 8014cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014cd6:	4b2c      	ldr	r3, [pc, #176]	; (8014d88 <prvAddNewTaskToReadyList+0xc8>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d109      	bne.n	8014cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014cde:	4a2a      	ldr	r2, [pc, #168]	; (8014d88 <prvAddNewTaskToReadyList+0xc8>)
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014ce4:	4b27      	ldr	r3, [pc, #156]	; (8014d84 <prvAddNewTaskToReadyList+0xc4>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2b01      	cmp	r3, #1
 8014cea:	d110      	bne.n	8014d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014cec:	f000 fdd6 	bl	801589c <prvInitialiseTaskLists>
 8014cf0:	e00d      	b.n	8014d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014cf2:	4b26      	ldr	r3, [pc, #152]	; (8014d8c <prvAddNewTaskToReadyList+0xcc>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d109      	bne.n	8014d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014cfa:	4b23      	ldr	r3, [pc, #140]	; (8014d88 <prvAddNewTaskToReadyList+0xc8>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d802      	bhi.n	8014d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014d08:	4a1f      	ldr	r2, [pc, #124]	; (8014d88 <prvAddNewTaskToReadyList+0xc8>)
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014d0e:	4b20      	ldr	r3, [pc, #128]	; (8014d90 <prvAddNewTaskToReadyList+0xd0>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	3301      	adds	r3, #1
 8014d14:	4a1e      	ldr	r2, [pc, #120]	; (8014d90 <prvAddNewTaskToReadyList+0xd0>)
 8014d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014d18:	4b1d      	ldr	r3, [pc, #116]	; (8014d90 <prvAddNewTaskToReadyList+0xd0>)
 8014d1a:	681a      	ldr	r2, [r3, #0]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d24:	4b1b      	ldr	r3, [pc, #108]	; (8014d94 <prvAddNewTaskToReadyList+0xd4>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d903      	bls.n	8014d34 <prvAddNewTaskToReadyList+0x74>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d30:	4a18      	ldr	r2, [pc, #96]	; (8014d94 <prvAddNewTaskToReadyList+0xd4>)
 8014d32:	6013      	str	r3, [r2, #0]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d38:	4613      	mov	r3, r2
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	4413      	add	r3, r2
 8014d3e:	009b      	lsls	r3, r3, #2
 8014d40:	4a15      	ldr	r2, [pc, #84]	; (8014d98 <prvAddNewTaskToReadyList+0xd8>)
 8014d42:	441a      	add	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	3304      	adds	r3, #4
 8014d48:	4619      	mov	r1, r3
 8014d4a:	4610      	mov	r0, r2
 8014d4c:	f7ff f859 	bl	8013e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014d50:	f001 fc28 	bl	80165a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014d54:	4b0d      	ldr	r3, [pc, #52]	; (8014d8c <prvAddNewTaskToReadyList+0xcc>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d00e      	beq.n	8014d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014d5c:	4b0a      	ldr	r3, [pc, #40]	; (8014d88 <prvAddNewTaskToReadyList+0xc8>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d66:	429a      	cmp	r2, r3
 8014d68:	d207      	bcs.n	8014d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014d6a:	4b0c      	ldr	r3, [pc, #48]	; (8014d9c <prvAddNewTaskToReadyList+0xdc>)
 8014d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d70:	601a      	str	r2, [r3, #0]
 8014d72:	f3bf 8f4f 	dsb	sy
 8014d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d7a:	bf00      	nop
 8014d7c:	3708      	adds	r7, #8
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}
 8014d82:	bf00      	nop
 8014d84:	24001cb8 	.word	0x24001cb8
 8014d88:	240017e4 	.word	0x240017e4
 8014d8c:	24001cc4 	.word	0x24001cc4
 8014d90:	24001cd4 	.word	0x24001cd4
 8014d94:	24001cc0 	.word	0x24001cc0
 8014d98:	240017e8 	.word	0x240017e8
 8014d9c:	e000ed04 	.word	0xe000ed04

08014da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014da8:	2300      	movs	r3, #0
 8014daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d017      	beq.n	8014de2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014db2:	4b13      	ldr	r3, [pc, #76]	; (8014e00 <vTaskDelay+0x60>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d00a      	beq.n	8014dd0 <vTaskDelay+0x30>
	__asm volatile
 8014dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dbe:	f383 8811 	msr	BASEPRI, r3
 8014dc2:	f3bf 8f6f 	isb	sy
 8014dc6:	f3bf 8f4f 	dsb	sy
 8014dca:	60bb      	str	r3, [r7, #8]
}
 8014dcc:	bf00      	nop
 8014dce:	e7fe      	b.n	8014dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014dd0:	f000 f99a 	bl	8015108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014dd4:	2100      	movs	r1, #0
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f000 fec2 	bl	8015b60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014ddc:	f000 f9a2 	bl	8015124 <xTaskResumeAll>
 8014de0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d107      	bne.n	8014df8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014de8:	4b06      	ldr	r3, [pc, #24]	; (8014e04 <vTaskDelay+0x64>)
 8014dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dee:	601a      	str	r2, [r3, #0]
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014df8:	bf00      	nop
 8014dfa:	3710      	adds	r7, #16
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	24001ce0 	.word	0x24001ce0
 8014e04:	e000ed04 	.word	0xe000ed04

08014e08 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014e10:	f001 fb98 	bl	8016544 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d102      	bne.n	8014e20 <vTaskSuspend+0x18>
 8014e1a:	4b30      	ldr	r3, [pc, #192]	; (8014edc <vTaskSuspend+0xd4>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	e000      	b.n	8014e22 <vTaskSuspend+0x1a>
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	3304      	adds	r3, #4
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7ff f847 	bl	8013ebc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d004      	beq.n	8014e40 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	3318      	adds	r3, #24
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7ff f83e 	bl	8013ebc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	3304      	adds	r3, #4
 8014e44:	4619      	mov	r1, r3
 8014e46:	4826      	ldr	r0, [pc, #152]	; (8014ee0 <vTaskSuspend+0xd8>)
 8014e48:	f7fe ffdb 	bl	8013e02 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d103      	bne.n	8014e60 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014e60:	f001 fba0 	bl	80165a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014e64:	4b1f      	ldr	r3, [pc, #124]	; (8014ee4 <vTaskSuspend+0xdc>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d005      	beq.n	8014e78 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014e6c:	f001 fb6a 	bl	8016544 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014e70:	f000 fdb2 	bl	80159d8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014e74:	f001 fb96 	bl	80165a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014e78:	4b18      	ldr	r3, [pc, #96]	; (8014edc <vTaskSuspend+0xd4>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	68fa      	ldr	r2, [r7, #12]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d127      	bne.n	8014ed2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014e82:	4b18      	ldr	r3, [pc, #96]	; (8014ee4 <vTaskSuspend+0xdc>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d017      	beq.n	8014eba <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014e8a:	4b17      	ldr	r3, [pc, #92]	; (8014ee8 <vTaskSuspend+0xe0>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d00a      	beq.n	8014ea8 <vTaskSuspend+0xa0>
	__asm volatile
 8014e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e96:	f383 8811 	msr	BASEPRI, r3
 8014e9a:	f3bf 8f6f 	isb	sy
 8014e9e:	f3bf 8f4f 	dsb	sy
 8014ea2:	60bb      	str	r3, [r7, #8]
}
 8014ea4:	bf00      	nop
 8014ea6:	e7fe      	b.n	8014ea6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014ea8:	4b10      	ldr	r3, [pc, #64]	; (8014eec <vTaskSuspend+0xe4>)
 8014eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eae:	601a      	str	r2, [r3, #0]
 8014eb0:	f3bf 8f4f 	dsb	sy
 8014eb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014eb8:	e00b      	b.n	8014ed2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014eba:	4b09      	ldr	r3, [pc, #36]	; (8014ee0 <vTaskSuspend+0xd8>)
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	4b0c      	ldr	r3, [pc, #48]	; (8014ef0 <vTaskSuspend+0xe8>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d103      	bne.n	8014ece <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014ec6:	4b05      	ldr	r3, [pc, #20]	; (8014edc <vTaskSuspend+0xd4>)
 8014ec8:	2200      	movs	r2, #0
 8014eca:	601a      	str	r2, [r3, #0]
	}
 8014ecc:	e001      	b.n	8014ed2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014ece:	f000 fa99 	bl	8015404 <vTaskSwitchContext>
	}
 8014ed2:	bf00      	nop
 8014ed4:	3710      	adds	r7, #16
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	240017e4 	.word	0x240017e4
 8014ee0:	24001ca4 	.word	0x24001ca4
 8014ee4:	24001cc4 	.word	0x24001cc4
 8014ee8:	24001ce0 	.word	0x24001ce0
 8014eec:	e000ed04 	.word	0xe000ed04
 8014ef0:	24001cb8 	.word	0x24001cb8

08014ef4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b087      	sub	sp, #28
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014efc:	2300      	movs	r3, #0
 8014efe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d10a      	bne.n	8014f20 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f0e:	f383 8811 	msr	BASEPRI, r3
 8014f12:	f3bf 8f6f 	isb	sy
 8014f16:	f3bf 8f4f 	dsb	sy
 8014f1a:	60fb      	str	r3, [r7, #12]
}
 8014f1c:	bf00      	nop
 8014f1e:	e7fe      	b.n	8014f1e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	695b      	ldr	r3, [r3, #20]
 8014f24:	4a0a      	ldr	r2, [pc, #40]	; (8014f50 <prvTaskIsTaskSuspended+0x5c>)
 8014f26:	4293      	cmp	r3, r2
 8014f28:	d10a      	bne.n	8014f40 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f2e:	4a09      	ldr	r2, [pc, #36]	; (8014f54 <prvTaskIsTaskSuspended+0x60>)
 8014f30:	4293      	cmp	r3, r2
 8014f32:	d005      	beq.n	8014f40 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d101      	bne.n	8014f40 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f40:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014f42:	4618      	mov	r0, r3
 8014f44:	371c      	adds	r7, #28
 8014f46:	46bd      	mov	sp, r7
 8014f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4c:	4770      	bx	lr
 8014f4e:	bf00      	nop
 8014f50:	24001ca4 	.word	0x24001ca4
 8014f54:	24001c78 	.word	0x24001c78

08014f58 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b08a      	sub	sp, #40	; 0x28
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014f60:	2300      	movs	r3, #0
 8014f62:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d10a      	bne.n	8014f84 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f72:	f383 8811 	msr	BASEPRI, r3
 8014f76:	f3bf 8f6f 	isb	sy
 8014f7a:	f3bf 8f4f 	dsb	sy
 8014f7e:	61bb      	str	r3, [r7, #24]
}
 8014f80:	bf00      	nop
 8014f82:	e7fe      	b.n	8014f82 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f84:	f001 fbc0 	bl	8016708 <vPortValidateInterruptPriority>
	__asm volatile
 8014f88:	f3ef 8211 	mrs	r2, BASEPRI
 8014f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f90:	f383 8811 	msr	BASEPRI, r3
 8014f94:	f3bf 8f6f 	isb	sy
 8014f98:	f3bf 8f4f 	dsb	sy
 8014f9c:	617a      	str	r2, [r7, #20]
 8014f9e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014fa0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014fa2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014fa4:	6a38      	ldr	r0, [r7, #32]
 8014fa6:	f7ff ffa5 	bl	8014ef4 <prvTaskIsTaskSuspended>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d030      	beq.n	8015012 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fb0:	4b1d      	ldr	r3, [pc, #116]	; (8015028 <xTaskResumeFromISR+0xd0>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d126      	bne.n	8015006 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fb8:	6a3b      	ldr	r3, [r7, #32]
 8014fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fbc:	4b1b      	ldr	r3, [pc, #108]	; (801502c <xTaskResumeFromISR+0xd4>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d301      	bcc.n	8014fca <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fca:	6a3b      	ldr	r3, [r7, #32]
 8014fcc:	3304      	adds	r3, #4
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fe ff74 	bl	8013ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014fd4:	6a3b      	ldr	r3, [r7, #32]
 8014fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd8:	4b15      	ldr	r3, [pc, #84]	; (8015030 <xTaskResumeFromISR+0xd8>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d903      	bls.n	8014fe8 <xTaskResumeFromISR+0x90>
 8014fe0:	6a3b      	ldr	r3, [r7, #32]
 8014fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe4:	4a12      	ldr	r2, [pc, #72]	; (8015030 <xTaskResumeFromISR+0xd8>)
 8014fe6:	6013      	str	r3, [r2, #0]
 8014fe8:	6a3b      	ldr	r3, [r7, #32]
 8014fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fec:	4613      	mov	r3, r2
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	4413      	add	r3, r2
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	4a0f      	ldr	r2, [pc, #60]	; (8015034 <xTaskResumeFromISR+0xdc>)
 8014ff6:	441a      	add	r2, r3
 8014ff8:	6a3b      	ldr	r3, [r7, #32]
 8014ffa:	3304      	adds	r3, #4
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	4610      	mov	r0, r2
 8015000:	f7fe feff 	bl	8013e02 <vListInsertEnd>
 8015004:	e005      	b.n	8015012 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015006:	6a3b      	ldr	r3, [r7, #32]
 8015008:	3318      	adds	r3, #24
 801500a:	4619      	mov	r1, r3
 801500c:	480a      	ldr	r0, [pc, #40]	; (8015038 <xTaskResumeFromISR+0xe0>)
 801500e:	f7fe fef8 	bl	8013e02 <vListInsertEnd>
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	f383 8811 	msr	BASEPRI, r3
}
 801501c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015020:	4618      	mov	r0, r3
 8015022:	3728      	adds	r7, #40	; 0x28
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}
 8015028:	24001ce0 	.word	0x24001ce0
 801502c:	240017e4 	.word	0x240017e4
 8015030:	24001cc0 	.word	0x24001cc0
 8015034:	240017e8 	.word	0x240017e8
 8015038:	24001c78 	.word	0x24001c78

0801503c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b08a      	sub	sp, #40	; 0x28
 8015040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015042:	2300      	movs	r3, #0
 8015044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015046:	2300      	movs	r3, #0
 8015048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801504a:	463a      	mov	r2, r7
 801504c:	1d39      	adds	r1, r7, #4
 801504e:	f107 0308 	add.w	r3, r7, #8
 8015052:	4618      	mov	r0, r3
 8015054:	f7fe fc08 	bl	8013868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015058:	6839      	ldr	r1, [r7, #0]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	68ba      	ldr	r2, [r7, #8]
 801505e:	9202      	str	r2, [sp, #8]
 8015060:	9301      	str	r3, [sp, #4]
 8015062:	2300      	movs	r3, #0
 8015064:	9300      	str	r3, [sp, #0]
 8015066:	2300      	movs	r3, #0
 8015068:	460a      	mov	r2, r1
 801506a:	4921      	ldr	r1, [pc, #132]	; (80150f0 <vTaskStartScheduler+0xb4>)
 801506c:	4821      	ldr	r0, [pc, #132]	; (80150f4 <vTaskStartScheduler+0xb8>)
 801506e:	f7ff fcf5 	bl	8014a5c <xTaskCreateStatic>
 8015072:	4603      	mov	r3, r0
 8015074:	4a20      	ldr	r2, [pc, #128]	; (80150f8 <vTaskStartScheduler+0xbc>)
 8015076:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015078:	4b1f      	ldr	r3, [pc, #124]	; (80150f8 <vTaskStartScheduler+0xbc>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d002      	beq.n	8015086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015080:	2301      	movs	r3, #1
 8015082:	617b      	str	r3, [r7, #20]
 8015084:	e001      	b.n	801508a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015086:	2300      	movs	r3, #0
 8015088:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	2b01      	cmp	r3, #1
 801508e:	d102      	bne.n	8015096 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015090:	f000 fdba 	bl	8015c08 <xTimerCreateTimerTask>
 8015094:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	2b01      	cmp	r3, #1
 801509a:	d116      	bne.n	80150ca <vTaskStartScheduler+0x8e>
	__asm volatile
 801509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a0:	f383 8811 	msr	BASEPRI, r3
 80150a4:	f3bf 8f6f 	isb	sy
 80150a8:	f3bf 8f4f 	dsb	sy
 80150ac:	613b      	str	r3, [r7, #16]
}
 80150ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80150b0:	4b12      	ldr	r3, [pc, #72]	; (80150fc <vTaskStartScheduler+0xc0>)
 80150b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80150b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80150b8:	4b11      	ldr	r3, [pc, #68]	; (8015100 <vTaskStartScheduler+0xc4>)
 80150ba:	2201      	movs	r2, #1
 80150bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80150be:	4b11      	ldr	r3, [pc, #68]	; (8015104 <vTaskStartScheduler+0xc8>)
 80150c0:	2200      	movs	r2, #0
 80150c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80150c4:	f001 f99c 	bl	8016400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80150c8:	e00e      	b.n	80150e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150d0:	d10a      	bne.n	80150e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80150d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d6:	f383 8811 	msr	BASEPRI, r3
 80150da:	f3bf 8f6f 	isb	sy
 80150de:	f3bf 8f4f 	dsb	sy
 80150e2:	60fb      	str	r3, [r7, #12]
}
 80150e4:	bf00      	nop
 80150e6:	e7fe      	b.n	80150e6 <vTaskStartScheduler+0xaa>
}
 80150e8:	bf00      	nop
 80150ea:	3718      	adds	r7, #24
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}
 80150f0:	08017884 	.word	0x08017884
 80150f4:	0801586d 	.word	0x0801586d
 80150f8:	24001cdc 	.word	0x24001cdc
 80150fc:	24001cd8 	.word	0x24001cd8
 8015100:	24001cc4 	.word	0x24001cc4
 8015104:	24001cbc 	.word	0x24001cbc

08015108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015108:	b480      	push	{r7}
 801510a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801510c:	4b04      	ldr	r3, [pc, #16]	; (8015120 <vTaskSuspendAll+0x18>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	3301      	adds	r3, #1
 8015112:	4a03      	ldr	r2, [pc, #12]	; (8015120 <vTaskSuspendAll+0x18>)
 8015114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015116:	bf00      	nop
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr
 8015120:	24001ce0 	.word	0x24001ce0

08015124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801512a:	2300      	movs	r3, #0
 801512c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801512e:	2300      	movs	r3, #0
 8015130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015132:	4b42      	ldr	r3, [pc, #264]	; (801523c <xTaskResumeAll+0x118>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d10a      	bne.n	8015150 <xTaskResumeAll+0x2c>
	__asm volatile
 801513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801513e:	f383 8811 	msr	BASEPRI, r3
 8015142:	f3bf 8f6f 	isb	sy
 8015146:	f3bf 8f4f 	dsb	sy
 801514a:	603b      	str	r3, [r7, #0]
}
 801514c:	bf00      	nop
 801514e:	e7fe      	b.n	801514e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015150:	f001 f9f8 	bl	8016544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015154:	4b39      	ldr	r3, [pc, #228]	; (801523c <xTaskResumeAll+0x118>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	3b01      	subs	r3, #1
 801515a:	4a38      	ldr	r2, [pc, #224]	; (801523c <xTaskResumeAll+0x118>)
 801515c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801515e:	4b37      	ldr	r3, [pc, #220]	; (801523c <xTaskResumeAll+0x118>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d162      	bne.n	801522c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015166:	4b36      	ldr	r3, [pc, #216]	; (8015240 <xTaskResumeAll+0x11c>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d05e      	beq.n	801522c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801516e:	e02f      	b.n	80151d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015170:	4b34      	ldr	r3, [pc, #208]	; (8015244 <xTaskResumeAll+0x120>)
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	3318      	adds	r3, #24
 801517c:	4618      	mov	r0, r3
 801517e:	f7fe fe9d 	bl	8013ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	3304      	adds	r3, #4
 8015186:	4618      	mov	r0, r3
 8015188:	f7fe fe98 	bl	8013ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015190:	4b2d      	ldr	r3, [pc, #180]	; (8015248 <xTaskResumeAll+0x124>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	429a      	cmp	r2, r3
 8015196:	d903      	bls.n	80151a0 <xTaskResumeAll+0x7c>
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801519c:	4a2a      	ldr	r2, [pc, #168]	; (8015248 <xTaskResumeAll+0x124>)
 801519e:	6013      	str	r3, [r2, #0]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151a4:	4613      	mov	r3, r2
 80151a6:	009b      	lsls	r3, r3, #2
 80151a8:	4413      	add	r3, r2
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	4a27      	ldr	r2, [pc, #156]	; (801524c <xTaskResumeAll+0x128>)
 80151ae:	441a      	add	r2, r3
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	3304      	adds	r3, #4
 80151b4:	4619      	mov	r1, r3
 80151b6:	4610      	mov	r0, r2
 80151b8:	f7fe fe23 	bl	8013e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151c0:	4b23      	ldr	r3, [pc, #140]	; (8015250 <xTaskResumeAll+0x12c>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d302      	bcc.n	80151d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80151ca:	4b22      	ldr	r3, [pc, #136]	; (8015254 <xTaskResumeAll+0x130>)
 80151cc:	2201      	movs	r2, #1
 80151ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80151d0:	4b1c      	ldr	r3, [pc, #112]	; (8015244 <xTaskResumeAll+0x120>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d1cb      	bne.n	8015170 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d001      	beq.n	80151e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80151de:	f000 fbfb 	bl	80159d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80151e2:	4b1d      	ldr	r3, [pc, #116]	; (8015258 <xTaskResumeAll+0x134>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d010      	beq.n	8015210 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80151ee:	f000 f847 	bl	8015280 <xTaskIncrementTick>
 80151f2:	4603      	mov	r3, r0
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d002      	beq.n	80151fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80151f8:	4b16      	ldr	r3, [pc, #88]	; (8015254 <xTaskResumeAll+0x130>)
 80151fa:	2201      	movs	r2, #1
 80151fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	3b01      	subs	r3, #1
 8015202:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d1f1      	bne.n	80151ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801520a:	4b13      	ldr	r3, [pc, #76]	; (8015258 <xTaskResumeAll+0x134>)
 801520c:	2200      	movs	r2, #0
 801520e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015210:	4b10      	ldr	r3, [pc, #64]	; (8015254 <xTaskResumeAll+0x130>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d009      	beq.n	801522c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015218:	2301      	movs	r3, #1
 801521a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801521c:	4b0f      	ldr	r3, [pc, #60]	; (801525c <xTaskResumeAll+0x138>)
 801521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015222:	601a      	str	r2, [r3, #0]
 8015224:	f3bf 8f4f 	dsb	sy
 8015228:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801522c:	f001 f9ba 	bl	80165a4 <vPortExitCritical>

	return xAlreadyYielded;
 8015230:	68bb      	ldr	r3, [r7, #8]
}
 8015232:	4618      	mov	r0, r3
 8015234:	3710      	adds	r7, #16
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	24001ce0 	.word	0x24001ce0
 8015240:	24001cb8 	.word	0x24001cb8
 8015244:	24001c78 	.word	0x24001c78
 8015248:	24001cc0 	.word	0x24001cc0
 801524c:	240017e8 	.word	0x240017e8
 8015250:	240017e4 	.word	0x240017e4
 8015254:	24001ccc 	.word	0x24001ccc
 8015258:	24001cc8 	.word	0x24001cc8
 801525c:	e000ed04 	.word	0xe000ed04

08015260 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015260:	b480      	push	{r7}
 8015262:	b083      	sub	sp, #12
 8015264:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015266:	4b05      	ldr	r3, [pc, #20]	; (801527c <xTaskGetTickCount+0x1c>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801526c:	687b      	ldr	r3, [r7, #4]
}
 801526e:	4618      	mov	r0, r3
 8015270:	370c      	adds	r7, #12
 8015272:	46bd      	mov	sp, r7
 8015274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015278:	4770      	bx	lr
 801527a:	bf00      	nop
 801527c:	24001cbc 	.word	0x24001cbc

08015280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015286:	2300      	movs	r3, #0
 8015288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801528a:	4b53      	ldr	r3, [pc, #332]	; (80153d8 <xTaskIncrementTick+0x158>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	f040 8095 	bne.w	80153be <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015294:	4b51      	ldr	r3, [pc, #324]	; (80153dc <xTaskIncrementTick+0x15c>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	3301      	adds	r3, #1
 801529a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801529c:	4a4f      	ldr	r2, [pc, #316]	; (80153dc <xTaskIncrementTick+0x15c>)
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d120      	bne.n	80152ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80152a8:	4b4d      	ldr	r3, [pc, #308]	; (80153e0 <xTaskIncrementTick+0x160>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00a      	beq.n	80152c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80152b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b6:	f383 8811 	msr	BASEPRI, r3
 80152ba:	f3bf 8f6f 	isb	sy
 80152be:	f3bf 8f4f 	dsb	sy
 80152c2:	603b      	str	r3, [r7, #0]
}
 80152c4:	bf00      	nop
 80152c6:	e7fe      	b.n	80152c6 <xTaskIncrementTick+0x46>
 80152c8:	4b45      	ldr	r3, [pc, #276]	; (80153e0 <xTaskIncrementTick+0x160>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	60fb      	str	r3, [r7, #12]
 80152ce:	4b45      	ldr	r3, [pc, #276]	; (80153e4 <xTaskIncrementTick+0x164>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	4a43      	ldr	r2, [pc, #268]	; (80153e0 <xTaskIncrementTick+0x160>)
 80152d4:	6013      	str	r3, [r2, #0]
 80152d6:	4a43      	ldr	r2, [pc, #268]	; (80153e4 <xTaskIncrementTick+0x164>)
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	6013      	str	r3, [r2, #0]
 80152dc:	4b42      	ldr	r3, [pc, #264]	; (80153e8 <xTaskIncrementTick+0x168>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	3301      	adds	r3, #1
 80152e2:	4a41      	ldr	r2, [pc, #260]	; (80153e8 <xTaskIncrementTick+0x168>)
 80152e4:	6013      	str	r3, [r2, #0]
 80152e6:	f000 fb77 	bl	80159d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80152ea:	4b40      	ldr	r3, [pc, #256]	; (80153ec <xTaskIncrementTick+0x16c>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	693a      	ldr	r2, [r7, #16]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d349      	bcc.n	8015388 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152f4:	4b3a      	ldr	r3, [pc, #232]	; (80153e0 <xTaskIncrementTick+0x160>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d104      	bne.n	8015308 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152fe:	4b3b      	ldr	r3, [pc, #236]	; (80153ec <xTaskIncrementTick+0x16c>)
 8015300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015304:	601a      	str	r2, [r3, #0]
					break;
 8015306:	e03f      	b.n	8015388 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015308:	4b35      	ldr	r3, [pc, #212]	; (80153e0 <xTaskIncrementTick+0x160>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	68db      	ldr	r3, [r3, #12]
 8015310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015318:	693a      	ldr	r2, [r7, #16]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	429a      	cmp	r2, r3
 801531e:	d203      	bcs.n	8015328 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015320:	4a32      	ldr	r2, [pc, #200]	; (80153ec <xTaskIncrementTick+0x16c>)
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015326:	e02f      	b.n	8015388 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	3304      	adds	r3, #4
 801532c:	4618      	mov	r0, r3
 801532e:	f7fe fdc5 	bl	8013ebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015336:	2b00      	cmp	r3, #0
 8015338:	d004      	beq.n	8015344 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	3318      	adds	r3, #24
 801533e:	4618      	mov	r0, r3
 8015340:	f7fe fdbc 	bl	8013ebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015348:	4b29      	ldr	r3, [pc, #164]	; (80153f0 <xTaskIncrementTick+0x170>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	429a      	cmp	r2, r3
 801534e:	d903      	bls.n	8015358 <xTaskIncrementTick+0xd8>
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015354:	4a26      	ldr	r2, [pc, #152]	; (80153f0 <xTaskIncrementTick+0x170>)
 8015356:	6013      	str	r3, [r2, #0]
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801535c:	4613      	mov	r3, r2
 801535e:	009b      	lsls	r3, r3, #2
 8015360:	4413      	add	r3, r2
 8015362:	009b      	lsls	r3, r3, #2
 8015364:	4a23      	ldr	r2, [pc, #140]	; (80153f4 <xTaskIncrementTick+0x174>)
 8015366:	441a      	add	r2, r3
 8015368:	68bb      	ldr	r3, [r7, #8]
 801536a:	3304      	adds	r3, #4
 801536c:	4619      	mov	r1, r3
 801536e:	4610      	mov	r0, r2
 8015370:	f7fe fd47 	bl	8013e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015378:	4b1f      	ldr	r3, [pc, #124]	; (80153f8 <xTaskIncrementTick+0x178>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801537e:	429a      	cmp	r2, r3
 8015380:	d3b8      	bcc.n	80152f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015382:	2301      	movs	r3, #1
 8015384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015386:	e7b5      	b.n	80152f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015388:	4b1b      	ldr	r3, [pc, #108]	; (80153f8 <xTaskIncrementTick+0x178>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801538e:	4919      	ldr	r1, [pc, #100]	; (80153f4 <xTaskIncrementTick+0x174>)
 8015390:	4613      	mov	r3, r2
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4413      	add	r3, r2
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	440b      	add	r3, r1
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	2b01      	cmp	r3, #1
 801539e:	d901      	bls.n	80153a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80153a0:	2301      	movs	r3, #1
 80153a2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80153a4:	4b15      	ldr	r3, [pc, #84]	; (80153fc <xTaskIncrementTick+0x17c>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d101      	bne.n	80153b0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80153ac:	f7eb f91a 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80153b0:	4b13      	ldr	r3, [pc, #76]	; (8015400 <xTaskIncrementTick+0x180>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d009      	beq.n	80153cc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80153b8:	2301      	movs	r3, #1
 80153ba:	617b      	str	r3, [r7, #20]
 80153bc:	e006      	b.n	80153cc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80153be:	4b0f      	ldr	r3, [pc, #60]	; (80153fc <xTaskIncrementTick+0x17c>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	3301      	adds	r3, #1
 80153c4:	4a0d      	ldr	r2, [pc, #52]	; (80153fc <xTaskIncrementTick+0x17c>)
 80153c6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80153c8:	f7eb f90c 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80153cc:	697b      	ldr	r3, [r7, #20]
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3718      	adds	r7, #24
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	24001ce0 	.word	0x24001ce0
 80153dc:	24001cbc 	.word	0x24001cbc
 80153e0:	24001c70 	.word	0x24001c70
 80153e4:	24001c74 	.word	0x24001c74
 80153e8:	24001cd0 	.word	0x24001cd0
 80153ec:	24001cd8 	.word	0x24001cd8
 80153f0:	24001cc0 	.word	0x24001cc0
 80153f4:	240017e8 	.word	0x240017e8
 80153f8:	240017e4 	.word	0x240017e4
 80153fc:	24001cc8 	.word	0x24001cc8
 8015400:	24001ccc 	.word	0x24001ccc

08015404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015404:	b480      	push	{r7}
 8015406:	b085      	sub	sp, #20
 8015408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801540a:	4b28      	ldr	r3, [pc, #160]	; (80154ac <vTaskSwitchContext+0xa8>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d003      	beq.n	801541a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015412:	4b27      	ldr	r3, [pc, #156]	; (80154b0 <vTaskSwitchContext+0xac>)
 8015414:	2201      	movs	r2, #1
 8015416:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015418:	e041      	b.n	801549e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801541a:	4b25      	ldr	r3, [pc, #148]	; (80154b0 <vTaskSwitchContext+0xac>)
 801541c:	2200      	movs	r2, #0
 801541e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015420:	4b24      	ldr	r3, [pc, #144]	; (80154b4 <vTaskSwitchContext+0xb0>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	60fb      	str	r3, [r7, #12]
 8015426:	e010      	b.n	801544a <vTaskSwitchContext+0x46>
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d10a      	bne.n	8015444 <vTaskSwitchContext+0x40>
	__asm volatile
 801542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015432:	f383 8811 	msr	BASEPRI, r3
 8015436:	f3bf 8f6f 	isb	sy
 801543a:	f3bf 8f4f 	dsb	sy
 801543e:	607b      	str	r3, [r7, #4]
}
 8015440:	bf00      	nop
 8015442:	e7fe      	b.n	8015442 <vTaskSwitchContext+0x3e>
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	3b01      	subs	r3, #1
 8015448:	60fb      	str	r3, [r7, #12]
 801544a:	491b      	ldr	r1, [pc, #108]	; (80154b8 <vTaskSwitchContext+0xb4>)
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	4613      	mov	r3, r2
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	4413      	add	r3, r2
 8015454:	009b      	lsls	r3, r3, #2
 8015456:	440b      	add	r3, r1
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d0e4      	beq.n	8015428 <vTaskSwitchContext+0x24>
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	4613      	mov	r3, r2
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	4413      	add	r3, r2
 8015466:	009b      	lsls	r3, r3, #2
 8015468:	4a13      	ldr	r2, [pc, #76]	; (80154b8 <vTaskSwitchContext+0xb4>)
 801546a:	4413      	add	r3, r2
 801546c:	60bb      	str	r3, [r7, #8]
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	685a      	ldr	r2, [r3, #4]
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	605a      	str	r2, [r3, #4]
 8015478:	68bb      	ldr	r3, [r7, #8]
 801547a:	685a      	ldr	r2, [r3, #4]
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	3308      	adds	r3, #8
 8015480:	429a      	cmp	r2, r3
 8015482:	d104      	bne.n	801548e <vTaskSwitchContext+0x8a>
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	685a      	ldr	r2, [r3, #4]
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	605a      	str	r2, [r3, #4]
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	4a09      	ldr	r2, [pc, #36]	; (80154bc <vTaskSwitchContext+0xb8>)
 8015496:	6013      	str	r3, [r2, #0]
 8015498:	4a06      	ldr	r2, [pc, #24]	; (80154b4 <vTaskSwitchContext+0xb0>)
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	6013      	str	r3, [r2, #0]
}
 801549e:	bf00      	nop
 80154a0:	3714      	adds	r7, #20
 80154a2:	46bd      	mov	sp, r7
 80154a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a8:	4770      	bx	lr
 80154aa:	bf00      	nop
 80154ac:	24001ce0 	.word	0x24001ce0
 80154b0:	24001ccc 	.word	0x24001ccc
 80154b4:	24001cc0 	.word	0x24001cc0
 80154b8:	240017e8 	.word	0x240017e8
 80154bc:	240017e4 	.word	0x240017e4

080154c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d10a      	bne.n	80154e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80154d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d4:	f383 8811 	msr	BASEPRI, r3
 80154d8:	f3bf 8f6f 	isb	sy
 80154dc:	f3bf 8f4f 	dsb	sy
 80154e0:	60fb      	str	r3, [r7, #12]
}
 80154e2:	bf00      	nop
 80154e4:	e7fe      	b.n	80154e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154e6:	4b07      	ldr	r3, [pc, #28]	; (8015504 <vTaskPlaceOnEventList+0x44>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	3318      	adds	r3, #24
 80154ec:	4619      	mov	r1, r3
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f7fe fcab 	bl	8013e4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80154f4:	2101      	movs	r1, #1
 80154f6:	6838      	ldr	r0, [r7, #0]
 80154f8:	f000 fb32 	bl	8015b60 <prvAddCurrentTaskToDelayedList>
}
 80154fc:	bf00      	nop
 80154fe:	3710      	adds	r7, #16
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}
 8015504:	240017e4 	.word	0x240017e4

08015508 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b086      	sub	sp, #24
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d10a      	bne.n	8015530 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551e:	f383 8811 	msr	BASEPRI, r3
 8015522:	f3bf 8f6f 	isb	sy
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	617b      	str	r3, [r7, #20]
}
 801552c:	bf00      	nop
 801552e:	e7fe      	b.n	801552e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015530:	4b11      	ldr	r3, [pc, #68]	; (8015578 <vTaskPlaceOnUnorderedEventList+0x70>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10a      	bne.n	801554e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801553c:	f383 8811 	msr	BASEPRI, r3
 8015540:	f3bf 8f6f 	isb	sy
 8015544:	f3bf 8f4f 	dsb	sy
 8015548:	613b      	str	r3, [r7, #16]
}
 801554a:	bf00      	nop
 801554c:	e7fe      	b.n	801554c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801554e:	4b0b      	ldr	r3, [pc, #44]	; (801557c <vTaskPlaceOnUnorderedEventList+0x74>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	68ba      	ldr	r2, [r7, #8]
 8015554:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015558:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801555a:	4b08      	ldr	r3, [pc, #32]	; (801557c <vTaskPlaceOnUnorderedEventList+0x74>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	3318      	adds	r3, #24
 8015560:	4619      	mov	r1, r3
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f7fe fc4d 	bl	8013e02 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015568:	2101      	movs	r1, #1
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f000 faf8 	bl	8015b60 <prvAddCurrentTaskToDelayedList>
}
 8015570:	bf00      	nop
 8015572:	3718      	adds	r7, #24
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	24001ce0 	.word	0x24001ce0
 801557c:	240017e4 	.word	0x240017e4

08015580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015580:	b580      	push	{r7, lr}
 8015582:	b086      	sub	sp, #24
 8015584:	af00      	add	r7, sp, #0
 8015586:	60f8      	str	r0, [r7, #12]
 8015588:	60b9      	str	r1, [r7, #8]
 801558a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d10a      	bne.n	80155a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015596:	f383 8811 	msr	BASEPRI, r3
 801559a:	f3bf 8f6f 	isb	sy
 801559e:	f3bf 8f4f 	dsb	sy
 80155a2:	617b      	str	r3, [r7, #20]
}
 80155a4:	bf00      	nop
 80155a6:	e7fe      	b.n	80155a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80155a8:	4b0a      	ldr	r3, [pc, #40]	; (80155d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	3318      	adds	r3, #24
 80155ae:	4619      	mov	r1, r3
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f7fe fc26 	bl	8013e02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d002      	beq.n	80155c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80155bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80155c2:	6879      	ldr	r1, [r7, #4]
 80155c4:	68b8      	ldr	r0, [r7, #8]
 80155c6:	f000 facb 	bl	8015b60 <prvAddCurrentTaskToDelayedList>
	}
 80155ca:	bf00      	nop
 80155cc:	3718      	adds	r7, #24
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	bf00      	nop
 80155d4:	240017e4 	.word	0x240017e4

080155d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b086      	sub	sp, #24
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	68db      	ldr	r3, [r3, #12]
 80155e4:	68db      	ldr	r3, [r3, #12]
 80155e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d10a      	bne.n	8015604 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80155ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155f2:	f383 8811 	msr	BASEPRI, r3
 80155f6:	f3bf 8f6f 	isb	sy
 80155fa:	f3bf 8f4f 	dsb	sy
 80155fe:	60fb      	str	r3, [r7, #12]
}
 8015600:	bf00      	nop
 8015602:	e7fe      	b.n	8015602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	3318      	adds	r3, #24
 8015608:	4618      	mov	r0, r3
 801560a:	f7fe fc57 	bl	8013ebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801560e:	4b1e      	ldr	r3, [pc, #120]	; (8015688 <xTaskRemoveFromEventList+0xb0>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d11d      	bne.n	8015652 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	3304      	adds	r3, #4
 801561a:	4618      	mov	r0, r3
 801561c:	f7fe fc4e 	bl	8013ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015624:	4b19      	ldr	r3, [pc, #100]	; (801568c <xTaskRemoveFromEventList+0xb4>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	429a      	cmp	r2, r3
 801562a:	d903      	bls.n	8015634 <xTaskRemoveFromEventList+0x5c>
 801562c:	693b      	ldr	r3, [r7, #16]
 801562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015630:	4a16      	ldr	r2, [pc, #88]	; (801568c <xTaskRemoveFromEventList+0xb4>)
 8015632:	6013      	str	r3, [r2, #0]
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015638:	4613      	mov	r3, r2
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	4413      	add	r3, r2
 801563e:	009b      	lsls	r3, r3, #2
 8015640:	4a13      	ldr	r2, [pc, #76]	; (8015690 <xTaskRemoveFromEventList+0xb8>)
 8015642:	441a      	add	r2, r3
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	3304      	adds	r3, #4
 8015648:	4619      	mov	r1, r3
 801564a:	4610      	mov	r0, r2
 801564c:	f7fe fbd9 	bl	8013e02 <vListInsertEnd>
 8015650:	e005      	b.n	801565e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	3318      	adds	r3, #24
 8015656:	4619      	mov	r1, r3
 8015658:	480e      	ldr	r0, [pc, #56]	; (8015694 <xTaskRemoveFromEventList+0xbc>)
 801565a:	f7fe fbd2 	bl	8013e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801565e:	693b      	ldr	r3, [r7, #16]
 8015660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015662:	4b0d      	ldr	r3, [pc, #52]	; (8015698 <xTaskRemoveFromEventList+0xc0>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015668:	429a      	cmp	r2, r3
 801566a:	d905      	bls.n	8015678 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801566c:	2301      	movs	r3, #1
 801566e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015670:	4b0a      	ldr	r3, [pc, #40]	; (801569c <xTaskRemoveFromEventList+0xc4>)
 8015672:	2201      	movs	r2, #1
 8015674:	601a      	str	r2, [r3, #0]
 8015676:	e001      	b.n	801567c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015678:	2300      	movs	r3, #0
 801567a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801567c:	697b      	ldr	r3, [r7, #20]
}
 801567e:	4618      	mov	r0, r3
 8015680:	3718      	adds	r7, #24
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
 8015686:	bf00      	nop
 8015688:	24001ce0 	.word	0x24001ce0
 801568c:	24001cc0 	.word	0x24001cc0
 8015690:	240017e8 	.word	0x240017e8
 8015694:	24001c78 	.word	0x24001c78
 8015698:	240017e4 	.word	0x240017e4
 801569c:	24001ccc 	.word	0x24001ccc

080156a0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b086      	sub	sp, #24
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80156aa:	4b29      	ldr	r3, [pc, #164]	; (8015750 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d10a      	bne.n	80156c8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80156b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b6:	f383 8811 	msr	BASEPRI, r3
 80156ba:	f3bf 8f6f 	isb	sy
 80156be:	f3bf 8f4f 	dsb	sy
 80156c2:	613b      	str	r3, [r7, #16]
}
 80156c4:	bf00      	nop
 80156c6:	e7fe      	b.n	80156c6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d10a      	bne.n	80156f4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80156de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e2:	f383 8811 	msr	BASEPRI, r3
 80156e6:	f3bf 8f6f 	isb	sy
 80156ea:	f3bf 8f4f 	dsb	sy
 80156ee:	60fb      	str	r3, [r7, #12]
}
 80156f0:	bf00      	nop
 80156f2:	e7fe      	b.n	80156f2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7fe fbe1 	bl	8013ebc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	3304      	adds	r3, #4
 80156fe:	4618      	mov	r0, r3
 8015700:	f7fe fbdc 	bl	8013ebc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015708:	4b12      	ldr	r3, [pc, #72]	; (8015754 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	429a      	cmp	r2, r3
 801570e:	d903      	bls.n	8015718 <vTaskRemoveFromUnorderedEventList+0x78>
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015714:	4a0f      	ldr	r2, [pc, #60]	; (8015754 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015716:	6013      	str	r3, [r2, #0]
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801571c:	4613      	mov	r3, r2
 801571e:	009b      	lsls	r3, r3, #2
 8015720:	4413      	add	r3, r2
 8015722:	009b      	lsls	r3, r3, #2
 8015724:	4a0c      	ldr	r2, [pc, #48]	; (8015758 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015726:	441a      	add	r2, r3
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	3304      	adds	r3, #4
 801572c:	4619      	mov	r1, r3
 801572e:	4610      	mov	r0, r2
 8015730:	f7fe fb67 	bl	8013e02 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015738:	4b08      	ldr	r3, [pc, #32]	; (801575c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801573e:	429a      	cmp	r2, r3
 8015740:	d902      	bls.n	8015748 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8015742:	4b07      	ldr	r3, [pc, #28]	; (8015760 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015744:	2201      	movs	r2, #1
 8015746:	601a      	str	r2, [r3, #0]
	}
}
 8015748:	bf00      	nop
 801574a:	3718      	adds	r7, #24
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	24001ce0 	.word	0x24001ce0
 8015754:	24001cc0 	.word	0x24001cc0
 8015758:	240017e8 	.word	0x240017e8
 801575c:	240017e4 	.word	0x240017e4
 8015760:	24001ccc 	.word	0x24001ccc

08015764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015764:	b480      	push	{r7}
 8015766:	b083      	sub	sp, #12
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801576c:	4b06      	ldr	r3, [pc, #24]	; (8015788 <vTaskInternalSetTimeOutState+0x24>)
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015774:	4b05      	ldr	r3, [pc, #20]	; (801578c <vTaskInternalSetTimeOutState+0x28>)
 8015776:	681a      	ldr	r2, [r3, #0]
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	605a      	str	r2, [r3, #4]
}
 801577c:	bf00      	nop
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr
 8015788:	24001cd0 	.word	0x24001cd0
 801578c:	24001cbc 	.word	0x24001cbc

08015790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b088      	sub	sp, #32
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d10a      	bne.n	80157b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80157a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a4:	f383 8811 	msr	BASEPRI, r3
 80157a8:	f3bf 8f6f 	isb	sy
 80157ac:	f3bf 8f4f 	dsb	sy
 80157b0:	613b      	str	r3, [r7, #16]
}
 80157b2:	bf00      	nop
 80157b4:	e7fe      	b.n	80157b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d10a      	bne.n	80157d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80157bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c0:	f383 8811 	msr	BASEPRI, r3
 80157c4:	f3bf 8f6f 	isb	sy
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	60fb      	str	r3, [r7, #12]
}
 80157ce:	bf00      	nop
 80157d0:	e7fe      	b.n	80157d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80157d2:	f000 feb7 	bl	8016544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80157d6:	4b1d      	ldr	r3, [pc, #116]	; (801584c <xTaskCheckForTimeOut+0xbc>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	685b      	ldr	r3, [r3, #4]
 80157e0:	69ba      	ldr	r2, [r7, #24]
 80157e2:	1ad3      	subs	r3, r2, r3
 80157e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157ee:	d102      	bne.n	80157f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80157f0:	2300      	movs	r3, #0
 80157f2:	61fb      	str	r3, [r7, #28]
 80157f4:	e023      	b.n	801583e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	4b15      	ldr	r3, [pc, #84]	; (8015850 <xTaskCheckForTimeOut+0xc0>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d007      	beq.n	8015812 <xTaskCheckForTimeOut+0x82>
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	69ba      	ldr	r2, [r7, #24]
 8015808:	429a      	cmp	r2, r3
 801580a:	d302      	bcc.n	8015812 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801580c:	2301      	movs	r3, #1
 801580e:	61fb      	str	r3, [r7, #28]
 8015810:	e015      	b.n	801583e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	697a      	ldr	r2, [r7, #20]
 8015818:	429a      	cmp	r2, r3
 801581a:	d20b      	bcs.n	8015834 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	681a      	ldr	r2, [r3, #0]
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	1ad2      	subs	r2, r2, r3
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f7ff ff9b 	bl	8015764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801582e:	2300      	movs	r3, #0
 8015830:	61fb      	str	r3, [r7, #28]
 8015832:	e004      	b.n	801583e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	2200      	movs	r2, #0
 8015838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801583a:	2301      	movs	r3, #1
 801583c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801583e:	f000 feb1 	bl	80165a4 <vPortExitCritical>

	return xReturn;
 8015842:	69fb      	ldr	r3, [r7, #28]
}
 8015844:	4618      	mov	r0, r3
 8015846:	3720      	adds	r7, #32
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	24001cbc 	.word	0x24001cbc
 8015850:	24001cd0 	.word	0x24001cd0

08015854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015854:	b480      	push	{r7}
 8015856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015858:	4b03      	ldr	r3, [pc, #12]	; (8015868 <vTaskMissedYield+0x14>)
 801585a:	2201      	movs	r2, #1
 801585c:	601a      	str	r2, [r3, #0]
}
 801585e:	bf00      	nop
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr
 8015868:	24001ccc 	.word	0x24001ccc

0801586c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015874:	f000 f852 	bl	801591c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015878:	4b06      	ldr	r3, [pc, #24]	; (8015894 <prvIdleTask+0x28>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2b01      	cmp	r3, #1
 801587e:	d9f9      	bls.n	8015874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015880:	4b05      	ldr	r3, [pc, #20]	; (8015898 <prvIdleTask+0x2c>)
 8015882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015886:	601a      	str	r2, [r3, #0]
 8015888:	f3bf 8f4f 	dsb	sy
 801588c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015890:	e7f0      	b.n	8015874 <prvIdleTask+0x8>
 8015892:	bf00      	nop
 8015894:	240017e8 	.word	0x240017e8
 8015898:	e000ed04 	.word	0xe000ed04

0801589c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b082      	sub	sp, #8
 80158a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158a2:	2300      	movs	r3, #0
 80158a4:	607b      	str	r3, [r7, #4]
 80158a6:	e00c      	b.n	80158c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	4613      	mov	r3, r2
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	4413      	add	r3, r2
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	4a12      	ldr	r2, [pc, #72]	; (80158fc <prvInitialiseTaskLists+0x60>)
 80158b4:	4413      	add	r3, r2
 80158b6:	4618      	mov	r0, r3
 80158b8:	f7fe fa76 	bl	8013da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	3301      	adds	r3, #1
 80158c0:	607b      	str	r3, [r7, #4]
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2b37      	cmp	r3, #55	; 0x37
 80158c6:	d9ef      	bls.n	80158a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80158c8:	480d      	ldr	r0, [pc, #52]	; (8015900 <prvInitialiseTaskLists+0x64>)
 80158ca:	f7fe fa6d 	bl	8013da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80158ce:	480d      	ldr	r0, [pc, #52]	; (8015904 <prvInitialiseTaskLists+0x68>)
 80158d0:	f7fe fa6a 	bl	8013da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80158d4:	480c      	ldr	r0, [pc, #48]	; (8015908 <prvInitialiseTaskLists+0x6c>)
 80158d6:	f7fe fa67 	bl	8013da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80158da:	480c      	ldr	r0, [pc, #48]	; (801590c <prvInitialiseTaskLists+0x70>)
 80158dc:	f7fe fa64 	bl	8013da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80158e0:	480b      	ldr	r0, [pc, #44]	; (8015910 <prvInitialiseTaskLists+0x74>)
 80158e2:	f7fe fa61 	bl	8013da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80158e6:	4b0b      	ldr	r3, [pc, #44]	; (8015914 <prvInitialiseTaskLists+0x78>)
 80158e8:	4a05      	ldr	r2, [pc, #20]	; (8015900 <prvInitialiseTaskLists+0x64>)
 80158ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80158ec:	4b0a      	ldr	r3, [pc, #40]	; (8015918 <prvInitialiseTaskLists+0x7c>)
 80158ee:	4a05      	ldr	r2, [pc, #20]	; (8015904 <prvInitialiseTaskLists+0x68>)
 80158f0:	601a      	str	r2, [r3, #0]
}
 80158f2:	bf00      	nop
 80158f4:	3708      	adds	r7, #8
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	240017e8 	.word	0x240017e8
 8015900:	24001c48 	.word	0x24001c48
 8015904:	24001c5c 	.word	0x24001c5c
 8015908:	24001c78 	.word	0x24001c78
 801590c:	24001c8c 	.word	0x24001c8c
 8015910:	24001ca4 	.word	0x24001ca4
 8015914:	24001c70 	.word	0x24001c70
 8015918:	24001c74 	.word	0x24001c74

0801591c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015922:	e019      	b.n	8015958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015924:	f000 fe0e 	bl	8016544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015928:	4b10      	ldr	r3, [pc, #64]	; (801596c <prvCheckTasksWaitingTermination+0x50>)
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	68db      	ldr	r3, [r3, #12]
 801592e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	3304      	adds	r3, #4
 8015934:	4618      	mov	r0, r3
 8015936:	f7fe fac1 	bl	8013ebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801593a:	4b0d      	ldr	r3, [pc, #52]	; (8015970 <prvCheckTasksWaitingTermination+0x54>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	3b01      	subs	r3, #1
 8015940:	4a0b      	ldr	r2, [pc, #44]	; (8015970 <prvCheckTasksWaitingTermination+0x54>)
 8015942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015944:	4b0b      	ldr	r3, [pc, #44]	; (8015974 <prvCheckTasksWaitingTermination+0x58>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	3b01      	subs	r3, #1
 801594a:	4a0a      	ldr	r2, [pc, #40]	; (8015974 <prvCheckTasksWaitingTermination+0x58>)
 801594c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801594e:	f000 fe29 	bl	80165a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f000 f810 	bl	8015978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015958:	4b06      	ldr	r3, [pc, #24]	; (8015974 <prvCheckTasksWaitingTermination+0x58>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d1e1      	bne.n	8015924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015960:	bf00      	nop
 8015962:	bf00      	nop
 8015964:	3708      	adds	r7, #8
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop
 801596c:	24001c8c 	.word	0x24001c8c
 8015970:	24001cb8 	.word	0x24001cb8
 8015974:	24001ca0 	.word	0x24001ca0

08015978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015986:	2b00      	cmp	r3, #0
 8015988:	d108      	bne.n	801599c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801598e:	4618      	mov	r0, r3
 8015990:	f000 ffc6 	bl	8016920 <vPortFree>
				vPortFree( pxTCB );
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f000 ffc3 	bl	8016920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801599a:	e018      	b.n	80159ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159a2:	2b01      	cmp	r3, #1
 80159a4:	d103      	bne.n	80159ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f000 ffba 	bl	8016920 <vPortFree>
	}
 80159ac:	e00f      	b.n	80159ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159b4:	2b02      	cmp	r3, #2
 80159b6:	d00a      	beq.n	80159ce <prvDeleteTCB+0x56>
	__asm volatile
 80159b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159bc:	f383 8811 	msr	BASEPRI, r3
 80159c0:	f3bf 8f6f 	isb	sy
 80159c4:	f3bf 8f4f 	dsb	sy
 80159c8:	60fb      	str	r3, [r7, #12]
}
 80159ca:	bf00      	nop
 80159cc:	e7fe      	b.n	80159cc <prvDeleteTCB+0x54>
	}
 80159ce:	bf00      	nop
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
	...

080159d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159de:	4b0c      	ldr	r3, [pc, #48]	; (8015a10 <prvResetNextTaskUnblockTime+0x38>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d104      	bne.n	80159f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80159e8:	4b0a      	ldr	r3, [pc, #40]	; (8015a14 <prvResetNextTaskUnblockTime+0x3c>)
 80159ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80159f0:	e008      	b.n	8015a04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159f2:	4b07      	ldr	r3, [pc, #28]	; (8015a10 <prvResetNextTaskUnblockTime+0x38>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	68db      	ldr	r3, [r3, #12]
 80159f8:	68db      	ldr	r3, [r3, #12]
 80159fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	4a04      	ldr	r2, [pc, #16]	; (8015a14 <prvResetNextTaskUnblockTime+0x3c>)
 8015a02:	6013      	str	r3, [r2, #0]
}
 8015a04:	bf00      	nop
 8015a06:	370c      	adds	r7, #12
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0e:	4770      	bx	lr
 8015a10:	24001c70 	.word	0x24001c70
 8015a14:	24001cd8 	.word	0x24001cd8

08015a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015a18:	b480      	push	{r7}
 8015a1a:	b083      	sub	sp, #12
 8015a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015a1e:	4b0b      	ldr	r3, [pc, #44]	; (8015a4c <xTaskGetSchedulerState+0x34>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d102      	bne.n	8015a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015a26:	2301      	movs	r3, #1
 8015a28:	607b      	str	r3, [r7, #4]
 8015a2a:	e008      	b.n	8015a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a2c:	4b08      	ldr	r3, [pc, #32]	; (8015a50 <xTaskGetSchedulerState+0x38>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d102      	bne.n	8015a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015a34:	2302      	movs	r3, #2
 8015a36:	607b      	str	r3, [r7, #4]
 8015a38:	e001      	b.n	8015a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015a3e:	687b      	ldr	r3, [r7, #4]
	}
 8015a40:	4618      	mov	r0, r3
 8015a42:	370c      	adds	r7, #12
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr
 8015a4c:	24001cc4 	.word	0x24001cc4
 8015a50:	24001ce0 	.word	0x24001ce0

08015a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b086      	sub	sp, #24
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015a60:	2300      	movs	r3, #0
 8015a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d056      	beq.n	8015b18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015a6a:	4b2e      	ldr	r3, [pc, #184]	; (8015b24 <xTaskPriorityDisinherit+0xd0>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	693a      	ldr	r2, [r7, #16]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d00a      	beq.n	8015a8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a78:	f383 8811 	msr	BASEPRI, r3
 8015a7c:	f3bf 8f6f 	isb	sy
 8015a80:	f3bf 8f4f 	dsb	sy
 8015a84:	60fb      	str	r3, [r7, #12]
}
 8015a86:	bf00      	nop
 8015a88:	e7fe      	b.n	8015a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d10a      	bne.n	8015aa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a96:	f383 8811 	msr	BASEPRI, r3
 8015a9a:	f3bf 8f6f 	isb	sy
 8015a9e:	f3bf 8f4f 	dsb	sy
 8015aa2:	60bb      	str	r3, [r7, #8]
}
 8015aa4:	bf00      	nop
 8015aa6:	e7fe      	b.n	8015aa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015aac:	1e5a      	subs	r2, r3, #1
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d02c      	beq.n	8015b18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d128      	bne.n	8015b18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	3304      	adds	r3, #4
 8015aca:	4618      	mov	r0, r3
 8015acc:	f7fe f9f6 	bl	8013ebc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015adc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ae8:	4b0f      	ldr	r3, [pc, #60]	; (8015b28 <xTaskPriorityDisinherit+0xd4>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d903      	bls.n	8015af8 <xTaskPriorityDisinherit+0xa4>
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015af4:	4a0c      	ldr	r2, [pc, #48]	; (8015b28 <xTaskPriorityDisinherit+0xd4>)
 8015af6:	6013      	str	r3, [r2, #0]
 8015af8:	693b      	ldr	r3, [r7, #16]
 8015afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015afc:	4613      	mov	r3, r2
 8015afe:	009b      	lsls	r3, r3, #2
 8015b00:	4413      	add	r3, r2
 8015b02:	009b      	lsls	r3, r3, #2
 8015b04:	4a09      	ldr	r2, [pc, #36]	; (8015b2c <xTaskPriorityDisinherit+0xd8>)
 8015b06:	441a      	add	r2, r3
 8015b08:	693b      	ldr	r3, [r7, #16]
 8015b0a:	3304      	adds	r3, #4
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	4610      	mov	r0, r2
 8015b10:	f7fe f977 	bl	8013e02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015b14:	2301      	movs	r3, #1
 8015b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015b18:	697b      	ldr	r3, [r7, #20]
	}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3718      	adds	r7, #24
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	240017e4 	.word	0x240017e4
 8015b28:	24001cc0 	.word	0x24001cc0
 8015b2c:	240017e8 	.word	0x240017e8

08015b30 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015b30:	b480      	push	{r7}
 8015b32:	b083      	sub	sp, #12
 8015b34:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015b36:	4b09      	ldr	r3, [pc, #36]	; (8015b5c <uxTaskResetEventItemValue+0x2c>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	699b      	ldr	r3, [r3, #24]
 8015b3c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b3e:	4b07      	ldr	r3, [pc, #28]	; (8015b5c <uxTaskResetEventItemValue+0x2c>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b44:	4b05      	ldr	r3, [pc, #20]	; (8015b5c <uxTaskResetEventItemValue+0x2c>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015b4c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015b4e:	687b      	ldr	r3, [r7, #4]
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr
 8015b5c:	240017e4 	.word	0x240017e4

08015b60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b084      	sub	sp, #16
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015b6a:	4b21      	ldr	r3, [pc, #132]	; (8015bf0 <prvAddCurrentTaskToDelayedList+0x90>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b70:	4b20      	ldr	r3, [pc, #128]	; (8015bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	3304      	adds	r3, #4
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7fe f9a0 	bl	8013ebc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b82:	d10a      	bne.n	8015b9a <prvAddCurrentTaskToDelayedList+0x3a>
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d007      	beq.n	8015b9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b8a:	4b1a      	ldr	r3, [pc, #104]	; (8015bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	3304      	adds	r3, #4
 8015b90:	4619      	mov	r1, r3
 8015b92:	4819      	ldr	r0, [pc, #100]	; (8015bf8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015b94:	f7fe f935 	bl	8013e02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015b98:	e026      	b.n	8015be8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015b9a:	68fa      	ldr	r2, [r7, #12]
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	4413      	add	r3, r2
 8015ba0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015ba2:	4b14      	ldr	r3, [pc, #80]	; (8015bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	68ba      	ldr	r2, [r7, #8]
 8015ba8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015baa:	68ba      	ldr	r2, [r7, #8]
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d209      	bcs.n	8015bc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bb2:	4b12      	ldr	r3, [pc, #72]	; (8015bfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	4b0f      	ldr	r3, [pc, #60]	; (8015bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	4610      	mov	r0, r2
 8015bc0:	f7fe f943 	bl	8013e4a <vListInsert>
}
 8015bc4:	e010      	b.n	8015be8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bc6:	4b0e      	ldr	r3, [pc, #56]	; (8015c00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	4b0a      	ldr	r3, [pc, #40]	; (8015bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	3304      	adds	r3, #4
 8015bd0:	4619      	mov	r1, r3
 8015bd2:	4610      	mov	r0, r2
 8015bd4:	f7fe f939 	bl	8013e4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015bd8:	4b0a      	ldr	r3, [pc, #40]	; (8015c04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	68ba      	ldr	r2, [r7, #8]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d202      	bcs.n	8015be8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015be2:	4a08      	ldr	r2, [pc, #32]	; (8015c04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	6013      	str	r3, [r2, #0]
}
 8015be8:	bf00      	nop
 8015bea:	3710      	adds	r7, #16
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	24001cbc 	.word	0x24001cbc
 8015bf4:	240017e4 	.word	0x240017e4
 8015bf8:	24001ca4 	.word	0x24001ca4
 8015bfc:	24001c74 	.word	0x24001c74
 8015c00:	24001c70 	.word	0x24001c70
 8015c04:	24001cd8 	.word	0x24001cd8

08015c08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b08a      	sub	sp, #40	; 0x28
 8015c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015c12:	f000 fb07 	bl	8016224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015c16:	4b1c      	ldr	r3, [pc, #112]	; (8015c88 <xTimerCreateTimerTask+0x80>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d021      	beq.n	8015c62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015c22:	2300      	movs	r3, #0
 8015c24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015c26:	1d3a      	adds	r2, r7, #4
 8015c28:	f107 0108 	add.w	r1, r7, #8
 8015c2c:	f107 030c 	add.w	r3, r7, #12
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7fd fe33 	bl	801389c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	68fa      	ldr	r2, [r7, #12]
 8015c3c:	9202      	str	r2, [sp, #8]
 8015c3e:	9301      	str	r3, [sp, #4]
 8015c40:	2302      	movs	r3, #2
 8015c42:	9300      	str	r3, [sp, #0]
 8015c44:	2300      	movs	r3, #0
 8015c46:	460a      	mov	r2, r1
 8015c48:	4910      	ldr	r1, [pc, #64]	; (8015c8c <xTimerCreateTimerTask+0x84>)
 8015c4a:	4811      	ldr	r0, [pc, #68]	; (8015c90 <xTimerCreateTimerTask+0x88>)
 8015c4c:	f7fe ff06 	bl	8014a5c <xTaskCreateStatic>
 8015c50:	4603      	mov	r3, r0
 8015c52:	4a10      	ldr	r2, [pc, #64]	; (8015c94 <xTimerCreateTimerTask+0x8c>)
 8015c54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015c56:	4b0f      	ldr	r3, [pc, #60]	; (8015c94 <xTimerCreateTimerTask+0x8c>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d001      	beq.n	8015c62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015c5e:	2301      	movs	r3, #1
 8015c60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d10a      	bne.n	8015c7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6c:	f383 8811 	msr	BASEPRI, r3
 8015c70:	f3bf 8f6f 	isb	sy
 8015c74:	f3bf 8f4f 	dsb	sy
 8015c78:	613b      	str	r3, [r7, #16]
}
 8015c7a:	bf00      	nop
 8015c7c:	e7fe      	b.n	8015c7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015c7e:	697b      	ldr	r3, [r7, #20]
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3718      	adds	r7, #24
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}
 8015c88:	24001d14 	.word	0x24001d14
 8015c8c:	0801788c 	.word	0x0801788c
 8015c90:	08015dcd 	.word	0x08015dcd
 8015c94:	24001d18 	.word	0x24001d18

08015c98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b08a      	sub	sp, #40	; 0x28
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	60b9      	str	r1, [r7, #8]
 8015ca2:	607a      	str	r2, [r7, #4]
 8015ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d10a      	bne.n	8015cc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb4:	f383 8811 	msr	BASEPRI, r3
 8015cb8:	f3bf 8f6f 	isb	sy
 8015cbc:	f3bf 8f4f 	dsb	sy
 8015cc0:	623b      	str	r3, [r7, #32]
}
 8015cc2:	bf00      	nop
 8015cc4:	e7fe      	b.n	8015cc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015cc6:	4b1a      	ldr	r3, [pc, #104]	; (8015d30 <xTimerGenericCommand+0x98>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d02a      	beq.n	8015d24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015cda:	68bb      	ldr	r3, [r7, #8]
 8015cdc:	2b05      	cmp	r3, #5
 8015cde:	dc18      	bgt.n	8015d12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015ce0:	f7ff fe9a 	bl	8015a18 <xTaskGetSchedulerState>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	2b02      	cmp	r3, #2
 8015ce8:	d109      	bne.n	8015cfe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015cea:	4b11      	ldr	r3, [pc, #68]	; (8015d30 <xTimerGenericCommand+0x98>)
 8015cec:	6818      	ldr	r0, [r3, #0]
 8015cee:	f107 0110 	add.w	r1, r7, #16
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cf6:	f7fe fa49 	bl	801418c <xQueueGenericSend>
 8015cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8015cfc:	e012      	b.n	8015d24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015cfe:	4b0c      	ldr	r3, [pc, #48]	; (8015d30 <xTimerGenericCommand+0x98>)
 8015d00:	6818      	ldr	r0, [r3, #0]
 8015d02:	f107 0110 	add.w	r1, r7, #16
 8015d06:	2300      	movs	r3, #0
 8015d08:	2200      	movs	r2, #0
 8015d0a:	f7fe fa3f 	bl	801418c <xQueueGenericSend>
 8015d0e:	6278      	str	r0, [r7, #36]	; 0x24
 8015d10:	e008      	b.n	8015d24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015d12:	4b07      	ldr	r3, [pc, #28]	; (8015d30 <xTimerGenericCommand+0x98>)
 8015d14:	6818      	ldr	r0, [r3, #0]
 8015d16:	f107 0110 	add.w	r1, r7, #16
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	683a      	ldr	r2, [r7, #0]
 8015d1e:	f7fe fb33 	bl	8014388 <xQueueGenericSendFromISR>
 8015d22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3728      	adds	r7, #40	; 0x28
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	24001d14 	.word	0x24001d14

08015d34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b088      	sub	sp, #32
 8015d38:	af02      	add	r7, sp, #8
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d3e:	4b22      	ldr	r3, [pc, #136]	; (8015dc8 <prvProcessExpiredTimer+0x94>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	68db      	ldr	r3, [r3, #12]
 8015d44:	68db      	ldr	r3, [r3, #12]
 8015d46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	3304      	adds	r3, #4
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7fe f8b5 	bl	8013ebc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d58:	f003 0304 	and.w	r3, r3, #4
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d022      	beq.n	8015da6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	699a      	ldr	r2, [r3, #24]
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	18d1      	adds	r1, r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	683a      	ldr	r2, [r7, #0]
 8015d6c:	6978      	ldr	r0, [r7, #20]
 8015d6e:	f000 f8d1 	bl	8015f14 <prvInsertTimerInActiveList>
 8015d72:	4603      	mov	r3, r0
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d01f      	beq.n	8015db8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015d78:	2300      	movs	r3, #0
 8015d7a:	9300      	str	r3, [sp, #0]
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	687a      	ldr	r2, [r7, #4]
 8015d80:	2100      	movs	r1, #0
 8015d82:	6978      	ldr	r0, [r7, #20]
 8015d84:	f7ff ff88 	bl	8015c98 <xTimerGenericCommand>
 8015d88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d113      	bne.n	8015db8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d94:	f383 8811 	msr	BASEPRI, r3
 8015d98:	f3bf 8f6f 	isb	sy
 8015d9c:	f3bf 8f4f 	dsb	sy
 8015da0:	60fb      	str	r3, [r7, #12]
}
 8015da2:	bf00      	nop
 8015da4:	e7fe      	b.n	8015da4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015da6:	697b      	ldr	r3, [r7, #20]
 8015da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015dac:	f023 0301 	bic.w	r3, r3, #1
 8015db0:	b2da      	uxtb	r2, r3
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	6a1b      	ldr	r3, [r3, #32]
 8015dbc:	6978      	ldr	r0, [r7, #20]
 8015dbe:	4798      	blx	r3
}
 8015dc0:	bf00      	nop
 8015dc2:	3718      	adds	r7, #24
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}
 8015dc8:	24001d0c 	.word	0x24001d0c

08015dcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b084      	sub	sp, #16
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015dd4:	f107 0308 	add.w	r3, r7, #8
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f000 f857 	bl	8015e8c <prvGetNextExpireTime>
 8015dde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	4619      	mov	r1, r3
 8015de4:	68f8      	ldr	r0, [r7, #12]
 8015de6:	f000 f803 	bl	8015df0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015dea:	f000 f8d5 	bl	8015f98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015dee:	e7f1      	b.n	8015dd4 <prvTimerTask+0x8>

08015df0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b084      	sub	sp, #16
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
 8015df8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015dfa:	f7ff f985 	bl	8015108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015dfe:	f107 0308 	add.w	r3, r7, #8
 8015e02:	4618      	mov	r0, r3
 8015e04:	f000 f866 	bl	8015ed4 <prvSampleTimeNow>
 8015e08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d130      	bne.n	8015e72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d10a      	bne.n	8015e2c <prvProcessTimerOrBlockTask+0x3c>
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	429a      	cmp	r2, r3
 8015e1c:	d806      	bhi.n	8015e2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015e1e:	f7ff f981 	bl	8015124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015e22:	68f9      	ldr	r1, [r7, #12]
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f7ff ff85 	bl	8015d34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015e2a:	e024      	b.n	8015e76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d008      	beq.n	8015e44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015e32:	4b13      	ldr	r3, [pc, #76]	; (8015e80 <prvProcessTimerOrBlockTask+0x90>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d101      	bne.n	8015e40 <prvProcessTimerOrBlockTask+0x50>
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	e000      	b.n	8015e42 <prvProcessTimerOrBlockTask+0x52>
 8015e40:	2300      	movs	r3, #0
 8015e42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015e44:	4b0f      	ldr	r3, [pc, #60]	; (8015e84 <prvProcessTimerOrBlockTask+0x94>)
 8015e46:	6818      	ldr	r0, [r3, #0]
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	1ad3      	subs	r3, r2, r3
 8015e4e:	683a      	ldr	r2, [r7, #0]
 8015e50:	4619      	mov	r1, r3
 8015e52:	f7fe fdcf 	bl	80149f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015e56:	f7ff f965 	bl	8015124 <xTaskResumeAll>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d10a      	bne.n	8015e76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015e60:	4b09      	ldr	r3, [pc, #36]	; (8015e88 <prvProcessTimerOrBlockTask+0x98>)
 8015e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e66:	601a      	str	r2, [r3, #0]
 8015e68:	f3bf 8f4f 	dsb	sy
 8015e6c:	f3bf 8f6f 	isb	sy
}
 8015e70:	e001      	b.n	8015e76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015e72:	f7ff f957 	bl	8015124 <xTaskResumeAll>
}
 8015e76:	bf00      	nop
 8015e78:	3710      	adds	r7, #16
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	24001d10 	.word	0x24001d10
 8015e84:	24001d14 	.word	0x24001d14
 8015e88:	e000ed04 	.word	0xe000ed04

08015e8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b085      	sub	sp, #20
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015e94:	4b0e      	ldr	r3, [pc, #56]	; (8015ed0 <prvGetNextExpireTime+0x44>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d101      	bne.n	8015ea2 <prvGetNextExpireTime+0x16>
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	e000      	b.n	8015ea4 <prvGetNextExpireTime+0x18>
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d105      	bne.n	8015ebc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015eb0:	4b07      	ldr	r3, [pc, #28]	; (8015ed0 <prvGetNextExpireTime+0x44>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	68db      	ldr	r3, [r3, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	60fb      	str	r3, [r7, #12]
 8015eba:	e001      	b.n	8015ec0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3714      	adds	r7, #20
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ecc:	4770      	bx	lr
 8015ece:	bf00      	nop
 8015ed0:	24001d0c 	.word	0x24001d0c

08015ed4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015edc:	f7ff f9c0 	bl	8015260 <xTaskGetTickCount>
 8015ee0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015ee2:	4b0b      	ldr	r3, [pc, #44]	; (8015f10 <prvSampleTimeNow+0x3c>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	68fa      	ldr	r2, [r7, #12]
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d205      	bcs.n	8015ef8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015eec:	f000 f936 	bl	801615c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2201      	movs	r2, #1
 8015ef4:	601a      	str	r2, [r3, #0]
 8015ef6:	e002      	b.n	8015efe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2200      	movs	r2, #0
 8015efc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015efe:	4a04      	ldr	r2, [pc, #16]	; (8015f10 <prvSampleTimeNow+0x3c>)
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015f04:	68fb      	ldr	r3, [r7, #12]
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3710      	adds	r7, #16
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	24001d1c 	.word	0x24001d1c

08015f14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b086      	sub	sp, #24
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	607a      	str	r2, [r7, #4]
 8015f20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015f22:	2300      	movs	r3, #0
 8015f24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	68ba      	ldr	r2, [r7, #8]
 8015f2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	68fa      	ldr	r2, [r7, #12]
 8015f30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d812      	bhi.n	8015f60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f3a:	687a      	ldr	r2, [r7, #4]
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	1ad2      	subs	r2, r2, r3
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	699b      	ldr	r3, [r3, #24]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d302      	bcc.n	8015f4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015f48:	2301      	movs	r3, #1
 8015f4a:	617b      	str	r3, [r7, #20]
 8015f4c:	e01b      	b.n	8015f86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015f4e:	4b10      	ldr	r3, [pc, #64]	; (8015f90 <prvInsertTimerInActiveList+0x7c>)
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	3304      	adds	r3, #4
 8015f56:	4619      	mov	r1, r3
 8015f58:	4610      	mov	r0, r2
 8015f5a:	f7fd ff76 	bl	8013e4a <vListInsert>
 8015f5e:	e012      	b.n	8015f86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015f60:	687a      	ldr	r2, [r7, #4]
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d206      	bcs.n	8015f76 <prvInsertTimerInActiveList+0x62>
 8015f68:	68ba      	ldr	r2, [r7, #8]
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	429a      	cmp	r2, r3
 8015f6e:	d302      	bcc.n	8015f76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015f70:	2301      	movs	r3, #1
 8015f72:	617b      	str	r3, [r7, #20]
 8015f74:	e007      	b.n	8015f86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015f76:	4b07      	ldr	r3, [pc, #28]	; (8015f94 <prvInsertTimerInActiveList+0x80>)
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	3304      	adds	r3, #4
 8015f7e:	4619      	mov	r1, r3
 8015f80:	4610      	mov	r0, r2
 8015f82:	f7fd ff62 	bl	8013e4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015f86:	697b      	ldr	r3, [r7, #20]
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3718      	adds	r7, #24
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	24001d10 	.word	0x24001d10
 8015f94:	24001d0c 	.word	0x24001d0c

08015f98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b08e      	sub	sp, #56	; 0x38
 8015f9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015f9e:	e0ca      	b.n	8016136 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	da18      	bge.n	8015fd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015fa6:	1d3b      	adds	r3, r7, #4
 8015fa8:	3304      	adds	r3, #4
 8015faa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d10a      	bne.n	8015fc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb6:	f383 8811 	msr	BASEPRI, r3
 8015fba:	f3bf 8f6f 	isb	sy
 8015fbe:	f3bf 8f4f 	dsb	sy
 8015fc2:	61fb      	str	r3, [r7, #28]
}
 8015fc4:	bf00      	nop
 8015fc6:	e7fe      	b.n	8015fc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fce:	6850      	ldr	r0, [r2, #4]
 8015fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fd2:	6892      	ldr	r2, [r2, #8]
 8015fd4:	4611      	mov	r1, r2
 8015fd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f2c0 80aa 	blt.w	8016134 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe6:	695b      	ldr	r3, [r3, #20]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d004      	beq.n	8015ff6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fee:	3304      	adds	r3, #4
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7fd ff63 	bl	8013ebc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ff6:	463b      	mov	r3, r7
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7ff ff6b 	bl	8015ed4 <prvSampleTimeNow>
 8015ffe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2b09      	cmp	r3, #9
 8016004:	f200 8097 	bhi.w	8016136 <prvProcessReceivedCommands+0x19e>
 8016008:	a201      	add	r2, pc, #4	; (adr r2, 8016010 <prvProcessReceivedCommands+0x78>)
 801600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801600e:	bf00      	nop
 8016010:	08016039 	.word	0x08016039
 8016014:	08016039 	.word	0x08016039
 8016018:	08016039 	.word	0x08016039
 801601c:	080160ad 	.word	0x080160ad
 8016020:	080160c1 	.word	0x080160c1
 8016024:	0801610b 	.word	0x0801610b
 8016028:	08016039 	.word	0x08016039
 801602c:	08016039 	.word	0x08016039
 8016030:	080160ad 	.word	0x080160ad
 8016034:	080160c1 	.word	0x080160c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801603e:	f043 0301 	orr.w	r3, r3, #1
 8016042:	b2da      	uxtb	r2, r3
 8016044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801604a:	68ba      	ldr	r2, [r7, #8]
 801604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604e:	699b      	ldr	r3, [r3, #24]
 8016050:	18d1      	adds	r1, r2, r3
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016058:	f7ff ff5c 	bl	8015f14 <prvInsertTimerInActiveList>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d069      	beq.n	8016136 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016064:	6a1b      	ldr	r3, [r3, #32]
 8016066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016068:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801606c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016070:	f003 0304 	and.w	r3, r3, #4
 8016074:	2b00      	cmp	r3, #0
 8016076:	d05e      	beq.n	8016136 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016078:	68ba      	ldr	r2, [r7, #8]
 801607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607c:	699b      	ldr	r3, [r3, #24]
 801607e:	441a      	add	r2, r3
 8016080:	2300      	movs	r3, #0
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	2300      	movs	r3, #0
 8016086:	2100      	movs	r1, #0
 8016088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801608a:	f7ff fe05 	bl	8015c98 <xTimerGenericCommand>
 801608e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016090:	6a3b      	ldr	r3, [r7, #32]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d14f      	bne.n	8016136 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8016096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801609a:	f383 8811 	msr	BASEPRI, r3
 801609e:	f3bf 8f6f 	isb	sy
 80160a2:	f3bf 8f4f 	dsb	sy
 80160a6:	61bb      	str	r3, [r7, #24]
}
 80160a8:	bf00      	nop
 80160aa:	e7fe      	b.n	80160aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80160ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80160b2:	f023 0301 	bic.w	r3, r3, #1
 80160b6:	b2da      	uxtb	r2, r3
 80160b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80160be:	e03a      	b.n	8016136 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80160c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80160c6:	f043 0301 	orr.w	r3, r3, #1
 80160ca:	b2da      	uxtb	r2, r3
 80160cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80160d2:	68ba      	ldr	r2, [r7, #8]
 80160d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80160d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160da:	699b      	ldr	r3, [r3, #24]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d10a      	bne.n	80160f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80160e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e4:	f383 8811 	msr	BASEPRI, r3
 80160e8:	f3bf 8f6f 	isb	sy
 80160ec:	f3bf 8f4f 	dsb	sy
 80160f0:	617b      	str	r3, [r7, #20]
}
 80160f2:	bf00      	nop
 80160f4:	e7fe      	b.n	80160f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80160f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f8:	699a      	ldr	r2, [r3, #24]
 80160fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fc:	18d1      	adds	r1, r2, r3
 80160fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016104:	f7ff ff06 	bl	8015f14 <prvInsertTimerInActiveList>
					break;
 8016108:	e015      	b.n	8016136 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016110:	f003 0302 	and.w	r3, r3, #2
 8016114:	2b00      	cmp	r3, #0
 8016116:	d103      	bne.n	8016120 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801611a:	f000 fc01 	bl	8016920 <vPortFree>
 801611e:	e00a      	b.n	8016136 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016126:	f023 0301 	bic.w	r3, r3, #1
 801612a:	b2da      	uxtb	r2, r3
 801612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016132:	e000      	b.n	8016136 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016134:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016136:	4b08      	ldr	r3, [pc, #32]	; (8016158 <prvProcessReceivedCommands+0x1c0>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	1d39      	adds	r1, r7, #4
 801613c:	2200      	movs	r2, #0
 801613e:	4618      	mov	r0, r3
 8016140:	f7fe f9be 	bl	80144c0 <xQueueReceive>
 8016144:	4603      	mov	r3, r0
 8016146:	2b00      	cmp	r3, #0
 8016148:	f47f af2a 	bne.w	8015fa0 <prvProcessReceivedCommands+0x8>
	}
}
 801614c:	bf00      	nop
 801614e:	bf00      	nop
 8016150:	3730      	adds	r7, #48	; 0x30
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}
 8016156:	bf00      	nop
 8016158:	24001d14 	.word	0x24001d14

0801615c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b088      	sub	sp, #32
 8016160:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016162:	e048      	b.n	80161f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016164:	4b2d      	ldr	r3, [pc, #180]	; (801621c <prvSwitchTimerLists+0xc0>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801616e:	4b2b      	ldr	r3, [pc, #172]	; (801621c <prvSwitchTimerLists+0xc0>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	68db      	ldr	r3, [r3, #12]
 8016174:	68db      	ldr	r3, [r3, #12]
 8016176:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	3304      	adds	r3, #4
 801617c:	4618      	mov	r0, r3
 801617e:	f7fd fe9d 	bl	8013ebc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	6a1b      	ldr	r3, [r3, #32]
 8016186:	68f8      	ldr	r0, [r7, #12]
 8016188:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016190:	f003 0304 	and.w	r3, r3, #4
 8016194:	2b00      	cmp	r3, #0
 8016196:	d02e      	beq.n	80161f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	699b      	ldr	r3, [r3, #24]
 801619c:	693a      	ldr	r2, [r7, #16]
 801619e:	4413      	add	r3, r2
 80161a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80161a2:	68ba      	ldr	r2, [r7, #8]
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d90e      	bls.n	80161c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	68ba      	ldr	r2, [r7, #8]
 80161ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	68fa      	ldr	r2, [r7, #12]
 80161b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80161b6:	4b19      	ldr	r3, [pc, #100]	; (801621c <prvSwitchTimerLists+0xc0>)
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	3304      	adds	r3, #4
 80161be:	4619      	mov	r1, r3
 80161c0:	4610      	mov	r0, r2
 80161c2:	f7fd fe42 	bl	8013e4a <vListInsert>
 80161c6:	e016      	b.n	80161f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80161c8:	2300      	movs	r3, #0
 80161ca:	9300      	str	r3, [sp, #0]
 80161cc:	2300      	movs	r3, #0
 80161ce:	693a      	ldr	r2, [r7, #16]
 80161d0:	2100      	movs	r1, #0
 80161d2:	68f8      	ldr	r0, [r7, #12]
 80161d4:	f7ff fd60 	bl	8015c98 <xTimerGenericCommand>
 80161d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d10a      	bne.n	80161f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80161e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e4:	f383 8811 	msr	BASEPRI, r3
 80161e8:	f3bf 8f6f 	isb	sy
 80161ec:	f3bf 8f4f 	dsb	sy
 80161f0:	603b      	str	r3, [r7, #0]
}
 80161f2:	bf00      	nop
 80161f4:	e7fe      	b.n	80161f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80161f6:	4b09      	ldr	r3, [pc, #36]	; (801621c <prvSwitchTimerLists+0xc0>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d1b1      	bne.n	8016164 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016200:	4b06      	ldr	r3, [pc, #24]	; (801621c <prvSwitchTimerLists+0xc0>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016206:	4b06      	ldr	r3, [pc, #24]	; (8016220 <prvSwitchTimerLists+0xc4>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4a04      	ldr	r2, [pc, #16]	; (801621c <prvSwitchTimerLists+0xc0>)
 801620c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801620e:	4a04      	ldr	r2, [pc, #16]	; (8016220 <prvSwitchTimerLists+0xc4>)
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	6013      	str	r3, [r2, #0]
}
 8016214:	bf00      	nop
 8016216:	3718      	adds	r7, #24
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	24001d0c 	.word	0x24001d0c
 8016220:	24001d10 	.word	0x24001d10

08016224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b082      	sub	sp, #8
 8016228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801622a:	f000 f98b 	bl	8016544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801622e:	4b15      	ldr	r3, [pc, #84]	; (8016284 <prvCheckForValidListAndQueue+0x60>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d120      	bne.n	8016278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016236:	4814      	ldr	r0, [pc, #80]	; (8016288 <prvCheckForValidListAndQueue+0x64>)
 8016238:	f7fd fdb6 	bl	8013da8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801623c:	4813      	ldr	r0, [pc, #76]	; (801628c <prvCheckForValidListAndQueue+0x68>)
 801623e:	f7fd fdb3 	bl	8013da8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016242:	4b13      	ldr	r3, [pc, #76]	; (8016290 <prvCheckForValidListAndQueue+0x6c>)
 8016244:	4a10      	ldr	r2, [pc, #64]	; (8016288 <prvCheckForValidListAndQueue+0x64>)
 8016246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016248:	4b12      	ldr	r3, [pc, #72]	; (8016294 <prvCheckForValidListAndQueue+0x70>)
 801624a:	4a10      	ldr	r2, [pc, #64]	; (801628c <prvCheckForValidListAndQueue+0x68>)
 801624c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801624e:	2300      	movs	r3, #0
 8016250:	9300      	str	r3, [sp, #0]
 8016252:	4b11      	ldr	r3, [pc, #68]	; (8016298 <prvCheckForValidListAndQueue+0x74>)
 8016254:	4a11      	ldr	r2, [pc, #68]	; (801629c <prvCheckForValidListAndQueue+0x78>)
 8016256:	2110      	movs	r1, #16
 8016258:	200a      	movs	r0, #10
 801625a:	f7fd fec1 	bl	8013fe0 <xQueueGenericCreateStatic>
 801625e:	4603      	mov	r3, r0
 8016260:	4a08      	ldr	r2, [pc, #32]	; (8016284 <prvCheckForValidListAndQueue+0x60>)
 8016262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016264:	4b07      	ldr	r3, [pc, #28]	; (8016284 <prvCheckForValidListAndQueue+0x60>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d005      	beq.n	8016278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801626c:	4b05      	ldr	r3, [pc, #20]	; (8016284 <prvCheckForValidListAndQueue+0x60>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	490b      	ldr	r1, [pc, #44]	; (80162a0 <prvCheckForValidListAndQueue+0x7c>)
 8016272:	4618      	mov	r0, r3
 8016274:	f7fe fb94 	bl	80149a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016278:	f000 f994 	bl	80165a4 <vPortExitCritical>
}
 801627c:	bf00      	nop
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}
 8016282:	bf00      	nop
 8016284:	24001d14 	.word	0x24001d14
 8016288:	24001ce4 	.word	0x24001ce4
 801628c:	24001cf8 	.word	0x24001cf8
 8016290:	24001d0c 	.word	0x24001d0c
 8016294:	24001d10 	.word	0x24001d10
 8016298:	24001dc0 	.word	0x24001dc0
 801629c:	24001d20 	.word	0x24001d20
 80162a0:	08017894 	.word	0x08017894

080162a4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b08a      	sub	sp, #40	; 0x28
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	607a      	str	r2, [r7, #4]
 80162b0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80162b2:	f06f 0301 	mvn.w	r3, #1
 80162b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80162c4:	4b06      	ldr	r3, [pc, #24]	; (80162e0 <xTimerPendFunctionCallFromISR+0x3c>)
 80162c6:	6818      	ldr	r0, [r3, #0]
 80162c8:	f107 0114 	add.w	r1, r7, #20
 80162cc:	2300      	movs	r3, #0
 80162ce:	683a      	ldr	r2, [r7, #0]
 80162d0:	f7fe f85a 	bl	8014388 <xQueueGenericSendFromISR>
 80162d4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80162d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80162d8:	4618      	mov	r0, r3
 80162da:	3728      	adds	r7, #40	; 0x28
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}
 80162e0:	24001d14 	.word	0x24001d14

080162e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80162e4:	b480      	push	{r7}
 80162e6:	b085      	sub	sp, #20
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	60f8      	str	r0, [r7, #12]
 80162ec:	60b9      	str	r1, [r7, #8]
 80162ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	3b04      	subs	r3, #4
 80162f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80162fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	3b04      	subs	r3, #4
 8016302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	f023 0201 	bic.w	r2, r3, #1
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	3b04      	subs	r3, #4
 8016312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016314:	4a0c      	ldr	r2, [pc, #48]	; (8016348 <pxPortInitialiseStack+0x64>)
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	3b14      	subs	r3, #20
 801631e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	3b04      	subs	r3, #4
 801632a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	f06f 0202 	mvn.w	r2, #2
 8016332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	3b20      	subs	r3, #32
 8016338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801633a:	68fb      	ldr	r3, [r7, #12]
}
 801633c:	4618      	mov	r0, r3
 801633e:	3714      	adds	r7, #20
 8016340:	46bd      	mov	sp, r7
 8016342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016346:	4770      	bx	lr
 8016348:	0801634d 	.word	0x0801634d

0801634c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801634c:	b480      	push	{r7}
 801634e:	b085      	sub	sp, #20
 8016350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016352:	2300      	movs	r3, #0
 8016354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016356:	4b12      	ldr	r3, [pc, #72]	; (80163a0 <prvTaskExitError+0x54>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801635e:	d00a      	beq.n	8016376 <prvTaskExitError+0x2a>
	__asm volatile
 8016360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016364:	f383 8811 	msr	BASEPRI, r3
 8016368:	f3bf 8f6f 	isb	sy
 801636c:	f3bf 8f4f 	dsb	sy
 8016370:	60fb      	str	r3, [r7, #12]
}
 8016372:	bf00      	nop
 8016374:	e7fe      	b.n	8016374 <prvTaskExitError+0x28>
	__asm volatile
 8016376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801637a:	f383 8811 	msr	BASEPRI, r3
 801637e:	f3bf 8f6f 	isb	sy
 8016382:	f3bf 8f4f 	dsb	sy
 8016386:	60bb      	str	r3, [r7, #8]
}
 8016388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801638a:	bf00      	nop
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d0fc      	beq.n	801638c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016392:	bf00      	nop
 8016394:	bf00      	nop
 8016396:	3714      	adds	r7, #20
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr
 80163a0:	2400009c 	.word	0x2400009c
	...

080163b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80163b0:	4b07      	ldr	r3, [pc, #28]	; (80163d0 <pxCurrentTCBConst2>)
 80163b2:	6819      	ldr	r1, [r3, #0]
 80163b4:	6808      	ldr	r0, [r1, #0]
 80163b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ba:	f380 8809 	msr	PSP, r0
 80163be:	f3bf 8f6f 	isb	sy
 80163c2:	f04f 0000 	mov.w	r0, #0
 80163c6:	f380 8811 	msr	BASEPRI, r0
 80163ca:	4770      	bx	lr
 80163cc:	f3af 8000 	nop.w

080163d0 <pxCurrentTCBConst2>:
 80163d0:	240017e4 	.word	0x240017e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80163d4:	bf00      	nop
 80163d6:	bf00      	nop

080163d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80163d8:	4808      	ldr	r0, [pc, #32]	; (80163fc <prvPortStartFirstTask+0x24>)
 80163da:	6800      	ldr	r0, [r0, #0]
 80163dc:	6800      	ldr	r0, [r0, #0]
 80163de:	f380 8808 	msr	MSP, r0
 80163e2:	f04f 0000 	mov.w	r0, #0
 80163e6:	f380 8814 	msr	CONTROL, r0
 80163ea:	b662      	cpsie	i
 80163ec:	b661      	cpsie	f
 80163ee:	f3bf 8f4f 	dsb	sy
 80163f2:	f3bf 8f6f 	isb	sy
 80163f6:	df00      	svc	0
 80163f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80163fa:	bf00      	nop
 80163fc:	e000ed08 	.word	0xe000ed08

08016400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b086      	sub	sp, #24
 8016404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016406:	4b46      	ldr	r3, [pc, #280]	; (8016520 <xPortStartScheduler+0x120>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	4a46      	ldr	r2, [pc, #280]	; (8016524 <xPortStartScheduler+0x124>)
 801640c:	4293      	cmp	r3, r2
 801640e:	d10a      	bne.n	8016426 <xPortStartScheduler+0x26>
	__asm volatile
 8016410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016414:	f383 8811 	msr	BASEPRI, r3
 8016418:	f3bf 8f6f 	isb	sy
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	613b      	str	r3, [r7, #16]
}
 8016422:	bf00      	nop
 8016424:	e7fe      	b.n	8016424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016426:	4b3e      	ldr	r3, [pc, #248]	; (8016520 <xPortStartScheduler+0x120>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4a3f      	ldr	r2, [pc, #252]	; (8016528 <xPortStartScheduler+0x128>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d10a      	bne.n	8016446 <xPortStartScheduler+0x46>
	__asm volatile
 8016430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016434:	f383 8811 	msr	BASEPRI, r3
 8016438:	f3bf 8f6f 	isb	sy
 801643c:	f3bf 8f4f 	dsb	sy
 8016440:	60fb      	str	r3, [r7, #12]
}
 8016442:	bf00      	nop
 8016444:	e7fe      	b.n	8016444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016446:	4b39      	ldr	r3, [pc, #228]	; (801652c <xPortStartScheduler+0x12c>)
 8016448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801644a:	697b      	ldr	r3, [r7, #20]
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	b2db      	uxtb	r3, r3
 8016450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	22ff      	movs	r2, #255	; 0xff
 8016456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	b2db      	uxtb	r3, r3
 801645e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016460:	78fb      	ldrb	r3, [r7, #3]
 8016462:	b2db      	uxtb	r3, r3
 8016464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016468:	b2da      	uxtb	r2, r3
 801646a:	4b31      	ldr	r3, [pc, #196]	; (8016530 <xPortStartScheduler+0x130>)
 801646c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801646e:	4b31      	ldr	r3, [pc, #196]	; (8016534 <xPortStartScheduler+0x134>)
 8016470:	2207      	movs	r2, #7
 8016472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016474:	e009      	b.n	801648a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016476:	4b2f      	ldr	r3, [pc, #188]	; (8016534 <xPortStartScheduler+0x134>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	3b01      	subs	r3, #1
 801647c:	4a2d      	ldr	r2, [pc, #180]	; (8016534 <xPortStartScheduler+0x134>)
 801647e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016480:	78fb      	ldrb	r3, [r7, #3]
 8016482:	b2db      	uxtb	r3, r3
 8016484:	005b      	lsls	r3, r3, #1
 8016486:	b2db      	uxtb	r3, r3
 8016488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801648a:	78fb      	ldrb	r3, [r7, #3]
 801648c:	b2db      	uxtb	r3, r3
 801648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016492:	2b80      	cmp	r3, #128	; 0x80
 8016494:	d0ef      	beq.n	8016476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016496:	4b27      	ldr	r3, [pc, #156]	; (8016534 <xPortStartScheduler+0x134>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	f1c3 0307 	rsb	r3, r3, #7
 801649e:	2b04      	cmp	r3, #4
 80164a0:	d00a      	beq.n	80164b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80164a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a6:	f383 8811 	msr	BASEPRI, r3
 80164aa:	f3bf 8f6f 	isb	sy
 80164ae:	f3bf 8f4f 	dsb	sy
 80164b2:	60bb      	str	r3, [r7, #8]
}
 80164b4:	bf00      	nop
 80164b6:	e7fe      	b.n	80164b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80164b8:	4b1e      	ldr	r3, [pc, #120]	; (8016534 <xPortStartScheduler+0x134>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	021b      	lsls	r3, r3, #8
 80164be:	4a1d      	ldr	r2, [pc, #116]	; (8016534 <xPortStartScheduler+0x134>)
 80164c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80164c2:	4b1c      	ldr	r3, [pc, #112]	; (8016534 <xPortStartScheduler+0x134>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80164ca:	4a1a      	ldr	r2, [pc, #104]	; (8016534 <xPortStartScheduler+0x134>)
 80164cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	b2da      	uxtb	r2, r3
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80164d6:	4b18      	ldr	r3, [pc, #96]	; (8016538 <xPortStartScheduler+0x138>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	4a17      	ldr	r2, [pc, #92]	; (8016538 <xPortStartScheduler+0x138>)
 80164dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80164e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80164e2:	4b15      	ldr	r3, [pc, #84]	; (8016538 <xPortStartScheduler+0x138>)
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	4a14      	ldr	r2, [pc, #80]	; (8016538 <xPortStartScheduler+0x138>)
 80164e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80164ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80164ee:	f000 f8dd 	bl	80166ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80164f2:	4b12      	ldr	r3, [pc, #72]	; (801653c <xPortStartScheduler+0x13c>)
 80164f4:	2200      	movs	r2, #0
 80164f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80164f8:	f000 f8fc 	bl	80166f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80164fc:	4b10      	ldr	r3, [pc, #64]	; (8016540 <xPortStartScheduler+0x140>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a0f      	ldr	r2, [pc, #60]	; (8016540 <xPortStartScheduler+0x140>)
 8016502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016508:	f7ff ff66 	bl	80163d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801650c:	f7fe ff7a 	bl	8015404 <vTaskSwitchContext>
	prvTaskExitError();
 8016510:	f7ff ff1c 	bl	801634c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016514:	2300      	movs	r3, #0
}
 8016516:	4618      	mov	r0, r3
 8016518:	3718      	adds	r7, #24
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	e000ed00 	.word	0xe000ed00
 8016524:	410fc271 	.word	0x410fc271
 8016528:	410fc270 	.word	0x410fc270
 801652c:	e000e400 	.word	0xe000e400
 8016530:	24001e10 	.word	0x24001e10
 8016534:	24001e14 	.word	0x24001e14
 8016538:	e000ed20 	.word	0xe000ed20
 801653c:	2400009c 	.word	0x2400009c
 8016540:	e000ef34 	.word	0xe000ef34

08016544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
	__asm volatile
 801654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654e:	f383 8811 	msr	BASEPRI, r3
 8016552:	f3bf 8f6f 	isb	sy
 8016556:	f3bf 8f4f 	dsb	sy
 801655a:	607b      	str	r3, [r7, #4]
}
 801655c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801655e:	4b0f      	ldr	r3, [pc, #60]	; (801659c <vPortEnterCritical+0x58>)
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	3301      	adds	r3, #1
 8016564:	4a0d      	ldr	r2, [pc, #52]	; (801659c <vPortEnterCritical+0x58>)
 8016566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016568:	4b0c      	ldr	r3, [pc, #48]	; (801659c <vPortEnterCritical+0x58>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	2b01      	cmp	r3, #1
 801656e:	d10f      	bne.n	8016590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016570:	4b0b      	ldr	r3, [pc, #44]	; (80165a0 <vPortEnterCritical+0x5c>)
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	b2db      	uxtb	r3, r3
 8016576:	2b00      	cmp	r3, #0
 8016578:	d00a      	beq.n	8016590 <vPortEnterCritical+0x4c>
	__asm volatile
 801657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801657e:	f383 8811 	msr	BASEPRI, r3
 8016582:	f3bf 8f6f 	isb	sy
 8016586:	f3bf 8f4f 	dsb	sy
 801658a:	603b      	str	r3, [r7, #0]
}
 801658c:	bf00      	nop
 801658e:	e7fe      	b.n	801658e <vPortEnterCritical+0x4a>
	}
}
 8016590:	bf00      	nop
 8016592:	370c      	adds	r7, #12
 8016594:	46bd      	mov	sp, r7
 8016596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659a:	4770      	bx	lr
 801659c:	2400009c 	.word	0x2400009c
 80165a0:	e000ed04 	.word	0xe000ed04

080165a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80165a4:	b480      	push	{r7}
 80165a6:	b083      	sub	sp, #12
 80165a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80165aa:	4b12      	ldr	r3, [pc, #72]	; (80165f4 <vPortExitCritical+0x50>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d10a      	bne.n	80165c8 <vPortExitCritical+0x24>
	__asm volatile
 80165b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b6:	f383 8811 	msr	BASEPRI, r3
 80165ba:	f3bf 8f6f 	isb	sy
 80165be:	f3bf 8f4f 	dsb	sy
 80165c2:	607b      	str	r3, [r7, #4]
}
 80165c4:	bf00      	nop
 80165c6:	e7fe      	b.n	80165c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80165c8:	4b0a      	ldr	r3, [pc, #40]	; (80165f4 <vPortExitCritical+0x50>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	3b01      	subs	r3, #1
 80165ce:	4a09      	ldr	r2, [pc, #36]	; (80165f4 <vPortExitCritical+0x50>)
 80165d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80165d2:	4b08      	ldr	r3, [pc, #32]	; (80165f4 <vPortExitCritical+0x50>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d105      	bne.n	80165e6 <vPortExitCritical+0x42>
 80165da:	2300      	movs	r3, #0
 80165dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	f383 8811 	msr	BASEPRI, r3
}
 80165e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80165e6:	bf00      	nop
 80165e8:	370c      	adds	r7, #12
 80165ea:	46bd      	mov	sp, r7
 80165ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f0:	4770      	bx	lr
 80165f2:	bf00      	nop
 80165f4:	2400009c 	.word	0x2400009c
	...

08016600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016600:	f3ef 8009 	mrs	r0, PSP
 8016604:	f3bf 8f6f 	isb	sy
 8016608:	4b15      	ldr	r3, [pc, #84]	; (8016660 <pxCurrentTCBConst>)
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	f01e 0f10 	tst.w	lr, #16
 8016610:	bf08      	it	eq
 8016612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801661a:	6010      	str	r0, [r2, #0]
 801661c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016624:	f380 8811 	msr	BASEPRI, r0
 8016628:	f3bf 8f4f 	dsb	sy
 801662c:	f3bf 8f6f 	isb	sy
 8016630:	f7fe fee8 	bl	8015404 <vTaskSwitchContext>
 8016634:	f04f 0000 	mov.w	r0, #0
 8016638:	f380 8811 	msr	BASEPRI, r0
 801663c:	bc09      	pop	{r0, r3}
 801663e:	6819      	ldr	r1, [r3, #0]
 8016640:	6808      	ldr	r0, [r1, #0]
 8016642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016646:	f01e 0f10 	tst.w	lr, #16
 801664a:	bf08      	it	eq
 801664c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016650:	f380 8809 	msr	PSP, r0
 8016654:	f3bf 8f6f 	isb	sy
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	f3af 8000 	nop.w

08016660 <pxCurrentTCBConst>:
 8016660:	240017e4 	.word	0x240017e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016664:	bf00      	nop
 8016666:	bf00      	nop

08016668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
	__asm volatile
 801666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016672:	f383 8811 	msr	BASEPRI, r3
 8016676:	f3bf 8f6f 	isb	sy
 801667a:	f3bf 8f4f 	dsb	sy
 801667e:	607b      	str	r3, [r7, #4]
}
 8016680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016682:	f7fe fdfd 	bl	8015280 <xTaskIncrementTick>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d003      	beq.n	8016694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801668c:	4b06      	ldr	r3, [pc, #24]	; (80166a8 <xPortSysTickHandler+0x40>)
 801668e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016692:	601a      	str	r2, [r3, #0]
 8016694:	2300      	movs	r3, #0
 8016696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	f383 8811 	msr	BASEPRI, r3
}
 801669e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80166a0:	bf00      	nop
 80166a2:	3708      	adds	r7, #8
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}
 80166a8:	e000ed04 	.word	0xe000ed04

080166ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80166ac:	b480      	push	{r7}
 80166ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80166b0:	4b0b      	ldr	r3, [pc, #44]	; (80166e0 <vPortSetupTimerInterrupt+0x34>)
 80166b2:	2200      	movs	r2, #0
 80166b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80166b6:	4b0b      	ldr	r3, [pc, #44]	; (80166e4 <vPortSetupTimerInterrupt+0x38>)
 80166b8:	2200      	movs	r2, #0
 80166ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80166bc:	4b0a      	ldr	r3, [pc, #40]	; (80166e8 <vPortSetupTimerInterrupt+0x3c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	4a0a      	ldr	r2, [pc, #40]	; (80166ec <vPortSetupTimerInterrupt+0x40>)
 80166c2:	fba2 2303 	umull	r2, r3, r2, r3
 80166c6:	099b      	lsrs	r3, r3, #6
 80166c8:	4a09      	ldr	r2, [pc, #36]	; (80166f0 <vPortSetupTimerInterrupt+0x44>)
 80166ca:	3b01      	subs	r3, #1
 80166cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80166ce:	4b04      	ldr	r3, [pc, #16]	; (80166e0 <vPortSetupTimerInterrupt+0x34>)
 80166d0:	2207      	movs	r2, #7
 80166d2:	601a      	str	r2, [r3, #0]
}
 80166d4:	bf00      	nop
 80166d6:	46bd      	mov	sp, r7
 80166d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166dc:	4770      	bx	lr
 80166de:	bf00      	nop
 80166e0:	e000e010 	.word	0xe000e010
 80166e4:	e000e018 	.word	0xe000e018
 80166e8:	2400008c 	.word	0x2400008c
 80166ec:	10624dd3 	.word	0x10624dd3
 80166f0:	e000e014 	.word	0xe000e014

080166f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80166f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016704 <vPortEnableVFP+0x10>
 80166f8:	6801      	ldr	r1, [r0, #0]
 80166fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80166fe:	6001      	str	r1, [r0, #0]
 8016700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016702:	bf00      	nop
 8016704:	e000ed88 	.word	0xe000ed88

08016708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016708:	b480      	push	{r7}
 801670a:	b085      	sub	sp, #20
 801670c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801670e:	f3ef 8305 	mrs	r3, IPSR
 8016712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2b0f      	cmp	r3, #15
 8016718:	d914      	bls.n	8016744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801671a:	4a17      	ldr	r2, [pc, #92]	; (8016778 <vPortValidateInterruptPriority+0x70>)
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	4413      	add	r3, r2
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016724:	4b15      	ldr	r3, [pc, #84]	; (801677c <vPortValidateInterruptPriority+0x74>)
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	7afa      	ldrb	r2, [r7, #11]
 801672a:	429a      	cmp	r2, r3
 801672c:	d20a      	bcs.n	8016744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016732:	f383 8811 	msr	BASEPRI, r3
 8016736:	f3bf 8f6f 	isb	sy
 801673a:	f3bf 8f4f 	dsb	sy
 801673e:	607b      	str	r3, [r7, #4]
}
 8016740:	bf00      	nop
 8016742:	e7fe      	b.n	8016742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016744:	4b0e      	ldr	r3, [pc, #56]	; (8016780 <vPortValidateInterruptPriority+0x78>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801674c:	4b0d      	ldr	r3, [pc, #52]	; (8016784 <vPortValidateInterruptPriority+0x7c>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	429a      	cmp	r2, r3
 8016752:	d90a      	bls.n	801676a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016758:	f383 8811 	msr	BASEPRI, r3
 801675c:	f3bf 8f6f 	isb	sy
 8016760:	f3bf 8f4f 	dsb	sy
 8016764:	603b      	str	r3, [r7, #0]
}
 8016766:	bf00      	nop
 8016768:	e7fe      	b.n	8016768 <vPortValidateInterruptPriority+0x60>
	}
 801676a:	bf00      	nop
 801676c:	3714      	adds	r7, #20
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop
 8016778:	e000e3f0 	.word	0xe000e3f0
 801677c:	24001e10 	.word	0x24001e10
 8016780:	e000ed0c 	.word	0xe000ed0c
 8016784:	24001e14 	.word	0x24001e14

08016788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b08a      	sub	sp, #40	; 0x28
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016790:	2300      	movs	r3, #0
 8016792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016794:	f7fe fcb8 	bl	8015108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016798:	4b5b      	ldr	r3, [pc, #364]	; (8016908 <pvPortMalloc+0x180>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d101      	bne.n	80167a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80167a0:	f000 f920 	bl	80169e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80167a4:	4b59      	ldr	r3, [pc, #356]	; (801690c <pvPortMalloc+0x184>)
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4013      	ands	r3, r2
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f040 8093 	bne.w	80168d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d01d      	beq.n	80167f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80167b8:	2208      	movs	r2, #8
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	4413      	add	r3, r2
 80167be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f003 0307 	and.w	r3, r3, #7
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d014      	beq.n	80167f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f023 0307 	bic.w	r3, r3, #7
 80167d0:	3308      	adds	r3, #8
 80167d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f003 0307 	and.w	r3, r3, #7
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d00a      	beq.n	80167f4 <pvPortMalloc+0x6c>
	__asm volatile
 80167de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167e2:	f383 8811 	msr	BASEPRI, r3
 80167e6:	f3bf 8f6f 	isb	sy
 80167ea:	f3bf 8f4f 	dsb	sy
 80167ee:	617b      	str	r3, [r7, #20]
}
 80167f0:	bf00      	nop
 80167f2:	e7fe      	b.n	80167f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d06e      	beq.n	80168d8 <pvPortMalloc+0x150>
 80167fa:	4b45      	ldr	r3, [pc, #276]	; (8016910 <pvPortMalloc+0x188>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	429a      	cmp	r2, r3
 8016802:	d869      	bhi.n	80168d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016804:	4b43      	ldr	r3, [pc, #268]	; (8016914 <pvPortMalloc+0x18c>)
 8016806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016808:	4b42      	ldr	r3, [pc, #264]	; (8016914 <pvPortMalloc+0x18c>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801680e:	e004      	b.n	801681a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	429a      	cmp	r2, r3
 8016822:	d903      	bls.n	801682c <pvPortMalloc+0xa4>
 8016824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d1f1      	bne.n	8016810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801682c:	4b36      	ldr	r3, [pc, #216]	; (8016908 <pvPortMalloc+0x180>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016832:	429a      	cmp	r2, r3
 8016834:	d050      	beq.n	80168d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016836:	6a3b      	ldr	r3, [r7, #32]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	2208      	movs	r2, #8
 801683c:	4413      	add	r3, r2
 801683e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016842:	681a      	ldr	r2, [r3, #0]
 8016844:	6a3b      	ldr	r3, [r7, #32]
 8016846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801684a:	685a      	ldr	r2, [r3, #4]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	1ad2      	subs	r2, r2, r3
 8016850:	2308      	movs	r3, #8
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	429a      	cmp	r2, r3
 8016856:	d91f      	bls.n	8016898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	4413      	add	r3, r2
 801685e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016860:	69bb      	ldr	r3, [r7, #24]
 8016862:	f003 0307 	and.w	r3, r3, #7
 8016866:	2b00      	cmp	r3, #0
 8016868:	d00a      	beq.n	8016880 <pvPortMalloc+0xf8>
	__asm volatile
 801686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801686e:	f383 8811 	msr	BASEPRI, r3
 8016872:	f3bf 8f6f 	isb	sy
 8016876:	f3bf 8f4f 	dsb	sy
 801687a:	613b      	str	r3, [r7, #16]
}
 801687c:	bf00      	nop
 801687e:	e7fe      	b.n	801687e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016882:	685a      	ldr	r2, [r3, #4]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	1ad2      	subs	r2, r2, r3
 8016888:	69bb      	ldr	r3, [r7, #24]
 801688a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016892:	69b8      	ldr	r0, [r7, #24]
 8016894:	f000 f908 	bl	8016aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016898:	4b1d      	ldr	r3, [pc, #116]	; (8016910 <pvPortMalloc+0x188>)
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	4a1b      	ldr	r2, [pc, #108]	; (8016910 <pvPortMalloc+0x188>)
 80168a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80168a6:	4b1a      	ldr	r3, [pc, #104]	; (8016910 <pvPortMalloc+0x188>)
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	4b1b      	ldr	r3, [pc, #108]	; (8016918 <pvPortMalloc+0x190>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d203      	bcs.n	80168ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80168b2:	4b17      	ldr	r3, [pc, #92]	; (8016910 <pvPortMalloc+0x188>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	4a18      	ldr	r2, [pc, #96]	; (8016918 <pvPortMalloc+0x190>)
 80168b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80168ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168bc:	685a      	ldr	r2, [r3, #4]
 80168be:	4b13      	ldr	r3, [pc, #76]	; (801690c <pvPortMalloc+0x184>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	431a      	orrs	r2, r3
 80168c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ca:	2200      	movs	r2, #0
 80168cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80168ce:	4b13      	ldr	r3, [pc, #76]	; (801691c <pvPortMalloc+0x194>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	3301      	adds	r3, #1
 80168d4:	4a11      	ldr	r2, [pc, #68]	; (801691c <pvPortMalloc+0x194>)
 80168d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80168d8:	f7fe fc24 	bl	8015124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80168dc:	69fb      	ldr	r3, [r7, #28]
 80168de:	f003 0307 	and.w	r3, r3, #7
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00a      	beq.n	80168fc <pvPortMalloc+0x174>
	__asm volatile
 80168e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ea:	f383 8811 	msr	BASEPRI, r3
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	f3bf 8f4f 	dsb	sy
 80168f6:	60fb      	str	r3, [r7, #12]
}
 80168f8:	bf00      	nop
 80168fa:	e7fe      	b.n	80168fa <pvPortMalloc+0x172>
	return pvReturn;
 80168fc:	69fb      	ldr	r3, [r7, #28]
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3728      	adds	r7, #40	; 0x28
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	24005a20 	.word	0x24005a20
 801690c:	24005a34 	.word	0x24005a34
 8016910:	24005a24 	.word	0x24005a24
 8016914:	24005a18 	.word	0x24005a18
 8016918:	24005a28 	.word	0x24005a28
 801691c:	24005a2c 	.word	0x24005a2c

08016920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b086      	sub	sp, #24
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d04d      	beq.n	80169ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016932:	2308      	movs	r3, #8
 8016934:	425b      	negs	r3, r3
 8016936:	697a      	ldr	r2, [r7, #20]
 8016938:	4413      	add	r3, r2
 801693a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	685a      	ldr	r2, [r3, #4]
 8016944:	4b24      	ldr	r3, [pc, #144]	; (80169d8 <vPortFree+0xb8>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4013      	ands	r3, r2
 801694a:	2b00      	cmp	r3, #0
 801694c:	d10a      	bne.n	8016964 <vPortFree+0x44>
	__asm volatile
 801694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016952:	f383 8811 	msr	BASEPRI, r3
 8016956:	f3bf 8f6f 	isb	sy
 801695a:	f3bf 8f4f 	dsb	sy
 801695e:	60fb      	str	r3, [r7, #12]
}
 8016960:	bf00      	nop
 8016962:	e7fe      	b.n	8016962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d00a      	beq.n	8016982 <vPortFree+0x62>
	__asm volatile
 801696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016970:	f383 8811 	msr	BASEPRI, r3
 8016974:	f3bf 8f6f 	isb	sy
 8016978:	f3bf 8f4f 	dsb	sy
 801697c:	60bb      	str	r3, [r7, #8]
}
 801697e:	bf00      	nop
 8016980:	e7fe      	b.n	8016980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016982:	693b      	ldr	r3, [r7, #16]
 8016984:	685a      	ldr	r2, [r3, #4]
 8016986:	4b14      	ldr	r3, [pc, #80]	; (80169d8 <vPortFree+0xb8>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	4013      	ands	r3, r2
 801698c:	2b00      	cmp	r3, #0
 801698e:	d01e      	beq.n	80169ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d11a      	bne.n	80169ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016998:	693b      	ldr	r3, [r7, #16]
 801699a:	685a      	ldr	r2, [r3, #4]
 801699c:	4b0e      	ldr	r3, [pc, #56]	; (80169d8 <vPortFree+0xb8>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	43db      	mvns	r3, r3
 80169a2:	401a      	ands	r2, r3
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80169a8:	f7fe fbae 	bl	8015108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	685a      	ldr	r2, [r3, #4]
 80169b0:	4b0a      	ldr	r3, [pc, #40]	; (80169dc <vPortFree+0xbc>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	4413      	add	r3, r2
 80169b6:	4a09      	ldr	r2, [pc, #36]	; (80169dc <vPortFree+0xbc>)
 80169b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80169ba:	6938      	ldr	r0, [r7, #16]
 80169bc:	f000 f874 	bl	8016aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80169c0:	4b07      	ldr	r3, [pc, #28]	; (80169e0 <vPortFree+0xc0>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	3301      	adds	r3, #1
 80169c6:	4a06      	ldr	r2, [pc, #24]	; (80169e0 <vPortFree+0xc0>)
 80169c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80169ca:	f7fe fbab 	bl	8015124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80169ce:	bf00      	nop
 80169d0:	3718      	adds	r7, #24
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	24005a34 	.word	0x24005a34
 80169dc:	24005a24 	.word	0x24005a24
 80169e0:	24005a30 	.word	0x24005a30

080169e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80169e4:	b480      	push	{r7}
 80169e6:	b085      	sub	sp, #20
 80169e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80169ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80169ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80169f0:	4b27      	ldr	r3, [pc, #156]	; (8016a90 <prvHeapInit+0xac>)
 80169f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	f003 0307 	and.w	r3, r3, #7
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d00c      	beq.n	8016a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	3307      	adds	r3, #7
 8016a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f023 0307 	bic.w	r3, r3, #7
 8016a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016a0c:	68ba      	ldr	r2, [r7, #8]
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	1ad3      	subs	r3, r2, r3
 8016a12:	4a1f      	ldr	r2, [pc, #124]	; (8016a90 <prvHeapInit+0xac>)
 8016a14:	4413      	add	r3, r2
 8016a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016a1c:	4a1d      	ldr	r2, [pc, #116]	; (8016a94 <prvHeapInit+0xb0>)
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016a22:	4b1c      	ldr	r3, [pc, #112]	; (8016a94 <prvHeapInit+0xb0>)
 8016a24:	2200      	movs	r2, #0
 8016a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	68ba      	ldr	r2, [r7, #8]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016a30:	2208      	movs	r2, #8
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	1a9b      	subs	r3, r3, r2
 8016a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	f023 0307 	bic.w	r3, r3, #7
 8016a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	4a15      	ldr	r2, [pc, #84]	; (8016a98 <prvHeapInit+0xb4>)
 8016a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016a46:	4b14      	ldr	r3, [pc, #80]	; (8016a98 <prvHeapInit+0xb4>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016a4e:	4b12      	ldr	r3, [pc, #72]	; (8016a98 <prvHeapInit+0xb4>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2200      	movs	r2, #0
 8016a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	68fa      	ldr	r2, [r7, #12]
 8016a5e:	1ad2      	subs	r2, r2, r3
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016a64:	4b0c      	ldr	r3, [pc, #48]	; (8016a98 <prvHeapInit+0xb4>)
 8016a66:	681a      	ldr	r2, [r3, #0]
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	4a0a      	ldr	r2, [pc, #40]	; (8016a9c <prvHeapInit+0xb8>)
 8016a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	685b      	ldr	r3, [r3, #4]
 8016a78:	4a09      	ldr	r2, [pc, #36]	; (8016aa0 <prvHeapInit+0xbc>)
 8016a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016a7c:	4b09      	ldr	r3, [pc, #36]	; (8016aa4 <prvHeapInit+0xc0>)
 8016a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016a82:	601a      	str	r2, [r3, #0]
}
 8016a84:	bf00      	nop
 8016a86:	3714      	adds	r7, #20
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr
 8016a90:	24001e18 	.word	0x24001e18
 8016a94:	24005a18 	.word	0x24005a18
 8016a98:	24005a20 	.word	0x24005a20
 8016a9c:	24005a28 	.word	0x24005a28
 8016aa0:	24005a24 	.word	0x24005a24
 8016aa4:	24005a34 	.word	0x24005a34

08016aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b085      	sub	sp, #20
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ab0:	4b28      	ldr	r3, [pc, #160]	; (8016b54 <prvInsertBlockIntoFreeList+0xac>)
 8016ab2:	60fb      	str	r3, [r7, #12]
 8016ab4:	e002      	b.n	8016abc <prvInsertBlockIntoFreeList+0x14>
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	60fb      	str	r3, [r7, #12]
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d8f7      	bhi.n	8016ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	68ba      	ldr	r2, [r7, #8]
 8016ad0:	4413      	add	r3, r2
 8016ad2:	687a      	ldr	r2, [r7, #4]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d108      	bne.n	8016aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	685a      	ldr	r2, [r3, #4]
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	441a      	add	r2, r3
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	685b      	ldr	r3, [r3, #4]
 8016af2:	68ba      	ldr	r2, [r7, #8]
 8016af4:	441a      	add	r2, r3
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d118      	bne.n	8016b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	681a      	ldr	r2, [r3, #0]
 8016b02:	4b15      	ldr	r3, [pc, #84]	; (8016b58 <prvInsertBlockIntoFreeList+0xb0>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d00d      	beq.n	8016b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	685a      	ldr	r2, [r3, #4]
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	441a      	add	r2, r3
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	601a      	str	r2, [r3, #0]
 8016b24:	e008      	b.n	8016b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016b26:	4b0c      	ldr	r3, [pc, #48]	; (8016b58 <prvInsertBlockIntoFreeList+0xb0>)
 8016b28:	681a      	ldr	r2, [r3, #0]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	601a      	str	r2, [r3, #0]
 8016b2e:	e003      	b.n	8016b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	681a      	ldr	r2, [r3, #0]
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016b38:	68fa      	ldr	r2, [r7, #12]
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d002      	beq.n	8016b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	687a      	ldr	r2, [r7, #4]
 8016b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016b46:	bf00      	nop
 8016b48:	3714      	adds	r7, #20
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b50:	4770      	bx	lr
 8016b52:	bf00      	nop
 8016b54:	24005a18 	.word	0x24005a18
 8016b58:	24005a20 	.word	0x24005a20

08016b5c <__errno>:
 8016b5c:	4b01      	ldr	r3, [pc, #4]	; (8016b64 <__errno+0x8>)
 8016b5e:	6818      	ldr	r0, [r3, #0]
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop
 8016b64:	240000a0 	.word	0x240000a0

08016b68 <__libc_init_array>:
 8016b68:	b570      	push	{r4, r5, r6, lr}
 8016b6a:	4d0d      	ldr	r5, [pc, #52]	; (8016ba0 <__libc_init_array+0x38>)
 8016b6c:	4c0d      	ldr	r4, [pc, #52]	; (8016ba4 <__libc_init_array+0x3c>)
 8016b6e:	1b64      	subs	r4, r4, r5
 8016b70:	10a4      	asrs	r4, r4, #2
 8016b72:	2600      	movs	r6, #0
 8016b74:	42a6      	cmp	r6, r4
 8016b76:	d109      	bne.n	8016b8c <__libc_init_array+0x24>
 8016b78:	4d0b      	ldr	r5, [pc, #44]	; (8016ba8 <__libc_init_array+0x40>)
 8016b7a:	4c0c      	ldr	r4, [pc, #48]	; (8016bac <__libc_init_array+0x44>)
 8016b7c:	f000 fd3c 	bl	80175f8 <_init>
 8016b80:	1b64      	subs	r4, r4, r5
 8016b82:	10a4      	asrs	r4, r4, #2
 8016b84:	2600      	movs	r6, #0
 8016b86:	42a6      	cmp	r6, r4
 8016b88:	d105      	bne.n	8016b96 <__libc_init_array+0x2e>
 8016b8a:	bd70      	pop	{r4, r5, r6, pc}
 8016b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b90:	4798      	blx	r3
 8016b92:	3601      	adds	r6, #1
 8016b94:	e7ee      	b.n	8016b74 <__libc_init_array+0xc>
 8016b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b9a:	4798      	blx	r3
 8016b9c:	3601      	adds	r6, #1
 8016b9e:	e7f2      	b.n	8016b86 <__libc_init_array+0x1e>
 8016ba0:	08017ab0 	.word	0x08017ab0
 8016ba4:	08017ab0 	.word	0x08017ab0
 8016ba8:	08017ab0 	.word	0x08017ab0
 8016bac:	08017ab4 	.word	0x08017ab4

08016bb0 <malloc>:
 8016bb0:	4b02      	ldr	r3, [pc, #8]	; (8016bbc <malloc+0xc>)
 8016bb2:	4601      	mov	r1, r0
 8016bb4:	6818      	ldr	r0, [r3, #0]
 8016bb6:	f000 b88d 	b.w	8016cd4 <_malloc_r>
 8016bba:	bf00      	nop
 8016bbc:	240000a0 	.word	0x240000a0

08016bc0 <free>:
 8016bc0:	4b02      	ldr	r3, [pc, #8]	; (8016bcc <free+0xc>)
 8016bc2:	4601      	mov	r1, r0
 8016bc4:	6818      	ldr	r0, [r3, #0]
 8016bc6:	f000 b819 	b.w	8016bfc <_free_r>
 8016bca:	bf00      	nop
 8016bcc:	240000a0 	.word	0x240000a0

08016bd0 <memcpy>:
 8016bd0:	440a      	add	r2, r1
 8016bd2:	4291      	cmp	r1, r2
 8016bd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016bd8:	d100      	bne.n	8016bdc <memcpy+0xc>
 8016bda:	4770      	bx	lr
 8016bdc:	b510      	push	{r4, lr}
 8016bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016be6:	4291      	cmp	r1, r2
 8016be8:	d1f9      	bne.n	8016bde <memcpy+0xe>
 8016bea:	bd10      	pop	{r4, pc}

08016bec <memset>:
 8016bec:	4402      	add	r2, r0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	d100      	bne.n	8016bf6 <memset+0xa>
 8016bf4:	4770      	bx	lr
 8016bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8016bfa:	e7f9      	b.n	8016bf0 <memset+0x4>

08016bfc <_free_r>:
 8016bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bfe:	2900      	cmp	r1, #0
 8016c00:	d044      	beq.n	8016c8c <_free_r+0x90>
 8016c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c06:	9001      	str	r0, [sp, #4]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8016c0e:	bfb8      	it	lt
 8016c10:	18e4      	addlt	r4, r4, r3
 8016c12:	f000 fc39 	bl	8017488 <__malloc_lock>
 8016c16:	4a1e      	ldr	r2, [pc, #120]	; (8016c90 <_free_r+0x94>)
 8016c18:	9801      	ldr	r0, [sp, #4]
 8016c1a:	6813      	ldr	r3, [r2, #0]
 8016c1c:	b933      	cbnz	r3, 8016c2c <_free_r+0x30>
 8016c1e:	6063      	str	r3, [r4, #4]
 8016c20:	6014      	str	r4, [r2, #0]
 8016c22:	b003      	add	sp, #12
 8016c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c28:	f000 bc34 	b.w	8017494 <__malloc_unlock>
 8016c2c:	42a3      	cmp	r3, r4
 8016c2e:	d908      	bls.n	8016c42 <_free_r+0x46>
 8016c30:	6825      	ldr	r5, [r4, #0]
 8016c32:	1961      	adds	r1, r4, r5
 8016c34:	428b      	cmp	r3, r1
 8016c36:	bf01      	itttt	eq
 8016c38:	6819      	ldreq	r1, [r3, #0]
 8016c3a:	685b      	ldreq	r3, [r3, #4]
 8016c3c:	1949      	addeq	r1, r1, r5
 8016c3e:	6021      	streq	r1, [r4, #0]
 8016c40:	e7ed      	b.n	8016c1e <_free_r+0x22>
 8016c42:	461a      	mov	r2, r3
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	b10b      	cbz	r3, 8016c4c <_free_r+0x50>
 8016c48:	42a3      	cmp	r3, r4
 8016c4a:	d9fa      	bls.n	8016c42 <_free_r+0x46>
 8016c4c:	6811      	ldr	r1, [r2, #0]
 8016c4e:	1855      	adds	r5, r2, r1
 8016c50:	42a5      	cmp	r5, r4
 8016c52:	d10b      	bne.n	8016c6c <_free_r+0x70>
 8016c54:	6824      	ldr	r4, [r4, #0]
 8016c56:	4421      	add	r1, r4
 8016c58:	1854      	adds	r4, r2, r1
 8016c5a:	42a3      	cmp	r3, r4
 8016c5c:	6011      	str	r1, [r2, #0]
 8016c5e:	d1e0      	bne.n	8016c22 <_free_r+0x26>
 8016c60:	681c      	ldr	r4, [r3, #0]
 8016c62:	685b      	ldr	r3, [r3, #4]
 8016c64:	6053      	str	r3, [r2, #4]
 8016c66:	4421      	add	r1, r4
 8016c68:	6011      	str	r1, [r2, #0]
 8016c6a:	e7da      	b.n	8016c22 <_free_r+0x26>
 8016c6c:	d902      	bls.n	8016c74 <_free_r+0x78>
 8016c6e:	230c      	movs	r3, #12
 8016c70:	6003      	str	r3, [r0, #0]
 8016c72:	e7d6      	b.n	8016c22 <_free_r+0x26>
 8016c74:	6825      	ldr	r5, [r4, #0]
 8016c76:	1961      	adds	r1, r4, r5
 8016c78:	428b      	cmp	r3, r1
 8016c7a:	bf04      	itt	eq
 8016c7c:	6819      	ldreq	r1, [r3, #0]
 8016c7e:	685b      	ldreq	r3, [r3, #4]
 8016c80:	6063      	str	r3, [r4, #4]
 8016c82:	bf04      	itt	eq
 8016c84:	1949      	addeq	r1, r1, r5
 8016c86:	6021      	streq	r1, [r4, #0]
 8016c88:	6054      	str	r4, [r2, #4]
 8016c8a:	e7ca      	b.n	8016c22 <_free_r+0x26>
 8016c8c:	b003      	add	sp, #12
 8016c8e:	bd30      	pop	{r4, r5, pc}
 8016c90:	24005a38 	.word	0x24005a38

08016c94 <sbrk_aligned>:
 8016c94:	b570      	push	{r4, r5, r6, lr}
 8016c96:	4e0e      	ldr	r6, [pc, #56]	; (8016cd0 <sbrk_aligned+0x3c>)
 8016c98:	460c      	mov	r4, r1
 8016c9a:	6831      	ldr	r1, [r6, #0]
 8016c9c:	4605      	mov	r5, r0
 8016c9e:	b911      	cbnz	r1, 8016ca6 <sbrk_aligned+0x12>
 8016ca0:	f000 f902 	bl	8016ea8 <_sbrk_r>
 8016ca4:	6030      	str	r0, [r6, #0]
 8016ca6:	4621      	mov	r1, r4
 8016ca8:	4628      	mov	r0, r5
 8016caa:	f000 f8fd 	bl	8016ea8 <_sbrk_r>
 8016cae:	1c43      	adds	r3, r0, #1
 8016cb0:	d00a      	beq.n	8016cc8 <sbrk_aligned+0x34>
 8016cb2:	1cc4      	adds	r4, r0, #3
 8016cb4:	f024 0403 	bic.w	r4, r4, #3
 8016cb8:	42a0      	cmp	r0, r4
 8016cba:	d007      	beq.n	8016ccc <sbrk_aligned+0x38>
 8016cbc:	1a21      	subs	r1, r4, r0
 8016cbe:	4628      	mov	r0, r5
 8016cc0:	f000 f8f2 	bl	8016ea8 <_sbrk_r>
 8016cc4:	3001      	adds	r0, #1
 8016cc6:	d101      	bne.n	8016ccc <sbrk_aligned+0x38>
 8016cc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016ccc:	4620      	mov	r0, r4
 8016cce:	bd70      	pop	{r4, r5, r6, pc}
 8016cd0:	24005a3c 	.word	0x24005a3c

08016cd4 <_malloc_r>:
 8016cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd8:	1ccd      	adds	r5, r1, #3
 8016cda:	f025 0503 	bic.w	r5, r5, #3
 8016cde:	3508      	adds	r5, #8
 8016ce0:	2d0c      	cmp	r5, #12
 8016ce2:	bf38      	it	cc
 8016ce4:	250c      	movcc	r5, #12
 8016ce6:	2d00      	cmp	r5, #0
 8016ce8:	4607      	mov	r7, r0
 8016cea:	db01      	blt.n	8016cf0 <_malloc_r+0x1c>
 8016cec:	42a9      	cmp	r1, r5
 8016cee:	d905      	bls.n	8016cfc <_malloc_r+0x28>
 8016cf0:	230c      	movs	r3, #12
 8016cf2:	603b      	str	r3, [r7, #0]
 8016cf4:	2600      	movs	r6, #0
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cfc:	4e2e      	ldr	r6, [pc, #184]	; (8016db8 <_malloc_r+0xe4>)
 8016cfe:	f000 fbc3 	bl	8017488 <__malloc_lock>
 8016d02:	6833      	ldr	r3, [r6, #0]
 8016d04:	461c      	mov	r4, r3
 8016d06:	bb34      	cbnz	r4, 8016d56 <_malloc_r+0x82>
 8016d08:	4629      	mov	r1, r5
 8016d0a:	4638      	mov	r0, r7
 8016d0c:	f7ff ffc2 	bl	8016c94 <sbrk_aligned>
 8016d10:	1c43      	adds	r3, r0, #1
 8016d12:	4604      	mov	r4, r0
 8016d14:	d14d      	bne.n	8016db2 <_malloc_r+0xde>
 8016d16:	6834      	ldr	r4, [r6, #0]
 8016d18:	4626      	mov	r6, r4
 8016d1a:	2e00      	cmp	r6, #0
 8016d1c:	d140      	bne.n	8016da0 <_malloc_r+0xcc>
 8016d1e:	6823      	ldr	r3, [r4, #0]
 8016d20:	4631      	mov	r1, r6
 8016d22:	4638      	mov	r0, r7
 8016d24:	eb04 0803 	add.w	r8, r4, r3
 8016d28:	f000 f8be 	bl	8016ea8 <_sbrk_r>
 8016d2c:	4580      	cmp	r8, r0
 8016d2e:	d13a      	bne.n	8016da6 <_malloc_r+0xd2>
 8016d30:	6821      	ldr	r1, [r4, #0]
 8016d32:	3503      	adds	r5, #3
 8016d34:	1a6d      	subs	r5, r5, r1
 8016d36:	f025 0503 	bic.w	r5, r5, #3
 8016d3a:	3508      	adds	r5, #8
 8016d3c:	2d0c      	cmp	r5, #12
 8016d3e:	bf38      	it	cc
 8016d40:	250c      	movcc	r5, #12
 8016d42:	4629      	mov	r1, r5
 8016d44:	4638      	mov	r0, r7
 8016d46:	f7ff ffa5 	bl	8016c94 <sbrk_aligned>
 8016d4a:	3001      	adds	r0, #1
 8016d4c:	d02b      	beq.n	8016da6 <_malloc_r+0xd2>
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	442b      	add	r3, r5
 8016d52:	6023      	str	r3, [r4, #0]
 8016d54:	e00e      	b.n	8016d74 <_malloc_r+0xa0>
 8016d56:	6822      	ldr	r2, [r4, #0]
 8016d58:	1b52      	subs	r2, r2, r5
 8016d5a:	d41e      	bmi.n	8016d9a <_malloc_r+0xc6>
 8016d5c:	2a0b      	cmp	r2, #11
 8016d5e:	d916      	bls.n	8016d8e <_malloc_r+0xba>
 8016d60:	1961      	adds	r1, r4, r5
 8016d62:	42a3      	cmp	r3, r4
 8016d64:	6025      	str	r5, [r4, #0]
 8016d66:	bf18      	it	ne
 8016d68:	6059      	strne	r1, [r3, #4]
 8016d6a:	6863      	ldr	r3, [r4, #4]
 8016d6c:	bf08      	it	eq
 8016d6e:	6031      	streq	r1, [r6, #0]
 8016d70:	5162      	str	r2, [r4, r5]
 8016d72:	604b      	str	r3, [r1, #4]
 8016d74:	4638      	mov	r0, r7
 8016d76:	f104 060b 	add.w	r6, r4, #11
 8016d7a:	f000 fb8b 	bl	8017494 <__malloc_unlock>
 8016d7e:	f026 0607 	bic.w	r6, r6, #7
 8016d82:	1d23      	adds	r3, r4, #4
 8016d84:	1af2      	subs	r2, r6, r3
 8016d86:	d0b6      	beq.n	8016cf6 <_malloc_r+0x22>
 8016d88:	1b9b      	subs	r3, r3, r6
 8016d8a:	50a3      	str	r3, [r4, r2]
 8016d8c:	e7b3      	b.n	8016cf6 <_malloc_r+0x22>
 8016d8e:	6862      	ldr	r2, [r4, #4]
 8016d90:	42a3      	cmp	r3, r4
 8016d92:	bf0c      	ite	eq
 8016d94:	6032      	streq	r2, [r6, #0]
 8016d96:	605a      	strne	r2, [r3, #4]
 8016d98:	e7ec      	b.n	8016d74 <_malloc_r+0xa0>
 8016d9a:	4623      	mov	r3, r4
 8016d9c:	6864      	ldr	r4, [r4, #4]
 8016d9e:	e7b2      	b.n	8016d06 <_malloc_r+0x32>
 8016da0:	4634      	mov	r4, r6
 8016da2:	6876      	ldr	r6, [r6, #4]
 8016da4:	e7b9      	b.n	8016d1a <_malloc_r+0x46>
 8016da6:	230c      	movs	r3, #12
 8016da8:	603b      	str	r3, [r7, #0]
 8016daa:	4638      	mov	r0, r7
 8016dac:	f000 fb72 	bl	8017494 <__malloc_unlock>
 8016db0:	e7a1      	b.n	8016cf6 <_malloc_r+0x22>
 8016db2:	6025      	str	r5, [r4, #0]
 8016db4:	e7de      	b.n	8016d74 <_malloc_r+0xa0>
 8016db6:	bf00      	nop
 8016db8:	24005a38 	.word	0x24005a38

08016dbc <_puts_r>:
 8016dbc:	b570      	push	{r4, r5, r6, lr}
 8016dbe:	460e      	mov	r6, r1
 8016dc0:	4605      	mov	r5, r0
 8016dc2:	b118      	cbz	r0, 8016dcc <_puts_r+0x10>
 8016dc4:	6983      	ldr	r3, [r0, #24]
 8016dc6:	b90b      	cbnz	r3, 8016dcc <_puts_r+0x10>
 8016dc8:	f000 fa58 	bl	801727c <__sinit>
 8016dcc:	69ab      	ldr	r3, [r5, #24]
 8016dce:	68ac      	ldr	r4, [r5, #8]
 8016dd0:	b913      	cbnz	r3, 8016dd8 <_puts_r+0x1c>
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f000 fa52 	bl	801727c <__sinit>
 8016dd8:	4b2c      	ldr	r3, [pc, #176]	; (8016e8c <_puts_r+0xd0>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	d120      	bne.n	8016e20 <_puts_r+0x64>
 8016dde:	686c      	ldr	r4, [r5, #4]
 8016de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016de2:	07db      	lsls	r3, r3, #31
 8016de4:	d405      	bmi.n	8016df2 <_puts_r+0x36>
 8016de6:	89a3      	ldrh	r3, [r4, #12]
 8016de8:	0598      	lsls	r0, r3, #22
 8016dea:	d402      	bmi.n	8016df2 <_puts_r+0x36>
 8016dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dee:	f000 fae3 	bl	80173b8 <__retarget_lock_acquire_recursive>
 8016df2:	89a3      	ldrh	r3, [r4, #12]
 8016df4:	0719      	lsls	r1, r3, #28
 8016df6:	d51d      	bpl.n	8016e34 <_puts_r+0x78>
 8016df8:	6923      	ldr	r3, [r4, #16]
 8016dfa:	b1db      	cbz	r3, 8016e34 <_puts_r+0x78>
 8016dfc:	3e01      	subs	r6, #1
 8016dfe:	68a3      	ldr	r3, [r4, #8]
 8016e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016e04:	3b01      	subs	r3, #1
 8016e06:	60a3      	str	r3, [r4, #8]
 8016e08:	bb39      	cbnz	r1, 8016e5a <_puts_r+0x9e>
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	da38      	bge.n	8016e80 <_puts_r+0xc4>
 8016e0e:	4622      	mov	r2, r4
 8016e10:	210a      	movs	r1, #10
 8016e12:	4628      	mov	r0, r5
 8016e14:	f000 f858 	bl	8016ec8 <__swbuf_r>
 8016e18:	3001      	adds	r0, #1
 8016e1a:	d011      	beq.n	8016e40 <_puts_r+0x84>
 8016e1c:	250a      	movs	r5, #10
 8016e1e:	e011      	b.n	8016e44 <_puts_r+0x88>
 8016e20:	4b1b      	ldr	r3, [pc, #108]	; (8016e90 <_puts_r+0xd4>)
 8016e22:	429c      	cmp	r4, r3
 8016e24:	d101      	bne.n	8016e2a <_puts_r+0x6e>
 8016e26:	68ac      	ldr	r4, [r5, #8]
 8016e28:	e7da      	b.n	8016de0 <_puts_r+0x24>
 8016e2a:	4b1a      	ldr	r3, [pc, #104]	; (8016e94 <_puts_r+0xd8>)
 8016e2c:	429c      	cmp	r4, r3
 8016e2e:	bf08      	it	eq
 8016e30:	68ec      	ldreq	r4, [r5, #12]
 8016e32:	e7d5      	b.n	8016de0 <_puts_r+0x24>
 8016e34:	4621      	mov	r1, r4
 8016e36:	4628      	mov	r0, r5
 8016e38:	f000 f898 	bl	8016f6c <__swsetup_r>
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	d0dd      	beq.n	8016dfc <_puts_r+0x40>
 8016e40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e46:	07da      	lsls	r2, r3, #31
 8016e48:	d405      	bmi.n	8016e56 <_puts_r+0x9a>
 8016e4a:	89a3      	ldrh	r3, [r4, #12]
 8016e4c:	059b      	lsls	r3, r3, #22
 8016e4e:	d402      	bmi.n	8016e56 <_puts_r+0x9a>
 8016e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e52:	f000 fab2 	bl	80173ba <__retarget_lock_release_recursive>
 8016e56:	4628      	mov	r0, r5
 8016e58:	bd70      	pop	{r4, r5, r6, pc}
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	da04      	bge.n	8016e68 <_puts_r+0xac>
 8016e5e:	69a2      	ldr	r2, [r4, #24]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	dc06      	bgt.n	8016e72 <_puts_r+0xb6>
 8016e64:	290a      	cmp	r1, #10
 8016e66:	d004      	beq.n	8016e72 <_puts_r+0xb6>
 8016e68:	6823      	ldr	r3, [r4, #0]
 8016e6a:	1c5a      	adds	r2, r3, #1
 8016e6c:	6022      	str	r2, [r4, #0]
 8016e6e:	7019      	strb	r1, [r3, #0]
 8016e70:	e7c5      	b.n	8016dfe <_puts_r+0x42>
 8016e72:	4622      	mov	r2, r4
 8016e74:	4628      	mov	r0, r5
 8016e76:	f000 f827 	bl	8016ec8 <__swbuf_r>
 8016e7a:	3001      	adds	r0, #1
 8016e7c:	d1bf      	bne.n	8016dfe <_puts_r+0x42>
 8016e7e:	e7df      	b.n	8016e40 <_puts_r+0x84>
 8016e80:	6823      	ldr	r3, [r4, #0]
 8016e82:	250a      	movs	r5, #10
 8016e84:	1c5a      	adds	r2, r3, #1
 8016e86:	6022      	str	r2, [r4, #0]
 8016e88:	701d      	strb	r5, [r3, #0]
 8016e8a:	e7db      	b.n	8016e44 <_puts_r+0x88>
 8016e8c:	08017a68 	.word	0x08017a68
 8016e90:	08017a88 	.word	0x08017a88
 8016e94:	08017a48 	.word	0x08017a48

08016e98 <puts>:
 8016e98:	4b02      	ldr	r3, [pc, #8]	; (8016ea4 <puts+0xc>)
 8016e9a:	4601      	mov	r1, r0
 8016e9c:	6818      	ldr	r0, [r3, #0]
 8016e9e:	f7ff bf8d 	b.w	8016dbc <_puts_r>
 8016ea2:	bf00      	nop
 8016ea4:	240000a0 	.word	0x240000a0

08016ea8 <_sbrk_r>:
 8016ea8:	b538      	push	{r3, r4, r5, lr}
 8016eaa:	4d06      	ldr	r5, [pc, #24]	; (8016ec4 <_sbrk_r+0x1c>)
 8016eac:	2300      	movs	r3, #0
 8016eae:	4604      	mov	r4, r0
 8016eb0:	4608      	mov	r0, r1
 8016eb2:	602b      	str	r3, [r5, #0]
 8016eb4:	f7ec ffcc 	bl	8003e50 <_sbrk>
 8016eb8:	1c43      	adds	r3, r0, #1
 8016eba:	d102      	bne.n	8016ec2 <_sbrk_r+0x1a>
 8016ebc:	682b      	ldr	r3, [r5, #0]
 8016ebe:	b103      	cbz	r3, 8016ec2 <_sbrk_r+0x1a>
 8016ec0:	6023      	str	r3, [r4, #0]
 8016ec2:	bd38      	pop	{r3, r4, r5, pc}
 8016ec4:	24005a44 	.word	0x24005a44

08016ec8 <__swbuf_r>:
 8016ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eca:	460e      	mov	r6, r1
 8016ecc:	4614      	mov	r4, r2
 8016ece:	4605      	mov	r5, r0
 8016ed0:	b118      	cbz	r0, 8016eda <__swbuf_r+0x12>
 8016ed2:	6983      	ldr	r3, [r0, #24]
 8016ed4:	b90b      	cbnz	r3, 8016eda <__swbuf_r+0x12>
 8016ed6:	f000 f9d1 	bl	801727c <__sinit>
 8016eda:	4b21      	ldr	r3, [pc, #132]	; (8016f60 <__swbuf_r+0x98>)
 8016edc:	429c      	cmp	r4, r3
 8016ede:	d12b      	bne.n	8016f38 <__swbuf_r+0x70>
 8016ee0:	686c      	ldr	r4, [r5, #4]
 8016ee2:	69a3      	ldr	r3, [r4, #24]
 8016ee4:	60a3      	str	r3, [r4, #8]
 8016ee6:	89a3      	ldrh	r3, [r4, #12]
 8016ee8:	071a      	lsls	r2, r3, #28
 8016eea:	d52f      	bpl.n	8016f4c <__swbuf_r+0x84>
 8016eec:	6923      	ldr	r3, [r4, #16]
 8016eee:	b36b      	cbz	r3, 8016f4c <__swbuf_r+0x84>
 8016ef0:	6923      	ldr	r3, [r4, #16]
 8016ef2:	6820      	ldr	r0, [r4, #0]
 8016ef4:	1ac0      	subs	r0, r0, r3
 8016ef6:	6963      	ldr	r3, [r4, #20]
 8016ef8:	b2f6      	uxtb	r6, r6
 8016efa:	4283      	cmp	r3, r0
 8016efc:	4637      	mov	r7, r6
 8016efe:	dc04      	bgt.n	8016f0a <__swbuf_r+0x42>
 8016f00:	4621      	mov	r1, r4
 8016f02:	4628      	mov	r0, r5
 8016f04:	f000 f926 	bl	8017154 <_fflush_r>
 8016f08:	bb30      	cbnz	r0, 8016f58 <__swbuf_r+0x90>
 8016f0a:	68a3      	ldr	r3, [r4, #8]
 8016f0c:	3b01      	subs	r3, #1
 8016f0e:	60a3      	str	r3, [r4, #8]
 8016f10:	6823      	ldr	r3, [r4, #0]
 8016f12:	1c5a      	adds	r2, r3, #1
 8016f14:	6022      	str	r2, [r4, #0]
 8016f16:	701e      	strb	r6, [r3, #0]
 8016f18:	6963      	ldr	r3, [r4, #20]
 8016f1a:	3001      	adds	r0, #1
 8016f1c:	4283      	cmp	r3, r0
 8016f1e:	d004      	beq.n	8016f2a <__swbuf_r+0x62>
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	07db      	lsls	r3, r3, #31
 8016f24:	d506      	bpl.n	8016f34 <__swbuf_r+0x6c>
 8016f26:	2e0a      	cmp	r6, #10
 8016f28:	d104      	bne.n	8016f34 <__swbuf_r+0x6c>
 8016f2a:	4621      	mov	r1, r4
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	f000 f911 	bl	8017154 <_fflush_r>
 8016f32:	b988      	cbnz	r0, 8016f58 <__swbuf_r+0x90>
 8016f34:	4638      	mov	r0, r7
 8016f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f38:	4b0a      	ldr	r3, [pc, #40]	; (8016f64 <__swbuf_r+0x9c>)
 8016f3a:	429c      	cmp	r4, r3
 8016f3c:	d101      	bne.n	8016f42 <__swbuf_r+0x7a>
 8016f3e:	68ac      	ldr	r4, [r5, #8]
 8016f40:	e7cf      	b.n	8016ee2 <__swbuf_r+0x1a>
 8016f42:	4b09      	ldr	r3, [pc, #36]	; (8016f68 <__swbuf_r+0xa0>)
 8016f44:	429c      	cmp	r4, r3
 8016f46:	bf08      	it	eq
 8016f48:	68ec      	ldreq	r4, [r5, #12]
 8016f4a:	e7ca      	b.n	8016ee2 <__swbuf_r+0x1a>
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f000 f80c 	bl	8016f6c <__swsetup_r>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d0cb      	beq.n	8016ef0 <__swbuf_r+0x28>
 8016f58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f5c:	e7ea      	b.n	8016f34 <__swbuf_r+0x6c>
 8016f5e:	bf00      	nop
 8016f60:	08017a68 	.word	0x08017a68
 8016f64:	08017a88 	.word	0x08017a88
 8016f68:	08017a48 	.word	0x08017a48

08016f6c <__swsetup_r>:
 8016f6c:	4b32      	ldr	r3, [pc, #200]	; (8017038 <__swsetup_r+0xcc>)
 8016f6e:	b570      	push	{r4, r5, r6, lr}
 8016f70:	681d      	ldr	r5, [r3, #0]
 8016f72:	4606      	mov	r6, r0
 8016f74:	460c      	mov	r4, r1
 8016f76:	b125      	cbz	r5, 8016f82 <__swsetup_r+0x16>
 8016f78:	69ab      	ldr	r3, [r5, #24]
 8016f7a:	b913      	cbnz	r3, 8016f82 <__swsetup_r+0x16>
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f000 f97d 	bl	801727c <__sinit>
 8016f82:	4b2e      	ldr	r3, [pc, #184]	; (801703c <__swsetup_r+0xd0>)
 8016f84:	429c      	cmp	r4, r3
 8016f86:	d10f      	bne.n	8016fa8 <__swsetup_r+0x3c>
 8016f88:	686c      	ldr	r4, [r5, #4]
 8016f8a:	89a3      	ldrh	r3, [r4, #12]
 8016f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f90:	0719      	lsls	r1, r3, #28
 8016f92:	d42c      	bmi.n	8016fee <__swsetup_r+0x82>
 8016f94:	06dd      	lsls	r5, r3, #27
 8016f96:	d411      	bmi.n	8016fbc <__swsetup_r+0x50>
 8016f98:	2309      	movs	r3, #9
 8016f9a:	6033      	str	r3, [r6, #0]
 8016f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016fa0:	81a3      	strh	r3, [r4, #12]
 8016fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fa6:	e03e      	b.n	8017026 <__swsetup_r+0xba>
 8016fa8:	4b25      	ldr	r3, [pc, #148]	; (8017040 <__swsetup_r+0xd4>)
 8016faa:	429c      	cmp	r4, r3
 8016fac:	d101      	bne.n	8016fb2 <__swsetup_r+0x46>
 8016fae:	68ac      	ldr	r4, [r5, #8]
 8016fb0:	e7eb      	b.n	8016f8a <__swsetup_r+0x1e>
 8016fb2:	4b24      	ldr	r3, [pc, #144]	; (8017044 <__swsetup_r+0xd8>)
 8016fb4:	429c      	cmp	r4, r3
 8016fb6:	bf08      	it	eq
 8016fb8:	68ec      	ldreq	r4, [r5, #12]
 8016fba:	e7e6      	b.n	8016f8a <__swsetup_r+0x1e>
 8016fbc:	0758      	lsls	r0, r3, #29
 8016fbe:	d512      	bpl.n	8016fe6 <__swsetup_r+0x7a>
 8016fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fc2:	b141      	cbz	r1, 8016fd6 <__swsetup_r+0x6a>
 8016fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fc8:	4299      	cmp	r1, r3
 8016fca:	d002      	beq.n	8016fd2 <__swsetup_r+0x66>
 8016fcc:	4630      	mov	r0, r6
 8016fce:	f7ff fe15 	bl	8016bfc <_free_r>
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8016fd6:	89a3      	ldrh	r3, [r4, #12]
 8016fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016fdc:	81a3      	strh	r3, [r4, #12]
 8016fde:	2300      	movs	r3, #0
 8016fe0:	6063      	str	r3, [r4, #4]
 8016fe2:	6923      	ldr	r3, [r4, #16]
 8016fe4:	6023      	str	r3, [r4, #0]
 8016fe6:	89a3      	ldrh	r3, [r4, #12]
 8016fe8:	f043 0308 	orr.w	r3, r3, #8
 8016fec:	81a3      	strh	r3, [r4, #12]
 8016fee:	6923      	ldr	r3, [r4, #16]
 8016ff0:	b94b      	cbnz	r3, 8017006 <__swsetup_r+0x9a>
 8016ff2:	89a3      	ldrh	r3, [r4, #12]
 8016ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ffc:	d003      	beq.n	8017006 <__swsetup_r+0x9a>
 8016ffe:	4621      	mov	r1, r4
 8017000:	4630      	mov	r0, r6
 8017002:	f000 fa01 	bl	8017408 <__smakebuf_r>
 8017006:	89a0      	ldrh	r0, [r4, #12]
 8017008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801700c:	f010 0301 	ands.w	r3, r0, #1
 8017010:	d00a      	beq.n	8017028 <__swsetup_r+0xbc>
 8017012:	2300      	movs	r3, #0
 8017014:	60a3      	str	r3, [r4, #8]
 8017016:	6963      	ldr	r3, [r4, #20]
 8017018:	425b      	negs	r3, r3
 801701a:	61a3      	str	r3, [r4, #24]
 801701c:	6923      	ldr	r3, [r4, #16]
 801701e:	b943      	cbnz	r3, 8017032 <__swsetup_r+0xc6>
 8017020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017024:	d1ba      	bne.n	8016f9c <__swsetup_r+0x30>
 8017026:	bd70      	pop	{r4, r5, r6, pc}
 8017028:	0781      	lsls	r1, r0, #30
 801702a:	bf58      	it	pl
 801702c:	6963      	ldrpl	r3, [r4, #20]
 801702e:	60a3      	str	r3, [r4, #8]
 8017030:	e7f4      	b.n	801701c <__swsetup_r+0xb0>
 8017032:	2000      	movs	r0, #0
 8017034:	e7f7      	b.n	8017026 <__swsetup_r+0xba>
 8017036:	bf00      	nop
 8017038:	240000a0 	.word	0x240000a0
 801703c:	08017a68 	.word	0x08017a68
 8017040:	08017a88 	.word	0x08017a88
 8017044:	08017a48 	.word	0x08017a48

08017048 <__sflush_r>:
 8017048:	898a      	ldrh	r2, [r1, #12]
 801704a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801704e:	4605      	mov	r5, r0
 8017050:	0710      	lsls	r0, r2, #28
 8017052:	460c      	mov	r4, r1
 8017054:	d458      	bmi.n	8017108 <__sflush_r+0xc0>
 8017056:	684b      	ldr	r3, [r1, #4]
 8017058:	2b00      	cmp	r3, #0
 801705a:	dc05      	bgt.n	8017068 <__sflush_r+0x20>
 801705c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801705e:	2b00      	cmp	r3, #0
 8017060:	dc02      	bgt.n	8017068 <__sflush_r+0x20>
 8017062:	2000      	movs	r0, #0
 8017064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801706a:	2e00      	cmp	r6, #0
 801706c:	d0f9      	beq.n	8017062 <__sflush_r+0x1a>
 801706e:	2300      	movs	r3, #0
 8017070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017074:	682f      	ldr	r7, [r5, #0]
 8017076:	602b      	str	r3, [r5, #0]
 8017078:	d032      	beq.n	80170e0 <__sflush_r+0x98>
 801707a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801707c:	89a3      	ldrh	r3, [r4, #12]
 801707e:	075a      	lsls	r2, r3, #29
 8017080:	d505      	bpl.n	801708e <__sflush_r+0x46>
 8017082:	6863      	ldr	r3, [r4, #4]
 8017084:	1ac0      	subs	r0, r0, r3
 8017086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017088:	b10b      	cbz	r3, 801708e <__sflush_r+0x46>
 801708a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801708c:	1ac0      	subs	r0, r0, r3
 801708e:	2300      	movs	r3, #0
 8017090:	4602      	mov	r2, r0
 8017092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017094:	6a21      	ldr	r1, [r4, #32]
 8017096:	4628      	mov	r0, r5
 8017098:	47b0      	blx	r6
 801709a:	1c43      	adds	r3, r0, #1
 801709c:	89a3      	ldrh	r3, [r4, #12]
 801709e:	d106      	bne.n	80170ae <__sflush_r+0x66>
 80170a0:	6829      	ldr	r1, [r5, #0]
 80170a2:	291d      	cmp	r1, #29
 80170a4:	d82c      	bhi.n	8017100 <__sflush_r+0xb8>
 80170a6:	4a2a      	ldr	r2, [pc, #168]	; (8017150 <__sflush_r+0x108>)
 80170a8:	40ca      	lsrs	r2, r1
 80170aa:	07d6      	lsls	r6, r2, #31
 80170ac:	d528      	bpl.n	8017100 <__sflush_r+0xb8>
 80170ae:	2200      	movs	r2, #0
 80170b0:	6062      	str	r2, [r4, #4]
 80170b2:	04d9      	lsls	r1, r3, #19
 80170b4:	6922      	ldr	r2, [r4, #16]
 80170b6:	6022      	str	r2, [r4, #0]
 80170b8:	d504      	bpl.n	80170c4 <__sflush_r+0x7c>
 80170ba:	1c42      	adds	r2, r0, #1
 80170bc:	d101      	bne.n	80170c2 <__sflush_r+0x7a>
 80170be:	682b      	ldr	r3, [r5, #0]
 80170c0:	b903      	cbnz	r3, 80170c4 <__sflush_r+0x7c>
 80170c2:	6560      	str	r0, [r4, #84]	; 0x54
 80170c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80170c6:	602f      	str	r7, [r5, #0]
 80170c8:	2900      	cmp	r1, #0
 80170ca:	d0ca      	beq.n	8017062 <__sflush_r+0x1a>
 80170cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170d0:	4299      	cmp	r1, r3
 80170d2:	d002      	beq.n	80170da <__sflush_r+0x92>
 80170d4:	4628      	mov	r0, r5
 80170d6:	f7ff fd91 	bl	8016bfc <_free_r>
 80170da:	2000      	movs	r0, #0
 80170dc:	6360      	str	r0, [r4, #52]	; 0x34
 80170de:	e7c1      	b.n	8017064 <__sflush_r+0x1c>
 80170e0:	6a21      	ldr	r1, [r4, #32]
 80170e2:	2301      	movs	r3, #1
 80170e4:	4628      	mov	r0, r5
 80170e6:	47b0      	blx	r6
 80170e8:	1c41      	adds	r1, r0, #1
 80170ea:	d1c7      	bne.n	801707c <__sflush_r+0x34>
 80170ec:	682b      	ldr	r3, [r5, #0]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d0c4      	beq.n	801707c <__sflush_r+0x34>
 80170f2:	2b1d      	cmp	r3, #29
 80170f4:	d001      	beq.n	80170fa <__sflush_r+0xb2>
 80170f6:	2b16      	cmp	r3, #22
 80170f8:	d101      	bne.n	80170fe <__sflush_r+0xb6>
 80170fa:	602f      	str	r7, [r5, #0]
 80170fc:	e7b1      	b.n	8017062 <__sflush_r+0x1a>
 80170fe:	89a3      	ldrh	r3, [r4, #12]
 8017100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017104:	81a3      	strh	r3, [r4, #12]
 8017106:	e7ad      	b.n	8017064 <__sflush_r+0x1c>
 8017108:	690f      	ldr	r7, [r1, #16]
 801710a:	2f00      	cmp	r7, #0
 801710c:	d0a9      	beq.n	8017062 <__sflush_r+0x1a>
 801710e:	0793      	lsls	r3, r2, #30
 8017110:	680e      	ldr	r6, [r1, #0]
 8017112:	bf08      	it	eq
 8017114:	694b      	ldreq	r3, [r1, #20]
 8017116:	600f      	str	r7, [r1, #0]
 8017118:	bf18      	it	ne
 801711a:	2300      	movne	r3, #0
 801711c:	eba6 0807 	sub.w	r8, r6, r7
 8017120:	608b      	str	r3, [r1, #8]
 8017122:	f1b8 0f00 	cmp.w	r8, #0
 8017126:	dd9c      	ble.n	8017062 <__sflush_r+0x1a>
 8017128:	6a21      	ldr	r1, [r4, #32]
 801712a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801712c:	4643      	mov	r3, r8
 801712e:	463a      	mov	r2, r7
 8017130:	4628      	mov	r0, r5
 8017132:	47b0      	blx	r6
 8017134:	2800      	cmp	r0, #0
 8017136:	dc06      	bgt.n	8017146 <__sflush_r+0xfe>
 8017138:	89a3      	ldrh	r3, [r4, #12]
 801713a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801713e:	81a3      	strh	r3, [r4, #12]
 8017140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017144:	e78e      	b.n	8017064 <__sflush_r+0x1c>
 8017146:	4407      	add	r7, r0
 8017148:	eba8 0800 	sub.w	r8, r8, r0
 801714c:	e7e9      	b.n	8017122 <__sflush_r+0xda>
 801714e:	bf00      	nop
 8017150:	20400001 	.word	0x20400001

08017154 <_fflush_r>:
 8017154:	b538      	push	{r3, r4, r5, lr}
 8017156:	690b      	ldr	r3, [r1, #16]
 8017158:	4605      	mov	r5, r0
 801715a:	460c      	mov	r4, r1
 801715c:	b913      	cbnz	r3, 8017164 <_fflush_r+0x10>
 801715e:	2500      	movs	r5, #0
 8017160:	4628      	mov	r0, r5
 8017162:	bd38      	pop	{r3, r4, r5, pc}
 8017164:	b118      	cbz	r0, 801716e <_fflush_r+0x1a>
 8017166:	6983      	ldr	r3, [r0, #24]
 8017168:	b90b      	cbnz	r3, 801716e <_fflush_r+0x1a>
 801716a:	f000 f887 	bl	801727c <__sinit>
 801716e:	4b14      	ldr	r3, [pc, #80]	; (80171c0 <_fflush_r+0x6c>)
 8017170:	429c      	cmp	r4, r3
 8017172:	d11b      	bne.n	80171ac <_fflush_r+0x58>
 8017174:	686c      	ldr	r4, [r5, #4]
 8017176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d0ef      	beq.n	801715e <_fflush_r+0xa>
 801717e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017180:	07d0      	lsls	r0, r2, #31
 8017182:	d404      	bmi.n	801718e <_fflush_r+0x3a>
 8017184:	0599      	lsls	r1, r3, #22
 8017186:	d402      	bmi.n	801718e <_fflush_r+0x3a>
 8017188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801718a:	f000 f915 	bl	80173b8 <__retarget_lock_acquire_recursive>
 801718e:	4628      	mov	r0, r5
 8017190:	4621      	mov	r1, r4
 8017192:	f7ff ff59 	bl	8017048 <__sflush_r>
 8017196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017198:	07da      	lsls	r2, r3, #31
 801719a:	4605      	mov	r5, r0
 801719c:	d4e0      	bmi.n	8017160 <_fflush_r+0xc>
 801719e:	89a3      	ldrh	r3, [r4, #12]
 80171a0:	059b      	lsls	r3, r3, #22
 80171a2:	d4dd      	bmi.n	8017160 <_fflush_r+0xc>
 80171a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171a6:	f000 f908 	bl	80173ba <__retarget_lock_release_recursive>
 80171aa:	e7d9      	b.n	8017160 <_fflush_r+0xc>
 80171ac:	4b05      	ldr	r3, [pc, #20]	; (80171c4 <_fflush_r+0x70>)
 80171ae:	429c      	cmp	r4, r3
 80171b0:	d101      	bne.n	80171b6 <_fflush_r+0x62>
 80171b2:	68ac      	ldr	r4, [r5, #8]
 80171b4:	e7df      	b.n	8017176 <_fflush_r+0x22>
 80171b6:	4b04      	ldr	r3, [pc, #16]	; (80171c8 <_fflush_r+0x74>)
 80171b8:	429c      	cmp	r4, r3
 80171ba:	bf08      	it	eq
 80171bc:	68ec      	ldreq	r4, [r5, #12]
 80171be:	e7da      	b.n	8017176 <_fflush_r+0x22>
 80171c0:	08017a68 	.word	0x08017a68
 80171c4:	08017a88 	.word	0x08017a88
 80171c8:	08017a48 	.word	0x08017a48

080171cc <std>:
 80171cc:	2300      	movs	r3, #0
 80171ce:	b510      	push	{r4, lr}
 80171d0:	4604      	mov	r4, r0
 80171d2:	e9c0 3300 	strd	r3, r3, [r0]
 80171d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80171da:	6083      	str	r3, [r0, #8]
 80171dc:	8181      	strh	r1, [r0, #12]
 80171de:	6643      	str	r3, [r0, #100]	; 0x64
 80171e0:	81c2      	strh	r2, [r0, #14]
 80171e2:	6183      	str	r3, [r0, #24]
 80171e4:	4619      	mov	r1, r3
 80171e6:	2208      	movs	r2, #8
 80171e8:	305c      	adds	r0, #92	; 0x5c
 80171ea:	f7ff fcff 	bl	8016bec <memset>
 80171ee:	4b05      	ldr	r3, [pc, #20]	; (8017204 <std+0x38>)
 80171f0:	6263      	str	r3, [r4, #36]	; 0x24
 80171f2:	4b05      	ldr	r3, [pc, #20]	; (8017208 <std+0x3c>)
 80171f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80171f6:	4b05      	ldr	r3, [pc, #20]	; (801720c <std+0x40>)
 80171f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80171fa:	4b05      	ldr	r3, [pc, #20]	; (8017210 <std+0x44>)
 80171fc:	6224      	str	r4, [r4, #32]
 80171fe:	6323      	str	r3, [r4, #48]	; 0x30
 8017200:	bd10      	pop	{r4, pc}
 8017202:	bf00      	nop
 8017204:	080174a1 	.word	0x080174a1
 8017208:	080174c3 	.word	0x080174c3
 801720c:	080174fb 	.word	0x080174fb
 8017210:	0801751f 	.word	0x0801751f

08017214 <_cleanup_r>:
 8017214:	4901      	ldr	r1, [pc, #4]	; (801721c <_cleanup_r+0x8>)
 8017216:	f000 b8af 	b.w	8017378 <_fwalk_reent>
 801721a:	bf00      	nop
 801721c:	08017155 	.word	0x08017155

08017220 <__sfmoreglue>:
 8017220:	b570      	push	{r4, r5, r6, lr}
 8017222:	2268      	movs	r2, #104	; 0x68
 8017224:	1e4d      	subs	r5, r1, #1
 8017226:	4355      	muls	r5, r2
 8017228:	460e      	mov	r6, r1
 801722a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801722e:	f7ff fd51 	bl	8016cd4 <_malloc_r>
 8017232:	4604      	mov	r4, r0
 8017234:	b140      	cbz	r0, 8017248 <__sfmoreglue+0x28>
 8017236:	2100      	movs	r1, #0
 8017238:	e9c0 1600 	strd	r1, r6, [r0]
 801723c:	300c      	adds	r0, #12
 801723e:	60a0      	str	r0, [r4, #8]
 8017240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017244:	f7ff fcd2 	bl	8016bec <memset>
 8017248:	4620      	mov	r0, r4
 801724a:	bd70      	pop	{r4, r5, r6, pc}

0801724c <__sfp_lock_acquire>:
 801724c:	4801      	ldr	r0, [pc, #4]	; (8017254 <__sfp_lock_acquire+0x8>)
 801724e:	f000 b8b3 	b.w	80173b8 <__retarget_lock_acquire_recursive>
 8017252:	bf00      	nop
 8017254:	24005a41 	.word	0x24005a41

08017258 <__sfp_lock_release>:
 8017258:	4801      	ldr	r0, [pc, #4]	; (8017260 <__sfp_lock_release+0x8>)
 801725a:	f000 b8ae 	b.w	80173ba <__retarget_lock_release_recursive>
 801725e:	bf00      	nop
 8017260:	24005a41 	.word	0x24005a41

08017264 <__sinit_lock_acquire>:
 8017264:	4801      	ldr	r0, [pc, #4]	; (801726c <__sinit_lock_acquire+0x8>)
 8017266:	f000 b8a7 	b.w	80173b8 <__retarget_lock_acquire_recursive>
 801726a:	bf00      	nop
 801726c:	24005a42 	.word	0x24005a42

08017270 <__sinit_lock_release>:
 8017270:	4801      	ldr	r0, [pc, #4]	; (8017278 <__sinit_lock_release+0x8>)
 8017272:	f000 b8a2 	b.w	80173ba <__retarget_lock_release_recursive>
 8017276:	bf00      	nop
 8017278:	24005a42 	.word	0x24005a42

0801727c <__sinit>:
 801727c:	b510      	push	{r4, lr}
 801727e:	4604      	mov	r4, r0
 8017280:	f7ff fff0 	bl	8017264 <__sinit_lock_acquire>
 8017284:	69a3      	ldr	r3, [r4, #24]
 8017286:	b11b      	cbz	r3, 8017290 <__sinit+0x14>
 8017288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801728c:	f7ff bff0 	b.w	8017270 <__sinit_lock_release>
 8017290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017294:	6523      	str	r3, [r4, #80]	; 0x50
 8017296:	4b13      	ldr	r3, [pc, #76]	; (80172e4 <__sinit+0x68>)
 8017298:	4a13      	ldr	r2, [pc, #76]	; (80172e8 <__sinit+0x6c>)
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	62a2      	str	r2, [r4, #40]	; 0x28
 801729e:	42a3      	cmp	r3, r4
 80172a0:	bf04      	itt	eq
 80172a2:	2301      	moveq	r3, #1
 80172a4:	61a3      	streq	r3, [r4, #24]
 80172a6:	4620      	mov	r0, r4
 80172a8:	f000 f820 	bl	80172ec <__sfp>
 80172ac:	6060      	str	r0, [r4, #4]
 80172ae:	4620      	mov	r0, r4
 80172b0:	f000 f81c 	bl	80172ec <__sfp>
 80172b4:	60a0      	str	r0, [r4, #8]
 80172b6:	4620      	mov	r0, r4
 80172b8:	f000 f818 	bl	80172ec <__sfp>
 80172bc:	2200      	movs	r2, #0
 80172be:	60e0      	str	r0, [r4, #12]
 80172c0:	2104      	movs	r1, #4
 80172c2:	6860      	ldr	r0, [r4, #4]
 80172c4:	f7ff ff82 	bl	80171cc <std>
 80172c8:	68a0      	ldr	r0, [r4, #8]
 80172ca:	2201      	movs	r2, #1
 80172cc:	2109      	movs	r1, #9
 80172ce:	f7ff ff7d 	bl	80171cc <std>
 80172d2:	68e0      	ldr	r0, [r4, #12]
 80172d4:	2202      	movs	r2, #2
 80172d6:	2112      	movs	r1, #18
 80172d8:	f7ff ff78 	bl	80171cc <std>
 80172dc:	2301      	movs	r3, #1
 80172de:	61a3      	str	r3, [r4, #24]
 80172e0:	e7d2      	b.n	8017288 <__sinit+0xc>
 80172e2:	bf00      	nop
 80172e4:	08017a44 	.word	0x08017a44
 80172e8:	08017215 	.word	0x08017215

080172ec <__sfp>:
 80172ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ee:	4607      	mov	r7, r0
 80172f0:	f7ff ffac 	bl	801724c <__sfp_lock_acquire>
 80172f4:	4b1e      	ldr	r3, [pc, #120]	; (8017370 <__sfp+0x84>)
 80172f6:	681e      	ldr	r6, [r3, #0]
 80172f8:	69b3      	ldr	r3, [r6, #24]
 80172fa:	b913      	cbnz	r3, 8017302 <__sfp+0x16>
 80172fc:	4630      	mov	r0, r6
 80172fe:	f7ff ffbd 	bl	801727c <__sinit>
 8017302:	3648      	adds	r6, #72	; 0x48
 8017304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017308:	3b01      	subs	r3, #1
 801730a:	d503      	bpl.n	8017314 <__sfp+0x28>
 801730c:	6833      	ldr	r3, [r6, #0]
 801730e:	b30b      	cbz	r3, 8017354 <__sfp+0x68>
 8017310:	6836      	ldr	r6, [r6, #0]
 8017312:	e7f7      	b.n	8017304 <__sfp+0x18>
 8017314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017318:	b9d5      	cbnz	r5, 8017350 <__sfp+0x64>
 801731a:	4b16      	ldr	r3, [pc, #88]	; (8017374 <__sfp+0x88>)
 801731c:	60e3      	str	r3, [r4, #12]
 801731e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017322:	6665      	str	r5, [r4, #100]	; 0x64
 8017324:	f000 f847 	bl	80173b6 <__retarget_lock_init_recursive>
 8017328:	f7ff ff96 	bl	8017258 <__sfp_lock_release>
 801732c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017334:	6025      	str	r5, [r4, #0]
 8017336:	61a5      	str	r5, [r4, #24]
 8017338:	2208      	movs	r2, #8
 801733a:	4629      	mov	r1, r5
 801733c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017340:	f7ff fc54 	bl	8016bec <memset>
 8017344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801734c:	4620      	mov	r0, r4
 801734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017350:	3468      	adds	r4, #104	; 0x68
 8017352:	e7d9      	b.n	8017308 <__sfp+0x1c>
 8017354:	2104      	movs	r1, #4
 8017356:	4638      	mov	r0, r7
 8017358:	f7ff ff62 	bl	8017220 <__sfmoreglue>
 801735c:	4604      	mov	r4, r0
 801735e:	6030      	str	r0, [r6, #0]
 8017360:	2800      	cmp	r0, #0
 8017362:	d1d5      	bne.n	8017310 <__sfp+0x24>
 8017364:	f7ff ff78 	bl	8017258 <__sfp_lock_release>
 8017368:	230c      	movs	r3, #12
 801736a:	603b      	str	r3, [r7, #0]
 801736c:	e7ee      	b.n	801734c <__sfp+0x60>
 801736e:	bf00      	nop
 8017370:	08017a44 	.word	0x08017a44
 8017374:	ffff0001 	.word	0xffff0001

08017378 <_fwalk_reent>:
 8017378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801737c:	4606      	mov	r6, r0
 801737e:	4688      	mov	r8, r1
 8017380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017384:	2700      	movs	r7, #0
 8017386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801738a:	f1b9 0901 	subs.w	r9, r9, #1
 801738e:	d505      	bpl.n	801739c <_fwalk_reent+0x24>
 8017390:	6824      	ldr	r4, [r4, #0]
 8017392:	2c00      	cmp	r4, #0
 8017394:	d1f7      	bne.n	8017386 <_fwalk_reent+0xe>
 8017396:	4638      	mov	r0, r7
 8017398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801739c:	89ab      	ldrh	r3, [r5, #12]
 801739e:	2b01      	cmp	r3, #1
 80173a0:	d907      	bls.n	80173b2 <_fwalk_reent+0x3a>
 80173a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173a6:	3301      	adds	r3, #1
 80173a8:	d003      	beq.n	80173b2 <_fwalk_reent+0x3a>
 80173aa:	4629      	mov	r1, r5
 80173ac:	4630      	mov	r0, r6
 80173ae:	47c0      	blx	r8
 80173b0:	4307      	orrs	r7, r0
 80173b2:	3568      	adds	r5, #104	; 0x68
 80173b4:	e7e9      	b.n	801738a <_fwalk_reent+0x12>

080173b6 <__retarget_lock_init_recursive>:
 80173b6:	4770      	bx	lr

080173b8 <__retarget_lock_acquire_recursive>:
 80173b8:	4770      	bx	lr

080173ba <__retarget_lock_release_recursive>:
 80173ba:	4770      	bx	lr

080173bc <__swhatbuf_r>:
 80173bc:	b570      	push	{r4, r5, r6, lr}
 80173be:	460e      	mov	r6, r1
 80173c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c4:	2900      	cmp	r1, #0
 80173c6:	b096      	sub	sp, #88	; 0x58
 80173c8:	4614      	mov	r4, r2
 80173ca:	461d      	mov	r5, r3
 80173cc:	da08      	bge.n	80173e0 <__swhatbuf_r+0x24>
 80173ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80173d2:	2200      	movs	r2, #0
 80173d4:	602a      	str	r2, [r5, #0]
 80173d6:	061a      	lsls	r2, r3, #24
 80173d8:	d410      	bmi.n	80173fc <__swhatbuf_r+0x40>
 80173da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80173de:	e00e      	b.n	80173fe <__swhatbuf_r+0x42>
 80173e0:	466a      	mov	r2, sp
 80173e2:	f000 f8c3 	bl	801756c <_fstat_r>
 80173e6:	2800      	cmp	r0, #0
 80173e8:	dbf1      	blt.n	80173ce <__swhatbuf_r+0x12>
 80173ea:	9a01      	ldr	r2, [sp, #4]
 80173ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80173f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80173f4:	425a      	negs	r2, r3
 80173f6:	415a      	adcs	r2, r3
 80173f8:	602a      	str	r2, [r5, #0]
 80173fa:	e7ee      	b.n	80173da <__swhatbuf_r+0x1e>
 80173fc:	2340      	movs	r3, #64	; 0x40
 80173fe:	2000      	movs	r0, #0
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	b016      	add	sp, #88	; 0x58
 8017404:	bd70      	pop	{r4, r5, r6, pc}
	...

08017408 <__smakebuf_r>:
 8017408:	898b      	ldrh	r3, [r1, #12]
 801740a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801740c:	079d      	lsls	r5, r3, #30
 801740e:	4606      	mov	r6, r0
 8017410:	460c      	mov	r4, r1
 8017412:	d507      	bpl.n	8017424 <__smakebuf_r+0x1c>
 8017414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017418:	6023      	str	r3, [r4, #0]
 801741a:	6123      	str	r3, [r4, #16]
 801741c:	2301      	movs	r3, #1
 801741e:	6163      	str	r3, [r4, #20]
 8017420:	b002      	add	sp, #8
 8017422:	bd70      	pop	{r4, r5, r6, pc}
 8017424:	ab01      	add	r3, sp, #4
 8017426:	466a      	mov	r2, sp
 8017428:	f7ff ffc8 	bl	80173bc <__swhatbuf_r>
 801742c:	9900      	ldr	r1, [sp, #0]
 801742e:	4605      	mov	r5, r0
 8017430:	4630      	mov	r0, r6
 8017432:	f7ff fc4f 	bl	8016cd4 <_malloc_r>
 8017436:	b948      	cbnz	r0, 801744c <__smakebuf_r+0x44>
 8017438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801743c:	059a      	lsls	r2, r3, #22
 801743e:	d4ef      	bmi.n	8017420 <__smakebuf_r+0x18>
 8017440:	f023 0303 	bic.w	r3, r3, #3
 8017444:	f043 0302 	orr.w	r3, r3, #2
 8017448:	81a3      	strh	r3, [r4, #12]
 801744a:	e7e3      	b.n	8017414 <__smakebuf_r+0xc>
 801744c:	4b0d      	ldr	r3, [pc, #52]	; (8017484 <__smakebuf_r+0x7c>)
 801744e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017450:	89a3      	ldrh	r3, [r4, #12]
 8017452:	6020      	str	r0, [r4, #0]
 8017454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017458:	81a3      	strh	r3, [r4, #12]
 801745a:	9b00      	ldr	r3, [sp, #0]
 801745c:	6163      	str	r3, [r4, #20]
 801745e:	9b01      	ldr	r3, [sp, #4]
 8017460:	6120      	str	r0, [r4, #16]
 8017462:	b15b      	cbz	r3, 801747c <__smakebuf_r+0x74>
 8017464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017468:	4630      	mov	r0, r6
 801746a:	f000 f891 	bl	8017590 <_isatty_r>
 801746e:	b128      	cbz	r0, 801747c <__smakebuf_r+0x74>
 8017470:	89a3      	ldrh	r3, [r4, #12]
 8017472:	f023 0303 	bic.w	r3, r3, #3
 8017476:	f043 0301 	orr.w	r3, r3, #1
 801747a:	81a3      	strh	r3, [r4, #12]
 801747c:	89a0      	ldrh	r0, [r4, #12]
 801747e:	4305      	orrs	r5, r0
 8017480:	81a5      	strh	r5, [r4, #12]
 8017482:	e7cd      	b.n	8017420 <__smakebuf_r+0x18>
 8017484:	08017215 	.word	0x08017215

08017488 <__malloc_lock>:
 8017488:	4801      	ldr	r0, [pc, #4]	; (8017490 <__malloc_lock+0x8>)
 801748a:	f7ff bf95 	b.w	80173b8 <__retarget_lock_acquire_recursive>
 801748e:	bf00      	nop
 8017490:	24005a40 	.word	0x24005a40

08017494 <__malloc_unlock>:
 8017494:	4801      	ldr	r0, [pc, #4]	; (801749c <__malloc_unlock+0x8>)
 8017496:	f7ff bf90 	b.w	80173ba <__retarget_lock_release_recursive>
 801749a:	bf00      	nop
 801749c:	24005a40 	.word	0x24005a40

080174a0 <__sread>:
 80174a0:	b510      	push	{r4, lr}
 80174a2:	460c      	mov	r4, r1
 80174a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174a8:	f000 f894 	bl	80175d4 <_read_r>
 80174ac:	2800      	cmp	r0, #0
 80174ae:	bfab      	itete	ge
 80174b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80174b2:	89a3      	ldrhlt	r3, [r4, #12]
 80174b4:	181b      	addge	r3, r3, r0
 80174b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80174ba:	bfac      	ite	ge
 80174bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80174be:	81a3      	strhlt	r3, [r4, #12]
 80174c0:	bd10      	pop	{r4, pc}

080174c2 <__swrite>:
 80174c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c6:	461f      	mov	r7, r3
 80174c8:	898b      	ldrh	r3, [r1, #12]
 80174ca:	05db      	lsls	r3, r3, #23
 80174cc:	4605      	mov	r5, r0
 80174ce:	460c      	mov	r4, r1
 80174d0:	4616      	mov	r6, r2
 80174d2:	d505      	bpl.n	80174e0 <__swrite+0x1e>
 80174d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174d8:	2302      	movs	r3, #2
 80174da:	2200      	movs	r2, #0
 80174dc:	f000 f868 	bl	80175b0 <_lseek_r>
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80174ea:	81a3      	strh	r3, [r4, #12]
 80174ec:	4632      	mov	r2, r6
 80174ee:	463b      	mov	r3, r7
 80174f0:	4628      	mov	r0, r5
 80174f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174f6:	f000 b817 	b.w	8017528 <_write_r>

080174fa <__sseek>:
 80174fa:	b510      	push	{r4, lr}
 80174fc:	460c      	mov	r4, r1
 80174fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017502:	f000 f855 	bl	80175b0 <_lseek_r>
 8017506:	1c43      	adds	r3, r0, #1
 8017508:	89a3      	ldrh	r3, [r4, #12]
 801750a:	bf15      	itete	ne
 801750c:	6560      	strne	r0, [r4, #84]	; 0x54
 801750e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017516:	81a3      	strheq	r3, [r4, #12]
 8017518:	bf18      	it	ne
 801751a:	81a3      	strhne	r3, [r4, #12]
 801751c:	bd10      	pop	{r4, pc}

0801751e <__sclose>:
 801751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017522:	f000 b813 	b.w	801754c <_close_r>
	...

08017528 <_write_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4d07      	ldr	r5, [pc, #28]	; (8017548 <_write_r+0x20>)
 801752c:	4604      	mov	r4, r0
 801752e:	4608      	mov	r0, r1
 8017530:	4611      	mov	r1, r2
 8017532:	2200      	movs	r2, #0
 8017534:	602a      	str	r2, [r5, #0]
 8017536:	461a      	mov	r2, r3
 8017538:	f7ec fc39 	bl	8003dae <_write>
 801753c:	1c43      	adds	r3, r0, #1
 801753e:	d102      	bne.n	8017546 <_write_r+0x1e>
 8017540:	682b      	ldr	r3, [r5, #0]
 8017542:	b103      	cbz	r3, 8017546 <_write_r+0x1e>
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	bd38      	pop	{r3, r4, r5, pc}
 8017548:	24005a44 	.word	0x24005a44

0801754c <_close_r>:
 801754c:	b538      	push	{r3, r4, r5, lr}
 801754e:	4d06      	ldr	r5, [pc, #24]	; (8017568 <_close_r+0x1c>)
 8017550:	2300      	movs	r3, #0
 8017552:	4604      	mov	r4, r0
 8017554:	4608      	mov	r0, r1
 8017556:	602b      	str	r3, [r5, #0]
 8017558:	f7ec fc45 	bl	8003de6 <_close>
 801755c:	1c43      	adds	r3, r0, #1
 801755e:	d102      	bne.n	8017566 <_close_r+0x1a>
 8017560:	682b      	ldr	r3, [r5, #0]
 8017562:	b103      	cbz	r3, 8017566 <_close_r+0x1a>
 8017564:	6023      	str	r3, [r4, #0]
 8017566:	bd38      	pop	{r3, r4, r5, pc}
 8017568:	24005a44 	.word	0x24005a44

0801756c <_fstat_r>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	4d07      	ldr	r5, [pc, #28]	; (801758c <_fstat_r+0x20>)
 8017570:	2300      	movs	r3, #0
 8017572:	4604      	mov	r4, r0
 8017574:	4608      	mov	r0, r1
 8017576:	4611      	mov	r1, r2
 8017578:	602b      	str	r3, [r5, #0]
 801757a:	f7ec fc40 	bl	8003dfe <_fstat>
 801757e:	1c43      	adds	r3, r0, #1
 8017580:	d102      	bne.n	8017588 <_fstat_r+0x1c>
 8017582:	682b      	ldr	r3, [r5, #0]
 8017584:	b103      	cbz	r3, 8017588 <_fstat_r+0x1c>
 8017586:	6023      	str	r3, [r4, #0]
 8017588:	bd38      	pop	{r3, r4, r5, pc}
 801758a:	bf00      	nop
 801758c:	24005a44 	.word	0x24005a44

08017590 <_isatty_r>:
 8017590:	b538      	push	{r3, r4, r5, lr}
 8017592:	4d06      	ldr	r5, [pc, #24]	; (80175ac <_isatty_r+0x1c>)
 8017594:	2300      	movs	r3, #0
 8017596:	4604      	mov	r4, r0
 8017598:	4608      	mov	r0, r1
 801759a:	602b      	str	r3, [r5, #0]
 801759c:	f7ec fc3f 	bl	8003e1e <_isatty>
 80175a0:	1c43      	adds	r3, r0, #1
 80175a2:	d102      	bne.n	80175aa <_isatty_r+0x1a>
 80175a4:	682b      	ldr	r3, [r5, #0]
 80175a6:	b103      	cbz	r3, 80175aa <_isatty_r+0x1a>
 80175a8:	6023      	str	r3, [r4, #0]
 80175aa:	bd38      	pop	{r3, r4, r5, pc}
 80175ac:	24005a44 	.word	0x24005a44

080175b0 <_lseek_r>:
 80175b0:	b538      	push	{r3, r4, r5, lr}
 80175b2:	4d07      	ldr	r5, [pc, #28]	; (80175d0 <_lseek_r+0x20>)
 80175b4:	4604      	mov	r4, r0
 80175b6:	4608      	mov	r0, r1
 80175b8:	4611      	mov	r1, r2
 80175ba:	2200      	movs	r2, #0
 80175bc:	602a      	str	r2, [r5, #0]
 80175be:	461a      	mov	r2, r3
 80175c0:	f7ec fc38 	bl	8003e34 <_lseek>
 80175c4:	1c43      	adds	r3, r0, #1
 80175c6:	d102      	bne.n	80175ce <_lseek_r+0x1e>
 80175c8:	682b      	ldr	r3, [r5, #0]
 80175ca:	b103      	cbz	r3, 80175ce <_lseek_r+0x1e>
 80175cc:	6023      	str	r3, [r4, #0]
 80175ce:	bd38      	pop	{r3, r4, r5, pc}
 80175d0:	24005a44 	.word	0x24005a44

080175d4 <_read_r>:
 80175d4:	b538      	push	{r3, r4, r5, lr}
 80175d6:	4d07      	ldr	r5, [pc, #28]	; (80175f4 <_read_r+0x20>)
 80175d8:	4604      	mov	r4, r0
 80175da:	4608      	mov	r0, r1
 80175dc:	4611      	mov	r1, r2
 80175de:	2200      	movs	r2, #0
 80175e0:	602a      	str	r2, [r5, #0]
 80175e2:	461a      	mov	r2, r3
 80175e4:	f7ec fbc6 	bl	8003d74 <_read>
 80175e8:	1c43      	adds	r3, r0, #1
 80175ea:	d102      	bne.n	80175f2 <_read_r+0x1e>
 80175ec:	682b      	ldr	r3, [r5, #0]
 80175ee:	b103      	cbz	r3, 80175f2 <_read_r+0x1e>
 80175f0:	6023      	str	r3, [r4, #0]
 80175f2:	bd38      	pop	{r3, r4, r5, pc}
 80175f4:	24005a44 	.word	0x24005a44

080175f8 <_init>:
 80175f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175fa:	bf00      	nop
 80175fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175fe:	bc08      	pop	{r3}
 8017600:	469e      	mov	lr, r3
 8017602:	4770      	bx	lr

08017604 <_fini>:
 8017604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017606:	bf00      	nop
 8017608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801760a:	bc08      	pop	{r3}
 801760c:	469e      	mov	lr, r3
 801760e:	4770      	bx	lr
