
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011930  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08011bd0  08011bd0  00021bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011ee0  08011ee0  00021ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011ee8  08011ee8  00021ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011eec  08011eec  00021eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011ef0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ee4  24000078  08011f68  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004f5c  08011f68  00034f5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000301f7  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051d7  00000000  00000000  0006029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024d0  00000000  00000000  00065478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000022e8  00000000  00000000  00067948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000742d  00000000  00000000  00069c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e885  00000000  00000000  0007105d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d2ba  00000000  00000000  0009f8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022cb9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a5d8  00000000  00000000  0022cbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011bb8 	.word	0x08011bb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08011bb8 	.word	0x08011bb8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00d fdd6 	bl	800e1ac <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f00d fdcb 	bl	800e1ac <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f00d fdc0 	bl	800e1ac <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f010 fe32 	bl	8011298 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	240003b4 	.word	0x240003b4
 8000640:	24000540 	.word	0x24000540
 8000644:	24000400 	.word	0x24000400
 8000648:	2400044c 	.word	0x2400044c
 800064c:	08011c00 	.word	0x08011c00

08000650 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	496b      	ldr	r1, [pc, #428]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <HAL_UART_RxCpltCallback+0x1bc>)
 800065e:	f00b f8db 	bl	800b818 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b25      	cmp	r3, #37	; 0x25
 800066c:	f200 80c8 	bhi.w	8000800 <HAL_UART_RxCpltCallback+0x1b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000749 	.word	0x08000749
 800067c:	08000759 	.word	0x08000759
 8000680:	08000769 	.word	0x08000769
 8000684:	08000779 	.word	0x08000779
 8000688:	08000789 	.word	0x08000789
 800068c:	08000799 	.word	0x08000799
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007b9 	.word	0x080007b9
 8000698:	08000801 	.word	0x08000801
 800069c:	08000801 	.word	0x08000801
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000711 	.word	0x08000711
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007e1 	.word	0x080007e1
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	080007d9 	.word	0x080007d9
 80006bc:	080007e9 	.word	0x080007e9
 80006c0:	080007f9 	.word	0x080007f9
 80006c4:	08000751 	.word	0x08000751
 80006c8:	08000761 	.word	0x08000761
 80006cc:	08000771 	.word	0x08000771
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000791 	.word	0x08000791
 80006d8:	080007a1 	.word	0x080007a1
 80006dc:	080007b1 	.word	0x080007b1
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000801 	.word	0x08000801
 80006f4:	08000801 	.word	0x08000801
 80006f8:	08000801 	.word	0x08000801
 80006fc:	08000801 	.word	0x08000801
 8000700:	08000801 	.word	0x08000801
 8000704:	08000801 	.word	0x08000801
 8000708:	08000739 	.word	0x08000739
 800070c:	08000741 	.word	0x08000741
	case 0x0B: {
		printf("SDN1 ON\n");
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <HAL_UART_RxCpltCallback+0x1c0>)
 8000712:	f010 fdc1 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 8000716:	e073      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	f010 fdbd 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 800071e:	e06f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 8000720:	483d      	ldr	r0, [pc, #244]	; (8000818 <HAL_UART_RxCpltCallback+0x1c8>)
 8000722:	f010 fdb9 	bl	8011298 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 8000726:	e06b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <HAL_UART_RxCpltCallback+0x1cc>)
 800072a:	f010 fdb5 	bl	8011298 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 800072e:	e067      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000730:	483b      	ldr	r0, [pc, #236]	; (8000820 <HAL_UART_RxCpltCallback+0x1d0>)
 8000732:	f010 fdb1 	bl	8011298 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000736:	e063      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f010 fdad 	bl	8011298 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800073e:	e05f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	f010 fda9 	bl	8011298 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000746:	e05b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <HAL_UART_RxCpltCallback+0x1dc>)
 800074a:	f010 fda5 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <HAL_UART_RxCpltCallback+0x1e0>)
 8000752:	f010 fda1 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000756:	e053      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_UART_RxCpltCallback+0x1e4>)
 800075a:	f010 fd9d 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800075e:	e04f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <HAL_UART_RxCpltCallback+0x1e8>)
 8000762:	f010 fd99 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000766:	e04b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <HAL_UART_RxCpltCallback+0x1ec>)
 800076a:	f010 fd95 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800076e:	e047      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000770:	4833      	ldr	r0, [pc, #204]	; (8000840 <HAL_UART_RxCpltCallback+0x1f0>)
 8000772:	f010 fd91 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000776:	e043      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <HAL_UART_RxCpltCallback+0x1f4>)
 800077a:	f010 fd8d 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800077e:	e03f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000780:	4831      	ldr	r0, [pc, #196]	; (8000848 <HAL_UART_RxCpltCallback+0x1f8>)
 8000782:	f010 fd89 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000786:	e03b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <HAL_UART_RxCpltCallback+0x1fc>)
 800078a:	f010 fd85 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800078e:	e037      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <HAL_UART_RxCpltCallback+0x200>)
 8000792:	f010 fd81 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <HAL_UART_RxCpltCallback+0x204>)
 800079a:	f010 fd7d 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800079e:	e02f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <HAL_UART_RxCpltCallback+0x208>)
 80007a2:	f010 fd79 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 80007a6:	e02b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_UART_RxCpltCallback+0x20c>)
 80007aa:	f010 fd75 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 80007ae:	e027      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <HAL_UART_RxCpltCallback+0x210>)
 80007b2:	f010 fd71 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 80007b6:	e023      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <HAL_UART_RxCpltCallback+0x214>)
 80007ba:	f010 fd6d 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <HAL_UART_RxCpltCallback+0x218>)
 80007c2:	f010 fd69 	bl	8011298 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 80007c6:	e01b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <HAL_UART_RxCpltCallback+0x21c>)
 80007ca:	f010 fd65 	bl	8011298 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_UART_RxCpltCallback+0x220>)
 80007d2:	f010 fd61 	bl	8011298 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x224>)
 80007da:	f010 fd5d 	bl	8011298 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007de:	e00f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_UART_RxCpltCallback+0x228>)
 80007e2:	f010 fd59 	bl	8011298 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <HAL_UART_RxCpltCallback+0x22c>)
 80007ea:	f010 fd55 	bl	8011298 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007ee:	e007      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <HAL_UART_RxCpltCallback+0x230>)
 80007f2:	f010 fd51 	bl	8011298 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007f6:	e003      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <HAL_UART_RxCpltCallback+0x234>)
 80007fa:	f010 fd4d 	bl	8011298 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007fe:	bf00      	nop
	}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24000544 	.word	0x24000544
 800080c:	24000498 	.word	0x24000498
 8000810:	08011c18 	.word	0x08011c18
 8000814:	08011c20 	.word	0x08011c20
 8000818:	08011c2c 	.word	0x08011c2c
 800081c:	08011c34 	.word	0x08011c34
 8000820:	08011c40 	.word	0x08011c40
 8000824:	08011c54 	.word	0x08011c54
 8000828:	08011c60 	.word	0x08011c60
 800082c:	08011c6c 	.word	0x08011c6c
 8000830:	08011c78 	.word	0x08011c78
 8000834:	08011c84 	.word	0x08011c84
 8000838:	08011c90 	.word	0x08011c90
 800083c:	08011ca0 	.word	0x08011ca0
 8000840:	08011cac 	.word	0x08011cac
 8000844:	08011cb8 	.word	0x08011cb8
 8000848:	08011cc8 	.word	0x08011cc8
 800084c:	08011cd8 	.word	0x08011cd8
 8000850:	08011ce4 	.word	0x08011ce4
 8000854:	08011cf0 	.word	0x08011cf0
 8000858:	08011cfc 	.word	0x08011cfc
 800085c:	08011d08 	.word	0x08011d08
 8000860:	08011d14 	.word	0x08011d14
 8000864:	08011d20 	.word	0x08011d20
 8000868:	08011d2c 	.word	0x08011d2c
 800086c:	08011d3c 	.word	0x08011d3c
 8000870:	08011d4c 	.word	0x08011d4c
 8000874:	08011d54 	.word	0x08011d54
 8000878:	08011d5c 	.word	0x08011d5c
 800087c:	08011d64 	.word	0x08011d64
 8000880:	08011d70 	.word	0x08011d70
 8000884:	08011d78 	.word	0x08011d78

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 fcc6 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f874 	bl	800097c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000894:	f000 f8f0 	bl	8000a78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 fd8e 	bl	80013b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800089c:	f000 fd5c 	bl	8001358 <MX_DMA_Init>
  MX_TIM3_Init();
 80008a0:	f000 fcc0 	bl	8001224 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 fd0c 	bl	80012c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a8:	f000 fb00 	bl	8000eac <MX_I2C1_Init>
  MX_SPI2_Init();
 80008ac:	f000 fb3e 	bl	8000f2c <MX_SPI2_Init>
  MX_TIM2_Init();
 80008b0:	f000 fc42 	bl	8001138 <MX_TIM2_Init>
  MX_TIM1_Init();
 80008b4:	f000 fb92 	bl	8000fdc <MX_TIM1_Init>
  MX_ADC3_Init();
 80008b8:	f000 fa34 	bl	8000d24 <MX_ADC3_Init>
  MX_ADC1_Init();
 80008bc:	f000 f90c 	bl	8000ad8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008c0:	f000 fac2 	bl	8000e48 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	481c      	ldr	r0, [pc, #112]	; (8000938 <main+0xb0>)
 80008c8:	f009 fd00 	bl	800a2cc <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	481b      	ldr	r0, [pc, #108]	; (800093c <main+0xb4>)
 80008d0:	f009 fcfc 	bl	800a2cc <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008d4:	2100      	movs	r1, #0
 80008d6:	481a      	ldr	r0, [pc, #104]	; (8000940 <main+0xb8>)
 80008d8:	f009 fcf8 	bl	800a2cc <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008dc:	f00d fb30 	bl	800df40 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80008e0:	4a18      	ldr	r2, [pc, #96]	; (8000944 <main+0xbc>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4818      	ldr	r0, [pc, #96]	; (8000948 <main+0xc0>)
 80008e6:	f00d fb75 	bl	800dfd4 <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <main+0xc4>)
 80008ee:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <main+0xc8>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <main+0xcc>)
 80008f6:	f00d fb6d 	bl	800dfd4 <osThreadNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <main+0xd0>)
 80008fe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <main+0xd4>)
 8000902:	2100      	movs	r1, #0
 8000904:	4816      	ldr	r0, [pc, #88]	; (8000960 <main+0xd8>)
 8000906:	f00d fb65 	bl	800dfd4 <osThreadNew>
 800090a:	4603      	mov	r3, r0
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <main+0xdc>)
 800090e:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <main+0xe0>)
 8000912:	2100      	movs	r1, #0
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <main+0xe4>)
 8000916:	f00d fb5d 	bl	800dfd4 <osThreadNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <main+0xe8>)
 800091e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 8000920:	2000      	movs	r0, #0
 8000922:	f00d fc04 	bl	800e12e <osEventFlagsNew>
 8000926:	4603      	mov	r3, r0
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <main+0xec>)
 800092a:	6013      	str	r3, [r2, #0]
  printf("Starting kernal...\n");
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <main+0xf0>)
 800092e:	f010 fcb3 	bl	8011298 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000932:	f00d fb29 	bl	800df88 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000936:	e7fe      	b.n	8000936 <main+0xae>
 8000938:	240003b4 	.word	0x240003b4
 800093c:	24000400 	.word	0x24000400
 8000940:	2400044c 	.word	0x2400044c
 8000944:	08011dac 	.word	0x08011dac
 8000948:	0800148d 	.word	0x0800148d
 800094c:	2400052c 	.word	0x2400052c
 8000950:	08011dd0 	.word	0x08011dd0
 8000954:	080014bd 	.word	0x080014bd
 8000958:	24000530 	.word	0x24000530
 800095c:	08011df4 	.word	0x08011df4
 8000960:	080014ed 	.word	0x080014ed
 8000964:	24000534 	.word	0x24000534
 8000968:	08011e18 	.word	0x08011e18
 800096c:	0800151d 	.word	0x0800151d
 8000970:	24000538 	.word	0x24000538
 8000974:	24000540 	.word	0x24000540
 8000978:	08011d80 	.word	0x08011d80

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b09c      	sub	sp, #112	; 0x70
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	224c      	movs	r2, #76	; 0x4c
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f010 fc0e 	bl	80111ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2220      	movs	r2, #32
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f010 fc08 	bl	80111ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800099c:	2002      	movs	r0, #2
 800099e:	f005 fd27 	bl	80063f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <SystemClock_Config+0xf4>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <SystemClock_Config+0xf4>)
 80009ac:	f023 0301 	bic.w	r3, r3, #1
 80009b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <SystemClock_Config+0xf4>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <SystemClock_Config+0xf8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c4:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <SystemClock_Config+0xf8>)
 80009c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <SystemClock_Config+0xf8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d8:	bf00      	nop
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <SystemClock_Config+0xf8>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009e6:	d1f8      	bne.n	80009da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e8:	2302      	movs	r3, #2
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f4:	2302      	movs	r3, #2
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f8:	2300      	movs	r3, #0
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a00:	2309      	movs	r3, #9
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a10:	230c      	movs	r3, #12
 8000a12:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a14:	2302      	movs	r3, #2
 8000a16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fd1e 	bl	8006464 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a2e:	f000 fd99 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	233f      	movs	r3, #63	; 0x3f
 8000a34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2101      	movs	r1, #1
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 f95d 	bl	8006d18 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000a64:	f000 fd7e 	bl	8001564 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3770      	adds	r7, #112	; 0x70
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	58000400 	.word	0x58000400
 8000a74:	58024800 	.word	0x58024800

08000a78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0b0      	sub	sp, #192	; 0xc0
 8000a7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	22c0      	movs	r2, #192	; 0xc0
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f010 fb91 	bl	80111ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000aaa:	23c0      	movs	r3, #192	; 0xc0
 8000aac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000aae:	2320      	movs	r3, #32
 8000ab0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000ab2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f006 fcf7 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000acc:	f000 fd4a 	bl	8001564 <Error_Handler>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	37c0      	adds	r7, #192	; 0xc0
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000afc:	4b7c      	ldr	r3, [pc, #496]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000afe:	4a7d      	ldr	r2, [pc, #500]	; (8000cf4 <MX_ADC1_Init+0x21c>)
 8000b00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b02:	4b7b      	ldr	r3, [pc, #492]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b0a:	4b79      	ldr	r3, [pc, #484]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b10:	4b77      	ldr	r3, [pc, #476]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b16:	4b76      	ldr	r3, [pc, #472]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b1c:	4b74      	ldr	r3, [pc, #464]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b22:	4b73      	ldr	r3, [pc, #460]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000b28:	4b71      	ldr	r3, [pc, #452]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b2a:	220b      	movs	r2, #11
 8000b2c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2e:	4b70      	ldr	r3, [pc, #448]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b34:	4b6e      	ldr	r3, [pc, #440]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3a:	4b6d      	ldr	r3, [pc, #436]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b40:	4b6b      	ldr	r3, [pc, #428]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b42:	2203      	movs	r2, #3
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b46:	4b6a      	ldr	r3, [pc, #424]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b4e:	4b68      	ldr	r3, [pc, #416]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b54:	4b66      	ldr	r3, [pc, #408]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b5c:	4864      	ldr	r0, [pc, #400]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b5e:	f001 fd67 	bl	8002630 <HAL_ADC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b68:	f000 fcfc 	bl	8001564 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	485e      	ldr	r0, [pc, #376]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000b78:	f002 fb8a 	bl	8003290 <HAL_ADCEx_MultiModeConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000b82:	f000 fcef 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b86:	4b5c      	ldr	r3, [pc, #368]	; (8000cf8 <MX_ADC1_Init+0x220>)
 8000b88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8a:	2306      	movs	r3, #6
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b92:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b96:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4851      	ldr	r0, [pc, #324]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000baa:	f001 fee3 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000bb4:	f000 fcd6 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bb8:	4b50      	ldr	r3, [pc, #320]	; (8000cfc <MX_ADC1_Init+0x224>)
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	484a      	ldr	r0, [pc, #296]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000bc6:	f001 fed5 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000bd0:	f000 fcc8 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bd4:	4b4a      	ldr	r3, [pc, #296]	; (8000d00 <MX_ADC1_Init+0x228>)
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4843      	ldr	r0, [pc, #268]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000be2:	f001 fec7 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000bec:	f000 fcba 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bf0:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <MX_ADC1_Init+0x22c>)
 8000bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bf4:	2318      	movs	r3, #24
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	483c      	ldr	r0, [pc, #240]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000bfe:	f001 feb9 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000c08:	f000 fcac 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c0c:	4b3e      	ldr	r3, [pc, #248]	; (8000d08 <MX_ADC1_Init+0x230>)
 8000c0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4835      	ldr	r0, [pc, #212]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000c1c:	f001 feaa 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000c26:	f000 fc9d 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <MX_ADC1_Init+0x234>)
 8000c2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c2e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	482d      	ldr	r0, [pc, #180]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000c3a:	f001 fe9b 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000c44:	f000 fc8e 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <MX_ADC1_Init+0x238>)
 8000c4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c4c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000c50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	4619      	mov	r1, r3
 8000c56:	4826      	ldr	r0, [pc, #152]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000c58:	f001 fe8c 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000c62:	f000 fc7f 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <MX_ADC1_Init+0x23c>)
 8000c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c6a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000c76:	f001 fe7d 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000c80:	f000 fc70 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_ADC1_Init+0x240>)
 8000c86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000c88:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000c8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000c94:	f001 fe6e 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000c9e:	f000 fc61 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_ADC1_Init+0x244>)
 8000ca4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000caa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000cb6:	f001 fe5d 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000cc0:	f000 fc50 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_ADC1_Init+0x248>)
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000cc8:	f240 2306 	movw	r3, #518	; 0x206
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_ADC1_Init+0x218>)
 8000cd8:	f001 fe4c 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000ce2:	f000 fc3f 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	24000094 	.word	0x24000094
 8000cf4:	40022000 	.word	0x40022000
 8000cf8:	0c900008 	.word	0x0c900008
 8000cfc:	10c00010 	.word	0x10c00010
 8000d00:	14f00020 	.word	0x14f00020
 8000d04:	1d500080 	.word	0x1d500080
 8000d08:	21800100 	.word	0x21800100
 8000d0c:	25b00200 	.word	0x25b00200
 8000d10:	2a000400 	.word	0x2a000400
 8000d14:	2e300800 	.word	0x2e300800
 8000d18:	3ac04000 	.word	0x3ac04000
 8000d1c:	3ef08000 	.word	0x3ef08000
 8000d20:	47520000 	.word	0x47520000

08000d24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d3c:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <MX_ADC3_Init+0x114>)
 8000d40:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d48:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d54:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d5a:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000d60:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d72:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d94:	4827      	ldr	r0, [pc, #156]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000d96:	f001 fc4b 	bl	8002630 <HAL_ADC_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8000da0:	f000 fbe0 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <MX_ADC3_Init+0x118>)
 8000da6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da8:	2306      	movs	r3, #6
 8000daa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000dac:	2307      	movs	r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000db4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db6:	2304      	movs	r3, #4
 8000db8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481b      	ldr	r0, [pc, #108]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000dc8:	f001 fdd4 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000dd2:	f000 fbc7 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_ADC3_Init+0x11c>)
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4814      	ldr	r0, [pc, #80]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000de4:	f001 fdc6 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000dee:	f000 fbb9 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000df2:	2301      	movs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000df6:	2312      	movs	r3, #18
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000e00:	f001 fdb8 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000e0a:	f000 fbab 	bl	8001564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_ADC3_Init+0x120>)
 8000e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e12:	2318      	movs	r3, #24
 8000e14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <MX_ADC3_Init+0x110>)
 8000e1c:	f001 fdaa 	bl	8002974 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8000e26:	f000 fb9d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	240000f8 	.word	0x240000f8
 8000e38:	58026000 	.word	0x58026000
 8000e3c:	cb840000 	.word	0xcb840000
 8000e40:	cfb80000 	.word	0xcfb80000
 8000e44:	04300002 	.word	0x04300002

08000e48 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2224      	movs	r2, #36	; 0x24
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f010 f9a9 	bl	80111ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_DAC1_Init+0x5c>)
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_DAC1_Init+0x60>)
 8000e5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e60:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <MX_DAC1_Init+0x5c>)
 8000e62:	f002 fbd3 	bl	800360c <HAL_DAC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e6c:	f000 fb7a 	bl	8001564 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e74:	230a      	movs	r3, #10
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_DAC1_Init+0x5c>)
 8000e8c:	f002 fc40 	bl	8003710 <HAL_DAC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000e96:	f000 fb65 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2400024c 	.word	0x2400024c
 8000ea8:	40007400 	.word	0x40007400

08000eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_I2C1_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <MX_I2C1_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ee8:	f005 f94e 	bl	8006188 <HAL_I2C_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ef2:	f000 fb37 	bl	8001564 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000efa:	f005 f9e1 	bl	80062c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f04:	f000 fb2e 	bl	8001564 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000f0c:	f005 fa23 	bl	8006356 <HAL_I2CEx_ConfigDigitalFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 fb25 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	240002d8 	.word	0x240002d8
 8000f24:	40005400 	.word	0x40005400
 8000f28:	00707cbb 	.word	0x00707cbb

08000f2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <MX_SPI2_Init+0xac>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f44:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f48:	220f      	movs	r2, #15
 8000f4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f62:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000f66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_SPI2_Init+0xa8>)
 8000fc0:	f008 ff76 	bl	8009eb0 <HAL_SPI_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000fca:	f000 facb 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2400032c 	.word	0x2400032c
 8000fd8:	40003800 	.word	0x40003800

08000fdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09a      	sub	sp, #104	; 0x68
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	222c      	movs	r2, #44	; 0x2c
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f010 f8c8 	bl	80111ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101c:	4b44      	ldr	r3, [pc, #272]	; (8001130 <MX_TIM1_Init+0x154>)
 800101e:	4a45      	ldr	r2, [pc, #276]	; (8001134 <MX_TIM1_Init+0x158>)
 8001020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <MX_TIM1_Init+0x154>)
 8001024:	227f      	movs	r2, #127	; 0x7f
 8001026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b41      	ldr	r3, [pc, #260]	; (8001130 <MX_TIM1_Init+0x154>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800102e:	4b40      	ldr	r3, [pc, #256]	; (8001130 <MX_TIM1_Init+0x154>)
 8001030:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <MX_TIM1_Init+0x154>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <MX_TIM1_Init+0x154>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <MX_TIM1_Init+0x154>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001048:	4839      	ldr	r0, [pc, #228]	; (8001130 <MX_TIM1_Init+0x154>)
 800104a:	f009 f870 	bl	800a12e <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001054:	f000 fa86 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001062:	4619      	mov	r1, r3
 8001064:	4832      	ldr	r0, [pc, #200]	; (8001130 <MX_TIM1_Init+0x154>)
 8001066:	f009 fd07 	bl	800aa78 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001070:	f000 fa78 	bl	8001564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001074:	482e      	ldr	r0, [pc, #184]	; (8001130 <MX_TIM1_Init+0x154>)
 8001076:	f009 fa83 	bl	800a580 <HAL_TIM_PWM_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001080:	f000 fa70 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001090:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001094:	4619      	mov	r1, r3
 8001096:	4826      	ldr	r0, [pc, #152]	; (8001130 <MX_TIM1_Init+0x154>)
 8001098:	f00a fa44 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010a2:	f000 fa5f 	bl	8001564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	; 0x60
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80010aa:	f240 13df 	movw	r3, #479	; 0x1df
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_TIM1_Init+0x154>)
 80010ce:	f009 fbbf 	bl	800a850 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80010d8:	f000 fa44 	bl	8001564 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <MX_TIM1_Init+0x154>)
 8001112:	f00a fa95 	bl	800b640 <HAL_TIMEx_ConfigBreakDeadTime>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800111c:	f000 fa22 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <MX_TIM1_Init+0x154>)
 8001122:	f000 fd2d 	bl	8001b80 <HAL_TIM_MspPostInit>

}
 8001126:	bf00      	nop
 8001128:	3768      	adds	r7, #104	; 0x68
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	240003b4 	.word	0x240003b4
 8001134:	40010000 	.word	0x40010000

08001138 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <MX_TIM2_Init+0xe8>)
 800116c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_TIM2_Init+0xe8>)
 8001174:	223f      	movs	r2, #63	; 0x3f
 8001176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_TIM2_Init+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_TIM2_Init+0xe8>)
 8001180:	f640 4234 	movw	r2, #3124	; 0xc34
 8001184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_TIM2_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_TIM2_Init+0xe8>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_TIM2_Init+0xe8>)
 8001194:	f008 ffcb 	bl	800a12e <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800119e:	f000 f9e1 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_TIM2_Init+0xe8>)
 80011b0:	f009 fc62 	bl	800aa78 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011ba:	f000 f9d3 	bl	8001564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM2_Init+0xe8>)
 80011c0:	f009 f9de 	bl	800a580 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011ca:	f000 f9cb 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011ce:	2320      	movs	r3, #32
 80011d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <MX_TIM2_Init+0xe8>)
 80011de:	f00a f9a1 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011e8:	f000 f9bc 	bl	8001564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	220c      	movs	r2, #12
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM2_Init+0xe8>)
 8001204:	f009 fb24 	bl	800a850 <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800120e:	f000 f9a9 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM2_Init+0xe8>)
 8001214:	f000 fcb4 	bl	8001b80 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000400 	.word	0x24000400

08001224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM3_Init+0x94>)
 8001244:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <MX_TIM3_Init+0x98>)
 8001246:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM3_Init+0x94>)
 800124a:	223f      	movs	r2, #63	; 0x3f
 800124c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM3_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM3_Init+0x94>)
 8001256:	f240 32e7 	movw	r2, #999	; 0x3e7
 800125a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_TIM3_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM3_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_TIM3_Init+0x94>)
 800126a:	f008 ff60 	bl	800a12e <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001274:	f000 f976 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM3_Init+0x94>)
 8001286:	f009 fbf7 	bl	800aa78 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001290:	f000 f968 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM3_Init+0x94>)
 80012a2:	f00a f93f 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f000 f95a 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2400044c 	.word	0x2400044c
 80012bc:	40000400 	.word	0x40000400

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <MX_USART1_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012cc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_USART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <MX_USART1_UART_Init+0x90>)
 800130a:	f00a fa35 	bl	800b778 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 f926 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_USART1_UART_Init+0x90>)
 800131c:	f00c fd01 	bl	800dd22 <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f000 f91d 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <MX_USART1_UART_Init+0x90>)
 800132e:	f00c fd36 	bl	800dd9e <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f000 f914 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_USART1_UART_Init+0x90>)
 800133e:	f00c fcb7 	bl	800dcb0 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 f90c 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24000498 	.word	0x24000498
 8001354:	40011000 	.word	0x40011000

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_DMA_Init+0x5c>)
 8001360:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <MX_DMA_Init+0x5c>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_DMA_Init+0x5c>)
 8001370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	200b      	movs	r0, #11
 8001382:	f002 f91b 	bl	80035bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001386:	200b      	movs	r0, #11
 8001388:	f002 f932 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2105      	movs	r1, #5
 8001390:	200c      	movs	r0, #12
 8001392:	f002 f913 	bl	80035bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001396:	200c      	movs	r0, #12
 8001398:	f002 f92a 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2010      	movs	r0, #16
 80013a2:	f002 f90b 	bl	80035bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013a6:	2010      	movs	r0, #16
 80013a8:	f002 f922 	bl	80035f0 <HAL_NVIC_EnableIRQ>

}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	58024400 	.word	0x58024400

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_GPIO_Init+0xc8>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	4a2a      	ldr	r2, [pc, #168]	; (8001480 <MX_GPIO_Init+0xc8>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <MX_GPIO_Init+0xc8>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_GPIO_Init+0xc8>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <MX_GPIO_Init+0xc8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_GPIO_Init+0xc8>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_GPIO_Init+0xc8>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <MX_GPIO_Init+0xc8>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_GPIO_Init+0xc8>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_GPIO_Init+0xcc>)
 8001430:	f004 fe90 	bl	8006154 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2164      	movs	r1, #100	; 0x64
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_GPIO_Init+0xd0>)
 800143a:	f004 fe8b 	bl	8006154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800143e:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001442:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <MX_GPIO_Init+0xcc>)
 8001458:	f004 fccc 	bl	8005df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_GPIO_Init+0xd0>)
 8001474:	f004 fcbe 	bl	8005df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	58024400 	.word	0x58024400
 8001484:	58020800 	.word	0x58020800
 8001488:	58020400 	.word	0x58020400

0800148c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pmt_data[PMT_DATA_SIZE];
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <PMT_init+0x28>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	f00c fec8 	bl	800e234 <osEventFlagsWait>
	    //sample_pmt(pmt_data);
		pmt_seq++;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <PMT_init+0x2c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <PMT_init+0x2c>)
 80014ae:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80014b0:	e7f0      	b.n	8001494 <PMT_init+0x8>
 80014b2:	bf00      	nop
 80014b4:	24000540 	.word	0x24000540
 80014b8:	2400053c 	.word	0x2400053c

080014bc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <ERPA_init+0x28>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014cc:	2200      	movs	r2, #0
 80014ce:	2102      	movs	r1, #2
 80014d0:	f00c feb0 	bl	800e234 <osEventFlagsWait>
		erpa_seq++;
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <ERPA_init+0x2c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <ERPA_init+0x2c>)
 80014de:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80014e0:	e7f0      	b.n	80014c4 <ERPA_init+0x8>
 80014e2:	bf00      	nop
 80014e4:	24000540 	.word	0x24000540
 80014e8:	2400053d 	.word	0x2400053d

080014ec <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HK_init+0x28>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fc:	2200      	movs	r2, #0
 80014fe:	2104      	movs	r1, #4
 8001500:	f00c fe98 	bl	800e234 <osEventFlagsWait>
		hk_seq++;
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HK_init+0x2c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <HK_init+0x2c>)
 800150e:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001510:	e7f0      	b.n	80014f4 <HK_init+0x8>
 8001512:	bf00      	nop
 8001514:	24000540 	.word	0x24000540
 8001518:	2400053e 	.word	0x2400053e

0800151c <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	4904      	ldr	r1, [pc, #16]	; (8001538 <UART_RX_init+0x1c>)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <UART_RX_init+0x20>)
 800152a:	f00a f975 	bl	800b818 <HAL_UART_Receive_IT>
		osDelay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f00c fde2 	bl	800e0f8 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001534:	e7f6      	b.n	8001524 <UART_RX_init+0x8>
 8001536:	bf00      	nop
 8001538:	24000544 	.word	0x24000544
 800153c:	24000498 	.word	0x24000498

08001540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001552:	f000 fe9f 	bl	8002294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40001000 	.word	0x40001000

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x38>)
 8001578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_MspInit+0x38>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_MspInit+0x38>)
 8001588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	210f      	movs	r1, #15
 8001598:	f06f 0001 	mvn.w	r0, #1
 800159c:	f002 f80e 	bl	80035bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400

080015ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a7b      	ldr	r2, [pc, #492]	; (80017b8 <HAL_ADC_MspInit+0x20c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	f040 8091 	bne.w	80016f2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015d0:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <HAL_ADC_MspInit+0x210>)
 80015d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d6:	4a79      	ldr	r2, [pc, #484]	; (80017bc <HAL_ADC_MspInit+0x210>)
 80015d8:	f043 0320 	orr.w	r3, r3, #32
 80015dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_ADC_MspInit+0x210>)
 80015e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b73      	ldr	r3, [pc, #460]	; (80017bc <HAL_ADC_MspInit+0x210>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	4a71      	ldr	r2, [pc, #452]	; (80017bc <HAL_ADC_MspInit+0x210>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_ADC_MspInit+0x210>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_ADC_MspInit+0x210>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	4a6a      	ldr	r2, [pc, #424]	; (80017bc <HAL_ADC_MspInit+0x210>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161c:	4b67      	ldr	r3, [pc, #412]	; (80017bc <HAL_ADC_MspInit+0x210>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_ADC_MspInit+0x210>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	4a62      	ldr	r2, [pc, #392]	; (80017bc <HAL_ADC_MspInit+0x210>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800163a:	4b60      	ldr	r3, [pc, #384]	; (80017bc <HAL_ADC_MspInit+0x210>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001648:	2333      	movs	r3, #51	; 0x33
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	4859      	ldr	r0, [pc, #356]	; (80017c0 <HAL_ADC_MspInit+0x214>)
 800165c:	f004 fbca 	bl	8005df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001660:	23ce      	movs	r3, #206	; 0xce
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	4854      	ldr	r0, [pc, #336]	; (80017c4 <HAL_ADC_MspInit+0x218>)
 8001674:	f004 fbbe 	bl	8005df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001678:	2303      	movs	r3, #3
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167c:	2303      	movs	r3, #3
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	484f      	ldr	r0, [pc, #316]	; (80017c8 <HAL_ADC_MspInit+0x21c>)
 800168c:	f004 fbb2 	bl	8005df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_ADC_MspInit+0x220>)
 8001692:	4a4f      	ldr	r2, [pc, #316]	; (80017d0 <HAL_ADC_MspInit+0x224>)
 8001694:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001696:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_ADC_MspInit+0x220>)
 8001698:	2209      	movs	r2, #9
 800169a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_ADC_MspInit+0x220>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b48      	ldr	r3, [pc, #288]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b0:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b8:	4b44      	ldr	r3, [pc, #272]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016c0:	4b42      	ldr	r3, [pc, #264]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016d4:	483d      	ldr	r0, [pc, #244]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016d6:	f002 f967 	bl	80039a8 <HAL_DMA_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80016e0:	f7ff ff40 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a39      	ldr	r2, [pc, #228]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80016ea:	4a38      	ldr	r2, [pc, #224]	; (80017cc <HAL_ADC_MspInit+0x220>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016f0:	e05e      	b.n	80017b0 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <HAL_ADC_MspInit+0x228>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d159      	bne.n	80017b0 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80016fc:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_ADC_MspInit+0x210>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <HAL_ADC_MspInit+0x210>)
 8001704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_ADC_MspInit+0x210>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_ADC_MspInit+0x210>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <HAL_ADC_MspInit+0x210>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_ADC_MspInit+0x210>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001738:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800173c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001740:	f000 fdd4 	bl	80022ec <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001744:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001748:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800174c:	f000 fdce 	bl	80022ec <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_ADC_MspInit+0x230>)
 8001754:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 8001758:	2273      	movs	r2, #115	; 0x73
 800175a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 8001772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001776:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 800177a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800177e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001794:	4810      	ldr	r0, [pc, #64]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 8001796:	f002 f907 	bl	80039a8 <HAL_DMA_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80017a0:	f7ff fee0 	bl	8001564 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 80017a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_ADC_MspInit+0x22c>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017b0:	bf00      	nop
 80017b2:	3738      	adds	r7, #56	; 0x38
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40022000 	.word	0x40022000
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020800 	.word	0x58020800
 80017c4:	58020000 	.word	0x58020000
 80017c8:	58020400 	.word	0x58020400
 80017cc:	2400015c 	.word	0x2400015c
 80017d0:	40020010 	.word	0x40020010
 80017d4:	58026000 	.word	0x58026000
 80017d8:	240001d4 	.word	0x240001d4
 80017dc:	40020028 	.word	0x40020028

080017e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a34      	ldr	r2, [pc, #208]	; (80018d0 <HAL_DAC_MspInit+0xf0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d161      	bne.n	80018c6 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <HAL_DAC_MspInit+0xf4>)
 8001804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001808:	4a32      	ldr	r2, [pc, #200]	; (80018d4 <HAL_DAC_MspInit+0xf4>)
 800180a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800180e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001812:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <HAL_DAC_MspInit+0xf4>)
 8001814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <HAL_DAC_MspInit+0xf4>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001826:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <HAL_DAC_MspInit+0xf4>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_DAC_MspInit+0xf4>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800183e:	2310      	movs	r3, #16
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001842:	2303      	movs	r3, #3
 8001844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4821      	ldr	r0, [pc, #132]	; (80018d8 <HAL_DAC_MspInit+0xf8>)
 8001852:	f004 facf 	bl	8005df4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_DAC_MspInit+0x100>)
 800185a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 800185e:	2243      	movs	r2, #67	; 0x43
 8001860:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001874:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001884:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800189a:	4810      	ldr	r0, [pc, #64]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 800189c:	f002 f884 	bl	80039a8 <HAL_DMA_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80018a6:	f7ff fe5d 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_DAC_MspInit+0xfc>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	2036      	movs	r0, #54	; 0x36
 80018bc:	f001 fe7e 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018c0:	2036      	movs	r0, #54	; 0x36
 80018c2:	f001 fe95 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40007400 	.word	0x40007400
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58020000 	.word	0x58020000
 80018dc:	24000260 	.word	0x24000260
 80018e0:	40020088 	.word	0x40020088

080018e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0ba      	sub	sp, #232	; 0xe8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	22c0      	movs	r2, #192	; 0xc0
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00f fc51 	bl	80111ac <memset>
  if(hi2c->Instance==I2C1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_I2C_MspInit+0xc8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d146      	bne.n	80019a2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001914:	f04f 0208 	mov.w	r2, #8
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4618      	mov	r0, r3
 800192c:	f005 fdc2 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001936:	f7ff fe15 	bl	8001564 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_I2C_MspInit+0xcc>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_I2C_MspInit+0xcc>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_I2C_MspInit+0xcc>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001958:	f44f 7340 	mov.w	r3, #768	; 0x300
 800195c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001972:	2304      	movs	r3, #4
 8001974:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800197c:	4619      	mov	r1, r3
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <HAL_I2C_MspInit+0xd0>)
 8001980:	f004 fa38 	bl	8005df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_I2C_MspInit+0xcc>)
 8001986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_I2C_MspInit+0xcc>)
 800198c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001990:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_I2C_MspInit+0xcc>)
 8001996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	37e8      	adds	r7, #232	; 0xe8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40005400 	.word	0x40005400
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020400 	.word	0x58020400

080019b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0ba      	sub	sp, #232	; 0xe8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	22c0      	movs	r2, #192	; 0xc0
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f00f fbe7 	bl	80111ac <memset>
  if(hspi->Instance==SPI2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_SPI_MspInit+0xc4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d145      	bne.n	8001a74 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fd59 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a08:	f7ff fdac 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_SPI_MspInit+0xc8>)
 8001a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <HAL_SPI_MspInit+0xc8>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_SPI_MspInit+0xc8>)
 8001a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_SPI_MspInit+0xc8>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <HAL_SPI_MspInit+0xc8>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_SPI_MspInit+0xc8>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a48:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a62:	2305      	movs	r3, #5
 8001a64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_SPI_MspInit+0xcc>)
 8001a70:	f004 f9c0 	bl	8005df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	37e8      	adds	r7, #232	; 0xe8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40003800 	.word	0x40003800
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020400 	.word	0x58020400

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a37      	ldr	r2, [pc, #220]	; (8001b74 <HAL_TIM_Base_MspInit+0xec>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12f      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa0:	4a35      	ldr	r2, [pc, #212]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aaa:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2105      	movs	r1, #5
 8001abc:	2018      	movs	r0, #24
 8001abe:	f001 fd7d 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001ac2:	2018      	movs	r0, #24
 8001ac4:	f001 fd94 	bl	80035f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2105      	movs	r1, #5
 8001acc:	2019      	movs	r0, #25
 8001ace:	f001 fd75 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ad2:	2019      	movs	r0, #25
 8001ad4:	f001 fd8c 	bl	80035f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	201a      	movs	r0, #26
 8001ade:	f001 fd6d 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ae2:	201a      	movs	r0, #26
 8001ae4:	f001 fd84 	bl	80035f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2105      	movs	r1, #5
 8001aec:	201b      	movs	r0, #27
 8001aee:	f001 fd65 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001af2:	201b      	movs	r0, #27
 8001af4:	f001 fd7c 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001af8:	e038      	b.n	8001b6c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b02:	d117      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	201c      	movs	r0, #28
 8001b28:	f001 fd48 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b2c:	201c      	movs	r0, #28
 8001b2e:	f001 fd5f 	bl	80035f0 <HAL_NVIC_EnableIRQ>
}
 8001b32:	e01b      	b.n	8001b6c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_TIM_Base_MspInit+0xf4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d116      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001b46:	f043 0302 	orr.w	r3, r3, #2
 8001b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_TIM_Base_MspInit+0xf0>)
 8001b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	201d      	movs	r0, #29
 8001b62:	f001 fd2b 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b66:	201d      	movs	r0, #29
 8001b68:	f001 fd42 	bl	80035f0 <HAL_NVIC_EnableIRQ>
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40010000 	.word	0x40010000
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	40000400 	.word	0x40000400

08001b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_TIM_MspPostInit+0xb8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d120      	bne.n	8001be4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_TIM_MspPostInit+0xbc>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_TIM_MspPostInit+0xbc>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_TIM_MspPostInit+0xbc>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4818      	ldr	r0, [pc, #96]	; (8001c40 <HAL_TIM_MspPostInit+0xc0>)
 8001bde:	f004 f909 	bl	8005df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001be2:	e024      	b.n	8001c2e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d11f      	bne.n	8001c2e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_TIM_MspPostInit+0xbc>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <HAL_TIM_MspPostInit+0xbc>)
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_TIM_MspPostInit+0xbc>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <HAL_TIM_MspPostInit+0xc4>)
 8001c2a:	f004 f8e3 	bl	8005df4 <HAL_GPIO_Init>
}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	58020000 	.word	0x58020000
 8001c44:	58020400 	.word	0x58020400

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0ba      	sub	sp, #232	; 0xe8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	22c0      	movs	r2, #192	; 0xc0
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00f fa9f 	bl	80111ac <memset>
  if(huart->Instance==USART1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_UART_MspInit+0xd8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d14e      	bne.n	8001d16 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c78:	f04f 0201 	mov.w	r2, #1
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 fc10 	bl	80074b4 <HAL_RCCEx_PeriphCLKConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c9a:	f7ff fc63 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_UART_MspInit+0xe0>)
 8001d02:	f004 f877 	bl	8005df4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2105      	movs	r1, #5
 8001d0a:	2025      	movs	r0, #37	; 0x25
 8001d0c:	f001 fc56 	bl	80035bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d10:	2025      	movs	r0, #37	; 0x25
 8001d12:	f001 fc6d 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	37e8      	adds	r7, #232	; 0xe8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40011000 	.word	0x40011000
 8001d24:	58024400 	.word	0x58024400
 8001d28:	58020000 	.word	0x58020000

08001d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b090      	sub	sp, #64	; 0x40
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d827      	bhi.n	8001d8a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	2036      	movs	r0, #54	; 0x36
 8001d40:	f001 fc3c 	bl	80035bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d44:	2036      	movs	r0, #54	; 0x36
 8001d46:	f001 fc53 	bl	80035f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001d4a:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_InitTick+0xc4>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <HAL_InitTick+0xc8>)
 8001d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d56:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_InitTick+0xc8>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_InitTick+0xc8>)
 8001d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d6e:	f107 0210 	add.w	r2, r7, #16
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fb59 	bl	8007430 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_InitTick+0x6a>
 8001d88:	e001      	b.n	8001d8e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e02b      	b.n	8001de6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d8e:	f005 fb23 	bl	80073d8 <HAL_RCC_GetPCLK1Freq>
 8001d92:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001d94:	e004      	b.n	8001da0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d96:	f005 fb1f 	bl	80073d8 <HAL_RCC_GetPCLK1Freq>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da2:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <HAL_InitTick+0xcc>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	3b01      	subs	r3, #1
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_InitTick+0xd0>)
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_InitTick+0xd4>)
 8001db2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_InitTick+0xd0>)
 8001db6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_InitTick+0xd0>)
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_InitTick+0xd0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_InitTick+0xd0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001dce:	480b      	ldr	r0, [pc, #44]	; (8001dfc <HAL_InitTick+0xd0>)
 8001dd0:	f008 f9ad 	bl	800a12e <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001dda:	4808      	ldr	r0, [pc, #32]	; (8001dfc <HAL_InitTick+0xd0>)
 8001ddc:	f008 f9fe 	bl	800a1dc <HAL_TIM_Base_Start_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	e000      	b.n	8001de6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3740      	adds	r7, #64	; 0x40
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	24000008 	.word	0x24000008
 8001df4:	58024400 	.word	0x58024400
 8001df8:	431bde83 	.word	0x431bde83
 8001dfc:	240005a8 	.word	0x240005a8
 8001e00:	40001000 	.word	0x40001000

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001e08:	e7fe      	b.n	8001e08 <NMI_Handler+0x4>

08001e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <MemManage_Handler+0x4>

08001e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Stream0_IRQHandler+0x10>)
 8001e36:	f002 fe77 	bl	8004b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2400015c 	.word	0x2400015c

08001e44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA1_Stream1_IRQHandler+0x10>)
 8001e4a:	f002 fe6d 	bl	8004b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	240001d4 	.word	0x240001d4

08001e58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA1_Stream5_IRQHandler+0x10>)
 8001e5e:	f002 fe63 	bl	8004b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000260 	.word	0x24000260

08001e6c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <TIM1_BRK_IRQHandler+0x10>)
 8001e72:	f008 fbe6 	bl	800a642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	240003b4 	.word	0x240003b4

08001e80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <TIM1_UP_IRQHandler+0x10>)
 8001e86:	f008 fbdc 	bl	800a642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	240003b4 	.word	0x240003b4

08001e94 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001e9a:	f008 fbd2 	bl	800a642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	240003b4 	.word	0x240003b4

08001ea8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM1_CC_IRQHandler+0x10>)
 8001eae:	f008 fbc8 	bl	800a642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	240003b4 	.word	0x240003b4

08001ebc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM2_IRQHandler+0x10>)
 8001ec2:	f008 fbbe 	bl	800a642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	24000400 	.word	0x24000400

08001ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM3_IRQHandler+0x10>)
 8001ed6:	f008 fbb4 	bl	800a642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2400044c 	.word	0x2400044c

08001ee4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USART1_IRQHandler+0x10>)
 8001eea:	f009 fce1 	bl	800b8b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	24000498 	.word	0x24000498

08001ef8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <TIM6_DAC_IRQHandler+0x20>)
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <TIM6_DAC_IRQHandler+0x20>)
 8001f08:	f001 fba2 	bl	8003650 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <TIM6_DAC_IRQHandler+0x24>)
 8001f0e:	f008 fb98 	bl	800a642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2400024c 	.word	0x2400024c
 8001f1c:	240005a8 	.word	0x240005a8

08001f20 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <ITM_SendChar+0x48>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <ITM_SendChar+0x48>)
 8001f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f34:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <ITM_SendChar+0x4c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <ITM_SendChar+0x4c>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8001f42:	bf00      	nop
 8001f44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f8      	beq.n	8001f44 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8001f52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	6013      	str	r3, [r2, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000edfc 	.word	0xe000edfc
 8001f6c:	e0000e00 	.word	0xe0000e00

08001f70 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e00a      	b.n	8001f98 <_read+0x28>
		*ptr++ = __io_getchar();
 8001f82:	f3af 8000 	nop.w
 8001f86:	4601      	mov	r1, r0
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60ba      	str	r2, [r7, #8]
 8001f8e:	b2ca      	uxtb	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf0      	blt.n	8001f82 <_read+0x12>
	}

	return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e009      	b.n	8001fd0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	60ba      	str	r2, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ffab 	bl	8001f20 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbf1      	blt.n	8001fbc <_write+0x12>
	}
	return len;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_close>:

int _close(int file) {
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_fstat>:

int _fstat(int file, struct stat *st) {
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200a:	605a      	str	r2, [r3, #4]
	return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_isatty>:

int _isatty(int file) {
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
		errno = ENOMEM;
 800207c:	f00f f85e 	bl	801113c <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <_sbrk+0x64>)
 800209c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	24080000 	.word	0x24080000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	240005f4 	.word	0x240005f4
 80020b4:	24004f60 	.word	0x24004f60

080020b8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80020bc:	4b37      	ldr	r3, [pc, #220]	; (800219c <SystemInit+0xe4>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	4a36      	ldr	r2, [pc, #216]	; (800219c <SystemInit+0xe4>)
 80020c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <SystemInit+0xe8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d807      	bhi.n	80020e8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <SystemInit+0xe8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 030f 	bic.w	r3, r3, #15
 80020e0:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <SystemInit+0xe8>)
 80020e2:	f043 0307 	orr.w	r3, r3, #7
 80020e6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80020e8:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <SystemInit+0xec>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <SystemInit+0xec>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <SystemInit+0xec>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <SystemInit+0xec>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4929      	ldr	r1, [pc, #164]	; (80021a4 <SystemInit+0xec>)
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <SystemInit+0xf0>)
 8002102:	4013      	ands	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <SystemInit+0xe8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <SystemInit+0xe8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 030f 	bic.w	r3, r3, #15
 800211a:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <SystemInit+0xe8>)
 800211c:	f043 0307 	orr.w	r3, r3, #7
 8002120:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <SystemInit+0xec>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <SystemInit+0xec>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <SystemInit+0xec>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <SystemInit+0xec>)
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <SystemInit+0xf4>)
 8002138:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <SystemInit+0xec>)
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <SystemInit+0xf8>)
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <SystemInit+0xec>)
 8002142:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <SystemInit+0xfc>)
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <SystemInit+0xec>)
 8002148:	2200      	movs	r2, #0
 800214a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <SystemInit+0xec>)
 800214e:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <SystemInit+0xfc>)
 8002150:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <SystemInit+0xec>)
 8002154:	2200      	movs	r2, #0
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <SystemInit+0xec>)
 800215a:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <SystemInit+0xfc>)
 800215c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <SystemInit+0xec>)
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <SystemInit+0xec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <SystemInit+0xec>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <SystemInit+0xec>)
 8002172:	2200      	movs	r2, #0
 8002174:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <SystemInit+0x100>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <SystemInit+0x104>)
 800217c:	4013      	ands	r3, r2
 800217e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002182:	d202      	bcs.n	800218a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <SystemInit+0x108>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <SystemInit+0x10c>)
 800218c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002190:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	52002000 	.word	0x52002000
 80021a4:	58024400 	.word	0x58024400
 80021a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021ac:	02020200 	.word	0x02020200
 80021b0:	01ff0000 	.word	0x01ff0000
 80021b4:	01010280 	.word	0x01010280
 80021b8:	5c001000 	.word	0x5c001000
 80021bc:	ffff0000 	.word	0xffff0000
 80021c0:	51008108 	.word	0x51008108
 80021c4:	52004000 	.word	0x52004000

080021c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021cc:	f7ff ff74 	bl	80020b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	; (8002208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f6:	f00e ffa7 	bl	8011148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fa:	f7fe fb45 	bl	8000888 <main>
  bx  lr
 80021fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002204:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002208:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800220c:	08011ef0 	.word	0x08011ef0
  ldr r2, =_sbss
 8002210:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002214:	24004f5c 	.word	0x24004f5c

08002218 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC3_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002222:	2003      	movs	r0, #3
 8002224:	f001 f9bf 	bl	80035a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002228:	f004 ff2c 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_Init+0x68>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	4913      	ldr	r1, [pc, #76]	; (8002288 <HAL_Init+0x6c>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_Init+0x68>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_Init+0x6c>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_Init+0x70>)
 800225e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <HAL_Init+0x74>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	2005      	movs	r0, #5
 8002268:	f7ff fd60 	bl	8001d2c <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e002      	b.n	800227c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002276:	f7ff f97b 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	58024400 	.word	0x58024400
 8002288:	08011e3c 	.word	0x08011e3c
 800228c:	24000004 	.word	0x24000004
 8002290:	24000000 	.word	0x24000000

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x20>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <HAL_IncTick+0x24>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2400000c 	.word	0x2400000c
 80022b8:	240005f8 	.word	0x240005f8

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	240005f8 	.word	0x240005f8

080022d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetREVID+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0c1b      	lsrs	r3, r3, #16
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	5c001000 	.word	0x5c001000

080022ec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	4904      	ldr	r1, [pc, #16]	; (8002314 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	58000400 	.word	0x58000400

08002318 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	609a      	str	r2, [r3, #8]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3360      	adds	r3, #96	; 0x60
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3360      	adds	r3, #96	; 0x60
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	431a      	orrs	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]
  }
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3330      	adds	r3, #48	; 0x30
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	4413      	add	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	211f      	movs	r1, #31
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	f003 011f 	and.w	r1, r3, #31
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	431a      	orrs	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3314      	adds	r3, #20
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	0e5b      	lsrs	r3, r3, #25
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	4413      	add	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	0d1b      	lsrs	r3, r3, #20
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2107      	movs	r1, #7
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	401a      	ands	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	0d1b      	lsrs	r3, r3, #20
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0318 	and.w	r3, r3, #24
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <LL_ADC_SetChannelSingleDiff+0x44>)
 80024fc:	40d9      	lsrs	r1, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	400b      	ands	r3, r1
 8002502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002506:	431a      	orrs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	000fffff 	.word	0x000fffff

08002520 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <LL_ADC_DisableDeepPowerDown+0x20>)
 800252e:	4013      	ands	r3, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6093      	str	r3, [r2, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	5fffffc0 	.word	0x5fffffc0

08002544 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002558:	d101      	bne.n	800255e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <LL_ADC_EnableInternalRegulator+0x24>)
 800257a:	4013      	ands	r3, r2
 800257c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	6fffffc0 	.word	0x6fffffc0

08002594 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a8:	d101      	bne.n	80025ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <LL_ADC_IsEnabled+0x18>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <LL_ADC_IsEnabled+0x1a>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d101      	bne.n	80025fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d101      	bne.n	8002620 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e18f      	b.n	800296a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe ffa7 	bl	80015ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff67 	bl	8002544 <LL_ADC_IsDeepPowerDownEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff4d 	bl	8002520 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff82 	bl	8002594 <LL_ADC_IsInternalRegulatorEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff66 	bl	800256c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a0:	4b87      	ldr	r3, [pc, #540]	; (80028c0 <HAL_ADC_Init+0x290>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_ADC_Init+0x294>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b2:	e002      	b.n	80026ba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f9      	bne.n	80026b4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff65 	bl	8002594 <LL_ADC_IsInternalRegulatorEnabled>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f043 0210 	orr.w	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff76 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 80026f6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	f040 8129 	bne.w	8002958 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 8125 	bne.w	8002958 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002716:	f043 0202 	orr.w	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff4a 	bl	80025bc <LL_ADC_IsEnabled>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d136      	bne.n	800279c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a65      	ldr	r2, [pc, #404]	; (80028c8 <HAL_ADC_Init+0x298>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_ADC_Init+0x112>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a63      	ldr	r2, [pc, #396]	; (80028cc <HAL_ADC_Init+0x29c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10e      	bne.n	8002760 <HAL_ADC_Init+0x130>
 8002742:	4861      	ldr	r0, [pc, #388]	; (80028c8 <HAL_ADC_Init+0x298>)
 8002744:	f7ff ff3a 	bl	80025bc <LL_ADC_IsEnabled>
 8002748:	4604      	mov	r4, r0
 800274a:	4860      	ldr	r0, [pc, #384]	; (80028cc <HAL_ADC_Init+0x29c>)
 800274c:	f7ff ff36 	bl	80025bc <LL_ADC_IsEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	4323      	orrs	r3, r4
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e008      	b.n	8002772 <HAL_ADC_Init+0x142>
 8002760:	485b      	ldr	r0, [pc, #364]	; (80028d0 <HAL_ADC_Init+0x2a0>)
 8002762:	f7ff ff2b 	bl	80025bc <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a53      	ldr	r2, [pc, #332]	; (80028c8 <HAL_ADC_Init+0x298>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_ADC_Init+0x15a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_ADC_Init+0x29c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_ADC_Init+0x15e>
 800278a:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_ADC_Init+0x2a4>)
 800278c:	e000      	b.n	8002790 <HAL_ADC_Init+0x160>
 800278e:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_ADC_Init+0x2a8>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f7ff fdbe 	bl	8002318 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800279c:	f7ff fd9a 	bl	80022d4 <HAL_GetREVID>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d914      	bls.n	80027d4 <HAL_ADC_Init+0x1a4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d110      	bne.n	80027d4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7d5b      	ldrb	r3, [r3, #21]
 80027b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7f1b      	ldrb	r3, [r3, #28]
 80027c8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80027ca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027cc:	f043 030c 	orr.w	r3, r3, #12
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e00d      	b.n	80027f0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7d5b      	ldrb	r3, [r3, #21]
 80027d8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027de:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027e4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7f1b      	ldrb	r3, [r3, #28]
 80027ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7f1b      	ldrb	r3, [r3, #28]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	045b      	lsls	r3, r3, #17
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_ADC_Init+0x2ac>)
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	69b9      	ldr	r1, [r7, #24]
 8002832:	430b      	orrs	r3, r1
 8002834:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fed1 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 8002840:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fede 	bl	8002608 <LL_ADC_INJ_IsConversionOngoing>
 800284c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d15f      	bne.n	8002914 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d15c      	bne.n	8002914 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7d1b      	ldrb	r3, [r3, #20]
 800285e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_ADC_Init+0x2b0>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	430b      	orrs	r3, r1
 800287a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002882:	2b01      	cmp	r3, #1
 8002884:	d130      	bne.n	80028e8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <HAL_ADC_Init+0x2b4>)
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800289a:	3a01      	subs	r2, #1
 800289c:	0411      	lsls	r1, r2, #16
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028ae:	430a      	orrs	r2, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	e01c      	b.n	80028f8 <HAL_ADC_Init+0x2c8>
 80028be:	bf00      	nop
 80028c0:	24000000 	.word	0x24000000
 80028c4:	053e2d63 	.word	0x053e2d63
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40022100 	.word	0x40022100
 80028d0:	58026000 	.word	0x58026000
 80028d4:	40022300 	.word	0x40022300
 80028d8:	58026300 	.word	0x58026300
 80028dc:	fff0c003 	.word	0xfff0c003
 80028e0:	ffffbffc 	.word	0xffffbffc
 80028e4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fb8c 	bl	800302c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10c      	bne.n	8002936 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f023 010f 	bic.w	r1, r3, #15
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	1e5a      	subs	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
 8002934:	e007      	b.n	8002946 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 020f 	bic.w	r2, r2, #15
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
 8002956:	e007      	b.n	8002968 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f043 0210 	orr.w	r2, r3, #16
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002968:	7ffb      	ldrb	r3, [r7, #31]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop

08002974 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b0a1      	sub	sp, #132	; 0x84
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a65      	ldr	r2, [pc, #404]	; (8002b24 <HAL_ADC_ConfigChannel+0x1b0>)
 800298e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x2a>
 800299a:	2302      	movs	r3, #2
 800299c:	e32e      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x688>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fe19 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 8313 	bne.w	8002fde <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db2c      	blt.n	8002a1a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <HAL_ADC_ConfigChannel+0x6a>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2201      	movs	r2, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	e016      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x98>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80029fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2201      	movs	r2, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	69d1      	ldr	r1, [r2, #28]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	430b      	orrs	r3, r1
 8002a18:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f7ff fcfe 	bl	8002428 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fdd6 	bl	80025e2 <LL_ADC_REG_IsConversionOngoing>
 8002a36:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fde3 	bl	8002608 <LL_ADC_INJ_IsConversionOngoing>
 8002a42:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 80b8 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 80b4 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff fd0d 	bl	8002480 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_ADC_ConfigChannel+0x1b4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a72:	d10b      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x118>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	e01d      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x154>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x13e>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	e00a      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x154>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d02c      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ae0:	f7ff fc4e 	bl	8002380 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6919      	ldr	r1, [r3, #16]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	7e5b      	ldrb	r3, [r3, #25]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d102      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x186>
 8002af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002af8:	e000      	b.n	8002afc <HAL_ADC_ConfigChannel+0x188>
 8002afa:	2300      	movs	r3, #0
 8002afc:	461a      	mov	r2, r3
 8002afe:	f7ff fc78 	bl	80023f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6919      	ldr	r1, [r3, #16]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	7e1b      	ldrb	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1a4>
 8002b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b16:	e000      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1a6>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f7ff fc50 	bl	80023c0 <LL_ADC_SetDataRightShift>
 8002b20:	e04c      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x248>
 8002b22:	bf00      	nop
 8002b24:	47ff0000 	.word	0x47ff0000
 8002b28:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b4e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	069b      	lsls	r3, r3, #26
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d107      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b72:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b96:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fcfb 	bl	80025bc <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 8211 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7ff fc7c 	bl	80024d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4aa1      	ldr	r2, [pc, #644]	; (8002e6c <HAL_ADC_ConfigChannel+0x4f8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	f040 812e 	bne.w	8002e48 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x2a0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	3301      	adds	r3, #1
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	bf94      	ite	ls
 8002c0c:	2301      	movls	r3, #1
 8002c0e:	2300      	movhi	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e019      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x2d4>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	bf94      	ite	ls
 8002c42:	2301      	movls	r3, #1
 8002c44:	2300      	movhi	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d079      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d107      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x2f4>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	069b      	lsls	r3, r3, #26
 8002c62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c66:	e015      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x320>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c78:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e003      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	069b      	lsls	r3, r3, #26
 8002c90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x340>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	e017      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x370>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x396>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	051b      	lsls	r3, r3, #20
 8002d08:	e018      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x3c8>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e003      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	e07e      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x3e8>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	3301      	adds	r3, #1
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d5a:	e015      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x414>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002d74:	2320      	movs	r3, #32
 8002d76:	e003      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	069b      	lsls	r3, r3, #26
 8002d84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x434>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	e017      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x464>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	61bb      	str	r3, [r7, #24]
  return result;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e003      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	ea42 0103 	orr.w	r1, r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x490>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b1e      	subs	r3, #30
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e02:	e01b      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x4c8>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	60fb      	str	r3, [r7, #12]
  return result;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	3b1e      	subs	r3, #30
 8002e36:	051b      	lsls	r3, r3, #20
 8002e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7ff fb1c 	bl	8002480 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f280 80cf 	bge.w	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <HAL_ADC_ConfigChannel+0x4fc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x4f2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_ADC_ConfigChannel+0x500>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10a      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x508>
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_ADC_ConfigChannel+0x504>)
 8002e68:	e009      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x50a>
 8002e6a:	bf00      	nop
 8002e6c:	47ff0000 	.word	0x47ff0000
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40022100 	.word	0x40022100
 8002e78:	40022300 	.word	0x40022300
 8002e7c:	4b61      	ldr	r3, [pc, #388]	; (8003004 <HAL_ADC_ConfigChannel+0x690>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fa70 	bl	8002364 <LL_ADC_GetCommonPathInternalCh>
 8002e84:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5f      	ldr	r2, [pc, #380]	; (8003008 <HAL_ADC_ConfigChannel+0x694>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_ADC_ConfigChannel+0x526>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a5d      	ldr	r2, [pc, #372]	; (800300c <HAL_ADC_ConfigChannel+0x698>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10e      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x544>
 8002e9a:	485b      	ldr	r0, [pc, #364]	; (8003008 <HAL_ADC_ConfigChannel+0x694>)
 8002e9c:	f7ff fb8e 	bl	80025bc <LL_ADC_IsEnabled>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	485a      	ldr	r0, [pc, #360]	; (800300c <HAL_ADC_ConfigChannel+0x698>)
 8002ea4:	f7ff fb8a 	bl	80025bc <LL_ADC_IsEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4323      	orrs	r3, r4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e008      	b.n	8002eca <HAL_ADC_ConfigChannel+0x556>
 8002eb8:	4855      	ldr	r0, [pc, #340]	; (8003010 <HAL_ADC_ConfigChannel+0x69c>)
 8002eba:	f7ff fb7f 	bl	80025bc <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d07d      	beq.n	8002fca <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a50      	ldr	r2, [pc, #320]	; (8003014 <HAL_ADC_ConfigChannel+0x6a0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d130      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x5c6>
 8002ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d12b      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a4a      	ldr	r2, [pc, #296]	; (8003010 <HAL_ADC_ConfigChannel+0x69c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	f040 8081 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a45      	ldr	r2, [pc, #276]	; (8003008 <HAL_ADC_ConfigChannel+0x694>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_ADC_ConfigChannel+0x58e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a43      	ldr	r2, [pc, #268]	; (800300c <HAL_ADC_ConfigChannel+0x698>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x592>
 8002f02:	4a45      	ldr	r2, [pc, #276]	; (8003018 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f04:	e000      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x594>
 8002f06:	4a3f      	ldr	r2, [pc, #252]	; (8003004 <HAL_ADC_ConfigChannel+0x690>)
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7ff fa14 	bl	800233e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_ADC_ConfigChannel+0x6a8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	4a40      	ldr	r2, [pc, #256]	; (8003020 <HAL_ADC_ConfigChannel+0x6ac>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	3301      	adds	r3, #1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f2a:	e002      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f38:	e05a      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a39      	ldr	r2, [pc, #228]	; (8003024 <HAL_ADC_ConfigChannel+0x6b0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d11e      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x60e>
 8002f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d119      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2f      	ldr	r2, [pc, #188]	; (8003010 <HAL_ADC_ConfigChannel+0x69c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d14b      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_ADC_ConfigChannel+0x694>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_ADC_ConfigChannel+0x5f8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a29      	ldr	r2, [pc, #164]	; (800300c <HAL_ADC_ConfigChannel+0x698>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x5fc>
 8002f6c:	4a2a      	ldr	r2, [pc, #168]	; (8003018 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x5fe>
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <HAL_ADC_ConfigChannel+0x690>)
 8002f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f7ff f9df 	bl	800233e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f80:	e036      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a28      	ldr	r2, [pc, #160]	; (8003028 <HAL_ADC_ConfigChannel+0x6b4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d131      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
 8002f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d12c      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_ADC_ConfigChannel+0x69c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d127      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_ADC_ConfigChannel+0x694>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x640>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_ADC_ConfigChannel+0x698>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x644>
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_ADC_ConfigChannel+0x6a4>)
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x646>
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_ADC_ConfigChannel+0x690>)
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7ff f9bb 	bl	800233e <LL_ADC_SetCommonPathInternalCh>
 8002fc8:	e012      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002fdc:	e008      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ff8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3784      	adds	r7, #132	; 0x84
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	58026300 	.word	0x58026300
 8003008:	40022000 	.word	0x40022000
 800300c:	40022100 	.word	0x40022100
 8003010:	58026000 	.word	0x58026000
 8003014:	cb840000 	.word	0xcb840000
 8003018:	40022300 	.word	0x40022300
 800301c:	24000000 	.word	0x24000000
 8003020:	053e2d63 	.word	0x053e2d63
 8003024:	c7520000 	.word	0xc7520000
 8003028:	cfb80000 	.word	0xcfb80000

0800302c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a7a      	ldr	r2, [pc, #488]	; (8003224 <ADC_ConfigureBoostMode+0x1f8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <ADC_ConfigureBoostMode+0x1c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a79      	ldr	r2, [pc, #484]	; (8003228 <ADC_ConfigureBoostMode+0x1fc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d109      	bne.n	800305c <ADC_ConfigureBoostMode+0x30>
 8003048:	4b78      	ldr	r3, [pc, #480]	; (800322c <ADC_ConfigureBoostMode+0x200>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e008      	b.n	800306e <ADC_ConfigureBoostMode+0x42>
 800305c:	4b74      	ldr	r3, [pc, #464]	; (8003230 <ADC_ConfigureBoostMode+0x204>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01c      	beq.n	80030ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003072:	f004 f981 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 8003076:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003080:	d010      	beq.n	80030a4 <ADC_ConfigureBoostMode+0x78>
 8003082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003086:	d873      	bhi.n	8003170 <ADC_ConfigureBoostMode+0x144>
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d002      	beq.n	8003094 <ADC_ConfigureBoostMode+0x68>
 800308e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003092:	d16d      	bne.n	8003170 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	60fb      	str	r3, [r7, #12]
        break;
 80030a2:	e068      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	60fb      	str	r3, [r7, #12]
        break;
 80030aa:	e064      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	f005 fc08 	bl	80088c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80030b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030c2:	d051      	beq.n	8003168 <ADC_ConfigureBoostMode+0x13c>
 80030c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030c8:	d854      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030ca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030ce:	d047      	beq.n	8003160 <ADC_ConfigureBoostMode+0x134>
 80030d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030d4:	d84e      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030da:	d03d      	beq.n	8003158 <ADC_ConfigureBoostMode+0x12c>
 80030dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030e0:	d848      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e6:	d033      	beq.n	8003150 <ADC_ConfigureBoostMode+0x124>
 80030e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ec:	d842      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030f2:	d029      	beq.n	8003148 <ADC_ConfigureBoostMode+0x11c>
 80030f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030f8:	d83c      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 80030fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030fe:	d01a      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003100:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003104:	d836      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 8003106:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800310a:	d014      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 800310c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003110:	d830      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003116:	d00e      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311c:	d82a      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 800311e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003122:	d008      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003124:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003128:	d824      	bhi.n	8003174 <ADC_ConfigureBoostMode+0x148>
 800312a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800312e:	d002      	beq.n	8003136 <ADC_ConfigureBoostMode+0x10a>
 8003130:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003134:	d11e      	bne.n	8003174 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0c9b      	lsrs	r3, r3, #18
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	60fb      	str	r3, [r7, #12]
        break;
 8003146:	e016      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
        break;
 800314e:	e012      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	60fb      	str	r3, [r7, #12]
        break;
 8003156:	e00e      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	60fb      	str	r3, [r7, #12]
        break;
 800315e:	e00a      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	09db      	lsrs	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
        break;
 8003166:	e006      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	60fb      	str	r3, [r7, #12]
        break;
 800316e:	e002      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003174:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003176:	f7ff f8ad 	bl	80022d4 <HAL_GetREVID>
 800317a:	4603      	mov	r3, r0
 800317c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003180:	4293      	cmp	r3, r2
 8003182:	d815      	bhi.n	80031b0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <ADC_ConfigureBoostMode+0x208>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d908      	bls.n	800319e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800319c:	e03e      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ac:	609a      	str	r2, [r3, #8]
}
 80031ae:	e035      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <ADC_ConfigureBoostMode+0x20c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d808      	bhi.n	80031d0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031cc:	609a      	str	r2, [r3, #8]
}
 80031ce:	e025      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a1a      	ldr	r2, [pc, #104]	; (800323c <ADC_ConfigureBoostMode+0x210>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d80a      	bhi.n	80031ee <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	e016      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <ADC_ConfigureBoostMode+0x214>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d80a      	bhi.n	800320c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	e007      	b.n	800321c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40022000 	.word	0x40022000
 8003228:	40022100 	.word	0x40022100
 800322c:	40022300 	.word	0x40022300
 8003230:	58026300 	.word	0x58026300
 8003234:	01312d00 	.word	0x01312d00
 8003238:	005f5e10 	.word	0x005f5e10
 800323c:	00bebc20 	.word	0x00bebc20
 8003240:	017d7840 	.word	0x017d7840

08003244 <LL_ADC_IsEnabled>:
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <LL_ADC_IsEnabled+0x18>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <LL_ADC_IsEnabled+0x1a>
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_ADC_REG_IsConversionOngoing>:
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b04      	cmp	r3, #4
 800327c:	d101      	bne.n	8003282 <LL_ADC_REG_IsConversionOngoing+0x18>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b09f      	sub	sp, #124	; 0x7c
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e0be      	b.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d102      	bne.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032c8:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	e001      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e09d      	b.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ffb9 	bl	800326a <LL_ADC_REG_IsConversionOngoing>
 80032f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ffb3 	bl	800326a <LL_ADC_REG_IsConversionOngoing>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d17f      	bne.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800330a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800330c:	2b00      	cmp	r3, #0
 800330e:	d17c      	bne.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a47      	ldr	r2, [pc, #284]	; (8003434 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a46      	ldr	r2, [pc, #280]	; (8003438 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003324:	4b45      	ldr	r3, [pc, #276]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003326:	e000      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003328:	4b45      	ldr	r3, [pc, #276]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800332a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d039      	beq.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	431a      	orrs	r2, r3
 8003342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003344:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a3a      	ldr	r2, [pc, #232]	; (8003434 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10e      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800335a:	4836      	ldr	r0, [pc, #216]	; (8003434 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800335c:	f7ff ff72 	bl	8003244 <LL_ADC_IsEnabled>
 8003360:	4604      	mov	r4, r0
 8003362:	4835      	ldr	r0, [pc, #212]	; (8003438 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003364:	f7ff ff6e 	bl	8003244 <LL_ADC_IsEnabled>
 8003368:	4603      	mov	r3, r0
 800336a:	4323      	orrs	r3, r4
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e008      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003378:	4832      	ldr	r0, [pc, #200]	; (8003444 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800337a:	f7ff ff63 	bl	8003244 <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d047      	beq.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003394:	4013      	ands	r3, r2
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	6892      	ldr	r2, [r2, #8]
 800339e:	430a      	orrs	r2, r1
 80033a0:	431a      	orrs	r2, r3
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033a6:	e03a      	b.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10e      	bne.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80033c8:	481a      	ldr	r0, [pc, #104]	; (8003434 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033ca:	f7ff ff3b 	bl	8003244 <LL_ADC_IsEnabled>
 80033ce:	4604      	mov	r4, r0
 80033d0:	4819      	ldr	r0, [pc, #100]	; (8003438 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033d2:	f7ff ff37 	bl	8003244 <LL_ADC_IsEnabled>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4323      	orrs	r3, r4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e008      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033e6:	4817      	ldr	r0, [pc, #92]	; (8003444 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033e8:	f7ff ff2c 	bl	8003244 <LL_ADC_IsEnabled>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003402:	4013      	ands	r3, r2
 8003404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003406:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003408:	e009      	b.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800341c:	e000      	b.n	8003420 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800341e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003428:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800342c:	4618      	mov	r0, r3
 800342e:	377c      	adds	r7, #124	; 0x7c
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}
 8003434:	40022000 	.word	0x40022000
 8003438:	40022100 	.word	0x40022100
 800343c:	40022300 	.word	0x40022300
 8003440:	58026300 	.word	0x58026300
 8003444:	58026000 	.word	0x58026000
 8003448:	fffff0e0 	.word	0xfffff0e0

0800344c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <__NVIC_SetPriorityGrouping+0x40>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003468:	4013      	ands	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <__NVIC_SetPriorityGrouping+0x44>)
 8003476:	4313      	orrs	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347a:	4a04      	ldr	r2, [pc, #16]	; (800348c <__NVIC_SetPriorityGrouping+0x40>)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	60d3      	str	r3, [r2, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00
 8003490:	05fa0000 	.word	0x05fa0000

08003494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <__NVIC_GetPriorityGrouping+0x18>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	f003 0307 	and.w	r3, r3, #7
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	db0b      	blt.n	80034da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	4907      	ldr	r1, [pc, #28]	; (80034e8 <__NVIC_EnableIRQ+0x38>)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2001      	movs	r0, #1
 80034d2:	fa00 f202 	lsl.w	r2, r0, r2
 80034d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	e000e100 	.word	0xe000e100

080034ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	6039      	str	r1, [r7, #0]
 80034f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	db0a      	blt.n	8003516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	490c      	ldr	r1, [pc, #48]	; (8003538 <__NVIC_SetPriority+0x4c>)
 8003506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350a:	0112      	lsls	r2, r2, #4
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	440b      	add	r3, r1
 8003510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003514:	e00a      	b.n	800352c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4908      	ldr	r1, [pc, #32]	; (800353c <__NVIC_SetPriority+0x50>)
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	3b04      	subs	r3, #4
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	440b      	add	r3, r1
 800352a:	761a      	strb	r2, [r3, #24]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000e100 	.word	0xe000e100
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003540:	b480      	push	{r7}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f1c3 0307 	rsb	r3, r3, #7
 800355a:	2b04      	cmp	r3, #4
 800355c:	bf28      	it	cs
 800355e:	2304      	movcs	r3, #4
 8003560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3304      	adds	r3, #4
 8003566:	2b06      	cmp	r3, #6
 8003568:	d902      	bls.n	8003570 <NVIC_EncodePriority+0x30>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3b03      	subs	r3, #3
 800356e:	e000      	b.n	8003572 <NVIC_EncodePriority+0x32>
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43da      	mvns	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	401a      	ands	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	fa01 f303 	lsl.w	r3, r1, r3
 8003592:	43d9      	mvns	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	4313      	orrs	r3, r2
         );
}
 800359a:	4618      	mov	r0, r3
 800359c:	3724      	adds	r7, #36	; 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ff4c 	bl	800344c <__NVIC_SetPriorityGrouping>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035ca:	f7ff ff63 	bl	8003494 <__NVIC_GetPriorityGrouping>
 80035ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f7ff ffb3 	bl	8003540 <NVIC_EncodePriority>
 80035da:	4602      	mov	r2, r0
 80035dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff82 	bl	80034ec <__NVIC_SetPriority>
}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff56 	bl	80034b0 <__NVIC_EnableIRQ>
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e014      	b.n	8003648 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	791b      	ldrb	r3, [r3, #4]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f8d6 	bl	80017e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01d      	beq.n	80036ae <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2204      	movs	r2, #4
 8003680:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f827 	bl	80036fc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01d      	beq.n	80036f4 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f043 0202 	orr.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80036ec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f950 	bl	8003994 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_DAC_ConfigChannel+0x1e>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e12a      	b.n	8003988 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	795b      	ldrb	r3, [r3, #5]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_DAC_ConfigChannel+0x2e>
 800373a:	2302      	movs	r3, #2
 800373c:	e124      	b.n	8003988 <HAL_DAC_ConfigChannel+0x278>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2202      	movs	r2, #2
 8003748:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d17a      	bne.n	8003848 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003752:	f7fe fdb3 	bl	80022bc <HAL_GetTick>
 8003756:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d13d      	bne.n	80037da <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800375e:	e018      	b.n	8003792 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003760:	f7fe fdac 	bl	80022bc <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d911      	bls.n	8003792 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003774:	4b86      	ldr	r3, [pc, #536]	; (8003990 <HAL_DAC_ConfigChannel+0x280>)
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f043 0208 	orr.w	r2, r3, #8
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2203      	movs	r2, #3
 800378c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0fa      	b.n	8003988 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003798:	4b7d      	ldr	r3, [pc, #500]	; (8003990 <HAL_DAC_ConfigChannel+0x280>)
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1df      	bne.n	8003760 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	6992      	ldr	r2, [r2, #24]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
 80037aa:	e020      	b.n	80037ee <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80037ac:	f7fe fd86 	bl	80022bc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d90f      	bls.n	80037da <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da0a      	bge.n	80037da <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f043 0208 	orr.w	r2, r3, #8
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2203      	movs	r2, #3
 80037d4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0d6      	b.n	8003988 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	dbe3      	blt.n	80037ac <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	6992      	ldr	r2, [r2, #24]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	ea02 0103 	and.w	r1, r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	21ff      	movs	r1, #255	; 0xff
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	ea02 0103 	and.w	r1, r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	409a      	lsls	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d11d      	bne.n	800388c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	221f      	movs	r2, #31
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2207      	movs	r2, #7
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d102      	bne.n	80038b6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e00f      	b.n	80038d6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d102      	bne.n	80038c4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80038be:	2301      	movs	r3, #1
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	e008      	b.n	80038d6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e001      	b.n	80038d6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	4313      	orrs	r3, r2
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43da      	mvns	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	400a      	ands	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	22c0      	movs	r2, #192	; 0xc0
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43da      	mvns	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	400a      	ands	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003988:	4618      	mov	r0, r3
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20008000 	.word	0x20008000

08003994 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039b0:	f7fe fc84 	bl	80022bc <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e316      	b.n	8003fee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a66      	ldr	r2, [pc, #408]	; (8003b60 <HAL_DMA_Init+0x1b8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d04a      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <HAL_DMA_Init+0x1bc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d045      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a63      	ldr	r2, [pc, #396]	; (8003b68 <HAL_DMA_Init+0x1c0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d040      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a62      	ldr	r2, [pc, #392]	; (8003b6c <HAL_DMA_Init+0x1c4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d03b      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a60      	ldr	r2, [pc, #384]	; (8003b70 <HAL_DMA_Init+0x1c8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d036      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5f      	ldr	r2, [pc, #380]	; (8003b74 <HAL_DMA_Init+0x1cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d031      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	; (8003b78 <HAL_DMA_Init+0x1d0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d02c      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	; (8003b7c <HAL_DMA_Init+0x1d4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d027      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5a      	ldr	r2, [pc, #360]	; (8003b80 <HAL_DMA_Init+0x1d8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d022      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a59      	ldr	r2, [pc, #356]	; (8003b84 <HAL_DMA_Init+0x1dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01d      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a57      	ldr	r2, [pc, #348]	; (8003b88 <HAL_DMA_Init+0x1e0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d018      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	; (8003b8c <HAL_DMA_Init+0x1e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a54      	ldr	r2, [pc, #336]	; (8003b90 <HAL_DMA_Init+0x1e8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a53      	ldr	r2, [pc, #332]	; (8003b94 <HAL_DMA_Init+0x1ec>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a51      	ldr	r2, [pc, #324]	; (8003b98 <HAL_DMA_Init+0x1f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_DMA_Init+0xb8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a50      	ldr	r2, [pc, #320]	; (8003b9c <HAL_DMA_Init+0x1f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_DMA_Init+0xbc>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_DMA_Init+0xbe>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 813b 	beq.w	8003ce2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a37      	ldr	r2, [pc, #220]	; (8003b60 <HAL_DMA_Init+0x1b8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d04a      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a36      	ldr	r2, [pc, #216]	; (8003b64 <HAL_DMA_Init+0x1bc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d045      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a34      	ldr	r2, [pc, #208]	; (8003b68 <HAL_DMA_Init+0x1c0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d040      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a33      	ldr	r2, [pc, #204]	; (8003b6c <HAL_DMA_Init+0x1c4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d03b      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a31      	ldr	r2, [pc, #196]	; (8003b70 <HAL_DMA_Init+0x1c8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d036      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <HAL_DMA_Init+0x1cc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d031      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <HAL_DMA_Init+0x1d0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02c      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2d      	ldr	r2, [pc, #180]	; (8003b7c <HAL_DMA_Init+0x1d4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d027      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <HAL_DMA_Init+0x1d8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <HAL_DMA_Init+0x1dc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01d      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <HAL_DMA_Init+0x1e0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <HAL_DMA_Init+0x1e4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <HAL_DMA_Init+0x1e8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <HAL_DMA_Init+0x1ec>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <HAL_DMA_Init+0x1f0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_DMA_Init+0x174>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <HAL_DMA_Init+0x1f4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <HAL_DMA_Init+0x186>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e007      	b.n	8003b3e <HAL_DMA_Init+0x196>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b3e:	e02f      	b.n	8003ba0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b40:	f7fe fbbc 	bl	80022bc <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d928      	bls.n	8003ba0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2203      	movs	r2, #3
 8003b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e246      	b.n	8003fee <HAL_DMA_Init+0x646>
 8003b60:	40020010 	.word	0x40020010
 8003b64:	40020028 	.word	0x40020028
 8003b68:	40020040 	.word	0x40020040
 8003b6c:	40020058 	.word	0x40020058
 8003b70:	40020070 	.word	0x40020070
 8003b74:	40020088 	.word	0x40020088
 8003b78:	400200a0 	.word	0x400200a0
 8003b7c:	400200b8 	.word	0x400200b8
 8003b80:	40020410 	.word	0x40020410
 8003b84:	40020428 	.word	0x40020428
 8003b88:	40020440 	.word	0x40020440
 8003b8c:	40020458 	.word	0x40020458
 8003b90:	40020470 	.word	0x40020470
 8003b94:	40020488 	.word	0x40020488
 8003b98:	400204a0 	.word	0x400204a0
 8003b9c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1c8      	bne.n	8003b40 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4b83      	ldr	r3, [pc, #524]	; (8003dc8 <HAL_DMA_Init+0x420>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003bc6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d107      	bne.n	8003c04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c04:	4b71      	ldr	r3, [pc, #452]	; (8003dcc <HAL_DMA_Init+0x424>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b71      	ldr	r3, [pc, #452]	; (8003dd0 <HAL_DMA_Init+0x428>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c10:	d328      	bcc.n	8003c64 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b28      	cmp	r3, #40	; 0x28
 8003c18:	d903      	bls.n	8003c22 <HAL_DMA_Init+0x27a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c20:	d917      	bls.n	8003c52 <HAL_DMA_Init+0x2aa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b3e      	cmp	r3, #62	; 0x3e
 8003c28:	d903      	bls.n	8003c32 <HAL_DMA_Init+0x28a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b42      	cmp	r3, #66	; 0x42
 8003c30:	d90f      	bls.n	8003c52 <HAL_DMA_Init+0x2aa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b46      	cmp	r3, #70	; 0x46
 8003c38:	d903      	bls.n	8003c42 <HAL_DMA_Init+0x29a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b48      	cmp	r3, #72	; 0x48
 8003c40:	d907      	bls.n	8003c52 <HAL_DMA_Init+0x2aa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b4e      	cmp	r3, #78	; 0x4e
 8003c48:	d905      	bls.n	8003c56 <HAL_DMA_Init+0x2ae>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b52      	cmp	r3, #82	; 0x52
 8003c50:	d801      	bhi.n	8003c56 <HAL_DMA_Init+0x2ae>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_DMA_Init+0x2b0>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c62:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0307 	bic.w	r3, r3, #7
 8003c7a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d117      	bne.n	8003cbe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f001 ff1d 	bl	8005ae0 <DMA_CheckFifoParam>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e197      	b.n	8003fee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f001 fe58 	bl	800597c <DMA_CalcBaseAndBitshift>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	223f      	movs	r2, #63	; 0x3f
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	e0cd      	b.n	8003e7e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3b      	ldr	r2, [pc, #236]	; (8003dd4 <HAL_DMA_Init+0x42c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_Init+0x38a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <HAL_DMA_Init+0x430>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_DMA_Init+0x38a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_DMA_Init+0x434>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_Init+0x38a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a36      	ldr	r2, [pc, #216]	; (8003de0 <HAL_DMA_Init+0x438>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_DMA_Init+0x38a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a35      	ldr	r2, [pc, #212]	; (8003de4 <HAL_DMA_Init+0x43c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_DMA_Init+0x38a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <HAL_DMA_Init+0x440>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_DMA_Init+0x38a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a32      	ldr	r2, [pc, #200]	; (8003dec <HAL_DMA_Init+0x444>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_DMA_Init+0x38a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <HAL_DMA_Init+0x448>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_Init+0x38e>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_Init+0x390>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8097 	beq.w	8003e6c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <HAL_DMA_Init+0x42c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d021      	beq.n	8003d8c <HAL_DMA_Init+0x3e4>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <HAL_DMA_Init+0x430>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01c      	beq.n	8003d8c <HAL_DMA_Init+0x3e4>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <HAL_DMA_Init+0x434>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d017      	beq.n	8003d8c <HAL_DMA_Init+0x3e4>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <HAL_DMA_Init+0x438>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d012      	beq.n	8003d8c <HAL_DMA_Init+0x3e4>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_DMA_Init+0x43c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00d      	beq.n	8003d8c <HAL_DMA_Init+0x3e4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <HAL_DMA_Init+0x440>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d008      	beq.n	8003d8c <HAL_DMA_Init+0x3e4>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_DMA_Init+0x444>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <HAL_DMA_Init+0x3e4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_DMA_Init+0x448>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_DMA_Init+0x44c>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d020      	beq.n	8003df8 <HAL_DMA_Init+0x450>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d102      	bne.n	8003dc4 <HAL_DMA_Init+0x41c>
 8003dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dc2:	e01a      	b.n	8003dfa <HAL_DMA_Init+0x452>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e018      	b.n	8003dfa <HAL_DMA_Init+0x452>
 8003dc8:	fe10803f 	.word	0xfe10803f
 8003dcc:	5c001000 	.word	0x5c001000
 8003dd0:	ffff0000 	.word	0xffff0000
 8003dd4:	58025408 	.word	0x58025408
 8003dd8:	5802541c 	.word	0x5802541c
 8003ddc:	58025430 	.word	0x58025430
 8003de0:	58025444 	.word	0x58025444
 8003de4:	58025458 	.word	0x58025458
 8003de8:	5802546c 	.word	0x5802546c
 8003dec:	58025480 	.word	0x58025480
 8003df0:	58025494 	.word	0x58025494
 8003df4:	fffe000f 	.word	0xfffe000f
 8003df8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68d2      	ldr	r2, [r2, #12]
 8003dfe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <HAL_DMA_Init+0x650>)
 8003e40:	4413      	add	r3, r2
 8003e42:	4a6e      	ldr	r2, [pc, #440]	; (8003ffc <HAL_DMA_Init+0x654>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	009a      	lsls	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f001 fd93 	bl	800597c <DMA_CalcBaseAndBitshift>
 8003e56:	4603      	mov	r3, r0
 8003e58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2201      	movs	r2, #1
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	e008      	b.n	8003e7e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2203      	movs	r2, #3
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0b7      	b.n	8003fee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5f      	ldr	r2, [pc, #380]	; (8004000 <HAL_DMA_Init+0x658>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d072      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_DMA_Init+0x65c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d06d      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5c      	ldr	r2, [pc, #368]	; (8004008 <HAL_DMA_Init+0x660>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d068      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5a      	ldr	r2, [pc, #360]	; (800400c <HAL_DMA_Init+0x664>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d063      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a59      	ldr	r2, [pc, #356]	; (8004010 <HAL_DMA_Init+0x668>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d05e      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a57      	ldr	r2, [pc, #348]	; (8004014 <HAL_DMA_Init+0x66c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d059      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_DMA_Init+0x670>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d054      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_DMA_Init+0x674>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d04f      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_DMA_Init+0x678>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d04a      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_DMA_Init+0x67c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d045      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_DMA_Init+0x680>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d040      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4e      	ldr	r2, [pc, #312]	; (800402c <HAL_DMA_Init+0x684>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d03b      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_DMA_Init+0x688>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d036      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a4b      	ldr	r2, [pc, #300]	; (8004034 <HAL_DMA_Init+0x68c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d031      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <HAL_DMA_Init+0x690>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d02c      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_DMA_Init+0x694>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a47      	ldr	r2, [pc, #284]	; (8004040 <HAL_DMA_Init+0x698>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a45      	ldr	r2, [pc, #276]	; (8004044 <HAL_DMA_Init+0x69c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a44      	ldr	r2, [pc, #272]	; (8004048 <HAL_DMA_Init+0x6a0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a42      	ldr	r2, [pc, #264]	; (800404c <HAL_DMA_Init+0x6a4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a41      	ldr	r2, [pc, #260]	; (8004050 <HAL_DMA_Init+0x6a8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3f      	ldr	r2, [pc, #252]	; (8004054 <HAL_DMA_Init+0x6ac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3e      	ldr	r2, [pc, #248]	; (8004058 <HAL_DMA_Init+0x6b0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMA_Init+0x5c6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a3c      	ldr	r2, [pc, #240]	; (800405c <HAL_DMA_Init+0x6b4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_Init+0x5ca>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_DMA_Init+0x5cc>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d032      	beq.n	8003fde <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f001 fe2d 	bl	8005bd8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d102      	bne.n	8003f8c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fa0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d010      	beq.n	8003fcc <HAL_DMA_Init+0x624>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d80c      	bhi.n	8003fcc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 feaa 	bl	8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	e008      	b.n	8003fde <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	a7fdabf8 	.word	0xa7fdabf8
 8003ffc:	cccccccd 	.word	0xcccccccd
 8004000:	40020010 	.word	0x40020010
 8004004:	40020028 	.word	0x40020028
 8004008:	40020040 	.word	0x40020040
 800400c:	40020058 	.word	0x40020058
 8004010:	40020070 	.word	0x40020070
 8004014:	40020088 	.word	0x40020088
 8004018:	400200a0 	.word	0x400200a0
 800401c:	400200b8 	.word	0x400200b8
 8004020:	40020410 	.word	0x40020410
 8004024:	40020428 	.word	0x40020428
 8004028:	40020440 	.word	0x40020440
 800402c:	40020458 	.word	0x40020458
 8004030:	40020470 	.word	0x40020470
 8004034:	40020488 	.word	0x40020488
 8004038:	400204a0 	.word	0x400204a0
 800403c:	400204b8 	.word	0x400204b8
 8004040:	58025408 	.word	0x58025408
 8004044:	5802541c 	.word	0x5802541c
 8004048:	58025430 	.word	0x58025430
 800404c:	58025444 	.word	0x58025444
 8004050:	58025458 	.word	0x58025458
 8004054:	5802546c 	.word	0x5802546c
 8004058:	58025480 	.word	0x58025480
 800405c:	58025494 	.word	0x58025494

08004060 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004068:	f7fe f928 	bl	80022bc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e2dc      	b.n	8004632 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d008      	beq.n	8004096 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e2cd      	b.n	8004632 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a76      	ldr	r2, [pc, #472]	; (8004274 <HAL_DMA_Abort+0x214>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d04a      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a74      	ldr	r2, [pc, #464]	; (8004278 <HAL_DMA_Abort+0x218>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d045      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a73      	ldr	r2, [pc, #460]	; (800427c <HAL_DMA_Abort+0x21c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d040      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a71      	ldr	r2, [pc, #452]	; (8004280 <HAL_DMA_Abort+0x220>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d03b      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a70      	ldr	r2, [pc, #448]	; (8004284 <HAL_DMA_Abort+0x224>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d036      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6e      	ldr	r2, [pc, #440]	; (8004288 <HAL_DMA_Abort+0x228>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d031      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6d      	ldr	r2, [pc, #436]	; (800428c <HAL_DMA_Abort+0x22c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d02c      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a6b      	ldr	r2, [pc, #428]	; (8004290 <HAL_DMA_Abort+0x230>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d027      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6a      	ldr	r2, [pc, #424]	; (8004294 <HAL_DMA_Abort+0x234>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d022      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a68      	ldr	r2, [pc, #416]	; (8004298 <HAL_DMA_Abort+0x238>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01d      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a67      	ldr	r2, [pc, #412]	; (800429c <HAL_DMA_Abort+0x23c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d018      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a65      	ldr	r2, [pc, #404]	; (80042a0 <HAL_DMA_Abort+0x240>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a64      	ldr	r2, [pc, #400]	; (80042a4 <HAL_DMA_Abort+0x244>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a62      	ldr	r2, [pc, #392]	; (80042a8 <HAL_DMA_Abort+0x248>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a61      	ldr	r2, [pc, #388]	; (80042ac <HAL_DMA_Abort+0x24c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_DMA_Abort+0xd6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a5f      	ldr	r2, [pc, #380]	; (80042b0 <HAL_DMA_Abort+0x250>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_DMA_Abort+0xda>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_DMA_Abort+0xdc>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 021e 	bic.w	r2, r2, #30
 800414e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800415e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e00a      	b.n	800417e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 020e 	bic.w	r2, r2, #14
 8004176:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3c      	ldr	r2, [pc, #240]	; (8004274 <HAL_DMA_Abort+0x214>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d072      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3a      	ldr	r2, [pc, #232]	; (8004278 <HAL_DMA_Abort+0x218>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d06d      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a39      	ldr	r2, [pc, #228]	; (800427c <HAL_DMA_Abort+0x21c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d068      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a37      	ldr	r2, [pc, #220]	; (8004280 <HAL_DMA_Abort+0x220>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d063      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a36      	ldr	r2, [pc, #216]	; (8004284 <HAL_DMA_Abort+0x224>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d05e      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_DMA_Abort+0x228>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d059      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a33      	ldr	r2, [pc, #204]	; (800428c <HAL_DMA_Abort+0x22c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d054      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a31      	ldr	r2, [pc, #196]	; (8004290 <HAL_DMA_Abort+0x230>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04f      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a30      	ldr	r2, [pc, #192]	; (8004294 <HAL_DMA_Abort+0x234>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04a      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <HAL_DMA_Abort+0x238>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d045      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_DMA_Abort+0x23c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_DMA_Abort+0x240>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d03b      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <HAL_DMA_Abort+0x244>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d036      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_DMA_Abort+0x248>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a27      	ldr	r2, [pc, #156]	; (80042ac <HAL_DMA_Abort+0x24c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d02c      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_DMA_Abort+0x250>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <HAL_DMA_Abort+0x254>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_DMA_Abort+0x258>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <HAL_DMA_Abort+0x25c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_DMA_Abort+0x260>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_DMA_Abort+0x264>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_DMA_Abort+0x268>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_DMA_Abort+0x26c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_DMA_Abort+0x20e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_DMA_Abort+0x270>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d132      	bne.n	80042d4 <HAL_DMA_Abort+0x274>
 800426e:	2301      	movs	r3, #1
 8004270:	e031      	b.n	80042d6 <HAL_DMA_Abort+0x276>
 8004272:	bf00      	nop
 8004274:	40020010 	.word	0x40020010
 8004278:	40020028 	.word	0x40020028
 800427c:	40020040 	.word	0x40020040
 8004280:	40020058 	.word	0x40020058
 8004284:	40020070 	.word	0x40020070
 8004288:	40020088 	.word	0x40020088
 800428c:	400200a0 	.word	0x400200a0
 8004290:	400200b8 	.word	0x400200b8
 8004294:	40020410 	.word	0x40020410
 8004298:	40020428 	.word	0x40020428
 800429c:	40020440 	.word	0x40020440
 80042a0:	40020458 	.word	0x40020458
 80042a4:	40020470 	.word	0x40020470
 80042a8:	40020488 	.word	0x40020488
 80042ac:	400204a0 	.word	0x400204a0
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	58025408 	.word	0x58025408
 80042b8:	5802541c 	.word	0x5802541c
 80042bc:	58025430 	.word	0x58025430
 80042c0:	58025444 	.word	0x58025444
 80042c4:	58025458 	.word	0x58025458
 80042c8:	5802546c 	.word	0x5802546c
 80042cc:	58025480 	.word	0x58025480
 80042d0:	58025494 	.word	0x58025494
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6d      	ldr	r2, [pc, #436]	; (80044a4 <HAL_DMA_Abort+0x444>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d04a      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6b      	ldr	r2, [pc, #428]	; (80044a8 <HAL_DMA_Abort+0x448>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d045      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a6a      	ldr	r2, [pc, #424]	; (80044ac <HAL_DMA_Abort+0x44c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a68      	ldr	r2, [pc, #416]	; (80044b0 <HAL_DMA_Abort+0x450>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d03b      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a67      	ldr	r2, [pc, #412]	; (80044b4 <HAL_DMA_Abort+0x454>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d036      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a65      	ldr	r2, [pc, #404]	; (80044b8 <HAL_DMA_Abort+0x458>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d031      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a64      	ldr	r2, [pc, #400]	; (80044bc <HAL_DMA_Abort+0x45c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d02c      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a62      	ldr	r2, [pc, #392]	; (80044c0 <HAL_DMA_Abort+0x460>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d027      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a61      	ldr	r2, [pc, #388]	; (80044c4 <HAL_DMA_Abort+0x464>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a5f      	ldr	r2, [pc, #380]	; (80044c8 <HAL_DMA_Abort+0x468>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01d      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <HAL_DMA_Abort+0x46c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5c      	ldr	r2, [pc, #368]	; (80044d0 <HAL_DMA_Abort+0x470>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5b      	ldr	r2, [pc, #364]	; (80044d4 <HAL_DMA_Abort+0x474>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a59      	ldr	r2, [pc, #356]	; (80044d8 <HAL_DMA_Abort+0x478>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a58      	ldr	r2, [pc, #352]	; (80044dc <HAL_DMA_Abort+0x47c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_DMA_Abort+0x32a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_DMA_Abort+0x480>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d108      	bne.n	800439c <HAL_DMA_Abort+0x33c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e007      	b.n	80043ac <HAL_DMA_Abort+0x34c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043ac:	e013      	b.n	80043d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ae:	f7fd ff85 	bl	80022bc <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d90c      	bls.n	80043d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2203      	movs	r2, #3
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e12d      	b.n	8004632 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e5      	bne.n	80043ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <HAL_DMA_Abort+0x444>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a2d      	ldr	r2, [pc, #180]	; (80044a8 <HAL_DMA_Abort+0x448>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <HAL_DMA_Abort+0x44c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2a      	ldr	r2, [pc, #168]	; (80044b0 <HAL_DMA_Abort+0x450>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <HAL_DMA_Abort+0x454>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <HAL_DMA_Abort+0x458>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_DMA_Abort+0x45c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <HAL_DMA_Abort+0x460>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a23      	ldr	r2, [pc, #140]	; (80044c4 <HAL_DMA_Abort+0x464>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <HAL_DMA_Abort+0x468>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a20      	ldr	r2, [pc, #128]	; (80044cc <HAL_DMA_Abort+0x46c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_DMA_Abort+0x470>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_DMA_Abort+0x474>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_DMA_Abort+0x478>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <HAL_DMA_Abort+0x47c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_Abort+0x422>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_DMA_Abort+0x480>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_DMA_Abort+0x426>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_DMA_Abort+0x428>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02b      	beq.n	80044e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	223f      	movs	r2, #63	; 0x3f
 800449c:	409a      	lsls	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	e02a      	b.n	80044fa <HAL_DMA_Abort+0x49a>
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a4f      	ldr	r2, [pc, #316]	; (800463c <HAL_DMA_Abort+0x5dc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d072      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a4d      	ldr	r2, [pc, #308]	; (8004640 <HAL_DMA_Abort+0x5e0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d06d      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <HAL_DMA_Abort+0x5e4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d068      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a4a      	ldr	r2, [pc, #296]	; (8004648 <HAL_DMA_Abort+0x5e8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d063      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a49      	ldr	r2, [pc, #292]	; (800464c <HAL_DMA_Abort+0x5ec>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d05e      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a47      	ldr	r2, [pc, #284]	; (8004650 <HAL_DMA_Abort+0x5f0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d059      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a46      	ldr	r2, [pc, #280]	; (8004654 <HAL_DMA_Abort+0x5f4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d054      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a44      	ldr	r2, [pc, #272]	; (8004658 <HAL_DMA_Abort+0x5f8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04f      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a43      	ldr	r2, [pc, #268]	; (800465c <HAL_DMA_Abort+0x5fc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a41      	ldr	r2, [pc, #260]	; (8004660 <HAL_DMA_Abort+0x600>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a40      	ldr	r2, [pc, #256]	; (8004664 <HAL_DMA_Abort+0x604>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_DMA_Abort+0x608>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a3d      	ldr	r2, [pc, #244]	; (800466c <HAL_DMA_Abort+0x60c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <HAL_DMA_Abort+0x610>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a3a      	ldr	r2, [pc, #232]	; (8004674 <HAL_DMA_Abort+0x614>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a38      	ldr	r2, [pc, #224]	; (8004678 <HAL_DMA_Abort+0x618>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a37      	ldr	r2, [pc, #220]	; (800467c <HAL_DMA_Abort+0x61c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a35      	ldr	r2, [pc, #212]	; (8004680 <HAL_DMA_Abort+0x620>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <HAL_DMA_Abort+0x624>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a32      	ldr	r2, [pc, #200]	; (8004688 <HAL_DMA_Abort+0x628>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a31      	ldr	r2, [pc, #196]	; (800468c <HAL_DMA_Abort+0x62c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2f      	ldr	r2, [pc, #188]	; (8004690 <HAL_DMA_Abort+0x630>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2e      	ldr	r2, [pc, #184]	; (8004694 <HAL_DMA_Abort+0x634>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_Abort+0x58a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <HAL_DMA_Abort+0x638>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_Abort+0x58e>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_DMA_Abort+0x590>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004614:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800461e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40020010 	.word	0x40020010
 8004640:	40020028 	.word	0x40020028
 8004644:	40020040 	.word	0x40020040
 8004648:	40020058 	.word	0x40020058
 800464c:	40020070 	.word	0x40020070
 8004650:	40020088 	.word	0x40020088
 8004654:	400200a0 	.word	0x400200a0
 8004658:	400200b8 	.word	0x400200b8
 800465c:	40020410 	.word	0x40020410
 8004660:	40020428 	.word	0x40020428
 8004664:	40020440 	.word	0x40020440
 8004668:	40020458 	.word	0x40020458
 800466c:	40020470 	.word	0x40020470
 8004670:	40020488 	.word	0x40020488
 8004674:	400204a0 	.word	0x400204a0
 8004678:	400204b8 	.word	0x400204b8
 800467c:	58025408 	.word	0x58025408
 8004680:	5802541c 	.word	0x5802541c
 8004684:	58025430 	.word	0x58025430
 8004688:	58025444 	.word	0x58025444
 800468c:	58025458 	.word	0x58025458
 8004690:	5802546c 	.word	0x5802546c
 8004694:	58025480 	.word	0x58025480
 8004698:	58025494 	.word	0x58025494

0800469c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e237      	b.n	8004b1e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d004      	beq.n	80046c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2280      	movs	r2, #128	; 0x80
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e22c      	b.n	8004b1e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a5c      	ldr	r2, [pc, #368]	; (800483c <HAL_DMA_Abort_IT+0x1a0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a5b      	ldr	r2, [pc, #364]	; (8004840 <HAL_DMA_Abort_IT+0x1a4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a59      	ldr	r2, [pc, #356]	; (8004844 <HAL_DMA_Abort_IT+0x1a8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_DMA_Abort_IT+0x1ac>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a56      	ldr	r2, [pc, #344]	; (800484c <HAL_DMA_Abort_IT+0x1b0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a55      	ldr	r2, [pc, #340]	; (8004850 <HAL_DMA_Abort_IT+0x1b4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a53      	ldr	r2, [pc, #332]	; (8004854 <HAL_DMA_Abort_IT+0x1b8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a52      	ldr	r2, [pc, #328]	; (8004858 <HAL_DMA_Abort_IT+0x1bc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a50      	ldr	r2, [pc, #320]	; (800485c <HAL_DMA_Abort_IT+0x1c0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a4f      	ldr	r2, [pc, #316]	; (8004860 <HAL_DMA_Abort_IT+0x1c4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a4d      	ldr	r2, [pc, #308]	; (8004864 <HAL_DMA_Abort_IT+0x1c8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a4c      	ldr	r2, [pc, #304]	; (8004868 <HAL_DMA_Abort_IT+0x1cc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a4a      	ldr	r2, [pc, #296]	; (800486c <HAL_DMA_Abort_IT+0x1d0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a49      	ldr	r2, [pc, #292]	; (8004870 <HAL_DMA_Abort_IT+0x1d4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a47      	ldr	r2, [pc, #284]	; (8004874 <HAL_DMA_Abort_IT+0x1d8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_Abort_IT+0xc8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a46      	ldr	r2, [pc, #280]	; (8004878 <HAL_DMA_Abort_IT+0x1dc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <HAL_DMA_Abort_IT+0xcc>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_DMA_Abort_IT+0xce>
 8004768:	2300      	movs	r3, #0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8086 	beq.w	800487c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2204      	movs	r2, #4
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2f      	ldr	r2, [pc, #188]	; (800483c <HAL_DMA_Abort_IT+0x1a0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d04a      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2e      	ldr	r2, [pc, #184]	; (8004840 <HAL_DMA_Abort_IT+0x1a4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d045      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2c      	ldr	r2, [pc, #176]	; (8004844 <HAL_DMA_Abort_IT+0x1a8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d040      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <HAL_DMA_Abort_IT+0x1ac>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d03b      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a29      	ldr	r2, [pc, #164]	; (800484c <HAL_DMA_Abort_IT+0x1b0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d036      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_DMA_Abort_IT+0x1b4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d031      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a26      	ldr	r2, [pc, #152]	; (8004854 <HAL_DMA_Abort_IT+0x1b8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d02c      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a25      	ldr	r2, [pc, #148]	; (8004858 <HAL_DMA_Abort_IT+0x1bc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d027      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a23      	ldr	r2, [pc, #140]	; (800485c <HAL_DMA_Abort_IT+0x1c0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d022      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a22      	ldr	r2, [pc, #136]	; (8004860 <HAL_DMA_Abort_IT+0x1c4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d01d      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <HAL_DMA_Abort_IT+0x1c8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d018      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_DMA_Abort_IT+0x1cc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1d      	ldr	r2, [pc, #116]	; (800486c <HAL_DMA_Abort_IT+0x1d0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_DMA_Abort_IT+0x1d4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_DMA_Abort_IT+0x1d8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_DMA_Abort_IT+0x17c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_DMA_Abort_IT+0x1dc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <HAL_DMA_Abort_IT+0x18e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e178      	b.n	8004b1c <HAL_DMA_Abort_IT+0x480>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e16f      	b.n	8004b1c <HAL_DMA_Abort_IT+0x480>
 800483c:	40020010 	.word	0x40020010
 8004840:	40020028 	.word	0x40020028
 8004844:	40020040 	.word	0x40020040
 8004848:	40020058 	.word	0x40020058
 800484c:	40020070 	.word	0x40020070
 8004850:	40020088 	.word	0x40020088
 8004854:	400200a0 	.word	0x400200a0
 8004858:	400200b8 	.word	0x400200b8
 800485c:	40020410 	.word	0x40020410
 8004860:	40020428 	.word	0x40020428
 8004864:	40020440 	.word	0x40020440
 8004868:	40020458 	.word	0x40020458
 800486c:	40020470 	.word	0x40020470
 8004870:	40020488 	.word	0x40020488
 8004874:	400204a0 	.word	0x400204a0
 8004878:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 020e 	bic.w	r2, r2, #14
 800488a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a6c      	ldr	r2, [pc, #432]	; (8004a44 <HAL_DMA_Abort_IT+0x3a8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04a      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6b      	ldr	r2, [pc, #428]	; (8004a48 <HAL_DMA_Abort_IT+0x3ac>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d045      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a69      	ldr	r2, [pc, #420]	; (8004a4c <HAL_DMA_Abort_IT+0x3b0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d040      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a68      	ldr	r2, [pc, #416]	; (8004a50 <HAL_DMA_Abort_IT+0x3b4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d03b      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a66      	ldr	r2, [pc, #408]	; (8004a54 <HAL_DMA_Abort_IT+0x3b8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d036      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a65      	ldr	r2, [pc, #404]	; (8004a58 <HAL_DMA_Abort_IT+0x3bc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d031      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a63      	ldr	r2, [pc, #396]	; (8004a5c <HAL_DMA_Abort_IT+0x3c0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02c      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a62      	ldr	r2, [pc, #392]	; (8004a60 <HAL_DMA_Abort_IT+0x3c4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d027      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a60      	ldr	r2, [pc, #384]	; (8004a64 <HAL_DMA_Abort_IT+0x3c8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5f      	ldr	r2, [pc, #380]	; (8004a68 <HAL_DMA_Abort_IT+0x3cc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d01d      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a5d      	ldr	r2, [pc, #372]	; (8004a6c <HAL_DMA_Abort_IT+0x3d0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a5c      	ldr	r2, [pc, #368]	; (8004a70 <HAL_DMA_Abort_IT+0x3d4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5a      	ldr	r2, [pc, #360]	; (8004a74 <HAL_DMA_Abort_IT+0x3d8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a59      	ldr	r2, [pc, #356]	; (8004a78 <HAL_DMA_Abort_IT+0x3dc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a57      	ldr	r2, [pc, #348]	; (8004a7c <HAL_DMA_Abort_IT+0x3e0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_DMA_Abort_IT+0x290>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a56      	ldr	r2, [pc, #344]	; (8004a80 <HAL_DMA_Abort_IT+0x3e4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <HAL_DMA_Abort_IT+0x2a2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e007      	b.n	800494e <HAL_DMA_Abort_IT+0x2b2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a3c      	ldr	r2, [pc, #240]	; (8004a44 <HAL_DMA_Abort_IT+0x3a8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d072      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <HAL_DMA_Abort_IT+0x3ac>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d06d      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a39      	ldr	r2, [pc, #228]	; (8004a4c <HAL_DMA_Abort_IT+0x3b0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d068      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a37      	ldr	r2, [pc, #220]	; (8004a50 <HAL_DMA_Abort_IT+0x3b4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d063      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a36      	ldr	r2, [pc, #216]	; (8004a54 <HAL_DMA_Abort_IT+0x3b8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d05e      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <HAL_DMA_Abort_IT+0x3bc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d059      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a33      	ldr	r2, [pc, #204]	; (8004a5c <HAL_DMA_Abort_IT+0x3c0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d054      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a31      	ldr	r2, [pc, #196]	; (8004a60 <HAL_DMA_Abort_IT+0x3c4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d04f      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a30      	ldr	r2, [pc, #192]	; (8004a64 <HAL_DMA_Abort_IT+0x3c8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d04a      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <HAL_DMA_Abort_IT+0x3cc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d045      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2d      	ldr	r2, [pc, #180]	; (8004a6c <HAL_DMA_Abort_IT+0x3d0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d040      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <HAL_DMA_Abort_IT+0x3d4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d03b      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <HAL_DMA_Abort_IT+0x3d8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d036      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <HAL_DMA_Abort_IT+0x3dc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d031      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <HAL_DMA_Abort_IT+0x3e0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d02c      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a25      	ldr	r2, [pc, #148]	; (8004a80 <HAL_DMA_Abort_IT+0x3e4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d027      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a24      	ldr	r2, [pc, #144]	; (8004a84 <HAL_DMA_Abort_IT+0x3e8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d022      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a22      	ldr	r2, [pc, #136]	; (8004a88 <HAL_DMA_Abort_IT+0x3ec>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01d      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <HAL_DMA_Abort_IT+0x3f0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d018      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <HAL_DMA_Abort_IT+0x3f4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1e      	ldr	r2, [pc, #120]	; (8004a94 <HAL_DMA_Abort_IT+0x3f8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <HAL_DMA_Abort_IT+0x3fc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <HAL_DMA_Abort_IT+0x400>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_DMA_Abort_IT+0x3a2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <HAL_DMA_Abort_IT+0x404>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d132      	bne.n	8004aa4 <HAL_DMA_Abort_IT+0x408>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e031      	b.n	8004aa6 <HAL_DMA_Abort_IT+0x40a>
 8004a42:	bf00      	nop
 8004a44:	40020010 	.word	0x40020010
 8004a48:	40020028 	.word	0x40020028
 8004a4c:	40020040 	.word	0x40020040
 8004a50:	40020058 	.word	0x40020058
 8004a54:	40020070 	.word	0x40020070
 8004a58:	40020088 	.word	0x40020088
 8004a5c:	400200a0 	.word	0x400200a0
 8004a60:	400200b8 	.word	0x400200b8
 8004a64:	40020410 	.word	0x40020410
 8004a68:	40020428 	.word	0x40020428
 8004a6c:	40020440 	.word	0x40020440
 8004a70:	40020458 	.word	0x40020458
 8004a74:	40020470 	.word	0x40020470
 8004a78:	40020488 	.word	0x40020488
 8004a7c:	400204a0 	.word	0x400204a0
 8004a80:	400204b8 	.word	0x400204b8
 8004a84:	58025408 	.word	0x58025408
 8004a88:	5802541c 	.word	0x5802541c
 8004a8c:	58025430 	.word	0x58025430
 8004a90:	58025444 	.word	0x58025444
 8004a94:	58025458 	.word	0x58025458
 8004a98:	5802546c 	.word	0x5802546c
 8004a9c:	58025480 	.word	0x58025480
 8004aa0:	58025494 	.word	0x58025494
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d028      	beq.n	8004afc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2201      	movs	r2, #1
 8004aca:	409a      	lsls	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ad8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00c      	beq.n	8004afc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004afa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop

08004b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b34:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <HAL_DMA_IRQHandler+0x1ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a67      	ldr	r2, [pc, #412]	; (8004cd8 <HAL_DMA_IRQHandler+0x1b0>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0a9b      	lsrs	r3, r3, #10
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5f      	ldr	r2, [pc, #380]	; (8004cdc <HAL_DMA_IRQHandler+0x1b4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d04a      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5d      	ldr	r2, [pc, #372]	; (8004ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d045      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5c      	ldr	r2, [pc, #368]	; (8004ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d040      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d03b      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a59      	ldr	r2, [pc, #356]	; (8004cec <HAL_DMA_IRQHandler+0x1c4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d036      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d031      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a56      	ldr	r2, [pc, #344]	; (8004cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d02c      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a54      	ldr	r2, [pc, #336]	; (8004cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d027      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a53      	ldr	r2, [pc, #332]	; (8004cfc <HAL_DMA_IRQHandler+0x1d4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a51      	ldr	r2, [pc, #324]	; (8004d00 <HAL_DMA_IRQHandler+0x1d8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a50      	ldr	r2, [pc, #320]	; (8004d04 <HAL_DMA_IRQHandler+0x1dc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a4e      	ldr	r2, [pc, #312]	; (8004d08 <HAL_DMA_IRQHandler+0x1e0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4d      	ldr	r2, [pc, #308]	; (8004d0c <HAL_DMA_IRQHandler+0x1e4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a4b      	ldr	r2, [pc, #300]	; (8004d10 <HAL_DMA_IRQHandler+0x1e8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a4a      	ldr	r2, [pc, #296]	; (8004d14 <HAL_DMA_IRQHandler+0x1ec>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xd2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a48      	ldr	r2, [pc, #288]	; (8004d18 <HAL_DMA_IRQHandler+0x1f0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_IRQHandler+0xd6>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_DMA_IRQHandler+0xd8>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 842b 	beq.w	800545c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2208      	movs	r2, #8
 8004c10:	409a      	lsls	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80a2 	beq.w	8004d60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2e      	ldr	r2, [pc, #184]	; (8004cdc <HAL_DMA_IRQHandler+0x1b4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04a      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d045      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d040      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03b      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <HAL_DMA_IRQHandler+0x1c4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d036      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d031      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02c      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a24      	ldr	r2, [pc, #144]	; (8004cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d027      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_DMA_IRQHandler+0x1d4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <HAL_DMA_IRQHandler+0x1d8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01d      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_DMA_IRQHandler+0x1dc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <HAL_DMA_IRQHandler+0x1e0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_DMA_IRQHandler+0x1e4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_DMA_IRQHandler+0x1e8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_DMA_IRQHandler+0x1ec>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x194>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_DMA_IRQHandler+0x1f0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d12f      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x1f4>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf14      	ite	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	2300      	moveq	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e02e      	b.n	8004d30 <HAL_DMA_IRQHandler+0x208>
 8004cd2:	bf00      	nop
 8004cd4:	24000000 	.word	0x24000000
 8004cd8:	1b4e81b5 	.word	0x1b4e81b5
 8004cdc:	40020010 	.word	0x40020010
 8004ce0:	40020028 	.word	0x40020028
 8004ce4:	40020040 	.word	0x40020040
 8004ce8:	40020058 	.word	0x40020058
 8004cec:	40020070 	.word	0x40020070
 8004cf0:	40020088 	.word	0x40020088
 8004cf4:	400200a0 	.word	0x400200a0
 8004cf8:	400200b8 	.word	0x400200b8
 8004cfc:	40020410 	.word	0x40020410
 8004d00:	40020428 	.word	0x40020428
 8004d04:	40020440 	.word	0x40020440
 8004d08:	40020458 	.word	0x40020458
 8004d0c:	40020470 	.word	0x40020470
 8004d10:	40020488 	.word	0x40020488
 8004d14:	400204a0 	.word	0x400204a0
 8004d18:	400204b8 	.word	0x400204b8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf14      	ite	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	2300      	moveq	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d015      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0204 	bic.w	r2, r2, #4
 8004d42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f043 0201 	orr.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d06e      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a69      	ldr	r2, [pc, #420]	; (8004f20 <HAL_DMA_IRQHandler+0x3f8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d04a      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a67      	ldr	r2, [pc, #412]	; (8004f24 <HAL_DMA_IRQHandler+0x3fc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d045      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a66      	ldr	r2, [pc, #408]	; (8004f28 <HAL_DMA_IRQHandler+0x400>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d040      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a64      	ldr	r2, [pc, #400]	; (8004f2c <HAL_DMA_IRQHandler+0x404>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d03b      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a63      	ldr	r2, [pc, #396]	; (8004f30 <HAL_DMA_IRQHandler+0x408>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d036      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a61      	ldr	r2, [pc, #388]	; (8004f34 <HAL_DMA_IRQHandler+0x40c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d031      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a60      	ldr	r2, [pc, #384]	; (8004f38 <HAL_DMA_IRQHandler+0x410>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d02c      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5e      	ldr	r2, [pc, #376]	; (8004f3c <HAL_DMA_IRQHandler+0x414>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d027      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a5d      	ldr	r2, [pc, #372]	; (8004f40 <HAL_DMA_IRQHandler+0x418>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a5b      	ldr	r2, [pc, #364]	; (8004f44 <HAL_DMA_IRQHandler+0x41c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01d      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_DMA_IRQHandler+0x420>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d018      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a58      	ldr	r2, [pc, #352]	; (8004f4c <HAL_DMA_IRQHandler+0x424>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a57      	ldr	r2, [pc, #348]	; (8004f50 <HAL_DMA_IRQHandler+0x428>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a55      	ldr	r2, [pc, #340]	; (8004f54 <HAL_DMA_IRQHandler+0x42c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a54      	ldr	r2, [pc, #336]	; (8004f58 <HAL_DMA_IRQHandler+0x430>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x2ee>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_DMA_IRQHandler+0x434>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d10a      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x304>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e003      	b.n	8004e34 <HAL_DMA_IRQHandler+0x30c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	2201      	movs	r2, #1
 8004e42:	409a      	lsls	r2, r3
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	f043 0202 	orr.w	r2, r3, #2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 808f 	beq.w	8004f88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <HAL_DMA_IRQHandler+0x3f8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04a      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <HAL_DMA_IRQHandler+0x3fc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d045      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a29      	ldr	r2, [pc, #164]	; (8004f28 <HAL_DMA_IRQHandler+0x400>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d040      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	; (8004f2c <HAL_DMA_IRQHandler+0x404>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03b      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <HAL_DMA_IRQHandler+0x408>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d036      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <HAL_DMA_IRQHandler+0x40c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d031      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <HAL_DMA_IRQHandler+0x410>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02c      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <HAL_DMA_IRQHandler+0x414>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d027      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <HAL_DMA_IRQHandler+0x418>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	; (8004f44 <HAL_DMA_IRQHandler+0x41c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	; (8004f48 <HAL_DMA_IRQHandler+0x420>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <HAL_DMA_IRQHandler+0x424>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <HAL_DMA_IRQHandler+0x428>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_DMA_IRQHandler+0x42c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_DMA_IRQHandler+0x430>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x3e2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <HAL_DMA_IRQHandler+0x434>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d12a      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x438>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e023      	b.n	8004f68 <HAL_DMA_IRQHandler+0x440>
 8004f20:	40020010 	.word	0x40020010
 8004f24:	40020028 	.word	0x40020028
 8004f28:	40020040 	.word	0x40020040
 8004f2c:	40020058 	.word	0x40020058
 8004f30:	40020070 	.word	0x40020070
 8004f34:	40020088 	.word	0x40020088
 8004f38:	400200a0 	.word	0x400200a0
 8004f3c:	400200b8 	.word	0x400200b8
 8004f40:	40020410 	.word	0x40020410
 8004f44:	40020428 	.word	0x40020428
 8004f48:	40020440 	.word	0x40020440
 8004f4c:	40020458 	.word	0x40020458
 8004f50:	40020470 	.word	0x40020470
 8004f54:	40020488 	.word	0x40020488
 8004f58:	400204a0 	.word	0x400204a0
 8004f5c:	400204b8 	.word	0x400204b8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2204      	movs	r2, #4
 8004f76:	409a      	lsls	r2, r3
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	2210      	movs	r2, #16
 8004f92:	409a      	lsls	r2, r3
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80a6 	beq.w	80050ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a85      	ldr	r2, [pc, #532]	; (80051b8 <HAL_DMA_IRQHandler+0x690>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d04a      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a83      	ldr	r2, [pc, #524]	; (80051bc <HAL_DMA_IRQHandler+0x694>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d045      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a82      	ldr	r2, [pc, #520]	; (80051c0 <HAL_DMA_IRQHandler+0x698>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d040      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a80      	ldr	r2, [pc, #512]	; (80051c4 <HAL_DMA_IRQHandler+0x69c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d03b      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a7f      	ldr	r2, [pc, #508]	; (80051c8 <HAL_DMA_IRQHandler+0x6a0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d036      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7d      	ldr	r2, [pc, #500]	; (80051cc <HAL_DMA_IRQHandler+0x6a4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d031      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7c      	ldr	r2, [pc, #496]	; (80051d0 <HAL_DMA_IRQHandler+0x6a8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d02c      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a7a      	ldr	r2, [pc, #488]	; (80051d4 <HAL_DMA_IRQHandler+0x6ac>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d027      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a79      	ldr	r2, [pc, #484]	; (80051d8 <HAL_DMA_IRQHandler+0x6b0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d022      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a77      	ldr	r2, [pc, #476]	; (80051dc <HAL_DMA_IRQHandler+0x6b4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a76      	ldr	r2, [pc, #472]	; (80051e0 <HAL_DMA_IRQHandler+0x6b8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a74      	ldr	r2, [pc, #464]	; (80051e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a73      	ldr	r2, [pc, #460]	; (80051e8 <HAL_DMA_IRQHandler+0x6c0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a71      	ldr	r2, [pc, #452]	; (80051ec <HAL_DMA_IRQHandler+0x6c4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a70      	ldr	r2, [pc, #448]	; (80051f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_DMA_IRQHandler+0x516>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6e      	ldr	r2, [pc, #440]	; (80051f4 <HAL_DMA_IRQHandler+0x6cc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10a      	bne.n	8005054 <HAL_DMA_IRQHandler+0x52c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e009      	b.n	8005068 <HAL_DMA_IRQHandler+0x540>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf14      	ite	ne
 8005062:	2301      	movne	r3, #1
 8005064:	2300      	moveq	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d03e      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2210      	movs	r2, #16
 8005076:	409a      	lsls	r2, r3
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d018      	beq.n	80050bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d024      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
 80050a8:	e01f      	b.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01b      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
 80050ba:	e016      	b.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0208 	bic.w	r2, r2, #8
 80050d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2220      	movs	r2, #32
 80050f4:	409a      	lsls	r2, r3
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 8110 	beq.w	8005320 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2c      	ldr	r2, [pc, #176]	; (80051b8 <HAL_DMA_IRQHandler+0x690>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04a      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <HAL_DMA_IRQHandler+0x694>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d045      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <HAL_DMA_IRQHandler+0x698>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d040      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <HAL_DMA_IRQHandler+0x69c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d03b      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <HAL_DMA_IRQHandler+0x6a0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d036      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a25      	ldr	r2, [pc, #148]	; (80051cc <HAL_DMA_IRQHandler+0x6a4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d031      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a23      	ldr	r2, [pc, #140]	; (80051d0 <HAL_DMA_IRQHandler+0x6a8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02c      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <HAL_DMA_IRQHandler+0x6ac>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a20      	ldr	r2, [pc, #128]	; (80051d8 <HAL_DMA_IRQHandler+0x6b0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <HAL_DMA_IRQHandler+0x6b4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01d      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <HAL_DMA_IRQHandler+0x6b8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_DMA_IRQHandler+0x6c0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_DMA_IRQHandler+0x6c4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x678>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_DMA_IRQHandler+0x6cc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d12b      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x6d0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	e02a      	b.n	800520c <HAL_DMA_IRQHandler+0x6e4>
 80051b6:	bf00      	nop
 80051b8:	40020010 	.word	0x40020010
 80051bc:	40020028 	.word	0x40020028
 80051c0:	40020040 	.word	0x40020040
 80051c4:	40020058 	.word	0x40020058
 80051c8:	40020070 	.word	0x40020070
 80051cc:	40020088 	.word	0x40020088
 80051d0:	400200a0 	.word	0x400200a0
 80051d4:	400200b8 	.word	0x400200b8
 80051d8:	40020410 	.word	0x40020410
 80051dc:	40020428 	.word	0x40020428
 80051e0:	40020440 	.word	0x40020440
 80051e4:	40020458 	.word	0x40020458
 80051e8:	40020470 	.word	0x40020470
 80051ec:	40020488 	.word	0x40020488
 80051f0:	400204a0 	.word	0x400204a0
 80051f4:	400204b8 	.word	0x400204b8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8087 	beq.w	8005320 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2220      	movs	r2, #32
 800521c:	409a      	lsls	r2, r3
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b04      	cmp	r3, #4
 800522c:	d139      	bne.n	80052a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0216 	bic.w	r2, r2, #22
 800523c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800524c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_DMA_IRQHandler+0x736>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0208 	bic.w	r2, r2, #8
 800526c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	223f      	movs	r2, #63	; 0x3f
 8005278:	409a      	lsls	r2, r3
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 834a 	beq.w	800592c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
          }
          return;
 80052a0:	e344      	b.n	800592c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d018      	beq.n	80052e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
 80052ce:	e027      	b.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d023      	beq.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
 80052e0:	e01e      	b.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0210 	bic.w	r2, r2, #16
 80052fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8306 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8088 	beq.w	8005448 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2204      	movs	r2, #4
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a7a      	ldr	r2, [pc, #488]	; (8005530 <HAL_DMA_IRQHandler+0xa08>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d04a      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a79      	ldr	r2, [pc, #484]	; (8005534 <HAL_DMA_IRQHandler+0xa0c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d045      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a77      	ldr	r2, [pc, #476]	; (8005538 <HAL_DMA_IRQHandler+0xa10>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d040      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a76      	ldr	r2, [pc, #472]	; (800553c <HAL_DMA_IRQHandler+0xa14>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d03b      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a74      	ldr	r2, [pc, #464]	; (8005540 <HAL_DMA_IRQHandler+0xa18>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d036      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a73      	ldr	r2, [pc, #460]	; (8005544 <HAL_DMA_IRQHandler+0xa1c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d031      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a71      	ldr	r2, [pc, #452]	; (8005548 <HAL_DMA_IRQHandler+0xa20>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02c      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a70      	ldr	r2, [pc, #448]	; (800554c <HAL_DMA_IRQHandler+0xa24>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d027      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a6e      	ldr	r2, [pc, #440]	; (8005550 <HAL_DMA_IRQHandler+0xa28>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d022      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6d      	ldr	r2, [pc, #436]	; (8005554 <HAL_DMA_IRQHandler+0xa2c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d01d      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6b      	ldr	r2, [pc, #428]	; (8005558 <HAL_DMA_IRQHandler+0xa30>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d018      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6a      	ldr	r2, [pc, #424]	; (800555c <HAL_DMA_IRQHandler+0xa34>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <HAL_DMA_IRQHandler+0xa38>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a67      	ldr	r2, [pc, #412]	; (8005564 <HAL_DMA_IRQHandler+0xa3c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a65      	ldr	r2, [pc, #404]	; (8005568 <HAL_DMA_IRQHandler+0xa40>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x8b8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a64      	ldr	r2, [pc, #400]	; (800556c <HAL_DMA_IRQHandler+0xa44>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <HAL_DMA_IRQHandler+0x8ca>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e007      	b.n	8005402 <HAL_DMA_IRQHandler+0x8da>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	429a      	cmp	r2, r3
 800540c:	d307      	bcc.n	800541e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f2      	bne.n	8005402 <HAL_DMA_IRQHandler+0x8da>
 800541c:	e000      	b.n	8005420 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800541e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2203      	movs	r2, #3
 8005432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005436:	e003      	b.n	8005440 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8272 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	4798      	blx	r3
 800545a:	e26c      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a43      	ldr	r2, [pc, #268]	; (8005570 <HAL_DMA_IRQHandler+0xa48>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a42      	ldr	r2, [pc, #264]	; (8005574 <HAL_DMA_IRQHandler+0xa4c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01d      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a40      	ldr	r2, [pc, #256]	; (8005578 <HAL_DMA_IRQHandler+0xa50>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3f      	ldr	r2, [pc, #252]	; (800557c <HAL_DMA_IRQHandler+0xa54>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3d      	ldr	r2, [pc, #244]	; (8005580 <HAL_DMA_IRQHandler+0xa58>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3c      	ldr	r2, [pc, #240]	; (8005584 <HAL_DMA_IRQHandler+0xa5c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a3a      	ldr	r2, [pc, #232]	; (8005588 <HAL_DMA_IRQHandler+0xa60>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_DMA_IRQHandler+0x984>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a39      	ldr	r2, [pc, #228]	; (800558c <HAL_DMA_IRQHandler+0xa64>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d101      	bne.n	80054b0 <HAL_DMA_IRQHandler+0x988>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <HAL_DMA_IRQHandler+0x98a>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 823f 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2204      	movs	r2, #4
 80054ca:	409a      	lsls	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80cd 	beq.w	8005670 <HAL_DMA_IRQHandler+0xb48>
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80c7 	beq.w	8005670 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2204      	movs	r2, #4
 80054ec:	409a      	lsls	r2, r3
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d049      	beq.n	8005590 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8210 	beq.w	8005930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005518:	e20a      	b.n	8005930 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8206 	beq.w	8005930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800552c:	e200      	b.n	8005930 <HAL_DMA_IRQHandler+0xe08>
 800552e:	bf00      	nop
 8005530:	40020010 	.word	0x40020010
 8005534:	40020028 	.word	0x40020028
 8005538:	40020040 	.word	0x40020040
 800553c:	40020058 	.word	0x40020058
 8005540:	40020070 	.word	0x40020070
 8005544:	40020088 	.word	0x40020088
 8005548:	400200a0 	.word	0x400200a0
 800554c:	400200b8 	.word	0x400200b8
 8005550:	40020410 	.word	0x40020410
 8005554:	40020428 	.word	0x40020428
 8005558:	40020440 	.word	0x40020440
 800555c:	40020458 	.word	0x40020458
 8005560:	40020470 	.word	0x40020470
 8005564:	40020488 	.word	0x40020488
 8005568:	400204a0 	.word	0x400204a0
 800556c:	400204b8 	.word	0x400204b8
 8005570:	58025408 	.word	0x58025408
 8005574:	5802541c 	.word	0x5802541c
 8005578:	58025430 	.word	0x58025430
 800557c:	58025444 	.word	0x58025444
 8005580:	58025458 	.word	0x58025458
 8005584:	5802546c 	.word	0x5802546c
 8005588:	58025480 	.word	0x58025480
 800558c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d160      	bne.n	800565c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a7f      	ldr	r2, [pc, #508]	; (800579c <HAL_DMA_IRQHandler+0xc74>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d04a      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a7d      	ldr	r2, [pc, #500]	; (80057a0 <HAL_DMA_IRQHandler+0xc78>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d045      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7c      	ldr	r2, [pc, #496]	; (80057a4 <HAL_DMA_IRQHandler+0xc7c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d040      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a7a      	ldr	r2, [pc, #488]	; (80057a8 <HAL_DMA_IRQHandler+0xc80>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d03b      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a79      	ldr	r2, [pc, #484]	; (80057ac <HAL_DMA_IRQHandler+0xc84>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d036      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a77      	ldr	r2, [pc, #476]	; (80057b0 <HAL_DMA_IRQHandler+0xc88>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d031      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a76      	ldr	r2, [pc, #472]	; (80057b4 <HAL_DMA_IRQHandler+0xc8c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d02c      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a74      	ldr	r2, [pc, #464]	; (80057b8 <HAL_DMA_IRQHandler+0xc90>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d027      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a73      	ldr	r2, [pc, #460]	; (80057bc <HAL_DMA_IRQHandler+0xc94>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d022      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a71      	ldr	r2, [pc, #452]	; (80057c0 <HAL_DMA_IRQHandler+0xc98>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01d      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a70      	ldr	r2, [pc, #448]	; (80057c4 <HAL_DMA_IRQHandler+0xc9c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d018      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a6e      	ldr	r2, [pc, #440]	; (80057c8 <HAL_DMA_IRQHandler+0xca0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a6d      	ldr	r2, [pc, #436]	; (80057cc <HAL_DMA_IRQHandler+0xca4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00e      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a6b      	ldr	r2, [pc, #428]	; (80057d0 <HAL_DMA_IRQHandler+0xca8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d009      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6a      	ldr	r2, [pc, #424]	; (80057d4 <HAL_DMA_IRQHandler+0xcac>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d004      	beq.n	800563a <HAL_DMA_IRQHandler+0xb12>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a68      	ldr	r2, [pc, #416]	; (80057d8 <HAL_DMA_IRQHandler+0xcb0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d108      	bne.n	800564c <HAL_DMA_IRQHandler+0xb24>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0208 	bic.w	r2, r2, #8
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e007      	b.n	800565c <HAL_DMA_IRQHandler+0xb34>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8165 	beq.w	8005930 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800566e:	e15f      	b.n	8005930 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2202      	movs	r2, #2
 800567a:	409a      	lsls	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80c5 	beq.w	8005810 <HAL_DMA_IRQHandler+0xce8>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80bf 	beq.w	8005810 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2202      	movs	r2, #2
 800569c:	409a      	lsls	r2, r3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d018      	beq.n	80056de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 813a 	beq.w	8005934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056c8:	e134      	b.n	8005934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8130 	beq.w	8005934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056dc:	e12a      	b.n	8005934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 8089 	bne.w	80057fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2b      	ldr	r2, [pc, #172]	; (800579c <HAL_DMA_IRQHandler+0xc74>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <HAL_DMA_IRQHandler+0xc78>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <HAL_DMA_IRQHandler+0xc7c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a26      	ldr	r2, [pc, #152]	; (80057a8 <HAL_DMA_IRQHandler+0xc80>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a25      	ldr	r2, [pc, #148]	; (80057ac <HAL_DMA_IRQHandler+0xc84>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <HAL_DMA_IRQHandler+0xc88>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_DMA_IRQHandler+0xc8c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <HAL_DMA_IRQHandler+0xc90>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <HAL_DMA_IRQHandler+0xc94>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_DMA_IRQHandler+0xc98>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <HAL_DMA_IRQHandler+0xc9c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <HAL_DMA_IRQHandler+0xca0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a19      	ldr	r2, [pc, #100]	; (80057cc <HAL_DMA_IRQHandler+0xca4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <HAL_DMA_IRQHandler+0xca8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <HAL_DMA_IRQHandler+0xcac>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_IRQHandler+0xc62>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a14      	ldr	r2, [pc, #80]	; (80057d8 <HAL_DMA_IRQHandler+0xcb0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d128      	bne.n	80057dc <HAL_DMA_IRQHandler+0xcb4>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0214 	bic.w	r2, r2, #20
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e027      	b.n	80057ec <HAL_DMA_IRQHandler+0xcc4>
 800579c:	40020010 	.word	0x40020010
 80057a0:	40020028 	.word	0x40020028
 80057a4:	40020040 	.word	0x40020040
 80057a8:	40020058 	.word	0x40020058
 80057ac:	40020070 	.word	0x40020070
 80057b0:	40020088 	.word	0x40020088
 80057b4:	400200a0 	.word	0x400200a0
 80057b8:	400200b8 	.word	0x400200b8
 80057bc:	40020410 	.word	0x40020410
 80057c0:	40020428 	.word	0x40020428
 80057c4:	40020440 	.word	0x40020440
 80057c8:	40020458 	.word	0x40020458
 80057cc:	40020470 	.word	0x40020470
 80057d0:	40020488 	.word	0x40020488
 80057d4:	400204a0 	.word	0x400204a0
 80057d8:	400204b8 	.word	0x400204b8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 020a 	bic.w	r2, r2, #10
 80057ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8097 	beq.w	8005934 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800580e:	e091      	b.n	8005934 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2208      	movs	r2, #8
 800581a:	409a      	lsls	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8088 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8082 	beq.w	8005936 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a41      	ldr	r2, [pc, #260]	; (800593c <HAL_DMA_IRQHandler+0xe14>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d04a      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <HAL_DMA_IRQHandler+0xe18>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d045      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3e      	ldr	r2, [pc, #248]	; (8005944 <HAL_DMA_IRQHandler+0xe1c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d040      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a3c      	ldr	r2, [pc, #240]	; (8005948 <HAL_DMA_IRQHandler+0xe20>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d03b      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a3b      	ldr	r2, [pc, #236]	; (800594c <HAL_DMA_IRQHandler+0xe24>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d036      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a39      	ldr	r2, [pc, #228]	; (8005950 <HAL_DMA_IRQHandler+0xe28>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d031      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a38      	ldr	r2, [pc, #224]	; (8005954 <HAL_DMA_IRQHandler+0xe2c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d02c      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a36      	ldr	r2, [pc, #216]	; (8005958 <HAL_DMA_IRQHandler+0xe30>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d027      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a35      	ldr	r2, [pc, #212]	; (800595c <HAL_DMA_IRQHandler+0xe34>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d022      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_DMA_IRQHandler+0xe38>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01d      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a32      	ldr	r2, [pc, #200]	; (8005964 <HAL_DMA_IRQHandler+0xe3c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d018      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a30      	ldr	r2, [pc, #192]	; (8005968 <HAL_DMA_IRQHandler+0xe40>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2f      	ldr	r2, [pc, #188]	; (800596c <HAL_DMA_IRQHandler+0xe44>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00e      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2d      	ldr	r2, [pc, #180]	; (8005970 <HAL_DMA_IRQHandler+0xe48>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2c      	ldr	r2, [pc, #176]	; (8005974 <HAL_DMA_IRQHandler+0xe4c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xdaa>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <HAL_DMA_IRQHandler+0xe50>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <HAL_DMA_IRQHandler+0xdbc>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 021c 	bic.w	r2, r2, #28
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e007      	b.n	80058f4 <HAL_DMA_IRQHandler+0xdcc>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 020e 	bic.w	r2, r2, #14
 80058f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
 800592a:	e004      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800592c:	bf00      	nop
 800592e:	e002      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005934:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005936:	3728      	adds	r7, #40	; 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8

0800597c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a42      	ldr	r2, [pc, #264]	; (8005a94 <DMA_CalcBaseAndBitshift+0x118>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d04a      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a41      	ldr	r2, [pc, #260]	; (8005a98 <DMA_CalcBaseAndBitshift+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d045      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <DMA_CalcBaseAndBitshift+0x120>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d040      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a3e      	ldr	r2, [pc, #248]	; (8005aa0 <DMA_CalcBaseAndBitshift+0x124>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d03b      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a3c      	ldr	r2, [pc, #240]	; (8005aa4 <DMA_CalcBaseAndBitshift+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d036      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a3b      	ldr	r2, [pc, #236]	; (8005aa8 <DMA_CalcBaseAndBitshift+0x12c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d031      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a39      	ldr	r2, [pc, #228]	; (8005aac <DMA_CalcBaseAndBitshift+0x130>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02c      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a38      	ldr	r2, [pc, #224]	; (8005ab0 <DMA_CalcBaseAndBitshift+0x134>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d027      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a36      	ldr	r2, [pc, #216]	; (8005ab4 <DMA_CalcBaseAndBitshift+0x138>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d022      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a35      	ldr	r2, [pc, #212]	; (8005ab8 <DMA_CalcBaseAndBitshift+0x13c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01d      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a33      	ldr	r2, [pc, #204]	; (8005abc <DMA_CalcBaseAndBitshift+0x140>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d018      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a32      	ldr	r2, [pc, #200]	; (8005ac0 <DMA_CalcBaseAndBitshift+0x144>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a30      	ldr	r2, [pc, #192]	; (8005ac4 <DMA_CalcBaseAndBitshift+0x148>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <DMA_CalcBaseAndBitshift+0x150>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <DMA_CalcBaseAndBitshift+0xa8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a2c      	ldr	r2, [pc, #176]	; (8005ad0 <DMA_CalcBaseAndBitshift+0x154>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d101      	bne.n	8005a28 <DMA_CalcBaseAndBitshift+0xac>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <DMA_CalcBaseAndBitshift+0xae>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d024      	beq.n	8005a78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	3b10      	subs	r3, #16
 8005a36:	4a27      	ldr	r2, [pc, #156]	; (8005ad4 <DMA_CalcBaseAndBitshift+0x158>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	4a24      	ldr	r2, [pc, #144]	; (8005ad8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a48:	5cd3      	ldrb	r3, [r2, r3]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d908      	bls.n	8005a68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <DMA_CalcBaseAndBitshift+0x160>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	1d1a      	adds	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	659a      	str	r2, [r3, #88]	; 0x58
 8005a66:	e00d      	b.n	8005a84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <DMA_CalcBaseAndBitshift+0x160>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6593      	str	r3, [r2, #88]	; 0x58
 8005a76:	e005      	b.n	8005a84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
 8005ad4:	aaaaaaab 	.word	0xaaaaaaab
 8005ad8:	08011e4c 	.word	0x08011e4c
 8005adc:	fffffc00 	.word	0xfffffc00

08005ae0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d120      	bne.n	8005b36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d858      	bhi.n	8005bae <DMA_CheckFifoParam+0xce>
 8005afc:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <DMA_CheckFifoParam+0x24>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b27 	.word	0x08005b27
 8005b0c:	08005b15 	.word	0x08005b15
 8005b10:	08005baf 	.word	0x08005baf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d048      	beq.n	8005bb2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b24:	e045      	b.n	8005bb2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b2e:	d142      	bne.n	8005bb6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b34:	e03f      	b.n	8005bb6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3e:	d123      	bne.n	8005b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d838      	bhi.n	8005bba <DMA_CheckFifoParam+0xda>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <DMA_CheckFifoParam+0x70>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b67 	.word	0x08005b67
 8005b58:	08005b61 	.word	0x08005b61
 8005b5c:	08005b79 	.word	0x08005b79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
        break;
 8005b64:	e030      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d025      	beq.n	8005bbe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b76:	e022      	b.n	8005bbe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b80:	d11f      	bne.n	8005bc2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b86:	e01c      	b.n	8005bc2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d902      	bls.n	8005b96 <DMA_CheckFifoParam+0xb6>
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d003      	beq.n	8005b9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b94:	e018      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
        break;
 8005b9a:	e015      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00e      	beq.n	8005bc6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
    break;
 8005bac:	e00b      	b.n	8005bc6 <DMA_CheckFifoParam+0xe6>
        break;
 8005bae:	bf00      	nop
 8005bb0:	e00a      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
        break;
 8005bb2:	bf00      	nop
 8005bb4:	e008      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
        break;
 8005bb6:	bf00      	nop
 8005bb8:	e006      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
        break;
 8005bba:	bf00      	nop
 8005bbc:	e004      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
        break;
 8005bbe:	bf00      	nop
 8005bc0:	e002      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
        break;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <DMA_CheckFifoParam+0xe8>
    break;
 8005bc6:	bf00      	nop
    }
  }

  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop

08005bd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a38      	ldr	r2, [pc, #224]	; (8005ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a36      	ldr	r2, [pc, #216]	; (8005cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a35      	ldr	r2, [pc, #212]	; (8005cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a33      	ldr	r2, [pc, #204]	; (8005cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a32      	ldr	r2, [pc, #200]	; (8005cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a30      	ldr	r2, [pc, #192]	; (8005ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2d      	ldr	r2, [pc, #180]	; (8005ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01a      	beq.n	8005c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	3b08      	subs	r3, #8
 8005c48:	4a28      	ldr	r2, [pc, #160]	; (8005cec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	091b      	lsrs	r3, r3, #4
 8005c50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4b26      	ldr	r3, [pc, #152]	; (8005cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c74:	e024      	b.n	8005cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	3b10      	subs	r3, #16
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d806      	bhi.n	8005c9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d902      	bls.n	8005c9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a16      	ldr	r2, [pc, #88]	; (8005d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005cb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	2201      	movs	r2, #1
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	58025408 	.word	0x58025408
 8005cd0:	5802541c 	.word	0x5802541c
 8005cd4:	58025430 	.word	0x58025430
 8005cd8:	58025444 	.word	0x58025444
 8005cdc:	58025458 	.word	0x58025458
 8005ce0:	5802546c 	.word	0x5802546c
 8005ce4:	58025480 	.word	0x58025480
 8005ce8:	58025494 	.word	0x58025494
 8005cec:	cccccccd 	.word	0xcccccccd
 8005cf0:	16009600 	.word	0x16009600
 8005cf4:	58025880 	.word	0x58025880
 8005cf8:	aaaaaaab 	.word	0xaaaaaaab
 8005cfc:	400204b8 	.word	0x400204b8
 8005d00:	4002040f 	.word	0x4002040f
 8005d04:	10008200 	.word	0x10008200
 8005d08:	40020880 	.word	0x40020880

08005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d04a      	beq.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d847      	bhi.n	8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a24      	ldr	r2, [pc, #144]	; (8005dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a22      	ldr	r2, [pc, #136]	; (8005dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4b17      	ldr	r3, [pc, #92]	; (8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d94:	671a      	str	r2, [r3, #112]	; 0x70
 8005d96:	e009      	b.n	8005dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4b14      	ldr	r3, [pc, #80]	; (8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	461a      	mov	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005daa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	2201      	movs	r2, #1
 8005db2:	409a      	lsls	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	58025408 	.word	0x58025408
 8005dc8:	5802541c 	.word	0x5802541c
 8005dcc:	58025430 	.word	0x58025430
 8005dd0:	58025444 	.word	0x58025444
 8005dd4:	58025458 	.word	0x58025458
 8005dd8:	5802546c 	.word	0x5802546c
 8005ddc:	58025480 	.word	0x58025480
 8005de0:	58025494 	.word	0x58025494
 8005de4:	1600963f 	.word	0x1600963f
 8005de8:	58025940 	.word	0x58025940
 8005dec:	1000823f 	.word	0x1000823f
 8005df0:	40020940 	.word	0x40020940

08005df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e02:	4b89      	ldr	r3, [pc, #548]	; (8006028 <HAL_GPIO_Init+0x234>)
 8005e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e06:	e194      	b.n	8006132 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8186 	beq.w	800612c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d005      	beq.n	8005e38 <HAL_GPIO_Init+0x44>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d130      	bne.n	8005e9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	2203      	movs	r2, #3
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e6e:	2201      	movs	r2, #1
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	43db      	mvns	r3, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 0201 	and.w	r2, r3, #1
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d017      	beq.n	8005ed6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d123      	bne.n	8005f2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	08da      	lsrs	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3208      	adds	r2, #8
 8005eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	220f      	movs	r2, #15
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4013      	ands	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	08da      	lsrs	r2, r3, #3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3208      	adds	r2, #8
 8005f24:	69b9      	ldr	r1, [r7, #24]
 8005f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	2203      	movs	r2, #3
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f003 0203 	and.w	r2, r3, #3
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80e0 	beq.w	800612c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f6c:	4b2f      	ldr	r3, [pc, #188]	; (800602c <HAL_GPIO_Init+0x238>)
 8005f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f72:	4a2e      	ldr	r2, [pc, #184]	; (800602c <HAL_GPIO_Init+0x238>)
 8005f74:	f043 0302 	orr.w	r3, r3, #2
 8005f78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f7c:	4b2b      	ldr	r3, [pc, #172]	; (800602c <HAL_GPIO_Init+0x238>)
 8005f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f8a:	4a29      	ldr	r2, [pc, #164]	; (8006030 <HAL_GPIO_Init+0x23c>)
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	3302      	adds	r3, #2
 8005f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	220f      	movs	r2, #15
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <HAL_GPIO_Init+0x240>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d052      	beq.n	800605c <HAL_GPIO_Init+0x268>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <HAL_GPIO_Init+0x244>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d031      	beq.n	8006022 <HAL_GPIO_Init+0x22e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1e      	ldr	r2, [pc, #120]	; (800603c <HAL_GPIO_Init+0x248>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d02b      	beq.n	800601e <HAL_GPIO_Init+0x22a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_GPIO_Init+0x24c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d025      	beq.n	800601a <HAL_GPIO_Init+0x226>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_GPIO_Init+0x250>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01f      	beq.n	8006016 <HAL_GPIO_Init+0x222>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_GPIO_Init+0x254>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d019      	beq.n	8006012 <HAL_GPIO_Init+0x21e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_GPIO_Init+0x258>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d013      	beq.n	800600e <HAL_GPIO_Init+0x21a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <HAL_GPIO_Init+0x25c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00d      	beq.n	800600a <HAL_GPIO_Init+0x216>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a18      	ldr	r2, [pc, #96]	; (8006054 <HAL_GPIO_Init+0x260>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d007      	beq.n	8006006 <HAL_GPIO_Init+0x212>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a17      	ldr	r2, [pc, #92]	; (8006058 <HAL_GPIO_Init+0x264>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d101      	bne.n	8006002 <HAL_GPIO_Init+0x20e>
 8005ffe:	2309      	movs	r3, #9
 8006000:	e02d      	b.n	800605e <HAL_GPIO_Init+0x26a>
 8006002:	230a      	movs	r3, #10
 8006004:	e02b      	b.n	800605e <HAL_GPIO_Init+0x26a>
 8006006:	2308      	movs	r3, #8
 8006008:	e029      	b.n	800605e <HAL_GPIO_Init+0x26a>
 800600a:	2307      	movs	r3, #7
 800600c:	e027      	b.n	800605e <HAL_GPIO_Init+0x26a>
 800600e:	2306      	movs	r3, #6
 8006010:	e025      	b.n	800605e <HAL_GPIO_Init+0x26a>
 8006012:	2305      	movs	r3, #5
 8006014:	e023      	b.n	800605e <HAL_GPIO_Init+0x26a>
 8006016:	2304      	movs	r3, #4
 8006018:	e021      	b.n	800605e <HAL_GPIO_Init+0x26a>
 800601a:	2303      	movs	r3, #3
 800601c:	e01f      	b.n	800605e <HAL_GPIO_Init+0x26a>
 800601e:	2302      	movs	r3, #2
 8006020:	e01d      	b.n	800605e <HAL_GPIO_Init+0x26a>
 8006022:	2301      	movs	r3, #1
 8006024:	e01b      	b.n	800605e <HAL_GPIO_Init+0x26a>
 8006026:	bf00      	nop
 8006028:	58000080 	.word	0x58000080
 800602c:	58024400 	.word	0x58024400
 8006030:	58000400 	.word	0x58000400
 8006034:	58020000 	.word	0x58020000
 8006038:	58020400 	.word	0x58020400
 800603c:	58020800 	.word	0x58020800
 8006040:	58020c00 	.word	0x58020c00
 8006044:	58021000 	.word	0x58021000
 8006048:	58021400 	.word	0x58021400
 800604c:	58021800 	.word	0x58021800
 8006050:	58021c00 	.word	0x58021c00
 8006054:	58022000 	.word	0x58022000
 8006058:	58022400 	.word	0x58022400
 800605c:	2300      	movs	r3, #0
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	f002 0203 	and.w	r2, r2, #3
 8006064:	0092      	lsls	r2, r2, #2
 8006066:	4093      	lsls	r3, r2
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	4313      	orrs	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800606e:	4938      	ldr	r1, [pc, #224]	; (8006150 <HAL_GPIO_Init+0x35c>)
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	089b      	lsrs	r3, r3, #2
 8006074:	3302      	adds	r3, #2
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	43db      	mvns	r3, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4013      	ands	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	3301      	adds	r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	f47f ae63 	bne.w	8005e08 <HAL_GPIO_Init+0x14>
  }
}
 8006142:	bf00      	nop
 8006144:	bf00      	nop
 8006146:	3724      	adds	r7, #36	; 0x24
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	58000400 	.word	0x58000400

08006154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	807b      	strh	r3, [r7, #2]
 8006160:	4613      	mov	r3, r2
 8006162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006164:	787b      	ldrb	r3, [r7, #1]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800616a:	887a      	ldrh	r2, [r7, #2]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006170:	e003      	b.n	800617a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006172:	887b      	ldrh	r3, [r7, #2]
 8006174:	041a      	lsls	r2, r3, #16
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	619a      	str	r2, [r3, #24]
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
	...

08006188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e08b      	b.n	80062b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb fb98 	bl	80018e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2224      	movs	r2, #36	; 0x24
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d107      	bne.n	8006202 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	e006      	b.n	8006210 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800620e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d108      	bne.n	800622a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006226:	605a      	str	r2, [r3, #4]
 8006228:	e007      	b.n	800623a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006238:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6859      	ldr	r1, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <HAL_I2C_Init+0x134>)
 8006246:	430b      	orrs	r3, r1
 8006248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691a      	ldr	r2, [r3, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	02008000 	.word	0x02008000

080062c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d138      	bne.n	8006348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e032      	b.n	800634a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b20      	cmp	r3, #32
 800636a:	d139      	bne.n	80063e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006376:	2302      	movs	r3, #2
 8006378:	e033      	b.n	80063e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2224      	movs	r2, #36	; 0x24
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	e000      	b.n	80063e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063e0:	2302      	movs	r3, #2
  }
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80063f8:	4b19      	ldr	r3, [pc, #100]	; (8006460 <HAL_PWREx_ConfigSupply+0x70>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d00a      	beq.n	800641a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006404:	4b16      	ldr	r3, [pc, #88]	; (8006460 <HAL_PWREx_ConfigSupply+0x70>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d001      	beq.n	8006416 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e01f      	b.n	8006456 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	e01d      	b.n	8006456 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <HAL_PWREx_ConfigSupply+0x70>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f023 0207 	bic.w	r2, r3, #7
 8006422:	490f      	ldr	r1, [pc, #60]	; (8006460 <HAL_PWREx_ConfigSupply+0x70>)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4313      	orrs	r3, r2
 8006428:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800642a:	f7fb ff47 	bl	80022bc <HAL_GetTick>
 800642e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006430:	e009      	b.n	8006446 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006432:	f7fb ff43 	bl	80022bc <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006440:	d901      	bls.n	8006446 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e007      	b.n	8006456 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_PWREx_ConfigSupply+0x70>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800644e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006452:	d1ee      	bne.n	8006432 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	58024800 	.word	0x58024800

08006464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08c      	sub	sp, #48	; 0x30
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f000 bc48 	b.w	8006d08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8088 	beq.w	8006596 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006486:	4b99      	ldr	r3, [pc, #612]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006490:	4b96      	ldr	r3, [pc, #600]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	2b10      	cmp	r3, #16
 800649a:	d007      	beq.n	80064ac <HAL_RCC_OscConfig+0x48>
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	2b18      	cmp	r3, #24
 80064a0:	d111      	bne.n	80064c6 <HAL_RCC_OscConfig+0x62>
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d10c      	bne.n	80064c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	4b8f      	ldr	r3, [pc, #572]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d06d      	beq.n	8006594 <HAL_RCC_OscConfig+0x130>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d169      	bne.n	8006594 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f000 bc21 	b.w	8006d08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ce:	d106      	bne.n	80064de <HAL_RCC_OscConfig+0x7a>
 80064d0:	4b86      	ldr	r3, [pc, #536]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a85      	ldr	r2, [pc, #532]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80064d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e02e      	b.n	800653c <HAL_RCC_OscConfig+0xd8>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0x9c>
 80064e6:	4b81      	ldr	r3, [pc, #516]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a80      	ldr	r2, [pc, #512]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80064ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b7e      	ldr	r3, [pc, #504]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a7d      	ldr	r2, [pc, #500]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80064f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e01d      	b.n	800653c <HAL_RCC_OscConfig+0xd8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0xc0>
 800650a:	4b78      	ldr	r3, [pc, #480]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a77      	ldr	r2, [pc, #476]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	4b75      	ldr	r3, [pc, #468]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a74      	ldr	r2, [pc, #464]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e00b      	b.n	800653c <HAL_RCC_OscConfig+0xd8>
 8006524:	4b71      	ldr	r3, [pc, #452]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a70      	ldr	r2, [pc, #448]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 800652a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b6e      	ldr	r3, [pc, #440]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a6d      	ldr	r2, [pc, #436]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800653a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fb feba 	bl	80022bc <HAL_GetTick>
 8006548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800654c:	f7fb feb6 	bl	80022bc <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b64      	cmp	r3, #100	; 0x64
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e3d4      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800655e:	4b63      	ldr	r3, [pc, #396]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0xe8>
 800656a:	e014      	b.n	8006596 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656c:	f7fb fea6 	bl	80022bc <HAL_GetTick>
 8006570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006574:	f7fb fea2 	bl	80022bc <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b64      	cmp	r3, #100	; 0x64
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e3c0      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006586:	4b59      	ldr	r3, [pc, #356]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x110>
 8006592:	e000      	b.n	8006596 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80ca 	beq.w	8006738 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065a4:	4b51      	ldr	r3, [pc, #324]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065ae:	4b4f      	ldr	r3, [pc, #316]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_RCC_OscConfig+0x166>
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	2b18      	cmp	r3, #24
 80065be:	d156      	bne.n	800666e <HAL_RCC_OscConfig+0x20a>
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d151      	bne.n	800666e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ca:	4b48      	ldr	r3, [pc, #288]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_RCC_OscConfig+0x17e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e392      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065e2:	4b42      	ldr	r3, [pc, #264]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 0219 	bic.w	r2, r3, #25
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	493f      	ldr	r1, [pc, #252]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fb fe62 	bl	80022bc <HAL_GetTick>
 80065f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065fc:	f7fb fe5e 	bl	80022bc <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e37c      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800660e:	4b37      	ldr	r3, [pc, #220]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661a:	f7fb fe5b 	bl	80022d4 <HAL_GetREVID>
 800661e:	4603      	mov	r3, r0
 8006620:	f241 0203 	movw	r2, #4099	; 0x1003
 8006624:	4293      	cmp	r3, r2
 8006626:	d817      	bhi.n	8006658 <HAL_RCC_OscConfig+0x1f4>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d108      	bne.n	8006642 <HAL_RCC_OscConfig+0x1de>
 8006630:	4b2e      	ldr	r3, [pc, #184]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006638:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 800663a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006640:	e07a      	b.n	8006738 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006642:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	4926      	ldr	r1, [pc, #152]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006652:	4313      	orrs	r3, r2
 8006654:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006656:	e06f      	b.n	8006738 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006658:	4b24      	ldr	r3, [pc, #144]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	061b      	lsls	r3, r3, #24
 8006666:	4921      	ldr	r1, [pc, #132]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006668:	4313      	orrs	r3, r2
 800666a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800666c:	e064      	b.n	8006738 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d047      	beq.n	8006706 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 0219 	bic.w	r2, r3, #25
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	491a      	ldr	r1, [pc, #104]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 8006684:	4313      	orrs	r3, r2
 8006686:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fb fe18 	bl	80022bc <HAL_GetTick>
 800668c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006690:	f7fb fe14 	bl	80022bc <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e332      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f0      	beq.n	8006690 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ae:	f7fb fe11 	bl	80022d4 <HAL_GetREVID>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d819      	bhi.n	80066f0 <HAL_RCC_OscConfig+0x28c>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	d108      	bne.n	80066d6 <HAL_RCC_OscConfig+0x272>
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80066cc:	4a07      	ldr	r2, [pc, #28]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80066ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d2:	6053      	str	r3, [r2, #4]
 80066d4:	e030      	b.n	8006738 <HAL_RCC_OscConfig+0x2d4>
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	031b      	lsls	r3, r3, #12
 80066e4:	4901      	ldr	r1, [pc, #4]	; (80066ec <HAL_RCC_OscConfig+0x288>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	604b      	str	r3, [r1, #4]
 80066ea:	e025      	b.n	8006738 <HAL_RCC_OscConfig+0x2d4>
 80066ec:	58024400 	.word	0x58024400
 80066f0:	4b9a      	ldr	r3, [pc, #616]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	061b      	lsls	r3, r3, #24
 80066fe:	4997      	ldr	r1, [pc, #604]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006700:	4313      	orrs	r3, r2
 8006702:	604b      	str	r3, [r1, #4]
 8006704:	e018      	b.n	8006738 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006706:	4b95      	ldr	r3, [pc, #596]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a94      	ldr	r2, [pc, #592]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006712:	f7fb fdd3 	bl	80022bc <HAL_GetTick>
 8006716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800671a:	f7fb fdcf 	bl	80022bc <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e2ed      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800672c:	4b8b      	ldr	r3, [pc, #556]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f0      	bne.n	800671a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80a9 	beq.w	8006898 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006746:	4b85      	ldr	r3, [pc, #532]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800674e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006750:	4b82      	ldr	r3, [pc, #520]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d007      	beq.n	800676c <HAL_RCC_OscConfig+0x308>
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b18      	cmp	r3, #24
 8006760:	d13a      	bne.n	80067d8 <HAL_RCC_OscConfig+0x374>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	2b01      	cmp	r3, #1
 800676a:	d135      	bne.n	80067d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800676c:	4b7b      	ldr	r3, [pc, #492]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_OscConfig+0x320>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d001      	beq.n	8006784 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e2c1      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006784:	f7fb fda6 	bl	80022d4 <HAL_GetREVID>
 8006788:	4603      	mov	r3, r0
 800678a:	f241 0203 	movw	r2, #4099	; 0x1003
 800678e:	4293      	cmp	r3, r2
 8006790:	d817      	bhi.n	80067c2 <HAL_RCC_OscConfig+0x35e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	2b20      	cmp	r3, #32
 8006798:	d108      	bne.n	80067ac <HAL_RCC_OscConfig+0x348>
 800679a:	4b70      	ldr	r3, [pc, #448]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80067a2:	4a6e      	ldr	r2, [pc, #440]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80067a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067aa:	e075      	b.n	8006898 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067ac:	4b6b      	ldr	r3, [pc, #428]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	069b      	lsls	r3, r3, #26
 80067ba:	4968      	ldr	r1, [pc, #416]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067c0:	e06a      	b.n	8006898 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067c2:	4b66      	ldr	r3, [pc, #408]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	061b      	lsls	r3, r3, #24
 80067d0:	4962      	ldr	r1, [pc, #392]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067d6:	e05f      	b.n	8006898 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d042      	beq.n	8006866 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80067e0:	4b5e      	ldr	r3, [pc, #376]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a5d      	ldr	r2, [pc, #372]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80067e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fb fd66 	bl	80022bc <HAL_GetTick>
 80067f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067f4:	f7fb fd62 	bl	80022bc <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e280      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006806:	4b55      	ldr	r3, [pc, #340]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006812:	f7fb fd5f 	bl	80022d4 <HAL_GetREVID>
 8006816:	4603      	mov	r3, r0
 8006818:	f241 0203 	movw	r2, #4099	; 0x1003
 800681c:	4293      	cmp	r3, r2
 800681e:	d817      	bhi.n	8006850 <HAL_RCC_OscConfig+0x3ec>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	2b20      	cmp	r3, #32
 8006826:	d108      	bne.n	800683a <HAL_RCC_OscConfig+0x3d6>
 8006828:	4b4c      	ldr	r3, [pc, #304]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006830:	4a4a      	ldr	r2, [pc, #296]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006836:	6053      	str	r3, [r2, #4]
 8006838:	e02e      	b.n	8006898 <HAL_RCC_OscConfig+0x434>
 800683a:	4b48      	ldr	r3, [pc, #288]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	069b      	lsls	r3, r3, #26
 8006848:	4944      	ldr	r1, [pc, #272]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800684a:	4313      	orrs	r3, r2
 800684c:	604b      	str	r3, [r1, #4]
 800684e:	e023      	b.n	8006898 <HAL_RCC_OscConfig+0x434>
 8006850:	4b42      	ldr	r3, [pc, #264]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	493f      	ldr	r1, [pc, #252]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006860:	4313      	orrs	r3, r2
 8006862:	60cb      	str	r3, [r1, #12]
 8006864:	e018      	b.n	8006898 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006866:	4b3d      	ldr	r3, [pc, #244]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3c      	ldr	r2, [pc, #240]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800686c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006872:	f7fb fd23 	bl	80022bc <HAL_GetTick>
 8006876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800687a:	f7fb fd1f 	bl	80022bc <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e23d      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800688c:	4b33      	ldr	r3, [pc, #204]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1f0      	bne.n	800687a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d036      	beq.n	8006912 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d019      	beq.n	80068e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ac:	4b2b      	ldr	r3, [pc, #172]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80068ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b0:	4a2a      	ldr	r2, [pc, #168]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fb fd00 	bl	80022bc <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c0:	f7fb fcfc 	bl	80022bc <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e21a      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80068d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x45c>
 80068de:	e018      	b.n	8006912 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e0:	4b1e      	ldr	r3, [pc, #120]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80068e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ec:	f7fb fce6 	bl	80022bc <HAL_GetTick>
 80068f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068f4:	f7fb fce2 	bl	80022bc <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e200      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d039      	beq.n	8006992 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01c      	beq.n	8006960 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a0c      	ldr	r2, [pc, #48]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800692c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006930:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006932:	f7fb fcc3 	bl	80022bc <HAL_GetTick>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800693a:	f7fb fcbf 	bl	80022bc <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e1dd      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <HAL_RCC_OscConfig+0x4f8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <HAL_RCC_OscConfig+0x4d6>
 8006958:	e01b      	b.n	8006992 <HAL_RCC_OscConfig+0x52e>
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006960:	4b9b      	ldr	r3, [pc, #620]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a9a      	ldr	r2, [pc, #616]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800696a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800696c:	f7fb fca6 	bl	80022bc <HAL_GetTick>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006974:	f7fb fca2 	bl	80022bc <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e1c0      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006986:	4b92      	ldr	r3, [pc, #584]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8081 	beq.w	8006aa2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069a0:	4b8c      	ldr	r3, [pc, #560]	; (8006bd4 <HAL_RCC_OscConfig+0x770>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a8b      	ldr	r2, [pc, #556]	; (8006bd4 <HAL_RCC_OscConfig+0x770>)
 80069a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069ac:	f7fb fc86 	bl	80022bc <HAL_GetTick>
 80069b0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b4:	f7fb fc82 	bl	80022bc <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b64      	cmp	r3, #100	; 0x64
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e1a0      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069c6:	4b83      	ldr	r3, [pc, #524]	; (8006bd4 <HAL_RCC_OscConfig+0x770>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0f0      	beq.n	80069b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d106      	bne.n	80069e8 <HAL_RCC_OscConfig+0x584>
 80069da:	4b7d      	ldr	r3, [pc, #500]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	4a7c      	ldr	r2, [pc, #496]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6713      	str	r3, [r2, #112]	; 0x70
 80069e6:	e02d      	b.n	8006a44 <HAL_RCC_OscConfig+0x5e0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <HAL_RCC_OscConfig+0x5a6>
 80069f0:	4b77      	ldr	r3, [pc, #476]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f4:	4a76      	ldr	r2, [pc, #472]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 80069f6:	f023 0301 	bic.w	r3, r3, #1
 80069fa:	6713      	str	r3, [r2, #112]	; 0x70
 80069fc:	4b74      	ldr	r3, [pc, #464]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 80069fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a00:	4a73      	ldr	r2, [pc, #460]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a02:	f023 0304 	bic.w	r3, r3, #4
 8006a06:	6713      	str	r3, [r2, #112]	; 0x70
 8006a08:	e01c      	b.n	8006a44 <HAL_RCC_OscConfig+0x5e0>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d10c      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5c8>
 8006a12:	4b6f      	ldr	r3, [pc, #444]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	4a6e      	ldr	r2, [pc, #440]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a18:	f043 0304 	orr.w	r3, r3, #4
 8006a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1e:	4b6c      	ldr	r3, [pc, #432]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	4a6b      	ldr	r2, [pc, #428]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2a:	e00b      	b.n	8006a44 <HAL_RCC_OscConfig+0x5e0>
 8006a2c:	4b68      	ldr	r3, [pc, #416]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a30:	4a67      	ldr	r2, [pc, #412]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	6713      	str	r3, [r2, #112]	; 0x70
 8006a38:	4b65      	ldr	r3, [pc, #404]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3c:	4a64      	ldr	r2, [pc, #400]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a3e:	f023 0304 	bic.w	r3, r3, #4
 8006a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d015      	beq.n	8006a78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4c:	f7fb fc36 	bl	80022bc <HAL_GetTick>
 8006a50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a52:	e00a      	b.n	8006a6a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a54:	f7fb fc32 	bl	80022bc <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e14e      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a6a:	4b59      	ldr	r3, [pc, #356]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0ee      	beq.n	8006a54 <HAL_RCC_OscConfig+0x5f0>
 8006a76:	e014      	b.n	8006aa2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a78:	f7fb fc20 	bl	80022bc <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a7e:	e00a      	b.n	8006a96 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a80:	f7fb fc1c 	bl	80022bc <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e138      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a96:	4b4e      	ldr	r3, [pc, #312]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1ee      	bne.n	8006a80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 812d 	beq.w	8006d06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006aac:	4b48      	ldr	r3, [pc, #288]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ab4:	2b18      	cmp	r3, #24
 8006ab6:	f000 80bd 	beq.w	8006c34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	f040 809e 	bne.w	8006c00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac4:	4b42      	ldr	r3, [pc, #264]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a41      	ldr	r2, [pc, #260]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fb fbf4 	bl	80022bc <HAL_GetTick>
 8006ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fb fbf0 	bl	80022bc <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e10e      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aea:	4b39      	ldr	r3, [pc, #228]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af6:	4b36      	ldr	r3, [pc, #216]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006afa:	4b37      	ldr	r3, [pc, #220]	; (8006bd8 <HAL_RCC_OscConfig+0x774>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b06:	0112      	lsls	r2, r2, #4
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	4931      	ldr	r1, [pc, #196]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	628b      	str	r3, [r1, #40]	; 0x28
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	3b01      	subs	r3, #1
 8006b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	025b      	lsls	r3, r3, #9
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	041b      	lsls	r3, r3, #16
 8006b2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	061b      	lsls	r3, r3, #24
 8006b3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b40:	4923      	ldr	r1, [pc, #140]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006b46:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b52:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b56:	4b21      	ldr	r3, [pc, #132]	; (8006bdc <HAL_RCC_OscConfig+0x778>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b5e:	00d2      	lsls	r2, r2, #3
 8006b60:	491b      	ldr	r1, [pc, #108]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	f023 020c 	bic.w	r2, r3, #12
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	4917      	ldr	r1, [pc, #92]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b78:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	f023 0202 	bic.w	r2, r3, #2
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b84:	4912      	ldr	r1, [pc, #72]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b8a:	4b11      	ldr	r3, [pc, #68]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	4a10      	ldr	r2, [pc, #64]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b96:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	4a0d      	ldr	r2, [pc, #52]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006bae:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	4a07      	ldr	r2, [pc, #28]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <HAL_RCC_OscConfig+0x76c>)
 8006bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc6:	f7fb fb79 	bl	80022bc <HAL_GetTick>
 8006bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bcc:	e011      	b.n	8006bf2 <HAL_RCC_OscConfig+0x78e>
 8006bce:	bf00      	nop
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	58024800 	.word	0x58024800
 8006bd8:	fffffc0c 	.word	0xfffffc0c
 8006bdc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fb fb6c 	bl	80022bc <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e08a      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bf2:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0f0      	beq.n	8006be0 <HAL_RCC_OscConfig+0x77c>
 8006bfe:	e082      	b.n	8006d06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c00:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a42      	ldr	r2, [pc, #264]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fb fb56 	bl	80022bc <HAL_GetTick>
 8006c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fb fb52 	bl	80022bc <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e070      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c26:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x7b0>
 8006c32:	e068      	b.n	8006d06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c34:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c3a:	4b35      	ldr	r3, [pc, #212]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d031      	beq.n	8006cac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f003 0203 	and.w	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d12a      	bne.n	8006cac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d122      	bne.n	8006cac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d11a      	bne.n	8006cac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	0a5b      	lsrs	r3, r3, #9
 8006c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d111      	bne.n	8006cac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0c1b      	lsrs	r3, r3, #16
 8006c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d108      	bne.n	8006cac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	0e1b      	lsrs	r3, r3, #24
 8006c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e02b      	b.n	8006d08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	08db      	lsrs	r3, r3, #3
 8006cb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d01f      	beq.n	8006d06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006cc6:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	4a11      	ldr	r2, [pc, #68]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cd2:	f7fb faf3 	bl	80022bc <HAL_GetTick>
 8006cd6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006cd8:	bf00      	nop
 8006cda:	f7fb faef 	bl	80022bc <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d0f9      	beq.n	8006cda <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <HAL_RCC_OscConfig+0x8b0>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006cf2:	00d2      	lsls	r2, r2, #3
 8006cf4:	4906      	ldr	r1, [pc, #24]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006cfa:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	4a04      	ldr	r2, [pc, #16]	; (8006d10 <HAL_RCC_OscConfig+0x8ac>)
 8006d00:	f043 0301 	orr.w	r3, r3, #1
 8006d04:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3730      	adds	r7, #48	; 0x30
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	ffff0007 	.word	0xffff0007

08006d18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e19c      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d2c:	4b8a      	ldr	r3, [pc, #552]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d910      	bls.n	8006d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3a:	4b87      	ldr	r3, [pc, #540]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 020f 	bic.w	r2, r3, #15
 8006d42:	4985      	ldr	r1, [pc, #532]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b83      	ldr	r3, [pc, #524]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e184      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d010      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	4b7b      	ldr	r3, [pc, #492]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d908      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d78:	4b78      	ldr	r3, [pc, #480]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	4975      	ldr	r1, [pc, #468]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d010      	beq.n	8006db8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695a      	ldr	r2, [r3, #20]
 8006d9a:	4b70      	ldr	r3, [pc, #448]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d908      	bls.n	8006db8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006da6:	4b6d      	ldr	r3, [pc, #436]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	496a      	ldr	r1, [pc, #424]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d010      	beq.n	8006de6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	4b64      	ldr	r3, [pc, #400]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d908      	bls.n	8006de6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	495e      	ldr	r1, [pc, #376]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d010      	beq.n	8006e14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	4b59      	ldr	r3, [pc, #356]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d908      	bls.n	8006e14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e02:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4953      	ldr	r1, [pc, #332]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d010      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	4b4d      	ldr	r3, [pc, #308]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d908      	bls.n	8006e42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e30:	4b4a      	ldr	r3, [pc, #296]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f023 020f 	bic.w	r2, r3, #15
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4947      	ldr	r1, [pc, #284]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d055      	beq.n	8006efa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e4e:	4b43      	ldr	r3, [pc, #268]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	4940      	ldr	r1, [pc, #256]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e68:	4b3c      	ldr	r3, [pc, #240]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d121      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0f6      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d107      	bne.n	8006e90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e80:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d115      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0ea      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d107      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e98:	4b30      	ldr	r3, [pc, #192]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0de      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ea8:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0d6      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eb8:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f023 0207 	bic.w	r2, r3, #7
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4925      	ldr	r1, [pc, #148]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eca:	f7fb f9f7 	bl	80022bc <HAL_GetTick>
 8006ece:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed2:	f7fb f9f3 	bl	80022bc <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e0be      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee8:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d1eb      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d208      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f16:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	f023 020f 	bic.w	r2, r3, #15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	490e      	ldr	r1, [pc, #56]	; (8006f5c <HAL_RCC_ClockConfig+0x244>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d214      	bcs.n	8006f60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 020f 	bic.w	r2, r3, #15
 8006f3e:	4906      	ldr	r1, [pc, #24]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <HAL_RCC_ClockConfig+0x240>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e086      	b.n	8007066 <HAL_RCC_ClockConfig+0x34e>
 8006f58:	52002000 	.word	0x52002000
 8006f5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	4b3f      	ldr	r3, [pc, #252]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d208      	bcs.n	8006f8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f7c:	4b3c      	ldr	r3, [pc, #240]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	4939      	ldr	r1, [pc, #228]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	4b34      	ldr	r3, [pc, #208]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d208      	bcs.n	8006fbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	492e      	ldr	r1, [pc, #184]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d010      	beq.n	8006fea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	4b28      	ldr	r3, [pc, #160]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d208      	bcs.n	8006fea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	4922      	ldr	r1, [pc, #136]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d010      	beq.n	8007018 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69da      	ldr	r2, [r3, #28]
 8006ffa:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007002:	429a      	cmp	r2, r3
 8007004:	d208      	bcs.n	8007018 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007006:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	4917      	ldr	r1, [pc, #92]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007014:	4313      	orrs	r3, r2
 8007016:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007018:	f000 f834 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 800701c:	4602      	mov	r2, r0
 800701e:	4b14      	ldr	r3, [pc, #80]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	4912      	ldr	r1, [pc, #72]	; (8007074 <HAL_RCC_ClockConfig+0x35c>)
 800702a:	5ccb      	ldrb	r3, [r1, r3]
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
 8007034:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007036:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <HAL_RCC_ClockConfig+0x358>)
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <HAL_RCC_ClockConfig+0x35c>)
 8007040:	5cd3      	ldrb	r3, [r2, r3]
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
 800704c:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <HAL_RCC_ClockConfig+0x360>)
 800704e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <HAL_RCC_ClockConfig+0x364>)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <HAL_RCC_ClockConfig+0x368>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7fa fe66 	bl	8001d2c <HAL_InitTick>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	58024400 	.word	0x58024400
 8007074:	08011e3c 	.word	0x08011e3c
 8007078:	24000004 	.word	0x24000004
 800707c:	24000000 	.word	0x24000000
 8007080:	24000008 	.word	0x24000008

08007084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007084:	b480      	push	{r7}
 8007086:	b089      	sub	sp, #36	; 0x24
 8007088:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800708a:	4bb3      	ldr	r3, [pc, #716]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007092:	2b18      	cmp	r3, #24
 8007094:	f200 8155 	bhi.w	8007342 <HAL_RCC_GetSysClockFreq+0x2be>
 8007098:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	08007105 	.word	0x08007105
 80070a4:	08007343 	.word	0x08007343
 80070a8:	08007343 	.word	0x08007343
 80070ac:	08007343 	.word	0x08007343
 80070b0:	08007343 	.word	0x08007343
 80070b4:	08007343 	.word	0x08007343
 80070b8:	08007343 	.word	0x08007343
 80070bc:	08007343 	.word	0x08007343
 80070c0:	0800712b 	.word	0x0800712b
 80070c4:	08007343 	.word	0x08007343
 80070c8:	08007343 	.word	0x08007343
 80070cc:	08007343 	.word	0x08007343
 80070d0:	08007343 	.word	0x08007343
 80070d4:	08007343 	.word	0x08007343
 80070d8:	08007343 	.word	0x08007343
 80070dc:	08007343 	.word	0x08007343
 80070e0:	08007131 	.word	0x08007131
 80070e4:	08007343 	.word	0x08007343
 80070e8:	08007343 	.word	0x08007343
 80070ec:	08007343 	.word	0x08007343
 80070f0:	08007343 	.word	0x08007343
 80070f4:	08007343 	.word	0x08007343
 80070f8:	08007343 	.word	0x08007343
 80070fc:	08007343 	.word	0x08007343
 8007100:	08007137 	.word	0x08007137
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007104:	4b94      	ldr	r3, [pc, #592]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007110:	4b91      	ldr	r3, [pc, #580]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	08db      	lsrs	r3, r3, #3
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	4a90      	ldr	r2, [pc, #576]	; (800735c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
 8007120:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007122:	e111      	b.n	8007348 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007124:	4b8d      	ldr	r3, [pc, #564]	; (800735c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007126:	61bb      	str	r3, [r7, #24]
      break;
 8007128:	e10e      	b.n	8007348 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800712a:	4b8d      	ldr	r3, [pc, #564]	; (8007360 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800712c:	61bb      	str	r3, [r7, #24]
      break;
 800712e:	e10b      	b.n	8007348 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007130:	4b8c      	ldr	r3, [pc, #560]	; (8007364 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007132:	61bb      	str	r3, [r7, #24]
      break;
 8007134:	e108      	b.n	8007348 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007136:	4b88      	ldr	r3, [pc, #544]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007140:	4b85      	ldr	r3, [pc, #532]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800714a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800714c:	4b82      	ldr	r3, [pc, #520]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007156:	4b80      	ldr	r3, [pc, #512]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	08db      	lsrs	r3, r3, #3
 800715c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80e1 	beq.w	800733c <HAL_RCC_GetSysClockFreq+0x2b8>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b02      	cmp	r3, #2
 800717e:	f000 8083 	beq.w	8007288 <HAL_RCC_GetSysClockFreq+0x204>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b02      	cmp	r3, #2
 8007186:	f200 80a1 	bhi.w	80072cc <HAL_RCC_GetSysClockFreq+0x248>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0x114>
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d056      	beq.n	8007244 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007196:	e099      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007198:	4b6f      	ldr	r3, [pc, #444]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d02d      	beq.n	8007200 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a4:	4b6c      	ldr	r3, [pc, #432]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	08db      	lsrs	r3, r3, #3
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	4a6b      	ldr	r2, [pc, #428]	; (800735c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b62      	ldr	r3, [pc, #392]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007368 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80071fe:	e087      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800736c <HAL_RCC_GetSysClockFreq+0x2e8>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b51      	ldr	r3, [pc, #324]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a02 	vldr	s12, [r7, #8]
 8007226:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007368 <HAL_RCC_GetSysClockFreq+0x2e4>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007242:	e065      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007370 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b40      	ldr	r3, [pc, #256]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a02 	vldr	s12, [r7, #8]
 800726a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007368 <HAL_RCC_GetSysClockFreq+0x2e4>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007286:	e043      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007374 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007368 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072ca:	e021      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007370 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b1e      	ldr	r3, [pc, #120]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80072f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007368 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800730e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007310:	4b11      	ldr	r3, [pc, #68]	; (8007358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	0a5b      	lsrs	r3, r3, #9
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	3301      	adds	r3, #1
 800731c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007328:	edd7 6a07 	vldr	s13, [r7, #28]
 800732c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007334:	ee17 3a90 	vmov	r3, s15
 8007338:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800733a:	e005      	b.n	8007348 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	61bb      	str	r3, [r7, #24]
      break;
 8007340:	e002      	b.n	8007348 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007342:	4b07      	ldr	r3, [pc, #28]	; (8007360 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007344:	61bb      	str	r3, [r7, #24]
      break;
 8007346:	bf00      	nop
  }

  return sysclockfreq;
 8007348:	69bb      	ldr	r3, [r7, #24]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3724      	adds	r7, #36	; 0x24
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	58024400 	.word	0x58024400
 800735c:	03d09000 	.word	0x03d09000
 8007360:	003d0900 	.word	0x003d0900
 8007364:	017d7840 	.word	0x017d7840
 8007368:	46000000 	.word	0x46000000
 800736c:	4c742400 	.word	0x4c742400
 8007370:	4a742400 	.word	0x4a742400
 8007374:	4bbebc20 	.word	0x4bbebc20

08007378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800737e:	f7ff fe81 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 8007382:	4602      	mov	r2, r0
 8007384:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	0a1b      	lsrs	r3, r3, #8
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	490f      	ldr	r1, [pc, #60]	; (80073cc <HAL_RCC_GetHCLKFreq+0x54>)
 8007390:	5ccb      	ldrb	r3, [r1, r3]
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	fa22 f303 	lsr.w	r3, r2, r3
 800739a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	4a09      	ldr	r2, [pc, #36]	; (80073cc <HAL_RCC_GetHCLKFreq+0x54>)
 80073a6:	5cd3      	ldrb	r3, [r2, r3]
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	fa22 f303 	lsr.w	r3, r2, r3
 80073b2:	4a07      	ldr	r2, [pc, #28]	; (80073d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80073b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073b6:	4a07      	ldr	r2, [pc, #28]	; (80073d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073bc:	4b04      	ldr	r3, [pc, #16]	; (80073d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80073be:	681b      	ldr	r3, [r3, #0]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	58024400 	.word	0x58024400
 80073cc:	08011e3c 	.word	0x08011e3c
 80073d0:	24000004 	.word	0x24000004
 80073d4:	24000000 	.word	0x24000000

080073d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073dc:	f7ff ffcc 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b06      	ldr	r3, [pc, #24]	; (80073fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	091b      	lsrs	r3, r3, #4
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	4904      	ldr	r1, [pc, #16]	; (8007400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073ee:	5ccb      	ldrb	r3, [r1, r3]
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	58024400 	.word	0x58024400
 8007400:	08011e3c 	.word	0x08011e3c

08007404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007408:	f7ff ffb6 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	4904      	ldr	r1, [pc, #16]	; (800742c <HAL_RCC_GetPCLK2Freq+0x28>)
 800741a:	5ccb      	ldrb	r3, [r1, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007424:	4618      	mov	r0, r3
 8007426:	bd80      	pop	{r7, pc}
 8007428:	58024400 	.word	0x58024400
 800742c:	08011e3c 	.word	0x08011e3c

08007430 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	223f      	movs	r2, #63	; 0x3f
 800743e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007440:	4b1a      	ldr	r3, [pc, #104]	; (80074ac <HAL_RCC_GetClockConfig+0x7c>)
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f003 0207 	and.w	r2, r3, #7
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800744c:	4b17      	ldr	r3, [pc, #92]	; (80074ac <HAL_RCC_GetClockConfig+0x7c>)
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007458:	4b14      	ldr	r3, [pc, #80]	; (80074ac <HAL_RCC_GetClockConfig+0x7c>)
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	f003 020f 	and.w	r2, r3, #15
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_RCC_GetClockConfig+0x7c>)
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007470:	4b0e      	ldr	r3, [pc, #56]	; (80074ac <HAL_RCC_GetClockConfig+0x7c>)
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800747c:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <HAL_RCC_GetClockConfig+0x7c>)
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007488:	4b08      	ldr	r3, [pc, #32]	; (80074ac <HAL_RCC_GetClockConfig+0x7c>)
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007494:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <HAL_RCC_GetClockConfig+0x80>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	601a      	str	r2, [r3, #0]
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	58024400 	.word	0x58024400
 80074b0:	52002000 	.word	0x52002000

080074b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074b8:	b0ca      	sub	sp, #296	; 0x128
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80074d8:	2500      	movs	r5, #0
 80074da:	ea54 0305 	orrs.w	r3, r4, r5
 80074de:	d049      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80074e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074ea:	d02f      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80074ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074f0:	d828      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074f6:	d01a      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80074f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074fc:	d822      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007506:	d007      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007508:	e01c      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800750a:	4bb8      	ldr	r3, [pc, #736]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	4ab7      	ldr	r2, [pc, #732]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007516:	e01a      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800751c:	3308      	adds	r3, #8
 800751e:	2102      	movs	r1, #2
 8007520:	4618      	mov	r0, r3
 8007522:	f002 fb61 	bl	8009be8 <RCCEx_PLL2_Config>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800752c:	e00f      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007532:	3328      	adds	r3, #40	; 0x28
 8007534:	2102      	movs	r1, #2
 8007536:	4618      	mov	r0, r3
 8007538:	f002 fc08 	bl	8009d4c <RCCEx_PLL3_Config>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007542:	e004      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800754a:	e000      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800754c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007556:	4ba5      	ldr	r3, [pc, #660]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007564:	4aa1      	ldr	r2, [pc, #644]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007566:	430b      	orrs	r3, r1
 8007568:	6513      	str	r3, [r2, #80]	; 0x50
 800756a:	e003      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007580:	f04f 0900 	mov.w	r9, #0
 8007584:	ea58 0309 	orrs.w	r3, r8, r9
 8007588:	d047      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007590:	2b04      	cmp	r3, #4
 8007592:	d82a      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007594:	a201      	add	r2, pc, #4	; (adr r2, 800759c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075b1 	.word	0x080075b1
 80075a0:	080075bf 	.word	0x080075bf
 80075a4:	080075d5 	.word	0x080075d5
 80075a8:	080075f3 	.word	0x080075f3
 80075ac:	080075f3 	.word	0x080075f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b0:	4b8e      	ldr	r3, [pc, #568]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	4a8d      	ldr	r2, [pc, #564]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075bc:	e01a      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c2:	3308      	adds	r3, #8
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f002 fb0e 	bl	8009be8 <RCCEx_PLL2_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075d2:	e00f      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d8:	3328      	adds	r3, #40	; 0x28
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f002 fbb5 	bl	8009d4c <RCCEx_PLL3_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075e8:	e004      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075f0:	e000      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80075f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075fc:	4b7b      	ldr	r3, [pc, #492]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	f023 0107 	bic.w	r1, r3, #7
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760a:	4a78      	ldr	r2, [pc, #480]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800760c:	430b      	orrs	r3, r1
 800760e:	6513      	str	r3, [r2, #80]	; 0x50
 8007610:	e003      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007626:	f04f 0b00 	mov.w	fp, #0
 800762a:	ea5a 030b 	orrs.w	r3, sl, fp
 800762e:	d04c      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800763a:	d030      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800763c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007640:	d829      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007642:	2bc0      	cmp	r3, #192	; 0xc0
 8007644:	d02d      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007646:	2bc0      	cmp	r3, #192	; 0xc0
 8007648:	d825      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800764a:	2b80      	cmp	r3, #128	; 0x80
 800764c:	d018      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d821      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007656:	2b40      	cmp	r3, #64	; 0x40
 8007658:	d007      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800765a:	e01c      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765c:	4b63      	ldr	r3, [pc, #396]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4a62      	ldr	r2, [pc, #392]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007668:	e01c      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766e:	3308      	adds	r3, #8
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f002 fab8 	bl	8009be8 <RCCEx_PLL2_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800767e:	e011      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007684:	3328      	adds	r3, #40	; 0x28
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f002 fb5f 	bl	8009d4c <RCCEx_PLL3_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007694:	e006      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800769c:	e002      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80076ac:	4b4f      	ldr	r3, [pc, #316]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ba:	4a4c      	ldr	r2, [pc, #304]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	6513      	str	r3, [r2, #80]	; 0x50
 80076c0:	e003      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80076d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80076da:	2300      	movs	r3, #0
 80076dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80076e4:	460b      	mov	r3, r1
 80076e6:	4313      	orrs	r3, r2
 80076e8:	d053      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076f6:	d035      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80076f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076fc:	d82e      	bhi.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007702:	d031      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007704:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007708:	d828      	bhi.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800770a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800770e:	d01a      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007714:	d822      	bhi.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800771a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800771e:	d007      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007720:	e01c      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007722:	4b32      	ldr	r3, [pc, #200]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a31      	ldr	r2, [pc, #196]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800772e:	e01c      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007734:	3308      	adds	r3, #8
 8007736:	2100      	movs	r1, #0
 8007738:	4618      	mov	r0, r3
 800773a:	f002 fa55 	bl	8009be8 <RCCEx_PLL2_Config>
 800773e:	4603      	mov	r3, r0
 8007740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007744:	e011      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774a:	3328      	adds	r3, #40	; 0x28
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f002 fafc 	bl	8009d4c <RCCEx_PLL3_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800775a:	e006      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007762:	e002      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007764:	bf00      	nop
 8007766:	e000      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10b      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007772:	4b1e      	ldr	r3, [pc, #120]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007776:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007782:	4a1a      	ldr	r2, [pc, #104]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007784:	430b      	orrs	r3, r1
 8007786:	6593      	str	r3, [r2, #88]	; 0x58
 8007788:	e003      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800778e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800779e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077a2:	2300      	movs	r3, #0
 80077a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80077ac:	460b      	mov	r3, r1
 80077ae:	4313      	orrs	r3, r2
 80077b0:	d056      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077be:	d038      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80077c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077c4:	d831      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077ca:	d034      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80077cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077d0:	d82b      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077d6:	d01d      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80077d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077dc:	d825      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d006      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80077e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077e6:	d00a      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80077e8:	e01f      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f0:	4ba2      	ldr	r3, [pc, #648]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	4aa1      	ldr	r2, [pc, #644]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077fc:	e01c      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	3308      	adds	r3, #8
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f002 f9ee 	bl	8009be8 <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007812:	e011      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007818:	3328      	adds	r3, #40	; 0x28
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f002 fa95 	bl	8009d4c <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007830:	e002      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007840:	4b8e      	ldr	r3, [pc, #568]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800784c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007850:	4a8a      	ldr	r2, [pc, #552]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007852:	430b      	orrs	r3, r1
 8007854:	6593      	str	r3, [r2, #88]	; 0x58
 8007856:	e003      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800785c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800786c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007870:	2300      	movs	r3, #0
 8007872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007876:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d03a      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007886:	2b30      	cmp	r3, #48	; 0x30
 8007888:	d01f      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800788a:	2b30      	cmp	r3, #48	; 0x30
 800788c:	d819      	bhi.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800788e:	2b20      	cmp	r3, #32
 8007890:	d00c      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007892:	2b20      	cmp	r3, #32
 8007894:	d815      	bhi.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d019      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800789a:	2b10      	cmp	r3, #16
 800789c:	d111      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789e:	4b77      	ldr	r3, [pc, #476]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	4a76      	ldr	r2, [pc, #472]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80078aa:	e011      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b0:	3308      	adds	r3, #8
 80078b2:	2102      	movs	r1, #2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f002 f997 	bl	8009be8 <RCCEx_PLL2_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078c8:	e002      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078d8:	4b68      	ldr	r3, [pc, #416]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e6:	4a65      	ldr	r2, [pc, #404]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078e8:	430b      	orrs	r3, r1
 80078ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078ec:	e003      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007902:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007906:	2300      	movs	r3, #0
 8007908:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800790c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007910:	460b      	mov	r3, r1
 8007912:	4313      	orrs	r3, r2
 8007914:	d051      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007920:	d035      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007926:	d82e      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800792c:	d031      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800792e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007932:	d828      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007938:	d01a      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800793a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793e:	d822      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007948:	d007      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800794a:	e01c      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800794c:	4b4b      	ldr	r3, [pc, #300]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	4a4a      	ldr	r2, [pc, #296]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007958:	e01c      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795e:	3308      	adds	r3, #8
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f002 f940 	bl	8009be8 <RCCEx_PLL2_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800796e:	e011      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	3328      	adds	r3, #40	; 0x28
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f002 f9e7 	bl	8009d4c <RCCEx_PLL3_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007984:	e006      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800798c:	e002      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800798e:	bf00      	nop
 8007990:	e000      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800799c:	4b37      	ldr	r3, [pc, #220]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079aa:	4a34      	ldr	r2, [pc, #208]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6513      	str	r3, [r2, #80]	; 0x50
 80079b0:	e003      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80079c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079ca:	2300      	movs	r3, #0
 80079cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80079d4:	460b      	mov	r3, r1
 80079d6:	4313      	orrs	r3, r2
 80079d8:	d056      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079e4:	d033      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80079e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ea:	d82c      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079f0:	d02f      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80079f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079f6:	d826      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079fc:	d02b      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80079fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a02:	d820      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a08:	d012      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a0e:	d81a      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d022      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a18:	d115      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1e:	3308      	adds	r3, #8
 8007a20:	2101      	movs	r1, #1
 8007a22:	4618      	mov	r0, r3
 8007a24:	f002 f8e0 	bl	8009be8 <RCCEx_PLL2_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a2e:	e015      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a34:	3328      	adds	r3, #40	; 0x28
 8007a36:	2101      	movs	r1, #1
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 f987 	bl	8009d4c <RCCEx_PLL3_Config>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a44:	e00a      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a4c:	e006      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a4e:	bf00      	nop
 8007a50:	e004      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a52:	bf00      	nop
 8007a54:	e002      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a56:	bf00      	nop
 8007a58:	e000      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10d      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a72:	4a02      	ldr	r2, [pc, #8]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6513      	str	r3, [r2, #80]	; 0x50
 8007a78:	e006      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007a7a:	bf00      	nop
 8007a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a9e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d055      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ab4:	d033      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aba:	d82c      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac0:	d02f      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac6:	d826      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ac8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007acc:	d02b      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007ace:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ad2:	d820      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad8:	d012      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ade:	d81a      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d022      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ae8:	d115      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aee:	3308      	adds	r3, #8
 8007af0:	2101      	movs	r1, #1
 8007af2:	4618      	mov	r0, r3
 8007af4:	f002 f878 	bl	8009be8 <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007afe:	e015      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b04:	3328      	adds	r3, #40	; 0x28
 8007b06:	2101      	movs	r1, #1
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f002 f91f 	bl	8009d4c <RCCEx_PLL3_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b14:	e00a      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b1c:	e006      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b1e:	bf00      	nop
 8007b20:	e004      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b22:	bf00      	nop
 8007b24:	e002      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b34:	4ba3      	ldr	r3, [pc, #652]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b38:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b44:	4a9f      	ldr	r2, [pc, #636]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b46:	430b      	orrs	r3, r1
 8007b48:	6593      	str	r3, [r2, #88]	; 0x58
 8007b4a:	e003      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d037      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b7e:	d00e      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b84:	d816      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d018      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b8e:	d111      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b90:	4b8c      	ldr	r3, [pc, #560]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	4a8b      	ldr	r2, [pc, #556]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b9c:	e00f      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 f81e 	bl	8009be8 <RCCEx_PLL2_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bb2:	e004      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bba:	e000      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bc6:	4b7f      	ldr	r3, [pc, #508]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd4:	4a7b      	ldr	r2, [pc, #492]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	6513      	str	r3, [r2, #80]	; 0x50
 8007bda:	e003      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4313      	orrs	r3, r2
 8007c02:	d039      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d81c      	bhi.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c51 	.word	0x08007c51
 8007c18:	08007c25 	.word	0x08007c25
 8007c1c:	08007c33 	.word	0x08007c33
 8007c20:	08007c51 	.word	0x08007c51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c24:	4b67      	ldr	r3, [pc, #412]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	4a66      	ldr	r2, [pc, #408]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c30:	e00f      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	3308      	adds	r3, #8
 8007c38:	2102      	movs	r1, #2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 ffd4 	bl	8009be8 <RCCEx_PLL2_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c46:	e004      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c4e:	e000      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c5a:	4b5a      	ldr	r3, [pc, #360]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5e:	f023 0103 	bic.w	r1, r3, #3
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c68:	4a56      	ldr	r2, [pc, #344]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c6e:	e003      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007c92:	460b      	mov	r3, r1
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f000 809f 	beq.w	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c9a:	4b4b      	ldr	r3, [pc, #300]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a4a      	ldr	r2, [pc, #296]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ca6:	f7fa fb09 	bl	80022bc <HAL_GetTick>
 8007caa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cae:	e00b      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb0:	f7fa fb04 	bl	80022bc <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b64      	cmp	r3, #100	; 0x64
 8007cbe:	d903      	bls.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cc6:	e005      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cc8:	4b3f      	ldr	r3, [pc, #252]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0ed      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d179      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007cdc:	4b39      	ldr	r3, [pc, #228]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ce8:	4053      	eors	r3, r2
 8007cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d015      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cf2:	4b34      	ldr	r3, [pc, #208]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cfe:	4b31      	ldr	r3, [pc, #196]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d02:	4a30      	ldr	r2, [pc, #192]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d08:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d0a:	4b2e      	ldr	r3, [pc, #184]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0e:	4a2d      	ldr	r2, [pc, #180]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d14:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d16:	4a2b      	ldr	r2, [pc, #172]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2a:	d118      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2c:	f7fa fac6 	bl	80022bc <HAL_GetTick>
 8007d30:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d34:	e00d      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d36:	f7fa fac1 	bl	80022bc <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007d40:	1ad2      	subs	r2, r2, r3
 8007d42:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d903      	bls.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007d50:	e005      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0eb      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d129      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d76:	d10e      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007d78:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d88:	091a      	lsrs	r2, r3, #4
 8007d8a:	4b10      	ldr	r3, [pc, #64]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	4a0d      	ldr	r2, [pc, #52]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6113      	str	r3, [r2, #16]
 8007d94:	e005      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007da0:	6113      	str	r3, [r2, #16]
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007da4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007db2:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6713      	str	r3, [r2, #112]	; 0x70
 8007db8:	e00e      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007dc2:	e009      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007dc4:	58024400 	.word	0x58024400
 8007dc8:	58024800 	.word	0x58024800
 8007dcc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f002 0301 	and.w	r3, r2, #1
 8007de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007de8:	2300      	movs	r3, #0
 8007dea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4313      	orrs	r3, r2
 8007df6:	f000 8089 	beq.w	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e00:	2b28      	cmp	r3, #40	; 0x28
 8007e02:	d86b      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e04:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007ee5 	.word	0x08007ee5
 8007e10:	08007edd 	.word	0x08007edd
 8007e14:	08007edd 	.word	0x08007edd
 8007e18:	08007edd 	.word	0x08007edd
 8007e1c:	08007edd 	.word	0x08007edd
 8007e20:	08007edd 	.word	0x08007edd
 8007e24:	08007edd 	.word	0x08007edd
 8007e28:	08007edd 	.word	0x08007edd
 8007e2c:	08007eb1 	.word	0x08007eb1
 8007e30:	08007edd 	.word	0x08007edd
 8007e34:	08007edd 	.word	0x08007edd
 8007e38:	08007edd 	.word	0x08007edd
 8007e3c:	08007edd 	.word	0x08007edd
 8007e40:	08007edd 	.word	0x08007edd
 8007e44:	08007edd 	.word	0x08007edd
 8007e48:	08007edd 	.word	0x08007edd
 8007e4c:	08007ec7 	.word	0x08007ec7
 8007e50:	08007edd 	.word	0x08007edd
 8007e54:	08007edd 	.word	0x08007edd
 8007e58:	08007edd 	.word	0x08007edd
 8007e5c:	08007edd 	.word	0x08007edd
 8007e60:	08007edd 	.word	0x08007edd
 8007e64:	08007edd 	.word	0x08007edd
 8007e68:	08007edd 	.word	0x08007edd
 8007e6c:	08007ee5 	.word	0x08007ee5
 8007e70:	08007edd 	.word	0x08007edd
 8007e74:	08007edd 	.word	0x08007edd
 8007e78:	08007edd 	.word	0x08007edd
 8007e7c:	08007edd 	.word	0x08007edd
 8007e80:	08007edd 	.word	0x08007edd
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007edd 	.word	0x08007edd
 8007e8c:	08007ee5 	.word	0x08007ee5
 8007e90:	08007edd 	.word	0x08007edd
 8007e94:	08007edd 	.word	0x08007edd
 8007e98:	08007edd 	.word	0x08007edd
 8007e9c:	08007edd 	.word	0x08007edd
 8007ea0:	08007edd 	.word	0x08007edd
 8007ea4:	08007edd 	.word	0x08007edd
 8007ea8:	08007edd 	.word	0x08007edd
 8007eac:	08007ee5 	.word	0x08007ee5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fe95 	bl	8009be8 <RCCEx_PLL2_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e00f      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eca:	3328      	adds	r3, #40	; 0x28
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f001 ff3c 	bl	8009d4c <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007eda:	e004      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007eee:	4bbf      	ldr	r3, [pc, #764]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007efc:	4abb      	ldr	r2, [pc, #748]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6553      	str	r3, [r2, #84]	; 0x54
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f002 0302 	and.w	r3, r2, #2
 8007f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007f26:	460b      	mov	r3, r1
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	d041      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d824      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007f55 	.word	0x08007f55
 8007f44:	08007f6b 	.word	0x08007f6b
 8007f48:	08007f89 	.word	0x08007f89
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f89 	.word	0x08007f89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f58:	3308      	adds	r3, #8
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 fe43 	bl	8009be8 <RCCEx_PLL2_Config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f68:	e00f      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6e:	3328      	adds	r3, #40	; 0x28
 8007f70:	2101      	movs	r1, #1
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 feea 	bl	8009d4c <RCCEx_PLL3_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f7e:	e004      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f86:	e000      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f92:	4b96      	ldr	r3, [pc, #600]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	f023 0107 	bic.w	r1, r3, #7
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa0:	4a92      	ldr	r2, [pc, #584]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	6553      	str	r3, [r2, #84]	; 0x54
 8007fa6:	e003      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f002 0304 	and.w	r3, r2, #4
 8007fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	d044      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d825      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007fdc:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08007ffd 	.word	0x08007ffd
 8007fec:	08008013 	.word	0x08008013
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008000:	3308      	adds	r3, #8
 8008002:	2101      	movs	r1, #1
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fdef 	bl	8009be8 <RCCEx_PLL2_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008010:	e00f      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008016:	3328      	adds	r3, #40	; 0x28
 8008018:	2101      	movs	r1, #1
 800801a:	4618      	mov	r0, r3
 800801c:	f001 fe96 	bl	8009d4c <RCCEx_PLL3_Config>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008026:	e004      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800802e:	e000      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800803a:	4b6c      	ldr	r3, [pc, #432]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	f023 0107 	bic.w	r1, r3, #7
 8008042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800804a:	4a68      	ldr	r2, [pc, #416]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800804c:	430b      	orrs	r3, r1
 800804e:	6593      	str	r3, [r2, #88]	; 0x58
 8008050:	e003      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008056:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f002 0320 	and.w	r3, r2, #32
 8008066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800806a:	2300      	movs	r3, #0
 800806c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008074:	460b      	mov	r3, r1
 8008076:	4313      	orrs	r3, r2
 8008078:	d055      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008086:	d033      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800808c:	d82c      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800808e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008092:	d02f      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008098:	d826      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800809a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800809e:	d02b      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80080a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080a4:	d820      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080aa:	d012      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80080ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b0:	d81a      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d022      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80080b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ba:	d115      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c0:	3308      	adds	r3, #8
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fd8f 	bl	8009be8 <RCCEx_PLL2_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080d0:	e015      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d6:	3328      	adds	r3, #40	; 0x28
 80080d8:	2102      	movs	r1, #2
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 fe36 	bl	8009d4c <RCCEx_PLL3_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080e6:	e00a      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080ee:	e006      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080f0:	bf00      	nop
 80080f2:	e004      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080f4:	bf00      	nop
 80080f6:	e002      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008106:	4b39      	ldr	r3, [pc, #228]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008116:	4a35      	ldr	r2, [pc, #212]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008118:	430b      	orrs	r3, r1
 800811a:	6553      	str	r3, [r2, #84]	; 0x54
 800811c:	e003      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008136:	2300      	movs	r3, #0
 8008138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800813c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008140:	460b      	mov	r3, r1
 8008142:	4313      	orrs	r3, r2
 8008144:	d058      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800814e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008152:	d033      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008154:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008158:	d82c      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	d02f      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008164:	d826      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800816a:	d02b      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800816c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008170:	d820      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d012      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800817c:	d81a      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d022      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008186:	d115      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818c:	3308      	adds	r3, #8
 800818e:	2100      	movs	r1, #0
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fd29 	bl	8009be8 <RCCEx_PLL2_Config>
 8008196:	4603      	mov	r3, r0
 8008198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800819c:	e015      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a2:	3328      	adds	r3, #40	; 0x28
 80081a4:	2102      	movs	r1, #2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 fdd0 	bl	8009d4c <RCCEx_PLL3_Config>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081b2:	e00a      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081ba:	e006      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081bc:	bf00      	nop
 80081be:	e004      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081c0:	bf00      	nop
 80081c2:	e002      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081c4:	bf00      	nop
 80081c6:	e000      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10e      	bne.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081d2:	4b06      	ldr	r3, [pc, #24]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081e2:	4a02      	ldr	r2, [pc, #8]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081e4:	430b      	orrs	r3, r1
 80081e6:	6593      	str	r3, [r2, #88]	; 0x58
 80081e8:	e006      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80081ea:	bf00      	nop
 80081ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008208:	2300      	movs	r3, #0
 800820a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800820e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008212:	460b      	mov	r3, r1
 8008214:	4313      	orrs	r3, r2
 8008216:	d055      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800821c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008220:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008224:	d033      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008226:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800822a:	d82c      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800822c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008230:	d02f      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008236:	d826      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008238:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800823c:	d02b      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800823e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008242:	d820      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008248:	d012      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800824a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800824e:	d81a      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d022      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008258:	d115      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800825e:	3308      	adds	r3, #8
 8008260:	2100      	movs	r1, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f001 fcc0 	bl	8009be8 <RCCEx_PLL2_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800826e:	e015      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008274:	3328      	adds	r3, #40	; 0x28
 8008276:	2102      	movs	r1, #2
 8008278:	4618      	mov	r0, r3
 800827a:	f001 fd67 	bl	8009d4c <RCCEx_PLL3_Config>
 800827e:	4603      	mov	r3, r0
 8008280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008284:	e00a      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800828c:	e006      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800828e:	bf00      	nop
 8008290:	e004      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008292:	bf00      	nop
 8008294:	e002      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008296:	bf00      	nop
 8008298:	e000      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800829a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800829c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10b      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082a4:	4ba1      	ldr	r3, [pc, #644]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80082ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082b4:	4a9d      	ldr	r2, [pc, #628]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082b6:	430b      	orrs	r3, r1
 80082b8:	6593      	str	r3, [r2, #88]	; 0x58
 80082ba:	e003      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f002 0308 	and.w	r3, r2, #8
 80082d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	d01e      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f0:	d10c      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f6:	3328      	adds	r3, #40	; 0x28
 80082f8:	2102      	movs	r1, #2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 fd26 	bl	8009d4c <RCCEx_PLL3_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800830c:	4b87      	ldr	r3, [pc, #540]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800830e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008310:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800831c:	4a83      	ldr	r2, [pc, #524]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800831e:	430b      	orrs	r3, r1
 8008320:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f002 0310 	and.w	r3, r2, #16
 800832e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008332:	2300      	movs	r3, #0
 8008334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008338:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800833c:	460b      	mov	r3, r1
 800833e:	4313      	orrs	r3, r2
 8008340:	d01e      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	d10c      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008354:	3328      	adds	r3, #40	; 0x28
 8008356:	2102      	movs	r1, #2
 8008358:	4618      	mov	r0, r3
 800835a:	f001 fcf7 	bl	8009d4c <RCCEx_PLL3_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800836a:	4b70      	ldr	r3, [pc, #448]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800837a:	4a6c      	ldr	r2, [pc, #432]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800837c:	430b      	orrs	r3, r1
 800837e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800838c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008396:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800839a:	460b      	mov	r3, r1
 800839c:	4313      	orrs	r3, r2
 800839e:	d03e      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ac:	d022      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80083ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b2:	d81b      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80083b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083bc:	d00b      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80083be:	e015      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c4:	3308      	adds	r3, #8
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fc0d 	bl	8009be8 <RCCEx_PLL2_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083d4:	e00f      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083da:	3328      	adds	r3, #40	; 0x28
 80083dc:	2102      	movs	r1, #2
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fcb4 	bl	8009d4c <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083ea:	e004      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083f2:	e000      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80083f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10b      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083fe:	4b4b      	ldr	r3, [pc, #300]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800840e:	4a47      	ldr	r2, [pc, #284]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008410:	430b      	orrs	r3, r1
 8008412:	6593      	str	r3, [r2, #88]	; 0x58
 8008414:	e003      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800841a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800842a:	67bb      	str	r3, [r7, #120]	; 0x78
 800842c:	2300      	movs	r3, #0
 800842e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008430:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008434:	460b      	mov	r3, r1
 8008436:	4313      	orrs	r3, r2
 8008438:	d03b      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800843a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800843e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008446:	d01f      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800844c:	d818      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800844e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008452:	d003      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008458:	d007      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800845a:	e011      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800845c:	4b33      	ldr	r3, [pc, #204]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	4a32      	ldr	r2, [pc, #200]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008468:	e00f      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846e:	3328      	adds	r3, #40	; 0x28
 8008470:	2101      	movs	r1, #1
 8008472:	4618      	mov	r0, r3
 8008474:	f001 fc6a 	bl	8009d4c <RCCEx_PLL3_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800847e:	e004      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008486:	e000      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800848a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008492:	4b26      	ldr	r3, [pc, #152]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008496:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a2:	4a22      	ldr	r2, [pc, #136]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084a4:	430b      	orrs	r3, r1
 80084a6:	6553      	str	r3, [r2, #84]	; 0x54
 80084a8:	e003      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80084be:	673b      	str	r3, [r7, #112]	; 0x70
 80084c0:	2300      	movs	r3, #0
 80084c2:	677b      	str	r3, [r7, #116]	; 0x74
 80084c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80084c8:	460b      	mov	r3, r1
 80084ca:	4313      	orrs	r3, r2
 80084cc:	d034      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80084d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084dc:	d007      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80084de:	e011      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e0:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	4a11      	ldr	r2, [pc, #68]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084ec:	e00e      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f2:	3308      	adds	r3, #8
 80084f4:	2102      	movs	r1, #2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 fb76 	bl	8009be8 <RCCEx_PLL2_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008502:	e003      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800850a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008522:	4a02      	ldr	r2, [pc, #8]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008524:	430b      	orrs	r3, r1
 8008526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008544:	66bb      	str	r3, [r7, #104]	; 0x68
 8008546:	2300      	movs	r3, #0
 8008548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800854a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800854e:	460b      	mov	r3, r1
 8008550:	4313      	orrs	r3, r2
 8008552:	d00c      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008558:	3328      	adds	r3, #40	; 0x28
 800855a:	2102      	movs	r1, #2
 800855c:	4618      	mov	r0, r3
 800855e:	f001 fbf5 	bl	8009d4c <RCCEx_PLL3_Config>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800857a:	663b      	str	r3, [r7, #96]	; 0x60
 800857c:	2300      	movs	r3, #0
 800857e:	667b      	str	r3, [r7, #100]	; 0x64
 8008580:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008584:	460b      	mov	r3, r1
 8008586:	4313      	orrs	r3, r2
 8008588:	d038      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008596:	d018      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800859c:	d811      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800859e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a2:	d014      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80085a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a8:	d80b      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d011      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80085ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b2:	d106      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b4:	4bc3      	ldr	r3, [pc, #780]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	4ac2      	ldr	r2, [pc, #776]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80085c0:	e008      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085c8:	e004      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085ca:	bf00      	nop
 80085cc:	e002      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10b      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085dc:	4bb9      	ldr	r3, [pc, #740]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085ec:	4ab5      	ldr	r2, [pc, #724]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ee:	430b      	orrs	r3, r1
 80085f0:	6553      	str	r3, [r2, #84]	; 0x54
 80085f2:	e003      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008608:	65bb      	str	r3, [r7, #88]	; 0x58
 800860a:	2300      	movs	r3, #0
 800860c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800860e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008612:	460b      	mov	r3, r1
 8008614:	4313      	orrs	r3, r2
 8008616:	d009      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008618:	4baa      	ldr	r3, [pc, #680]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800861a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008626:	4aa7      	ldr	r2, [pc, #668]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008628:	430b      	orrs	r3, r1
 800862a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008638:	653b      	str	r3, [r7, #80]	; 0x50
 800863a:	2300      	movs	r3, #0
 800863c:	657b      	str	r3, [r7, #84]	; 0x54
 800863e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008642:	460b      	mov	r3, r1
 8008644:	4313      	orrs	r3, r2
 8008646:	d00a      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008648:	4b9e      	ldr	r3, [pc, #632]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008654:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008658:	4a9a      	ldr	r2, [pc, #616]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800865a:	430b      	orrs	r3, r1
 800865c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800866a:	64bb      	str	r3, [r7, #72]	; 0x48
 800866c:	2300      	movs	r3, #0
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008670:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008674:	460b      	mov	r3, r1
 8008676:	4313      	orrs	r3, r2
 8008678:	d009      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800867a:	4b92      	ldr	r3, [pc, #584]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800867c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008688:	4a8e      	ldr	r2, [pc, #568]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800868a:	430b      	orrs	r3, r1
 800868c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800869a:	643b      	str	r3, [r7, #64]	; 0x40
 800869c:	2300      	movs	r3, #0
 800869e:	647b      	str	r3, [r7, #68]	; 0x44
 80086a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80086a4:	460b      	mov	r3, r1
 80086a6:	4313      	orrs	r3, r2
 80086a8:	d00e      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086aa:	4b86      	ldr	r3, [pc, #536]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	4a85      	ldr	r2, [pc, #532]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086b4:	6113      	str	r3, [r2, #16]
 80086b6:	4b83      	ldr	r3, [pc, #524]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086b8:	6919      	ldr	r1, [r3, #16]
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086c2:	4a80      	ldr	r2, [pc, #512]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80086d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80086d6:	2300      	movs	r3, #0
 80086d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80086de:	460b      	mov	r3, r1
 80086e0:	4313      	orrs	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086e4:	4b77      	ldr	r3, [pc, #476]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80086ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f2:	4a74      	ldr	r2, [pc, #464]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086f4:	430b      	orrs	r3, r1
 80086f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008704:	633b      	str	r3, [r7, #48]	; 0x30
 8008706:	2300      	movs	r3, #0
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
 800870a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800870e:	460b      	mov	r3, r1
 8008710:	4313      	orrs	r3, r2
 8008712:	d00a      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008714:	4b6b      	ldr	r3, [pc, #428]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008718:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800871c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008724:	4a67      	ldr	r2, [pc, #412]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008726:	430b      	orrs	r3, r1
 8008728:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	2100      	movs	r1, #0
 8008734:	62b9      	str	r1, [r7, #40]	; 0x28
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800873c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008740:	460b      	mov	r3, r1
 8008742:	4313      	orrs	r3, r2
 8008744:	d011      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874a:	3308      	adds	r3, #8
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fa4a 	bl	8009be8 <RCCEx_PLL2_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800875a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	2100      	movs	r1, #0
 8008774:	6239      	str	r1, [r7, #32]
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
 800877c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008780:	460b      	mov	r3, r1
 8008782:	4313      	orrs	r3, r2
 8008784:	d011      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800878a:	3308      	adds	r3, #8
 800878c:	2101      	movs	r1, #1
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fa2a 	bl	8009be8 <RCCEx_PLL2_Config>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800879a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	2100      	movs	r1, #0
 80087b4:	61b9      	str	r1, [r7, #24]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80087c0:	460b      	mov	r3, r1
 80087c2:	4313      	orrs	r3, r2
 80087c4:	d011      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ca:	3308      	adds	r3, #8
 80087cc:	2102      	movs	r1, #2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fa0a 	bl	8009be8 <RCCEx_PLL2_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80087da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	2100      	movs	r1, #0
 80087f4:	6139      	str	r1, [r7, #16]
 80087f6:	f003 0308 	and.w	r3, r3, #8
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008800:	460b      	mov	r3, r1
 8008802:	4313      	orrs	r3, r2
 8008804:	d011      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880a:	3328      	adds	r3, #40	; 0x28
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fa9c 	bl	8009d4c <RCCEx_PLL3_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800881a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800882a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	2100      	movs	r1, #0
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	f003 0310 	and.w	r3, r3, #16
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008840:	460b      	mov	r3, r1
 8008842:	4313      	orrs	r3, r2
 8008844:	d011      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884a:	3328      	adds	r3, #40	; 0x28
 800884c:	2101      	movs	r1, #1
 800884e:	4618      	mov	r0, r3
 8008850:	f001 fa7c 	bl	8009d4c <RCCEx_PLL3_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800885a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800886a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	2100      	movs	r1, #0
 8008874:	6039      	str	r1, [r7, #0]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	607b      	str	r3, [r7, #4]
 800887c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008880:	460b      	mov	r3, r1
 8008882:	4313      	orrs	r3, r2
 8008884:	d011      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888a:	3328      	adds	r3, #40	; 0x28
 800888c:	2102      	movs	r1, #2
 800888e:	4618      	mov	r0, r3
 8008890:	f001 fa5c 	bl	8009d4c <RCCEx_PLL3_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800889a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80088aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	e000      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80088be:	46bd      	mov	sp, r7
 80088c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088c4:	58024400 	.word	0x58024400

080088c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b090      	sub	sp, #64	; 0x40
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80088da:	430b      	orrs	r3, r1
 80088dc:	f040 8094 	bne.w	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80088e0:	4b9e      	ldr	r3, [pc, #632]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	f200 8087 	bhi.w	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80088f2:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	0800890d 	.word	0x0800890d
 80088fc:	08008935 	.word	0x08008935
 8008900:	0800895d 	.word	0x0800895d
 8008904:	080089f9 	.word	0x080089f9
 8008908:	08008985 	.word	0x08008985
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800890c:	4b93      	ldr	r3, [pc, #588]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008918:	d108      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800891a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f001 f810 	bl	8009944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008928:	f000 bd45 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008930:	f000 bd41 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008934:	4b89      	ldr	r3, [pc, #548]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800893c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008940:	d108      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008942:	f107 0318 	add.w	r3, r7, #24
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fd54 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008950:	f000 bd31 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008958:	f000 bd2d 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800895c:	4b7f      	ldr	r3, [pc, #508]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008968:	d108      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800896a:	f107 030c 	add.w	r3, r7, #12
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fe94 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008978:	f000 bd1d 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008980:	f000 bd19 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008984:	4b75      	ldr	r3, [pc, #468]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800898c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800898e:	4b73      	ldr	r3, [pc, #460]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b04      	cmp	r3, #4
 8008998:	d10c      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800899a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899c:	2b00      	cmp	r3, #0
 800899e:	d109      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089a0:	4b6e      	ldr	r3, [pc, #440]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	08db      	lsrs	r3, r3, #3
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	4a6d      	ldr	r2, [pc, #436]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089ac:	fa22 f303 	lsr.w	r3, r2, r3
 80089b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b2:	e01f      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089b4:	4b69      	ldr	r3, [pc, #420]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c0:	d106      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089c8:	d102      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089ca:	4b66      	ldr	r3, [pc, #408]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ce:	e011      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089d0:	4b62      	ldr	r3, [pc, #392]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089dc:	d106      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e4:	d102      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089e6:	4b60      	ldr	r3, [pc, #384]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ea:	e003      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089f0:	f000 bce1 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089f4:	f000 bcdf 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089f8:	4b5c      	ldr	r3, [pc, #368]	; (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089fc:	f000 bcdb 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a04:	f000 bcd7 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a0c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008a10:	430b      	orrs	r3, r1
 8008a12:	f040 80ad 	bne.w	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008a16:	4b51      	ldr	r3, [pc, #324]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a26:	d056      	beq.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a2e:	f200 8090 	bhi.w	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	2bc0      	cmp	r3, #192	; 0xc0
 8008a36:	f000 8088 	beq.w	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	2bc0      	cmp	r3, #192	; 0xc0
 8008a3e:	f200 8088 	bhi.w	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2b80      	cmp	r3, #128	; 0x80
 8008a46:	d032      	beq.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	2b80      	cmp	r3, #128	; 0x80
 8008a4c:	f200 8081 	bhi.w	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	d014      	beq.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008a5c:	e079      	b.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a5e:	4b3f      	ldr	r3, [pc, #252]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a6a:	d108      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 ff67 	bl	8009944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a7a:	f000 bc9c 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a82:	f000 bc98 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a86:	4b35      	ldr	r3, [pc, #212]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a92:	d108      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a94:	f107 0318 	add.w	r3, r7, #24
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fcab 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa2:	f000 bc88 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aaa:	f000 bc84 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aae:	4b2b      	ldr	r3, [pc, #172]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aba:	d108      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008abc:	f107 030c 	add.w	r3, r7, #12
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fdeb 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aca:	f000 bc74 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad2:	f000 bc70 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ad6:	4b21      	ldr	r3, [pc, #132]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ae0:	4b1e      	ldr	r3, [pc, #120]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d10c      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d109      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008af2:	4b1a      	ldr	r3, [pc, #104]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	08db      	lsrs	r3, r3, #3
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	4a18      	ldr	r2, [pc, #96]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008afe:	fa22 f303 	lsr.w	r3, r2, r3
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b04:	e01f      	b.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d106      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b1a:	d102      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b1c:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b20:	e011      	b.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b22:	4b0e      	ldr	r3, [pc, #56]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b2e:	d106      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b36:	d102      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b38:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b3c:	e003      	b.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b42:	f000 bc38 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b46:	f000 bc36 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b4a:	4b08      	ldr	r3, [pc, #32]	; (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b4e:	f000 bc32 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b56:	f000 bc2e 	b.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b5a:	bf00      	nop
 8008b5c:	58024400 	.word	0x58024400
 8008b60:	03d09000 	.word	0x03d09000
 8008b64:	003d0900 	.word	0x003d0900
 8008b68:	017d7840 	.word	0x017d7840
 8008b6c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b74:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	f040 809c 	bne.w	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b7e:	4b9e      	ldr	r3, [pc, #632]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008b86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b8e:	d054      	beq.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b96:	f200 808b 	bhi.w	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ba0:	f000 8083 	beq.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008baa:	f200 8081 	bhi.w	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bb4:	d02f      	beq.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bbc:	d878      	bhi.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bca:	d012      	beq.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008bcc:	e070      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bce:	4b8a      	ldr	r3, [pc, #552]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bda:	d107      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 feaf 	bl	8009944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bea:	e3e4      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf0:	e3e1      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bf2:	4b81      	ldr	r3, [pc, #516]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bfe:	d107      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c00:	f107 0318 	add.w	r3, r7, #24
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fbf5 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c0e:	e3d2      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c14:	e3cf      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c16:	4b78      	ldr	r3, [pc, #480]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c22:	d107      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c24:	f107 030c 	add.w	r3, r7, #12
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fd37 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c32:	e3c0      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c38:	e3bd      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c3a:	4b6f      	ldr	r3, [pc, #444]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c44:	4b6c      	ldr	r3, [pc, #432]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	d10c      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c56:	4b68      	ldr	r3, [pc, #416]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	08db      	lsrs	r3, r3, #3
 8008c5c:	f003 0303 	and.w	r3, r3, #3
 8008c60:	4a66      	ldr	r2, [pc, #408]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c62:	fa22 f303 	lsr.w	r3, r2, r3
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c68:	e01e      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c6a:	4b63      	ldr	r3, [pc, #396]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c76:	d106      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c7e:	d102      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c80:	4b5f      	ldr	r3, [pc, #380]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c84:	e010      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c86:	4b5c      	ldr	r3, [pc, #368]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c92:	d106      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c9c:	4b59      	ldr	r3, [pc, #356]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca0:	e002      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ca6:	e386      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ca8:	e385      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008caa:	4b57      	ldr	r3, [pc, #348]	; (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cae:	e382      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb4:	e37f      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008cbe:	430b      	orrs	r3, r1
 8008cc0:	f040 80a7 	bne.w	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008cc4:	4b4c      	ldr	r3, [pc, #304]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008ccc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cd4:	d055      	beq.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cdc:	f200 8096 	bhi.w	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ce6:	f000 8084 	beq.w	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008cf0:	f200 808c 	bhi.w	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cfa:	d030      	beq.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d02:	f200 8083 	bhi.w	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d12:	d012      	beq.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008d14:	e07a      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d16:	4b38      	ldr	r3, [pc, #224]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d22:	d107      	bne.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fe0b 	bl	8009944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d32:	e340      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d38:	e33d      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d3a:	4b2f      	ldr	r3, [pc, #188]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d46:	d107      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d48:	f107 0318 	add.w	r3, r7, #24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 fb51 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d56:	e32e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d5c:	e32b      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d5e:	4b26      	ldr	r3, [pc, #152]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d6a:	d107      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d6c:	f107 030c 	add.w	r3, r7, #12
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fc93 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d7a:	e31c      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d80:	e319      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d82:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d10c      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d109      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d9e:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	08db      	lsrs	r3, r3, #3
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	4a14      	ldr	r2, [pc, #80]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008daa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db0:	e01e      	b.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008db2:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dbe:	d106      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dc6:	d102      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dcc:	e010      	b.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dce:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dda:	d106      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008de2:	d102      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008de4:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de8:	e002      	b.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008dee:	e2e2      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008df0:	e2e1      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df6:	e2de      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	03d09000 	.word	0x03d09000
 8008e00:	003d0900 	.word	0x003d0900
 8008e04:	017d7840 	.word	0x017d7840
 8008e08:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e10:	e2d1      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e16:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	f040 809c 	bne.w	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008e20:	4b93      	ldr	r3, [pc, #588]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e24:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008e28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e30:	d054      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e38:	f200 808b 	bhi.w	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e42:	f000 8083 	beq.w	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e4c:	f200 8081 	bhi.w	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e56:	d02f      	beq.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e5e:	d878      	bhi.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d004      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e6c:	d012      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008e6e:	e070      	b.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e70:	4b7f      	ldr	r3, [pc, #508]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e7c:	d107      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fd5e 	bl	8009944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e8c:	e293      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e92:	e290      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e94:	4b76      	ldr	r3, [pc, #472]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea2:	f107 0318 	add.w	r3, r7, #24
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 faa4 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb0:	e281      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb6:	e27e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eb8:	4b6d      	ldr	r3, [pc, #436]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec4:	d107      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec6:	f107 030c 	add.w	r3, r7, #12
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fbe6 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed4:	e26f      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eda:	e26c      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008edc:	4b64      	ldr	r3, [pc, #400]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ee6:	4b62      	ldr	r3, [pc, #392]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d10c      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d109      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef8:	4b5d      	ldr	r3, [pc, #372]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	08db      	lsrs	r3, r3, #3
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	4a5c      	ldr	r2, [pc, #368]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008f04:	fa22 f303 	lsr.w	r3, r2, r3
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f0a:	e01e      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f0c:	4b58      	ldr	r3, [pc, #352]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f18:	d106      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f20:	d102      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f22:	4b55      	ldr	r3, [pc, #340]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f26:	e010      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f28:	4b51      	ldr	r3, [pc, #324]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f34:	d106      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f3c:	d102      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f3e:	4b4f      	ldr	r3, [pc, #316]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f42:	e002      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f48:	e235      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f4a:	e234      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f4c:	4b4c      	ldr	r3, [pc, #304]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f50:	e231      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f56:	e22e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008f60:	430b      	orrs	r3, r1
 8008f62:	f040 808f 	bne.w	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008f66:	4b42      	ldr	r3, [pc, #264]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008f6e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f76:	d06b      	beq.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f7e:	d874      	bhi.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f86:	d056      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f8e:	d86c      	bhi.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f96:	d03b      	beq.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f9e:	d864      	bhi.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fa6:	d021      	beq.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fae:	d85c      	bhi.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008fbe:	e054      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008fc0:	f7fe fa0a 	bl	80073d8 <HAL_RCC_GetPCLK1Freq>
 8008fc4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fc6:	e1f6      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc8:	4b29      	ldr	r3, [pc, #164]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd4:	d107      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd6:	f107 0318 	add.w	r3, r7, #24
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fa0a 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe4:	e1e7      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fea:	e1e4      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fec:	4b20      	ldr	r3, [pc, #128]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d107      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fb4c 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009008:	e1d5      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800900e:	e1d2      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009010:	4b17      	ldr	r3, [pc, #92]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b04      	cmp	r3, #4
 800901a:	d109      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800901c:	4b14      	ldr	r3, [pc, #80]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	08db      	lsrs	r3, r3, #3
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	4a13      	ldr	r2, [pc, #76]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009028:	fa22 f303 	lsr.w	r3, r2, r3
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800902e:	e1c2      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009034:	e1bf      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009036:	4b0e      	ldr	r3, [pc, #56]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009042:	d102      	bne.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009048:	e1b5      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800904e:	e1b2      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009050:	4b07      	ldr	r3, [pc, #28]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800905c:	d102      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800905e:	4b07      	ldr	r3, [pc, #28]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009062:	e1a8      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009068:	e1a5      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906e:	e1a2      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	003d0900 	.word	0x003d0900
 800907c:	017d7840 	.word	0x017d7840
 8009080:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009088:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800908c:	430b      	orrs	r3, r1
 800908e:	d173      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009090:	4b9c      	ldr	r3, [pc, #624]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009098:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a0:	d02f      	beq.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a8:	d863      	bhi.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b6:	d012      	beq.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80090b8:	e05b      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ba:	4b92      	ldr	r3, [pc, #584]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090c6:	d107      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090c8:	f107 0318 	add.w	r3, r7, #24
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f991 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090d6:	e16e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090dc:	e16b      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090de:	4b89      	ldr	r3, [pc, #548]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ea:	d107      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ec:	f107 030c 	add.w	r3, r7, #12
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fad3 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090fa:	e15c      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009100:	e159      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009102:	4b80      	ldr	r3, [pc, #512]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800910a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800910c:	4b7d      	ldr	r3, [pc, #500]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b04      	cmp	r3, #4
 8009116:	d10c      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800911e:	4b79      	ldr	r3, [pc, #484]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	08db      	lsrs	r3, r3, #3
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	4a77      	ldr	r2, [pc, #476]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800912a:	fa22 f303 	lsr.w	r3, r2, r3
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009130:	e01e      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009132:	4b74      	ldr	r3, [pc, #464]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913e:	d106      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009146:	d102      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009148:	4b70      	ldr	r3, [pc, #448]	; (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800914c:	e010      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800914e:	4b6d      	ldr	r3, [pc, #436]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800915a:	d106      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800915c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009162:	d102      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009164:	4b6a      	ldr	r3, [pc, #424]	; (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009168:	e002      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800916e:	e122      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009170:	e121      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009176:	e11e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800917c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009180:	430b      	orrs	r3, r1
 8009182:	d133      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009184:	4b5f      	ldr	r3, [pc, #380]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800918c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	2b00      	cmp	r3, #0
 8009192:	d004      	beq.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800919a:	d012      	beq.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800919c:	e023      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800919e:	4b59      	ldr	r3, [pc, #356]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091aa:	d107      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fbc7 	bl	8009944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ba:	e0fc      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c0:	e0f9      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c2:	4b50      	ldr	r3, [pc, #320]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091ce:	d107      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d0:	f107 0318 	add.w	r3, r7, #24
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 f90d 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091de:	e0ea      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e4:	e0e7      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ea:	e0e4      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80091ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80091f4:	430b      	orrs	r3, r1
 80091f6:	f040 808d 	bne.w	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80091fa:	4b42      	ldr	r3, [pc, #264]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009202:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800920a:	d06b      	beq.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009212:	d874      	bhi.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921a:	d056      	beq.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009222:	d86c      	bhi.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800922a:	d03b      	beq.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009232:	d864      	bhi.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923a:	d021      	beq.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009242:	d85c      	bhi.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d004      	beq.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009250:	d004      	beq.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009252:	e054      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009254:	f000 f8b8 	bl	80093c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009258:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800925a:	e0ac      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800925c:	4b29      	ldr	r3, [pc, #164]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009268:	d107      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800926a:	f107 0318 	add.w	r3, r7, #24
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f8c0 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009278:	e09d      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800927e:	e09a      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009280:	4b20      	ldr	r3, [pc, #128]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800928c:	d107      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928e:	f107 030c 	add.w	r3, r7, #12
 8009292:	4618      	mov	r0, r3
 8009294:	f000 fa02 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800929c:	e08b      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a2:	e088      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092a4:	4b17      	ldr	r3, [pc, #92]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d109      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b0:	4b14      	ldr	r3, [pc, #80]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	08db      	lsrs	r3, r3, #3
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	4a13      	ldr	r2, [pc, #76]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c2:	e078      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c8:	e075      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092ca:	4b0e      	ldr	r3, [pc, #56]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d6:	d102      	bne.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80092d8:	4b0c      	ldr	r3, [pc, #48]	; (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092dc:	e06b      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e2:	e068      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092e4:	4b07      	ldr	r3, [pc, #28]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f0:	d102      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80092f2:	4b07      	ldr	r3, [pc, #28]	; (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f6:	e05e      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092fc:	e05b      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009302:	e058      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009304:	58024400 	.word	0x58024400
 8009308:	03d09000 	.word	0x03d09000
 800930c:	003d0900 	.word	0x003d0900
 8009310:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009318:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800931c:	430b      	orrs	r3, r1
 800931e:	d148      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009320:	4b27      	ldr	r3, [pc, #156]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009328:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009330:	d02a      	beq.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009338:	d838      	bhi.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009346:	d00d      	beq.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009348:	e030      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800934a:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009356:	d102      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009358:	4b1a      	ldr	r3, [pc, #104]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935c:	e02b      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009362:	e028      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009364:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009370:	d107      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fae4 	bl	8009944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009380:	e019      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009386:	e016      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009388:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009394:	d107      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009396:	f107 0318 	add.w	r3, r7, #24
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f82a 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093a4:	e007      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093aa:	e004      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b0:	e001      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80093b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3740      	adds	r7, #64	; 0x40
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	58024400 	.word	0x58024400
 80093c4:	017d7840 	.word	0x017d7840

080093c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80093cc:	f7fd ffd4 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 80093d0:	4602      	mov	r2, r0
 80093d2:	4b06      	ldr	r3, [pc, #24]	; (80093ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	091b      	lsrs	r3, r3, #4
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	4904      	ldr	r1, [pc, #16]	; (80093f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80093de:	5ccb      	ldrb	r3, [r1, r3]
 80093e0:	f003 031f 	and.w	r3, r3, #31
 80093e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	58024400 	.word	0x58024400
 80093f0:	08011e3c 	.word	0x08011e3c

080093f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b089      	sub	sp, #36	; 0x24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093fc:	4ba1      	ldr	r3, [pc, #644]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009400:	f003 0303 	and.w	r3, r3, #3
 8009404:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009406:	4b9f      	ldr	r3, [pc, #636]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940a:	0b1b      	lsrs	r3, r3, #12
 800940c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009410:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009412:	4b9c      	ldr	r3, [pc, #624]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	091b      	lsrs	r3, r3, #4
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800941e:	4b99      	ldr	r3, [pc, #612]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	08db      	lsrs	r3, r3, #3
 8009424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	fb02 f303 	mul.w	r3, r2, r3
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 8111 	beq.w	8009664 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	2b02      	cmp	r3, #2
 8009446:	f000 8083 	beq.w	8009550 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	2b02      	cmp	r3, #2
 800944e:	f200 80a1 	bhi.w	8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d056      	beq.n	800950c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800945e:	e099      	b.n	8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009460:	4b88      	ldr	r3, [pc, #544]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	d02d      	beq.n	80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800946c:	4b85      	ldr	r3, [pc, #532]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	08db      	lsrs	r3, r3, #3
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	4a84      	ldr	r2, [pc, #528]	; (8009688 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009478:	fa22 f303 	lsr.w	r3, r2, r3
 800947c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	ee07 3a90 	vmov	s15, r3
 8009484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b7b      	ldr	r3, [pc, #492]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800968c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094c6:	e087      	b.n	80095d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009690 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80094d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094da:	4b6a      	ldr	r3, [pc, #424]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800968c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800950a:	e065      	b.n	80095d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800951a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951e:	4b59      	ldr	r3, [pc, #356]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009532:	eddf 5a56 	vldr	s11, [pc, #344]	; 800968c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800954e:	e043      	b.n	80095d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800955e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009562:	4b48      	ldr	r3, [pc, #288]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009572:	ed97 6a03 	vldr	s12, [r7, #12]
 8009576:	eddf 5a45 	vldr	s11, [pc, #276]	; 800968c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800957a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800958a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009592:	e021      	b.n	80095d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a6:	4b37      	ldr	r3, [pc, #220]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800968c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80095d8:	4b2a      	ldr	r3, [pc, #168]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095dc:	0a5b      	lsrs	r3, r3, #9
 80095de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fe:	ee17 2a90 	vmov	r2, s15
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009606:	4b1f      	ldr	r3, [pc, #124]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960a:	0c1b      	lsrs	r3, r3, #16
 800960c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800961c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009620:	edd7 6a07 	vldr	s13, [r7, #28]
 8009624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800962c:	ee17 2a90 	vmov	r2, s15
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009634:	4b13      	ldr	r3, [pc, #76]	; (8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	0e1b      	lsrs	r3, r3, #24
 800963a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800964a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800964e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800965a:	ee17 2a90 	vmov	r2, s15
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009662:	e008      	b.n	8009676 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	609a      	str	r2, [r3, #8]
}
 8009676:	bf00      	nop
 8009678:	3724      	adds	r7, #36	; 0x24
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	58024400 	.word	0x58024400
 8009688:	03d09000 	.word	0x03d09000
 800968c:	46000000 	.word	0x46000000
 8009690:	4c742400 	.word	0x4c742400
 8009694:	4a742400 	.word	0x4a742400
 8009698:	4bbebc20 	.word	0x4bbebc20

0800969c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800969c:	b480      	push	{r7}
 800969e:	b089      	sub	sp, #36	; 0x24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096a4:	4ba1      	ldr	r3, [pc, #644]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80096ae:	4b9f      	ldr	r3, [pc, #636]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	0d1b      	lsrs	r3, r3, #20
 80096b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80096ba:	4b9c      	ldr	r3, [pc, #624]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80096c6:	4b99      	ldr	r3, [pc, #612]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ca:	08db      	lsrs	r3, r3, #3
 80096cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	fb02 f303 	mul.w	r3, r2, r3
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 8111 	beq.w	800990c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	f000 8083 	beq.w	80097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	f200 80a1 	bhi.w	800983c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d056      	beq.n	80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009706:	e099      	b.n	800983c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009708:	4b88      	ldr	r3, [pc, #544]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b00      	cmp	r3, #0
 8009712:	d02d      	beq.n	8009770 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009714:	4b85      	ldr	r3, [pc, #532]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	08db      	lsrs	r3, r3, #3
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	4a84      	ldr	r2, [pc, #528]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009720:	fa22 f303 	lsr.w	r3, r2, r3
 8009724:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973e:	4b7b      	ldr	r3, [pc, #492]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009752:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800976e:	e087      	b.n	8009880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800977e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009782:	4b6a      	ldr	r3, [pc, #424]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009792:	ed97 6a03 	vldr	s12, [r7, #12]
 8009796:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800979a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097b2:	e065      	b.n	8009880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c6:	4b59      	ldr	r3, [pc, #356]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097f6:	e043      	b.n	8009880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009802:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800980a:	4b48      	ldr	r3, [pc, #288]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981a:	ed97 6a03 	vldr	s12, [r7, #12]
 800981e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800982a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800982e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800983a:	e021      	b.n	8009880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009846:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800984a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800984e:	4b37      	ldr	r3, [pc, #220]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009862:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800986e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800987e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009880:	4b2a      	ldr	r3, [pc, #168]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009884:	0a5b      	lsrs	r3, r3, #9
 8009886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800989a:	edd7 6a07 	vldr	s13, [r7, #28]
 800989e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a6:	ee17 2a90 	vmov	r2, s15
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80098ae:	4b1f      	ldr	r3, [pc, #124]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	0c1b      	lsrs	r3, r3, #16
 80098b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b8:	ee07 3a90 	vmov	s15, r3
 80098bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80098cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098d4:	ee17 2a90 	vmov	r2, s15
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80098dc:	4b13      	ldr	r3, [pc, #76]	; (800992c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	0e1b      	lsrs	r3, r3, #24
 80098e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80098fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009902:	ee17 2a90 	vmov	r2, s15
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800990a:	e008      	b.n	800991e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	609a      	str	r2, [r3, #8]
}
 800991e:	bf00      	nop
 8009920:	3724      	adds	r7, #36	; 0x24
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	58024400 	.word	0x58024400
 8009930:	03d09000 	.word	0x03d09000
 8009934:	46000000 	.word	0x46000000
 8009938:	4c742400 	.word	0x4c742400
 800993c:	4a742400 	.word	0x4a742400
 8009940:	4bbebc20 	.word	0x4bbebc20

08009944 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009944:	b480      	push	{r7}
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800994c:	4ba0      	ldr	r3, [pc, #640]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800994e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009950:	f003 0303 	and.w	r3, r3, #3
 8009954:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009956:	4b9e      	ldr	r3, [pc, #632]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995a:	091b      	lsrs	r3, r3, #4
 800995c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009960:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009962:	4b9b      	ldr	r3, [pc, #620]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800996c:	4b98      	ldr	r3, [pc, #608]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009970:	08db      	lsrs	r3, r3, #3
 8009972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	fb02 f303 	mul.w	r3, r2, r3
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009984:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 8111 	beq.w	8009bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	2b02      	cmp	r3, #2
 8009994:	f000 8083 	beq.w	8009a9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2b02      	cmp	r3, #2
 800999c:	f200 80a1 	bhi.w	8009ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d056      	beq.n	8009a5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80099ac:	e099      	b.n	8009ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ae:	4b88      	ldr	r3, [pc, #544]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d02d      	beq.n	8009a16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ba:	4b85      	ldr	r3, [pc, #532]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	08db      	lsrs	r3, r3, #3
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	4a83      	ldr	r2, [pc, #524]	; (8009bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80099c6:	fa22 f303 	lsr.w	r3, r2, r3
 80099ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	ee07 3a90 	vmov	s15, r3
 80099dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e4:	4b7a      	ldr	r3, [pc, #488]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80099f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a14:	e087      	b.n	8009b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	ee07 3a90 	vmov	s15, r3
 8009a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009bdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a28:	4b69      	ldr	r3, [pc, #420]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a30:	ee07 3a90 	vmov	s15, r3
 8009a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a38:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a58:	e065      	b.n	8009b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	ee07 3a90 	vmov	s15, r3
 8009a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009be0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a6c:	4b58      	ldr	r3, [pc, #352]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a74:	ee07 3a90 	vmov	s15, r3
 8009a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a80:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a9c:	e043      	b.n	8009b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	ee07 3a90 	vmov	s15, r3
 8009aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab0:	4b47      	ldr	r3, [pc, #284]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab8:	ee07 3a90 	vmov	s15, r3
 8009abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ac4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009adc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ae0:	e021      	b.n	8009b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009bdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009af4:	4b36      	ldr	r3, [pc, #216]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009afc:	ee07 3a90 	vmov	s15, r3
 8009b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009b26:	4b2a      	ldr	r3, [pc, #168]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	0a5b      	lsrs	r3, r3, #9
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	ee07 3a90 	vmov	s15, r3
 8009b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b4c:	ee17 2a90 	vmov	r2, s15
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009b54:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b7a:	ee17 2a90 	vmov	r2, s15
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009b82:	4b13      	ldr	r3, [pc, #76]	; (8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b86:	0e1b      	lsrs	r3, r3, #24
 8009b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8c:	ee07 3a90 	vmov	s15, r3
 8009b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba8:	ee17 2a90 	vmov	r2, s15
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009bb0:	e008      	b.n	8009bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	609a      	str	r2, [r3, #8]
}
 8009bc4:	bf00      	nop
 8009bc6:	3724      	adds	r7, #36	; 0x24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	58024400 	.word	0x58024400
 8009bd4:	03d09000 	.word	0x03d09000
 8009bd8:	46000000 	.word	0x46000000
 8009bdc:	4c742400 	.word	0x4c742400
 8009be0:	4a742400 	.word	0x4a742400
 8009be4:	4bbebc20 	.word	0x4bbebc20

08009be8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bf6:	4b53      	ldr	r3, [pc, #332]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d101      	bne.n	8009c06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e099      	b.n	8009d3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c06:	4b4f      	ldr	r3, [pc, #316]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a4e      	ldr	r2, [pc, #312]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c12:	f7f8 fb53 	bl	80022bc <HAL_GetTick>
 8009c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c18:	e008      	b.n	8009c2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c1a:	f7f8 fb4f 	bl	80022bc <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e086      	b.n	8009d3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c2c:	4b45      	ldr	r3, [pc, #276]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f0      	bne.n	8009c1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c38:	4b42      	ldr	r3, [pc, #264]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	031b      	lsls	r3, r3, #12
 8009c46:	493f      	ldr	r1, [pc, #252]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	628b      	str	r3, [r1, #40]	; 0x28
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	025b      	lsls	r3, r3, #9
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	431a      	orrs	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	041b      	lsls	r3, r3, #16
 8009c6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	061b      	lsls	r3, r3, #24
 8009c78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c7c:	4931      	ldr	r1, [pc, #196]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c82:	4b30      	ldr	r3, [pc, #192]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	492d      	ldr	r1, [pc, #180]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c94:	4b2b      	ldr	r3, [pc, #172]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	f023 0220 	bic.w	r2, r3, #32
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	4928      	ldr	r1, [pc, #160]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ca6:	4b27      	ldr	r3, [pc, #156]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	4a26      	ldr	r2, [pc, #152]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cac:	f023 0310 	bic.w	r3, r3, #16
 8009cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009cb2:	4b24      	ldr	r3, [pc, #144]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <RCCEx_PLL2_Config+0x160>)
 8009cb8:	4013      	ands	r3, r2
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	69d2      	ldr	r2, [r2, #28]
 8009cbe:	00d2      	lsls	r2, r2, #3
 8009cc0:	4920      	ldr	r1, [pc, #128]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009cc6:	4b1f      	ldr	r3, [pc, #124]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cca:	4a1e      	ldr	r2, [pc, #120]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009ccc:	f043 0310 	orr.w	r3, r3, #16
 8009cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d106      	bne.n	8009ce6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009cd8:	4b1a      	ldr	r3, [pc, #104]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	4a19      	ldr	r2, [pc, #100]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ce4:	e00f      	b.n	8009d06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d106      	bne.n	8009cfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009cec:	4b15      	ldr	r3, [pc, #84]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	4a14      	ldr	r2, [pc, #80]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cf8:	e005      	b.n	8009d06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009cfa:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	4a11      	ldr	r2, [pc, #68]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d06:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a0e      	ldr	r2, [pc, #56]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009d0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d12:	f7f8 fad3 	bl	80022bc <HAL_GetTick>
 8009d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d18:	e008      	b.n	8009d2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d1a:	f7f8 facf 	bl	80022bc <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d901      	bls.n	8009d2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e006      	b.n	8009d3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d2c:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <RCCEx_PLL2_Config+0x15c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0f0      	beq.n	8009d1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	58024400 	.word	0x58024400
 8009d48:	ffff0007 	.word	0xffff0007

08009d4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d5a:	4b53      	ldr	r3, [pc, #332]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	f003 0303 	and.w	r3, r3, #3
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d101      	bne.n	8009d6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e099      	b.n	8009e9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d6a:	4b4f      	ldr	r3, [pc, #316]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a4e      	ldr	r2, [pc, #312]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d76:	f7f8 faa1 	bl	80022bc <HAL_GetTick>
 8009d7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d7c:	e008      	b.n	8009d90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d7e:	f7f8 fa9d 	bl	80022bc <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d901      	bls.n	8009d90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e086      	b.n	8009e9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d90:	4b45      	ldr	r3, [pc, #276]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1f0      	bne.n	8009d7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d9c:	4b42      	ldr	r3, [pc, #264]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	051b      	lsls	r3, r3, #20
 8009daa:	493f      	ldr	r1, [pc, #252]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	628b      	str	r3, [r1, #40]	; 0x28
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	025b      	lsls	r3, r3, #9
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	041b      	lsls	r3, r3, #16
 8009dce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	061b      	lsls	r3, r3, #24
 8009ddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009de0:	4931      	ldr	r1, [pc, #196]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009de6:	4b30      	ldr	r3, [pc, #192]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	492d      	ldr	r1, [pc, #180]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009df8:	4b2b      	ldr	r3, [pc, #172]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	4928      	ldr	r1, [pc, #160]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e0a:	4b27      	ldr	r3, [pc, #156]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	4a26      	ldr	r2, [pc, #152]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e16:	4b24      	ldr	r3, [pc, #144]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e1a:	4b24      	ldr	r3, [pc, #144]	; (8009eac <RCCEx_PLL3_Config+0x160>)
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	69d2      	ldr	r2, [r2, #28]
 8009e22:	00d2      	lsls	r2, r2, #3
 8009e24:	4920      	ldr	r1, [pc, #128]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e2a:	4b1f      	ldr	r3, [pc, #124]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	4a19      	ldr	r2, [pc, #100]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e48:	e00f      	b.n	8009e6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d106      	bne.n	8009e5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e50:	4b15      	ldr	r3, [pc, #84]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	4a14      	ldr	r2, [pc, #80]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e5c:	e005      	b.n	8009e6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e5e:	4b12      	ldr	r3, [pc, #72]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	4a11      	ldr	r2, [pc, #68]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a0e      	ldr	r2, [pc, #56]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e76:	f7f8 fa21 	bl	80022bc <HAL_GetTick>
 8009e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e7c:	e008      	b.n	8009e90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e7e:	f7f8 fa1d 	bl	80022bc <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d901      	bls.n	8009e90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e006      	b.n	8009e9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <RCCEx_PLL3_Config+0x15c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0f0      	beq.n	8009e7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	58024400 	.word	0x58024400
 8009eac:	ffff0007 	.word	0xffff0007

08009eb0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e10f      	b.n	800a0e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a87      	ldr	r2, [pc, #540]	; (800a0ec <HAL_SPI_Init+0x23c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d00f      	beq.n	8009ef2 <HAL_SPI_Init+0x42>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a86      	ldr	r2, [pc, #536]	; (800a0f0 <HAL_SPI_Init+0x240>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00a      	beq.n	8009ef2 <HAL_SPI_Init+0x42>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a84      	ldr	r2, [pc, #528]	; (800a0f4 <HAL_SPI_Init+0x244>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d005      	beq.n	8009ef2 <HAL_SPI_Init+0x42>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	d901      	bls.n	8009ef2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e0f7      	b.n	800a0e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f900 	bl	800a0f8 <SPI_GetPacketSize>
 8009ef8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a7b      	ldr	r2, [pc, #492]	; (800a0ec <HAL_SPI_Init+0x23c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00c      	beq.n	8009f1e <HAL_SPI_Init+0x6e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a79      	ldr	r2, [pc, #484]	; (800a0f0 <HAL_SPI_Init+0x240>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d007      	beq.n	8009f1e <HAL_SPI_Init+0x6e>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a78      	ldr	r2, [pc, #480]	; (800a0f4 <HAL_SPI_Init+0x244>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d002      	beq.n	8009f1e <HAL_SPI_Init+0x6e>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d811      	bhi.n	8009f42 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f22:	4a72      	ldr	r2, [pc, #456]	; (800a0ec <HAL_SPI_Init+0x23c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d009      	beq.n	8009f3c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a70      	ldr	r2, [pc, #448]	; (800a0f0 <HAL_SPI_Init+0x240>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d004      	beq.n	8009f3c <HAL_SPI_Init+0x8c>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a6f      	ldr	r2, [pc, #444]	; (800a0f4 <HAL_SPI_Init+0x244>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d104      	bne.n	8009f46 <HAL_SPI_Init+0x96>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b10      	cmp	r3, #16
 8009f40:	d901      	bls.n	8009f46 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e0cd      	b.n	800a0e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7f7 fd2c 	bl	80019b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0201 	bic.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009f82:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f8c:	d119      	bne.n	8009fc2 <HAL_SPI_Init+0x112>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f96:	d103      	bne.n	8009fa0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d008      	beq.n	8009fb2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10c      	bne.n	8009fc2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fb0:	d107      	bne.n	8009fc2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00f      	beq.n	8009fee <HAL_SPI_Init+0x13e>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2b06      	cmp	r3, #6
 8009fd4:	d90b      	bls.n	8009fee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	e007      	b.n	8009ffe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ffc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69da      	ldr	r2, [r3, #28]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a006:	431a      	orrs	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a010:	ea42 0103 	orr.w	r1, r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	431a      	orrs	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	431a      	orrs	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05e:	ea42 0103 	orr.w	r1, r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d113      	bne.n	800a09e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a088:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a09c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0201 	bic.w	r2, r2, #1
 800a0ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	40013000 	.word	0x40013000
 800a0f0:	40003800 	.word	0x40003800
 800a0f4:	40003c00 	.word	0x40003c00

0800a0f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	3301      	adds	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	3301      	adds	r3, #1
 800a110:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	3307      	adds	r3, #7
 800a116:	08db      	lsrs	r3, r3, #3
 800a118:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	e049      	b.n	800a1d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d106      	bne.n	800a15a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7f7 fc97 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2202      	movs	r2, #2
 800a15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3304      	adds	r3, #4
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f000 fd99 	bl	800aca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d001      	beq.n	800a1f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e054      	b.n	800a29e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0201 	orr.w	r2, r2, #1
 800a20a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a26      	ldr	r2, [pc, #152]	; (800a2ac <HAL_TIM_Base_Start_IT+0xd0>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d022      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a21e:	d01d      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a22      	ldr	r2, [pc, #136]	; (800a2b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d018      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a21      	ldr	r2, [pc, #132]	; (800a2b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d013      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a1f      	ldr	r2, [pc, #124]	; (800a2b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00e      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a1e      	ldr	r2, [pc, #120]	; (800a2bc <HAL_TIM_Base_Start_IT+0xe0>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d009      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a1c      	ldr	r2, [pc, #112]	; (800a2c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d004      	beq.n	800a25c <HAL_TIM_Base_Start_IT+0x80>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a1b      	ldr	r2, [pc, #108]	; (800a2c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d115      	bne.n	800a288 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	4b19      	ldr	r3, [pc, #100]	; (800a2c8 <HAL_TIM_Base_Start_IT+0xec>)
 800a264:	4013      	ands	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b06      	cmp	r3, #6
 800a26c:	d015      	beq.n	800a29a <HAL_TIM_Base_Start_IT+0xbe>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a274:	d011      	beq.n	800a29a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f042 0201 	orr.w	r2, r2, #1
 800a284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a286:	e008      	b.n	800a29a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f042 0201 	orr.w	r2, r2, #1
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	e000      	b.n	800a29c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a29a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	40010000 	.word	0x40010000
 800a2b0:	40000400 	.word	0x40000400
 800a2b4:	40000800 	.word	0x40000800
 800a2b8:	40000c00 	.word	0x40000c00
 800a2bc:	40010400 	.word	0x40010400
 800a2c0:	40001800 	.word	0x40001800
 800a2c4:	40014000 	.word	0x40014000
 800a2c8:	00010007 	.word	0x00010007

0800a2cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d109      	bne.n	800a2f4 <HAL_TIM_OC_Start_IT+0x28>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	bf14      	ite	ne
 800a2ec:	2301      	movne	r3, #1
 800a2ee:	2300      	moveq	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	e03c      	b.n	800a36e <HAL_TIM_OC_Start_IT+0xa2>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d109      	bne.n	800a30e <HAL_TIM_OC_Start_IT+0x42>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b01      	cmp	r3, #1
 800a304:	bf14      	ite	ne
 800a306:	2301      	movne	r3, #1
 800a308:	2300      	moveq	r3, #0
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	e02f      	b.n	800a36e <HAL_TIM_OC_Start_IT+0xa2>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b08      	cmp	r3, #8
 800a312:	d109      	bne.n	800a328 <HAL_TIM_OC_Start_IT+0x5c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	bf14      	ite	ne
 800a320:	2301      	movne	r3, #1
 800a322:	2300      	moveq	r3, #0
 800a324:	b2db      	uxtb	r3, r3
 800a326:	e022      	b.n	800a36e <HAL_TIM_OC_Start_IT+0xa2>
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b0c      	cmp	r3, #12
 800a32c:	d109      	bne.n	800a342 <HAL_TIM_OC_Start_IT+0x76>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b01      	cmp	r3, #1
 800a338:	bf14      	ite	ne
 800a33a:	2301      	movne	r3, #1
 800a33c:	2300      	moveq	r3, #0
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	e015      	b.n	800a36e <HAL_TIM_OC_Start_IT+0xa2>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b10      	cmp	r3, #16
 800a346:	d109      	bne.n	800a35c <HAL_TIM_OC_Start_IT+0x90>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b01      	cmp	r3, #1
 800a352:	bf14      	ite	ne
 800a354:	2301      	movne	r3, #1
 800a356:	2300      	moveq	r3, #0
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	e008      	b.n	800a36e <HAL_TIM_OC_Start_IT+0xa2>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e0ec      	b.n	800a550 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d104      	bne.n	800a386 <HAL_TIM_OC_Start_IT+0xba>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2202      	movs	r2, #2
 800a380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a384:	e023      	b.n	800a3ce <HAL_TIM_OC_Start_IT+0x102>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d104      	bne.n	800a396 <HAL_TIM_OC_Start_IT+0xca>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a394:	e01b      	b.n	800a3ce <HAL_TIM_OC_Start_IT+0x102>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d104      	bne.n	800a3a6 <HAL_TIM_OC_Start_IT+0xda>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3a4:	e013      	b.n	800a3ce <HAL_TIM_OC_Start_IT+0x102>
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b0c      	cmp	r3, #12
 800a3aa:	d104      	bne.n	800a3b6 <HAL_TIM_OC_Start_IT+0xea>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3b4:	e00b      	b.n	800a3ce <HAL_TIM_OC_Start_IT+0x102>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b10      	cmp	r3, #16
 800a3ba:	d104      	bne.n	800a3c6 <HAL_TIM_OC_Start_IT+0xfa>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3c4:	e003      	b.n	800a3ce <HAL_TIM_OC_Start_IT+0x102>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b0c      	cmp	r3, #12
 800a3d2:	d841      	bhi.n	800a458 <HAL_TIM_OC_Start_IT+0x18c>
 800a3d4:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <HAL_TIM_OC_Start_IT+0x110>)
 800a3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3da:	bf00      	nop
 800a3dc:	0800a411 	.word	0x0800a411
 800a3e0:	0800a459 	.word	0x0800a459
 800a3e4:	0800a459 	.word	0x0800a459
 800a3e8:	0800a459 	.word	0x0800a459
 800a3ec:	0800a423 	.word	0x0800a423
 800a3f0:	0800a459 	.word	0x0800a459
 800a3f4:	0800a459 	.word	0x0800a459
 800a3f8:	0800a459 	.word	0x0800a459
 800a3fc:	0800a435 	.word	0x0800a435
 800a400:	0800a459 	.word	0x0800a459
 800a404:	0800a459 	.word	0x0800a459
 800a408:	0800a459 	.word	0x0800a459
 800a40c:	0800a447 	.word	0x0800a447
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f042 0202 	orr.w	r2, r2, #2
 800a41e:	60da      	str	r2, [r3, #12]
      break;
 800a420:	e01d      	b.n	800a45e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68da      	ldr	r2, [r3, #12]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f042 0204 	orr.w	r2, r2, #4
 800a430:	60da      	str	r2, [r3, #12]
      break;
 800a432:	e014      	b.n	800a45e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f042 0208 	orr.w	r2, r2, #8
 800a442:	60da      	str	r2, [r3, #12]
      break;
 800a444:	e00b      	b.n	800a45e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f042 0210 	orr.w	r2, r2, #16
 800a454:	60da      	str	r2, [r3, #12]
      break;
 800a456:	e002      	b.n	800a45e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	73fb      	strb	r3, [r7, #15]
      break;
 800a45c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d174      	bne.n	800a54e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2201      	movs	r2, #1
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 f833 	bl	800b4d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a38      	ldr	r2, [pc, #224]	; (800a558 <HAL_TIM_OC_Start_IT+0x28c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d013      	beq.n	800a4a4 <HAL_TIM_OC_Start_IT+0x1d8>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a36      	ldr	r2, [pc, #216]	; (800a55c <HAL_TIM_OC_Start_IT+0x290>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00e      	beq.n	800a4a4 <HAL_TIM_OC_Start_IT+0x1d8>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a35      	ldr	r2, [pc, #212]	; (800a560 <HAL_TIM_OC_Start_IT+0x294>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d009      	beq.n	800a4a4 <HAL_TIM_OC_Start_IT+0x1d8>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a33      	ldr	r2, [pc, #204]	; (800a564 <HAL_TIM_OC_Start_IT+0x298>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d004      	beq.n	800a4a4 <HAL_TIM_OC_Start_IT+0x1d8>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a32      	ldr	r2, [pc, #200]	; (800a568 <HAL_TIM_OC_Start_IT+0x29c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d101      	bne.n	800a4a8 <HAL_TIM_OC_Start_IT+0x1dc>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e000      	b.n	800a4aa <HAL_TIM_OC_Start_IT+0x1de>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d007      	beq.n	800a4be <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a25      	ldr	r2, [pc, #148]	; (800a558 <HAL_TIM_OC_Start_IT+0x28c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d022      	beq.n	800a50e <HAL_TIM_OC_Start_IT+0x242>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d0:	d01d      	beq.n	800a50e <HAL_TIM_OC_Start_IT+0x242>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a25      	ldr	r2, [pc, #148]	; (800a56c <HAL_TIM_OC_Start_IT+0x2a0>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d018      	beq.n	800a50e <HAL_TIM_OC_Start_IT+0x242>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a23      	ldr	r2, [pc, #140]	; (800a570 <HAL_TIM_OC_Start_IT+0x2a4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d013      	beq.n	800a50e <HAL_TIM_OC_Start_IT+0x242>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a22      	ldr	r2, [pc, #136]	; (800a574 <HAL_TIM_OC_Start_IT+0x2a8>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d00e      	beq.n	800a50e <HAL_TIM_OC_Start_IT+0x242>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a19      	ldr	r2, [pc, #100]	; (800a55c <HAL_TIM_OC_Start_IT+0x290>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d009      	beq.n	800a50e <HAL_TIM_OC_Start_IT+0x242>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a1e      	ldr	r2, [pc, #120]	; (800a578 <HAL_TIM_OC_Start_IT+0x2ac>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d004      	beq.n	800a50e <HAL_TIM_OC_Start_IT+0x242>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a15      	ldr	r2, [pc, #84]	; (800a560 <HAL_TIM_OC_Start_IT+0x294>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d115      	bne.n	800a53a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	4b19      	ldr	r3, [pc, #100]	; (800a57c <HAL_TIM_OC_Start_IT+0x2b0>)
 800a516:	4013      	ands	r3, r2
 800a518:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b06      	cmp	r3, #6
 800a51e:	d015      	beq.n	800a54c <HAL_TIM_OC_Start_IT+0x280>
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a526:	d011      	beq.n	800a54c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0201 	orr.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a538:	e008      	b.n	800a54c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0201 	orr.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	e000      	b.n	800a54e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a54c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	40010000 	.word	0x40010000
 800a55c:	40010400 	.word	0x40010400
 800a560:	40014000 	.word	0x40014000
 800a564:	40014400 	.word	0x40014400
 800a568:	40014800 	.word	0x40014800
 800a56c:	40000400 	.word	0x40000400
 800a570:	40000800 	.word	0x40000800
 800a574:	40000c00 	.word	0x40000c00
 800a578:	40001800 	.word	0x40001800
 800a57c:	00010007 	.word	0x00010007

0800a580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e049      	b.n	800a626 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f841 	bl	800a62e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f000 fb70 	bl	800aca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a62e:	b480      	push	{r7}
 800a630:	b083      	sub	sp, #12
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d020      	beq.n	800a6a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01b      	beq.n	800a6a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f06f 0202 	mvn.w	r2, #2
 800a676:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f003 0303 	and.w	r3, r3, #3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 faeb 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a692:	e005      	b.n	800a6a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7f5 ffa5 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 faee 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d020      	beq.n	800a6f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f003 0304 	and.w	r3, r3, #4
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01b      	beq.n	800a6f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f06f 0204 	mvn.w	r2, #4
 800a6c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d003      	beq.n	800a6e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fac5 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a6de:	e005      	b.n	800a6ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7f5 ff7f 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fac8 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d020      	beq.n	800a73e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f003 0308 	and.w	r3, r3, #8
 800a702:	2b00      	cmp	r3, #0
 800a704:	d01b      	beq.n	800a73e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f06f 0208 	mvn.w	r2, #8
 800a70e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2204      	movs	r2, #4
 800a714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	f003 0303 	and.w	r3, r3, #3
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fa9f 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a72a:	e005      	b.n	800a738 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7f5 ff59 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 faa2 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d020      	beq.n	800a78a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f003 0310 	and.w	r3, r3, #16
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d01b      	beq.n	800a78a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f06f 0210 	mvn.w	r2, #16
 800a75a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2208      	movs	r2, #8
 800a760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d003      	beq.n	800a778 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fa79 	bl	800ac68 <HAL_TIM_IC_CaptureCallback>
 800a776:	e005      	b.n	800a784 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7f5 ff33 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fa7c 	bl	800ac7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00c      	beq.n	800a7ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d007      	beq.n	800a7ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f06f 0201 	mvn.w	r2, #1
 800a7a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7f6 fec9 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d104      	bne.n	800a7c2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00c      	beq.n	800a7dc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d007      	beq.n	800a7dc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800a7d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 ffba 	bl	800b750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00c      	beq.n	800a800 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d007      	beq.n	800a800 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 ffb2 	bl	800b764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00c      	beq.n	800a824 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d007      	beq.n	800a824 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a81c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fa36 	bl	800ac90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f003 0320 	and.w	r3, r3, #32
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00c      	beq.n	800a848 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f003 0320 	and.w	r3, r3, #32
 800a834:	2b00      	cmp	r3, #0
 800a836:	d007      	beq.n	800a848 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f06f 0220 	mvn.w	r2, #32
 800a840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 ff7a 	bl	800b73c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a848:	bf00      	nop
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a866:	2b01      	cmp	r3, #1
 800a868:	d101      	bne.n	800a86e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a86a:	2302      	movs	r3, #2
 800a86c:	e0ff      	b.n	800aa6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b14      	cmp	r3, #20
 800a87a:	f200 80f0 	bhi.w	800aa5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a87e:	a201      	add	r2, pc, #4	; (adr r2, 800a884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a8d9 	.word	0x0800a8d9
 800a888:	0800aa5f 	.word	0x0800aa5f
 800a88c:	0800aa5f 	.word	0x0800aa5f
 800a890:	0800aa5f 	.word	0x0800aa5f
 800a894:	0800a919 	.word	0x0800a919
 800a898:	0800aa5f 	.word	0x0800aa5f
 800a89c:	0800aa5f 	.word	0x0800aa5f
 800a8a0:	0800aa5f 	.word	0x0800aa5f
 800a8a4:	0800a95b 	.word	0x0800a95b
 800a8a8:	0800aa5f 	.word	0x0800aa5f
 800a8ac:	0800aa5f 	.word	0x0800aa5f
 800a8b0:	0800aa5f 	.word	0x0800aa5f
 800a8b4:	0800a99b 	.word	0x0800a99b
 800a8b8:	0800aa5f 	.word	0x0800aa5f
 800a8bc:	0800aa5f 	.word	0x0800aa5f
 800a8c0:	0800aa5f 	.word	0x0800aa5f
 800a8c4:	0800a9dd 	.word	0x0800a9dd
 800a8c8:	0800aa5f 	.word	0x0800aa5f
 800a8cc:	0800aa5f 	.word	0x0800aa5f
 800a8d0:	0800aa5f 	.word	0x0800aa5f
 800a8d4:	0800aa1d 	.word	0x0800aa1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fa86 	bl	800adf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f042 0208 	orr.w	r2, r2, #8
 800a8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699a      	ldr	r2, [r3, #24]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 0204 	bic.w	r2, r2, #4
 800a902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6999      	ldr	r1, [r3, #24]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	691a      	ldr	r2, [r3, #16]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	619a      	str	r2, [r3, #24]
      break;
 800a916:	e0a5      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68b9      	ldr	r1, [r7, #8]
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 faf6 	bl	800af10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	699a      	ldr	r2, [r3, #24]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	699a      	ldr	r2, [r3, #24]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6999      	ldr	r1, [r3, #24]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	021a      	lsls	r2, r3, #8
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	619a      	str	r2, [r3, #24]
      break;
 800a958:	e084      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fb5f 	bl	800b024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	69da      	ldr	r2, [r3, #28]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f042 0208 	orr.w	r2, r2, #8
 800a974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69da      	ldr	r2, [r3, #28]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0204 	bic.w	r2, r2, #4
 800a984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69d9      	ldr	r1, [r3, #28]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	691a      	ldr	r2, [r3, #16]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	430a      	orrs	r2, r1
 800a996:	61da      	str	r2, [r3, #28]
      break;
 800a998:	e064      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68b9      	ldr	r1, [r7, #8]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fbc7 	bl	800b134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69da      	ldr	r2, [r3, #28]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69da      	ldr	r2, [r3, #28]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	69d9      	ldr	r1, [r3, #28]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	021a      	lsls	r2, r3, #8
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	61da      	str	r2, [r3, #28]
      break;
 800a9da:	e043      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68b9      	ldr	r1, [r7, #8]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 fc10 	bl	800b208 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f042 0208 	orr.w	r2, r2, #8
 800a9f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f022 0204 	bic.w	r2, r2, #4
 800aa06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	691a      	ldr	r2, [r3, #16]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	430a      	orrs	r2, r1
 800aa18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa1a:	e023      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fc54 	bl	800b2d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	021a      	lsls	r2, r3, #8
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa5c:	e002      	b.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	75fb      	strb	r3, [r7, #23]
      break;
 800aa62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop

0800aa78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d101      	bne.n	800aa94 <HAL_TIM_ConfigClockSource+0x1c>
 800aa90:	2302      	movs	r3, #2
 800aa92:	e0dc      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x1d6>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	4b6a      	ldr	r3, [pc, #424]	; (800ac58 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a64      	ldr	r2, [pc, #400]	; (800ac5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	f000 80a9 	beq.w	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800aad0:	4a62      	ldr	r2, [pc, #392]	; (800ac5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	f200 80ae 	bhi.w	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800aad8:	4a61      	ldr	r2, [pc, #388]	; (800ac60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	f000 80a1 	beq.w	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800aae0:	4a5f      	ldr	r2, [pc, #380]	; (800ac60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	f200 80a6 	bhi.w	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800aae8:	4a5e      	ldr	r2, [pc, #376]	; (800ac64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	f000 8099 	beq.w	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800aaf0:	4a5c      	ldr	r2, [pc, #368]	; (800ac64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	f200 809e 	bhi.w	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800aaf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aafc:	f000 8091 	beq.w	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab04:	f200 8096 	bhi.w	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab0c:	f000 8089 	beq.w	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab14:	f200 808e 	bhi.w	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1c:	d03e      	beq.n	800ab9c <HAL_TIM_ConfigClockSource+0x124>
 800ab1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab22:	f200 8087 	bhi.w	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab2a:	f000 8086 	beq.w	800ac3a <HAL_TIM_ConfigClockSource+0x1c2>
 800ab2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab32:	d87f      	bhi.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab34:	2b70      	cmp	r3, #112	; 0x70
 800ab36:	d01a      	beq.n	800ab6e <HAL_TIM_ConfigClockSource+0xf6>
 800ab38:	2b70      	cmp	r3, #112	; 0x70
 800ab3a:	d87b      	bhi.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab3c:	2b60      	cmp	r3, #96	; 0x60
 800ab3e:	d050      	beq.n	800abe2 <HAL_TIM_ConfigClockSource+0x16a>
 800ab40:	2b60      	cmp	r3, #96	; 0x60
 800ab42:	d877      	bhi.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab44:	2b50      	cmp	r3, #80	; 0x50
 800ab46:	d03c      	beq.n	800abc2 <HAL_TIM_ConfigClockSource+0x14a>
 800ab48:	2b50      	cmp	r3, #80	; 0x50
 800ab4a:	d873      	bhi.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab4c:	2b40      	cmp	r3, #64	; 0x40
 800ab4e:	d058      	beq.n	800ac02 <HAL_TIM_ConfigClockSource+0x18a>
 800ab50:	2b40      	cmp	r3, #64	; 0x40
 800ab52:	d86f      	bhi.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab54:	2b30      	cmp	r3, #48	; 0x30
 800ab56:	d064      	beq.n	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab58:	2b30      	cmp	r3, #48	; 0x30
 800ab5a:	d86b      	bhi.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab5c:	2b20      	cmp	r3, #32
 800ab5e:	d060      	beq.n	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab60:	2b20      	cmp	r3, #32
 800ab62:	d867      	bhi.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d05c      	beq.n	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab68:	2b10      	cmp	r3, #16
 800ab6a:	d05a      	beq.n	800ac22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab6c:	e062      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	6899      	ldr	r1, [r3, #8]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f000 fc8b 	bl	800b498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	609a      	str	r2, [r3, #8]
      break;
 800ab9a:	e04f      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6818      	ldr	r0, [r3, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	6899      	ldr	r1, [r3, #8]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	f000 fc74 	bl	800b498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	689a      	ldr	r2, [r3, #8]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abbe:	609a      	str	r2, [r3, #8]
      break;
 800abc0:	e03c      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	6859      	ldr	r1, [r3, #4]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	461a      	mov	r2, r3
 800abd0:	f000 fbe4 	bl	800b39c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2150      	movs	r1, #80	; 0x50
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 fc3e 	bl	800b45c <TIM_ITRx_SetConfig>
      break;
 800abe0:	e02c      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	6859      	ldr	r1, [r3, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	461a      	mov	r2, r3
 800abf0:	f000 fc03 	bl	800b3fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2160      	movs	r1, #96	; 0x60
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fc2e 	bl	800b45c <TIM_ITRx_SetConfig>
      break;
 800ac00:	e01c      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	6859      	ldr	r1, [r3, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f000 fbc4 	bl	800b39c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2140      	movs	r1, #64	; 0x40
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fc1e 	bl	800b45c <TIM_ITRx_SetConfig>
      break;
 800ac20:	e00c      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f000 fc15 	bl	800b45c <TIM_ITRx_SetConfig>
      break;
 800ac32:	e003      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	73fb      	strb	r3, [r7, #15]
      break;
 800ac38:	e000      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ac3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	ffceff88 	.word	0xffceff88
 800ac5c:	00100040 	.word	0x00100040
 800ac60:	00100030 	.word	0x00100030
 800ac64:	00100020 	.word	0x00100020

0800ac68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a46      	ldr	r2, [pc, #280]	; (800add0 <TIM_Base_SetConfig+0x12c>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d013      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc2:	d00f      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a43      	ldr	r2, [pc, #268]	; (800add4 <TIM_Base_SetConfig+0x130>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d00b      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a42      	ldr	r2, [pc, #264]	; (800add8 <TIM_Base_SetConfig+0x134>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d007      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a41      	ldr	r2, [pc, #260]	; (800addc <TIM_Base_SetConfig+0x138>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_Base_SetConfig+0x40>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a40      	ldr	r2, [pc, #256]	; (800ade0 <TIM_Base_SetConfig+0x13c>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d108      	bne.n	800acf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a35      	ldr	r2, [pc, #212]	; (800add0 <TIM_Base_SetConfig+0x12c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d01f      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad04:	d01b      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a32      	ldr	r2, [pc, #200]	; (800add4 <TIM_Base_SetConfig+0x130>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d017      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a31      	ldr	r2, [pc, #196]	; (800add8 <TIM_Base_SetConfig+0x134>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a30      	ldr	r2, [pc, #192]	; (800addc <TIM_Base_SetConfig+0x138>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d00f      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a2f      	ldr	r2, [pc, #188]	; (800ade0 <TIM_Base_SetConfig+0x13c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00b      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a2e      	ldr	r2, [pc, #184]	; (800ade4 <TIM_Base_SetConfig+0x140>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d007      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a2d      	ldr	r2, [pc, #180]	; (800ade8 <TIM_Base_SetConfig+0x144>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d003      	beq.n	800ad3e <TIM_Base_SetConfig+0x9a>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a2c      	ldr	r2, [pc, #176]	; (800adec <TIM_Base_SetConfig+0x148>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d108      	bne.n	800ad50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	689a      	ldr	r2, [r3, #8]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a16      	ldr	r2, [pc, #88]	; (800add0 <TIM_Base_SetConfig+0x12c>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d00f      	beq.n	800ad9c <TIM_Base_SetConfig+0xf8>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a18      	ldr	r2, [pc, #96]	; (800ade0 <TIM_Base_SetConfig+0x13c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d00b      	beq.n	800ad9c <TIM_Base_SetConfig+0xf8>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a17      	ldr	r2, [pc, #92]	; (800ade4 <TIM_Base_SetConfig+0x140>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d007      	beq.n	800ad9c <TIM_Base_SetConfig+0xf8>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a16      	ldr	r2, [pc, #88]	; (800ade8 <TIM_Base_SetConfig+0x144>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d003      	beq.n	800ad9c <TIM_Base_SetConfig+0xf8>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a15      	ldr	r2, [pc, #84]	; (800adec <TIM_Base_SetConfig+0x148>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d103      	bne.n	800ada4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	691a      	ldr	r2, [r3, #16]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d105      	bne.n	800adc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	f023 0201 	bic.w	r2, r3, #1
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	611a      	str	r2, [r3, #16]
  }
}
 800adc2:	bf00      	nop
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	40010000 	.word	0x40010000
 800add4:	40000400 	.word	0x40000400
 800add8:	40000800 	.word	0x40000800
 800addc:	40000c00 	.word	0x40000c00
 800ade0:	40010400 	.word	0x40010400
 800ade4:	40014000 	.word	0x40014000
 800ade8:	40014400 	.word	0x40014400
 800adec:	40014800 	.word	0x40014800

0800adf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	f023 0201 	bic.w	r2, r3, #1
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	4b37      	ldr	r3, [pc, #220]	; (800aef8 <TIM_OC1_SetConfig+0x108>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f023 0303 	bic.w	r3, r3, #3
 800ae26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f023 0302 	bic.w	r3, r3, #2
 800ae38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a2d      	ldr	r2, [pc, #180]	; (800aefc <TIM_OC1_SetConfig+0x10c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00f      	beq.n	800ae6c <TIM_OC1_SetConfig+0x7c>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a2c      	ldr	r2, [pc, #176]	; (800af00 <TIM_OC1_SetConfig+0x110>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d00b      	beq.n	800ae6c <TIM_OC1_SetConfig+0x7c>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a2b      	ldr	r2, [pc, #172]	; (800af04 <TIM_OC1_SetConfig+0x114>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d007      	beq.n	800ae6c <TIM_OC1_SetConfig+0x7c>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a2a      	ldr	r2, [pc, #168]	; (800af08 <TIM_OC1_SetConfig+0x118>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d003      	beq.n	800ae6c <TIM_OC1_SetConfig+0x7c>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a29      	ldr	r2, [pc, #164]	; (800af0c <TIM_OC1_SetConfig+0x11c>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d10c      	bne.n	800ae86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f023 0308 	bic.w	r3, r3, #8
 800ae72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f023 0304 	bic.w	r3, r3, #4
 800ae84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a1c      	ldr	r2, [pc, #112]	; (800aefc <TIM_OC1_SetConfig+0x10c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d00f      	beq.n	800aeae <TIM_OC1_SetConfig+0xbe>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a1b      	ldr	r2, [pc, #108]	; (800af00 <TIM_OC1_SetConfig+0x110>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d00b      	beq.n	800aeae <TIM_OC1_SetConfig+0xbe>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a1a      	ldr	r2, [pc, #104]	; (800af04 <TIM_OC1_SetConfig+0x114>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d007      	beq.n	800aeae <TIM_OC1_SetConfig+0xbe>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a19      	ldr	r2, [pc, #100]	; (800af08 <TIM_OC1_SetConfig+0x118>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d003      	beq.n	800aeae <TIM_OC1_SetConfig+0xbe>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a18      	ldr	r2, [pc, #96]	; (800af0c <TIM_OC1_SetConfig+0x11c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d111      	bne.n	800aed2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	4313      	orrs	r3, r2
 800aed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	621a      	str	r2, [r3, #32]
}
 800aeec:	bf00      	nop
 800aeee:	371c      	adds	r7, #28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	fffeff8f 	.word	0xfffeff8f
 800aefc:	40010000 	.word	0x40010000
 800af00:	40010400 	.word	0x40010400
 800af04:	40014000 	.word	0x40014000
 800af08:	40014400 	.word	0x40014400
 800af0c:	40014800 	.word	0x40014800

0800af10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1b      	ldr	r3, [r3, #32]
 800af1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	f023 0210 	bic.w	r2, r3, #16
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4b34      	ldr	r3, [pc, #208]	; (800b00c <TIM_OC2_SetConfig+0xfc>)
 800af3c:	4013      	ands	r3, r2
 800af3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	021b      	lsls	r3, r3, #8
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4313      	orrs	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	f023 0320 	bic.w	r3, r3, #32
 800af5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	011b      	lsls	r3, r3, #4
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	4313      	orrs	r3, r2
 800af66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a29      	ldr	r2, [pc, #164]	; (800b010 <TIM_OC2_SetConfig+0x100>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d003      	beq.n	800af78 <TIM_OC2_SetConfig+0x68>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a28      	ldr	r2, [pc, #160]	; (800b014 <TIM_OC2_SetConfig+0x104>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d10d      	bne.n	800af94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	4313      	orrs	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a1e      	ldr	r2, [pc, #120]	; (800b010 <TIM_OC2_SetConfig+0x100>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00f      	beq.n	800afbc <TIM_OC2_SetConfig+0xac>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a1d      	ldr	r2, [pc, #116]	; (800b014 <TIM_OC2_SetConfig+0x104>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d00b      	beq.n	800afbc <TIM_OC2_SetConfig+0xac>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a1c      	ldr	r2, [pc, #112]	; (800b018 <TIM_OC2_SetConfig+0x108>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d007      	beq.n	800afbc <TIM_OC2_SetConfig+0xac>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a1b      	ldr	r2, [pc, #108]	; (800b01c <TIM_OC2_SetConfig+0x10c>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d003      	beq.n	800afbc <TIM_OC2_SetConfig+0xac>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a1a      	ldr	r2, [pc, #104]	; (800b020 <TIM_OC2_SetConfig+0x110>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d113      	bne.n	800afe4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	695b      	ldr	r3, [r3, #20]
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	693a      	ldr	r2, [r7, #16]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	621a      	str	r2, [r3, #32]
}
 800affe:	bf00      	nop
 800b000:	371c      	adds	r7, #28
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	feff8fff 	.word	0xfeff8fff
 800b010:	40010000 	.word	0x40010000
 800b014:	40010400 	.word	0x40010400
 800b018:	40014000 	.word	0x40014000
 800b01c:	40014400 	.word	0x40014400
 800b020:	40014800 	.word	0x40014800

0800b024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b024:	b480      	push	{r7}
 800b026:	b087      	sub	sp, #28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4b33      	ldr	r3, [pc, #204]	; (800b11c <TIM_OC3_SetConfig+0xf8>)
 800b050:	4013      	ands	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	4313      	orrs	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b06c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	021b      	lsls	r3, r3, #8
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	4313      	orrs	r3, r2
 800b078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a28      	ldr	r2, [pc, #160]	; (800b120 <TIM_OC3_SetConfig+0xfc>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d003      	beq.n	800b08a <TIM_OC3_SetConfig+0x66>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a27      	ldr	r2, [pc, #156]	; (800b124 <TIM_OC3_SetConfig+0x100>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d10d      	bne.n	800b0a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	021b      	lsls	r3, r3, #8
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a1d      	ldr	r2, [pc, #116]	; (800b120 <TIM_OC3_SetConfig+0xfc>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d00f      	beq.n	800b0ce <TIM_OC3_SetConfig+0xaa>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a1c      	ldr	r2, [pc, #112]	; (800b124 <TIM_OC3_SetConfig+0x100>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d00b      	beq.n	800b0ce <TIM_OC3_SetConfig+0xaa>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a1b      	ldr	r2, [pc, #108]	; (800b128 <TIM_OC3_SetConfig+0x104>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d007      	beq.n	800b0ce <TIM_OC3_SetConfig+0xaa>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a1a      	ldr	r2, [pc, #104]	; (800b12c <TIM_OC3_SetConfig+0x108>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d003      	beq.n	800b0ce <TIM_OC3_SetConfig+0xaa>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a19      	ldr	r2, [pc, #100]	; (800b130 <TIM_OC3_SetConfig+0x10c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d113      	bne.n	800b0f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	621a      	str	r2, [r3, #32]
}
 800b110:	bf00      	nop
 800b112:	371c      	adds	r7, #28
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	fffeff8f 	.word	0xfffeff8f
 800b120:	40010000 	.word	0x40010000
 800b124:	40010400 	.word	0x40010400
 800b128:	40014000 	.word	0x40014000
 800b12c:	40014400 	.word	0x40014400
 800b130:	40014800 	.word	0x40014800

0800b134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a1b      	ldr	r3, [r3, #32]
 800b148:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	4b24      	ldr	r3, [pc, #144]	; (800b1f0 <TIM_OC4_SetConfig+0xbc>)
 800b160:	4013      	ands	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	021b      	lsls	r3, r3, #8
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b17e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	031b      	lsls	r3, r3, #12
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	4313      	orrs	r3, r2
 800b18a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a19      	ldr	r2, [pc, #100]	; (800b1f4 <TIM_OC4_SetConfig+0xc0>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d00f      	beq.n	800b1b4 <TIM_OC4_SetConfig+0x80>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a18      	ldr	r2, [pc, #96]	; (800b1f8 <TIM_OC4_SetConfig+0xc4>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d00b      	beq.n	800b1b4 <TIM_OC4_SetConfig+0x80>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a17      	ldr	r2, [pc, #92]	; (800b1fc <TIM_OC4_SetConfig+0xc8>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d007      	beq.n	800b1b4 <TIM_OC4_SetConfig+0x80>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a16      	ldr	r2, [pc, #88]	; (800b200 <TIM_OC4_SetConfig+0xcc>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d003      	beq.n	800b1b4 <TIM_OC4_SetConfig+0x80>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a15      	ldr	r2, [pc, #84]	; (800b204 <TIM_OC4_SetConfig+0xd0>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d109      	bne.n	800b1c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	019b      	lsls	r3, r3, #6
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	621a      	str	r2, [r3, #32]
}
 800b1e2:	bf00      	nop
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	feff8fff 	.word	0xfeff8fff
 800b1f4:	40010000 	.word	0x40010000
 800b1f8:	40010400 	.word	0x40010400
 800b1fc:	40014000 	.word	0x40014000
 800b200:	40014400 	.word	0x40014400
 800b204:	40014800 	.word	0x40014800

0800b208 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a1b      	ldr	r3, [r3, #32]
 800b21c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	4b21      	ldr	r3, [pc, #132]	; (800b2b8 <TIM_OC5_SetConfig+0xb0>)
 800b234:	4013      	ands	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b248:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	041b      	lsls	r3, r3, #16
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a18      	ldr	r2, [pc, #96]	; (800b2bc <TIM_OC5_SetConfig+0xb4>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d00f      	beq.n	800b27e <TIM_OC5_SetConfig+0x76>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a17      	ldr	r2, [pc, #92]	; (800b2c0 <TIM_OC5_SetConfig+0xb8>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d00b      	beq.n	800b27e <TIM_OC5_SetConfig+0x76>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a16      	ldr	r2, [pc, #88]	; (800b2c4 <TIM_OC5_SetConfig+0xbc>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d007      	beq.n	800b27e <TIM_OC5_SetConfig+0x76>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a15      	ldr	r2, [pc, #84]	; (800b2c8 <TIM_OC5_SetConfig+0xc0>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d003      	beq.n	800b27e <TIM_OC5_SetConfig+0x76>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a14      	ldr	r2, [pc, #80]	; (800b2cc <TIM_OC5_SetConfig+0xc4>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d109      	bne.n	800b292 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b284:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	021b      	lsls	r3, r3, #8
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	4313      	orrs	r3, r2
 800b290:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	693a      	ldr	r2, [r7, #16]
 800b2aa:	621a      	str	r2, [r3, #32]
}
 800b2ac:	bf00      	nop
 800b2ae:	371c      	adds	r7, #28
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	fffeff8f 	.word	0xfffeff8f
 800b2bc:	40010000 	.word	0x40010000
 800b2c0:	40010400 	.word	0x40010400
 800b2c4:	40014000 	.word	0x40014000
 800b2c8:	40014400 	.word	0x40014400
 800b2cc:	40014800 	.word	0x40014800

0800b2d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4b22      	ldr	r3, [pc, #136]	; (800b384 <TIM_OC6_SetConfig+0xb4>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	051b      	lsls	r3, r3, #20
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a19      	ldr	r2, [pc, #100]	; (800b388 <TIM_OC6_SetConfig+0xb8>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d00f      	beq.n	800b348 <TIM_OC6_SetConfig+0x78>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a18      	ldr	r2, [pc, #96]	; (800b38c <TIM_OC6_SetConfig+0xbc>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d00b      	beq.n	800b348 <TIM_OC6_SetConfig+0x78>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a17      	ldr	r2, [pc, #92]	; (800b390 <TIM_OC6_SetConfig+0xc0>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d007      	beq.n	800b348 <TIM_OC6_SetConfig+0x78>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a16      	ldr	r2, [pc, #88]	; (800b394 <TIM_OC6_SetConfig+0xc4>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d003      	beq.n	800b348 <TIM_OC6_SetConfig+0x78>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a15      	ldr	r2, [pc, #84]	; (800b398 <TIM_OC6_SetConfig+0xc8>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d109      	bne.n	800b35c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b34e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	029b      	lsls	r3, r3, #10
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	697a      	ldr	r2, [r7, #20]
 800b360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	621a      	str	r2, [r3, #32]
}
 800b376:	bf00      	nop
 800b378:	371c      	adds	r7, #28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	feff8fff 	.word	0xfeff8fff
 800b388:	40010000 	.word	0x40010000
 800b38c:	40010400 	.word	0x40010400
 800b390:	40014000 	.word	0x40014000
 800b394:	40014400 	.word	0x40014400
 800b398:	40014800 	.word	0x40014800

0800b39c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b087      	sub	sp, #28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	f023 0201 	bic.w	r2, r3, #1
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	011b      	lsls	r3, r3, #4
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f023 030a 	bic.w	r3, r3, #10
 800b3d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	621a      	str	r2, [r3, #32]
}
 800b3ee:	bf00      	nop
 800b3f0:	371c      	adds	r7, #28
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b087      	sub	sp, #28
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a1b      	ldr	r3, [r3, #32]
 800b40a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6a1b      	ldr	r3, [r3, #32]
 800b410:	f023 0210 	bic.w	r2, r3, #16
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	031b      	lsls	r3, r3, #12
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b436:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	4313      	orrs	r3, r2
 800b440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	621a      	str	r2, [r3, #32]
}
 800b44e:	bf00      	nop
 800b450:	371c      	adds	r7, #28
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
	...

0800b45c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4b09      	ldr	r3, [pc, #36]	; (800b494 <TIM_ITRx_SetConfig+0x38>)
 800b470:	4013      	ands	r3, r2
 800b472:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b474:	683a      	ldr	r2, [r7, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4313      	orrs	r3, r2
 800b47a:	f043 0307 	orr.w	r3, r3, #7
 800b47e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	609a      	str	r2, [r3, #8]
}
 800b486:	bf00      	nop
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	ffcfff8f 	.word	0xffcfff8f

0800b498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	021a      	lsls	r2, r3, #8
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	609a      	str	r2, [r3, #8]
}
 800b4cc:	bf00      	nop
 800b4ce:	371c      	adds	r7, #28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f003 031f 	and.w	r3, r3, #31
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6a1a      	ldr	r2, [r3, #32]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	43db      	mvns	r3, r3
 800b4fa:	401a      	ands	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6a1a      	ldr	r2, [r3, #32]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f003 031f 	and.w	r3, r3, #31
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	fa01 f303 	lsl.w	r3, r1, r3
 800b510:	431a      	orrs	r2, r3
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	621a      	str	r2, [r3, #32]
}
 800b516:	bf00      	nop
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
	...

0800b524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b534:	2b01      	cmp	r3, #1
 800b536:	d101      	bne.n	800b53c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b538:	2302      	movs	r3, #2
 800b53a:	e06d      	b.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a30      	ldr	r2, [pc, #192]	; (800b624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d004      	beq.n	800b570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a2f      	ldr	r2, [pc, #188]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d108      	bne.n	800b582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4313      	orrs	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a20      	ldr	r2, [pc, #128]	; (800b624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d022      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ae:	d01d      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a1d      	ldr	r2, [pc, #116]	; (800b62c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d018      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a1c      	ldr	r2, [pc, #112]	; (800b630 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d013      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a1a      	ldr	r2, [pc, #104]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00e      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a15      	ldr	r2, [pc, #84]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d009      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a16      	ldr	r2, [pc, #88]	; (800b638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d004      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a15      	ldr	r2, [pc, #84]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d10c      	bne.n	800b606 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	40010000 	.word	0x40010000
 800b628:	40010400 	.word	0x40010400
 800b62c:	40000400 	.word	0x40000400
 800b630:	40000800 	.word	0x40000800
 800b634:	40000c00 	.word	0x40000c00
 800b638:	40001800 	.word	0x40001800
 800b63c:	40014000 	.word	0x40014000

0800b640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b654:	2b01      	cmp	r3, #1
 800b656:	d101      	bne.n	800b65c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b658:	2302      	movs	r3, #2
 800b65a:	e065      	b.n	800b728 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4313      	orrs	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	041b      	lsls	r3, r3, #16
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a16      	ldr	r2, [pc, #88]	; (800b734 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d004      	beq.n	800b6ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a14      	ldr	r2, [pc, #80]	; (800b738 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d115      	bne.n	800b716 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	051b      	lsls	r3, r3, #20
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	4313      	orrs	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	40010000 	.word	0x40010000
 800b738:	40010400 	.word	0x40010400

0800b73c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e042      	b.n	800b810 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b790:	2b00      	cmp	r3, #0
 800b792:	d106      	bne.n	800b7a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7f6 fa53 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2224      	movs	r2, #36	; 0x24
 800b7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f022 0201 	bic.w	r2, r2, #1
 800b7b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f001 f9b6 	bl	800cb34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fc4b 	bl	800c064 <UART_SetConfig>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d101      	bne.n	800b7d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e01b      	b.n	800b810 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	689a      	ldr	r2, [r3, #8]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0201 	orr.w	r2, r2, #1
 800b806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f001 fa35 	bl	800cc78 <UART_CheckIdleState>
 800b80e:	4603      	mov	r3, r0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08a      	sub	sp, #40	; 0x28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b82c:	2b20      	cmp	r3, #32
 800b82e:	d137      	bne.n	800b8a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <HAL_UART_Receive_IT+0x24>
 800b836:	88fb      	ldrh	r3, [r7, #6]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e030      	b.n	800b8a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a18      	ldr	r2, [pc, #96]	; (800b8ac <HAL_UART_Receive_IT+0x94>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d01f      	beq.n	800b890 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d018      	beq.n	800b890 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	e853 3f00 	ldrex	r3, [r3]
 800b86a:	613b      	str	r3, [r7, #16]
   return(result);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	623b      	str	r3, [r7, #32]
 800b87e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b880:	69f9      	ldr	r1, [r7, #28]
 800b882:	6a3a      	ldr	r2, [r7, #32]
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	61bb      	str	r3, [r7, #24]
   return(result);
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e6      	bne.n	800b85e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b890:	88fb      	ldrh	r3, [r7, #6]
 800b892:	461a      	mov	r2, r3
 800b894:	68b9      	ldr	r1, [r7, #8]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f001 fb06 	bl	800cea8 <UART_Start_Receive_IT>
 800b89c:	4603      	mov	r3, r0
 800b89e:	e000      	b.n	800b8a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b8a0:	2302      	movs	r3, #2
  }
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3728      	adds	r7, #40	; 0x28
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	58000c00 	.word	0x58000c00

0800b8b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b0ba      	sub	sp, #232	; 0xe8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b8d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b8da:	f640 030f 	movw	r3, #2063	; 0x80f
 800b8de:	4013      	ands	r3, r2
 800b8e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b8e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d11b      	bne.n	800b924 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8f0:	f003 0320 	and.w	r3, r3, #32
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d015      	beq.n	800b924 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8fc:	f003 0320 	and.w	r3, r3, #32
 800b900:	2b00      	cmp	r3, #0
 800b902:	d105      	bne.n	800b910 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d009      	beq.n	800b924 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 8377 	beq.w	800c008 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	4798      	blx	r3
      }
      return;
 800b922:	e371      	b.n	800c008 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 8123 	beq.w	800bb74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b92e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b932:	4b8d      	ldr	r3, [pc, #564]	; (800bb68 <HAL_UART_IRQHandler+0x2b8>)
 800b934:	4013      	ands	r3, r2
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b93a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b93e:	4b8b      	ldr	r3, [pc, #556]	; (800bb6c <HAL_UART_IRQHandler+0x2bc>)
 800b940:	4013      	ands	r3, r2
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 8116 	beq.w	800bb74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b94c:	f003 0301 	and.w	r3, r3, #1
 800b950:	2b00      	cmp	r3, #0
 800b952:	d011      	beq.n	800b978 <HAL_UART_IRQHandler+0xc8>
 800b954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00b      	beq.n	800b978 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2201      	movs	r2, #1
 800b966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96e:	f043 0201 	orr.w	r2, r3, #1
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d011      	beq.n	800b9a8 <HAL_UART_IRQHandler+0xf8>
 800b984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00b      	beq.n	800b9a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2202      	movs	r2, #2
 800b996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b99e:	f043 0204 	orr.w	r2, r3, #4
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d011      	beq.n	800b9d8 <HAL_UART_IRQHandler+0x128>
 800b9b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00b      	beq.n	800b9d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2204      	movs	r2, #4
 800b9c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ce:	f043 0202 	orr.w	r2, r3, #2
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9dc:	f003 0308 	and.w	r3, r3, #8
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d017      	beq.n	800ba14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e8:	f003 0320 	and.w	r3, r3, #32
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d105      	bne.n	800b9fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b9f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b9f4:	4b5c      	ldr	r3, [pc, #368]	; (800bb68 <HAL_UART_IRQHandler+0x2b8>)
 800b9f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00b      	beq.n	800ba14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2208      	movs	r2, #8
 800ba02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba0a:	f043 0208 	orr.w	r2, r3, #8
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d012      	beq.n	800ba46 <HAL_UART_IRQHandler+0x196>
 800ba20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00c      	beq.n	800ba46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba3c:	f043 0220 	orr.w	r2, r3, #32
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 82dd 	beq.w	800c00c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba56:	f003 0320 	and.w	r3, r3, #32
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d013      	beq.n	800ba86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba62:	f003 0320 	and.w	r3, r3, #32
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d105      	bne.n	800ba76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d007      	beq.n	800ba86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9a:	2b40      	cmp	r3, #64	; 0x40
 800ba9c:	d005      	beq.n	800baaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800baa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d054      	beq.n	800bb54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 fb1e 	bl	800d0ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baba:	2b40      	cmp	r3, #64	; 0x40
 800babc:	d146      	bne.n	800bb4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3308      	adds	r3, #8
 800bac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bacc:	e853 3f00 	ldrex	r3, [r3]
 800bad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800badc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3308      	adds	r3, #8
 800bae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800baea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800baee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800baf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1d9      	bne.n	800babe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d017      	beq.n	800bb44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb1a:	4a15      	ldr	r2, [pc, #84]	; (800bb70 <HAL_UART_IRQHandler+0x2c0>)
 800bb1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7f8 fdb9 	bl	800469c <HAL_DMA_Abort_IT>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d019      	beq.n	800bb64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bb3e:	4610      	mov	r0, r2
 800bb40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb42:	e00f      	b.n	800bb64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fa77 	bl	800c038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb4a:	e00b      	b.n	800bb64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fa73 	bl	800c038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb52:	e007      	b.n	800bb64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fa6f 	bl	800c038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bb62:	e253      	b.n	800c00c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb64:	bf00      	nop
    return;
 800bb66:	e251      	b.n	800c00c <HAL_UART_IRQHandler+0x75c>
 800bb68:	10000001 	.word	0x10000001
 800bb6c:	04000120 	.word	0x04000120
 800bb70:	0800d1b9 	.word	0x0800d1b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	f040 81e7 	bne.w	800bf4c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb82:	f003 0310 	and.w	r3, r3, #16
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 81e0 	beq.w	800bf4c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb90:	f003 0310 	and.w	r3, r3, #16
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 81d9 	beq.w	800bf4c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2210      	movs	r2, #16
 800bba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbac:	2b40      	cmp	r3, #64	; 0x40
 800bbae:	f040 8151 	bne.w	800be54 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a96      	ldr	r2, [pc, #600]	; (800be14 <HAL_UART_IRQHandler+0x564>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d068      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a93      	ldr	r2, [pc, #588]	; (800be18 <HAL_UART_IRQHandler+0x568>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d061      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a91      	ldr	r2, [pc, #580]	; (800be1c <HAL_UART_IRQHandler+0x56c>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d05a      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a8e      	ldr	r2, [pc, #568]	; (800be20 <HAL_UART_IRQHandler+0x570>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d053      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a8c      	ldr	r2, [pc, #560]	; (800be24 <HAL_UART_IRQHandler+0x574>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d04c      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a89      	ldr	r2, [pc, #548]	; (800be28 <HAL_UART_IRQHandler+0x578>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d045      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a87      	ldr	r2, [pc, #540]	; (800be2c <HAL_UART_IRQHandler+0x57c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d03e      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a84      	ldr	r2, [pc, #528]	; (800be30 <HAL_UART_IRQHandler+0x580>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d037      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a82      	ldr	r2, [pc, #520]	; (800be34 <HAL_UART_IRQHandler+0x584>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d030      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a7f      	ldr	r2, [pc, #508]	; (800be38 <HAL_UART_IRQHandler+0x588>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d029      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a7d      	ldr	r2, [pc, #500]	; (800be3c <HAL_UART_IRQHandler+0x58c>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d022      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a7a      	ldr	r2, [pc, #488]	; (800be40 <HAL_UART_IRQHandler+0x590>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d01b      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a78      	ldr	r2, [pc, #480]	; (800be44 <HAL_UART_IRQHandler+0x594>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d014      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a75      	ldr	r2, [pc, #468]	; (800be48 <HAL_UART_IRQHandler+0x598>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d00d      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a73      	ldr	r2, [pc, #460]	; (800be4c <HAL_UART_IRQHandler+0x59c>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d006      	beq.n	800bc92 <HAL_UART_IRQHandler+0x3e2>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a70      	ldr	r2, [pc, #448]	; (800be50 <HAL_UART_IRQHandler+0x5a0>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d106      	bne.n	800bca0 <HAL_UART_IRQHandler+0x3f0>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	e005      	b.n	800bcac <HAL_UART_IRQHandler+0x3fc>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 81ab 	beq.w	800c010 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bcc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	f080 81a3 	bcs.w	800c010 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce0:	f000 8087 	beq.w	800bdf2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcf0:	e853 3f00 	ldrex	r3, [r3]
 800bcf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bcf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd1e:	e841 2300 	strex	r3, r2, [r1]
 800bd22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1da      	bne.n	800bce4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3308      	adds	r3, #8
 800bd34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd38:	e853 3f00 	ldrex	r3, [r3]
 800bd3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd40:	f023 0301 	bic.w	r3, r3, #1
 800bd44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd5e:	e841 2300 	strex	r3, r2, [r1]
 800bd62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1e1      	bne.n	800bd2e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	3308      	adds	r3, #8
 800bd70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd74:	e853 3f00 	ldrex	r3, [r3]
 800bd78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3308      	adds	r3, #8
 800bd8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e3      	bne.n	800bd6a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2220      	movs	r2, #32
 800bda6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb8:	e853 3f00 	ldrex	r3, [r3]
 800bdbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bdbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc0:	f023 0310 	bic.w	r3, r3, #16
 800bdc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdda:	e841 2300 	strex	r3, r2, [r1]
 800bdde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bde0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1e4      	bne.n	800bdb0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7f8 f937 	bl	8004060 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be04:	b29b      	uxth	r3, r3
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	b29b      	uxth	r3, r3
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f91d 	bl	800c04c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be12:	e0fd      	b.n	800c010 <HAL_UART_IRQHandler+0x760>
 800be14:	40020010 	.word	0x40020010
 800be18:	40020028 	.word	0x40020028
 800be1c:	40020040 	.word	0x40020040
 800be20:	40020058 	.word	0x40020058
 800be24:	40020070 	.word	0x40020070
 800be28:	40020088 	.word	0x40020088
 800be2c:	400200a0 	.word	0x400200a0
 800be30:	400200b8 	.word	0x400200b8
 800be34:	40020410 	.word	0x40020410
 800be38:	40020428 	.word	0x40020428
 800be3c:	40020440 	.word	0x40020440
 800be40:	40020458 	.word	0x40020458
 800be44:	40020470 	.word	0x40020470
 800be48:	40020488 	.word	0x40020488
 800be4c:	400204a0 	.word	0x400204a0
 800be50:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be60:	b29b      	uxth	r3, r3
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be6e:	b29b      	uxth	r3, r3
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 80cf 	beq.w	800c014 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800be76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 80ca 	beq.w	800c014 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	461a      	mov	r2, r3
 800be9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bea2:	647b      	str	r3, [r7, #68]	; 0x44
 800bea4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800beb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e4      	bne.n	800be80 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3308      	adds	r3, #8
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	e853 3f00 	ldrex	r3, [r3]
 800bec4:	623b      	str	r3, [r7, #32]
   return(result);
 800bec6:	6a3a      	ldr	r2, [r7, #32]
 800bec8:	4b55      	ldr	r3, [pc, #340]	; (800c020 <HAL_UART_IRQHandler+0x770>)
 800beca:	4013      	ands	r3, r2
 800becc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3308      	adds	r3, #8
 800bed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800beda:	633a      	str	r2, [r7, #48]	; 0x30
 800bedc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bee2:	e841 2300 	strex	r3, r2, [r1]
 800bee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1e3      	bne.n	800beb6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2220      	movs	r2, #32
 800bef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	e853 3f00 	ldrex	r3, [r3]
 800bf0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f023 0310 	bic.w	r3, r3, #16
 800bf16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf24:	61fb      	str	r3, [r7, #28]
 800bf26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	69b9      	ldr	r1, [r7, #24]
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	617b      	str	r3, [r7, #20]
   return(result);
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e4      	bne.n	800bf02 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2202      	movs	r2, #2
 800bf3c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f881 	bl	800c04c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf4a:	e063      	b.n	800c014 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bf4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00e      	beq.n	800bf76 <HAL_UART_IRQHandler+0x6c6>
 800bf58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d008      	beq.n	800bf76 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bf6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f001 fe80 	bl	800dc74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf74:	e051      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bf76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d014      	beq.n	800bfac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d105      	bne.n	800bf9a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d008      	beq.n	800bfac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d03a      	beq.n	800c018 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	4798      	blx	r3
    }
    return;
 800bfaa:	e035      	b.n	800c018 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bfac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d009      	beq.n	800bfcc <HAL_UART_IRQHandler+0x71c>
 800bfb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d003      	beq.n	800bfcc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f001 f90d 	bl	800d1e4 <UART_EndTransmit_IT>
    return;
 800bfca:	e026      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bfcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d009      	beq.n	800bfec <HAL_UART_IRQHandler+0x73c>
 800bfd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d003      	beq.n	800bfec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f001 fe59 	bl	800dc9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfea:	e016      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d010      	beq.n	800c01a <HAL_UART_IRQHandler+0x76a>
 800bff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da0c      	bge.n	800c01a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f001 fe41 	bl	800dc88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c006:	e008      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
      return;
 800c008:	bf00      	nop
 800c00a:	e006      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
    return;
 800c00c:	bf00      	nop
 800c00e:	e004      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
      return;
 800c010:	bf00      	nop
 800c012:	e002      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
      return;
 800c014:	bf00      	nop
 800c016:	e000      	b.n	800c01a <HAL_UART_IRQHandler+0x76a>
    return;
 800c018:	bf00      	nop
  }
}
 800c01a:	37e8      	adds	r7, #232	; 0xe8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	effffffe 	.word	0xeffffffe

0800c024 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c068:	b092      	sub	sp, #72	; 0x48
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	431a      	orrs	r2, r3
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	431a      	orrs	r2, r3
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	4313      	orrs	r3, r2
 800c08a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4bbe      	ldr	r3, [pc, #760]	; (800c38c <UART_SetConfig+0x328>)
 800c094:	4013      	ands	r3, r2
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	6812      	ldr	r2, [r2, #0]
 800c09a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c09c:	430b      	orrs	r3, r1
 800c09e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4ab3      	ldr	r2, [pc, #716]	; (800c390 <UART_SetConfig+0x32c>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d004      	beq.n	800c0d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	6a1b      	ldr	r3, [r3, #32]
 800c0ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689a      	ldr	r2, [r3, #8]
 800c0d6:	4baf      	ldr	r3, [pc, #700]	; (800c394 <UART_SetConfig+0x330>)
 800c0d8:	4013      	ands	r3, r2
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	6812      	ldr	r2, [r2, #0]
 800c0de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0e0:	430b      	orrs	r3, r1
 800c0e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ea:	f023 010f 	bic.w	r1, r3, #15
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4aa6      	ldr	r2, [pc, #664]	; (800c398 <UART_SetConfig+0x334>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d177      	bne.n	800c1f4 <UART_SetConfig+0x190>
 800c104:	4ba5      	ldr	r3, [pc, #660]	; (800c39c <UART_SetConfig+0x338>)
 800c106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c10c:	2b28      	cmp	r3, #40	; 0x28
 800c10e:	d86d      	bhi.n	800c1ec <UART_SetConfig+0x188>
 800c110:	a201      	add	r2, pc, #4	; (adr r2, 800c118 <UART_SetConfig+0xb4>)
 800c112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c116:	bf00      	nop
 800c118:	0800c1bd 	.word	0x0800c1bd
 800c11c:	0800c1ed 	.word	0x0800c1ed
 800c120:	0800c1ed 	.word	0x0800c1ed
 800c124:	0800c1ed 	.word	0x0800c1ed
 800c128:	0800c1ed 	.word	0x0800c1ed
 800c12c:	0800c1ed 	.word	0x0800c1ed
 800c130:	0800c1ed 	.word	0x0800c1ed
 800c134:	0800c1ed 	.word	0x0800c1ed
 800c138:	0800c1c5 	.word	0x0800c1c5
 800c13c:	0800c1ed 	.word	0x0800c1ed
 800c140:	0800c1ed 	.word	0x0800c1ed
 800c144:	0800c1ed 	.word	0x0800c1ed
 800c148:	0800c1ed 	.word	0x0800c1ed
 800c14c:	0800c1ed 	.word	0x0800c1ed
 800c150:	0800c1ed 	.word	0x0800c1ed
 800c154:	0800c1ed 	.word	0x0800c1ed
 800c158:	0800c1cd 	.word	0x0800c1cd
 800c15c:	0800c1ed 	.word	0x0800c1ed
 800c160:	0800c1ed 	.word	0x0800c1ed
 800c164:	0800c1ed 	.word	0x0800c1ed
 800c168:	0800c1ed 	.word	0x0800c1ed
 800c16c:	0800c1ed 	.word	0x0800c1ed
 800c170:	0800c1ed 	.word	0x0800c1ed
 800c174:	0800c1ed 	.word	0x0800c1ed
 800c178:	0800c1d5 	.word	0x0800c1d5
 800c17c:	0800c1ed 	.word	0x0800c1ed
 800c180:	0800c1ed 	.word	0x0800c1ed
 800c184:	0800c1ed 	.word	0x0800c1ed
 800c188:	0800c1ed 	.word	0x0800c1ed
 800c18c:	0800c1ed 	.word	0x0800c1ed
 800c190:	0800c1ed 	.word	0x0800c1ed
 800c194:	0800c1ed 	.word	0x0800c1ed
 800c198:	0800c1dd 	.word	0x0800c1dd
 800c19c:	0800c1ed 	.word	0x0800c1ed
 800c1a0:	0800c1ed 	.word	0x0800c1ed
 800c1a4:	0800c1ed 	.word	0x0800c1ed
 800c1a8:	0800c1ed 	.word	0x0800c1ed
 800c1ac:	0800c1ed 	.word	0x0800c1ed
 800c1b0:	0800c1ed 	.word	0x0800c1ed
 800c1b4:	0800c1ed 	.word	0x0800c1ed
 800c1b8:	0800c1e5 	.word	0x0800c1e5
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c2:	e222      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1c4:	2304      	movs	r3, #4
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ca:	e21e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1cc:	2308      	movs	r3, #8
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d2:	e21a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1d4:	2310      	movs	r3, #16
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1da:	e216      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1dc:	2320      	movs	r3, #32
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e2:	e212      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1e4:	2340      	movs	r3, #64	; 0x40
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e20e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1ec:	2380      	movs	r3, #128	; 0x80
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e20a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a69      	ldr	r2, [pc, #420]	; (800c3a0 <UART_SetConfig+0x33c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d130      	bne.n	800c260 <UART_SetConfig+0x1fc>
 800c1fe:	4b67      	ldr	r3, [pc, #412]	; (800c39c <UART_SetConfig+0x338>)
 800c200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c202:	f003 0307 	and.w	r3, r3, #7
 800c206:	2b05      	cmp	r3, #5
 800c208:	d826      	bhi.n	800c258 <UART_SetConfig+0x1f4>
 800c20a:	a201      	add	r2, pc, #4	; (adr r2, 800c210 <UART_SetConfig+0x1ac>)
 800c20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c210:	0800c229 	.word	0x0800c229
 800c214:	0800c231 	.word	0x0800c231
 800c218:	0800c239 	.word	0x0800c239
 800c21c:	0800c241 	.word	0x0800c241
 800c220:	0800c249 	.word	0x0800c249
 800c224:	0800c251 	.word	0x0800c251
 800c228:	2300      	movs	r3, #0
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22e:	e1ec      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c230:	2304      	movs	r3, #4
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c236:	e1e8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c238:	2308      	movs	r3, #8
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23e:	e1e4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c240:	2310      	movs	r3, #16
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c246:	e1e0      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c248:	2320      	movs	r3, #32
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24e:	e1dc      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c250:	2340      	movs	r3, #64	; 0x40
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e1d8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c258:	2380      	movs	r3, #128	; 0x80
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e1d4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a4f      	ldr	r2, [pc, #316]	; (800c3a4 <UART_SetConfig+0x340>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d130      	bne.n	800c2cc <UART_SetConfig+0x268>
 800c26a:	4b4c      	ldr	r3, [pc, #304]	; (800c39c <UART_SetConfig+0x338>)
 800c26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26e:	f003 0307 	and.w	r3, r3, #7
 800c272:	2b05      	cmp	r3, #5
 800c274:	d826      	bhi.n	800c2c4 <UART_SetConfig+0x260>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <UART_SetConfig+0x218>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c295 	.word	0x0800c295
 800c280:	0800c29d 	.word	0x0800c29d
 800c284:	0800c2a5 	.word	0x0800c2a5
 800c288:	0800c2ad 	.word	0x0800c2ad
 800c28c:	0800c2b5 	.word	0x0800c2b5
 800c290:	0800c2bd 	.word	0x0800c2bd
 800c294:	2300      	movs	r3, #0
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29a:	e1b6      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c29c:	2304      	movs	r3, #4
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a2:	e1b2      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2a4:	2308      	movs	r3, #8
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2aa:	e1ae      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2ac:	2310      	movs	r3, #16
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b2:	e1aa      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2b4:	2320      	movs	r3, #32
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ba:	e1a6      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2bc:	2340      	movs	r3, #64	; 0x40
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e1a2      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2c4:	2380      	movs	r3, #128	; 0x80
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e19e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a35      	ldr	r2, [pc, #212]	; (800c3a8 <UART_SetConfig+0x344>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d130      	bne.n	800c338 <UART_SetConfig+0x2d4>
 800c2d6:	4b31      	ldr	r3, [pc, #196]	; (800c39c <UART_SetConfig+0x338>)
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	2b05      	cmp	r3, #5
 800c2e0:	d826      	bhi.n	800c330 <UART_SetConfig+0x2cc>
 800c2e2:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <UART_SetConfig+0x284>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c301 	.word	0x0800c301
 800c2ec:	0800c309 	.word	0x0800c309
 800c2f0:	0800c311 	.word	0x0800c311
 800c2f4:	0800c319 	.word	0x0800c319
 800c2f8:	0800c321 	.word	0x0800c321
 800c2fc:	0800c329 	.word	0x0800c329
 800c300:	2300      	movs	r3, #0
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c306:	e180      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c308:	2304      	movs	r3, #4
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30e:	e17c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c310:	2308      	movs	r3, #8
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c316:	e178      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c318:	2310      	movs	r3, #16
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31e:	e174      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c320:	2320      	movs	r3, #32
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c326:	e170      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c328:	2340      	movs	r3, #64	; 0x40
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32e:	e16c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c330:	2380      	movs	r3, #128	; 0x80
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c336:	e168      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a1b      	ldr	r2, [pc, #108]	; (800c3ac <UART_SetConfig+0x348>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d142      	bne.n	800c3c8 <UART_SetConfig+0x364>
 800c342:	4b16      	ldr	r3, [pc, #88]	; (800c39c <UART_SetConfig+0x338>)
 800c344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b05      	cmp	r3, #5
 800c34c:	d838      	bhi.n	800c3c0 <UART_SetConfig+0x35c>
 800c34e:	a201      	add	r2, pc, #4	; (adr r2, 800c354 <UART_SetConfig+0x2f0>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c36d 	.word	0x0800c36d
 800c358:	0800c375 	.word	0x0800c375
 800c35c:	0800c37d 	.word	0x0800c37d
 800c360:	0800c385 	.word	0x0800c385
 800c364:	0800c3b1 	.word	0x0800c3b1
 800c368:	0800c3b9 	.word	0x0800c3b9
 800c36c:	2300      	movs	r3, #0
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c372:	e14a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c374:	2304      	movs	r3, #4
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37a:	e146      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c37c:	2308      	movs	r3, #8
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c382:	e142      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c384:	2310      	movs	r3, #16
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38a:	e13e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c38c:	cfff69f3 	.word	0xcfff69f3
 800c390:	58000c00 	.word	0x58000c00
 800c394:	11fff4ff 	.word	0x11fff4ff
 800c398:	40011000 	.word	0x40011000
 800c39c:	58024400 	.word	0x58024400
 800c3a0:	40004400 	.word	0x40004400
 800c3a4:	40004800 	.word	0x40004800
 800c3a8:	40004c00 	.word	0x40004c00
 800c3ac:	40005000 	.word	0x40005000
 800c3b0:	2320      	movs	r3, #32
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b6:	e128      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c3b8:	2340      	movs	r3, #64	; 0x40
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3be:	e124      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c3c0:	2380      	movs	r3, #128	; 0x80
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c6:	e120      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4acb      	ldr	r2, [pc, #812]	; (800c6fc <UART_SetConfig+0x698>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d176      	bne.n	800c4c0 <UART_SetConfig+0x45c>
 800c3d2:	4bcb      	ldr	r3, [pc, #812]	; (800c700 <UART_SetConfig+0x69c>)
 800c3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3da:	2b28      	cmp	r3, #40	; 0x28
 800c3dc:	d86c      	bhi.n	800c4b8 <UART_SetConfig+0x454>
 800c3de:	a201      	add	r2, pc, #4	; (adr r2, 800c3e4 <UART_SetConfig+0x380>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c489 	.word	0x0800c489
 800c3e8:	0800c4b9 	.word	0x0800c4b9
 800c3ec:	0800c4b9 	.word	0x0800c4b9
 800c3f0:	0800c4b9 	.word	0x0800c4b9
 800c3f4:	0800c4b9 	.word	0x0800c4b9
 800c3f8:	0800c4b9 	.word	0x0800c4b9
 800c3fc:	0800c4b9 	.word	0x0800c4b9
 800c400:	0800c4b9 	.word	0x0800c4b9
 800c404:	0800c491 	.word	0x0800c491
 800c408:	0800c4b9 	.word	0x0800c4b9
 800c40c:	0800c4b9 	.word	0x0800c4b9
 800c410:	0800c4b9 	.word	0x0800c4b9
 800c414:	0800c4b9 	.word	0x0800c4b9
 800c418:	0800c4b9 	.word	0x0800c4b9
 800c41c:	0800c4b9 	.word	0x0800c4b9
 800c420:	0800c4b9 	.word	0x0800c4b9
 800c424:	0800c499 	.word	0x0800c499
 800c428:	0800c4b9 	.word	0x0800c4b9
 800c42c:	0800c4b9 	.word	0x0800c4b9
 800c430:	0800c4b9 	.word	0x0800c4b9
 800c434:	0800c4b9 	.word	0x0800c4b9
 800c438:	0800c4b9 	.word	0x0800c4b9
 800c43c:	0800c4b9 	.word	0x0800c4b9
 800c440:	0800c4b9 	.word	0x0800c4b9
 800c444:	0800c4a1 	.word	0x0800c4a1
 800c448:	0800c4b9 	.word	0x0800c4b9
 800c44c:	0800c4b9 	.word	0x0800c4b9
 800c450:	0800c4b9 	.word	0x0800c4b9
 800c454:	0800c4b9 	.word	0x0800c4b9
 800c458:	0800c4b9 	.word	0x0800c4b9
 800c45c:	0800c4b9 	.word	0x0800c4b9
 800c460:	0800c4b9 	.word	0x0800c4b9
 800c464:	0800c4a9 	.word	0x0800c4a9
 800c468:	0800c4b9 	.word	0x0800c4b9
 800c46c:	0800c4b9 	.word	0x0800c4b9
 800c470:	0800c4b9 	.word	0x0800c4b9
 800c474:	0800c4b9 	.word	0x0800c4b9
 800c478:	0800c4b9 	.word	0x0800c4b9
 800c47c:	0800c4b9 	.word	0x0800c4b9
 800c480:	0800c4b9 	.word	0x0800c4b9
 800c484:	0800c4b1 	.word	0x0800c4b1
 800c488:	2301      	movs	r3, #1
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48e:	e0bc      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c490:	2304      	movs	r3, #4
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c496:	e0b8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c498:	2308      	movs	r3, #8
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e0b4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4a0:	2310      	movs	r3, #16
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e0b0      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4a8:	2320      	movs	r3, #32
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e0ac      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4b0:	2340      	movs	r3, #64	; 0x40
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e0a8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4b8:	2380      	movs	r3, #128	; 0x80
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e0a4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a8f      	ldr	r2, [pc, #572]	; (800c704 <UART_SetConfig+0x6a0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d130      	bne.n	800c52c <UART_SetConfig+0x4c8>
 800c4ca:	4b8d      	ldr	r3, [pc, #564]	; (800c700 <UART_SetConfig+0x69c>)
 800c4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ce:	f003 0307 	and.w	r3, r3, #7
 800c4d2:	2b05      	cmp	r3, #5
 800c4d4:	d826      	bhi.n	800c524 <UART_SetConfig+0x4c0>
 800c4d6:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <UART_SetConfig+0x478>)
 800c4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4dc:	0800c4f5 	.word	0x0800c4f5
 800c4e0:	0800c4fd 	.word	0x0800c4fd
 800c4e4:	0800c505 	.word	0x0800c505
 800c4e8:	0800c50d 	.word	0x0800c50d
 800c4ec:	0800c515 	.word	0x0800c515
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fa:	e086      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4fc:	2304      	movs	r3, #4
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c502:	e082      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c504:	2308      	movs	r3, #8
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50a:	e07e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c50c:	2310      	movs	r3, #16
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c512:	e07a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c514:	2320      	movs	r3, #32
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e076      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c51c:	2340      	movs	r3, #64	; 0x40
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e072      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c524:	2380      	movs	r3, #128	; 0x80
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e06e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a75      	ldr	r2, [pc, #468]	; (800c708 <UART_SetConfig+0x6a4>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d130      	bne.n	800c598 <UART_SetConfig+0x534>
 800c536:	4b72      	ldr	r3, [pc, #456]	; (800c700 <UART_SetConfig+0x69c>)
 800c538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c53a:	f003 0307 	and.w	r3, r3, #7
 800c53e:	2b05      	cmp	r3, #5
 800c540:	d826      	bhi.n	800c590 <UART_SetConfig+0x52c>
 800c542:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <UART_SetConfig+0x4e4>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c561 	.word	0x0800c561
 800c54c:	0800c569 	.word	0x0800c569
 800c550:	0800c571 	.word	0x0800c571
 800c554:	0800c579 	.word	0x0800c579
 800c558:	0800c581 	.word	0x0800c581
 800c55c:	0800c589 	.word	0x0800c589
 800c560:	2300      	movs	r3, #0
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c566:	e050      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c568:	2304      	movs	r3, #4
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56e:	e04c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c570:	2308      	movs	r3, #8
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c576:	e048      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c578:	2310      	movs	r3, #16
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e044      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c580:	2320      	movs	r3, #32
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e040      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c588:	2340      	movs	r3, #64	; 0x40
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e03c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c590:	2380      	movs	r3, #128	; 0x80
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e038      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a5b      	ldr	r2, [pc, #364]	; (800c70c <UART_SetConfig+0x6a8>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d130      	bne.n	800c604 <UART_SetConfig+0x5a0>
 800c5a2:	4b57      	ldr	r3, [pc, #348]	; (800c700 <UART_SetConfig+0x69c>)
 800c5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d826      	bhi.n	800c5fc <UART_SetConfig+0x598>
 800c5ae:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <UART_SetConfig+0x550>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5cd 	.word	0x0800c5cd
 800c5b8:	0800c5d5 	.word	0x0800c5d5
 800c5bc:	0800c5dd 	.word	0x0800c5dd
 800c5c0:	0800c5e5 	.word	0x0800c5e5
 800c5c4:	0800c5ed 	.word	0x0800c5ed
 800c5c8:	0800c5f5 	.word	0x0800c5f5
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d2:	e01a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5d4:	2304      	movs	r3, #4
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5da:	e016      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5dc:	2308      	movs	r3, #8
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e2:	e012      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5e4:	2310      	movs	r3, #16
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ea:	e00e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f2:	e00a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5f4:	2340      	movs	r3, #64	; 0x40
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fa:	e006      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5fc:	2380      	movs	r3, #128	; 0x80
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e002      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c604:	2380      	movs	r3, #128	; 0x80
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a3f      	ldr	r2, [pc, #252]	; (800c70c <UART_SetConfig+0x6a8>)
 800c610:	4293      	cmp	r3, r2
 800c612:	f040 80f8 	bne.w	800c806 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c616:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	dc46      	bgt.n	800c6ac <UART_SetConfig+0x648>
 800c61e:	2b02      	cmp	r3, #2
 800c620:	f2c0 8082 	blt.w	800c728 <UART_SetConfig+0x6c4>
 800c624:	3b02      	subs	r3, #2
 800c626:	2b1e      	cmp	r3, #30
 800c628:	d87e      	bhi.n	800c728 <UART_SetConfig+0x6c4>
 800c62a:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <UART_SetConfig+0x5cc>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c6b3 	.word	0x0800c6b3
 800c634:	0800c729 	.word	0x0800c729
 800c638:	0800c6bb 	.word	0x0800c6bb
 800c63c:	0800c729 	.word	0x0800c729
 800c640:	0800c729 	.word	0x0800c729
 800c644:	0800c729 	.word	0x0800c729
 800c648:	0800c6cb 	.word	0x0800c6cb
 800c64c:	0800c729 	.word	0x0800c729
 800c650:	0800c729 	.word	0x0800c729
 800c654:	0800c729 	.word	0x0800c729
 800c658:	0800c729 	.word	0x0800c729
 800c65c:	0800c729 	.word	0x0800c729
 800c660:	0800c729 	.word	0x0800c729
 800c664:	0800c729 	.word	0x0800c729
 800c668:	0800c6db 	.word	0x0800c6db
 800c66c:	0800c729 	.word	0x0800c729
 800c670:	0800c729 	.word	0x0800c729
 800c674:	0800c729 	.word	0x0800c729
 800c678:	0800c729 	.word	0x0800c729
 800c67c:	0800c729 	.word	0x0800c729
 800c680:	0800c729 	.word	0x0800c729
 800c684:	0800c729 	.word	0x0800c729
 800c688:	0800c729 	.word	0x0800c729
 800c68c:	0800c729 	.word	0x0800c729
 800c690:	0800c729 	.word	0x0800c729
 800c694:	0800c729 	.word	0x0800c729
 800c698:	0800c729 	.word	0x0800c729
 800c69c:	0800c729 	.word	0x0800c729
 800c6a0:	0800c729 	.word	0x0800c729
 800c6a4:	0800c729 	.word	0x0800c729
 800c6a8:	0800c71b 	.word	0x0800c71b
 800c6ac:	2b40      	cmp	r3, #64	; 0x40
 800c6ae:	d037      	beq.n	800c720 <UART_SetConfig+0x6bc>
 800c6b0:	e03a      	b.n	800c728 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c6b2:	f7fc fe89 	bl	80093c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c6b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6b8:	e03c      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fc fe98 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c8:	e034      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ca:	f107 0318 	add.w	r3, r7, #24
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fc ffe4 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d8:	e02c      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <UART_SetConfig+0x69c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0320 	and.w	r3, r3, #32
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d016      	beq.n	800c714 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6e6:	4b06      	ldr	r3, [pc, #24]	; (800c700 <UART_SetConfig+0x69c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	08db      	lsrs	r3, r3, #3
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	4a07      	ldr	r2, [pc, #28]	; (800c710 <UART_SetConfig+0x6ac>)
 800c6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6f8:	e01c      	b.n	800c734 <UART_SetConfig+0x6d0>
 800c6fa:	bf00      	nop
 800c6fc:	40011400 	.word	0x40011400
 800c700:	58024400 	.word	0x58024400
 800c704:	40007800 	.word	0x40007800
 800c708:	40007c00 	.word	0x40007c00
 800c70c:	58000c00 	.word	0x58000c00
 800c710:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c714:	4b9d      	ldr	r3, [pc, #628]	; (800c98c <UART_SetConfig+0x928>)
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c718:	e00c      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c71a:	4b9d      	ldr	r3, [pc, #628]	; (800c990 <UART_SetConfig+0x92c>)
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71e:	e009      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c726:	e005      	b.n	800c734 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c728:	2300      	movs	r3, #0
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c732:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 81de 	beq.w	800caf8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c740:	4a94      	ldr	r2, [pc, #592]	; (800c994 <UART_SetConfig+0x930>)
 800c742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c746:	461a      	mov	r2, r3
 800c748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c74e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	4613      	mov	r3, r2
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	4413      	add	r3, r2
 800c75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d305      	bcc.n	800c76c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c768:	429a      	cmp	r2, r3
 800c76a:	d903      	bls.n	800c774 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c772:	e1c1      	b.n	800caf8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c776:	2200      	movs	r2, #0
 800c778:	60bb      	str	r3, [r7, #8]
 800c77a:	60fa      	str	r2, [r7, #12]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	4a84      	ldr	r2, [pc, #528]	; (800c994 <UART_SetConfig+0x930>)
 800c782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c786:	b29b      	uxth	r3, r3
 800c788:	2200      	movs	r2, #0
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	607a      	str	r2, [r7, #4]
 800c78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c796:	f7f3 fda3 	bl	80002e0 <__aeabi_uldivmod>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4610      	mov	r0, r2
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	f04f 0300 	mov.w	r3, #0
 800c7aa:	020b      	lsls	r3, r1, #8
 800c7ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7b0:	0202      	lsls	r2, r0, #8
 800c7b2:	6979      	ldr	r1, [r7, #20]
 800c7b4:	6849      	ldr	r1, [r1, #4]
 800c7b6:	0849      	lsrs	r1, r1, #1
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	4605      	mov	r5, r0
 800c7be:	eb12 0804 	adds.w	r8, r2, r4
 800c7c2:	eb43 0905 	adc.w	r9, r3, r5
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	469a      	mov	sl, r3
 800c7ce:	4693      	mov	fp, r2
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	465b      	mov	r3, fp
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f3 fd82 	bl	80002e0 <__aeabi_uldivmod>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ea:	d308      	bcc.n	800c7fe <UART_SetConfig+0x79a>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7f2:	d204      	bcs.n	800c7fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7fa:	60da      	str	r2, [r3, #12]
 800c7fc:	e17c      	b.n	800caf8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c804:	e178      	b.n	800caf8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c80e:	f040 80c5 	bne.w	800c99c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c812:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c816:	2b20      	cmp	r3, #32
 800c818:	dc48      	bgt.n	800c8ac <UART_SetConfig+0x848>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	db7b      	blt.n	800c916 <UART_SetConfig+0x8b2>
 800c81e:	2b20      	cmp	r3, #32
 800c820:	d879      	bhi.n	800c916 <UART_SetConfig+0x8b2>
 800c822:	a201      	add	r2, pc, #4	; (adr r2, 800c828 <UART_SetConfig+0x7c4>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c8b3 	.word	0x0800c8b3
 800c82c:	0800c8bb 	.word	0x0800c8bb
 800c830:	0800c917 	.word	0x0800c917
 800c834:	0800c917 	.word	0x0800c917
 800c838:	0800c8c3 	.word	0x0800c8c3
 800c83c:	0800c917 	.word	0x0800c917
 800c840:	0800c917 	.word	0x0800c917
 800c844:	0800c917 	.word	0x0800c917
 800c848:	0800c8d3 	.word	0x0800c8d3
 800c84c:	0800c917 	.word	0x0800c917
 800c850:	0800c917 	.word	0x0800c917
 800c854:	0800c917 	.word	0x0800c917
 800c858:	0800c917 	.word	0x0800c917
 800c85c:	0800c917 	.word	0x0800c917
 800c860:	0800c917 	.word	0x0800c917
 800c864:	0800c917 	.word	0x0800c917
 800c868:	0800c8e3 	.word	0x0800c8e3
 800c86c:	0800c917 	.word	0x0800c917
 800c870:	0800c917 	.word	0x0800c917
 800c874:	0800c917 	.word	0x0800c917
 800c878:	0800c917 	.word	0x0800c917
 800c87c:	0800c917 	.word	0x0800c917
 800c880:	0800c917 	.word	0x0800c917
 800c884:	0800c917 	.word	0x0800c917
 800c888:	0800c917 	.word	0x0800c917
 800c88c:	0800c917 	.word	0x0800c917
 800c890:	0800c917 	.word	0x0800c917
 800c894:	0800c917 	.word	0x0800c917
 800c898:	0800c917 	.word	0x0800c917
 800c89c:	0800c917 	.word	0x0800c917
 800c8a0:	0800c917 	.word	0x0800c917
 800c8a4:	0800c917 	.word	0x0800c917
 800c8a8:	0800c909 	.word	0x0800c909
 800c8ac:	2b40      	cmp	r3, #64	; 0x40
 800c8ae:	d02e      	beq.n	800c90e <UART_SetConfig+0x8aa>
 800c8b0:	e031      	b.n	800c916 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8b2:	f7fa fd91 	bl	80073d8 <HAL_RCC_GetPCLK1Freq>
 800c8b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8b8:	e033      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8ba:	f7fa fda3 	bl	8007404 <HAL_RCC_GetPCLK2Freq>
 800c8be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8c0:	e02f      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fc fd94 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d0:	e027      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8d2:	f107 0318 	add.w	r3, r7, #24
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fc fee0 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e0:	e01f      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8e2:	4b2d      	ldr	r3, [pc, #180]	; (800c998 <UART_SetConfig+0x934>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0320 	and.w	r3, r3, #32
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d009      	beq.n	800c902 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8ee:	4b2a      	ldr	r3, [pc, #168]	; (800c998 <UART_SetConfig+0x934>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	08db      	lsrs	r3, r3, #3
 800c8f4:	f003 0303 	and.w	r3, r3, #3
 800c8f8:	4a24      	ldr	r2, [pc, #144]	; (800c98c <UART_SetConfig+0x928>)
 800c8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c900:	e00f      	b.n	800c922 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c902:	4b22      	ldr	r3, [pc, #136]	; (800c98c <UART_SetConfig+0x928>)
 800c904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c906:	e00c      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c908:	4b21      	ldr	r3, [pc, #132]	; (800c990 <UART_SetConfig+0x92c>)
 800c90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c90c:	e009      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c90e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c914:	e005      	b.n	800c922 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 80e7 	beq.w	800caf8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	4a19      	ldr	r2, [pc, #100]	; (800c994 <UART_SetConfig+0x930>)
 800c930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c934:	461a      	mov	r2, r3
 800c936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c938:	fbb3 f3f2 	udiv	r3, r3, r2
 800c93c:	005a      	lsls	r2, r3, #1
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	085b      	lsrs	r3, r3, #1
 800c944:	441a      	add	r2, r3
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c952:	2b0f      	cmp	r3, #15
 800c954:	d916      	bls.n	800c984 <UART_SetConfig+0x920>
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c95c:	d212      	bcs.n	800c984 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c960:	b29b      	uxth	r3, r3
 800c962:	f023 030f 	bic.w	r3, r3, #15
 800c966:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96a:	085b      	lsrs	r3, r3, #1
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	b29a      	uxth	r2, r3
 800c974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c976:	4313      	orrs	r3, r2
 800c978:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c980:	60da      	str	r2, [r3, #12]
 800c982:	e0b9      	b.n	800caf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c98a:	e0b5      	b.n	800caf8 <UART_SetConfig+0xa94>
 800c98c:	03d09000 	.word	0x03d09000
 800c990:	003d0900 	.word	0x003d0900
 800c994:	08011e54 	.word	0x08011e54
 800c998:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c99c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	dc49      	bgt.n	800ca38 <UART_SetConfig+0x9d4>
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	db7c      	blt.n	800caa2 <UART_SetConfig+0xa3e>
 800c9a8:	2b20      	cmp	r3, #32
 800c9aa:	d87a      	bhi.n	800caa2 <UART_SetConfig+0xa3e>
 800c9ac:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <UART_SetConfig+0x950>)
 800c9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b2:	bf00      	nop
 800c9b4:	0800ca3f 	.word	0x0800ca3f
 800c9b8:	0800ca47 	.word	0x0800ca47
 800c9bc:	0800caa3 	.word	0x0800caa3
 800c9c0:	0800caa3 	.word	0x0800caa3
 800c9c4:	0800ca4f 	.word	0x0800ca4f
 800c9c8:	0800caa3 	.word	0x0800caa3
 800c9cc:	0800caa3 	.word	0x0800caa3
 800c9d0:	0800caa3 	.word	0x0800caa3
 800c9d4:	0800ca5f 	.word	0x0800ca5f
 800c9d8:	0800caa3 	.word	0x0800caa3
 800c9dc:	0800caa3 	.word	0x0800caa3
 800c9e0:	0800caa3 	.word	0x0800caa3
 800c9e4:	0800caa3 	.word	0x0800caa3
 800c9e8:	0800caa3 	.word	0x0800caa3
 800c9ec:	0800caa3 	.word	0x0800caa3
 800c9f0:	0800caa3 	.word	0x0800caa3
 800c9f4:	0800ca6f 	.word	0x0800ca6f
 800c9f8:	0800caa3 	.word	0x0800caa3
 800c9fc:	0800caa3 	.word	0x0800caa3
 800ca00:	0800caa3 	.word	0x0800caa3
 800ca04:	0800caa3 	.word	0x0800caa3
 800ca08:	0800caa3 	.word	0x0800caa3
 800ca0c:	0800caa3 	.word	0x0800caa3
 800ca10:	0800caa3 	.word	0x0800caa3
 800ca14:	0800caa3 	.word	0x0800caa3
 800ca18:	0800caa3 	.word	0x0800caa3
 800ca1c:	0800caa3 	.word	0x0800caa3
 800ca20:	0800caa3 	.word	0x0800caa3
 800ca24:	0800caa3 	.word	0x0800caa3
 800ca28:	0800caa3 	.word	0x0800caa3
 800ca2c:	0800caa3 	.word	0x0800caa3
 800ca30:	0800caa3 	.word	0x0800caa3
 800ca34:	0800ca95 	.word	0x0800ca95
 800ca38:	2b40      	cmp	r3, #64	; 0x40
 800ca3a:	d02e      	beq.n	800ca9a <UART_SetConfig+0xa36>
 800ca3c:	e031      	b.n	800caa2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca3e:	f7fa fccb 	bl	80073d8 <HAL_RCC_GetPCLK1Freq>
 800ca42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca44:	e033      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca46:	f7fa fcdd 	bl	8007404 <HAL_RCC_GetPCLK2Freq>
 800ca4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca4c:	e02f      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fc fcce 	bl	80093f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca5c:	e027      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca5e:	f107 0318 	add.w	r3, r7, #24
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fc fe1a 	bl	800969c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca6c:	e01f      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca6e:	4b2d      	ldr	r3, [pc, #180]	; (800cb24 <UART_SetConfig+0xac0>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f003 0320 	and.w	r3, r3, #32
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d009      	beq.n	800ca8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca7a:	4b2a      	ldr	r3, [pc, #168]	; (800cb24 <UART_SetConfig+0xac0>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	08db      	lsrs	r3, r3, #3
 800ca80:	f003 0303 	and.w	r3, r3, #3
 800ca84:	4a28      	ldr	r2, [pc, #160]	; (800cb28 <UART_SetConfig+0xac4>)
 800ca86:	fa22 f303 	lsr.w	r3, r2, r3
 800ca8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca8c:	e00f      	b.n	800caae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca8e:	4b26      	ldr	r3, [pc, #152]	; (800cb28 <UART_SetConfig+0xac4>)
 800ca90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca92:	e00c      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca94:	4b25      	ldr	r3, [pc, #148]	; (800cb2c <UART_SetConfig+0xac8>)
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca98:	e009      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa0:	e005      	b.n	800caae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800caac:	bf00      	nop
    }

    if (pclk != 0U)
 800caae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d021      	beq.n	800caf8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	4a1d      	ldr	r2, [pc, #116]	; (800cb30 <UART_SetConfig+0xacc>)
 800caba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cabe:	461a      	mov	r2, r3
 800cac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	085b      	lsrs	r3, r3, #1
 800cacc:	441a      	add	r2, r3
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	2b0f      	cmp	r3, #15
 800cadc:	d909      	bls.n	800caf2 <UART_SetConfig+0xa8e>
 800cade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cae4:	d205      	bcs.n	800caf2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	b29a      	uxth	r2, r3
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60da      	str	r2, [r3, #12]
 800caf0:	e002      	b.n	800caf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2200      	movs	r2, #0
 800cb12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cb14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3748      	adds	r7, #72	; 0x48
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb22:	bf00      	nop
 800cb24:	58024400 	.word	0x58024400
 800cb28:	03d09000 	.word	0x03d09000
 800cb2c:	003d0900 	.word	0x003d0900
 800cb30:	08011e54 	.word	0x08011e54

0800cb34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb40:	f003 0308 	and.w	r3, r3, #8
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00a      	beq.n	800cb5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00a      	beq.n	800cb80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb84:	f003 0302 	and.w	r3, r3, #2
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00a      	beq.n	800cba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba6:	f003 0304 	and.w	r3, r3, #4
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00a      	beq.n	800cbc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc8:	f003 0310 	and.w	r3, r3, #16
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00a      	beq.n	800cbe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbea:	f003 0320 	and.w	r3, r3, #32
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00a      	beq.n	800cc08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01a      	beq.n	800cc4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc32:	d10a      	bne.n	800cc4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00a      	beq.n	800cc6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	605a      	str	r2, [r3, #4]
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b098      	sub	sp, #96	; 0x60
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc88:	f7f5 fb18 	bl	80022bc <HAL_GetTick>
 800cc8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b08      	cmp	r3, #8
 800cc9a:	d12f      	bne.n	800ccfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cca4:	2200      	movs	r2, #0
 800cca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f88e 	bl	800cdcc <UART_WaitOnFlagUntilTimeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d022      	beq.n	800ccfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	e853 3f00 	ldrex	r3, [r3]
 800ccc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ccc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccca:	653b      	str	r3, [r7, #80]	; 0x50
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd4:	647b      	str	r3, [r7, #68]	; 0x44
 800ccd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ccda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccdc:	e841 2300 	strex	r3, r2, [r1]
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e6      	bne.n	800ccb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2220      	movs	r2, #32
 800ccec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e063      	b.n	800cdc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0304 	and.w	r3, r3, #4
 800cd06:	2b04      	cmp	r3, #4
 800cd08:	d149      	bne.n	800cd9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd12:	2200      	movs	r2, #0
 800cd14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f857 	bl	800cdcc <UART_WaitOnFlagUntilTimeout>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d03c      	beq.n	800cd9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	e853 3f00 	ldrex	r3, [r3]
 800cd30:	623b      	str	r3, [r7, #32]
   return(result);
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd42:	633b      	str	r3, [r7, #48]	; 0x30
 800cd44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd4a:	e841 2300 	strex	r3, r2, [r1]
 800cd4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1e6      	bne.n	800cd24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3308      	adds	r3, #8
 800cd5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	e853 3f00 	ldrex	r3, [r3]
 800cd64:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f023 0301 	bic.w	r3, r3, #1
 800cd6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3308      	adds	r3, #8
 800cd74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd76:	61fa      	str	r2, [r7, #28]
 800cd78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7a:	69b9      	ldr	r1, [r7, #24]
 800cd7c:	69fa      	ldr	r2, [r7, #28]
 800cd7e:	e841 2300 	strex	r3, r2, [r1]
 800cd82:	617b      	str	r3, [r7, #20]
   return(result);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e5      	bne.n	800cd56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2220      	movs	r2, #32
 800cd8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e012      	b.n	800cdc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2220      	movs	r2, #32
 800cda2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2220      	movs	r2, #32
 800cdaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3758      	adds	r7, #88	; 0x58
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	603b      	str	r3, [r7, #0]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cddc:	e04f      	b.n	800ce7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cde4:	d04b      	beq.n	800ce7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cde6:	f7f5 fa69 	bl	80022bc <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	69ba      	ldr	r2, [r7, #24]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d302      	bcc.n	800cdfc <UART_WaitOnFlagUntilTimeout+0x30>
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	e04e      	b.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 0304 	and.w	r3, r3, #4
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d037      	beq.n	800ce7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	2b80      	cmp	r3, #128	; 0x80
 800ce12:	d034      	beq.n	800ce7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	2b40      	cmp	r3, #64	; 0x40
 800ce18:	d031      	beq.n	800ce7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	69db      	ldr	r3, [r3, #28]
 800ce20:	f003 0308 	and.w	r3, r3, #8
 800ce24:	2b08      	cmp	r3, #8
 800ce26:	d110      	bne.n	800ce4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 f95b 	bl	800d0ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2208      	movs	r2, #8
 800ce3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e029      	b.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	69db      	ldr	r3, [r3, #28]
 800ce50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce58:	d111      	bne.n	800ce7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 f941 	bl	800d0ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2220      	movs	r2, #32
 800ce6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e00f      	b.n	800ce9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	69da      	ldr	r2, [r3, #28]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	4013      	ands	r3, r2
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	bf0c      	ite	eq
 800ce8e:	2301      	moveq	r3, #1
 800ce90:	2300      	movne	r3, #0
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	461a      	mov	r2, r3
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d0a0      	beq.n	800cdde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
	...

0800cea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b0a3      	sub	sp, #140	; 0x8c
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	88fa      	ldrh	r2, [r7, #6]
 800cec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	88fa      	ldrh	r2, [r7, #6]
 800cec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceda:	d10e      	bne.n	800cefa <UART_Start_Receive_IT+0x52>
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d105      	bne.n	800cef0 <UART_Start_Receive_IT+0x48>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ceea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ceee:	e02d      	b.n	800cf4c <UART_Start_Receive_IT+0xa4>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	22ff      	movs	r2, #255	; 0xff
 800cef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cef8:	e028      	b.n	800cf4c <UART_Start_Receive_IT+0xa4>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10d      	bne.n	800cf1e <UART_Start_Receive_IT+0x76>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d104      	bne.n	800cf14 <UART_Start_Receive_IT+0x6c>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	22ff      	movs	r2, #255	; 0xff
 800cf0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf12:	e01b      	b.n	800cf4c <UART_Start_Receive_IT+0xa4>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	227f      	movs	r2, #127	; 0x7f
 800cf18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf1c:	e016      	b.n	800cf4c <UART_Start_Receive_IT+0xa4>
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf26:	d10d      	bne.n	800cf44 <UART_Start_Receive_IT+0x9c>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d104      	bne.n	800cf3a <UART_Start_Receive_IT+0x92>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	227f      	movs	r2, #127	; 0x7f
 800cf34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf38:	e008      	b.n	800cf4c <UART_Start_Receive_IT+0xa4>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	223f      	movs	r2, #63	; 0x3f
 800cf3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf42:	e003      	b.n	800cf4c <UART_Start_Receive_IT+0xa4>
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2222      	movs	r2, #34	; 0x22
 800cf58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3308      	adds	r3, #8
 800cf62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf66:	e853 3f00 	ldrex	r3, [r3]
 800cf6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cf6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf6e:	f043 0301 	orr.w	r3, r3, #1
 800cf72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cf80:	673a      	str	r2, [r7, #112]	; 0x70
 800cf82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cf86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf88:	e841 2300 	strex	r3, r2, [r1]
 800cf8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cf8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1e3      	bne.n	800cf5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf9c:	d14f      	bne.n	800d03e <UART_Start_Receive_IT+0x196>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cfa4:	88fa      	ldrh	r2, [r7, #6]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d349      	bcc.n	800d03e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfb2:	d107      	bne.n	800cfc4 <UART_Start_Receive_IT+0x11c>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d103      	bne.n	800cfc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4a47      	ldr	r2, [pc, #284]	; (800d0dc <UART_Start_Receive_IT+0x234>)
 800cfc0:	675a      	str	r2, [r3, #116]	; 0x74
 800cfc2:	e002      	b.n	800cfca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	4a46      	ldr	r2, [pc, #280]	; (800d0e0 <UART_Start_Receive_IT+0x238>)
 800cfc8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d01a      	beq.n	800d008 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfda:	e853 3f00 	ldrex	r3, [r3]
 800cfde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cff6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cffa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cffc:	e841 2300 	strex	r3, r2, [r1]
 800d000:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1e4      	bne.n	800cfd2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	3308      	adds	r3, #8
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d012:	e853 3f00 	ldrex	r3, [r3]
 800d016:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d01e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3308      	adds	r3, #8
 800d026:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d028:	64ba      	str	r2, [r7, #72]	; 0x48
 800d02a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d02e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d030:	e841 2300 	strex	r3, r2, [r1]
 800d034:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1e5      	bne.n	800d008 <UART_Start_Receive_IT+0x160>
 800d03c:	e046      	b.n	800d0cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d046:	d107      	bne.n	800d058 <UART_Start_Receive_IT+0x1b0>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d103      	bne.n	800d058 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4a24      	ldr	r2, [pc, #144]	; (800d0e4 <UART_Start_Receive_IT+0x23c>)
 800d054:	675a      	str	r2, [r3, #116]	; 0x74
 800d056:	e002      	b.n	800d05e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	4a23      	ldr	r2, [pc, #140]	; (800d0e8 <UART_Start_Receive_IT+0x240>)
 800d05c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d019      	beq.n	800d09a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	e853 3f00 	ldrex	r3, [r3]
 800d072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d07a:	677b      	str	r3, [r7, #116]	; 0x74
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	461a      	mov	r2, r3
 800d082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d084:	637b      	str	r3, [r7, #52]	; 0x34
 800d086:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d08a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d08c:	e841 2300 	strex	r3, r2, [r1]
 800d090:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1e6      	bne.n	800d066 <UART_Start_Receive_IT+0x1be>
 800d098:	e018      	b.n	800d0cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	e853 3f00 	ldrex	r3, [r3]
 800d0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	f043 0320 	orr.w	r3, r3, #32
 800d0ae:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0b8:	623b      	str	r3, [r7, #32]
 800d0ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0bc:	69f9      	ldr	r1, [r7, #28]
 800d0be:	6a3a      	ldr	r2, [r7, #32]
 800d0c0:	e841 2300 	strex	r3, r2, [r1]
 800d0c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1e6      	bne.n	800d09a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	378c      	adds	r7, #140	; 0x8c
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	0800d90d 	.word	0x0800d90d
 800d0e0:	0800d5ad 	.word	0x0800d5ad
 800d0e4:	0800d3f5 	.word	0x0800d3f5
 800d0e8:	0800d23d 	.word	0x0800d23d

0800d0ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b095      	sub	sp, #84	; 0x54
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fc:	e853 3f00 	ldrex	r3, [r3]
 800d100:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d108:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d112:	643b      	str	r3, [r7, #64]	; 0x40
 800d114:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d11a:	e841 2300 	strex	r3, r2, [r1]
 800d11e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1e6      	bne.n	800d0f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	3308      	adds	r3, #8
 800d12c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	e853 3f00 	ldrex	r3, [r3]
 800d134:	61fb      	str	r3, [r7, #28]
   return(result);
 800d136:	69fa      	ldr	r2, [r7, #28]
 800d138:	4b1e      	ldr	r3, [pc, #120]	; (800d1b4 <UART_EndRxTransfer+0xc8>)
 800d13a:	4013      	ands	r3, r2
 800d13c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3308      	adds	r3, #8
 800d144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d146:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d14a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d14c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d14e:	e841 2300 	strex	r3, r2, [r1]
 800d152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1e5      	bne.n	800d126 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d118      	bne.n	800d194 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	e853 3f00 	ldrex	r3, [r3]
 800d16e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	f023 0310 	bic.w	r3, r3, #16
 800d176:	647b      	str	r3, [r7, #68]	; 0x44
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	461a      	mov	r2, r3
 800d17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d180:	61bb      	str	r3, [r7, #24]
 800d182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d184:	6979      	ldr	r1, [r7, #20]
 800d186:	69ba      	ldr	r2, [r7, #24]
 800d188:	e841 2300 	strex	r3, r2, [r1]
 800d18c:	613b      	str	r3, [r7, #16]
   return(result);
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1e6      	bne.n	800d162 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2220      	movs	r2, #32
 800d198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d1a8:	bf00      	nop
 800d1aa:	3754      	adds	r7, #84	; 0x54
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	effffffe 	.word	0xeffffffe

0800d1b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f7fe ff2e 	bl	800c038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1dc:	bf00      	nop
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	e853 3f00 	ldrex	r3, [r3]
 800d1f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d200:	61fb      	str	r3, [r7, #28]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	461a      	mov	r2, r3
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	61bb      	str	r3, [r7, #24]
 800d20c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20e:	6979      	ldr	r1, [r7, #20]
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	e841 2300 	strex	r3, r2, [r1]
 800d216:	613b      	str	r3, [r7, #16]
   return(result);
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1e6      	bne.n	800d1ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2220      	movs	r2, #32
 800d222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7fe fef9 	bl	800c024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d232:	bf00      	nop
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b09c      	sub	sp, #112	; 0x70
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d24a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d254:	2b22      	cmp	r3, #34	; 0x22
 800d256:	f040 80be 	bne.w	800d3d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d260:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d264:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d268:	b2d9      	uxtb	r1, r3
 800d26a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d274:	400a      	ands	r2, r1
 800d276:	b2d2      	uxtb	r2, r2
 800d278:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	3b01      	subs	r3, #1
 800d28e:	b29a      	uxth	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f040 80a1 	bne.w	800d3e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ac:	e853 3f00 	ldrex	r3, [r3]
 800d2b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2ca:	e841 2300 	strex	r3, r2, [r1]
 800d2ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1e6      	bne.n	800d2a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3308      	adds	r3, #8
 800d2dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	e853 3f00 	ldrex	r3, [r3]
 800d2e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e8:	f023 0301 	bic.w	r3, r3, #1
 800d2ec:	667b      	str	r3, [r7, #100]	; 0x64
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3308      	adds	r3, #8
 800d2f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d2f6:	647a      	str	r2, [r7, #68]	; 0x44
 800d2f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2fe:	e841 2300 	strex	r3, r2, [r1]
 800d302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1e5      	bne.n	800d2d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2220      	movs	r2, #32
 800d30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a33      	ldr	r2, [pc, #204]	; (800d3f0 <UART_RxISR_8BIT+0x1b4>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d01f      	beq.n	800d368 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d332:	2b00      	cmp	r3, #0
 800d334:	d018      	beq.n	800d368 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	e853 3f00 	ldrex	r3, [r3]
 800d342:	623b      	str	r3, [r7, #32]
   return(result);
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d34a:	663b      	str	r3, [r7, #96]	; 0x60
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d354:	633b      	str	r3, [r7, #48]	; 0x30
 800d356:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d35a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d35c:	e841 2300 	strex	r3, r2, [r1]
 800d360:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1e6      	bne.n	800d336 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d12e      	bne.n	800d3ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	e853 3f00 	ldrex	r3, [r3]
 800d382:	60fb      	str	r3, [r7, #12]
   return(result);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f023 0310 	bic.w	r3, r3, #16
 800d38a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	461a      	mov	r2, r3
 800d392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d394:	61fb      	str	r3, [r7, #28]
 800d396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d398:	69b9      	ldr	r1, [r7, #24]
 800d39a:	69fa      	ldr	r2, [r7, #28]
 800d39c:	e841 2300 	strex	r3, r2, [r1]
 800d3a0:	617b      	str	r3, [r7, #20]
   return(result);
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1e6      	bne.n	800d376 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	69db      	ldr	r3, [r3, #28]
 800d3ae:	f003 0310 	and.w	r3, r3, #16
 800d3b2:	2b10      	cmp	r3, #16
 800d3b4:	d103      	bne.n	800d3be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2210      	movs	r2, #16
 800d3bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7fe fe40 	bl	800c04c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3cc:	e00b      	b.n	800d3e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7f3 f93e 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 800d3d4:	e007      	b.n	800d3e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	699a      	ldr	r2, [r3, #24]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f042 0208 	orr.w	r2, r2, #8
 800d3e4:	619a      	str	r2, [r3, #24]
}
 800d3e6:	bf00      	nop
 800d3e8:	3770      	adds	r7, #112	; 0x70
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	58000c00 	.word	0x58000c00

0800d3f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b09c      	sub	sp, #112	; 0x70
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d402:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d40c:	2b22      	cmp	r3, #34	; 0x22
 800d40e:	f040 80be 	bne.w	800d58e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d420:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d422:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d426:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d42a:	4013      	ands	r3, r2
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d430:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d436:	1c9a      	adds	r2, r3, #2
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d442:	b29b      	uxth	r3, r3
 800d444:	3b01      	subs	r3, #1
 800d446:	b29a      	uxth	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d454:	b29b      	uxth	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	f040 80a1 	bne.w	800d59e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d46c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d470:	667b      	str	r3, [r7, #100]	; 0x64
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	461a      	mov	r2, r3
 800d478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d47a:	657b      	str	r3, [r7, #84]	; 0x54
 800d47c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e6      	bne.n	800d45c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	3308      	adds	r3, #8
 800d494:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d498:	e853 3f00 	ldrex	r3, [r3]
 800d49c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a0:	f023 0301 	bic.w	r3, r3, #1
 800d4a4:	663b      	str	r3, [r7, #96]	; 0x60
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4ae:	643a      	str	r2, [r7, #64]	; 0x40
 800d4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4b6:	e841 2300 	strex	r3, r2, [r1]
 800d4ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1e5      	bne.n	800d48e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2220      	movs	r2, #32
 800d4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a33      	ldr	r2, [pc, #204]	; (800d5a8 <UART_RxISR_16BIT+0x1b4>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d01f      	beq.n	800d520 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d018      	beq.n	800d520 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	e853 3f00 	ldrex	r3, [r3]
 800d4fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d502:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	461a      	mov	r2, r3
 800d50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d50c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d50e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d514:	e841 2300 	strex	r3, r2, [r1]
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1e6      	bne.n	800d4ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d524:	2b01      	cmp	r3, #1
 800d526:	d12e      	bne.n	800d586 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	e853 3f00 	ldrex	r3, [r3]
 800d53a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	f023 0310 	bic.w	r3, r3, #16
 800d542:	65bb      	str	r3, [r7, #88]	; 0x58
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	461a      	mov	r2, r3
 800d54a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d54c:	61bb      	str	r3, [r7, #24]
 800d54e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d550:	6979      	ldr	r1, [r7, #20]
 800d552:	69ba      	ldr	r2, [r7, #24]
 800d554:	e841 2300 	strex	r3, r2, [r1]
 800d558:	613b      	str	r3, [r7, #16]
   return(result);
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1e6      	bne.n	800d52e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	69db      	ldr	r3, [r3, #28]
 800d566:	f003 0310 	and.w	r3, r3, #16
 800d56a:	2b10      	cmp	r3, #16
 800d56c:	d103      	bne.n	800d576 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2210      	movs	r2, #16
 800d574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d57c:	4619      	mov	r1, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f7fe fd64 	bl	800c04c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d584:	e00b      	b.n	800d59e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7f3 f862 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 800d58c:	e007      	b.n	800d59e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	699a      	ldr	r2, [r3, #24]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f042 0208 	orr.w	r2, r2, #8
 800d59c:	619a      	str	r2, [r3, #24]
}
 800d59e:	bf00      	nop
 800d5a0:	3770      	adds	r7, #112	; 0x70
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	58000c00 	.word	0x58000c00

0800d5ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b0ac      	sub	sp, #176	; 0xb0
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5e2:	2b22      	cmp	r3, #34	; 0x22
 800d5e4:	f040 8180 	bne.w	800d8e8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5f2:	e123      	b.n	800d83c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d602:	b2d9      	uxtb	r1, r3
 800d604:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d60e:	400a      	ands	r2, r1
 800d610:	b2d2      	uxtb	r2, r2
 800d612:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d618:	1c5a      	adds	r2, r3, #1
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d624:	b29b      	uxth	r3, r3
 800d626:	3b01      	subs	r3, #1
 800d628:	b29a      	uxth	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d63a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d63e:	f003 0307 	and.w	r3, r3, #7
 800d642:	2b00      	cmp	r3, #0
 800d644:	d053      	beq.n	800d6ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d011      	beq.n	800d676 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00b      	beq.n	800d676 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2201      	movs	r2, #1
 800d664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d66c:	f043 0201 	orr.w	r2, r3, #1
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d67a:	f003 0302 	and.w	r3, r3, #2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d011      	beq.n	800d6a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00b      	beq.n	800d6a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2202      	movs	r2, #2
 800d694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d69c:	f043 0204 	orr.w	r2, r3, #4
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6aa:	f003 0304 	and.w	r3, r3, #4
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d011      	beq.n	800d6d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d6b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00b      	beq.n	800d6d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2204      	movs	r2, #4
 800d6c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6cc:	f043 0202 	orr.w	r2, r3, #2
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d006      	beq.n	800d6ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7fe fca9 	bl	800c038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f040 80a0 	bne.w	800d83c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d704:	e853 3f00 	ldrex	r3, [r3]
 800d708:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d70c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	461a      	mov	r2, r3
 800d71a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d71e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d720:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d722:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d724:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d726:	e841 2300 	strex	r3, r2, [r1]
 800d72a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d72c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1e4      	bne.n	800d6fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	3308      	adds	r3, #8
 800d738:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d73c:	e853 3f00 	ldrex	r3, [r3]
 800d740:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d744:	4b6e      	ldr	r3, [pc, #440]	; (800d900 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d746:	4013      	ands	r3, r2
 800d748:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3308      	adds	r3, #8
 800d752:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d756:	66ba      	str	r2, [r7, #104]	; 0x68
 800d758:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d75c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d75e:	e841 2300 	strex	r3, r2, [r1]
 800d762:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1e3      	bne.n	800d732 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2220      	movs	r2, #32
 800d76e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a60      	ldr	r2, [pc, #384]	; (800d904 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d021      	beq.n	800d7cc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d792:	2b00      	cmp	r3, #0
 800d794:	d01a      	beq.n	800d7cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d79e:	e853 3f00 	ldrex	r3, [r3]
 800d7a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7b8:	657b      	str	r3, [r7, #84]	; 0x54
 800d7ba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d7be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7c0:	e841 2300 	strex	r3, r2, [r1]
 800d7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1e4      	bne.n	800d796 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d130      	bne.n	800d836 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e2:	e853 3f00 	ldrex	r3, [r3]
 800d7e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	f023 0310 	bic.w	r3, r3, #16
 800d7ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7fc:	643b      	str	r3, [r7, #64]	; 0x40
 800d7fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d804:	e841 2300 	strex	r3, r2, [r1]
 800d808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1e4      	bne.n	800d7da <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	69db      	ldr	r3, [r3, #28]
 800d816:	f003 0310 	and.w	r3, r3, #16
 800d81a:	2b10      	cmp	r3, #16
 800d81c:	d103      	bne.n	800d826 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2210      	movs	r2, #16
 800d824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7fe fc0c 	bl	800c04c <HAL_UARTEx_RxEventCallback>
 800d834:	e002      	b.n	800d83c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f7f2 ff0a 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d83c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d840:	2b00      	cmp	r3, #0
 800d842:	d006      	beq.n	800d852 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d848:	f003 0320 	and.w	r3, r3, #32
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f47f aed1 	bne.w	800d5f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d858:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d85c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d860:	2b00      	cmp	r3, #0
 800d862:	d049      	beq.n	800d8f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d86a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d86e:	429a      	cmp	r2, r3
 800d870:	d242      	bcs.n	800d8f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	3308      	adds	r3, #8
 800d878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	e853 3f00 	ldrex	r3, [r3]
 800d880:	61fb      	str	r3, [r7, #28]
   return(result);
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3308      	adds	r3, #8
 800d892:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d896:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e3      	bne.n	800d872 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a16      	ldr	r2, [pc, #88]	; (800d908 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d8ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	e853 3f00 	ldrex	r3, [r3]
 800d8bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	f043 0320 	orr.w	r3, r3, #32
 800d8c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d8d2:	61bb      	str	r3, [r7, #24]
 800d8d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6979      	ldr	r1, [r7, #20]
 800d8d8:	69ba      	ldr	r2, [r7, #24]
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	613b      	str	r3, [r7, #16]
   return(result);
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e4      	bne.n	800d8b0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8e6:	e007      	b.n	800d8f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	699a      	ldr	r2, [r3, #24]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f042 0208 	orr.w	r2, r2, #8
 800d8f6:	619a      	str	r2, [r3, #24]
}
 800d8f8:	bf00      	nop
 800d8fa:	37b0      	adds	r7, #176	; 0xb0
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	effffffe 	.word	0xeffffffe
 800d904:	58000c00 	.word	0x58000c00
 800d908:	0800d23d 	.word	0x0800d23d

0800d90c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b0ae      	sub	sp, #184	; 0xb8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d91a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	69db      	ldr	r3, [r3, #28]
 800d924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d942:	2b22      	cmp	r3, #34	; 0x22
 800d944:	f040 8184 	bne.w	800dc50 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d94e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d952:	e127      	b.n	800dba4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d966:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d96a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d96e:	4013      	ands	r3, r2
 800d970:	b29a      	uxth	r2, r3
 800d972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d976:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d97c:	1c9a      	adds	r2, r3, #2
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d988:	b29b      	uxth	r3, r3
 800d98a:	3b01      	subs	r3, #1
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	69db      	ldr	r3, [r3, #28]
 800d99a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d99e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9a2:	f003 0307 	and.w	r3, r3, #7
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d053      	beq.n	800da52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d011      	beq.n	800d9da <UART_RxISR_16BIT_FIFOEN+0xce>
 800d9b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00b      	beq.n	800d9da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d0:	f043 0201 	orr.w	r2, r3, #1
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9de:	f003 0302 	and.w	r3, r3, #2
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d011      	beq.n	800da0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d9e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00b      	beq.n	800da0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2202      	movs	r2, #2
 800d9f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da00:	f043 0204 	orr.w	r2, r3, #4
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da0e:	f003 0304 	and.w	r3, r3, #4
 800da12:	2b00      	cmp	r3, #0
 800da14:	d011      	beq.n	800da3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800da16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00b      	beq.n	800da3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2204      	movs	r2, #4
 800da28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da30:	f043 0202 	orr.w	r2, r3, #2
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da40:	2b00      	cmp	r3, #0
 800da42:	d006      	beq.n	800da52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7fe faf7 	bl	800c038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da58:	b29b      	uxth	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	f040 80a2 	bne.w	800dba4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da68:	e853 3f00 	ldrex	r3, [r3]
 800da6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800da6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	461a      	mov	r2, r3
 800da7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800da86:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800da8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da8e:	e841 2300 	strex	r3, r2, [r1]
 800da92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800da94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1e2      	bne.n	800da60 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3308      	adds	r3, #8
 800daa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daa4:	e853 3f00 	ldrex	r3, [r3]
 800daa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800daaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800daac:	4b6e      	ldr	r3, [pc, #440]	; (800dc68 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800daae:	4013      	ands	r3, r2
 800dab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	3308      	adds	r3, #8
 800daba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dabe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dac6:	e841 2300 	strex	r3, r2, [r1]
 800daca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dacc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1e3      	bne.n	800da9a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2220      	movs	r2, #32
 800dad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a60      	ldr	r2, [pc, #384]	; (800dc6c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d021      	beq.n	800db34 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d01a      	beq.n	800db34 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db06:	e853 3f00 	ldrex	r3, [r3]
 800db0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	461a      	mov	r2, r3
 800db1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db20:	65bb      	str	r3, [r7, #88]	; 0x58
 800db22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db28:	e841 2300 	strex	r3, r2, [r1]
 800db2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1e4      	bne.n	800dafe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d130      	bne.n	800db9e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4a:	e853 3f00 	ldrex	r3, [r3]
 800db4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db52:	f023 0310 	bic.w	r3, r3, #16
 800db56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db64:	647b      	str	r3, [r7, #68]	; 0x44
 800db66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db6c:	e841 2300 	strex	r3, r2, [r1]
 800db70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1e4      	bne.n	800db42 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	f003 0310 	and.w	r3, r3, #16
 800db82:	2b10      	cmp	r3, #16
 800db84:	d103      	bne.n	800db8e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2210      	movs	r2, #16
 800db8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db94:	4619      	mov	r1, r3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7fe fa58 	bl	800c04c <HAL_UARTEx_RxEventCallback>
 800db9c:	e002      	b.n	800dba4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7f2 fd56 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dba4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d006      	beq.n	800dbba <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800dbac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbb0:	f003 0320 	and.w	r3, r3, #32
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f47f aecd 	bne.w	800d954 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbc0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dbc4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d049      	beq.n	800dc60 <UART_RxISR_16BIT_FIFOEN+0x354>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dbd2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d242      	bcs.n	800dc60 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3308      	adds	r3, #8
 800dbe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	e853 3f00 	ldrex	r3, [r3]
 800dbe8:	623b      	str	r3, [r7, #32]
   return(result);
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3308      	adds	r3, #8
 800dbfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dbfe:	633a      	str	r2, [r7, #48]	; 0x30
 800dc00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc06:	e841 2300 	strex	r3, r2, [r1]
 800dc0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1e3      	bne.n	800dbda <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a16      	ldr	r2, [pc, #88]	; (800dc70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800dc16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	e853 3f00 	ldrex	r3, [r3]
 800dc24:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f043 0320 	orr.w	r3, r3, #32
 800dc2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc3a:	61fb      	str	r3, [r7, #28]
 800dc3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3e:	69b9      	ldr	r1, [r7, #24]
 800dc40:	69fa      	ldr	r2, [r7, #28]
 800dc42:	e841 2300 	strex	r3, r2, [r1]
 800dc46:	617b      	str	r3, [r7, #20]
   return(result);
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1e4      	bne.n	800dc18 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc4e:	e007      	b.n	800dc60 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	699a      	ldr	r2, [r3, #24]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f042 0208 	orr.w	r2, r2, #8
 800dc5e:	619a      	str	r2, [r3, #24]
}
 800dc60:	bf00      	nop
 800dc62:	37b8      	adds	r7, #184	; 0xb8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	effffffe 	.word	0xeffffffe
 800dc6c:	58000c00 	.word	0x58000c00
 800dc70:	0800d3f5 	.word	0x0800d3f5

0800dc74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d101      	bne.n	800dcc6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	e027      	b.n	800dd16 <HAL_UARTEx_DisableFifoMode+0x66>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2224      	movs	r2, #36	; 0x24
 800dcd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f022 0201 	bic.w	r2, r2, #1
 800dcec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dcf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2220      	movs	r2, #32
 800dd08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d101      	bne.n	800dd3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd36:	2302      	movs	r3, #2
 800dd38:	e02d      	b.n	800dd96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2224      	movs	r2, #36	; 0x24
 800dd46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f022 0201 	bic.w	r2, r2, #1
 800dd60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	430a      	orrs	r2, r1
 800dd74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f850 	bl	800de1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2220      	movs	r2, #32
 800dd88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b084      	sub	sp, #16
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d101      	bne.n	800ddb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	e02d      	b.n	800de12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2224      	movs	r2, #36	; 0x24
 800ddc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f022 0201 	bic.w	r2, r2, #1
 800dddc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f812 	bl	800de1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2220      	movs	r2, #32
 800de04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
	...

0800de1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d108      	bne.n	800de3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2201      	movs	r2, #1
 800de30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de3c:	e031      	b.n	800dea2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de3e:	2310      	movs	r3, #16
 800de40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de42:	2310      	movs	r3, #16
 800de44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	0e5b      	lsrs	r3, r3, #25
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	f003 0307 	and.w	r3, r3, #7
 800de54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	0f5b      	lsrs	r3, r3, #29
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	f003 0307 	and.w	r3, r3, #7
 800de64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	7b3a      	ldrb	r2, [r7, #12]
 800de6a:	4911      	ldr	r1, [pc, #68]	; (800deb0 <UARTEx_SetNbDataToProcess+0x94>)
 800de6c:	5c8a      	ldrb	r2, [r1, r2]
 800de6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de72:	7b3a      	ldrb	r2, [r7, #12]
 800de74:	490f      	ldr	r1, [pc, #60]	; (800deb4 <UARTEx_SetNbDataToProcess+0x98>)
 800de76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de78:	fb93 f3f2 	sdiv	r3, r3, r2
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de84:	7bfb      	ldrb	r3, [r7, #15]
 800de86:	7b7a      	ldrb	r2, [r7, #13]
 800de88:	4909      	ldr	r1, [pc, #36]	; (800deb0 <UARTEx_SetNbDataToProcess+0x94>)
 800de8a:	5c8a      	ldrb	r2, [r1, r2]
 800de8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de90:	7b7a      	ldrb	r2, [r7, #13]
 800de92:	4908      	ldr	r1, [pc, #32]	; (800deb4 <UARTEx_SetNbDataToProcess+0x98>)
 800de94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de96:	fb93 f3f2 	sdiv	r3, r3, r2
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dea2:	bf00      	nop
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	08011e6c 	.word	0x08011e6c
 800deb4:	08011e74 	.word	0x08011e74

0800deb8 <__NVIC_SetPriority>:
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	6039      	str	r1, [r7, #0]
 800dec2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	db0a      	blt.n	800dee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	490c      	ldr	r1, [pc, #48]	; (800df04 <__NVIC_SetPriority+0x4c>)
 800ded2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ded6:	0112      	lsls	r2, r2, #4
 800ded8:	b2d2      	uxtb	r2, r2
 800deda:	440b      	add	r3, r1
 800dedc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dee0:	e00a      	b.n	800def8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	4908      	ldr	r1, [pc, #32]	; (800df08 <__NVIC_SetPriority+0x50>)
 800dee8:	88fb      	ldrh	r3, [r7, #6]
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	3b04      	subs	r3, #4
 800def0:	0112      	lsls	r2, r2, #4
 800def2:	b2d2      	uxtb	r2, r2
 800def4:	440b      	add	r3, r1
 800def6:	761a      	strb	r2, [r3, #24]
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr
 800df04:	e000e100 	.word	0xe000e100
 800df08:	e000ed00 	.word	0xe000ed00

0800df0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800df10:	4b05      	ldr	r3, [pc, #20]	; (800df28 <SysTick_Handler+0x1c>)
 800df12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800df14:	f002 f872 	bl	800fffc <xTaskGetSchedulerState>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d001      	beq.n	800df22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800df1e:	f002 fe93 	bl	8010c48 <xPortSysTickHandler>
  }
}
 800df22:	bf00      	nop
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	e000e010 	.word	0xe000e010

0800df2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800df30:	2100      	movs	r1, #0
 800df32:	f06f 0004 	mvn.w	r0, #4
 800df36:	f7ff ffbf 	bl	800deb8 <__NVIC_SetPriority>
#endif
}
 800df3a:	bf00      	nop
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df46:	f3ef 8305 	mrs	r3, IPSR
 800df4a:	603b      	str	r3, [r7, #0]
  return(result);
 800df4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d003      	beq.n	800df5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800df52:	f06f 0305 	mvn.w	r3, #5
 800df56:	607b      	str	r3, [r7, #4]
 800df58:	e00c      	b.n	800df74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800df5a:	4b0a      	ldr	r3, [pc, #40]	; (800df84 <osKernelInitialize+0x44>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d105      	bne.n	800df6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800df62:	4b08      	ldr	r3, [pc, #32]	; (800df84 <osKernelInitialize+0x44>)
 800df64:	2201      	movs	r2, #1
 800df66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800df68:	2300      	movs	r3, #0
 800df6a:	607b      	str	r3, [r7, #4]
 800df6c:	e002      	b.n	800df74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800df6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df74:	687b      	ldr	r3, [r7, #4]
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	240005fc 	.word	0x240005fc

0800df88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df8e:	f3ef 8305 	mrs	r3, IPSR
 800df92:	603b      	str	r3, [r7, #0]
  return(result);
 800df94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800df9a:	f06f 0305 	mvn.w	r3, #5
 800df9e:	607b      	str	r3, [r7, #4]
 800dfa0:	e010      	b.n	800dfc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dfa2:	4b0b      	ldr	r3, [pc, #44]	; (800dfd0 <osKernelStart+0x48>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d109      	bne.n	800dfbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dfaa:	f7ff ffbf 	bl	800df2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dfae:	4b08      	ldr	r3, [pc, #32]	; (800dfd0 <osKernelStart+0x48>)
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dfb4:	f001 fb3c 	bl	800f630 <vTaskStartScheduler>
      stat = osOK;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	607b      	str	r3, [r7, #4]
 800dfbc:	e002      	b.n	800dfc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dfbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dfc4:	687b      	ldr	r3, [r7, #4]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	240005fc 	.word	0x240005fc

0800dfd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b08e      	sub	sp, #56	; 0x38
 800dfd8:	af04      	add	r7, sp, #16
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfe4:	f3ef 8305 	mrs	r3, IPSR
 800dfe8:	617b      	str	r3, [r7, #20]
  return(result);
 800dfea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d17e      	bne.n	800e0ee <osThreadNew+0x11a>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d07b      	beq.n	800e0ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dff6:	2380      	movs	r3, #128	; 0x80
 800dff8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dffa:	2318      	movs	r3, #24
 800dffc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dffe:	2300      	movs	r3, #0
 800e000:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e006:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d045      	beq.n	800e09a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d002      	beq.n	800e01c <osThreadNew+0x48>
        name = attr->name;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	699b      	ldr	r3, [r3, #24]
 800e028:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d008      	beq.n	800e042 <osThreadNew+0x6e>
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	2b38      	cmp	r3, #56	; 0x38
 800e034:	d805      	bhi.n	800e042 <osThreadNew+0x6e>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d001      	beq.n	800e046 <osThreadNew+0x72>
        return (NULL);
 800e042:	2300      	movs	r3, #0
 800e044:	e054      	b.n	800e0f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d003      	beq.n	800e056 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	089b      	lsrs	r3, r3, #2
 800e054:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	689b      	ldr	r3, [r3, #8]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00e      	beq.n	800e07c <osThreadNew+0xa8>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	2b5b      	cmp	r3, #91	; 0x5b
 800e064:	d90a      	bls.n	800e07c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d006      	beq.n	800e07c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <osThreadNew+0xa8>
        mem = 1;
 800e076:	2301      	movs	r3, #1
 800e078:	61bb      	str	r3, [r7, #24]
 800e07a:	e010      	b.n	800e09e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10c      	bne.n	800e09e <osThreadNew+0xca>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d108      	bne.n	800e09e <osThreadNew+0xca>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <osThreadNew+0xca>
          mem = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	61bb      	str	r3, [r7, #24]
 800e098:	e001      	b.n	800e09e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d110      	bne.n	800e0c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0ac:	9202      	str	r2, [sp, #8]
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	6a3a      	ldr	r2, [r7, #32]
 800e0b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f001 f8e2 	bl	800f284 <xTaskCreateStatic>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	613b      	str	r3, [r7, #16]
 800e0c4:	e013      	b.n	800e0ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d110      	bne.n	800e0ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	f107 0310 	add.w	r3, r7, #16
 800e0d4:	9301      	str	r3, [sp, #4]
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f001 f92d 	bl	800f33e <xTaskCreate>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d001      	beq.n	800e0ee <osThreadNew+0x11a>
            hTask = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e0ee:	693b      	ldr	r3, [r7, #16]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3728      	adds	r7, #40	; 0x28
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e100:	f3ef 8305 	mrs	r3, IPSR
 800e104:	60bb      	str	r3, [r7, #8]
  return(result);
 800e106:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d003      	beq.n	800e114 <osDelay+0x1c>
    stat = osErrorISR;
 800e10c:	f06f 0305 	mvn.w	r3, #5
 800e110:	60fb      	str	r3, [r7, #12]
 800e112:	e007      	b.n	800e124 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e114:	2300      	movs	r3, #0
 800e116:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f001 fa52 	bl	800f5c8 <vTaskDelay>
    }
  }

  return (stat);
 800e124:	68fb      	ldr	r3, [r7, #12]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800e12e:	b580      	push	{r7, lr}
 800e130:	b086      	sub	sp, #24
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800e136:	2300      	movs	r3, #0
 800e138:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e13a:	f3ef 8305 	mrs	r3, IPSR
 800e13e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e140:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800e142:	2b00      	cmp	r3, #0
 800e144:	d12d      	bne.n	800e1a2 <osEventFlagsNew+0x74>
    mem = -1;
 800e146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e14a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d015      	beq.n	800e17e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d006      	beq.n	800e168 <osEventFlagsNew+0x3a>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	2b1f      	cmp	r3, #31
 800e160:	d902      	bls.n	800e168 <osEventFlagsNew+0x3a>
        mem = 1;
 800e162:	2301      	movs	r3, #1
 800e164:	613b      	str	r3, [r7, #16]
 800e166:	e00c      	b.n	800e182 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d108      	bne.n	800e182 <osEventFlagsNew+0x54>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d104      	bne.n	800e182 <osEventFlagsNew+0x54>
          mem = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]
 800e17c:	e001      	b.n	800e182 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800e17e:	2300      	movs	r3, #0
 800e180:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d106      	bne.n	800e196 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f000 f8eb 	bl	800e368 <xEventGroupCreateStatic>
 800e192:	6178      	str	r0, [r7, #20]
 800e194:	e005      	b.n	800e1a2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d102      	bne.n	800e1a2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800e19c:	f000 f91b 	bl	800e3d6 <xEventGroupCreate>
 800e1a0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800e1a2:	697b      	ldr	r3, [r7, #20]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3718      	adds	r7, #24
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d004      	beq.n	800e1ca <osEventFlagsSet+0x1e>
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d003      	beq.n	800e1d2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800e1ca:	f06f 0303 	mvn.w	r3, #3
 800e1ce:	617b      	str	r3, [r7, #20]
 800e1d0:	e028      	b.n	800e224 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1d2:	f3ef 8305 	mrs	r3, IPSR
 800e1d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d01d      	beq.n	800e21a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800e1e2:	f107 0308 	add.w	r3, r7, #8
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	6938      	ldr	r0, [r7, #16]
 800e1ec:	f000 fa96 	bl	800e71c <xEventGroupSetBitsFromISR>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d103      	bne.n	800e1fe <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800e1f6:	f06f 0302 	mvn.w	r3, #2
 800e1fa:	617b      	str	r3, [r7, #20]
 800e1fc:	e012      	b.n	800e224 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00d      	beq.n	800e224 <osEventFlagsSet+0x78>
 800e208:	4b09      	ldr	r3, [pc, #36]	; (800e230 <osEventFlagsSet+0x84>)
 800e20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	e004      	b.n	800e224 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800e21a:	6839      	ldr	r1, [r7, #0]
 800e21c:	6938      	ldr	r0, [r7, #16]
 800e21e:	f000 f9c3 	bl	800e5a8 <xEventGroupSetBits>
 800e222:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800e224:	697b      	ldr	r3, [r7, #20]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	e000ed04 	.word	0xe000ed04

0800e234 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800e234:	b580      	push	{r7, lr}
 800e236:	b08c      	sub	sp, #48	; 0x30
 800e238:	af02      	add	r7, sp, #8
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d004      	beq.n	800e256 <osEventFlagsWait+0x22>
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800e256:	f06f 0303 	mvn.w	r3, #3
 800e25a:	61fb      	str	r3, [r7, #28]
 800e25c:	e04b      	b.n	800e2f6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e25e:	f3ef 8305 	mrs	r3, IPSR
 800e262:	617b      	str	r3, [r7, #20]
  return(result);
 800e264:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e266:	2b00      	cmp	r3, #0
 800e268:	d003      	beq.n	800e272 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800e26a:	f06f 0305 	mvn.w	r3, #5
 800e26e:	61fb      	str	r3, [r7, #28]
 800e270:	e041      	b.n	800e2f6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800e27c:	2301      	movs	r3, #1
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24
 800e280:	e001      	b.n	800e286 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800e282:	2300      	movs	r3, #0
 800e284:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f003 0302 	and.w	r3, r3, #2
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800e290:	2300      	movs	r3, #0
 800e292:	623b      	str	r3, [r7, #32]
 800e294:	e001      	b.n	800e29a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800e296:	2301      	movs	r3, #1
 800e298:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a0:	6a3a      	ldr	r2, [r7, #32]
 800e2a2:	68b9      	ldr	r1, [r7, #8]
 800e2a4:	69b8      	ldr	r0, [r7, #24]
 800e2a6:	f000 f8b1 	bl	800e40c <xEventGroupWaitBits>
 800e2aa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d010      	beq.n	800e2d8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800e2b6:	68ba      	ldr	r2, [r7, #8]
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d019      	beq.n	800e2f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d003      	beq.n	800e2d0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800e2c8:	f06f 0301 	mvn.w	r3, #1
 800e2cc:	61fb      	str	r3, [r7, #28]
 800e2ce:	e012      	b.n	800e2f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e2d0:	f06f 0302 	mvn.w	r3, #2
 800e2d4:	61fb      	str	r3, [r7, #28]
 800e2d6:	e00e      	b.n	800e2f6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	4013      	ands	r3, r2
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d109      	bne.n	800e2f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800e2e8:	f06f 0301 	mvn.w	r3, #1
 800e2ec:	61fb      	str	r3, [r7, #28]
 800e2ee:	e002      	b.n	800e2f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e2f0:	f06f 0302 	mvn.w	r3, #2
 800e2f4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e2f6:	69fb      	ldr	r3, [r7, #28]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3728      	adds	r7, #40	; 0x28
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	4a07      	ldr	r2, [pc, #28]	; (800e32c <vApplicationGetIdleTaskMemory+0x2c>)
 800e310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	4a06      	ldr	r2, [pc, #24]	; (800e330 <vApplicationGetIdleTaskMemory+0x30>)
 800e316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2280      	movs	r2, #128	; 0x80
 800e31c:	601a      	str	r2, [r3, #0]
}
 800e31e:	bf00      	nop
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	24000600 	.word	0x24000600
 800e330:	2400065c 	.word	0x2400065c

0800e334 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	4a07      	ldr	r2, [pc, #28]	; (800e360 <vApplicationGetTimerTaskMemory+0x2c>)
 800e344:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	4a06      	ldr	r2, [pc, #24]	; (800e364 <vApplicationGetTimerTaskMemory+0x30>)
 800e34a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e352:	601a      	str	r2, [r3, #0]
}
 800e354:	bf00      	nop
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr
 800e360:	2400085c 	.word	0x2400085c
 800e364:	240008b8 	.word	0x240008b8

0800e368 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10a      	bne.n	800e38c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37a:	f383 8811 	msr	BASEPRI, r3
 800e37e:	f3bf 8f6f 	isb	sy
 800e382:	f3bf 8f4f 	dsb	sy
 800e386:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e388:	bf00      	nop
 800e38a:	e7fe      	b.n	800e38a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e38c:	2320      	movs	r3, #32
 800e38e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	2b20      	cmp	r3, #32
 800e394:	d00a      	beq.n	800e3ac <xEventGroupCreateStatic+0x44>
	__asm volatile
 800e396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	60fb      	str	r3, [r7, #12]
}
 800e3a8:	bf00      	nop
 800e3aa:	e7fe      	b.n	800e3aa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 f9bf 	bl	800e744 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800e3cc:	697b      	ldr	r3, [r7, #20]
	}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3718      	adds	r7, #24
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b082      	sub	sp, #8
 800e3da:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800e3dc:	2020      	movs	r0, #32
 800e3de:	f002 fcc3 	bl	8010d68 <pvPortMalloc>
 800e3e2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00a      	beq.n	800e400 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f000 f9a5 	bl	800e744 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800e400:	687b      	ldr	r3, [r7, #4]
	}
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
	...

0800e40c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b090      	sub	sp, #64	; 0x40
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800e41e:	2300      	movs	r3, #0
 800e420:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e422:	2300      	movs	r3, #0
 800e424:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10a      	bne.n	800e442 <xEventGroupWaitBits+0x36>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	623b      	str	r3, [r7, #32]
}
 800e43e:	bf00      	nop
 800e440:	e7fe      	b.n	800e440 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00a      	beq.n	800e462 <xEventGroupWaitBits+0x56>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	61fb      	str	r3, [r7, #28]
}
 800e45e:	bf00      	nop
 800e460:	e7fe      	b.n	800e460 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10a      	bne.n	800e47e <xEventGroupWaitBits+0x72>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	61bb      	str	r3, [r7, #24]
}
 800e47a:	bf00      	nop
 800e47c:	e7fe      	b.n	800e47c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e47e:	f001 fdbd 	bl	800fffc <xTaskGetSchedulerState>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <xEventGroupWaitBits+0x82>
 800e488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d101      	bne.n	800e492 <xEventGroupWaitBits+0x86>
 800e48e:	2301      	movs	r3, #1
 800e490:	e000      	b.n	800e494 <xEventGroupWaitBits+0x88>
 800e492:	2300      	movs	r3, #0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	617b      	str	r3, [r7, #20]
}
 800e4aa:	bf00      	nop
 800e4ac:	e7fe      	b.n	800e4ac <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e4ae:	f001 f925 	bl	800f6fc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	68b9      	ldr	r1, [r7, #8]
 800e4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4be:	f000 f90b 	bl	800e6d8 <prvTestWaitCondition>
 800e4c2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00e      	beq.n	800e4e8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d028      	beq.n	800e52a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	43db      	mvns	r3, r3
 800e4e0:	401a      	ands	r2, r3
 800e4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e4:	601a      	str	r2, [r3, #0]
 800e4e6:	e020      	b.n	800e52a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d104      	bne.n	800e4f8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	633b      	str	r3, [r7, #48]	; 0x30
 800e4f6:	e018      	b.n	800e52a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d003      	beq.n	800e506 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e504:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e512:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e516:	1d18      	adds	r0, r3, #4
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51c:	4313      	orrs	r3, r2
 800e51e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e520:	4619      	mov	r1, r3
 800e522:	f001 fae3 	bl	800faec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e526:	2300      	movs	r3, #0
 800e528:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e52a:	f001 f8f5 	bl	800f718 <xTaskResumeAll>
 800e52e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e532:	2b00      	cmp	r3, #0
 800e534:	d031      	beq.n	800e59a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d107      	bne.n	800e54c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e53c:	4b19      	ldr	r3, [pc, #100]	; (800e5a4 <xEventGroupWaitBits+0x198>)
 800e53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e542:	601a      	str	r2, [r3, #0]
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e54c:	f001 fde2 	bl	8010114 <uxTaskResetEventItemValue>
 800e550:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d11a      	bne.n	800e592 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e55c:	f002 fae2 	bl	8010b24 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	68b9      	ldr	r1, [r7, #8]
 800e56a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e56c:	f000 f8b4 	bl	800e6d8 <prvTestWaitCondition>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d009      	beq.n	800e58a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d006      	beq.n	800e58a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	43db      	mvns	r3, r3
 800e584:	401a      	ands	r2, r3
 800e586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e588:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e58a:	2301      	movs	r3, #1
 800e58c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e58e:	f002 faf9 	bl	8010b84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e598:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3740      	adds	r7, #64	; 0x40
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	e000ed04 	.word	0xe000ed04

0800e5a8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b08e      	sub	sp, #56	; 0x38
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10a      	bne.n	800e5da <xEventGroupSetBits+0x32>
	__asm volatile
 800e5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c8:	f383 8811 	msr	BASEPRI, r3
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	613b      	str	r3, [r7, #16]
}
 800e5d6:	bf00      	nop
 800e5d8:	e7fe      	b.n	800e5d8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00a      	beq.n	800e5fa <xEventGroupSetBits+0x52>
	__asm volatile
 800e5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	60fb      	str	r3, [r7, #12]
}
 800e5f6:	bf00      	nop
 800e5f8:	e7fe      	b.n	800e5f8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	3304      	adds	r3, #4
 800e5fe:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	3308      	adds	r3, #8
 800e604:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e606:	f001 f879 	bl	800f6fc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	431a      	orrs	r2, r3
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e61c:	e03c      	b.n	800e698 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e62a:	2300      	movs	r3, #0
 800e62c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e634:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e63c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d108      	bne.n	800e65a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	4013      	ands	r3, r2
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00b      	beq.n	800e66c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800e654:	2301      	movs	r3, #1
 800e656:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e658:	e008      	b.n	800e66c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	4013      	ands	r3, r2
 800e662:	69ba      	ldr	r2, [r7, #24]
 800e664:	429a      	cmp	r2, r3
 800e666:	d101      	bne.n	800e66c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e668:	2301      	movs	r3, #1
 800e66a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d010      	beq.n	800e694 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d003      	beq.n	800e684 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	4313      	orrs	r3, r2
 800e682:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e68c:	4619      	mov	r1, r3
 800e68e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e690:	f001 faf8 	bl	800fc84 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800e698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d1be      	bne.n	800e61e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a6:	43db      	mvns	r3, r3
 800e6a8:	401a      	ands	r2, r3
 800e6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ac:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e6ae:	f001 f833 	bl	800f718 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b4:	681b      	ldr	r3, [r3, #0]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3738      	adds	r7, #56	; 0x38
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b082      	sub	sp, #8
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
 800e6c6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7ff ff6c 	bl	800e5a8 <xEventGroupSetBits>
}
 800e6d0:	bf00      	nop
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b087      	sub	sp, #28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d107      	bne.n	800e6fe <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	4013      	ands	r3, r2
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00a      	beq.n	800e70e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	617b      	str	r3, [r7, #20]
 800e6fc:	e007      	b.n	800e70e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e6fe:	68fa      	ldr	r2, [r7, #12]
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	4013      	ands	r3, r2
 800e704:	68ba      	ldr	r2, [r7, #8]
 800e706:	429a      	cmp	r2, r3
 800e708:	d101      	bne.n	800e70e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e70a:	2301      	movs	r3, #1
 800e70c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e70e:	697b      	ldr	r3, [r7, #20]
}
 800e710:	4618      	mov	r0, r3
 800e712:	371c      	adds	r7, #28
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	68f9      	ldr	r1, [r7, #12]
 800e72e:	4804      	ldr	r0, [pc, #16]	; (800e740 <xEventGroupSetBitsFromISR+0x24>)
 800e730:	f002 f8aa 	bl	8010888 <xTimerPendFunctionCallFromISR>
 800e734:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e736:	697b      	ldr	r3, [r7, #20]
	}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	0800e6bf 	.word	0x0800e6bf

0800e744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f103 0208 	add.w	r2, r3, #8
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e75c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f103 0208 	add.w	r2, r3, #8
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f103 0208 	add.w	r2, r3, #8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e792:	bf00      	nop
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	683a      	ldr	r2, [r7, #0]
 800e7c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	683a      	ldr	r2, [r7, #0]
 800e7c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	1c5a      	adds	r2, r3, #1
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	601a      	str	r2, [r3, #0]
}
 800e7da:	bf00      	nop
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b085      	sub	sp, #20
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7fc:	d103      	bne.n	800e806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e00c      	b.n	800e820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	3308      	adds	r3, #8
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e002      	b.n	800e814 <vListInsert+0x2e>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d2f6      	bcs.n	800e80e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	685a      	ldr	r2, [r3, #4]
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	601a      	str	r2, [r3, #0]
}
 800e84c:	bf00      	nop
 800e84e:	3714      	adds	r7, #20
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6892      	ldr	r2, [r2, #8]
 800e86e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6852      	ldr	r2, [r2, #4]
 800e878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d103      	bne.n	800e88c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	689a      	ldr	r2, [r3, #8]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	1e5a      	subs	r2, r3, #1
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3714      	adds	r7, #20
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d10a      	bne.n	800e8d6 <xQueueGenericReset+0x2a>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	60bb      	str	r3, [r7, #8]
}
 800e8d2:	bf00      	nop
 800e8d4:	e7fe      	b.n	800e8d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e8d6:	f002 f925 	bl	8010b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8e2:	68f9      	ldr	r1, [r7, #12]
 800e8e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8e6:	fb01 f303 	mul.w	r3, r1, r3
 800e8ea:	441a      	add	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e906:	3b01      	subs	r3, #1
 800e908:	68f9      	ldr	r1, [r7, #12]
 800e90a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e90c:	fb01 f303 	mul.w	r3, r1, r3
 800e910:	441a      	add	r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	22ff      	movs	r2, #255	; 0xff
 800e91a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	22ff      	movs	r2, #255	; 0xff
 800e922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d114      	bne.n	800e956 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d01a      	beq.n	800e96a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	3310      	adds	r3, #16
 800e938:	4618      	mov	r0, r3
 800e93a:	f001 f93f 	bl	800fbbc <xTaskRemoveFromEventList>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d012      	beq.n	800e96a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e944:	4b0c      	ldr	r3, [pc, #48]	; (800e978 <xQueueGenericReset+0xcc>)
 800e946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	f3bf 8f6f 	isb	sy
 800e954:	e009      	b.n	800e96a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	3310      	adds	r3, #16
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff fef2 	bl	800e744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	3324      	adds	r3, #36	; 0x24
 800e964:	4618      	mov	r0, r3
 800e966:	f7ff feed 	bl	800e744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e96a:	f002 f90b 	bl	8010b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e96e:	2301      	movs	r3, #1
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	e000ed04 	.word	0xe000ed04

0800e97c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08e      	sub	sp, #56	; 0x38
 800e980:	af02      	add	r7, sp, #8
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10a      	bne.n	800e9a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e994:	f383 8811 	msr	BASEPRI, r3
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9a2:	bf00      	nop
 800e9a4:	e7fe      	b.n	800e9a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10a      	bne.n	800e9c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9be:	bf00      	nop
 800e9c0:	e7fe      	b.n	800e9c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <xQueueGenericCreateStatic+0x52>
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <xQueueGenericCreateStatic+0x56>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e000      	b.n	800e9d4 <xQueueGenericCreateStatic+0x58>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10a      	bne.n	800e9ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	623b      	str	r3, [r7, #32]
}
 800e9ea:	bf00      	nop
 800e9ec:	e7fe      	b.n	800e9ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <xQueueGenericCreateStatic+0x7e>
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d101      	bne.n	800e9fe <xQueueGenericCreateStatic+0x82>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e000      	b.n	800ea00 <xQueueGenericCreateStatic+0x84>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10a      	bne.n	800ea1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	61fb      	str	r3, [r7, #28]
}
 800ea16:	bf00      	nop
 800ea18:	e7fe      	b.n	800ea18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ea1a:	2350      	movs	r3, #80	; 0x50
 800ea1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2b50      	cmp	r3, #80	; 0x50
 800ea22:	d00a      	beq.n	800ea3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ea24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea28:	f383 8811 	msr	BASEPRI, r3
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	61bb      	str	r3, [r7, #24]
}
 800ea36:	bf00      	nop
 800ea38:	e7fe      	b.n	800ea38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00d      	beq.n	800ea62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	4613      	mov	r3, r2
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	68b9      	ldr	r1, [r7, #8]
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f000 f805 	bl	800ea6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3730      	adds	r7, #48	; 0x30
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	69ba      	ldr	r2, [r7, #24]
 800ea84:	601a      	str	r2, [r3, #0]
 800ea86:	e002      	b.n	800ea8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	69b8      	ldr	r0, [r7, #24]
 800ea9e:	f7ff ff05 	bl	800e8ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	78fa      	ldrb	r2, [r7, #3]
 800eaa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eaaa:	bf00      	nop
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
	...

0800eab4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08e      	sub	sp, #56	; 0x38
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eac2:	2300      	movs	r3, #0
 800eac4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d10a      	bne.n	800eae6 <xQueueGenericSend+0x32>
	__asm volatile
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eae2:	bf00      	nop
 800eae4:	e7fe      	b.n	800eae4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d103      	bne.n	800eaf4 <xQueueGenericSend+0x40>
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <xQueueGenericSend+0x44>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e000      	b.n	800eafa <xQueueGenericSend+0x46>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10a      	bne.n	800eb14 <xQueueGenericSend+0x60>
	__asm volatile
 800eafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb02:	f383 8811 	msr	BASEPRI, r3
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb10:	bf00      	nop
 800eb12:	e7fe      	b.n	800eb12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d103      	bne.n	800eb22 <xQueueGenericSend+0x6e>
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d101      	bne.n	800eb26 <xQueueGenericSend+0x72>
 800eb22:	2301      	movs	r3, #1
 800eb24:	e000      	b.n	800eb28 <xQueueGenericSend+0x74>
 800eb26:	2300      	movs	r3, #0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d10a      	bne.n	800eb42 <xQueueGenericSend+0x8e>
	__asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	623b      	str	r3, [r7, #32]
}
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb42:	f001 fa5b 	bl	800fffc <xTaskGetSchedulerState>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d102      	bne.n	800eb52 <xQueueGenericSend+0x9e>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <xQueueGenericSend+0xa2>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <xQueueGenericSend+0xa4>
 800eb56:	2300      	movs	r3, #0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10a      	bne.n	800eb72 <xQueueGenericSend+0xbe>
	__asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	61fb      	str	r3, [r7, #28]
}
 800eb6e:	bf00      	nop
 800eb70:	e7fe      	b.n	800eb70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb72:	f001 ffd7 	bl	8010b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d302      	bcc.n	800eb88 <xQueueGenericSend+0xd4>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d129      	bne.n	800ebdc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	68b9      	ldr	r1, [r7, #8]
 800eb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb8e:	f000 fa0b 	bl	800efa8 <prvCopyDataToQueue>
 800eb92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d010      	beq.n	800ebbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9e:	3324      	adds	r3, #36	; 0x24
 800eba0:	4618      	mov	r0, r3
 800eba2:	f001 f80b 	bl	800fbbc <xTaskRemoveFromEventList>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d013      	beq.n	800ebd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ebac:	4b3f      	ldr	r3, [pc, #252]	; (800ecac <xQueueGenericSend+0x1f8>)
 800ebae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	e00a      	b.n	800ebd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d007      	beq.n	800ebd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ebc4:	4b39      	ldr	r3, [pc, #228]	; (800ecac <xQueueGenericSend+0x1f8>)
 800ebc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebca:	601a      	str	r2, [r3, #0]
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ebd4:	f001 ffd6 	bl	8010b84 <vPortExitCritical>
				return pdPASS;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e063      	b.n	800eca4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d103      	bne.n	800ebea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebe2:	f001 ffcf 	bl	8010b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	e05c      	b.n	800eca4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d106      	bne.n	800ebfe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebf0:	f107 0314 	add.w	r3, r7, #20
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f001 f8a7 	bl	800fd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebfe:	f001 ffc1 	bl	8010b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec02:	f000 fd7b 	bl	800f6fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec06:	f001 ff8d 	bl	8010b24 <vPortEnterCritical>
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec10:	b25b      	sxtb	r3, r3
 800ec12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec16:	d103      	bne.n	800ec20 <xQueueGenericSend+0x16c>
 800ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec26:	b25b      	sxtb	r3, r3
 800ec28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec2c:	d103      	bne.n	800ec36 <xQueueGenericSend+0x182>
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec36:	f001 ffa5 	bl	8010b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec3a:	1d3a      	adds	r2, r7, #4
 800ec3c:	f107 0314 	add.w	r3, r7, #20
 800ec40:	4611      	mov	r1, r2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 f896 	bl	800fd74 <xTaskCheckForTimeOut>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d124      	bne.n	800ec98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec50:	f000 faa2 	bl	800f198 <prvIsQueueFull>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d018      	beq.n	800ec8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	3310      	adds	r3, #16
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	4611      	mov	r1, r2
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 ff1e 	bl	800faa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec6a:	f000 fa2d 	bl	800f0c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec6e:	f000 fd53 	bl	800f718 <xTaskResumeAll>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f47f af7c 	bne.w	800eb72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ec7a:	4b0c      	ldr	r3, [pc, #48]	; (800ecac <xQueueGenericSend+0x1f8>)
 800ec7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec80:	601a      	str	r2, [r3, #0]
 800ec82:	f3bf 8f4f 	dsb	sy
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	e772      	b.n	800eb72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec8e:	f000 fa1b 	bl	800f0c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec92:	f000 fd41 	bl	800f718 <xTaskResumeAll>
 800ec96:	e76c      	b.n	800eb72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec9a:	f000 fa15 	bl	800f0c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec9e:	f000 fd3b 	bl	800f718 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eca2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3738      	adds	r7, #56	; 0x38
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	e000ed04 	.word	0xe000ed04

0800ecb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b090      	sub	sp, #64	; 0x40
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
 800ecbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10a      	bne.n	800ecde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ecc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eccc:	f383 8811 	msr	BASEPRI, r3
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ecda:	bf00      	nop
 800ecdc:	e7fe      	b.n	800ecdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d103      	bne.n	800ecec <xQueueGenericSendFromISR+0x3c>
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d101      	bne.n	800ecf0 <xQueueGenericSendFromISR+0x40>
 800ecec:	2301      	movs	r3, #1
 800ecee:	e000      	b.n	800ecf2 <xQueueGenericSendFromISR+0x42>
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d10a      	bne.n	800ed0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ecf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfa:	f383 8811 	msr	BASEPRI, r3
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f3bf 8f4f 	dsb	sy
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed08:	bf00      	nop
 800ed0a:	e7fe      	b.n	800ed0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d103      	bne.n	800ed1a <xQueueGenericSendFromISR+0x6a>
 800ed12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d101      	bne.n	800ed1e <xQueueGenericSendFromISR+0x6e>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	e000      	b.n	800ed20 <xQueueGenericSendFromISR+0x70>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10a      	bne.n	800ed3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ed24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed28:	f383 8811 	msr	BASEPRI, r3
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	623b      	str	r3, [r7, #32]
}
 800ed36:	bf00      	nop
 800ed38:	e7fe      	b.n	800ed38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed3a:	f001 ffd5 	bl	8010ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed3e:	f3ef 8211 	mrs	r2, BASEPRI
 800ed42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	61fa      	str	r2, [r7, #28]
 800ed54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d302      	bcc.n	800ed6c <xQueueGenericSendFromISR+0xbc>
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d12f      	bne.n	800edcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	68b9      	ldr	r1, [r7, #8]
 800ed80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed82:	f000 f911 	bl	800efa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ed8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed8e:	d112      	bne.n	800edb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d016      	beq.n	800edc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	3324      	adds	r3, #36	; 0x24
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f000 ff0d 	bl	800fbbc <xTaskRemoveFromEventList>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00e      	beq.n	800edc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00b      	beq.n	800edc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	e007      	b.n	800edc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800edb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edba:	3301      	adds	r3, #1
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	b25a      	sxtb	r2, r3
 800edc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800edc6:	2301      	movs	r3, #1
 800edc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800edca:	e001      	b.n	800edd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edcc:	2300      	movs	r3, #0
 800edce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800edda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3740      	adds	r7, #64	; 0x40
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
	...

0800ede8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08c      	sub	sp, #48	; 0x30
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800edf4:	2300      	movs	r3, #0
 800edf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10a      	bne.n	800ee18 <xQueueReceive+0x30>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	623b      	str	r3, [r7, #32]
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d103      	bne.n	800ee26 <xQueueReceive+0x3e>
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d101      	bne.n	800ee2a <xQueueReceive+0x42>
 800ee26:	2301      	movs	r3, #1
 800ee28:	e000      	b.n	800ee2c <xQueueReceive+0x44>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10a      	bne.n	800ee46 <xQueueReceive+0x5e>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	61fb      	str	r3, [r7, #28]
}
 800ee42:	bf00      	nop
 800ee44:	e7fe      	b.n	800ee44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee46:	f001 f8d9 	bl	800fffc <xTaskGetSchedulerState>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <xQueueReceive+0x6e>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d101      	bne.n	800ee5a <xQueueReceive+0x72>
 800ee56:	2301      	movs	r3, #1
 800ee58:	e000      	b.n	800ee5c <xQueueReceive+0x74>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10a      	bne.n	800ee76 <xQueueReceive+0x8e>
	__asm volatile
 800ee60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	61bb      	str	r3, [r7, #24]
}
 800ee72:	bf00      	nop
 800ee74:	e7fe      	b.n	800ee74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee76:	f001 fe55 	bl	8010b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d01f      	beq.n	800eec6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee86:	68b9      	ldr	r1, [r7, #8]
 800ee88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee8a:	f000 f8f7 	bl	800f07c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee90:	1e5a      	subs	r2, r3, #1
 800ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee98:	691b      	ldr	r3, [r3, #16]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00f      	beq.n	800eebe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	3310      	adds	r3, #16
 800eea2:	4618      	mov	r0, r3
 800eea4:	f000 fe8a 	bl	800fbbc <xTaskRemoveFromEventList>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eeae:	4b3d      	ldr	r3, [pc, #244]	; (800efa4 <xQueueReceive+0x1bc>)
 800eeb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeb4:	601a      	str	r2, [r3, #0]
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eebe:	f001 fe61 	bl	8010b84 <vPortExitCritical>
				return pdPASS;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e069      	b.n	800ef9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d103      	bne.n	800eed4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eecc:	f001 fe5a 	bl	8010b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eed0:	2300      	movs	r3, #0
 800eed2:	e062      	b.n	800ef9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eeda:	f107 0310 	add.w	r3, r7, #16
 800eede:	4618      	mov	r0, r3
 800eee0:	f000 ff32 	bl	800fd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eee4:	2301      	movs	r3, #1
 800eee6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eee8:	f001 fe4c 	bl	8010b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eeec:	f000 fc06 	bl	800f6fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eef0:	f001 fe18 	bl	8010b24 <vPortEnterCritical>
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eefa:	b25b      	sxtb	r3, r3
 800eefc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef00:	d103      	bne.n	800ef0a <xQueueReceive+0x122>
 800ef02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef04:	2200      	movs	r2, #0
 800ef06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef10:	b25b      	sxtb	r3, r3
 800ef12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef16:	d103      	bne.n	800ef20 <xQueueReceive+0x138>
 800ef18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef20:	f001 fe30 	bl	8010b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef24:	1d3a      	adds	r2, r7, #4
 800ef26:	f107 0310 	add.w	r3, r7, #16
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 ff21 	bl	800fd74 <xTaskCheckForTimeOut>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d123      	bne.n	800ef80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef3a:	f000 f917 	bl	800f16c <prvIsQueueEmpty>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d017      	beq.n	800ef74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	3324      	adds	r3, #36	; 0x24
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 fda9 	bl	800faa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef54:	f000 f8b8 	bl	800f0c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef58:	f000 fbde 	bl	800f718 <xTaskResumeAll>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d189      	bne.n	800ee76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ef62:	4b10      	ldr	r3, [pc, #64]	; (800efa4 <xQueueReceive+0x1bc>)
 800ef64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef68:	601a      	str	r2, [r3, #0]
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	f3bf 8f6f 	isb	sy
 800ef72:	e780      	b.n	800ee76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef76:	f000 f8a7 	bl	800f0c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef7a:	f000 fbcd 	bl	800f718 <xTaskResumeAll>
 800ef7e:	e77a      	b.n	800ee76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef82:	f000 f8a1 	bl	800f0c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef86:	f000 fbc7 	bl	800f718 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef8c:	f000 f8ee 	bl	800f16c <prvIsQueueEmpty>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f43f af6f 	beq.w	800ee76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3730      	adds	r7, #48	; 0x30
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	e000ed04 	.word	0xe000ed04

0800efa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800efb4:	2300      	movs	r3, #0
 800efb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10d      	bne.n	800efe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d14d      	bne.n	800f06a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f001 f830 	bl	8010038 <xTaskPriorityDisinherit>
 800efd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2200      	movs	r2, #0
 800efde:	609a      	str	r2, [r3, #8]
 800efe0:	e043      	b.n	800f06a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d119      	bne.n	800f01c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6858      	ldr	r0, [r3, #4]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff0:	461a      	mov	r2, r3
 800eff2:	68b9      	ldr	r1, [r7, #8]
 800eff4:	f002 f8cc 	bl	8011190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	685a      	ldr	r2, [r3, #4]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f000:	441a      	add	r2, r3
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	685a      	ldr	r2, [r3, #4]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d32b      	bcc.n	800f06a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	605a      	str	r2, [r3, #4]
 800f01a:	e026      	b.n	800f06a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	68d8      	ldr	r0, [r3, #12]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f024:	461a      	mov	r2, r3
 800f026:	68b9      	ldr	r1, [r7, #8]
 800f028:	f002 f8b2 	bl	8011190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	68da      	ldr	r2, [r3, #12]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f034:	425b      	negs	r3, r3
 800f036:	441a      	add	r2, r3
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	68da      	ldr	r2, [r3, #12]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	429a      	cmp	r2, r3
 800f046:	d207      	bcs.n	800f058 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	689a      	ldr	r2, [r3, #8]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f050:	425b      	negs	r3, r3
 800f052:	441a      	add	r2, r3
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	d105      	bne.n	800f06a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d002      	beq.n	800f06a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	3b01      	subs	r3, #1
 800f068:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f072:	697b      	ldr	r3, [r7, #20]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3718      	adds	r7, #24
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d018      	beq.n	800f0c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	68da      	ldr	r2, [r3, #12]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f096:	441a      	add	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	68da      	ldr	r2, [r3, #12]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d303      	bcc.n	800f0b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	68d9      	ldr	r1, [r3, #12]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	6838      	ldr	r0, [r7, #0]
 800f0bc:	f002 f868 	bl	8011190 <memcpy>
	}
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f0d0:	f001 fd28 	bl	8010b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0dc:	e011      	b.n	800f102 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d012      	beq.n	800f10c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	3324      	adds	r3, #36	; 0x24
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fd66 	bl	800fbbc <xTaskRemoveFromEventList>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f0f6:	f000 fe9f 	bl	800fe38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f106:	2b00      	cmp	r3, #0
 800f108:	dce9      	bgt.n	800f0de <prvUnlockQueue+0x16>
 800f10a:	e000      	b.n	800f10e <prvUnlockQueue+0x46>
					break;
 800f10c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	22ff      	movs	r2, #255	; 0xff
 800f112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f116:	f001 fd35 	bl	8010b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f11a:	f001 fd03 	bl	8010b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f124:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f126:	e011      	b.n	800f14c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	691b      	ldr	r3, [r3, #16]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d012      	beq.n	800f156 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	3310      	adds	r3, #16
 800f134:	4618      	mov	r0, r3
 800f136:	f000 fd41 	bl	800fbbc <xTaskRemoveFromEventList>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f140:	f000 fe7a 	bl	800fe38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	3b01      	subs	r3, #1
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f14c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f150:	2b00      	cmp	r3, #0
 800f152:	dce9      	bgt.n	800f128 <prvUnlockQueue+0x60>
 800f154:	e000      	b.n	800f158 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f156:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	22ff      	movs	r2, #255	; 0xff
 800f15c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f160:	f001 fd10 	bl	8010b84 <vPortExitCritical>
}
 800f164:	bf00      	nop
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f174:	f001 fcd6 	bl	8010b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d102      	bne.n	800f186 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f180:	2301      	movs	r3, #1
 800f182:	60fb      	str	r3, [r7, #12]
 800f184:	e001      	b.n	800f18a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f186:	2300      	movs	r3, #0
 800f188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f18a:	f001 fcfb 	bl	8010b84 <vPortExitCritical>

	return xReturn;
 800f18e:	68fb      	ldr	r3, [r7, #12]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1a0:	f001 fcc0 	bl	8010b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d102      	bne.n	800f1b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	e001      	b.n	800f1ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f1ba:	f001 fce3 	bl	8010b84 <vPortExitCritical>

	return xReturn;
 800f1be:	68fb      	ldr	r3, [r7, #12]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	60fb      	str	r3, [r7, #12]
 800f1d6:	e014      	b.n	800f202 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f1d8:	4a0f      	ldr	r2, [pc, #60]	; (800f218 <vQueueAddToRegistry+0x50>)
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10b      	bne.n	800f1fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f1e4:	490c      	ldr	r1, [pc, #48]	; (800f218 <vQueueAddToRegistry+0x50>)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	683a      	ldr	r2, [r7, #0]
 800f1ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f1ee:	4a0a      	ldr	r2, [pc, #40]	; (800f218 <vQueueAddToRegistry+0x50>)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	4413      	add	r3, r2
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f1fa:	e006      	b.n	800f20a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	3301      	adds	r3, #1
 800f200:	60fb      	str	r3, [r7, #12]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2b07      	cmp	r3, #7
 800f206:	d9e7      	bls.n	800f1d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f208:	bf00      	nop
 800f20a:	bf00      	nop
 800f20c:	3714      	adds	r7, #20
 800f20e:	46bd      	mov	sp, r7
 800f210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop
 800f218:	24000cb8 	.word	0x24000cb8

0800f21c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f22c:	f001 fc7a 	bl	8010b24 <vPortEnterCritical>
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f236:	b25b      	sxtb	r3, r3
 800f238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f23c:	d103      	bne.n	800f246 <vQueueWaitForMessageRestricted+0x2a>
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f24c:	b25b      	sxtb	r3, r3
 800f24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f252:	d103      	bne.n	800f25c <vQueueWaitForMessageRestricted+0x40>
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f25c:	f001 fc92 	bl	8010b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	3324      	adds	r3, #36	; 0x24
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	68b9      	ldr	r1, [r7, #8]
 800f270:	4618      	mov	r0, r3
 800f272:	f000 fc77 	bl	800fb64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f276:	6978      	ldr	r0, [r7, #20]
 800f278:	f7ff ff26 	bl	800f0c8 <prvUnlockQueue>
	}
 800f27c:	bf00      	nop
 800f27e:	3718      	adds	r7, #24
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08e      	sub	sp, #56	; 0x38
 800f288:	af04      	add	r7, sp, #16
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10a      	bne.n	800f2ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800f298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29c:	f383 8811 	msr	BASEPRI, r3
 800f2a0:	f3bf 8f6f 	isb	sy
 800f2a4:	f3bf 8f4f 	dsb	sy
 800f2a8:	623b      	str	r3, [r7, #32]
}
 800f2aa:	bf00      	nop
 800f2ac:	e7fe      	b.n	800f2ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10a      	bne.n	800f2ca <xTaskCreateStatic+0x46>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	61fb      	str	r3, [r7, #28]
}
 800f2c6:	bf00      	nop
 800f2c8:	e7fe      	b.n	800f2c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f2ca:	235c      	movs	r3, #92	; 0x5c
 800f2cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	2b5c      	cmp	r3, #92	; 0x5c
 800f2d2:	d00a      	beq.n	800f2ea <xTaskCreateStatic+0x66>
	__asm volatile
 800f2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	61bb      	str	r3, [r7, #24]
}
 800f2e6:	bf00      	nop
 800f2e8:	e7fe      	b.n	800f2e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f2ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d01e      	beq.n	800f330 <xTaskCreateStatic+0xac>
 800f2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d01b      	beq.n	800f330 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f300:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f304:	2202      	movs	r2, #2
 800f306:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f30a:	2300      	movs	r3, #0
 800f30c:	9303      	str	r3, [sp, #12]
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	9302      	str	r3, [sp, #8]
 800f312:	f107 0314 	add.w	r3, r7, #20
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f000 f850 	bl	800f3c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f32a:	f000 f8dd 	bl	800f4e8 <prvAddNewTaskToReadyList>
 800f32e:	e001      	b.n	800f334 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f330:	2300      	movs	r3, #0
 800f332:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f334:	697b      	ldr	r3, [r7, #20]
	}
 800f336:	4618      	mov	r0, r3
 800f338:	3728      	adds	r7, #40	; 0x28
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}

0800f33e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b08c      	sub	sp, #48	; 0x30
 800f342:	af04      	add	r7, sp, #16
 800f344:	60f8      	str	r0, [r7, #12]
 800f346:	60b9      	str	r1, [r7, #8]
 800f348:	603b      	str	r3, [r7, #0]
 800f34a:	4613      	mov	r3, r2
 800f34c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f34e:	88fb      	ldrh	r3, [r7, #6]
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	4618      	mov	r0, r3
 800f354:	f001 fd08 	bl	8010d68 <pvPortMalloc>
 800f358:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00e      	beq.n	800f37e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f360:	205c      	movs	r0, #92	; 0x5c
 800f362:	f001 fd01 	bl	8010d68 <pvPortMalloc>
 800f366:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d003      	beq.n	800f376 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	697a      	ldr	r2, [r7, #20]
 800f372:	631a      	str	r2, [r3, #48]	; 0x30
 800f374:	e005      	b.n	800f382 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f376:	6978      	ldr	r0, [r7, #20]
 800f378:	f001 fdc2 	bl	8010f00 <vPortFree>
 800f37c:	e001      	b.n	800f382 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f37e:	2300      	movs	r3, #0
 800f380:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d017      	beq.n	800f3b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f390:	88fa      	ldrh	r2, [r7, #6]
 800f392:	2300      	movs	r3, #0
 800f394:	9303      	str	r3, [sp, #12]
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	9302      	str	r3, [sp, #8]
 800f39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39c:	9301      	str	r3, [sp, #4]
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	68b9      	ldr	r1, [r7, #8]
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f000 f80e 	bl	800f3c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3ac:	69f8      	ldr	r0, [r7, #28]
 800f3ae:	f000 f89b 	bl	800f4e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	61bb      	str	r3, [r7, #24]
 800f3b6:	e002      	b.n	800f3be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f3be:	69bb      	ldr	r3, [r7, #24]
	}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3720      	adds	r7, #32
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	461a      	mov	r2, r3
 800f3e0:	21a5      	movs	r1, #165	; 0xa5
 800f3e2:	f001 fee3 	bl	80111ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3ea:	6879      	ldr	r1, [r7, #4]
 800f3ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f3f0:	440b      	add	r3, r1
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	4413      	add	r3, r2
 800f3f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	f023 0307 	bic.w	r3, r3, #7
 800f3fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	f003 0307 	and.w	r3, r3, #7
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00a      	beq.n	800f420 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	617b      	str	r3, [r7, #20]
}
 800f41c:	bf00      	nop
 800f41e:	e7fe      	b.n	800f41e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d01f      	beq.n	800f466 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f426:	2300      	movs	r3, #0
 800f428:	61fb      	str	r3, [r7, #28]
 800f42a:	e012      	b.n	800f452 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	4413      	add	r3, r2
 800f432:	7819      	ldrb	r1, [r3, #0]
 800f434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	4413      	add	r3, r2
 800f43a:	3334      	adds	r3, #52	; 0x34
 800f43c:	460a      	mov	r2, r1
 800f43e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	4413      	add	r3, r2
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d006      	beq.n	800f45a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	3301      	adds	r3, #1
 800f450:	61fb      	str	r3, [r7, #28]
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	2b0f      	cmp	r3, #15
 800f456:	d9e9      	bls.n	800f42c <prvInitialiseNewTask+0x64>
 800f458:	e000      	b.n	800f45c <prvInitialiseNewTask+0x94>
			{
				break;
 800f45a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45e:	2200      	movs	r2, #0
 800f460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f464:	e003      	b.n	800f46e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f470:	2b37      	cmp	r3, #55	; 0x37
 800f472:	d901      	bls.n	800f478 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f474:	2337      	movs	r3, #55	; 0x37
 800f476:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f47c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f482:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f486:	2200      	movs	r2, #0
 800f488:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48c:	3304      	adds	r3, #4
 800f48e:	4618      	mov	r0, r3
 800f490:	f7ff f978 	bl	800e784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f496:	3318      	adds	r3, #24
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff f973 	bl	800e784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f4c2:	683a      	ldr	r2, [r7, #0]
 800f4c4:	68f9      	ldr	r1, [r7, #12]
 800f4c6:	69b8      	ldr	r0, [r7, #24]
 800f4c8:	f001 f9fe 	bl	80108c8 <pxPortInitialiseStack>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d002      	beq.n	800f4de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4de:	bf00      	nop
 800f4e0:	3720      	adds	r7, #32
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
	...

0800f4e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f4f0:	f001 fb18 	bl	8010b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f4f4:	4b2d      	ldr	r3, [pc, #180]	; (800f5ac <prvAddNewTaskToReadyList+0xc4>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	4a2c      	ldr	r2, [pc, #176]	; (800f5ac <prvAddNewTaskToReadyList+0xc4>)
 800f4fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f4fe:	4b2c      	ldr	r3, [pc, #176]	; (800f5b0 <prvAddNewTaskToReadyList+0xc8>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d109      	bne.n	800f51a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f506:	4a2a      	ldr	r2, [pc, #168]	; (800f5b0 <prvAddNewTaskToReadyList+0xc8>)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f50c:	4b27      	ldr	r3, [pc, #156]	; (800f5ac <prvAddNewTaskToReadyList+0xc4>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b01      	cmp	r3, #1
 800f512:	d110      	bne.n	800f536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f514:	f000 fcb4 	bl	800fe80 <prvInitialiseTaskLists>
 800f518:	e00d      	b.n	800f536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f51a:	4b26      	ldr	r3, [pc, #152]	; (800f5b4 <prvAddNewTaskToReadyList+0xcc>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d109      	bne.n	800f536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f522:	4b23      	ldr	r3, [pc, #140]	; (800f5b0 <prvAddNewTaskToReadyList+0xc8>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d802      	bhi.n	800f536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f530:	4a1f      	ldr	r2, [pc, #124]	; (800f5b0 <prvAddNewTaskToReadyList+0xc8>)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f536:	4b20      	ldr	r3, [pc, #128]	; (800f5b8 <prvAddNewTaskToReadyList+0xd0>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	3301      	adds	r3, #1
 800f53c:	4a1e      	ldr	r2, [pc, #120]	; (800f5b8 <prvAddNewTaskToReadyList+0xd0>)
 800f53e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f540:	4b1d      	ldr	r3, [pc, #116]	; (800f5b8 <prvAddNewTaskToReadyList+0xd0>)
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f54c:	4b1b      	ldr	r3, [pc, #108]	; (800f5bc <prvAddNewTaskToReadyList+0xd4>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	429a      	cmp	r2, r3
 800f552:	d903      	bls.n	800f55c <prvAddNewTaskToReadyList+0x74>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f558:	4a18      	ldr	r2, [pc, #96]	; (800f5bc <prvAddNewTaskToReadyList+0xd4>)
 800f55a:	6013      	str	r3, [r2, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f560:	4613      	mov	r3, r2
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	4a15      	ldr	r2, [pc, #84]	; (800f5c0 <prvAddNewTaskToReadyList+0xd8>)
 800f56a:	441a      	add	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3304      	adds	r3, #4
 800f570:	4619      	mov	r1, r3
 800f572:	4610      	mov	r0, r2
 800f574:	f7ff f913 	bl	800e79e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f578:	f001 fb04 	bl	8010b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f57c:	4b0d      	ldr	r3, [pc, #52]	; (800f5b4 <prvAddNewTaskToReadyList+0xcc>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00e      	beq.n	800f5a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f584:	4b0a      	ldr	r3, [pc, #40]	; (800f5b0 <prvAddNewTaskToReadyList+0xc8>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58e:	429a      	cmp	r2, r3
 800f590:	d207      	bcs.n	800f5a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f592:	4b0c      	ldr	r3, [pc, #48]	; (800f5c4 <prvAddNewTaskToReadyList+0xdc>)
 800f594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f598:	601a      	str	r2, [r3, #0]
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5a2:	bf00      	nop
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	240011cc 	.word	0x240011cc
 800f5b0:	24000cf8 	.word	0x24000cf8
 800f5b4:	240011d8 	.word	0x240011d8
 800f5b8:	240011e8 	.word	0x240011e8
 800f5bc:	240011d4 	.word	0x240011d4
 800f5c0:	24000cfc 	.word	0x24000cfc
 800f5c4:	e000ed04 	.word	0xe000ed04

0800f5c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d017      	beq.n	800f60a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f5da:	4b13      	ldr	r3, [pc, #76]	; (800f628 <vTaskDelay+0x60>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00a      	beq.n	800f5f8 <vTaskDelay+0x30>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	60bb      	str	r3, [r7, #8]
}
 800f5f4:	bf00      	nop
 800f5f6:	e7fe      	b.n	800f5f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f5f8:	f000 f880 	bl	800f6fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fda0 	bl	8010144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f604:	f000 f888 	bl	800f718 <xTaskResumeAll>
 800f608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d107      	bne.n	800f620 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f610:	4b06      	ldr	r3, [pc, #24]	; (800f62c <vTaskDelay+0x64>)
 800f612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f616:	601a      	str	r2, [r3, #0]
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f620:	bf00      	nop
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	240011f4 	.word	0x240011f4
 800f62c:	e000ed04 	.word	0xe000ed04

0800f630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b08a      	sub	sp, #40	; 0x28
 800f634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f636:	2300      	movs	r3, #0
 800f638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f63a:	2300      	movs	r3, #0
 800f63c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f63e:	463a      	mov	r2, r7
 800f640:	1d39      	adds	r1, r7, #4
 800f642:	f107 0308 	add.w	r3, r7, #8
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe fe5a 	bl	800e300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f64c:	6839      	ldr	r1, [r7, #0]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	68ba      	ldr	r2, [r7, #8]
 800f652:	9202      	str	r2, [sp, #8]
 800f654:	9301      	str	r3, [sp, #4]
 800f656:	2300      	movs	r3, #0
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	2300      	movs	r3, #0
 800f65c:	460a      	mov	r2, r1
 800f65e:	4921      	ldr	r1, [pc, #132]	; (800f6e4 <vTaskStartScheduler+0xb4>)
 800f660:	4821      	ldr	r0, [pc, #132]	; (800f6e8 <vTaskStartScheduler+0xb8>)
 800f662:	f7ff fe0f 	bl	800f284 <xTaskCreateStatic>
 800f666:	4603      	mov	r3, r0
 800f668:	4a20      	ldr	r2, [pc, #128]	; (800f6ec <vTaskStartScheduler+0xbc>)
 800f66a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f66c:	4b1f      	ldr	r3, [pc, #124]	; (800f6ec <vTaskStartScheduler+0xbc>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d002      	beq.n	800f67a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f674:	2301      	movs	r3, #1
 800f676:	617b      	str	r3, [r7, #20]
 800f678:	e001      	b.n	800f67e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f67a:	2300      	movs	r3, #0
 800f67c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d102      	bne.n	800f68a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f684:	f000 fdb2 	bl	80101ec <xTimerCreateTimerTask>
 800f688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d116      	bne.n	800f6be <vTaskStartScheduler+0x8e>
	__asm volatile
 800f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	613b      	str	r3, [r7, #16]
}
 800f6a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f6a4:	4b12      	ldr	r3, [pc, #72]	; (800f6f0 <vTaskStartScheduler+0xc0>)
 800f6a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f6ac:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <vTaskStartScheduler+0xc4>)
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f6b2:	4b11      	ldr	r3, [pc, #68]	; (800f6f8 <vTaskStartScheduler+0xc8>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f6b8:	f001 f992 	bl	80109e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f6bc:	e00e      	b.n	800f6dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6c4:	d10a      	bne.n	800f6dc <vTaskStartScheduler+0xac>
	__asm volatile
 800f6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ca:	f383 8811 	msr	BASEPRI, r3
 800f6ce:	f3bf 8f6f 	isb	sy
 800f6d2:	f3bf 8f4f 	dsb	sy
 800f6d6:	60fb      	str	r3, [r7, #12]
}
 800f6d8:	bf00      	nop
 800f6da:	e7fe      	b.n	800f6da <vTaskStartScheduler+0xaa>
}
 800f6dc:	bf00      	nop
 800f6de:	3718      	adds	r7, #24
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	08011d94 	.word	0x08011d94
 800f6e8:	0800fe51 	.word	0x0800fe51
 800f6ec:	240011f0 	.word	0x240011f0
 800f6f0:	240011ec 	.word	0x240011ec
 800f6f4:	240011d8 	.word	0x240011d8
 800f6f8:	240011d0 	.word	0x240011d0

0800f6fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f700:	4b04      	ldr	r3, [pc, #16]	; (800f714 <vTaskSuspendAll+0x18>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3301      	adds	r3, #1
 800f706:	4a03      	ldr	r2, [pc, #12]	; (800f714 <vTaskSuspendAll+0x18>)
 800f708:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f70a:	bf00      	nop
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr
 800f714:	240011f4 	.word	0x240011f4

0800f718 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f71e:	2300      	movs	r3, #0
 800f720:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f722:	2300      	movs	r3, #0
 800f724:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f726:	4b42      	ldr	r3, [pc, #264]	; (800f830 <xTaskResumeAll+0x118>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10a      	bne.n	800f744 <xTaskResumeAll+0x2c>
	__asm volatile
 800f72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f732:	f383 8811 	msr	BASEPRI, r3
 800f736:	f3bf 8f6f 	isb	sy
 800f73a:	f3bf 8f4f 	dsb	sy
 800f73e:	603b      	str	r3, [r7, #0]
}
 800f740:	bf00      	nop
 800f742:	e7fe      	b.n	800f742 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f744:	f001 f9ee 	bl	8010b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f748:	4b39      	ldr	r3, [pc, #228]	; (800f830 <xTaskResumeAll+0x118>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	3b01      	subs	r3, #1
 800f74e:	4a38      	ldr	r2, [pc, #224]	; (800f830 <xTaskResumeAll+0x118>)
 800f750:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f752:	4b37      	ldr	r3, [pc, #220]	; (800f830 <xTaskResumeAll+0x118>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d162      	bne.n	800f820 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f75a:	4b36      	ldr	r3, [pc, #216]	; (800f834 <xTaskResumeAll+0x11c>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d05e      	beq.n	800f820 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f762:	e02f      	b.n	800f7c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f764:	4b34      	ldr	r3, [pc, #208]	; (800f838 <xTaskResumeAll+0x120>)
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	3318      	adds	r3, #24
 800f770:	4618      	mov	r0, r3
 800f772:	f7ff f871 	bl	800e858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	3304      	adds	r3, #4
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7ff f86c 	bl	800e858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f784:	4b2d      	ldr	r3, [pc, #180]	; (800f83c <xTaskResumeAll+0x124>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d903      	bls.n	800f794 <xTaskResumeAll+0x7c>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f790:	4a2a      	ldr	r2, [pc, #168]	; (800f83c <xTaskResumeAll+0x124>)
 800f792:	6013      	str	r3, [r2, #0]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f798:	4613      	mov	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	4a27      	ldr	r2, [pc, #156]	; (800f840 <xTaskResumeAll+0x128>)
 800f7a2:	441a      	add	r2, r3
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	3304      	adds	r3, #4
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	f7fe fff7 	bl	800e79e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b4:	4b23      	ldr	r3, [pc, #140]	; (800f844 <xTaskResumeAll+0x12c>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d302      	bcc.n	800f7c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f7be:	4b22      	ldr	r3, [pc, #136]	; (800f848 <xTaskResumeAll+0x130>)
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7c4:	4b1c      	ldr	r3, [pc, #112]	; (800f838 <xTaskResumeAll+0x120>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d1cb      	bne.n	800f764 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f7d2:	f000 fbf3 	bl	800ffbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f7d6:	4b1d      	ldr	r3, [pc, #116]	; (800f84c <xTaskResumeAll+0x134>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d010      	beq.n	800f804 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f7e2:	f000 f847 	bl	800f874 <xTaskIncrementTick>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d002      	beq.n	800f7f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f7ec:	4b16      	ldr	r3, [pc, #88]	; (800f848 <xTaskResumeAll+0x130>)
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d1f1      	bne.n	800f7e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f7fe:	4b13      	ldr	r3, [pc, #76]	; (800f84c <xTaskResumeAll+0x134>)
 800f800:	2200      	movs	r2, #0
 800f802:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f804:	4b10      	ldr	r3, [pc, #64]	; (800f848 <xTaskResumeAll+0x130>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d009      	beq.n	800f820 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f80c:	2301      	movs	r3, #1
 800f80e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f810:	4b0f      	ldr	r3, [pc, #60]	; (800f850 <xTaskResumeAll+0x138>)
 800f812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f816:	601a      	str	r2, [r3, #0]
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f820:	f001 f9b0 	bl	8010b84 <vPortExitCritical>

	return xAlreadyYielded;
 800f824:	68bb      	ldr	r3, [r7, #8]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	240011f4 	.word	0x240011f4
 800f834:	240011cc 	.word	0x240011cc
 800f838:	2400118c 	.word	0x2400118c
 800f83c:	240011d4 	.word	0x240011d4
 800f840:	24000cfc 	.word	0x24000cfc
 800f844:	24000cf8 	.word	0x24000cf8
 800f848:	240011e0 	.word	0x240011e0
 800f84c:	240011dc 	.word	0x240011dc
 800f850:	e000ed04 	.word	0xe000ed04

0800f854 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f85a:	4b05      	ldr	r3, [pc, #20]	; (800f870 <xTaskGetTickCount+0x1c>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f860:	687b      	ldr	r3, [r7, #4]
}
 800f862:	4618      	mov	r0, r3
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	240011d0 	.word	0x240011d0

0800f874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b086      	sub	sp, #24
 800f878:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f87a:	2300      	movs	r3, #0
 800f87c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f87e:	4b4f      	ldr	r3, [pc, #316]	; (800f9bc <xTaskIncrementTick+0x148>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	f040 808f 	bne.w	800f9a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f888:	4b4d      	ldr	r3, [pc, #308]	; (800f9c0 <xTaskIncrementTick+0x14c>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	3301      	adds	r3, #1
 800f88e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f890:	4a4b      	ldr	r2, [pc, #300]	; (800f9c0 <xTaskIncrementTick+0x14c>)
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d120      	bne.n	800f8de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f89c:	4b49      	ldr	r3, [pc, #292]	; (800f9c4 <xTaskIncrementTick+0x150>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00a      	beq.n	800f8bc <xTaskIncrementTick+0x48>
	__asm volatile
 800f8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	603b      	str	r3, [r7, #0]
}
 800f8b8:	bf00      	nop
 800f8ba:	e7fe      	b.n	800f8ba <xTaskIncrementTick+0x46>
 800f8bc:	4b41      	ldr	r3, [pc, #260]	; (800f9c4 <xTaskIncrementTick+0x150>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	4b41      	ldr	r3, [pc, #260]	; (800f9c8 <xTaskIncrementTick+0x154>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a3f      	ldr	r2, [pc, #252]	; (800f9c4 <xTaskIncrementTick+0x150>)
 800f8c8:	6013      	str	r3, [r2, #0]
 800f8ca:	4a3f      	ldr	r2, [pc, #252]	; (800f9c8 <xTaskIncrementTick+0x154>)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6013      	str	r3, [r2, #0]
 800f8d0:	4b3e      	ldr	r3, [pc, #248]	; (800f9cc <xTaskIncrementTick+0x158>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	4a3d      	ldr	r2, [pc, #244]	; (800f9cc <xTaskIncrementTick+0x158>)
 800f8d8:	6013      	str	r3, [r2, #0]
 800f8da:	f000 fb6f 	bl	800ffbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f8de:	4b3c      	ldr	r3, [pc, #240]	; (800f9d0 <xTaskIncrementTick+0x15c>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d349      	bcc.n	800f97c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8e8:	4b36      	ldr	r3, [pc, #216]	; (800f9c4 <xTaskIncrementTick+0x150>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d104      	bne.n	800f8fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8f2:	4b37      	ldr	r3, [pc, #220]	; (800f9d0 <xTaskIncrementTick+0x15c>)
 800f8f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8f8:	601a      	str	r2, [r3, #0]
					break;
 800f8fa:	e03f      	b.n	800f97c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8fc:	4b31      	ldr	r3, [pc, #196]	; (800f9c4 <xTaskIncrementTick+0x150>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	429a      	cmp	r2, r3
 800f912:	d203      	bcs.n	800f91c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f914:	4a2e      	ldr	r2, [pc, #184]	; (800f9d0 <xTaskIncrementTick+0x15c>)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f91a:	e02f      	b.n	800f97c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	3304      	adds	r3, #4
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe ff99 	bl	800e858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d004      	beq.n	800f938 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	3318      	adds	r3, #24
 800f932:	4618      	mov	r0, r3
 800f934:	f7fe ff90 	bl	800e858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93c:	4b25      	ldr	r3, [pc, #148]	; (800f9d4 <xTaskIncrementTick+0x160>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	429a      	cmp	r2, r3
 800f942:	d903      	bls.n	800f94c <xTaskIncrementTick+0xd8>
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f948:	4a22      	ldr	r2, [pc, #136]	; (800f9d4 <xTaskIncrementTick+0x160>)
 800f94a:	6013      	str	r3, [r2, #0]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f950:	4613      	mov	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	4413      	add	r3, r2
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4a1f      	ldr	r2, [pc, #124]	; (800f9d8 <xTaskIncrementTick+0x164>)
 800f95a:	441a      	add	r2, r3
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	3304      	adds	r3, #4
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fe ff1b 	bl	800e79e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f96c:	4b1b      	ldr	r3, [pc, #108]	; (800f9dc <xTaskIncrementTick+0x168>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f972:	429a      	cmp	r2, r3
 800f974:	d3b8      	bcc.n	800f8e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f976:	2301      	movs	r3, #1
 800f978:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f97a:	e7b5      	b.n	800f8e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f97c:	4b17      	ldr	r3, [pc, #92]	; (800f9dc <xTaskIncrementTick+0x168>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f982:	4915      	ldr	r1, [pc, #84]	; (800f9d8 <xTaskIncrementTick+0x164>)
 800f984:	4613      	mov	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4413      	add	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	440b      	add	r3, r1
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d901      	bls.n	800f998 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f994:	2301      	movs	r3, #1
 800f996:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f998:	4b11      	ldr	r3, [pc, #68]	; (800f9e0 <xTaskIncrementTick+0x16c>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d007      	beq.n	800f9b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	617b      	str	r3, [r7, #20]
 800f9a4:	e004      	b.n	800f9b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f9a6:	4b0f      	ldr	r3, [pc, #60]	; (800f9e4 <xTaskIncrementTick+0x170>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	4a0d      	ldr	r2, [pc, #52]	; (800f9e4 <xTaskIncrementTick+0x170>)
 800f9ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f9b0:	697b      	ldr	r3, [r7, #20]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3718      	adds	r7, #24
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	240011f4 	.word	0x240011f4
 800f9c0:	240011d0 	.word	0x240011d0
 800f9c4:	24001184 	.word	0x24001184
 800f9c8:	24001188 	.word	0x24001188
 800f9cc:	240011e4 	.word	0x240011e4
 800f9d0:	240011ec 	.word	0x240011ec
 800f9d4:	240011d4 	.word	0x240011d4
 800f9d8:	24000cfc 	.word	0x24000cfc
 800f9dc:	24000cf8 	.word	0x24000cf8
 800f9e0:	240011e0 	.word	0x240011e0
 800f9e4:	240011dc 	.word	0x240011dc

0800f9e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b085      	sub	sp, #20
 800f9ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9ee:	4b28      	ldr	r3, [pc, #160]	; (800fa90 <vTaskSwitchContext+0xa8>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d003      	beq.n	800f9fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f9f6:	4b27      	ldr	r3, [pc, #156]	; (800fa94 <vTaskSwitchContext+0xac>)
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f9fc:	e041      	b.n	800fa82 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f9fe:	4b25      	ldr	r3, [pc, #148]	; (800fa94 <vTaskSwitchContext+0xac>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa04:	4b24      	ldr	r3, [pc, #144]	; (800fa98 <vTaskSwitchContext+0xb0>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	60fb      	str	r3, [r7, #12]
 800fa0a:	e010      	b.n	800fa2e <vTaskSwitchContext+0x46>
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d10a      	bne.n	800fa28 <vTaskSwitchContext+0x40>
	__asm volatile
 800fa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa16:	f383 8811 	msr	BASEPRI, r3
 800fa1a:	f3bf 8f6f 	isb	sy
 800fa1e:	f3bf 8f4f 	dsb	sy
 800fa22:	607b      	str	r3, [r7, #4]
}
 800fa24:	bf00      	nop
 800fa26:	e7fe      	b.n	800fa26 <vTaskSwitchContext+0x3e>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	60fb      	str	r3, [r7, #12]
 800fa2e:	491b      	ldr	r1, [pc, #108]	; (800fa9c <vTaskSwitchContext+0xb4>)
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4613      	mov	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	4413      	add	r3, r2
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	440b      	add	r3, r1
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d0e4      	beq.n	800fa0c <vTaskSwitchContext+0x24>
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	4613      	mov	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	4a13      	ldr	r2, [pc, #76]	; (800fa9c <vTaskSwitchContext+0xb4>)
 800fa4e:	4413      	add	r3, r2
 800fa50:	60bb      	str	r3, [r7, #8]
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	605a      	str	r2, [r3, #4]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	685a      	ldr	r2, [r3, #4]
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	3308      	adds	r3, #8
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d104      	bne.n	800fa72 <vTaskSwitchContext+0x8a>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	685a      	ldr	r2, [r3, #4]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	605a      	str	r2, [r3, #4]
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	4a09      	ldr	r2, [pc, #36]	; (800faa0 <vTaskSwitchContext+0xb8>)
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	4a06      	ldr	r2, [pc, #24]	; (800fa98 <vTaskSwitchContext+0xb0>)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6013      	str	r3, [r2, #0]
}
 800fa82:	bf00      	nop
 800fa84:	3714      	adds	r7, #20
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	240011f4 	.word	0x240011f4
 800fa94:	240011e0 	.word	0x240011e0
 800fa98:	240011d4 	.word	0x240011d4
 800fa9c:	24000cfc 	.word	0x24000cfc
 800faa0:	24000cf8 	.word	0x24000cf8

0800faa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10a      	bne.n	800faca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	60fb      	str	r3, [r7, #12]
}
 800fac6:	bf00      	nop
 800fac8:	e7fe      	b.n	800fac8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800faca:	4b07      	ldr	r3, [pc, #28]	; (800fae8 <vTaskPlaceOnEventList+0x44>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	3318      	adds	r3, #24
 800fad0:	4619      	mov	r1, r3
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f7fe fe87 	bl	800e7e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fad8:	2101      	movs	r1, #1
 800fada:	6838      	ldr	r0, [r7, #0]
 800fadc:	f000 fb32 	bl	8010144 <prvAddCurrentTaskToDelayedList>
}
 800fae0:	bf00      	nop
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	24000cf8 	.word	0x24000cf8

0800faec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10a      	bne.n	800fb14 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	617b      	str	r3, [r7, #20]
}
 800fb10:	bf00      	nop
 800fb12:	e7fe      	b.n	800fb12 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fb14:	4b11      	ldr	r3, [pc, #68]	; (800fb5c <vTaskPlaceOnUnorderedEventList+0x70>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10a      	bne.n	800fb32 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	613b      	str	r3, [r7, #16]
}
 800fb2e:	bf00      	nop
 800fb30:	e7fe      	b.n	800fb30 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fb32:	4b0b      	ldr	r3, [pc, #44]	; (800fb60 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68ba      	ldr	r2, [r7, #8]
 800fb38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800fb3c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb3e:	4b08      	ldr	r3, [pc, #32]	; (800fb60 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3318      	adds	r3, #24
 800fb44:	4619      	mov	r1, r3
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	f7fe fe29 	bl	800e79e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb4c:	2101      	movs	r1, #1
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 faf8 	bl	8010144 <prvAddCurrentTaskToDelayedList>
}
 800fb54:	bf00      	nop
 800fb56:	3718      	adds	r7, #24
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	240011f4 	.word	0x240011f4
 800fb60:	24000cf8 	.word	0x24000cf8

0800fb64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d10a      	bne.n	800fb8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	617b      	str	r3, [r7, #20]
}
 800fb88:	bf00      	nop
 800fb8a:	e7fe      	b.n	800fb8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb8c:	4b0a      	ldr	r3, [pc, #40]	; (800fbb8 <vTaskPlaceOnEventListRestricted+0x54>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	3318      	adds	r3, #24
 800fb92:	4619      	mov	r1, r3
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f7fe fe02 	bl	800e79e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fba4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fba6:	6879      	ldr	r1, [r7, #4]
 800fba8:	68b8      	ldr	r0, [r7, #8]
 800fbaa:	f000 facb 	bl	8010144 <prvAddCurrentTaskToDelayedList>
	}
 800fbae:	bf00      	nop
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	24000cf8 	.word	0x24000cf8

0800fbbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b086      	sub	sp, #24
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10a      	bne.n	800fbe8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	60fb      	str	r3, [r7, #12]
}
 800fbe4:	bf00      	nop
 800fbe6:	e7fe      	b.n	800fbe6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	3318      	adds	r3, #24
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7fe fe33 	bl	800e858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbf2:	4b1e      	ldr	r3, [pc, #120]	; (800fc6c <xTaskRemoveFromEventList+0xb0>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d11d      	bne.n	800fc36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	3304      	adds	r3, #4
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fe fe2a 	bl	800e858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc08:	4b19      	ldr	r3, [pc, #100]	; (800fc70 <xTaskRemoveFromEventList+0xb4>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d903      	bls.n	800fc18 <xTaskRemoveFromEventList+0x5c>
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc14:	4a16      	ldr	r2, [pc, #88]	; (800fc70 <xTaskRemoveFromEventList+0xb4>)
 800fc16:	6013      	str	r3, [r2, #0]
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4413      	add	r3, r2
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	4a13      	ldr	r2, [pc, #76]	; (800fc74 <xTaskRemoveFromEventList+0xb8>)
 800fc26:	441a      	add	r2, r3
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	4610      	mov	r0, r2
 800fc30:	f7fe fdb5 	bl	800e79e <vListInsertEnd>
 800fc34:	e005      	b.n	800fc42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	3318      	adds	r3, #24
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	480e      	ldr	r0, [pc, #56]	; (800fc78 <xTaskRemoveFromEventList+0xbc>)
 800fc3e:	f7fe fdae 	bl	800e79e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc46:	4b0d      	ldr	r3, [pc, #52]	; (800fc7c <xTaskRemoveFromEventList+0xc0>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d905      	bls.n	800fc5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc50:	2301      	movs	r3, #1
 800fc52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc54:	4b0a      	ldr	r3, [pc, #40]	; (800fc80 <xTaskRemoveFromEventList+0xc4>)
 800fc56:	2201      	movs	r2, #1
 800fc58:	601a      	str	r2, [r3, #0]
 800fc5a:	e001      	b.n	800fc60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc60:	697b      	ldr	r3, [r7, #20]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3718      	adds	r7, #24
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	240011f4 	.word	0x240011f4
 800fc70:	240011d4 	.word	0x240011d4
 800fc74:	24000cfc 	.word	0x24000cfc
 800fc78:	2400118c 	.word	0x2400118c
 800fc7c:	24000cf8 	.word	0x24000cf8
 800fc80:	240011e0 	.word	0x240011e0

0800fc84 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fc8e:	4b29      	ldr	r3, [pc, #164]	; (800fd34 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10a      	bne.n	800fcac <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800fc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	613b      	str	r3, [r7, #16]
}
 800fca8:	bf00      	nop
 800fcaa:	e7fe      	b.n	800fcaa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d10a      	bne.n	800fcd8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800fcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	60fb      	str	r3, [r7, #12]
}
 800fcd4:	bf00      	nop
 800fcd6:	e7fe      	b.n	800fcd6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7fe fdbd 	bl	800e858 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	3304      	adds	r3, #4
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fe fdb8 	bl	800e858 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcec:	4b12      	ldr	r3, [pc, #72]	; (800fd38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d903      	bls.n	800fcfc <vTaskRemoveFromUnorderedEventList+0x78>
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf8:	4a0f      	ldr	r2, [pc, #60]	; (800fd38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800fcfa:	6013      	str	r3, [r2, #0]
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd00:	4613      	mov	r3, r2
 800fd02:	009b      	lsls	r3, r3, #2
 800fd04:	4413      	add	r3, r2
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4a0c      	ldr	r2, [pc, #48]	; (800fd3c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800fd0a:	441a      	add	r2, r3
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	4619      	mov	r1, r3
 800fd12:	4610      	mov	r0, r2
 800fd14:	f7fe fd43 	bl	800e79e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd1c:	4b08      	ldr	r3, [pc, #32]	; (800fd40 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d902      	bls.n	800fd2c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800fd26:	4b07      	ldr	r3, [pc, #28]	; (800fd44 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fd28:	2201      	movs	r2, #1
 800fd2a:	601a      	str	r2, [r3, #0]
	}
}
 800fd2c:	bf00      	nop
 800fd2e:	3718      	adds	r7, #24
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	240011f4 	.word	0x240011f4
 800fd38:	240011d4 	.word	0x240011d4
 800fd3c:	24000cfc 	.word	0x24000cfc
 800fd40:	24000cf8 	.word	0x24000cf8
 800fd44:	240011e0 	.word	0x240011e0

0800fd48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd50:	4b06      	ldr	r3, [pc, #24]	; (800fd6c <vTaskInternalSetTimeOutState+0x24>)
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd58:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <vTaskInternalSetTimeOutState+0x28>)
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	605a      	str	r2, [r3, #4]
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	240011e4 	.word	0x240011e4
 800fd70:	240011d0 	.word	0x240011d0

0800fd74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b088      	sub	sp, #32
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d10a      	bne.n	800fd9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd88:	f383 8811 	msr	BASEPRI, r3
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f3bf 8f4f 	dsb	sy
 800fd94:	613b      	str	r3, [r7, #16]
}
 800fd96:	bf00      	nop
 800fd98:	e7fe      	b.n	800fd98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d10a      	bne.n	800fdb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	60fb      	str	r3, [r7, #12]
}
 800fdb2:	bf00      	nop
 800fdb4:	e7fe      	b.n	800fdb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fdb6:	f000 feb5 	bl	8010b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fdba:	4b1d      	ldr	r3, [pc, #116]	; (800fe30 <xTaskCheckForTimeOut+0xbc>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	69ba      	ldr	r2, [r7, #24]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdd2:	d102      	bne.n	800fdda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	61fb      	str	r3, [r7, #28]
 800fdd8:	e023      	b.n	800fe22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	4b15      	ldr	r3, [pc, #84]	; (800fe34 <xTaskCheckForTimeOut+0xc0>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d007      	beq.n	800fdf6 <xTaskCheckForTimeOut+0x82>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	69ba      	ldr	r2, [r7, #24]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d302      	bcc.n	800fdf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	61fb      	str	r3, [r7, #28]
 800fdf4:	e015      	b.n	800fe22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d20b      	bcs.n	800fe18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	1ad2      	subs	r2, r2, r3
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7ff ff9b 	bl	800fd48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fe12:	2300      	movs	r3, #0
 800fe14:	61fb      	str	r3, [r7, #28]
 800fe16:	e004      	b.n	800fe22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe1e:	2301      	movs	r3, #1
 800fe20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fe22:	f000 feaf 	bl	8010b84 <vPortExitCritical>

	return xReturn;
 800fe26:	69fb      	ldr	r3, [r7, #28]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3720      	adds	r7, #32
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	240011d0 	.word	0x240011d0
 800fe34:	240011e4 	.word	0x240011e4

0800fe38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe38:	b480      	push	{r7}
 800fe3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe3c:	4b03      	ldr	r3, [pc, #12]	; (800fe4c <vTaskMissedYield+0x14>)
 800fe3e:	2201      	movs	r2, #1
 800fe40:	601a      	str	r2, [r3, #0]
}
 800fe42:	bf00      	nop
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	240011e0 	.word	0x240011e0

0800fe50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe58:	f000 f852 	bl	800ff00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe5c:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <prvIdleTask+0x28>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d9f9      	bls.n	800fe58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe64:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <prvIdleTask+0x2c>)
 800fe66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fe74:	e7f0      	b.n	800fe58 <prvIdleTask+0x8>
 800fe76:	bf00      	nop
 800fe78:	24000cfc 	.word	0x24000cfc
 800fe7c:	e000ed04 	.word	0xe000ed04

0800fe80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe86:	2300      	movs	r3, #0
 800fe88:	607b      	str	r3, [r7, #4]
 800fe8a:	e00c      	b.n	800fea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	4413      	add	r3, r2
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	4a12      	ldr	r2, [pc, #72]	; (800fee0 <prvInitialiseTaskLists+0x60>)
 800fe98:	4413      	add	r3, r2
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fe fc52 	bl	800e744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	3301      	adds	r3, #1
 800fea4:	607b      	str	r3, [r7, #4]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b37      	cmp	r3, #55	; 0x37
 800feaa:	d9ef      	bls.n	800fe8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800feac:	480d      	ldr	r0, [pc, #52]	; (800fee4 <prvInitialiseTaskLists+0x64>)
 800feae:	f7fe fc49 	bl	800e744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800feb2:	480d      	ldr	r0, [pc, #52]	; (800fee8 <prvInitialiseTaskLists+0x68>)
 800feb4:	f7fe fc46 	bl	800e744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800feb8:	480c      	ldr	r0, [pc, #48]	; (800feec <prvInitialiseTaskLists+0x6c>)
 800feba:	f7fe fc43 	bl	800e744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800febe:	480c      	ldr	r0, [pc, #48]	; (800fef0 <prvInitialiseTaskLists+0x70>)
 800fec0:	f7fe fc40 	bl	800e744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fec4:	480b      	ldr	r0, [pc, #44]	; (800fef4 <prvInitialiseTaskLists+0x74>)
 800fec6:	f7fe fc3d 	bl	800e744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800feca:	4b0b      	ldr	r3, [pc, #44]	; (800fef8 <prvInitialiseTaskLists+0x78>)
 800fecc:	4a05      	ldr	r2, [pc, #20]	; (800fee4 <prvInitialiseTaskLists+0x64>)
 800fece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <prvInitialiseTaskLists+0x7c>)
 800fed2:	4a05      	ldr	r2, [pc, #20]	; (800fee8 <prvInitialiseTaskLists+0x68>)
 800fed4:	601a      	str	r2, [r3, #0]
}
 800fed6:	bf00      	nop
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	24000cfc 	.word	0x24000cfc
 800fee4:	2400115c 	.word	0x2400115c
 800fee8:	24001170 	.word	0x24001170
 800feec:	2400118c 	.word	0x2400118c
 800fef0:	240011a0 	.word	0x240011a0
 800fef4:	240011b8 	.word	0x240011b8
 800fef8:	24001184 	.word	0x24001184
 800fefc:	24001188 	.word	0x24001188

0800ff00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff06:	e019      	b.n	800ff3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ff08:	f000 fe0c 	bl	8010b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff0c:	4b10      	ldr	r3, [pc, #64]	; (800ff50 <prvCheckTasksWaitingTermination+0x50>)
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	3304      	adds	r3, #4
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fe fc9d 	bl	800e858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ff1e:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <prvCheckTasksWaitingTermination+0x54>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3b01      	subs	r3, #1
 800ff24:	4a0b      	ldr	r2, [pc, #44]	; (800ff54 <prvCheckTasksWaitingTermination+0x54>)
 800ff26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ff28:	4b0b      	ldr	r3, [pc, #44]	; (800ff58 <prvCheckTasksWaitingTermination+0x58>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	4a0a      	ldr	r2, [pc, #40]	; (800ff58 <prvCheckTasksWaitingTermination+0x58>)
 800ff30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ff32:	f000 fe27 	bl	8010b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 f810 	bl	800ff5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff3c:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <prvCheckTasksWaitingTermination+0x58>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d1e1      	bne.n	800ff08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff44:	bf00      	nop
 800ff46:	bf00      	nop
 800ff48:	3708      	adds	r7, #8
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	240011a0 	.word	0x240011a0
 800ff54:	240011cc 	.word	0x240011cc
 800ff58:	240011b4 	.word	0x240011b4

0800ff5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d108      	bne.n	800ff80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 ffc4 	bl	8010f00 <vPortFree>
				vPortFree( pxTCB );
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 ffc1 	bl	8010f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff7e:	e018      	b.n	800ffb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d103      	bne.n	800ff92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 ffb8 	bl	8010f00 <vPortFree>
	}
 800ff90:	e00f      	b.n	800ffb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d00a      	beq.n	800ffb2 <prvDeleteTCB+0x56>
	__asm volatile
 800ff9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa0:	f383 8811 	msr	BASEPRI, r3
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	60fb      	str	r3, [r7, #12]
}
 800ffae:	bf00      	nop
 800ffb0:	e7fe      	b.n	800ffb0 <prvDeleteTCB+0x54>
	}
 800ffb2:	bf00      	nop
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
	...

0800ffbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffc2:	4b0c      	ldr	r3, [pc, #48]	; (800fff4 <prvResetNextTaskUnblockTime+0x38>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d104      	bne.n	800ffd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ffcc:	4b0a      	ldr	r3, [pc, #40]	; (800fff8 <prvResetNextTaskUnblockTime+0x3c>)
 800ffce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ffd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ffd4:	e008      	b.n	800ffe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffd6:	4b07      	ldr	r3, [pc, #28]	; (800fff4 <prvResetNextTaskUnblockTime+0x38>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	4a04      	ldr	r2, [pc, #16]	; (800fff8 <prvResetNextTaskUnblockTime+0x3c>)
 800ffe6:	6013      	str	r3, [r2, #0]
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr
 800fff4:	24001184 	.word	0x24001184
 800fff8:	240011ec 	.word	0x240011ec

0800fffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010002:	4b0b      	ldr	r3, [pc, #44]	; (8010030 <xTaskGetSchedulerState+0x34>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d102      	bne.n	8010010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801000a:	2301      	movs	r3, #1
 801000c:	607b      	str	r3, [r7, #4]
 801000e:	e008      	b.n	8010022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010010:	4b08      	ldr	r3, [pc, #32]	; (8010034 <xTaskGetSchedulerState+0x38>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d102      	bne.n	801001e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010018:	2302      	movs	r3, #2
 801001a:	607b      	str	r3, [r7, #4]
 801001c:	e001      	b.n	8010022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801001e:	2300      	movs	r3, #0
 8010020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010022:	687b      	ldr	r3, [r7, #4]
	}
 8010024:	4618      	mov	r0, r3
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	240011d8 	.word	0x240011d8
 8010034:	240011f4 	.word	0x240011f4

08010038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010044:	2300      	movs	r3, #0
 8010046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d056      	beq.n	80100fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801004e:	4b2e      	ldr	r3, [pc, #184]	; (8010108 <xTaskPriorityDisinherit+0xd0>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	693a      	ldr	r2, [r7, #16]
 8010054:	429a      	cmp	r2, r3
 8010056:	d00a      	beq.n	801006e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	60fb      	str	r3, [r7, #12]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10a      	bne.n	801008c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801007a:	f383 8811 	msr	BASEPRI, r3
 801007e:	f3bf 8f6f 	isb	sy
 8010082:	f3bf 8f4f 	dsb	sy
 8010086:	60bb      	str	r3, [r7, #8]
}
 8010088:	bf00      	nop
 801008a:	e7fe      	b.n	801008a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010090:	1e5a      	subs	r2, r3, #1
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801009e:	429a      	cmp	r2, r3
 80100a0:	d02c      	beq.n	80100fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d128      	bne.n	80100fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	3304      	adds	r3, #4
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fe fbd2 	bl	800e858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100cc:	4b0f      	ldr	r3, [pc, #60]	; (801010c <xTaskPriorityDisinherit+0xd4>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d903      	bls.n	80100dc <xTaskPriorityDisinherit+0xa4>
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d8:	4a0c      	ldr	r2, [pc, #48]	; (801010c <xTaskPriorityDisinherit+0xd4>)
 80100da:	6013      	str	r3, [r2, #0]
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e0:	4613      	mov	r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	4413      	add	r3, r2
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	4a09      	ldr	r2, [pc, #36]	; (8010110 <xTaskPriorityDisinherit+0xd8>)
 80100ea:	441a      	add	r2, r3
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	3304      	adds	r3, #4
 80100f0:	4619      	mov	r1, r3
 80100f2:	4610      	mov	r0, r2
 80100f4:	f7fe fb53 	bl	800e79e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80100f8:	2301      	movs	r3, #1
 80100fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100fc:	697b      	ldr	r3, [r7, #20]
	}
 80100fe:	4618      	mov	r0, r3
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	24000cf8 	.word	0x24000cf8
 801010c:	240011d4 	.word	0x240011d4
 8010110:	24000cfc 	.word	0x24000cfc

08010114 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801011a:	4b09      	ldr	r3, [pc, #36]	; (8010140 <uxTaskResetEventItemValue+0x2c>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	699b      	ldr	r3, [r3, #24]
 8010120:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010122:	4b07      	ldr	r3, [pc, #28]	; (8010140 <uxTaskResetEventItemValue+0x2c>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010128:	4b05      	ldr	r3, [pc, #20]	; (8010140 <uxTaskResetEventItemValue+0x2c>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010130:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010132:	687b      	ldr	r3, [r7, #4]
}
 8010134:	4618      	mov	r0, r3
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr
 8010140:	24000cf8 	.word	0x24000cf8

08010144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801014e:	4b21      	ldr	r3, [pc, #132]	; (80101d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010154:	4b20      	ldr	r3, [pc, #128]	; (80101d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	3304      	adds	r3, #4
 801015a:	4618      	mov	r0, r3
 801015c:	f7fe fb7c 	bl	800e858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010166:	d10a      	bne.n	801017e <prvAddCurrentTaskToDelayedList+0x3a>
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d007      	beq.n	801017e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801016e:	4b1a      	ldr	r3, [pc, #104]	; (80101d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	3304      	adds	r3, #4
 8010174:	4619      	mov	r1, r3
 8010176:	4819      	ldr	r0, [pc, #100]	; (80101dc <prvAddCurrentTaskToDelayedList+0x98>)
 8010178:	f7fe fb11 	bl	800e79e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801017c:	e026      	b.n	80101cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801017e:	68fa      	ldr	r2, [r7, #12]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4413      	add	r3, r2
 8010184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010186:	4b14      	ldr	r3, [pc, #80]	; (80101d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68ba      	ldr	r2, [r7, #8]
 801018c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	429a      	cmp	r2, r3
 8010194:	d209      	bcs.n	80101aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010196:	4b12      	ldr	r3, [pc, #72]	; (80101e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	4b0f      	ldr	r3, [pc, #60]	; (80101d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	3304      	adds	r3, #4
 80101a0:	4619      	mov	r1, r3
 80101a2:	4610      	mov	r0, r2
 80101a4:	f7fe fb1f 	bl	800e7e6 <vListInsert>
}
 80101a8:	e010      	b.n	80101cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101aa:	4b0e      	ldr	r3, [pc, #56]	; (80101e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	4b0a      	ldr	r3, [pc, #40]	; (80101d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	3304      	adds	r3, #4
 80101b4:	4619      	mov	r1, r3
 80101b6:	4610      	mov	r0, r2
 80101b8:	f7fe fb15 	bl	800e7e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80101bc:	4b0a      	ldr	r3, [pc, #40]	; (80101e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68ba      	ldr	r2, [r7, #8]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d202      	bcs.n	80101cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80101c6:	4a08      	ldr	r2, [pc, #32]	; (80101e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	6013      	str	r3, [r2, #0]
}
 80101cc:	bf00      	nop
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	240011d0 	.word	0x240011d0
 80101d8:	24000cf8 	.word	0x24000cf8
 80101dc:	240011b8 	.word	0x240011b8
 80101e0:	24001188 	.word	0x24001188
 80101e4:	24001184 	.word	0x24001184
 80101e8:	240011ec 	.word	0x240011ec

080101ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b08a      	sub	sp, #40	; 0x28
 80101f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80101f6:	f000 fb07 	bl	8010808 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80101fa:	4b1c      	ldr	r3, [pc, #112]	; (801026c <xTimerCreateTimerTask+0x80>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d021      	beq.n	8010246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010202:	2300      	movs	r3, #0
 8010204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010206:	2300      	movs	r3, #0
 8010208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801020a:	1d3a      	adds	r2, r7, #4
 801020c:	f107 0108 	add.w	r1, r7, #8
 8010210:	f107 030c 	add.w	r3, r7, #12
 8010214:	4618      	mov	r0, r3
 8010216:	f7fe f88d 	bl	800e334 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	9202      	str	r2, [sp, #8]
 8010222:	9301      	str	r3, [sp, #4]
 8010224:	2302      	movs	r3, #2
 8010226:	9300      	str	r3, [sp, #0]
 8010228:	2300      	movs	r3, #0
 801022a:	460a      	mov	r2, r1
 801022c:	4910      	ldr	r1, [pc, #64]	; (8010270 <xTimerCreateTimerTask+0x84>)
 801022e:	4811      	ldr	r0, [pc, #68]	; (8010274 <xTimerCreateTimerTask+0x88>)
 8010230:	f7ff f828 	bl	800f284 <xTaskCreateStatic>
 8010234:	4603      	mov	r3, r0
 8010236:	4a10      	ldr	r2, [pc, #64]	; (8010278 <xTimerCreateTimerTask+0x8c>)
 8010238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801023a:	4b0f      	ldr	r3, [pc, #60]	; (8010278 <xTimerCreateTimerTask+0x8c>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d001      	beq.n	8010246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010242:	2301      	movs	r3, #1
 8010244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10a      	bne.n	8010262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801024c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010250:	f383 8811 	msr	BASEPRI, r3
 8010254:	f3bf 8f6f 	isb	sy
 8010258:	f3bf 8f4f 	dsb	sy
 801025c:	613b      	str	r3, [r7, #16]
}
 801025e:	bf00      	nop
 8010260:	e7fe      	b.n	8010260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010262:	697b      	ldr	r3, [r7, #20]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	24001228 	.word	0x24001228
 8010270:	08011d9c 	.word	0x08011d9c
 8010274:	080103b1 	.word	0x080103b1
 8010278:	2400122c 	.word	0x2400122c

0801027c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b08a      	sub	sp, #40	; 0x28
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
 8010288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801028a:	2300      	movs	r3, #0
 801028c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10a      	bne.n	80102aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8010294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	623b      	str	r3, [r7, #32]
}
 80102a6:	bf00      	nop
 80102a8:	e7fe      	b.n	80102a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80102aa:	4b1a      	ldr	r3, [pc, #104]	; (8010314 <xTimerGenericCommand+0x98>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d02a      	beq.n	8010308 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	2b05      	cmp	r3, #5
 80102c2:	dc18      	bgt.n	80102f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80102c4:	f7ff fe9a 	bl	800fffc <xTaskGetSchedulerState>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d109      	bne.n	80102e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80102ce:	4b11      	ldr	r3, [pc, #68]	; (8010314 <xTimerGenericCommand+0x98>)
 80102d0:	6818      	ldr	r0, [r3, #0]
 80102d2:	f107 0110 	add.w	r1, r7, #16
 80102d6:	2300      	movs	r3, #0
 80102d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102da:	f7fe fbeb 	bl	800eab4 <xQueueGenericSend>
 80102de:	6278      	str	r0, [r7, #36]	; 0x24
 80102e0:	e012      	b.n	8010308 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80102e2:	4b0c      	ldr	r3, [pc, #48]	; (8010314 <xTimerGenericCommand+0x98>)
 80102e4:	6818      	ldr	r0, [r3, #0]
 80102e6:	f107 0110 	add.w	r1, r7, #16
 80102ea:	2300      	movs	r3, #0
 80102ec:	2200      	movs	r2, #0
 80102ee:	f7fe fbe1 	bl	800eab4 <xQueueGenericSend>
 80102f2:	6278      	str	r0, [r7, #36]	; 0x24
 80102f4:	e008      	b.n	8010308 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80102f6:	4b07      	ldr	r3, [pc, #28]	; (8010314 <xTimerGenericCommand+0x98>)
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	f107 0110 	add.w	r1, r7, #16
 80102fe:	2300      	movs	r3, #0
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	f7fe fcd5 	bl	800ecb0 <xQueueGenericSendFromISR>
 8010306:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801030a:	4618      	mov	r0, r3
 801030c:	3728      	adds	r7, #40	; 0x28
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	24001228 	.word	0x24001228

08010318 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b088      	sub	sp, #32
 801031c:	af02      	add	r7, sp, #8
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010322:	4b22      	ldr	r3, [pc, #136]	; (80103ac <prvProcessExpiredTimer+0x94>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	3304      	adds	r3, #4
 8010330:	4618      	mov	r0, r3
 8010332:	f7fe fa91 	bl	800e858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801033c:	f003 0304 	and.w	r3, r3, #4
 8010340:	2b00      	cmp	r3, #0
 8010342:	d022      	beq.n	801038a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	699a      	ldr	r2, [r3, #24]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	18d1      	adds	r1, r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	683a      	ldr	r2, [r7, #0]
 8010350:	6978      	ldr	r0, [r7, #20]
 8010352:	f000 f8d1 	bl	80104f8 <prvInsertTimerInActiveList>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d01f      	beq.n	801039c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801035c:	2300      	movs	r3, #0
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	2300      	movs	r3, #0
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	2100      	movs	r1, #0
 8010366:	6978      	ldr	r0, [r7, #20]
 8010368:	f7ff ff88 	bl	801027c <xTimerGenericCommand>
 801036c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d113      	bne.n	801039c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	60fb      	str	r3, [r7, #12]
}
 8010386:	bf00      	nop
 8010388:	e7fe      	b.n	8010388 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010390:	f023 0301 	bic.w	r3, r3, #1
 8010394:	b2da      	uxtb	r2, r3
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	6a1b      	ldr	r3, [r3, #32]
 80103a0:	6978      	ldr	r0, [r7, #20]
 80103a2:	4798      	blx	r3
}
 80103a4:	bf00      	nop
 80103a6:	3718      	adds	r7, #24
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	24001220 	.word	0x24001220

080103b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103b8:	f107 0308 	add.w	r3, r7, #8
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 f857 	bl	8010470 <prvGetNextExpireTime>
 80103c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	4619      	mov	r1, r3
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f000 f803 	bl	80103d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80103ce:	f000 f8d5 	bl	801057c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103d2:	e7f1      	b.n	80103b8 <prvTimerTask+0x8>

080103d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80103de:	f7ff f98d 	bl	800f6fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103e2:	f107 0308 	add.w	r3, r7, #8
 80103e6:	4618      	mov	r0, r3
 80103e8:	f000 f866 	bl	80104b8 <prvSampleTimeNow>
 80103ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d130      	bne.n	8010456 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10a      	bne.n	8010410 <prvProcessTimerOrBlockTask+0x3c>
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d806      	bhi.n	8010410 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010402:	f7ff f989 	bl	800f718 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010406:	68f9      	ldr	r1, [r7, #12]
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7ff ff85 	bl	8010318 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801040e:	e024      	b.n	801045a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d008      	beq.n	8010428 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010416:	4b13      	ldr	r3, [pc, #76]	; (8010464 <prvProcessTimerOrBlockTask+0x90>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d101      	bne.n	8010424 <prvProcessTimerOrBlockTask+0x50>
 8010420:	2301      	movs	r3, #1
 8010422:	e000      	b.n	8010426 <prvProcessTimerOrBlockTask+0x52>
 8010424:	2300      	movs	r3, #0
 8010426:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010428:	4b0f      	ldr	r3, [pc, #60]	; (8010468 <prvProcessTimerOrBlockTask+0x94>)
 801042a:	6818      	ldr	r0, [r3, #0]
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	1ad3      	subs	r3, r2, r3
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	4619      	mov	r1, r3
 8010436:	f7fe fef1 	bl	800f21c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801043a:	f7ff f96d 	bl	800f718 <xTaskResumeAll>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10a      	bne.n	801045a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010444:	4b09      	ldr	r3, [pc, #36]	; (801046c <prvProcessTimerOrBlockTask+0x98>)
 8010446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	f3bf 8f6f 	isb	sy
}
 8010454:	e001      	b.n	801045a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010456:	f7ff f95f 	bl	800f718 <xTaskResumeAll>
}
 801045a:	bf00      	nop
 801045c:	3710      	adds	r7, #16
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	24001224 	.word	0x24001224
 8010468:	24001228 	.word	0x24001228
 801046c:	e000ed04 	.word	0xe000ed04

08010470 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010470:	b480      	push	{r7}
 8010472:	b085      	sub	sp, #20
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010478:	4b0e      	ldr	r3, [pc, #56]	; (80104b4 <prvGetNextExpireTime+0x44>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d101      	bne.n	8010486 <prvGetNextExpireTime+0x16>
 8010482:	2201      	movs	r2, #1
 8010484:	e000      	b.n	8010488 <prvGetNextExpireTime+0x18>
 8010486:	2200      	movs	r2, #0
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d105      	bne.n	80104a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010494:	4b07      	ldr	r3, [pc, #28]	; (80104b4 <prvGetNextExpireTime+0x44>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	60fb      	str	r3, [r7, #12]
 801049e:	e001      	b.n	80104a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80104a0:	2300      	movs	r3, #0
 80104a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80104a4:	68fb      	ldr	r3, [r7, #12]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	24001220 	.word	0x24001220

080104b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80104c0:	f7ff f9c8 	bl	800f854 <xTaskGetTickCount>
 80104c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80104c6:	4b0b      	ldr	r3, [pc, #44]	; (80104f4 <prvSampleTimeNow+0x3c>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d205      	bcs.n	80104dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80104d0:	f000 f936 	bl	8010740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2201      	movs	r2, #1
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	e002      	b.n	80104e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80104e2:	4a04      	ldr	r2, [pc, #16]	; (80104f4 <prvSampleTimeNow+0x3c>)
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80104e8:	68fb      	ldr	r3, [r7, #12]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	24001230 	.word	0x24001230

080104f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b086      	sub	sp, #24
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]
 8010504:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010506:	2300      	movs	r3, #0
 8010508:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010516:	68ba      	ldr	r2, [r7, #8]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	429a      	cmp	r2, r3
 801051c:	d812      	bhi.n	8010544 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	1ad2      	subs	r2, r2, r3
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	699b      	ldr	r3, [r3, #24]
 8010528:	429a      	cmp	r2, r3
 801052a:	d302      	bcc.n	8010532 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801052c:	2301      	movs	r3, #1
 801052e:	617b      	str	r3, [r7, #20]
 8010530:	e01b      	b.n	801056a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010532:	4b10      	ldr	r3, [pc, #64]	; (8010574 <prvInsertTimerInActiveList+0x7c>)
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	3304      	adds	r3, #4
 801053a:	4619      	mov	r1, r3
 801053c:	4610      	mov	r0, r2
 801053e:	f7fe f952 	bl	800e7e6 <vListInsert>
 8010542:	e012      	b.n	801056a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	429a      	cmp	r2, r3
 801054a:	d206      	bcs.n	801055a <prvInsertTimerInActiveList+0x62>
 801054c:	68ba      	ldr	r2, [r7, #8]
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	429a      	cmp	r2, r3
 8010552:	d302      	bcc.n	801055a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010554:	2301      	movs	r3, #1
 8010556:	617b      	str	r3, [r7, #20]
 8010558:	e007      	b.n	801056a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801055a:	4b07      	ldr	r3, [pc, #28]	; (8010578 <prvInsertTimerInActiveList+0x80>)
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3304      	adds	r3, #4
 8010562:	4619      	mov	r1, r3
 8010564:	4610      	mov	r0, r2
 8010566:	f7fe f93e 	bl	800e7e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801056a:	697b      	ldr	r3, [r7, #20]
}
 801056c:	4618      	mov	r0, r3
 801056e:	3718      	adds	r7, #24
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	24001224 	.word	0x24001224
 8010578:	24001220 	.word	0x24001220

0801057c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b08e      	sub	sp, #56	; 0x38
 8010580:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010582:	e0ca      	b.n	801071a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	da18      	bge.n	80105bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801058a:	1d3b      	adds	r3, r7, #4
 801058c:	3304      	adds	r3, #4
 801058e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	2b00      	cmp	r3, #0
 8010594:	d10a      	bne.n	80105ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059a:	f383 8811 	msr	BASEPRI, r3
 801059e:	f3bf 8f6f 	isb	sy
 80105a2:	f3bf 8f4f 	dsb	sy
 80105a6:	61fb      	str	r3, [r7, #28]
}
 80105a8:	bf00      	nop
 80105aa:	e7fe      	b.n	80105aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80105ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105b2:	6850      	ldr	r0, [r2, #4]
 80105b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105b6:	6892      	ldr	r2, [r2, #8]
 80105b8:	4611      	mov	r1, r2
 80105ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f2c0 80aa 	blt.w	8010718 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80105c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ca:	695b      	ldr	r3, [r3, #20]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d004      	beq.n	80105da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d2:	3304      	adds	r3, #4
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7fe f93f 	bl	800e858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80105da:	463b      	mov	r3, r7
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff ff6b 	bl	80104b8 <prvSampleTimeNow>
 80105e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b09      	cmp	r3, #9
 80105e8:	f200 8097 	bhi.w	801071a <prvProcessReceivedCommands+0x19e>
 80105ec:	a201      	add	r2, pc, #4	; (adr r2, 80105f4 <prvProcessReceivedCommands+0x78>)
 80105ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f2:	bf00      	nop
 80105f4:	0801061d 	.word	0x0801061d
 80105f8:	0801061d 	.word	0x0801061d
 80105fc:	0801061d 	.word	0x0801061d
 8010600:	08010691 	.word	0x08010691
 8010604:	080106a5 	.word	0x080106a5
 8010608:	080106ef 	.word	0x080106ef
 801060c:	0801061d 	.word	0x0801061d
 8010610:	0801061d 	.word	0x0801061d
 8010614:	08010691 	.word	0x08010691
 8010618:	080106a5 	.word	0x080106a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801061c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010622:	f043 0301 	orr.w	r3, r3, #1
 8010626:	b2da      	uxtb	r2, r3
 8010628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	18d1      	adds	r1, r2, r3
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801063a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801063c:	f7ff ff5c 	bl	80104f8 <prvInsertTimerInActiveList>
 8010640:	4603      	mov	r3, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	d069      	beq.n	801071a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	6a1b      	ldr	r3, [r3, #32]
 801064a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801064c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010654:	f003 0304 	and.w	r3, r3, #4
 8010658:	2b00      	cmp	r3, #0
 801065a:	d05e      	beq.n	801071a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010660:	699b      	ldr	r3, [r3, #24]
 8010662:	441a      	add	r2, r3
 8010664:	2300      	movs	r3, #0
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	2300      	movs	r3, #0
 801066a:	2100      	movs	r1, #0
 801066c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801066e:	f7ff fe05 	bl	801027c <xTimerGenericCommand>
 8010672:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d14f      	bne.n	801071a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067e:	f383 8811 	msr	BASEPRI, r3
 8010682:	f3bf 8f6f 	isb	sy
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	61bb      	str	r3, [r7, #24]
}
 801068c:	bf00      	nop
 801068e:	e7fe      	b.n	801068e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010696:	f023 0301 	bic.w	r3, r3, #1
 801069a:	b2da      	uxtb	r2, r3
 801069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80106a2:	e03a      	b.n	801071a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106aa:	f043 0301 	orr.w	r3, r3, #1
 80106ae:	b2da      	uxtb	r2, r3
 80106b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80106bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d10a      	bne.n	80106da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80106c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	617b      	str	r3, [r7, #20]
}
 80106d6:	bf00      	nop
 80106d8:	e7fe      	b.n	80106d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	699a      	ldr	r2, [r3, #24]
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	18d1      	adds	r1, r2, r3
 80106e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106e8:	f7ff ff06 	bl	80104f8 <prvInsertTimerInActiveList>
					break;
 80106ec:	e015      	b.n	801071a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106f4:	f003 0302 	and.w	r3, r3, #2
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d103      	bne.n	8010704 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80106fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106fe:	f000 fbff 	bl	8010f00 <vPortFree>
 8010702:	e00a      	b.n	801071a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801070a:	f023 0301 	bic.w	r3, r3, #1
 801070e:	b2da      	uxtb	r2, r3
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010716:	e000      	b.n	801071a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010718:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801071a:	4b08      	ldr	r3, [pc, #32]	; (801073c <prvProcessReceivedCommands+0x1c0>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	1d39      	adds	r1, r7, #4
 8010720:	2200      	movs	r2, #0
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe fb60 	bl	800ede8 <xQueueReceive>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	f47f af2a 	bne.w	8010584 <prvProcessReceivedCommands+0x8>
	}
}
 8010730:	bf00      	nop
 8010732:	bf00      	nop
 8010734:	3730      	adds	r7, #48	; 0x30
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	24001228 	.word	0x24001228

08010740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b088      	sub	sp, #32
 8010744:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010746:	e048      	b.n	80107da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010748:	4b2d      	ldr	r3, [pc, #180]	; (8010800 <prvSwitchTimerLists+0xc0>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010752:	4b2b      	ldr	r3, [pc, #172]	; (8010800 <prvSwitchTimerLists+0xc0>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	3304      	adds	r3, #4
 8010760:	4618      	mov	r0, r3
 8010762:	f7fe f879 	bl	800e858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6a1b      	ldr	r3, [r3, #32]
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d02e      	beq.n	80107da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	699b      	ldr	r3, [r3, #24]
 8010780:	693a      	ldr	r2, [r7, #16]
 8010782:	4413      	add	r3, r2
 8010784:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010786:	68ba      	ldr	r2, [r7, #8]
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	429a      	cmp	r2, r3
 801078c:	d90e      	bls.n	80107ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	68ba      	ldr	r2, [r7, #8]
 8010792:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801079a:	4b19      	ldr	r3, [pc, #100]	; (8010800 <prvSwitchTimerLists+0xc0>)
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	3304      	adds	r3, #4
 80107a2:	4619      	mov	r1, r3
 80107a4:	4610      	mov	r0, r2
 80107a6:	f7fe f81e 	bl	800e7e6 <vListInsert>
 80107aa:	e016      	b.n	80107da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107ac:	2300      	movs	r3, #0
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	2300      	movs	r3, #0
 80107b2:	693a      	ldr	r2, [r7, #16]
 80107b4:	2100      	movs	r1, #0
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f7ff fd60 	bl	801027c <xTimerGenericCommand>
 80107bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10a      	bne.n	80107da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80107c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c8:	f383 8811 	msr	BASEPRI, r3
 80107cc:	f3bf 8f6f 	isb	sy
 80107d0:	f3bf 8f4f 	dsb	sy
 80107d4:	603b      	str	r3, [r7, #0]
}
 80107d6:	bf00      	nop
 80107d8:	e7fe      	b.n	80107d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80107da:	4b09      	ldr	r3, [pc, #36]	; (8010800 <prvSwitchTimerLists+0xc0>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1b1      	bne.n	8010748 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80107e4:	4b06      	ldr	r3, [pc, #24]	; (8010800 <prvSwitchTimerLists+0xc0>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80107ea:	4b06      	ldr	r3, [pc, #24]	; (8010804 <prvSwitchTimerLists+0xc4>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	4a04      	ldr	r2, [pc, #16]	; (8010800 <prvSwitchTimerLists+0xc0>)
 80107f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80107f2:	4a04      	ldr	r2, [pc, #16]	; (8010804 <prvSwitchTimerLists+0xc4>)
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	6013      	str	r3, [r2, #0]
}
 80107f8:	bf00      	nop
 80107fa:	3718      	adds	r7, #24
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	24001220 	.word	0x24001220
 8010804:	24001224 	.word	0x24001224

08010808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801080e:	f000 f989 	bl	8010b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010812:	4b15      	ldr	r3, [pc, #84]	; (8010868 <prvCheckForValidListAndQueue+0x60>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d120      	bne.n	801085c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801081a:	4814      	ldr	r0, [pc, #80]	; (801086c <prvCheckForValidListAndQueue+0x64>)
 801081c:	f7fd ff92 	bl	800e744 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010820:	4813      	ldr	r0, [pc, #76]	; (8010870 <prvCheckForValidListAndQueue+0x68>)
 8010822:	f7fd ff8f 	bl	800e744 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010826:	4b13      	ldr	r3, [pc, #76]	; (8010874 <prvCheckForValidListAndQueue+0x6c>)
 8010828:	4a10      	ldr	r2, [pc, #64]	; (801086c <prvCheckForValidListAndQueue+0x64>)
 801082a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801082c:	4b12      	ldr	r3, [pc, #72]	; (8010878 <prvCheckForValidListAndQueue+0x70>)
 801082e:	4a10      	ldr	r2, [pc, #64]	; (8010870 <prvCheckForValidListAndQueue+0x68>)
 8010830:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010832:	2300      	movs	r3, #0
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	4b11      	ldr	r3, [pc, #68]	; (801087c <prvCheckForValidListAndQueue+0x74>)
 8010838:	4a11      	ldr	r2, [pc, #68]	; (8010880 <prvCheckForValidListAndQueue+0x78>)
 801083a:	2110      	movs	r1, #16
 801083c:	200a      	movs	r0, #10
 801083e:	f7fe f89d 	bl	800e97c <xQueueGenericCreateStatic>
 8010842:	4603      	mov	r3, r0
 8010844:	4a08      	ldr	r2, [pc, #32]	; (8010868 <prvCheckForValidListAndQueue+0x60>)
 8010846:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010848:	4b07      	ldr	r3, [pc, #28]	; (8010868 <prvCheckForValidListAndQueue+0x60>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d005      	beq.n	801085c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010850:	4b05      	ldr	r3, [pc, #20]	; (8010868 <prvCheckForValidListAndQueue+0x60>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	490b      	ldr	r1, [pc, #44]	; (8010884 <prvCheckForValidListAndQueue+0x7c>)
 8010856:	4618      	mov	r0, r3
 8010858:	f7fe fcb6 	bl	800f1c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801085c:	f000 f992 	bl	8010b84 <vPortExitCritical>
}
 8010860:	bf00      	nop
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	24001228 	.word	0x24001228
 801086c:	240011f8 	.word	0x240011f8
 8010870:	2400120c 	.word	0x2400120c
 8010874:	24001220 	.word	0x24001220
 8010878:	24001224 	.word	0x24001224
 801087c:	240012d4 	.word	0x240012d4
 8010880:	24001234 	.word	0x24001234
 8010884:	08011da4 	.word	0x08011da4

08010888 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010888:	b580      	push	{r7, lr}
 801088a:	b08a      	sub	sp, #40	; 0x28
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010896:	f06f 0301 	mvn.w	r3, #1
 801089a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80108a8:	4b06      	ldr	r3, [pc, #24]	; (80108c4 <xTimerPendFunctionCallFromISR+0x3c>)
 80108aa:	6818      	ldr	r0, [r3, #0]
 80108ac:	f107 0114 	add.w	r1, r7, #20
 80108b0:	2300      	movs	r3, #0
 80108b2:	683a      	ldr	r2, [r7, #0]
 80108b4:	f7fe f9fc 	bl	800ecb0 <xQueueGenericSendFromISR>
 80108b8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80108bc:	4618      	mov	r0, r3
 80108be:	3728      	adds	r7, #40	; 0x28
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	24001228 	.word	0x24001228

080108c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	3b04      	subs	r3, #4
 80108d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80108e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	3b04      	subs	r3, #4
 80108e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	f023 0201 	bic.w	r2, r3, #1
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	3b04      	subs	r3, #4
 80108f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80108f8:	4a0c      	ldr	r2, [pc, #48]	; (801092c <pxPortInitialiseStack+0x64>)
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	3b14      	subs	r3, #20
 8010902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3b04      	subs	r3, #4
 801090e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f06f 0202 	mvn.w	r2, #2
 8010916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	3b20      	subs	r3, #32
 801091c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801091e:	68fb      	ldr	r3, [r7, #12]
}
 8010920:	4618      	mov	r0, r3
 8010922:	3714      	adds	r7, #20
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr
 801092c:	08010931 	.word	0x08010931

08010930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010936:	2300      	movs	r3, #0
 8010938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801093a:	4b12      	ldr	r3, [pc, #72]	; (8010984 <prvTaskExitError+0x54>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010942:	d00a      	beq.n	801095a <prvTaskExitError+0x2a>
	__asm volatile
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	60fb      	str	r3, [r7, #12]
}
 8010956:	bf00      	nop
 8010958:	e7fe      	b.n	8010958 <prvTaskExitError+0x28>
	__asm volatile
 801095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095e:	f383 8811 	msr	BASEPRI, r3
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	60bb      	str	r3, [r7, #8]
}
 801096c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801096e:	bf00      	nop
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d0fc      	beq.n	8010970 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010976:	bf00      	nop
 8010978:	bf00      	nop
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	24000010 	.word	0x24000010
	...

08010990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010990:	4b07      	ldr	r3, [pc, #28]	; (80109b0 <pxCurrentTCBConst2>)
 8010992:	6819      	ldr	r1, [r3, #0]
 8010994:	6808      	ldr	r0, [r1, #0]
 8010996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099a:	f380 8809 	msr	PSP, r0
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f04f 0000 	mov.w	r0, #0
 80109a6:	f380 8811 	msr	BASEPRI, r0
 80109aa:	4770      	bx	lr
 80109ac:	f3af 8000 	nop.w

080109b0 <pxCurrentTCBConst2>:
 80109b0:	24000cf8 	.word	0x24000cf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80109b4:	bf00      	nop
 80109b6:	bf00      	nop

080109b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80109b8:	4808      	ldr	r0, [pc, #32]	; (80109dc <prvPortStartFirstTask+0x24>)
 80109ba:	6800      	ldr	r0, [r0, #0]
 80109bc:	6800      	ldr	r0, [r0, #0]
 80109be:	f380 8808 	msr	MSP, r0
 80109c2:	f04f 0000 	mov.w	r0, #0
 80109c6:	f380 8814 	msr	CONTROL, r0
 80109ca:	b662      	cpsie	i
 80109cc:	b661      	cpsie	f
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	df00      	svc	0
 80109d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80109da:	bf00      	nop
 80109dc:	e000ed08 	.word	0xe000ed08

080109e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80109e6:	4b46      	ldr	r3, [pc, #280]	; (8010b00 <xPortStartScheduler+0x120>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4a46      	ldr	r2, [pc, #280]	; (8010b04 <xPortStartScheduler+0x124>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d10a      	bne.n	8010a06 <xPortStartScheduler+0x26>
	__asm volatile
 80109f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f4:	f383 8811 	msr	BASEPRI, r3
 80109f8:	f3bf 8f6f 	isb	sy
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	613b      	str	r3, [r7, #16]
}
 8010a02:	bf00      	nop
 8010a04:	e7fe      	b.n	8010a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010a06:	4b3e      	ldr	r3, [pc, #248]	; (8010b00 <xPortStartScheduler+0x120>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4a3f      	ldr	r2, [pc, #252]	; (8010b08 <xPortStartScheduler+0x128>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d10a      	bne.n	8010a26 <xPortStartScheduler+0x46>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	f383 8811 	msr	BASEPRI, r3
 8010a18:	f3bf 8f6f 	isb	sy
 8010a1c:	f3bf 8f4f 	dsb	sy
 8010a20:	60fb      	str	r3, [r7, #12]
}
 8010a22:	bf00      	nop
 8010a24:	e7fe      	b.n	8010a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010a26:	4b39      	ldr	r3, [pc, #228]	; (8010b0c <xPortStartScheduler+0x12c>)
 8010a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	22ff      	movs	r2, #255	; 0xff
 8010a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	4b31      	ldr	r3, [pc, #196]	; (8010b10 <xPortStartScheduler+0x130>)
 8010a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010a4e:	4b31      	ldr	r3, [pc, #196]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a50:	2207      	movs	r2, #7
 8010a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a54:	e009      	b.n	8010a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010a56:	4b2f      	ldr	r3, [pc, #188]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	4a2d      	ldr	r2, [pc, #180]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a60:	78fb      	ldrb	r3, [r7, #3]
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a6a:	78fb      	ldrb	r3, [r7, #3]
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a72:	2b80      	cmp	r3, #128	; 0x80
 8010a74:	d0ef      	beq.n	8010a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a76:	4b27      	ldr	r3, [pc, #156]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f1c3 0307 	rsb	r3, r3, #7
 8010a7e:	2b04      	cmp	r3, #4
 8010a80:	d00a      	beq.n	8010a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8010a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a86:	f383 8811 	msr	BASEPRI, r3
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	60bb      	str	r3, [r7, #8]
}
 8010a94:	bf00      	nop
 8010a96:	e7fe      	b.n	8010a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a98:	4b1e      	ldr	r3, [pc, #120]	; (8010b14 <xPortStartScheduler+0x134>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	021b      	lsls	r3, r3, #8
 8010a9e:	4a1d      	ldr	r2, [pc, #116]	; (8010b14 <xPortStartScheduler+0x134>)
 8010aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010aa2:	4b1c      	ldr	r3, [pc, #112]	; (8010b14 <xPortStartScheduler+0x134>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010aaa:	4a1a      	ldr	r2, [pc, #104]	; (8010b14 <xPortStartScheduler+0x134>)
 8010aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	b2da      	uxtb	r2, r3
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010ab6:	4b18      	ldr	r3, [pc, #96]	; (8010b18 <xPortStartScheduler+0x138>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4a17      	ldr	r2, [pc, #92]	; (8010b18 <xPortStartScheduler+0x138>)
 8010abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ac2:	4b15      	ldr	r3, [pc, #84]	; (8010b18 <xPortStartScheduler+0x138>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4a14      	ldr	r2, [pc, #80]	; (8010b18 <xPortStartScheduler+0x138>)
 8010ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ace:	f000 f8dd 	bl	8010c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ad2:	4b12      	ldr	r3, [pc, #72]	; (8010b1c <xPortStartScheduler+0x13c>)
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ad8:	f000 f8fc 	bl	8010cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010adc:	4b10      	ldr	r3, [pc, #64]	; (8010b20 <xPortStartScheduler+0x140>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a0f      	ldr	r2, [pc, #60]	; (8010b20 <xPortStartScheduler+0x140>)
 8010ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010ae8:	f7ff ff66 	bl	80109b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010aec:	f7fe ff7c 	bl	800f9e8 <vTaskSwitchContext>
	prvTaskExitError();
 8010af0:	f7ff ff1e 	bl	8010930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3718      	adds	r7, #24
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	e000ed00 	.word	0xe000ed00
 8010b04:	410fc271 	.word	0x410fc271
 8010b08:	410fc270 	.word	0x410fc270
 8010b0c:	e000e400 	.word	0xe000e400
 8010b10:	24001324 	.word	0x24001324
 8010b14:	24001328 	.word	0x24001328
 8010b18:	e000ed20 	.word	0xe000ed20
 8010b1c:	24000010 	.word	0x24000010
 8010b20:	e000ef34 	.word	0xe000ef34

08010b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
	__asm volatile
 8010b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2e:	f383 8811 	msr	BASEPRI, r3
 8010b32:	f3bf 8f6f 	isb	sy
 8010b36:	f3bf 8f4f 	dsb	sy
 8010b3a:	607b      	str	r3, [r7, #4]
}
 8010b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010b3e:	4b0f      	ldr	r3, [pc, #60]	; (8010b7c <vPortEnterCritical+0x58>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3301      	adds	r3, #1
 8010b44:	4a0d      	ldr	r2, [pc, #52]	; (8010b7c <vPortEnterCritical+0x58>)
 8010b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010b48:	4b0c      	ldr	r3, [pc, #48]	; (8010b7c <vPortEnterCritical+0x58>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d10f      	bne.n	8010b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b50:	4b0b      	ldr	r3, [pc, #44]	; (8010b80 <vPortEnterCritical+0x5c>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00a      	beq.n	8010b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8010b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	603b      	str	r3, [r7, #0]
}
 8010b6c:	bf00      	nop
 8010b6e:	e7fe      	b.n	8010b6e <vPortEnterCritical+0x4a>
	}
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr
 8010b7c:	24000010 	.word	0x24000010
 8010b80:	e000ed04 	.word	0xe000ed04

08010b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b8a:	4b12      	ldr	r3, [pc, #72]	; (8010bd4 <vPortExitCritical+0x50>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d10a      	bne.n	8010ba8 <vPortExitCritical+0x24>
	__asm volatile
 8010b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	607b      	str	r3, [r7, #4]
}
 8010ba4:	bf00      	nop
 8010ba6:	e7fe      	b.n	8010ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010ba8:	4b0a      	ldr	r3, [pc, #40]	; (8010bd4 <vPortExitCritical+0x50>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	3b01      	subs	r3, #1
 8010bae:	4a09      	ldr	r2, [pc, #36]	; (8010bd4 <vPortExitCritical+0x50>)
 8010bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010bb2:	4b08      	ldr	r3, [pc, #32]	; (8010bd4 <vPortExitCritical+0x50>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d105      	bne.n	8010bc6 <vPortExitCritical+0x42>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	f383 8811 	msr	BASEPRI, r3
}
 8010bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010bc6:	bf00      	nop
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	24000010 	.word	0x24000010
	...

08010be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010be0:	f3ef 8009 	mrs	r0, PSP
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	4b15      	ldr	r3, [pc, #84]	; (8010c40 <pxCurrentTCBConst>)
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	f01e 0f10 	tst.w	lr, #16
 8010bf0:	bf08      	it	eq
 8010bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bfa:	6010      	str	r0, [r2, #0]
 8010bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c04:	f380 8811 	msr	BASEPRI, r0
 8010c08:	f3bf 8f4f 	dsb	sy
 8010c0c:	f3bf 8f6f 	isb	sy
 8010c10:	f7fe feea 	bl	800f9e8 <vTaskSwitchContext>
 8010c14:	f04f 0000 	mov.w	r0, #0
 8010c18:	f380 8811 	msr	BASEPRI, r0
 8010c1c:	bc09      	pop	{r0, r3}
 8010c1e:	6819      	ldr	r1, [r3, #0]
 8010c20:	6808      	ldr	r0, [r1, #0]
 8010c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c26:	f01e 0f10 	tst.w	lr, #16
 8010c2a:	bf08      	it	eq
 8010c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010c30:	f380 8809 	msr	PSP, r0
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	f3af 8000 	nop.w

08010c40 <pxCurrentTCBConst>:
 8010c40:	24000cf8 	.word	0x24000cf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010c44:	bf00      	nop
 8010c46:	bf00      	nop

08010c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	607b      	str	r3, [r7, #4]
}
 8010c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c62:	f7fe fe07 	bl	800f874 <xTaskIncrementTick>
 8010c66:	4603      	mov	r3, r0
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d003      	beq.n	8010c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c6c:	4b06      	ldr	r3, [pc, #24]	; (8010c88 <xPortSysTickHandler+0x40>)
 8010c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c72:	601a      	str	r2, [r3, #0]
 8010c74:	2300      	movs	r3, #0
 8010c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	f383 8811 	msr	BASEPRI, r3
}
 8010c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c80:	bf00      	nop
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	e000ed04 	.word	0xe000ed04

08010c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c90:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <vPortSetupTimerInterrupt+0x34>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c96:	4b0b      	ldr	r3, [pc, #44]	; (8010cc4 <vPortSetupTimerInterrupt+0x38>)
 8010c98:	2200      	movs	r2, #0
 8010c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c9c:	4b0a      	ldr	r3, [pc, #40]	; (8010cc8 <vPortSetupTimerInterrupt+0x3c>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a0a      	ldr	r2, [pc, #40]	; (8010ccc <vPortSetupTimerInterrupt+0x40>)
 8010ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ca6:	099b      	lsrs	r3, r3, #6
 8010ca8:	4a09      	ldr	r2, [pc, #36]	; (8010cd0 <vPortSetupTimerInterrupt+0x44>)
 8010caa:	3b01      	subs	r3, #1
 8010cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010cae:	4b04      	ldr	r3, [pc, #16]	; (8010cc0 <vPortSetupTimerInterrupt+0x34>)
 8010cb0:	2207      	movs	r2, #7
 8010cb2:	601a      	str	r2, [r3, #0]
}
 8010cb4:	bf00      	nop
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	e000e010 	.word	0xe000e010
 8010cc4:	e000e018 	.word	0xe000e018
 8010cc8:	24000000 	.word	0x24000000
 8010ccc:	10624dd3 	.word	0x10624dd3
 8010cd0:	e000e014 	.word	0xe000e014

08010cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ce4 <vPortEnableVFP+0x10>
 8010cd8:	6801      	ldr	r1, [r0, #0]
 8010cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010cde:	6001      	str	r1, [r0, #0]
 8010ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ce2:	bf00      	nop
 8010ce4:	e000ed88 	.word	0xe000ed88

08010ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010cee:	f3ef 8305 	mrs	r3, IPSR
 8010cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2b0f      	cmp	r3, #15
 8010cf8:	d914      	bls.n	8010d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010cfa:	4a17      	ldr	r2, [pc, #92]	; (8010d58 <vPortValidateInterruptPriority+0x70>)
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	4413      	add	r3, r2
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d04:	4b15      	ldr	r3, [pc, #84]	; (8010d5c <vPortValidateInterruptPriority+0x74>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	7afa      	ldrb	r2, [r7, #11]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d20a      	bcs.n	8010d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d12:	f383 8811 	msr	BASEPRI, r3
 8010d16:	f3bf 8f6f 	isb	sy
 8010d1a:	f3bf 8f4f 	dsb	sy
 8010d1e:	607b      	str	r3, [r7, #4]
}
 8010d20:	bf00      	nop
 8010d22:	e7fe      	b.n	8010d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d24:	4b0e      	ldr	r3, [pc, #56]	; (8010d60 <vPortValidateInterruptPriority+0x78>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010d2c:	4b0d      	ldr	r3, [pc, #52]	; (8010d64 <vPortValidateInterruptPriority+0x7c>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d90a      	bls.n	8010d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	603b      	str	r3, [r7, #0]
}
 8010d46:	bf00      	nop
 8010d48:	e7fe      	b.n	8010d48 <vPortValidateInterruptPriority+0x60>
	}
 8010d4a:	bf00      	nop
 8010d4c:	3714      	adds	r7, #20
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	e000e3f0 	.word	0xe000e3f0
 8010d5c:	24001324 	.word	0x24001324
 8010d60:	e000ed0c 	.word	0xe000ed0c
 8010d64:	24001328 	.word	0x24001328

08010d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08a      	sub	sp, #40	; 0x28
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d70:	2300      	movs	r3, #0
 8010d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d74:	f7fe fcc2 	bl	800f6fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d78:	4b5b      	ldr	r3, [pc, #364]	; (8010ee8 <pvPortMalloc+0x180>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d80:	f000 f920 	bl	8010fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d84:	4b59      	ldr	r3, [pc, #356]	; (8010eec <pvPortMalloc+0x184>)
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4013      	ands	r3, r2
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f040 8093 	bne.w	8010eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d01d      	beq.n	8010dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010d98:	2208      	movs	r2, #8
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f003 0307 	and.w	r3, r3, #7
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d014      	beq.n	8010dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f023 0307 	bic.w	r3, r3, #7
 8010db0:	3308      	adds	r3, #8
 8010db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f003 0307 	and.w	r3, r3, #7
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00a      	beq.n	8010dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	617b      	str	r3, [r7, #20]
}
 8010dd0:	bf00      	nop
 8010dd2:	e7fe      	b.n	8010dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d06e      	beq.n	8010eb8 <pvPortMalloc+0x150>
 8010dda:	4b45      	ldr	r3, [pc, #276]	; (8010ef0 <pvPortMalloc+0x188>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d869      	bhi.n	8010eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010de4:	4b43      	ldr	r3, [pc, #268]	; (8010ef4 <pvPortMalloc+0x18c>)
 8010de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010de8:	4b42      	ldr	r3, [pc, #264]	; (8010ef4 <pvPortMalloc+0x18c>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dee:	e004      	b.n	8010dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d903      	bls.n	8010e0c <pvPortMalloc+0xa4>
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1f1      	bne.n	8010df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e0c:	4b36      	ldr	r3, [pc, #216]	; (8010ee8 <pvPortMalloc+0x180>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d050      	beq.n	8010eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e16:	6a3b      	ldr	r3, [r7, #32]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2208      	movs	r2, #8
 8010e1c:	4413      	add	r3, r2
 8010e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	6a3b      	ldr	r3, [r7, #32]
 8010e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2a:	685a      	ldr	r2, [r3, #4]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	1ad2      	subs	r2, r2, r3
 8010e30:	2308      	movs	r3, #8
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d91f      	bls.n	8010e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	f003 0307 	and.w	r3, r3, #7
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00a      	beq.n	8010e60 <pvPortMalloc+0xf8>
	__asm volatile
 8010e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4e:	f383 8811 	msr	BASEPRI, r3
 8010e52:	f3bf 8f6f 	isb	sy
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	613b      	str	r3, [r7, #16]
}
 8010e5c:	bf00      	nop
 8010e5e:	e7fe      	b.n	8010e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e62:	685a      	ldr	r2, [r3, #4]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	1ad2      	subs	r2, r2, r3
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e72:	69b8      	ldr	r0, [r7, #24]
 8010e74:	f000 f908 	bl	8011088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e78:	4b1d      	ldr	r3, [pc, #116]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	4a1b      	ldr	r2, [pc, #108]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e86:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	4b1b      	ldr	r3, [pc, #108]	; (8010ef8 <pvPortMalloc+0x190>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d203      	bcs.n	8010e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e92:	4b17      	ldr	r3, [pc, #92]	; (8010ef0 <pvPortMalloc+0x188>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4a18      	ldr	r2, [pc, #96]	; (8010ef8 <pvPortMalloc+0x190>)
 8010e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	4b13      	ldr	r3, [pc, #76]	; (8010eec <pvPortMalloc+0x184>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	431a      	orrs	r2, r3
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	2200      	movs	r2, #0
 8010eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010eae:	4b13      	ldr	r3, [pc, #76]	; (8010efc <pvPortMalloc+0x194>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	4a11      	ldr	r2, [pc, #68]	; (8010efc <pvPortMalloc+0x194>)
 8010eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010eb8:	f7fe fc2e 	bl	800f718 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	f003 0307 	and.w	r3, r3, #7
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d00a      	beq.n	8010edc <pvPortMalloc+0x174>
	__asm volatile
 8010ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eca:	f383 8811 	msr	BASEPRI, r3
 8010ece:	f3bf 8f6f 	isb	sy
 8010ed2:	f3bf 8f4f 	dsb	sy
 8010ed6:	60fb      	str	r3, [r7, #12]
}
 8010ed8:	bf00      	nop
 8010eda:	e7fe      	b.n	8010eda <pvPortMalloc+0x172>
	return pvReturn;
 8010edc:	69fb      	ldr	r3, [r7, #28]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3728      	adds	r7, #40	; 0x28
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	24004f34 	.word	0x24004f34
 8010eec:	24004f48 	.word	0x24004f48
 8010ef0:	24004f38 	.word	0x24004f38
 8010ef4:	24004f2c 	.word	0x24004f2c
 8010ef8:	24004f3c 	.word	0x24004f3c
 8010efc:	24004f40 	.word	0x24004f40

08010f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d04d      	beq.n	8010fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f12:	2308      	movs	r3, #8
 8010f14:	425b      	negs	r3, r3
 8010f16:	697a      	ldr	r2, [r7, #20]
 8010f18:	4413      	add	r3, r2
 8010f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	685a      	ldr	r2, [r3, #4]
 8010f24:	4b24      	ldr	r3, [pc, #144]	; (8010fb8 <vPortFree+0xb8>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	4013      	ands	r3, r2
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d10a      	bne.n	8010f44 <vPortFree+0x44>
	__asm volatile
 8010f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f32:	f383 8811 	msr	BASEPRI, r3
 8010f36:	f3bf 8f6f 	isb	sy
 8010f3a:	f3bf 8f4f 	dsb	sy
 8010f3e:	60fb      	str	r3, [r7, #12]
}
 8010f40:	bf00      	nop
 8010f42:	e7fe      	b.n	8010f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00a      	beq.n	8010f62 <vPortFree+0x62>
	__asm volatile
 8010f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f50:	f383 8811 	msr	BASEPRI, r3
 8010f54:	f3bf 8f6f 	isb	sy
 8010f58:	f3bf 8f4f 	dsb	sy
 8010f5c:	60bb      	str	r3, [r7, #8]
}
 8010f5e:	bf00      	nop
 8010f60:	e7fe      	b.n	8010f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	685a      	ldr	r2, [r3, #4]
 8010f66:	4b14      	ldr	r3, [pc, #80]	; (8010fb8 <vPortFree+0xb8>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4013      	ands	r3, r2
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d01e      	beq.n	8010fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d11a      	bne.n	8010fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	4b0e      	ldr	r3, [pc, #56]	; (8010fb8 <vPortFree+0xb8>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	43db      	mvns	r3, r3
 8010f82:	401a      	ands	r2, r3
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f88:	f7fe fbb8 	bl	800f6fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	685a      	ldr	r2, [r3, #4]
 8010f90:	4b0a      	ldr	r3, [pc, #40]	; (8010fbc <vPortFree+0xbc>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4413      	add	r3, r2
 8010f96:	4a09      	ldr	r2, [pc, #36]	; (8010fbc <vPortFree+0xbc>)
 8010f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f9a:	6938      	ldr	r0, [r7, #16]
 8010f9c:	f000 f874 	bl	8011088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010fa0:	4b07      	ldr	r3, [pc, #28]	; (8010fc0 <vPortFree+0xc0>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	4a06      	ldr	r2, [pc, #24]	; (8010fc0 <vPortFree+0xc0>)
 8010fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010faa:	f7fe fbb5 	bl	800f718 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010fae:	bf00      	nop
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	24004f48 	.word	0x24004f48
 8010fbc:	24004f38 	.word	0x24004f38
 8010fc0:	24004f44 	.word	0x24004f44

08010fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010fd0:	4b27      	ldr	r3, [pc, #156]	; (8011070 <prvHeapInit+0xac>)
 8010fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f003 0307 	and.w	r3, r3, #7
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d00c      	beq.n	8010ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	3307      	adds	r3, #7
 8010fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f023 0307 	bic.w	r3, r3, #7
 8010fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	1ad3      	subs	r3, r2, r3
 8010ff2:	4a1f      	ldr	r2, [pc, #124]	; (8011070 <prvHeapInit+0xac>)
 8010ff4:	4413      	add	r3, r2
 8010ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010ffc:	4a1d      	ldr	r2, [pc, #116]	; (8011074 <prvHeapInit+0xb0>)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011002:	4b1c      	ldr	r3, [pc, #112]	; (8011074 <prvHeapInit+0xb0>)
 8011004:	2200      	movs	r2, #0
 8011006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	68ba      	ldr	r2, [r7, #8]
 801100c:	4413      	add	r3, r2
 801100e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011010:	2208      	movs	r2, #8
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	1a9b      	subs	r3, r3, r2
 8011016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	f023 0307 	bic.w	r3, r3, #7
 801101e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	4a15      	ldr	r2, [pc, #84]	; (8011078 <prvHeapInit+0xb4>)
 8011024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011026:	4b14      	ldr	r3, [pc, #80]	; (8011078 <prvHeapInit+0xb4>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2200      	movs	r2, #0
 801102c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801102e:	4b12      	ldr	r3, [pc, #72]	; (8011078 <prvHeapInit+0xb4>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2200      	movs	r2, #0
 8011034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	68fa      	ldr	r2, [r7, #12]
 801103e:	1ad2      	subs	r2, r2, r3
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011044:	4b0c      	ldr	r3, [pc, #48]	; (8011078 <prvHeapInit+0xb4>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	4a0a      	ldr	r2, [pc, #40]	; (801107c <prvHeapInit+0xb8>)
 8011052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	4a09      	ldr	r2, [pc, #36]	; (8011080 <prvHeapInit+0xbc>)
 801105a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801105c:	4b09      	ldr	r3, [pc, #36]	; (8011084 <prvHeapInit+0xc0>)
 801105e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011062:	601a      	str	r2, [r3, #0]
}
 8011064:	bf00      	nop
 8011066:	3714      	adds	r7, #20
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr
 8011070:	2400132c 	.word	0x2400132c
 8011074:	24004f2c 	.word	0x24004f2c
 8011078:	24004f34 	.word	0x24004f34
 801107c:	24004f3c 	.word	0x24004f3c
 8011080:	24004f38 	.word	0x24004f38
 8011084:	24004f48 	.word	0x24004f48

08011088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011090:	4b28      	ldr	r3, [pc, #160]	; (8011134 <prvInsertBlockIntoFreeList+0xac>)
 8011092:	60fb      	str	r3, [r7, #12]
 8011094:	e002      	b.n	801109c <prvInsertBlockIntoFreeList+0x14>
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	60fb      	str	r3, [r7, #12]
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d8f7      	bhi.n	8011096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	68ba      	ldr	r2, [r7, #8]
 80110b0:	4413      	add	r3, r2
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d108      	bne.n	80110ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	685a      	ldr	r2, [r3, #4]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	441a      	add	r2, r3
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	68ba      	ldr	r2, [r7, #8]
 80110d4:	441a      	add	r2, r3
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d118      	bne.n	8011110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	4b15      	ldr	r3, [pc, #84]	; (8011138 <prvInsertBlockIntoFreeList+0xb0>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d00d      	beq.n	8011106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	685a      	ldr	r2, [r3, #4]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	441a      	add	r2, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	601a      	str	r2, [r3, #0]
 8011104:	e008      	b.n	8011118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011106:	4b0c      	ldr	r3, [pc, #48]	; (8011138 <prvInsertBlockIntoFreeList+0xb0>)
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	601a      	str	r2, [r3, #0]
 801110e:	e003      	b.n	8011118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681a      	ldr	r2, [r3, #0]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011118:	68fa      	ldr	r2, [r7, #12]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	429a      	cmp	r2, r3
 801111e:	d002      	beq.n	8011126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011126:	bf00      	nop
 8011128:	3714      	adds	r7, #20
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	24004f2c 	.word	0x24004f2c
 8011138:	24004f34 	.word	0x24004f34

0801113c <__errno>:
 801113c:	4b01      	ldr	r3, [pc, #4]	; (8011144 <__errno+0x8>)
 801113e:	6818      	ldr	r0, [r3, #0]
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	24000014 	.word	0x24000014

08011148 <__libc_init_array>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	4d0d      	ldr	r5, [pc, #52]	; (8011180 <__libc_init_array+0x38>)
 801114c:	4c0d      	ldr	r4, [pc, #52]	; (8011184 <__libc_init_array+0x3c>)
 801114e:	1b64      	subs	r4, r4, r5
 8011150:	10a4      	asrs	r4, r4, #2
 8011152:	2600      	movs	r6, #0
 8011154:	42a6      	cmp	r6, r4
 8011156:	d109      	bne.n	801116c <__libc_init_array+0x24>
 8011158:	4d0b      	ldr	r5, [pc, #44]	; (8011188 <__libc_init_array+0x40>)
 801115a:	4c0c      	ldr	r4, [pc, #48]	; (801118c <__libc_init_array+0x44>)
 801115c:	f000 fd2c 	bl	8011bb8 <_init>
 8011160:	1b64      	subs	r4, r4, r5
 8011162:	10a4      	asrs	r4, r4, #2
 8011164:	2600      	movs	r6, #0
 8011166:	42a6      	cmp	r6, r4
 8011168:	d105      	bne.n	8011176 <__libc_init_array+0x2e>
 801116a:	bd70      	pop	{r4, r5, r6, pc}
 801116c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011170:	4798      	blx	r3
 8011172:	3601      	adds	r6, #1
 8011174:	e7ee      	b.n	8011154 <__libc_init_array+0xc>
 8011176:	f855 3b04 	ldr.w	r3, [r5], #4
 801117a:	4798      	blx	r3
 801117c:	3601      	adds	r6, #1
 801117e:	e7f2      	b.n	8011166 <__libc_init_array+0x1e>
 8011180:	08011ee8 	.word	0x08011ee8
 8011184:	08011ee8 	.word	0x08011ee8
 8011188:	08011ee8 	.word	0x08011ee8
 801118c:	08011eec 	.word	0x08011eec

08011190 <memcpy>:
 8011190:	440a      	add	r2, r1
 8011192:	4291      	cmp	r1, r2
 8011194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011198:	d100      	bne.n	801119c <memcpy+0xc>
 801119a:	4770      	bx	lr
 801119c:	b510      	push	{r4, lr}
 801119e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111a6:	4291      	cmp	r1, r2
 80111a8:	d1f9      	bne.n	801119e <memcpy+0xe>
 80111aa:	bd10      	pop	{r4, pc}

080111ac <memset>:
 80111ac:	4402      	add	r2, r0
 80111ae:	4603      	mov	r3, r0
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d100      	bne.n	80111b6 <memset+0xa>
 80111b4:	4770      	bx	lr
 80111b6:	f803 1b01 	strb.w	r1, [r3], #1
 80111ba:	e7f9      	b.n	80111b0 <memset+0x4>

080111bc <_puts_r>:
 80111bc:	b570      	push	{r4, r5, r6, lr}
 80111be:	460e      	mov	r6, r1
 80111c0:	4605      	mov	r5, r0
 80111c2:	b118      	cbz	r0, 80111cc <_puts_r+0x10>
 80111c4:	6983      	ldr	r3, [r0, #24]
 80111c6:	b90b      	cbnz	r3, 80111cc <_puts_r+0x10>
 80111c8:	f000 fa48 	bl	801165c <__sinit>
 80111cc:	69ab      	ldr	r3, [r5, #24]
 80111ce:	68ac      	ldr	r4, [r5, #8]
 80111d0:	b913      	cbnz	r3, 80111d8 <_puts_r+0x1c>
 80111d2:	4628      	mov	r0, r5
 80111d4:	f000 fa42 	bl	801165c <__sinit>
 80111d8:	4b2c      	ldr	r3, [pc, #176]	; (801128c <_puts_r+0xd0>)
 80111da:	429c      	cmp	r4, r3
 80111dc:	d120      	bne.n	8011220 <_puts_r+0x64>
 80111de:	686c      	ldr	r4, [r5, #4]
 80111e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111e2:	07db      	lsls	r3, r3, #31
 80111e4:	d405      	bmi.n	80111f2 <_puts_r+0x36>
 80111e6:	89a3      	ldrh	r3, [r4, #12]
 80111e8:	0598      	lsls	r0, r3, #22
 80111ea:	d402      	bmi.n	80111f2 <_puts_r+0x36>
 80111ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ee:	f000 fad3 	bl	8011798 <__retarget_lock_acquire_recursive>
 80111f2:	89a3      	ldrh	r3, [r4, #12]
 80111f4:	0719      	lsls	r1, r3, #28
 80111f6:	d51d      	bpl.n	8011234 <_puts_r+0x78>
 80111f8:	6923      	ldr	r3, [r4, #16]
 80111fa:	b1db      	cbz	r3, 8011234 <_puts_r+0x78>
 80111fc:	3e01      	subs	r6, #1
 80111fe:	68a3      	ldr	r3, [r4, #8]
 8011200:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011204:	3b01      	subs	r3, #1
 8011206:	60a3      	str	r3, [r4, #8]
 8011208:	bb39      	cbnz	r1, 801125a <_puts_r+0x9e>
 801120a:	2b00      	cmp	r3, #0
 801120c:	da38      	bge.n	8011280 <_puts_r+0xc4>
 801120e:	4622      	mov	r2, r4
 8011210:	210a      	movs	r1, #10
 8011212:	4628      	mov	r0, r5
 8011214:	f000 f848 	bl	80112a8 <__swbuf_r>
 8011218:	3001      	adds	r0, #1
 801121a:	d011      	beq.n	8011240 <_puts_r+0x84>
 801121c:	250a      	movs	r5, #10
 801121e:	e011      	b.n	8011244 <_puts_r+0x88>
 8011220:	4b1b      	ldr	r3, [pc, #108]	; (8011290 <_puts_r+0xd4>)
 8011222:	429c      	cmp	r4, r3
 8011224:	d101      	bne.n	801122a <_puts_r+0x6e>
 8011226:	68ac      	ldr	r4, [r5, #8]
 8011228:	e7da      	b.n	80111e0 <_puts_r+0x24>
 801122a:	4b1a      	ldr	r3, [pc, #104]	; (8011294 <_puts_r+0xd8>)
 801122c:	429c      	cmp	r4, r3
 801122e:	bf08      	it	eq
 8011230:	68ec      	ldreq	r4, [r5, #12]
 8011232:	e7d5      	b.n	80111e0 <_puts_r+0x24>
 8011234:	4621      	mov	r1, r4
 8011236:	4628      	mov	r0, r5
 8011238:	f000 f888 	bl	801134c <__swsetup_r>
 801123c:	2800      	cmp	r0, #0
 801123e:	d0dd      	beq.n	80111fc <_puts_r+0x40>
 8011240:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011246:	07da      	lsls	r2, r3, #31
 8011248:	d405      	bmi.n	8011256 <_puts_r+0x9a>
 801124a:	89a3      	ldrh	r3, [r4, #12]
 801124c:	059b      	lsls	r3, r3, #22
 801124e:	d402      	bmi.n	8011256 <_puts_r+0x9a>
 8011250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011252:	f000 faa2 	bl	801179a <__retarget_lock_release_recursive>
 8011256:	4628      	mov	r0, r5
 8011258:	bd70      	pop	{r4, r5, r6, pc}
 801125a:	2b00      	cmp	r3, #0
 801125c:	da04      	bge.n	8011268 <_puts_r+0xac>
 801125e:	69a2      	ldr	r2, [r4, #24]
 8011260:	429a      	cmp	r2, r3
 8011262:	dc06      	bgt.n	8011272 <_puts_r+0xb6>
 8011264:	290a      	cmp	r1, #10
 8011266:	d004      	beq.n	8011272 <_puts_r+0xb6>
 8011268:	6823      	ldr	r3, [r4, #0]
 801126a:	1c5a      	adds	r2, r3, #1
 801126c:	6022      	str	r2, [r4, #0]
 801126e:	7019      	strb	r1, [r3, #0]
 8011270:	e7c5      	b.n	80111fe <_puts_r+0x42>
 8011272:	4622      	mov	r2, r4
 8011274:	4628      	mov	r0, r5
 8011276:	f000 f817 	bl	80112a8 <__swbuf_r>
 801127a:	3001      	adds	r0, #1
 801127c:	d1bf      	bne.n	80111fe <_puts_r+0x42>
 801127e:	e7df      	b.n	8011240 <_puts_r+0x84>
 8011280:	6823      	ldr	r3, [r4, #0]
 8011282:	250a      	movs	r5, #10
 8011284:	1c5a      	adds	r2, r3, #1
 8011286:	6022      	str	r2, [r4, #0]
 8011288:	701d      	strb	r5, [r3, #0]
 801128a:	e7db      	b.n	8011244 <_puts_r+0x88>
 801128c:	08011ea0 	.word	0x08011ea0
 8011290:	08011ec0 	.word	0x08011ec0
 8011294:	08011e80 	.word	0x08011e80

08011298 <puts>:
 8011298:	4b02      	ldr	r3, [pc, #8]	; (80112a4 <puts+0xc>)
 801129a:	4601      	mov	r1, r0
 801129c:	6818      	ldr	r0, [r3, #0]
 801129e:	f7ff bf8d 	b.w	80111bc <_puts_r>
 80112a2:	bf00      	nop
 80112a4:	24000014 	.word	0x24000014

080112a8 <__swbuf_r>:
 80112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112aa:	460e      	mov	r6, r1
 80112ac:	4614      	mov	r4, r2
 80112ae:	4605      	mov	r5, r0
 80112b0:	b118      	cbz	r0, 80112ba <__swbuf_r+0x12>
 80112b2:	6983      	ldr	r3, [r0, #24]
 80112b4:	b90b      	cbnz	r3, 80112ba <__swbuf_r+0x12>
 80112b6:	f000 f9d1 	bl	801165c <__sinit>
 80112ba:	4b21      	ldr	r3, [pc, #132]	; (8011340 <__swbuf_r+0x98>)
 80112bc:	429c      	cmp	r4, r3
 80112be:	d12b      	bne.n	8011318 <__swbuf_r+0x70>
 80112c0:	686c      	ldr	r4, [r5, #4]
 80112c2:	69a3      	ldr	r3, [r4, #24]
 80112c4:	60a3      	str	r3, [r4, #8]
 80112c6:	89a3      	ldrh	r3, [r4, #12]
 80112c8:	071a      	lsls	r2, r3, #28
 80112ca:	d52f      	bpl.n	801132c <__swbuf_r+0x84>
 80112cc:	6923      	ldr	r3, [r4, #16]
 80112ce:	b36b      	cbz	r3, 801132c <__swbuf_r+0x84>
 80112d0:	6923      	ldr	r3, [r4, #16]
 80112d2:	6820      	ldr	r0, [r4, #0]
 80112d4:	1ac0      	subs	r0, r0, r3
 80112d6:	6963      	ldr	r3, [r4, #20]
 80112d8:	b2f6      	uxtb	r6, r6
 80112da:	4283      	cmp	r3, r0
 80112dc:	4637      	mov	r7, r6
 80112de:	dc04      	bgt.n	80112ea <__swbuf_r+0x42>
 80112e0:	4621      	mov	r1, r4
 80112e2:	4628      	mov	r0, r5
 80112e4:	f000 f926 	bl	8011534 <_fflush_r>
 80112e8:	bb30      	cbnz	r0, 8011338 <__swbuf_r+0x90>
 80112ea:	68a3      	ldr	r3, [r4, #8]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	60a3      	str	r3, [r4, #8]
 80112f0:	6823      	ldr	r3, [r4, #0]
 80112f2:	1c5a      	adds	r2, r3, #1
 80112f4:	6022      	str	r2, [r4, #0]
 80112f6:	701e      	strb	r6, [r3, #0]
 80112f8:	6963      	ldr	r3, [r4, #20]
 80112fa:	3001      	adds	r0, #1
 80112fc:	4283      	cmp	r3, r0
 80112fe:	d004      	beq.n	801130a <__swbuf_r+0x62>
 8011300:	89a3      	ldrh	r3, [r4, #12]
 8011302:	07db      	lsls	r3, r3, #31
 8011304:	d506      	bpl.n	8011314 <__swbuf_r+0x6c>
 8011306:	2e0a      	cmp	r6, #10
 8011308:	d104      	bne.n	8011314 <__swbuf_r+0x6c>
 801130a:	4621      	mov	r1, r4
 801130c:	4628      	mov	r0, r5
 801130e:	f000 f911 	bl	8011534 <_fflush_r>
 8011312:	b988      	cbnz	r0, 8011338 <__swbuf_r+0x90>
 8011314:	4638      	mov	r0, r7
 8011316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011318:	4b0a      	ldr	r3, [pc, #40]	; (8011344 <__swbuf_r+0x9c>)
 801131a:	429c      	cmp	r4, r3
 801131c:	d101      	bne.n	8011322 <__swbuf_r+0x7a>
 801131e:	68ac      	ldr	r4, [r5, #8]
 8011320:	e7cf      	b.n	80112c2 <__swbuf_r+0x1a>
 8011322:	4b09      	ldr	r3, [pc, #36]	; (8011348 <__swbuf_r+0xa0>)
 8011324:	429c      	cmp	r4, r3
 8011326:	bf08      	it	eq
 8011328:	68ec      	ldreq	r4, [r5, #12]
 801132a:	e7ca      	b.n	80112c2 <__swbuf_r+0x1a>
 801132c:	4621      	mov	r1, r4
 801132e:	4628      	mov	r0, r5
 8011330:	f000 f80c 	bl	801134c <__swsetup_r>
 8011334:	2800      	cmp	r0, #0
 8011336:	d0cb      	beq.n	80112d0 <__swbuf_r+0x28>
 8011338:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801133c:	e7ea      	b.n	8011314 <__swbuf_r+0x6c>
 801133e:	bf00      	nop
 8011340:	08011ea0 	.word	0x08011ea0
 8011344:	08011ec0 	.word	0x08011ec0
 8011348:	08011e80 	.word	0x08011e80

0801134c <__swsetup_r>:
 801134c:	4b32      	ldr	r3, [pc, #200]	; (8011418 <__swsetup_r+0xcc>)
 801134e:	b570      	push	{r4, r5, r6, lr}
 8011350:	681d      	ldr	r5, [r3, #0]
 8011352:	4606      	mov	r6, r0
 8011354:	460c      	mov	r4, r1
 8011356:	b125      	cbz	r5, 8011362 <__swsetup_r+0x16>
 8011358:	69ab      	ldr	r3, [r5, #24]
 801135a:	b913      	cbnz	r3, 8011362 <__swsetup_r+0x16>
 801135c:	4628      	mov	r0, r5
 801135e:	f000 f97d 	bl	801165c <__sinit>
 8011362:	4b2e      	ldr	r3, [pc, #184]	; (801141c <__swsetup_r+0xd0>)
 8011364:	429c      	cmp	r4, r3
 8011366:	d10f      	bne.n	8011388 <__swsetup_r+0x3c>
 8011368:	686c      	ldr	r4, [r5, #4]
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011370:	0719      	lsls	r1, r3, #28
 8011372:	d42c      	bmi.n	80113ce <__swsetup_r+0x82>
 8011374:	06dd      	lsls	r5, r3, #27
 8011376:	d411      	bmi.n	801139c <__swsetup_r+0x50>
 8011378:	2309      	movs	r3, #9
 801137a:	6033      	str	r3, [r6, #0]
 801137c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011380:	81a3      	strh	r3, [r4, #12]
 8011382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011386:	e03e      	b.n	8011406 <__swsetup_r+0xba>
 8011388:	4b25      	ldr	r3, [pc, #148]	; (8011420 <__swsetup_r+0xd4>)
 801138a:	429c      	cmp	r4, r3
 801138c:	d101      	bne.n	8011392 <__swsetup_r+0x46>
 801138e:	68ac      	ldr	r4, [r5, #8]
 8011390:	e7eb      	b.n	801136a <__swsetup_r+0x1e>
 8011392:	4b24      	ldr	r3, [pc, #144]	; (8011424 <__swsetup_r+0xd8>)
 8011394:	429c      	cmp	r4, r3
 8011396:	bf08      	it	eq
 8011398:	68ec      	ldreq	r4, [r5, #12]
 801139a:	e7e6      	b.n	801136a <__swsetup_r+0x1e>
 801139c:	0758      	lsls	r0, r3, #29
 801139e:	d512      	bpl.n	80113c6 <__swsetup_r+0x7a>
 80113a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113a2:	b141      	cbz	r1, 80113b6 <__swsetup_r+0x6a>
 80113a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113a8:	4299      	cmp	r1, r3
 80113aa:	d002      	beq.n	80113b2 <__swsetup_r+0x66>
 80113ac:	4630      	mov	r0, r6
 80113ae:	f000 fa5b 	bl	8011868 <_free_r>
 80113b2:	2300      	movs	r3, #0
 80113b4:	6363      	str	r3, [r4, #52]	; 0x34
 80113b6:	89a3      	ldrh	r3, [r4, #12]
 80113b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113bc:	81a3      	strh	r3, [r4, #12]
 80113be:	2300      	movs	r3, #0
 80113c0:	6063      	str	r3, [r4, #4]
 80113c2:	6923      	ldr	r3, [r4, #16]
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	89a3      	ldrh	r3, [r4, #12]
 80113c8:	f043 0308 	orr.w	r3, r3, #8
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	6923      	ldr	r3, [r4, #16]
 80113d0:	b94b      	cbnz	r3, 80113e6 <__swsetup_r+0x9a>
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113dc:	d003      	beq.n	80113e6 <__swsetup_r+0x9a>
 80113de:	4621      	mov	r1, r4
 80113e0:	4630      	mov	r0, r6
 80113e2:	f000 fa01 	bl	80117e8 <__smakebuf_r>
 80113e6:	89a0      	ldrh	r0, [r4, #12]
 80113e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113ec:	f010 0301 	ands.w	r3, r0, #1
 80113f0:	d00a      	beq.n	8011408 <__swsetup_r+0xbc>
 80113f2:	2300      	movs	r3, #0
 80113f4:	60a3      	str	r3, [r4, #8]
 80113f6:	6963      	ldr	r3, [r4, #20]
 80113f8:	425b      	negs	r3, r3
 80113fa:	61a3      	str	r3, [r4, #24]
 80113fc:	6923      	ldr	r3, [r4, #16]
 80113fe:	b943      	cbnz	r3, 8011412 <__swsetup_r+0xc6>
 8011400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011404:	d1ba      	bne.n	801137c <__swsetup_r+0x30>
 8011406:	bd70      	pop	{r4, r5, r6, pc}
 8011408:	0781      	lsls	r1, r0, #30
 801140a:	bf58      	it	pl
 801140c:	6963      	ldrpl	r3, [r4, #20]
 801140e:	60a3      	str	r3, [r4, #8]
 8011410:	e7f4      	b.n	80113fc <__swsetup_r+0xb0>
 8011412:	2000      	movs	r0, #0
 8011414:	e7f7      	b.n	8011406 <__swsetup_r+0xba>
 8011416:	bf00      	nop
 8011418:	24000014 	.word	0x24000014
 801141c:	08011ea0 	.word	0x08011ea0
 8011420:	08011ec0 	.word	0x08011ec0
 8011424:	08011e80 	.word	0x08011e80

08011428 <__sflush_r>:
 8011428:	898a      	ldrh	r2, [r1, #12]
 801142a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801142e:	4605      	mov	r5, r0
 8011430:	0710      	lsls	r0, r2, #28
 8011432:	460c      	mov	r4, r1
 8011434:	d458      	bmi.n	80114e8 <__sflush_r+0xc0>
 8011436:	684b      	ldr	r3, [r1, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	dc05      	bgt.n	8011448 <__sflush_r+0x20>
 801143c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801143e:	2b00      	cmp	r3, #0
 8011440:	dc02      	bgt.n	8011448 <__sflush_r+0x20>
 8011442:	2000      	movs	r0, #0
 8011444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801144a:	2e00      	cmp	r6, #0
 801144c:	d0f9      	beq.n	8011442 <__sflush_r+0x1a>
 801144e:	2300      	movs	r3, #0
 8011450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011454:	682f      	ldr	r7, [r5, #0]
 8011456:	602b      	str	r3, [r5, #0]
 8011458:	d032      	beq.n	80114c0 <__sflush_r+0x98>
 801145a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801145c:	89a3      	ldrh	r3, [r4, #12]
 801145e:	075a      	lsls	r2, r3, #29
 8011460:	d505      	bpl.n	801146e <__sflush_r+0x46>
 8011462:	6863      	ldr	r3, [r4, #4]
 8011464:	1ac0      	subs	r0, r0, r3
 8011466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011468:	b10b      	cbz	r3, 801146e <__sflush_r+0x46>
 801146a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801146c:	1ac0      	subs	r0, r0, r3
 801146e:	2300      	movs	r3, #0
 8011470:	4602      	mov	r2, r0
 8011472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011474:	6a21      	ldr	r1, [r4, #32]
 8011476:	4628      	mov	r0, r5
 8011478:	47b0      	blx	r6
 801147a:	1c43      	adds	r3, r0, #1
 801147c:	89a3      	ldrh	r3, [r4, #12]
 801147e:	d106      	bne.n	801148e <__sflush_r+0x66>
 8011480:	6829      	ldr	r1, [r5, #0]
 8011482:	291d      	cmp	r1, #29
 8011484:	d82c      	bhi.n	80114e0 <__sflush_r+0xb8>
 8011486:	4a2a      	ldr	r2, [pc, #168]	; (8011530 <__sflush_r+0x108>)
 8011488:	40ca      	lsrs	r2, r1
 801148a:	07d6      	lsls	r6, r2, #31
 801148c:	d528      	bpl.n	80114e0 <__sflush_r+0xb8>
 801148e:	2200      	movs	r2, #0
 8011490:	6062      	str	r2, [r4, #4]
 8011492:	04d9      	lsls	r1, r3, #19
 8011494:	6922      	ldr	r2, [r4, #16]
 8011496:	6022      	str	r2, [r4, #0]
 8011498:	d504      	bpl.n	80114a4 <__sflush_r+0x7c>
 801149a:	1c42      	adds	r2, r0, #1
 801149c:	d101      	bne.n	80114a2 <__sflush_r+0x7a>
 801149e:	682b      	ldr	r3, [r5, #0]
 80114a0:	b903      	cbnz	r3, 80114a4 <__sflush_r+0x7c>
 80114a2:	6560      	str	r0, [r4, #84]	; 0x54
 80114a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114a6:	602f      	str	r7, [r5, #0]
 80114a8:	2900      	cmp	r1, #0
 80114aa:	d0ca      	beq.n	8011442 <__sflush_r+0x1a>
 80114ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114b0:	4299      	cmp	r1, r3
 80114b2:	d002      	beq.n	80114ba <__sflush_r+0x92>
 80114b4:	4628      	mov	r0, r5
 80114b6:	f000 f9d7 	bl	8011868 <_free_r>
 80114ba:	2000      	movs	r0, #0
 80114bc:	6360      	str	r0, [r4, #52]	; 0x34
 80114be:	e7c1      	b.n	8011444 <__sflush_r+0x1c>
 80114c0:	6a21      	ldr	r1, [r4, #32]
 80114c2:	2301      	movs	r3, #1
 80114c4:	4628      	mov	r0, r5
 80114c6:	47b0      	blx	r6
 80114c8:	1c41      	adds	r1, r0, #1
 80114ca:	d1c7      	bne.n	801145c <__sflush_r+0x34>
 80114cc:	682b      	ldr	r3, [r5, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d0c4      	beq.n	801145c <__sflush_r+0x34>
 80114d2:	2b1d      	cmp	r3, #29
 80114d4:	d001      	beq.n	80114da <__sflush_r+0xb2>
 80114d6:	2b16      	cmp	r3, #22
 80114d8:	d101      	bne.n	80114de <__sflush_r+0xb6>
 80114da:	602f      	str	r7, [r5, #0]
 80114dc:	e7b1      	b.n	8011442 <__sflush_r+0x1a>
 80114de:	89a3      	ldrh	r3, [r4, #12]
 80114e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114e4:	81a3      	strh	r3, [r4, #12]
 80114e6:	e7ad      	b.n	8011444 <__sflush_r+0x1c>
 80114e8:	690f      	ldr	r7, [r1, #16]
 80114ea:	2f00      	cmp	r7, #0
 80114ec:	d0a9      	beq.n	8011442 <__sflush_r+0x1a>
 80114ee:	0793      	lsls	r3, r2, #30
 80114f0:	680e      	ldr	r6, [r1, #0]
 80114f2:	bf08      	it	eq
 80114f4:	694b      	ldreq	r3, [r1, #20]
 80114f6:	600f      	str	r7, [r1, #0]
 80114f8:	bf18      	it	ne
 80114fa:	2300      	movne	r3, #0
 80114fc:	eba6 0807 	sub.w	r8, r6, r7
 8011500:	608b      	str	r3, [r1, #8]
 8011502:	f1b8 0f00 	cmp.w	r8, #0
 8011506:	dd9c      	ble.n	8011442 <__sflush_r+0x1a>
 8011508:	6a21      	ldr	r1, [r4, #32]
 801150a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801150c:	4643      	mov	r3, r8
 801150e:	463a      	mov	r2, r7
 8011510:	4628      	mov	r0, r5
 8011512:	47b0      	blx	r6
 8011514:	2800      	cmp	r0, #0
 8011516:	dc06      	bgt.n	8011526 <__sflush_r+0xfe>
 8011518:	89a3      	ldrh	r3, [r4, #12]
 801151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801151e:	81a3      	strh	r3, [r4, #12]
 8011520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011524:	e78e      	b.n	8011444 <__sflush_r+0x1c>
 8011526:	4407      	add	r7, r0
 8011528:	eba8 0800 	sub.w	r8, r8, r0
 801152c:	e7e9      	b.n	8011502 <__sflush_r+0xda>
 801152e:	bf00      	nop
 8011530:	20400001 	.word	0x20400001

08011534 <_fflush_r>:
 8011534:	b538      	push	{r3, r4, r5, lr}
 8011536:	690b      	ldr	r3, [r1, #16]
 8011538:	4605      	mov	r5, r0
 801153a:	460c      	mov	r4, r1
 801153c:	b913      	cbnz	r3, 8011544 <_fflush_r+0x10>
 801153e:	2500      	movs	r5, #0
 8011540:	4628      	mov	r0, r5
 8011542:	bd38      	pop	{r3, r4, r5, pc}
 8011544:	b118      	cbz	r0, 801154e <_fflush_r+0x1a>
 8011546:	6983      	ldr	r3, [r0, #24]
 8011548:	b90b      	cbnz	r3, 801154e <_fflush_r+0x1a>
 801154a:	f000 f887 	bl	801165c <__sinit>
 801154e:	4b14      	ldr	r3, [pc, #80]	; (80115a0 <_fflush_r+0x6c>)
 8011550:	429c      	cmp	r4, r3
 8011552:	d11b      	bne.n	801158c <_fflush_r+0x58>
 8011554:	686c      	ldr	r4, [r5, #4]
 8011556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d0ef      	beq.n	801153e <_fflush_r+0xa>
 801155e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011560:	07d0      	lsls	r0, r2, #31
 8011562:	d404      	bmi.n	801156e <_fflush_r+0x3a>
 8011564:	0599      	lsls	r1, r3, #22
 8011566:	d402      	bmi.n	801156e <_fflush_r+0x3a>
 8011568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801156a:	f000 f915 	bl	8011798 <__retarget_lock_acquire_recursive>
 801156e:	4628      	mov	r0, r5
 8011570:	4621      	mov	r1, r4
 8011572:	f7ff ff59 	bl	8011428 <__sflush_r>
 8011576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011578:	07da      	lsls	r2, r3, #31
 801157a:	4605      	mov	r5, r0
 801157c:	d4e0      	bmi.n	8011540 <_fflush_r+0xc>
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	059b      	lsls	r3, r3, #22
 8011582:	d4dd      	bmi.n	8011540 <_fflush_r+0xc>
 8011584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011586:	f000 f908 	bl	801179a <__retarget_lock_release_recursive>
 801158a:	e7d9      	b.n	8011540 <_fflush_r+0xc>
 801158c:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <_fflush_r+0x70>)
 801158e:	429c      	cmp	r4, r3
 8011590:	d101      	bne.n	8011596 <_fflush_r+0x62>
 8011592:	68ac      	ldr	r4, [r5, #8]
 8011594:	e7df      	b.n	8011556 <_fflush_r+0x22>
 8011596:	4b04      	ldr	r3, [pc, #16]	; (80115a8 <_fflush_r+0x74>)
 8011598:	429c      	cmp	r4, r3
 801159a:	bf08      	it	eq
 801159c:	68ec      	ldreq	r4, [r5, #12]
 801159e:	e7da      	b.n	8011556 <_fflush_r+0x22>
 80115a0:	08011ea0 	.word	0x08011ea0
 80115a4:	08011ec0 	.word	0x08011ec0
 80115a8:	08011e80 	.word	0x08011e80

080115ac <std>:
 80115ac:	2300      	movs	r3, #0
 80115ae:	b510      	push	{r4, lr}
 80115b0:	4604      	mov	r4, r0
 80115b2:	e9c0 3300 	strd	r3, r3, [r0]
 80115b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115ba:	6083      	str	r3, [r0, #8]
 80115bc:	8181      	strh	r1, [r0, #12]
 80115be:	6643      	str	r3, [r0, #100]	; 0x64
 80115c0:	81c2      	strh	r2, [r0, #14]
 80115c2:	6183      	str	r3, [r0, #24]
 80115c4:	4619      	mov	r1, r3
 80115c6:	2208      	movs	r2, #8
 80115c8:	305c      	adds	r0, #92	; 0x5c
 80115ca:	f7ff fdef 	bl	80111ac <memset>
 80115ce:	4b05      	ldr	r3, [pc, #20]	; (80115e4 <std+0x38>)
 80115d0:	6263      	str	r3, [r4, #36]	; 0x24
 80115d2:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <std+0x3c>)
 80115d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80115d6:	4b05      	ldr	r3, [pc, #20]	; (80115ec <std+0x40>)
 80115d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115da:	4b05      	ldr	r3, [pc, #20]	; (80115f0 <std+0x44>)
 80115dc:	6224      	str	r4, [r4, #32]
 80115de:	6323      	str	r3, [r4, #48]	; 0x30
 80115e0:	bd10      	pop	{r4, pc}
 80115e2:	bf00      	nop
 80115e4:	08011a49 	.word	0x08011a49
 80115e8:	08011a6b 	.word	0x08011a6b
 80115ec:	08011aa3 	.word	0x08011aa3
 80115f0:	08011ac7 	.word	0x08011ac7

080115f4 <_cleanup_r>:
 80115f4:	4901      	ldr	r1, [pc, #4]	; (80115fc <_cleanup_r+0x8>)
 80115f6:	f000 b8af 	b.w	8011758 <_fwalk_reent>
 80115fa:	bf00      	nop
 80115fc:	08011535 	.word	0x08011535

08011600 <__sfmoreglue>:
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	2268      	movs	r2, #104	; 0x68
 8011604:	1e4d      	subs	r5, r1, #1
 8011606:	4355      	muls	r5, r2
 8011608:	460e      	mov	r6, r1
 801160a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801160e:	f000 f997 	bl	8011940 <_malloc_r>
 8011612:	4604      	mov	r4, r0
 8011614:	b140      	cbz	r0, 8011628 <__sfmoreglue+0x28>
 8011616:	2100      	movs	r1, #0
 8011618:	e9c0 1600 	strd	r1, r6, [r0]
 801161c:	300c      	adds	r0, #12
 801161e:	60a0      	str	r0, [r4, #8]
 8011620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011624:	f7ff fdc2 	bl	80111ac <memset>
 8011628:	4620      	mov	r0, r4
 801162a:	bd70      	pop	{r4, r5, r6, pc}

0801162c <__sfp_lock_acquire>:
 801162c:	4801      	ldr	r0, [pc, #4]	; (8011634 <__sfp_lock_acquire+0x8>)
 801162e:	f000 b8b3 	b.w	8011798 <__retarget_lock_acquire_recursive>
 8011632:	bf00      	nop
 8011634:	24004f4d 	.word	0x24004f4d

08011638 <__sfp_lock_release>:
 8011638:	4801      	ldr	r0, [pc, #4]	; (8011640 <__sfp_lock_release+0x8>)
 801163a:	f000 b8ae 	b.w	801179a <__retarget_lock_release_recursive>
 801163e:	bf00      	nop
 8011640:	24004f4d 	.word	0x24004f4d

08011644 <__sinit_lock_acquire>:
 8011644:	4801      	ldr	r0, [pc, #4]	; (801164c <__sinit_lock_acquire+0x8>)
 8011646:	f000 b8a7 	b.w	8011798 <__retarget_lock_acquire_recursive>
 801164a:	bf00      	nop
 801164c:	24004f4e 	.word	0x24004f4e

08011650 <__sinit_lock_release>:
 8011650:	4801      	ldr	r0, [pc, #4]	; (8011658 <__sinit_lock_release+0x8>)
 8011652:	f000 b8a2 	b.w	801179a <__retarget_lock_release_recursive>
 8011656:	bf00      	nop
 8011658:	24004f4e 	.word	0x24004f4e

0801165c <__sinit>:
 801165c:	b510      	push	{r4, lr}
 801165e:	4604      	mov	r4, r0
 8011660:	f7ff fff0 	bl	8011644 <__sinit_lock_acquire>
 8011664:	69a3      	ldr	r3, [r4, #24]
 8011666:	b11b      	cbz	r3, 8011670 <__sinit+0x14>
 8011668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801166c:	f7ff bff0 	b.w	8011650 <__sinit_lock_release>
 8011670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011674:	6523      	str	r3, [r4, #80]	; 0x50
 8011676:	4b13      	ldr	r3, [pc, #76]	; (80116c4 <__sinit+0x68>)
 8011678:	4a13      	ldr	r2, [pc, #76]	; (80116c8 <__sinit+0x6c>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	62a2      	str	r2, [r4, #40]	; 0x28
 801167e:	42a3      	cmp	r3, r4
 8011680:	bf04      	itt	eq
 8011682:	2301      	moveq	r3, #1
 8011684:	61a3      	streq	r3, [r4, #24]
 8011686:	4620      	mov	r0, r4
 8011688:	f000 f820 	bl	80116cc <__sfp>
 801168c:	6060      	str	r0, [r4, #4]
 801168e:	4620      	mov	r0, r4
 8011690:	f000 f81c 	bl	80116cc <__sfp>
 8011694:	60a0      	str	r0, [r4, #8]
 8011696:	4620      	mov	r0, r4
 8011698:	f000 f818 	bl	80116cc <__sfp>
 801169c:	2200      	movs	r2, #0
 801169e:	60e0      	str	r0, [r4, #12]
 80116a0:	2104      	movs	r1, #4
 80116a2:	6860      	ldr	r0, [r4, #4]
 80116a4:	f7ff ff82 	bl	80115ac <std>
 80116a8:	68a0      	ldr	r0, [r4, #8]
 80116aa:	2201      	movs	r2, #1
 80116ac:	2109      	movs	r1, #9
 80116ae:	f7ff ff7d 	bl	80115ac <std>
 80116b2:	68e0      	ldr	r0, [r4, #12]
 80116b4:	2202      	movs	r2, #2
 80116b6:	2112      	movs	r1, #18
 80116b8:	f7ff ff78 	bl	80115ac <std>
 80116bc:	2301      	movs	r3, #1
 80116be:	61a3      	str	r3, [r4, #24]
 80116c0:	e7d2      	b.n	8011668 <__sinit+0xc>
 80116c2:	bf00      	nop
 80116c4:	08011e7c 	.word	0x08011e7c
 80116c8:	080115f5 	.word	0x080115f5

080116cc <__sfp>:
 80116cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ce:	4607      	mov	r7, r0
 80116d0:	f7ff ffac 	bl	801162c <__sfp_lock_acquire>
 80116d4:	4b1e      	ldr	r3, [pc, #120]	; (8011750 <__sfp+0x84>)
 80116d6:	681e      	ldr	r6, [r3, #0]
 80116d8:	69b3      	ldr	r3, [r6, #24]
 80116da:	b913      	cbnz	r3, 80116e2 <__sfp+0x16>
 80116dc:	4630      	mov	r0, r6
 80116de:	f7ff ffbd 	bl	801165c <__sinit>
 80116e2:	3648      	adds	r6, #72	; 0x48
 80116e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116e8:	3b01      	subs	r3, #1
 80116ea:	d503      	bpl.n	80116f4 <__sfp+0x28>
 80116ec:	6833      	ldr	r3, [r6, #0]
 80116ee:	b30b      	cbz	r3, 8011734 <__sfp+0x68>
 80116f0:	6836      	ldr	r6, [r6, #0]
 80116f2:	e7f7      	b.n	80116e4 <__sfp+0x18>
 80116f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116f8:	b9d5      	cbnz	r5, 8011730 <__sfp+0x64>
 80116fa:	4b16      	ldr	r3, [pc, #88]	; (8011754 <__sfp+0x88>)
 80116fc:	60e3      	str	r3, [r4, #12]
 80116fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011702:	6665      	str	r5, [r4, #100]	; 0x64
 8011704:	f000 f847 	bl	8011796 <__retarget_lock_init_recursive>
 8011708:	f7ff ff96 	bl	8011638 <__sfp_lock_release>
 801170c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011714:	6025      	str	r5, [r4, #0]
 8011716:	61a5      	str	r5, [r4, #24]
 8011718:	2208      	movs	r2, #8
 801171a:	4629      	mov	r1, r5
 801171c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011720:	f7ff fd44 	bl	80111ac <memset>
 8011724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801172c:	4620      	mov	r0, r4
 801172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011730:	3468      	adds	r4, #104	; 0x68
 8011732:	e7d9      	b.n	80116e8 <__sfp+0x1c>
 8011734:	2104      	movs	r1, #4
 8011736:	4638      	mov	r0, r7
 8011738:	f7ff ff62 	bl	8011600 <__sfmoreglue>
 801173c:	4604      	mov	r4, r0
 801173e:	6030      	str	r0, [r6, #0]
 8011740:	2800      	cmp	r0, #0
 8011742:	d1d5      	bne.n	80116f0 <__sfp+0x24>
 8011744:	f7ff ff78 	bl	8011638 <__sfp_lock_release>
 8011748:	230c      	movs	r3, #12
 801174a:	603b      	str	r3, [r7, #0]
 801174c:	e7ee      	b.n	801172c <__sfp+0x60>
 801174e:	bf00      	nop
 8011750:	08011e7c 	.word	0x08011e7c
 8011754:	ffff0001 	.word	0xffff0001

08011758 <_fwalk_reent>:
 8011758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801175c:	4606      	mov	r6, r0
 801175e:	4688      	mov	r8, r1
 8011760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011764:	2700      	movs	r7, #0
 8011766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801176a:	f1b9 0901 	subs.w	r9, r9, #1
 801176e:	d505      	bpl.n	801177c <_fwalk_reent+0x24>
 8011770:	6824      	ldr	r4, [r4, #0]
 8011772:	2c00      	cmp	r4, #0
 8011774:	d1f7      	bne.n	8011766 <_fwalk_reent+0xe>
 8011776:	4638      	mov	r0, r7
 8011778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801177c:	89ab      	ldrh	r3, [r5, #12]
 801177e:	2b01      	cmp	r3, #1
 8011780:	d907      	bls.n	8011792 <_fwalk_reent+0x3a>
 8011782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011786:	3301      	adds	r3, #1
 8011788:	d003      	beq.n	8011792 <_fwalk_reent+0x3a>
 801178a:	4629      	mov	r1, r5
 801178c:	4630      	mov	r0, r6
 801178e:	47c0      	blx	r8
 8011790:	4307      	orrs	r7, r0
 8011792:	3568      	adds	r5, #104	; 0x68
 8011794:	e7e9      	b.n	801176a <_fwalk_reent+0x12>

08011796 <__retarget_lock_init_recursive>:
 8011796:	4770      	bx	lr

08011798 <__retarget_lock_acquire_recursive>:
 8011798:	4770      	bx	lr

0801179a <__retarget_lock_release_recursive>:
 801179a:	4770      	bx	lr

0801179c <__swhatbuf_r>:
 801179c:	b570      	push	{r4, r5, r6, lr}
 801179e:	460e      	mov	r6, r1
 80117a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a4:	2900      	cmp	r1, #0
 80117a6:	b096      	sub	sp, #88	; 0x58
 80117a8:	4614      	mov	r4, r2
 80117aa:	461d      	mov	r5, r3
 80117ac:	da08      	bge.n	80117c0 <__swhatbuf_r+0x24>
 80117ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80117b2:	2200      	movs	r2, #0
 80117b4:	602a      	str	r2, [r5, #0]
 80117b6:	061a      	lsls	r2, r3, #24
 80117b8:	d410      	bmi.n	80117dc <__swhatbuf_r+0x40>
 80117ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117be:	e00e      	b.n	80117de <__swhatbuf_r+0x42>
 80117c0:	466a      	mov	r2, sp
 80117c2:	f000 f9a7 	bl	8011b14 <_fstat_r>
 80117c6:	2800      	cmp	r0, #0
 80117c8:	dbf1      	blt.n	80117ae <__swhatbuf_r+0x12>
 80117ca:	9a01      	ldr	r2, [sp, #4]
 80117cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80117d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80117d4:	425a      	negs	r2, r3
 80117d6:	415a      	adcs	r2, r3
 80117d8:	602a      	str	r2, [r5, #0]
 80117da:	e7ee      	b.n	80117ba <__swhatbuf_r+0x1e>
 80117dc:	2340      	movs	r3, #64	; 0x40
 80117de:	2000      	movs	r0, #0
 80117e0:	6023      	str	r3, [r4, #0]
 80117e2:	b016      	add	sp, #88	; 0x58
 80117e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080117e8 <__smakebuf_r>:
 80117e8:	898b      	ldrh	r3, [r1, #12]
 80117ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117ec:	079d      	lsls	r5, r3, #30
 80117ee:	4606      	mov	r6, r0
 80117f0:	460c      	mov	r4, r1
 80117f2:	d507      	bpl.n	8011804 <__smakebuf_r+0x1c>
 80117f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80117f8:	6023      	str	r3, [r4, #0]
 80117fa:	6123      	str	r3, [r4, #16]
 80117fc:	2301      	movs	r3, #1
 80117fe:	6163      	str	r3, [r4, #20]
 8011800:	b002      	add	sp, #8
 8011802:	bd70      	pop	{r4, r5, r6, pc}
 8011804:	ab01      	add	r3, sp, #4
 8011806:	466a      	mov	r2, sp
 8011808:	f7ff ffc8 	bl	801179c <__swhatbuf_r>
 801180c:	9900      	ldr	r1, [sp, #0]
 801180e:	4605      	mov	r5, r0
 8011810:	4630      	mov	r0, r6
 8011812:	f000 f895 	bl	8011940 <_malloc_r>
 8011816:	b948      	cbnz	r0, 801182c <__smakebuf_r+0x44>
 8011818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801181c:	059a      	lsls	r2, r3, #22
 801181e:	d4ef      	bmi.n	8011800 <__smakebuf_r+0x18>
 8011820:	f023 0303 	bic.w	r3, r3, #3
 8011824:	f043 0302 	orr.w	r3, r3, #2
 8011828:	81a3      	strh	r3, [r4, #12]
 801182a:	e7e3      	b.n	80117f4 <__smakebuf_r+0xc>
 801182c:	4b0d      	ldr	r3, [pc, #52]	; (8011864 <__smakebuf_r+0x7c>)
 801182e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	6020      	str	r0, [r4, #0]
 8011834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011838:	81a3      	strh	r3, [r4, #12]
 801183a:	9b00      	ldr	r3, [sp, #0]
 801183c:	6163      	str	r3, [r4, #20]
 801183e:	9b01      	ldr	r3, [sp, #4]
 8011840:	6120      	str	r0, [r4, #16]
 8011842:	b15b      	cbz	r3, 801185c <__smakebuf_r+0x74>
 8011844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011848:	4630      	mov	r0, r6
 801184a:	f000 f975 	bl	8011b38 <_isatty_r>
 801184e:	b128      	cbz	r0, 801185c <__smakebuf_r+0x74>
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	f023 0303 	bic.w	r3, r3, #3
 8011856:	f043 0301 	orr.w	r3, r3, #1
 801185a:	81a3      	strh	r3, [r4, #12]
 801185c:	89a0      	ldrh	r0, [r4, #12]
 801185e:	4305      	orrs	r5, r0
 8011860:	81a5      	strh	r5, [r4, #12]
 8011862:	e7cd      	b.n	8011800 <__smakebuf_r+0x18>
 8011864:	080115f5 	.word	0x080115f5

08011868 <_free_r>:
 8011868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801186a:	2900      	cmp	r1, #0
 801186c:	d044      	beq.n	80118f8 <_free_r+0x90>
 801186e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011872:	9001      	str	r0, [sp, #4]
 8011874:	2b00      	cmp	r3, #0
 8011876:	f1a1 0404 	sub.w	r4, r1, #4
 801187a:	bfb8      	it	lt
 801187c:	18e4      	addlt	r4, r4, r3
 801187e:	f000 f97d 	bl	8011b7c <__malloc_lock>
 8011882:	4a1e      	ldr	r2, [pc, #120]	; (80118fc <_free_r+0x94>)
 8011884:	9801      	ldr	r0, [sp, #4]
 8011886:	6813      	ldr	r3, [r2, #0]
 8011888:	b933      	cbnz	r3, 8011898 <_free_r+0x30>
 801188a:	6063      	str	r3, [r4, #4]
 801188c:	6014      	str	r4, [r2, #0]
 801188e:	b003      	add	sp, #12
 8011890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011894:	f000 b978 	b.w	8011b88 <__malloc_unlock>
 8011898:	42a3      	cmp	r3, r4
 801189a:	d908      	bls.n	80118ae <_free_r+0x46>
 801189c:	6825      	ldr	r5, [r4, #0]
 801189e:	1961      	adds	r1, r4, r5
 80118a0:	428b      	cmp	r3, r1
 80118a2:	bf01      	itttt	eq
 80118a4:	6819      	ldreq	r1, [r3, #0]
 80118a6:	685b      	ldreq	r3, [r3, #4]
 80118a8:	1949      	addeq	r1, r1, r5
 80118aa:	6021      	streq	r1, [r4, #0]
 80118ac:	e7ed      	b.n	801188a <_free_r+0x22>
 80118ae:	461a      	mov	r2, r3
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	b10b      	cbz	r3, 80118b8 <_free_r+0x50>
 80118b4:	42a3      	cmp	r3, r4
 80118b6:	d9fa      	bls.n	80118ae <_free_r+0x46>
 80118b8:	6811      	ldr	r1, [r2, #0]
 80118ba:	1855      	adds	r5, r2, r1
 80118bc:	42a5      	cmp	r5, r4
 80118be:	d10b      	bne.n	80118d8 <_free_r+0x70>
 80118c0:	6824      	ldr	r4, [r4, #0]
 80118c2:	4421      	add	r1, r4
 80118c4:	1854      	adds	r4, r2, r1
 80118c6:	42a3      	cmp	r3, r4
 80118c8:	6011      	str	r1, [r2, #0]
 80118ca:	d1e0      	bne.n	801188e <_free_r+0x26>
 80118cc:	681c      	ldr	r4, [r3, #0]
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	6053      	str	r3, [r2, #4]
 80118d2:	4421      	add	r1, r4
 80118d4:	6011      	str	r1, [r2, #0]
 80118d6:	e7da      	b.n	801188e <_free_r+0x26>
 80118d8:	d902      	bls.n	80118e0 <_free_r+0x78>
 80118da:	230c      	movs	r3, #12
 80118dc:	6003      	str	r3, [r0, #0]
 80118de:	e7d6      	b.n	801188e <_free_r+0x26>
 80118e0:	6825      	ldr	r5, [r4, #0]
 80118e2:	1961      	adds	r1, r4, r5
 80118e4:	428b      	cmp	r3, r1
 80118e6:	bf04      	itt	eq
 80118e8:	6819      	ldreq	r1, [r3, #0]
 80118ea:	685b      	ldreq	r3, [r3, #4]
 80118ec:	6063      	str	r3, [r4, #4]
 80118ee:	bf04      	itt	eq
 80118f0:	1949      	addeq	r1, r1, r5
 80118f2:	6021      	streq	r1, [r4, #0]
 80118f4:	6054      	str	r4, [r2, #4]
 80118f6:	e7ca      	b.n	801188e <_free_r+0x26>
 80118f8:	b003      	add	sp, #12
 80118fa:	bd30      	pop	{r4, r5, pc}
 80118fc:	24004f50 	.word	0x24004f50

08011900 <sbrk_aligned>:
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	4e0e      	ldr	r6, [pc, #56]	; (801193c <sbrk_aligned+0x3c>)
 8011904:	460c      	mov	r4, r1
 8011906:	6831      	ldr	r1, [r6, #0]
 8011908:	4605      	mov	r5, r0
 801190a:	b911      	cbnz	r1, 8011912 <sbrk_aligned+0x12>
 801190c:	f000 f88c 	bl	8011a28 <_sbrk_r>
 8011910:	6030      	str	r0, [r6, #0]
 8011912:	4621      	mov	r1, r4
 8011914:	4628      	mov	r0, r5
 8011916:	f000 f887 	bl	8011a28 <_sbrk_r>
 801191a:	1c43      	adds	r3, r0, #1
 801191c:	d00a      	beq.n	8011934 <sbrk_aligned+0x34>
 801191e:	1cc4      	adds	r4, r0, #3
 8011920:	f024 0403 	bic.w	r4, r4, #3
 8011924:	42a0      	cmp	r0, r4
 8011926:	d007      	beq.n	8011938 <sbrk_aligned+0x38>
 8011928:	1a21      	subs	r1, r4, r0
 801192a:	4628      	mov	r0, r5
 801192c:	f000 f87c 	bl	8011a28 <_sbrk_r>
 8011930:	3001      	adds	r0, #1
 8011932:	d101      	bne.n	8011938 <sbrk_aligned+0x38>
 8011934:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011938:	4620      	mov	r0, r4
 801193a:	bd70      	pop	{r4, r5, r6, pc}
 801193c:	24004f54 	.word	0x24004f54

08011940 <_malloc_r>:
 8011940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011944:	1ccd      	adds	r5, r1, #3
 8011946:	f025 0503 	bic.w	r5, r5, #3
 801194a:	3508      	adds	r5, #8
 801194c:	2d0c      	cmp	r5, #12
 801194e:	bf38      	it	cc
 8011950:	250c      	movcc	r5, #12
 8011952:	2d00      	cmp	r5, #0
 8011954:	4607      	mov	r7, r0
 8011956:	db01      	blt.n	801195c <_malloc_r+0x1c>
 8011958:	42a9      	cmp	r1, r5
 801195a:	d905      	bls.n	8011968 <_malloc_r+0x28>
 801195c:	230c      	movs	r3, #12
 801195e:	603b      	str	r3, [r7, #0]
 8011960:	2600      	movs	r6, #0
 8011962:	4630      	mov	r0, r6
 8011964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011968:	4e2e      	ldr	r6, [pc, #184]	; (8011a24 <_malloc_r+0xe4>)
 801196a:	f000 f907 	bl	8011b7c <__malloc_lock>
 801196e:	6833      	ldr	r3, [r6, #0]
 8011970:	461c      	mov	r4, r3
 8011972:	bb34      	cbnz	r4, 80119c2 <_malloc_r+0x82>
 8011974:	4629      	mov	r1, r5
 8011976:	4638      	mov	r0, r7
 8011978:	f7ff ffc2 	bl	8011900 <sbrk_aligned>
 801197c:	1c43      	adds	r3, r0, #1
 801197e:	4604      	mov	r4, r0
 8011980:	d14d      	bne.n	8011a1e <_malloc_r+0xde>
 8011982:	6834      	ldr	r4, [r6, #0]
 8011984:	4626      	mov	r6, r4
 8011986:	2e00      	cmp	r6, #0
 8011988:	d140      	bne.n	8011a0c <_malloc_r+0xcc>
 801198a:	6823      	ldr	r3, [r4, #0]
 801198c:	4631      	mov	r1, r6
 801198e:	4638      	mov	r0, r7
 8011990:	eb04 0803 	add.w	r8, r4, r3
 8011994:	f000 f848 	bl	8011a28 <_sbrk_r>
 8011998:	4580      	cmp	r8, r0
 801199a:	d13a      	bne.n	8011a12 <_malloc_r+0xd2>
 801199c:	6821      	ldr	r1, [r4, #0]
 801199e:	3503      	adds	r5, #3
 80119a0:	1a6d      	subs	r5, r5, r1
 80119a2:	f025 0503 	bic.w	r5, r5, #3
 80119a6:	3508      	adds	r5, #8
 80119a8:	2d0c      	cmp	r5, #12
 80119aa:	bf38      	it	cc
 80119ac:	250c      	movcc	r5, #12
 80119ae:	4629      	mov	r1, r5
 80119b0:	4638      	mov	r0, r7
 80119b2:	f7ff ffa5 	bl	8011900 <sbrk_aligned>
 80119b6:	3001      	adds	r0, #1
 80119b8:	d02b      	beq.n	8011a12 <_malloc_r+0xd2>
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	442b      	add	r3, r5
 80119be:	6023      	str	r3, [r4, #0]
 80119c0:	e00e      	b.n	80119e0 <_malloc_r+0xa0>
 80119c2:	6822      	ldr	r2, [r4, #0]
 80119c4:	1b52      	subs	r2, r2, r5
 80119c6:	d41e      	bmi.n	8011a06 <_malloc_r+0xc6>
 80119c8:	2a0b      	cmp	r2, #11
 80119ca:	d916      	bls.n	80119fa <_malloc_r+0xba>
 80119cc:	1961      	adds	r1, r4, r5
 80119ce:	42a3      	cmp	r3, r4
 80119d0:	6025      	str	r5, [r4, #0]
 80119d2:	bf18      	it	ne
 80119d4:	6059      	strne	r1, [r3, #4]
 80119d6:	6863      	ldr	r3, [r4, #4]
 80119d8:	bf08      	it	eq
 80119da:	6031      	streq	r1, [r6, #0]
 80119dc:	5162      	str	r2, [r4, r5]
 80119de:	604b      	str	r3, [r1, #4]
 80119e0:	4638      	mov	r0, r7
 80119e2:	f104 060b 	add.w	r6, r4, #11
 80119e6:	f000 f8cf 	bl	8011b88 <__malloc_unlock>
 80119ea:	f026 0607 	bic.w	r6, r6, #7
 80119ee:	1d23      	adds	r3, r4, #4
 80119f0:	1af2      	subs	r2, r6, r3
 80119f2:	d0b6      	beq.n	8011962 <_malloc_r+0x22>
 80119f4:	1b9b      	subs	r3, r3, r6
 80119f6:	50a3      	str	r3, [r4, r2]
 80119f8:	e7b3      	b.n	8011962 <_malloc_r+0x22>
 80119fa:	6862      	ldr	r2, [r4, #4]
 80119fc:	42a3      	cmp	r3, r4
 80119fe:	bf0c      	ite	eq
 8011a00:	6032      	streq	r2, [r6, #0]
 8011a02:	605a      	strne	r2, [r3, #4]
 8011a04:	e7ec      	b.n	80119e0 <_malloc_r+0xa0>
 8011a06:	4623      	mov	r3, r4
 8011a08:	6864      	ldr	r4, [r4, #4]
 8011a0a:	e7b2      	b.n	8011972 <_malloc_r+0x32>
 8011a0c:	4634      	mov	r4, r6
 8011a0e:	6876      	ldr	r6, [r6, #4]
 8011a10:	e7b9      	b.n	8011986 <_malloc_r+0x46>
 8011a12:	230c      	movs	r3, #12
 8011a14:	603b      	str	r3, [r7, #0]
 8011a16:	4638      	mov	r0, r7
 8011a18:	f000 f8b6 	bl	8011b88 <__malloc_unlock>
 8011a1c:	e7a1      	b.n	8011962 <_malloc_r+0x22>
 8011a1e:	6025      	str	r5, [r4, #0]
 8011a20:	e7de      	b.n	80119e0 <_malloc_r+0xa0>
 8011a22:	bf00      	nop
 8011a24:	24004f50 	.word	0x24004f50

08011a28 <_sbrk_r>:
 8011a28:	b538      	push	{r3, r4, r5, lr}
 8011a2a:	4d06      	ldr	r5, [pc, #24]	; (8011a44 <_sbrk_r+0x1c>)
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	4604      	mov	r4, r0
 8011a30:	4608      	mov	r0, r1
 8011a32:	602b      	str	r3, [r5, #0]
 8011a34:	f7f0 fb0a 	bl	800204c <_sbrk>
 8011a38:	1c43      	adds	r3, r0, #1
 8011a3a:	d102      	bne.n	8011a42 <_sbrk_r+0x1a>
 8011a3c:	682b      	ldr	r3, [r5, #0]
 8011a3e:	b103      	cbz	r3, 8011a42 <_sbrk_r+0x1a>
 8011a40:	6023      	str	r3, [r4, #0]
 8011a42:	bd38      	pop	{r3, r4, r5, pc}
 8011a44:	24004f58 	.word	0x24004f58

08011a48 <__sread>:
 8011a48:	b510      	push	{r4, lr}
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a50:	f000 f8a0 	bl	8011b94 <_read_r>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	bfab      	itete	ge
 8011a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a5c:	181b      	addge	r3, r3, r0
 8011a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a62:	bfac      	ite	ge
 8011a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a66:	81a3      	strhlt	r3, [r4, #12]
 8011a68:	bd10      	pop	{r4, pc}

08011a6a <__swrite>:
 8011a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6e:	461f      	mov	r7, r3
 8011a70:	898b      	ldrh	r3, [r1, #12]
 8011a72:	05db      	lsls	r3, r3, #23
 8011a74:	4605      	mov	r5, r0
 8011a76:	460c      	mov	r4, r1
 8011a78:	4616      	mov	r6, r2
 8011a7a:	d505      	bpl.n	8011a88 <__swrite+0x1e>
 8011a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a80:	2302      	movs	r3, #2
 8011a82:	2200      	movs	r2, #0
 8011a84:	f000 f868 	bl	8011b58 <_lseek_r>
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a92:	81a3      	strh	r3, [r4, #12]
 8011a94:	4632      	mov	r2, r6
 8011a96:	463b      	mov	r3, r7
 8011a98:	4628      	mov	r0, r5
 8011a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a9e:	f000 b817 	b.w	8011ad0 <_write_r>

08011aa2 <__sseek>:
 8011aa2:	b510      	push	{r4, lr}
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aaa:	f000 f855 	bl	8011b58 <_lseek_r>
 8011aae:	1c43      	adds	r3, r0, #1
 8011ab0:	89a3      	ldrh	r3, [r4, #12]
 8011ab2:	bf15      	itete	ne
 8011ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011abe:	81a3      	strheq	r3, [r4, #12]
 8011ac0:	bf18      	it	ne
 8011ac2:	81a3      	strhne	r3, [r4, #12]
 8011ac4:	bd10      	pop	{r4, pc}

08011ac6 <__sclose>:
 8011ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aca:	f000 b813 	b.w	8011af4 <_close_r>
	...

08011ad0 <_write_r>:
 8011ad0:	b538      	push	{r3, r4, r5, lr}
 8011ad2:	4d07      	ldr	r5, [pc, #28]	; (8011af0 <_write_r+0x20>)
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	4608      	mov	r0, r1
 8011ad8:	4611      	mov	r1, r2
 8011ada:	2200      	movs	r2, #0
 8011adc:	602a      	str	r2, [r5, #0]
 8011ade:	461a      	mov	r2, r3
 8011ae0:	f7f0 fa63 	bl	8001faa <_write>
 8011ae4:	1c43      	adds	r3, r0, #1
 8011ae6:	d102      	bne.n	8011aee <_write_r+0x1e>
 8011ae8:	682b      	ldr	r3, [r5, #0]
 8011aea:	b103      	cbz	r3, 8011aee <_write_r+0x1e>
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	bd38      	pop	{r3, r4, r5, pc}
 8011af0:	24004f58 	.word	0x24004f58

08011af4 <_close_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d06      	ldr	r5, [pc, #24]	; (8011b10 <_close_r+0x1c>)
 8011af8:	2300      	movs	r3, #0
 8011afa:	4604      	mov	r4, r0
 8011afc:	4608      	mov	r0, r1
 8011afe:	602b      	str	r3, [r5, #0]
 8011b00:	f7f0 fa6f 	bl	8001fe2 <_close>
 8011b04:	1c43      	adds	r3, r0, #1
 8011b06:	d102      	bne.n	8011b0e <_close_r+0x1a>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	b103      	cbz	r3, 8011b0e <_close_r+0x1a>
 8011b0c:	6023      	str	r3, [r4, #0]
 8011b0e:	bd38      	pop	{r3, r4, r5, pc}
 8011b10:	24004f58 	.word	0x24004f58

08011b14 <_fstat_r>:
 8011b14:	b538      	push	{r3, r4, r5, lr}
 8011b16:	4d07      	ldr	r5, [pc, #28]	; (8011b34 <_fstat_r+0x20>)
 8011b18:	2300      	movs	r3, #0
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	4608      	mov	r0, r1
 8011b1e:	4611      	mov	r1, r2
 8011b20:	602b      	str	r3, [r5, #0]
 8011b22:	f7f0 fa6a 	bl	8001ffa <_fstat>
 8011b26:	1c43      	adds	r3, r0, #1
 8011b28:	d102      	bne.n	8011b30 <_fstat_r+0x1c>
 8011b2a:	682b      	ldr	r3, [r5, #0]
 8011b2c:	b103      	cbz	r3, 8011b30 <_fstat_r+0x1c>
 8011b2e:	6023      	str	r3, [r4, #0]
 8011b30:	bd38      	pop	{r3, r4, r5, pc}
 8011b32:	bf00      	nop
 8011b34:	24004f58 	.word	0x24004f58

08011b38 <_isatty_r>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	4d06      	ldr	r5, [pc, #24]	; (8011b54 <_isatty_r+0x1c>)
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	4604      	mov	r4, r0
 8011b40:	4608      	mov	r0, r1
 8011b42:	602b      	str	r3, [r5, #0]
 8011b44:	f7f0 fa69 	bl	800201a <_isatty>
 8011b48:	1c43      	adds	r3, r0, #1
 8011b4a:	d102      	bne.n	8011b52 <_isatty_r+0x1a>
 8011b4c:	682b      	ldr	r3, [r5, #0]
 8011b4e:	b103      	cbz	r3, 8011b52 <_isatty_r+0x1a>
 8011b50:	6023      	str	r3, [r4, #0]
 8011b52:	bd38      	pop	{r3, r4, r5, pc}
 8011b54:	24004f58 	.word	0x24004f58

08011b58 <_lseek_r>:
 8011b58:	b538      	push	{r3, r4, r5, lr}
 8011b5a:	4d07      	ldr	r5, [pc, #28]	; (8011b78 <_lseek_r+0x20>)
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	4608      	mov	r0, r1
 8011b60:	4611      	mov	r1, r2
 8011b62:	2200      	movs	r2, #0
 8011b64:	602a      	str	r2, [r5, #0]
 8011b66:	461a      	mov	r2, r3
 8011b68:	f7f0 fa62 	bl	8002030 <_lseek>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_lseek_r+0x1e>
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_lseek_r+0x1e>
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	24004f58 	.word	0x24004f58

08011b7c <__malloc_lock>:
 8011b7c:	4801      	ldr	r0, [pc, #4]	; (8011b84 <__malloc_lock+0x8>)
 8011b7e:	f7ff be0b 	b.w	8011798 <__retarget_lock_acquire_recursive>
 8011b82:	bf00      	nop
 8011b84:	24004f4c 	.word	0x24004f4c

08011b88 <__malloc_unlock>:
 8011b88:	4801      	ldr	r0, [pc, #4]	; (8011b90 <__malloc_unlock+0x8>)
 8011b8a:	f7ff be06 	b.w	801179a <__retarget_lock_release_recursive>
 8011b8e:	bf00      	nop
 8011b90:	24004f4c 	.word	0x24004f4c

08011b94 <_read_r>:
 8011b94:	b538      	push	{r3, r4, r5, lr}
 8011b96:	4d07      	ldr	r5, [pc, #28]	; (8011bb4 <_read_r+0x20>)
 8011b98:	4604      	mov	r4, r0
 8011b9a:	4608      	mov	r0, r1
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	602a      	str	r2, [r5, #0]
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	f7f0 f9e4 	bl	8001f70 <_read>
 8011ba8:	1c43      	adds	r3, r0, #1
 8011baa:	d102      	bne.n	8011bb2 <_read_r+0x1e>
 8011bac:	682b      	ldr	r3, [r5, #0]
 8011bae:	b103      	cbz	r3, 8011bb2 <_read_r+0x1e>
 8011bb0:	6023      	str	r3, [r4, #0]
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}
 8011bb4:	24004f58 	.word	0x24004f58

08011bb8 <_init>:
 8011bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bba:	bf00      	nop
 8011bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bbe:	bc08      	pop	{r3}
 8011bc0:	469e      	mov	lr, r3
 8011bc2:	4770      	bx	lr

08011bc4 <_fini>:
 8011bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bc6:	bf00      	nop
 8011bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bca:	bc08      	pop	{r3}
 8011bcc:	469e      	mov	lr, r3
 8011bce:	4770      	bx	lr
