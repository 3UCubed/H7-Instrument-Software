
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017100  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080173a0  080173a0  000273a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080177d4  080177d4  000277d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080177dc  080177dc  000277dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080177e0  080177e0  000277e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  080177e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  080178ec  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  080178ec  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ad4  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005705  00000000  00000000  00063c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00069310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000323a7  00000000  00000000  000ae0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194c15  00000000  00000000  000e0495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002750aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0c8  00000000  00000000  002750fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017388 	.word	0x08017388

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017388 	.word	0x08017388

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c44 	.word	0x24000c44

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fdc0 	bl	801319c <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fdb5 	bl	801319c <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fdaa 	bl	801319c <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fd9f 	bl	801319c <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fae1 	bl	8016c28 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c60 	.word	0x24000c60
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	0801740c 	.word	0x0801740c

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fdf7 	bl	8010288 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 8443 	bhi.w	8000f2e <HAL_UART_RxCpltCallback+0x8a6>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cf1 	.word	0x08000cf1
 80006dc:	08000d23 	.word	0x08000d23
 80006e0:	08000d55 	.word	0x08000d55
 80006e4:	08000e61 	.word	0x08000e61
 80006e8:	08000ec3 	.word	0x08000ec3
 80006ec:	08000eeb 	.word	0x08000eeb
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d07 	.word	0x08000d07
 8000720:	08000d39 	.word	0x08000d39
 8000724:	08000e25 	.word	0x08000e25
 8000728:	08000e9b 	.word	0x08000e9b
 800072c:	08000f2f 	.word	0x08000f2f
 8000730:	08000f2f 	.word	0x08000f2f
 8000734:	08000f2f 	.word	0x08000f2f
 8000738:	08000f2f 	.word	0x08000f2f
 800073c:	08000f2f 	.word	0x08000f2f
 8000740:	08000f2f 	.word	0x08000f2f
 8000744:	08000f2f 	.word	0x08000f2f
 8000748:	08000f2f 	.word	0x08000f2f
 800074c:	08000f2f 	.word	0x08000f2f
 8000750:	08000f2f 	.word	0x08000f2f
 8000754:	08000f2f 	.word	0x08000f2f
 8000758:	08000f2f 	.word	0x08000f2f
 800075c:	08000f2f 	.word	0x08000f2f
 8000760:	08000f2f 	.word	0x08000f2f
 8000764:	08000f2f 	.word	0x08000f2f
 8000768:	08000f2f 	.word	0x08000f2f
 800076c:	08000f2f 	.word	0x08000f2f
 8000770:	08000f2f 	.word	0x08000f2f
 8000774:	08000f2f 	.word	0x08000f2f
 8000778:	08000f2f 	.word	0x08000f2f
 800077c:	08000f2f 	.word	0x08000f2f
 8000780:	08000f2f 	.word	0x08000f2f
 8000784:	08000f2f 	.word	0x08000f2f
 8000788:	08000f2f 	.word	0x08000f2f
 800078c:	08000f2f 	.word	0x08000f2f
 8000790:	08000f2f 	.word	0x08000f2f
 8000794:	08000f2f 	.word	0x08000f2f
 8000798:	08000f2f 	.word	0x08000f2f
 800079c:	08000f2f 	.word	0x08000f2f
 80007a0:	08000f2f 	.word	0x08000f2f
 80007a4:	08000f2f 	.word	0x08000f2f
 80007a8:	08000f2f 	.word	0x08000f2f
 80007ac:	08000f2f 	.word	0x08000f2f
 80007b0:	08000f2f 	.word	0x08000f2f
 80007b4:	08000f2f 	.word	0x08000f2f
 80007b8:	08000f2f 	.word	0x08000f2f
 80007bc:	08000f2f 	.word	0x08000f2f
 80007c0:	08000f2f 	.word	0x08000f2f
 80007c4:	08000f2f 	.word	0x08000f2f
 80007c8:	08000f2f 	.word	0x08000f2f
 80007cc:	08000f2f 	.word	0x08000f2f
 80007d0:	08000f2f 	.word	0x08000f2f
 80007d4:	08000f2f 	.word	0x08000f2f
 80007d8:	08000f2f 	.word	0x08000f2f
 80007dc:	08000f2f 	.word	0x08000f2f
 80007e0:	08000f2f 	.word	0x08000f2f
 80007e4:	08000f2f 	.word	0x08000f2f
 80007e8:	08000f2f 	.word	0x08000f2f
 80007ec:	08000f2f 	.word	0x08000f2f
 80007f0:	08000f2f 	.word	0x08000f2f
 80007f4:	08000f2f 	.word	0x08000f2f
 80007f8:	08000f2f 	.word	0x08000f2f
 80007fc:	08000f2f 	.word	0x08000f2f
 8000800:	08000f2f 	.word	0x08000f2f
 8000804:	08000f2f 	.word	0x08000f2f
 8000808:	08000f2f 	.word	0x08000f2f
 800080c:	08000f2f 	.word	0x08000f2f
 8000810:	08000f2f 	.word	0x08000f2f
 8000814:	08000f2f 	.word	0x08000f2f
 8000818:	08000f2f 	.word	0x08000f2f
 800081c:	08000f2f 	.word	0x08000f2f
 8000820:	08000f2f 	.word	0x08000f2f
 8000824:	08000f2f 	.word	0x08000f2f
 8000828:	08000f2f 	.word	0x08000f2f
 800082c:	08000f2f 	.word	0x08000f2f
 8000830:	08000f2f 	.word	0x08000f2f
 8000834:	08000f2f 	.word	0x08000f2f
 8000838:	08000f2f 	.word	0x08000f2f
 800083c:	08000f2f 	.word	0x08000f2f
 8000840:	08000f2f 	.word	0x08000f2f
 8000844:	08000f2f 	.word	0x08000f2f
 8000848:	08000f2f 	.word	0x08000f2f
 800084c:	08000f2f 	.word	0x08000f2f
 8000850:	08000f2f 	.word	0x08000f2f
 8000854:	08000f2f 	.word	0x08000f2f
 8000858:	08000f2f 	.word	0x08000f2f
 800085c:	08000f2f 	.word	0x08000f2f
 8000860:	08000f2f 	.word	0x08000f2f
 8000864:	08000f2f 	.word	0x08000f2f
 8000868:	08000f2f 	.word	0x08000f2f
 800086c:	08000f2f 	.word	0x08000f2f
 8000870:	08000f2f 	.word	0x08000f2f
 8000874:	08000f2f 	.word	0x08000f2f
 8000878:	08000f2f 	.word	0x08000f2f
 800087c:	08000f2f 	.word	0x08000f2f
 8000880:	08000f2f 	.word	0x08000f2f
 8000884:	08000f2f 	.word	0x08000f2f
 8000888:	08000f2f 	.word	0x08000f2f
 800088c:	08000f2f 	.word	0x08000f2f
 8000890:	08000f2f 	.word	0x08000f2f
 8000894:	08000f2f 	.word	0x08000f2f
 8000898:	08000f2f 	.word	0x08000f2f
 800089c:	08000f2f 	.word	0x08000f2f
 80008a0:	08000f2f 	.word	0x08000f2f
 80008a4:	08000f2f 	.word	0x08000f2f
 80008a8:	08000f2f 	.word	0x08000f2f
 80008ac:	08000f2f 	.word	0x08000f2f
 80008b0:	08000f2f 	.word	0x08000f2f
 80008b4:	08000f2f 	.word	0x08000f2f
 80008b8:	08000f2f 	.word	0x08000f2f
 80008bc:	08000f2f 	.word	0x08000f2f
 80008c0:	08000f2f 	.word	0x08000f2f
 80008c4:	08000f2f 	.word	0x08000f2f
 80008c8:	08000f2f 	.word	0x08000f2f
 80008cc:	08000f2f 	.word	0x08000f2f
 80008d0:	08000f2f 	.word	0x08000f2f
 80008d4:	08000f2f 	.word	0x08000f2f
 80008d8:	08000f2f 	.word	0x08000f2f
 80008dc:	08000f2f 	.word	0x08000f2f
 80008e0:	08000f2f 	.word	0x08000f2f
 80008e4:	08000f2f 	.word	0x08000f2f
 80008e8:	08000f2f 	.word	0x08000f2f
 80008ec:	08000f2f 	.word	0x08000f2f
 80008f0:	08000f2f 	.word	0x08000f2f
 80008f4:	08000f2f 	.word	0x08000f2f
 80008f8:	08000f2f 	.word	0x08000f2f
 80008fc:	08000f2f 	.word	0x08000f2f
 8000900:	08000f2f 	.word	0x08000f2f
 8000904:	08000f2f 	.word	0x08000f2f
 8000908:	08000f2f 	.word	0x08000f2f
 800090c:	08000f2f 	.word	0x08000f2f
 8000910:	08000f2f 	.word	0x08000f2f
 8000914:	08000f2f 	.word	0x08000f2f
 8000918:	08000f2f 	.word	0x08000f2f
 800091c:	08000f2f 	.word	0x08000f2f
 8000920:	08000f2f 	.word	0x08000f2f
 8000924:	08000f2f 	.word	0x08000f2f
 8000928:	08000f2f 	.word	0x08000f2f
 800092c:	08000f2f 	.word	0x08000f2f
 8000930:	08000f2f 	.word	0x08000f2f
 8000934:	08000f2f 	.word	0x08000f2f
 8000938:	08000f2f 	.word	0x08000f2f
 800093c:	08000f2f 	.word	0x08000f2f
 8000940:	08000f2f 	.word	0x08000f2f
 8000944:	08000f2f 	.word	0x08000f2f
 8000948:	08000f2f 	.word	0x08000f2f
 800094c:	08000f2f 	.word	0x08000f2f
 8000950:	08000f2f 	.word	0x08000f2f
 8000954:	08000f2f 	.word	0x08000f2f
 8000958:	08000f2f 	.word	0x08000f2f
 800095c:	08000f2f 	.word	0x08000f2f
 8000960:	08000f2f 	.word	0x08000f2f
 8000964:	08000f2f 	.word	0x08000f2f
 8000968:	08000f2f 	.word	0x08000f2f
 800096c:	08000f23 	.word	0x08000f23
 8000970:	08000f2f 	.word	0x08000f2f
 8000974:	08000f2f 	.word	0x08000f2f
 8000978:	08000f2f 	.word	0x08000f2f
 800097c:	08000f2f 	.word	0x08000f2f
 8000980:	08000f2f 	.word	0x08000f2f
 8000984:	08000f2f 	.word	0x08000f2f
 8000988:	08000f2f 	.word	0x08000f2f
 800098c:	08000f2f 	.word	0x08000f2f
 8000990:	08000f2f 	.word	0x08000f2f
 8000994:	08000f2f 	.word	0x08000f2f
 8000998:	08000f2f 	.word	0x08000f2f
 800099c:	08000f2f 	.word	0x08000f2f
 80009a0:	08000f2f 	.word	0x08000f2f
 80009a4:	08000f2f 	.word	0x08000f2f
 80009a8:	08000f2f 	.word	0x08000f2f
 80009ac:	08000f29 	.word	0x08000f29
 80009b0:	08000f2f 	.word	0x08000f2f
 80009b4:	08000f2f 	.word	0x08000f2f
 80009b8:	08000f2f 	.word	0x08000f2f
 80009bc:	08000f2f 	.word	0x08000f2f
 80009c0:	08000f2f 	.word	0x08000f2f
 80009c4:	08000f2f 	.word	0x08000f2f
 80009c8:	08000f2f 	.word	0x08000f2f
 80009cc:	08000f2f 	.word	0x08000f2f
 80009d0:	08000f2f 	.word	0x08000f2f
 80009d4:	08000f2f 	.word	0x08000f2f
 80009d8:	08000f2f 	.word	0x08000f2f
 80009dc:	08000f2f 	.word	0x08000f2f
 80009e0:	08000f2f 	.word	0x08000f2f
 80009e4:	08000f2f 	.word	0x08000f2f
 80009e8:	08000f2f 	.word	0x08000f2f
 80009ec:	08000f2f 	.word	0x08000f2f
 80009f0:	08000f11 	.word	0x08000f11
 80009f4:	08000f2f 	.word	0x08000f2f
 80009f8:	08000f2f 	.word	0x08000f2f
 80009fc:	08000f2f 	.word	0x08000f2f
 8000a00:	08000f2f 	.word	0x08000f2f
 8000a04:	08000f2f 	.word	0x08000f2f
 8000a08:	08000f2f 	.word	0x08000f2f
 8000a0c:	08000f2f 	.word	0x08000f2f
 8000a10:	08000f2f 	.word	0x08000f2f
 8000a14:	08000f2f 	.word	0x08000f2f
 8000a18:	08000f2f 	.word	0x08000f2f
 8000a1c:	08000f2f 	.word	0x08000f2f
 8000a20:	08000f2f 	.word	0x08000f2f
 8000a24:	08000f2f 	.word	0x08000f2f
 8000a28:	08000f2f 	.word	0x08000f2f
 8000a2c:	08000f2f 	.word	0x08000f2f
 8000a30:	08000eff 	.word	0x08000eff
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f8f7 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fb3d 	bl	80090c0 <HAL_GPIO_WritePin>
		break;
 8000a46:	e27d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f8ed 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fb33 	bl	80090c0 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e273      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
 8000a5c:	24000c64 	.word	0x24000c64
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017424 	.word	0x08017424
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	0801742c 	.word	0x0801742c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48be      	ldr	r0, [pc, #760]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000a72:	f016 f8d9 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bbe      	ldr	r3, [pc, #760]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fb1f 	bl	80090c0 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbc      	ldr	r3, [pc, #752]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e25c      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48bb      	ldr	r0, [pc, #748]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a8c:	f016 f8cc 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bb7      	ldr	r3, [pc, #732]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fb12 	bl	80090c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb4      	ldr	r3, [pc, #720]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fb0c 	bl	80090c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb4      	ldr	r3, [pc, #720]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fb05 	bl	80090c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb1      	ldr	r3, [pc, #708]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fafe 	bl	80090c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bad      	ldr	r3, [pc, #692]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 faf7 	bl	80090c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4baa      	ldr	r3, [pc, #680]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 faf1 	bl	80090c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4ba7      	ldr	r3, [pc, #668]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 faeb 	bl	80090c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba4      	ldr	r3, [pc, #656]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fae4 	bl	80090c0 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4b9e      	ldr	r3, [pc, #632]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4b9f      	ldr	r3, [pc, #636]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4b9f      	ldr	r3, [pc, #636]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4b9e      	ldr	r3, [pc, #632]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4b9d      	ldr	r3, [pc, #628]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9c      	ldr	r3, [pc, #624]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e209      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489b      	ldr	r0, [pc, #620]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b32:	f016 f879 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fabe 	bl	80090c0 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e1fb      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4895      	ldr	r0, [pc, #596]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b4e:	f016 f86b 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8a      	ldr	r3, [pc, #552]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fab0 	bl	80090c0 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1ed      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	488f      	ldr	r0, [pc, #572]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b6a:	f016 f85d 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 faa3 	bl	80090c0 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1e0      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488a      	ldr	r0, [pc, #552]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b84:	f016 f850 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fa96 	bl	80090c0 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1d3      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4884      	ldr	r0, [pc, #528]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b9e:	f016 f843 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fa89 	bl	80090c0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1c6      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	487f      	ldr	r0, [pc, #508]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000bb8:	f016 f836 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fa7c 	bl	80090c0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1b9      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	4879      	ldr	r0, [pc, #484]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000bd2:	f016 f829 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fa6e 	bl	80090c0 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1ab      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4873      	ldr	r0, [pc, #460]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000bee:	f016 f81b 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fa60 	bl	80090c0 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e19d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	486d      	ldr	r0, [pc, #436]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c0a:	f016 f80d 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fa52 	bl	80090c0 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e18f      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	4867      	ldr	r0, [pc, #412]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c26:	f015 ffff 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fa44 	bl	80090c0 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e181      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c42:	f015 fff1 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fa36 	bl	80090c0 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e173      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485b      	ldr	r0, [pc, #364]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c5e:	f015 ffe3 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fa28 	bl	80090c0 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e165      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4855      	ldr	r0, [pc, #340]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c7a:	f015 ffd5 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fa1b 	bl	80090c0 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e158      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c94:	f015 ffc8 	bl	8016c28 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 fa0e 	bl	80090c0 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e14b      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484a      	ldr	r0, [pc, #296]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cae:	f015 ffbb 	bl	8016c28 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4848      	ldr	r0, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	f004 fe63 	bl	8005988 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e13f      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 ffaf 	bl	8016c28 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4844      	ldr	r0, [pc, #272]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cce:	f004 ff1b 	bl	8005b08 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e137      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4844      	ldr	r0, [pc, #272]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cd6:	f015 ffa7 	bl	8016c28 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4843      	ldr	r0, [pc, #268]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cde:	f00d fdf3 	bl	800e8c8 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
		break;
 8000cee:	e129      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cf2:	f015 ff99 	bl	8016c28 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	483c      	ldr	r0, [pc, #240]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cfa:	f00d ff3f 	bl	800eb7c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
		break;
 8000d04:	e11e      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d08:	f015 ff8e 	bl	8016c28 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	483c      	ldr	r0, [pc, #240]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d10:	f00d fdda 	bl	800e8c8 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
		break;
 8000d20:	e110      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d22:	483a      	ldr	r0, [pc, #232]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d24:	f015 ff80 	bl	8016c28 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d2c:	f00d ff26 	bl	800eb7c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	e105      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d38:	4835      	ldr	r0, [pc, #212]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d3a:	f015 ff75 	bl	8016c28 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d42:	f00d fdc1 	bl	800e8c8 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
		break;
 8000d52:	e0f7      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d54:	4832      	ldr	r0, [pc, #200]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d56:	f015 ff67 	bl	8016c28 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	482d      	ldr	r0, [pc, #180]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d5e:	f00d ff0d 	bl	800eb7c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
		break;
 8000d68:	e0ec      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
 8000d6a:	bf00      	nop
 8000d6c:	08017438 	.word	0x08017438
 8000d70:	58020400 	.word	0x58020400
 8000d74:	24000c1c 	.word	0x24000c1c
 8000d78:	08017444 	.word	0x08017444
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	24000c1d 	.word	0x24000c1d
 8000d84:	24000c1e 	.word	0x24000c1e
 8000d88:	24000c1f 	.word	0x24000c1f
 8000d8c:	24000c20 	.word	0x24000c20
 8000d90:	24000c21 	.word	0x24000c21
 8000d94:	24000c22 	.word	0x24000c22
 8000d98:	24000c23 	.word	0x24000c23
 8000d9c:	24000c24 	.word	0x24000c24
 8000da0:	08017450 	.word	0x08017450
 8000da4:	0801745c 	.word	0x0801745c
 8000da8:	0801746c 	.word	0x0801746c
 8000dac:	08017478 	.word	0x08017478
 8000db0:	08017484 	.word	0x08017484
 8000db4:	08017490 	.word	0x08017490
 8000db8:	080174a0 	.word	0x080174a0
 8000dbc:	080174ac 	.word	0x080174ac
 8000dc0:	080174b8 	.word	0x080174b8
 8000dc4:	080174c4 	.word	0x080174c4
 8000dc8:	080174d0 	.word	0x080174d0
 8000dcc:	080174e0 	.word	0x080174e0
 8000dd0:	080174f0 	.word	0x080174f0
 8000dd4:	080174fc 	.word	0x080174fc
 8000dd8:	0801750c 	.word	0x0801750c
 8000ddc:	24000010 	.word	0x24000010
 8000de0:	240002f4 	.word	0x240002f4
 8000de4:	0801751c 	.word	0x0801751c
 8000de8:	0801752c 	.word	0x0801752c
 8000dec:	24000554 	.word	0x24000554
 8000df0:	24000c5b 	.word	0x24000c5b
 8000df4:	24000c56 	.word	0x24000c56
 8000df8:	08017534 	.word	0x08017534
 8000dfc:	08017540 	.word	0x08017540
 8000e00:	24000508 	.word	0x24000508
 8000e04:	24000c5a 	.word	0x24000c5a
 8000e08:	24000c54 	.word	0x24000c54
 8000e0c:	08017548 	.word	0x08017548
 8000e10:	08017550 	.word	0x08017550
 8000e14:	240005a0 	.word	0x240005a0
 8000e18:	24000c5c 	.word	0x24000c5c
 8000e1c:	24000c58 	.word	0x24000c58
 8000e20:	08017558 	.word	0x08017558
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e24:	4849      	ldr	r0, [pc, #292]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e26:	f015 feff 	bl	8016c28 <puts>
		if (step < 17) {
 8000e2a:	4b49      	ldr	r3, [pc, #292]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	f200 8081 	bhi.w	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
			step += 2;
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e3e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e40:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4841      	ldr	r0, [pc, #260]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e52:	f004 fefc 	bl	8005c4e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e56:	2100      	movs	r1, #0
 8000e58:	483f      	ldr	r0, [pc, #252]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e5a:	f004 fd3d 	bl	80058d8 <HAL_DAC_Start>
		}
		break;
 8000e5e:	e06a      	b.n	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e60:	483e      	ldr	r0, [pc, #248]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e62:	f015 fee1 	bl	8016c28 <puts>
		if (step > 3) {
 8000e66:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d965      	bls.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
			step -= 2;
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b02      	subs	r3, #2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e78:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4833      	ldr	r0, [pc, #204]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e8c:	f004 fedf 	bl	8005c4e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4831      	ldr	r0, [pc, #196]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e94:	f004 fd20 	bl	80058d8 <HAL_DAC_Start>
		}
		break;
 8000e98:	e04f      	b.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e9a:	4831      	ldr	r0, [pc, #196]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e9c:	f015 fec4 	bl	8016c28 <puts>
		if (cadence <= 50000) {
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d848      	bhi.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
			cadence *= 2;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eb4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ec0:	e03d      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ec2:	4829      	ldr	r0, [pc, #164]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ec4:	f015 feb0 	bl	8016c28 <puts>
		if (cadence >= 6250) {
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d936      	bls.n	8000f42 <HAL_UART_RxCpltCallback+0x8ba>
			cadence /= 2;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000edc:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee8:	e02b      	b.n	8000f42 <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000eea:	4820      	ldr	r0, [pc, #128]	; (8000f6c <HAL_UART_RxCpltCallback+0x8e4>)
 8000eec:	f015 fe9c 	bl	8016c28 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2116      	movs	r1, #22
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f012 f950 	bl	801319c <osEventFlagsSet>
		break;
 8000efc:	e022      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000efe:	481d      	ldr	r0, [pc, #116]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000f00:	f015 fe92 	bl	8016c28 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f013 feed 	bl	8014ce8 <xTaskResumeFromISR>
		break;
 8000f0e:	e019      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f10:	481a      	ldr	r0, [pc, #104]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000f12:	f015 fe89 	bl	8016c28 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f013 fee4 	bl	8014ce8 <xTaskResumeFromISR>
		break;
 8000f20:	e010      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xAF: {
		sync();
 8000f22:	f001 f9a9 	bl	8002278 <sync>
		break;
 8000f26:	e00d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xBF: {
		enter_flight_mode();
 8000f28:	f001 f8e8 	bl	80020fc <enter_flight_mode>
		break;
 8000f2c:	e00a      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	default: {
		printf("Unknown Command\n");
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000f30:	f015 fe7a 	bl	8016c28 <puts>
		break;
 8000f34:	e006      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f36:	bf00      	nop
 8000f38:	e004      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f3a:	bf00      	nop
 8000f3c:	e002      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f42:	bf00      	nop
	}
	}
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08017560 	.word	0x08017560
 8000f50:	2400000c 	.word	0x2400000c
 8000f54:	24000010 	.word	0x24000010
 8000f58:	240002f4 	.word	0x240002f4
 8000f5c:	08017568 	.word	0x08017568
 8000f60:	08017574 	.word	0x08017574
 8000f64:	24000008 	.word	0x24000008
 8000f68:	08017580 	.word	0x08017580
 8000f6c:	0801758c 	.word	0x0801758c
 8000f70:	24000c60 	.word	0x24000c60
 8000f74:	0801759c 	.word	0x0801759c
 8000f78:	24000750 	.word	0x24000750
 8000f7c:	080175a8 	.word	0x080175a8
 8000f80:	240009b0 	.word	0x240009b0
 8000f84:	080175b4 	.word	0x080175b4

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f002 ff10 	bl	8003db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f8ac 	bl	80010ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f94:	f000 f92a 	bl	80011ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 feee 	bl	8001d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9c:	f000 feb4 	bl	8001d08 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fa0:	f000 fdac 	bl	8001afc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fa4:	f000 fe48 	bl	8001c38 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fa8:	f000 fb36 	bl	8001618 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fac:	f000 fc2c 	bl	8001808 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fb0:	f000 fd2e 	bl	8001a10 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fb4:	f000 fc80 	bl	80018b8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fb8:	f000 fa6a 	bl	8001490 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fbc:	f000 f946 	bl	800124c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fc0:	f000 faf8 	bl	80015b4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fc4:	f000 fbc8 	bl	8001758 <MX_SPI1_Init>
  MX_RTC_Init();
 8000fc8:	f000 fb68 	bl	800169c <MX_RTC_Init>
  MX_TIM4_Init();
 8000fcc:	f000 fde6 	bl	8001b9c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd0:	f011 ff6c 	bl	8012eac <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	2080      	movs	r0, #128	; 0x80
 8000fda:	f012 f9dc 	bl	8013396 <osMessageQueueNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <main+0xf8>)
 8000fe2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <main+0xfc>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4827      	ldr	r0, [pc, #156]	; (8001088 <main+0x100>)
 8000fea:	f011 ffa9 	bl	8012f40 <osThreadNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <main+0x104>)
 8000ff2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ff4:	4a26      	ldr	r2, [pc, #152]	; (8001090 <main+0x108>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4826      	ldr	r0, [pc, #152]	; (8001094 <main+0x10c>)
 8000ffa:	f011 ffa1 	bl	8012f40 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <main+0x110>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <main+0x114>)
 8001006:	2100      	movs	r1, #0
 8001008:	4825      	ldr	r0, [pc, #148]	; (80010a0 <main+0x118>)
 800100a:	f011 ff99 	bl	8012f40 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <main+0x11c>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8001014:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <main+0x120>)
 8001016:	2100      	movs	r1, #0
 8001018:	4824      	ldr	r0, [pc, #144]	; (80010ac <main+0x124>)
 800101a:	f011 ff91 	bl	8012f40 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <main+0x128>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <main+0x12c>)
 8001026:	2100      	movs	r1, #0
 8001028:	4823      	ldr	r0, [pc, #140]	; (80010b8 <main+0x130>)
 800102a:	f011 ff89 	bl	8012f40 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <main+0x134>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <main+0x138>)
 8001036:	2100      	movs	r1, #0
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <main+0x13c>)
 800103a:	f011 ff81 	bl	8012f40 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <main+0x140>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <main+0x144>)
 8001046:	2100      	movs	r1, #0
 8001048:	4821      	ldr	r0, [pc, #132]	; (80010d0 <main+0x148>)
 800104a:	f011 ff79 	bl	8012f40 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <main+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <main+0x150>)
 8001056:	2100      	movs	r1, #0
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <main+0x154>)
 800105a:	f011 ff71 	bl	8012f40 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <main+0x158>)
 8001062:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001064:	2000      	movs	r0, #0
 8001066:	f012 f859 	bl	801311c <osEventFlagsNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <main+0x15c>)
 800106e:	6013      	str	r3, [r2, #0]
	system_setup();
 8001070:	f001 f96a 	bl	8002348 <system_setup>
	printf("Starting kernal...\n");
 8001074:	481c      	ldr	r0, [pc, #112]	; (80010e8 <main+0x160>)
 8001076:	f015 fdd7 	bl	8016c28 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800107a:	f011 ff3b 	bl	8012ef4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800107e:	e7fe      	b.n	800107e <main+0xf6>
 8001080:	24000c48 	.word	0x24000c48
 8001084:	08017610 	.word	0x08017610
 8001088:	08002b01 	.word	0x08002b01
 800108c:	24000744 	.word	0x24000744
 8001090:	08017634 	.word	0x08017634
 8001094:	08002b45 	.word	0x08002b45
 8001098:	24000748 	.word	0x24000748
 800109c:	08017658 	.word	0x08017658
 80010a0:	08002b89 	.word	0x08002b89
 80010a4:	2400074c 	.word	0x2400074c
 80010a8:	0801767c 	.word	0x0801767c
 80010ac:	08002bcd 	.word	0x08002bcd
 80010b0:	24000750 	.word	0x24000750
 80010b4:	080176a0 	.word	0x080176a0
 80010b8:	08002c75 	.word	0x08002c75
 80010bc:	240009b0 	.word	0x240009b0
 80010c0:	080176c4 	.word	0x080176c4
 80010c4:	08002d1d 	.word	0x08002d1d
 80010c8:	24000c10 	.word	0x24000c10
 80010cc:	080176e8 	.word	0x080176e8
 80010d0:	08002dd5 	.word	0x08002dd5
 80010d4:	24000c14 	.word	0x24000c14
 80010d8:	0801770c 	.word	0x0801770c
 80010dc:	08002ecd 	.word	0x08002ecd
 80010e0:	24000c18 	.word	0x24000c18
 80010e4:	24000c60 	.word	0x24000c60
 80010e8:	080175c4 	.word	0x080175c4

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09c      	sub	sp, #112	; 0x70
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	224c      	movs	r2, #76	; 0x4c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f015 fc3e 	bl	801697c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2220      	movs	r2, #32
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f015 fc38 	bl	801697c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800110c:	2002      	movs	r0, #2
 800110e:	f008 fe39 	bl	8009d84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <SystemClock_Config+0xf8>)
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <SystemClock_Config+0xf8>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <SystemClock_Config+0xf8>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <SystemClock_Config+0xfc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <SystemClock_Config+0xfc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <SystemClock_Config+0xfc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001148:	bf00      	nop
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <SystemClock_Config+0xfc>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001156:	d1f8      	bne.n	800114a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001158:	2303      	movs	r3, #3
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001162:	2309      	movs	r3, #9
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	2340      	movs	r3, #64	; 0x40
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	2302      	movs	r3, #2
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001172:	2304      	movs	r3, #4
 8001174:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001176:	2320      	movs	r3, #32
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001186:	2308      	movs	r3, #8
 8001188:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800118a:	2300      	movs	r3, #0
 800118c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4618      	mov	r0, r3
 8001198:	f008 fe2e 	bl	8009df8 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011a2:	f001 fec3 	bl	8002f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	233f      	movs	r3, #63	; 0x3f
 80011a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2303      	movs	r3, #3
 80011ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f009 fa6e 	bl	800a6ac <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011d6:	f001 fea9 	bl	8002f2c <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3770      	adds	r7, #112	; 0x70
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58000400 	.word	0x58000400
 80011e8:	58024800 	.word	0x58024800

080011ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b0      	sub	sp, #192	; 0xc0
 80011f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	22c0      	movs	r2, #192	; 0xc0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f015 fbbf 	bl	801697c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800120a:	2304      	movs	r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800120e:	2320      	movs	r3, #32
 8001210:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001212:	2308      	movs	r3, #8
 8001214:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001216:	2304      	movs	r3, #4
 8001218:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4618      	mov	r0, r3
 8001234:	f009 fe08 	bl	800ae48 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800123e:	f001 fe75 	bl	8002f2c <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	37c0      	adds	r7, #192	; 0xc0
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001270:	4b7a      	ldr	r3, [pc, #488]	; (800145c <MX_ADC1_Init+0x210>)
 8001272:	4a7b      	ldr	r2, [pc, #492]	; (8001460 <MX_ADC1_Init+0x214>)
 8001274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001276:	4b79      	ldr	r3, [pc, #484]	; (800145c <MX_ADC1_Init+0x210>)
 8001278:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800127c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <MX_ADC1_Init+0x210>)
 8001280:	2208      	movs	r2, #8
 8001282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001284:	4b75      	ldr	r3, [pc, #468]	; (800145c <MX_ADC1_Init+0x210>)
 8001286:	2201      	movs	r2, #1
 8001288:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <MX_ADC1_Init+0x210>)
 800128c:	2204      	movs	r2, #4
 800128e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001290:	4b72      	ldr	r3, [pc, #456]	; (800145c <MX_ADC1_Init+0x210>)
 8001292:	2200      	movs	r2, #0
 8001294:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001296:	4b71      	ldr	r3, [pc, #452]	; (800145c <MX_ADC1_Init+0x210>)
 8001298:	2201      	movs	r2, #1
 800129a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <MX_ADC1_Init+0x210>)
 800129e:	220b      	movs	r2, #11
 80012a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a2:	4b6e      	ldr	r3, [pc, #440]	; (800145c <MX_ADC1_Init+0x210>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b6c      	ldr	r3, [pc, #432]	; (800145c <MX_ADC1_Init+0x210>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ae:	4b6b      	ldr	r3, [pc, #428]	; (800145c <MX_ADC1_Init+0x210>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012b4:	4b69      	ldr	r3, [pc, #420]	; (800145c <MX_ADC1_Init+0x210>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <MX_ADC1_Init+0x210>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <MX_ADC1_Init+0x210>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_ADC1_Init+0x210>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d0:	4862      	ldr	r0, [pc, #392]	; (800145c <MX_ADC1_Init+0x210>)
 80012d2:	f002 fff9 	bl	80042c8 <HAL_ADC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012dc:	f001 fe26 	bl	8002f2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	485c      	ldr	r0, [pc, #368]	; (800145c <MX_ADC1_Init+0x210>)
 80012ec:	f004 f914 	bl	8005518 <HAL_ADCEx_MultiModeConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012f6:	f001 fe19 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <MX_ADC1_Init+0x218>)
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001302:	2307      	movs	r3, #7
 8001304:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001306:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800130a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130c:	2304      	movs	r3, #4
 800130e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	484f      	ldr	r0, [pc, #316]	; (800145c <MX_ADC1_Init+0x210>)
 800131e:	f003 fa57 	bl	80047d0 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001328:	f001 fe00 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800132c:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <MX_ADC1_Init+0x21c>)
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001330:	230c      	movs	r3, #12
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4848      	ldr	r0, [pc, #288]	; (800145c <MX_ADC1_Init+0x210>)
 800133a:	f003 fa49 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001344:	f001 fdf2 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <MX_ADC1_Init+0x220>)
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800134c:	2312      	movs	r3, #18
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4841      	ldr	r0, [pc, #260]	; (800145c <MX_ADC1_Init+0x210>)
 8001356:	f003 fa3b 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001360:	f001 fde4 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <MX_ADC1_Init+0x224>)
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001368:	2318      	movs	r3, #24
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	483a      	ldr	r0, [pc, #232]	; (800145c <MX_ADC1_Init+0x210>)
 8001372:	f003 fa2d 	bl	80047d0 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800137c:	f001 fdd6 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_ADC1_Init+0x228>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4833      	ldr	r0, [pc, #204]	; (800145c <MX_ADC1_Init+0x210>)
 8001390:	f003 fa1e 	bl	80047d0 <HAL_ADC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800139a:	f001 fdc7 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_ADC1_Init+0x22c>)
 80013a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	482b      	ldr	r0, [pc, #172]	; (800145c <MX_ADC1_Init+0x210>)
 80013ae:	f003 fa0f 	bl	80047d0 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013b8:	f001 fdb8 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <MX_ADC1_Init+0x230>)
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013c0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4824      	ldr	r0, [pc, #144]	; (800145c <MX_ADC1_Init+0x210>)
 80013cc:	f003 fa00 	bl	80047d0 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013d6:	f001 fda9 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC1_Init+0x234>)
 80013dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013de:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	481c      	ldr	r0, [pc, #112]	; (800145c <MX_ADC1_Init+0x210>)
 80013ea:	f003 f9f1 	bl	80047d0 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013f4:	f001 fd9a 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_ADC1_Init+0x238>)
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013fc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <MX_ADC1_Init+0x210>)
 8001408:	f003 f9e2 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001412:	f001 fd8b 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800141a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_ADC1_Init+0x210>)
 8001426:	f003 f9d3 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001430:	f001 fd7c 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_ADC1_Init+0x240>)
 8001436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001438:	f240 2306 	movw	r3, #518	; 0x206
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_ADC1_Init+0x210>)
 8001444:	f003 f9c4 	bl	80047d0 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800144e:	f001 fd6d 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2400013c 	.word	0x2400013c
 8001460:	40022000 	.word	0x40022000
 8001464:	0c900008 	.word	0x0c900008
 8001468:	10c00010 	.word	0x10c00010
 800146c:	14f00020 	.word	0x14f00020
 8001470:	1d500080 	.word	0x1d500080
 8001474:	21800100 	.word	0x21800100
 8001478:	25b00200 	.word	0x25b00200
 800147c:	2a000400 	.word	0x2a000400
 8001480:	2e300800 	.word	0x2e300800
 8001484:	3ac04000 	.word	0x3ac04000
 8001488:	3ef08000 	.word	0x3ef08000
 800148c:	47520000 	.word	0x47520000

08001490 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014aa:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <MX_ADC3_Init+0x114>)
 80014ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014b0:	2208      	movs	r2, #8
 80014b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014bc:	2204      	movs	r2, #4
 80014be:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001502:	f002 fee1 	bl	80042c8 <HAL_ADC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800150c:	f001 fd0e 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_ADC3_Init+0x118>)
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001514:	2306      	movs	r3, #6
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001518:	2307      	movs	r3, #7
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001522:	2304      	movs	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001534:	f003 f94c 	bl	80047d0 <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800153e:	f001 fcf5 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_ADC3_Init+0x11c>)
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001546:	230c      	movs	r3, #12
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001550:	f003 f93e 	bl	80047d0 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800155a:	f001 fce7 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800155e:	2301      	movs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001562:	2312      	movs	r3, #18
 8001564:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_ADC3_Init+0x110>)
 800156c:	f003 f930 	bl	80047d0 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001576:	f001 fcd9 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MX_ADC3_Init+0x120>)
 800157c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800157e:	2318      	movs	r3, #24
 8001580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001588:	f003 f922 	bl	80047d0 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001592:	f001 fccb 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	240001a0 	.word	0x240001a0
 80015a4:	58026000 	.word	0x58026000
 80015a8:	cb840000 	.word	0xcb840000
 80015ac:	cfb80000 	.word	0xcfb80000
 80015b0:	04300002 	.word	0x04300002

080015b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2224      	movs	r2, #36	; 0x24
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f015 f9db 	bl	801697c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_DAC1_Init+0x60>)
 80015ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015ce:	f004 f961 	bl	8005894 <HAL_DAC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015d8:	f001 fca8 	bl	8002f2c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015e0:	230a      	movs	r3, #10
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015e8:	2301      	movs	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015f8:	f004 fb7c 	bl	8005cf4 <HAL_DAC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001602:	f001 fc93 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	240002f4 	.word	0x240002f4
 8001614:	40007400 	.word	0x40007400

08001618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_I2C1_Init+0x78>)
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <MX_I2C1_Init+0x7c>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_I2C1_Init+0x78>)
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <MX_I2C1_Init+0x80>)
 8001626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_I2C1_Init+0x78>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_I2C1_Init+0x78>)
 8001630:	2201      	movs	r2, #1
 8001632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_I2C1_Init+0x78>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_I2C1_Init+0x78>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_I2C1_Init+0x78>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2C1_Init+0x78>)
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_I2C1_Init+0x78>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001652:	480f      	ldr	r0, [pc, #60]	; (8001690 <MX_I2C1_Init+0x78>)
 8001654:	f007 fd4e 	bl	80090f4 <HAL_I2C_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800165e:	f001 fc65 	bl	8002f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <MX_I2C1_Init+0x78>)
 8001666:	f008 fa95 	bl	8009b94 <HAL_I2CEx_ConfigAnalogFilter>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001670:	f001 fc5c 	bl	8002f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_I2C1_Init+0x78>)
 8001678:	f008 fad7 	bl	8009c2a <HAL_I2CEx_ConfigDigitalFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001682:	f001 fc53 	bl	8002f2c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001686:	2001      	movs	r0, #1
 8001688:	f008 fb1c 	bl	8009cc4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	24000380 	.word	0x24000380
 8001694:	40005400 	.word	0x40005400
 8001698:	0020081f 	.word	0x0020081f

0800169c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_RTC_Init+0xb4>)
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <MX_RTC_Init+0xb8>)
 80016b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_RTC_Init+0xb4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_RTC_Init+0xb4>)
 80016c2:	2263      	movs	r2, #99	; 0x63
 80016c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_RTC_Init+0xb4>)
 80016c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_RTC_Init+0xb4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_RTC_Init+0xb4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_RTC_Init+0xb4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_RTC_Init+0xb4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_RTC_Init+0xb4>)
 80016e8:	f00c f8ac 	bl	800d844 <HAL_RTC_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016f2:	f001 fc1b 	bl	8002f2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <MX_RTC_Init+0xb4>)
 8001712:	f00c f919 	bl	800d948 <HAL_RTC_SetTime>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800171c:	f001 fc06 	bl	8002f2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001720:	2301      	movs	r3, #1
 8001722:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001724:	2301      	movs	r3, #1
 8001726:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001728:	2301      	movs	r3, #1
 800172a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800172c:	2300      	movs	r3, #0
 800172e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_RTC_Init+0xb4>)
 8001738:	f00c fa00 	bl	800db3c <HAL_RTC_SetDate>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001742:	f001 fbf3 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	240003d4 	.word	0x240003d4
 8001754:	58004000 	.word	0x58004000

08001758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <MX_SPI1_Init+0xa8>)
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <MX_SPI1_Init+0xac>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_SPI1_Init+0xa8>)
 800176c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001770:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001774:	220f      	movs	r2, #15
 8001776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_SPI1_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800178a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_SPI1_Init+0xa8>)
 800178e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_SPI1_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ec:	f00c fb4c 	bl	800de88 <HAL_SPI_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017f6:	f001 fb99 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	240003f8 	.word	0x240003f8
 8001804:	40013000 	.word	0x40013000

08001808 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800180e:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <MX_SPI2_Init+0xac>)
 8001810:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001814:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001818:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800181c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001820:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001824:	220f      	movs	r2, #15
 8001826:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001836:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800183a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800183e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001842:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001872:	2200      	movs	r2, #0
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800187e:	2200      	movs	r2, #0
 8001880:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001884:	2200      	movs	r2, #0
 8001886:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800189c:	f00c faf4 	bl	800de88 <HAL_SPI_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018a6:	f001 fb41 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	24000480 	.word	0x24000480
 80018b4:	40003800 	.word	0x40003800

080018b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b09a      	sub	sp, #104	; 0x68
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	222c      	movs	r2, #44	; 0x2c
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f015 f842 	bl	801697c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <MX_TIM1_Init+0x150>)
 80018fa:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <MX_TIM1_Init+0x154>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001900:	2231      	movs	r2, #49	; 0x31
 8001902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <MX_TIM1_Init+0x150>)
 800190c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001910:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <MX_TIM1_Init+0x150>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001924:	4838      	ldr	r0, [pc, #224]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001926:	f00c ff00 	bl	800e72a <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001930:	f001 fafc 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193e:	4619      	mov	r1, r3
 8001940:	4831      	ldr	r0, [pc, #196]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001942:	f00d fc7b 	bl	800f23c <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800194c:	f001 faee 	bl	8002f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001950:	482d      	ldr	r0, [pc, #180]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001952:	f00d f9f7 	bl	800ed44 <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800195c:	f001 fae6 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001970:	4619      	mov	r1, r3
 8001972:	4825      	ldr	r0, [pc, #148]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001974:	f00e f9b8 	bl	800fce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800197e:	f001 fad5 	bl	8002f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	; 0x60
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	4818      	ldr	r0, [pc, #96]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019a8:	f00d fb34 	bl	800f014 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019b2:	f001 fabb 	bl	8002f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019ec:	f00e fa0a 	bl	800fe04 <HAL_TIMEx_ConfigBreakDeadTime>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f6:	f001 fa99 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019fc:	f001 fe46 	bl	800368c <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3768      	adds	r7, #104	; 0x68
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	24000508 	.word	0x24000508
 8001a0c:	40010000 	.word	0x40010000

08001a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a4c:	2231      	movs	r2, #49	; 0x31
 8001a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a58:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6a:	4823      	ldr	r0, [pc, #140]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a6c:	f00c fe5d 	bl	800e72a <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a76:	f001 fa59 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a84:	4619      	mov	r1, r3
 8001a86:	481c      	ldr	r0, [pc, #112]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a88:	f00d fbd8 	bl	800f23c <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a92:	f001 fa4b 	bl	8002f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a96:	4818      	ldr	r0, [pc, #96]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a98:	f00d f954 	bl	800ed44 <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001aa2:	f001 fa43 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4810      	ldr	r0, [pc, #64]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001ab6:	f00e f917 	bl	800fce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ac0:	f001 fa34 	bl	8002f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac4:	2360      	movs	r3, #96	; 0x60
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001adc:	f00d fa9a 	bl	800f014 <HAL_TIM_PWM_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ae6:	f001 fa21 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001aec:	f001 fdce 	bl	800368c <HAL_TIM_MspPostInit>

}
 8001af0:	bf00      	nop
 8001af2:	3738      	adds	r7, #56	; 0x38
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000554 	.word	0x24000554

08001afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <MX_TIM3_Init+0x9c>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b22:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b30:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b44:	f00c fdf1 	bl	800e72a <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b4e:	f001 f9ed 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b60:	f00d fb6c 	bl	800f23c <HAL_TIM_ConfigClockSource>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b6a:	f001 f9df 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b7c:	f00e f8b4 	bl	800fce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b86:	f001 f9d1 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	240005a0 	.word	0x240005a0
 8001b98:	40000400 	.word	0x40000400

08001b9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <MX_TIM4_Init+0x98>)
 8001bbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bc2:	2263      	movs	r2, #99	; 0x63
 8001bc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bce:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001be2:	f00c fda2 	bl	800e72a <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bec:	f001 f99e 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bfe:	f00d fb1d 	bl	800f23c <HAL_TIM_ConfigClockSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c08:	f001 f990 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001c1a:	f00e f865 	bl	800fce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c24:	f001 f982 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	240005ec 	.word	0x240005ec
 8001c34:	40000800 	.word	0x40000800

08001c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <MX_USART1_UART_Init+0xcc>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c44:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c80:	481f      	ldr	r0, [pc, #124]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c82:	f00e f95b 	bl	800ff3c <HAL_UART_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c8c:	f001 f94e 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	481b      	ldr	r0, [pc, #108]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c94:	f010 fffb 	bl	8012c8e <HAL_UARTEx_SetTxFifoThreshold>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c9e:	f001 f945 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001ca6:	f011 f830 	bl	8012d0a <HAL_UARTEx_SetRxFifoThreshold>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb0:	f001 f93c 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cb4:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cb6:	f010 ffb1 	bl	8012c1c <HAL_UARTEx_DisableFifoMode>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc0:	f001 f934 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cca:	f011 f81e 	bl	8012d0a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cce:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cd0:	f010 ff69 	bl	8012ba6 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cd6:	f010 ff33 	bl	8012b40 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ce8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cf8:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24000638 	.word	0x24000638
 8001d04:	40011000 	.word	0x40011000

08001d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2105      	movs	r1, #5
 8001d30:	200b      	movs	r0, #11
 8001d32:	f003 fd87 	bl	8005844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d36:	200b      	movs	r0, #11
 8001d38:	f003 fd9e 	bl	8005878 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2105      	movs	r1, #5
 8001d40:	200c      	movs	r0, #12
 8001d42:	f003 fd7f 	bl	8005844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d46:	200c      	movs	r0, #12
 8001d48:	f003 fd96 	bl	8005878 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2105      	movs	r1, #5
 8001d50:	200d      	movs	r0, #13
 8001d52:	f003 fd77 	bl	8005844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d56:	200d      	movs	r0, #13
 8001d58:	f003 fd8e 	bl	8005878 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	2010      	movs	r0, #16
 8001d62:	f003 fd6f 	bl	8005844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d66:	2010      	movs	r0, #16
 8001d68:	f003 fd86 	bl	8005878 <HAL_NVIC_EnableIRQ>

}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58024400 	.word	0x58024400

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dac:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e0c:	4815      	ldr	r0, [pc, #84]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001e0e:	f007 f957 	bl	80090c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2164      	movs	r1, #100	; 0x64
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e18:	f007 f952 	bl	80090c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e1c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001e36:	f006 ff7b 	bl	8008d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e52:	f006 ff6d 	bl	8008d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58020800 	.word	0x58020800
 8001e68:	58020400 	.word	0x58020400

08001e6c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e76:	2300      	movs	r3, #0
 8001e78:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	f107 0208 	add.w	r2, r7, #8
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <poll_i2c_sensor+0x7c>)
 8001e8c:	f007 f9ce 	bl	800922c <HAL_I2C_Master_Transmit>
 8001e90:	4603      	mov	r3, r0
 8001e92:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e94:	7b7b      	ldrb	r3, [r7, #13]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e9a:	4814      	ldr	r0, [pc, #80]	; (8001eec <poll_i2c_sensor+0x80>)
 8001e9c:	f014 fec4 	bl	8016c28 <puts>
 8001ea0:	e01c      	b.n	8001edc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	f107 0208 	add.w	r2, r7, #8
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <poll_i2c_sensor+0x7c>)
 8001eb4:	f007 fad2 	bl	800945c <HAL_I2C_Master_Receive>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001ebc:	7b7b      	ldrb	r3, [r7, #13]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ec2:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <poll_i2c_sensor+0x84>)
 8001ec4:	f014 feb0 	bl	8016c28 <puts>
 8001ec8:	e008      	b.n	8001edc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001eca:	7a3b      	ldrb	r3, [r7, #8]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001ed0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ed4:	7a7a      	ldrb	r2, [r7, #9]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	10db      	asrs	r3, r3, #3
 8001eda:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	24000380 	.word	0x24000380
 8001eec:	080175d8 	.word	0x080175d8
 8001ef0:	080175e8 	.word	0x080175e8

08001ef4 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001efc:	f107 010c 	add.w	r1, r7, #12
 8001f00:	2301      	movs	r3, #1
 8001f02:	2201      	movs	r2, #1
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f06:	f00c f8e3 	bl	800e0d0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f0e:	7b7b      	ldrb	r3, [r7, #13]
 8001f10:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f20:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7bba      	ldrb	r2, [r7, #14]
 8001f26:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	701a      	strb	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	240003f8 	.word	0x240003f8

08001f3c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f44:	f107 010c 	add.w	r1, r7, #12
 8001f48:	2364      	movs	r3, #100	; 0x64
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f4e:	f00c f8bf 	bl	800e0d0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f68:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7bba      	ldrb	r2, [r7, #14]
 8001f6e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24000480 	.word	0x24000480

08001f84 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <receive_erpa_adc+0x20>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	89fa      	ldrh	r2, [r7, #14]
 8001f96:	801a      	strh	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	24000cc0 	.word	0x24000cc0

08001fa8 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fb0:	2390      	movs	r3, #144	; 0x90
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff5a 	bl	8001e6c <poll_i2c_sensor>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fbc:	2394      	movs	r3, #148	; 0x94
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff54 	bl	8001e6c <poll_i2c_sensor>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001fc8:	2392      	movs	r3, #146	; 0x92
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff4e 	bl	8001e6c <poll_i2c_sensor>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001fd4:	2396      	movs	r3, #150	; 0x96
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff48 	bl	8001e6c <poll_i2c_sensor>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	89fa      	ldrh	r2, [r7, #14]
 8001fe4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	89ba      	ldrh	r2, [r7, #12]
 8001fec:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	897a      	ldrh	r2, [r7, #10]
 8001ff4:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	893a      	ldrh	r2, [r7, #8]
 8001ffc:	801a      	strh	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <receive_hk_adc1+0xa0>)
 8002012:	8a9b      	ldrh	r3, [r3, #20]
 8002014:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <receive_hk_adc1+0xa0>)
 8002018:	8a1b      	ldrh	r3, [r3, #16]
 800201a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <receive_hk_adc1+0xa0>)
 800201e:	899b      	ldrh	r3, [r3, #12]
 8002020:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <receive_hk_adc1+0xa0>)
 8002024:	8a5b      	ldrh	r3, [r3, #18]
 8002026:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <receive_hk_adc1+0xa0>)
 800202a:	889b      	ldrh	r3, [r3, #4]
 800202c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <receive_hk_adc1+0xa0>)
 8002030:	88db      	ldrh	r3, [r3, #6]
 8002032:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <receive_hk_adc1+0xa0>)
 8002036:	89db      	ldrh	r3, [r3, #14]
 8002038:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <receive_hk_adc1+0xa0>)
 800203c:	891b      	ldrh	r3, [r3, #8]
 800203e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <receive_hk_adc1+0xa0>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <receive_hk_adc1+0xa0>)
 8002048:	895b      	ldrh	r3, [r3, #10]
 800204a:	81bb      	strh	r3, [r7, #12]


	buffer[0] = PA1;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8bfa      	ldrh	r2, [r7, #30]
 8002050:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3302      	adds	r3, #2
 8002056:	8bba      	ldrh	r2, [r7, #28]
 8002058:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	8b7a      	ldrh	r2, [r7, #26]
 8002060:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3306      	adds	r3, #6
 8002066:	8b3a      	ldrh	r2, [r7, #24]
 8002068:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3308      	adds	r3, #8
 800206e:	8afa      	ldrh	r2, [r7, #22]
 8002070:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	330a      	adds	r3, #10
 8002076:	8aba      	ldrh	r2, [r7, #20]
 8002078:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	330c      	adds	r3, #12
 800207e:	8a7a      	ldrh	r2, [r7, #18]
 8002080:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	330e      	adds	r3, #14
 8002086:	8a3a      	ldrh	r2, [r7, #16]
 8002088:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3310      	adds	r3, #16
 800208e:	89fa      	ldrh	r2, [r7, #14]
 8002090:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3312      	adds	r3, #18
 8002096:	89ba      	ldrh	r2, [r7, #12]
 8002098:	801a      	strh	r2, [r3, #0]

}
 800209a:	bf00      	nop
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	24000cc0 	.word	0x24000cc0

080020ac <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020bc:	885b      	ldrh	r3, [r3, #2]
 80020be:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020c8:	88db      	ldrh	r3, [r3, #6]
 80020ca:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	89fa      	ldrh	r2, [r7, #14]
 80020d0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3302      	adds	r3, #2
 80020d6:	89ba      	ldrh	r2, [r7, #12]
 80020d8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	897a      	ldrh	r2, [r7, #10]
 80020e0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3306      	adds	r3, #6
 80020e6:	893a      	ldrh	r2, [r7, #8]
 80020e8:	801a      	strh	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	24000ce0 	.word	0x24000ce0

080020fc <enter_flight_mode>:

// *********************************************************************************************************** HELPER FUNCTIONS

void enter_flight_mode() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af02      	add	r7, sp, #8
	xTaskResumeFromISR(GPIO_on_taskHandle);										// Auto Init
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <enter_flight_mode+0x6c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f012 fdee 	bl	8014ce8 <xTaskResumeFromISR>
	HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);				// Enable n200v
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <enter_flight_mode+0x70>)
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	2201      	movs	r2, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f006 ffd3 	bl	80090c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);				// Enable n800v
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <enter_flight_mode+0x74>)
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	2201      	movs	r2, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f006 ffcd 	bl	80090c0 <HAL_GPIO_WritePin>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);		// Enable auto sweep (doesn't start until ERPA timer is started)
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2320      	movs	r3, #32
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <enter_flight_mode+0x78>)
 800212e:	2100      	movs	r1, #0
 8002130:	4811      	ldr	r0, [pc, #68]	; (8002178 <enter_flight_mode+0x7c>)
 8002132:	f003 fc29 	bl	8005988 <HAL_DAC_Start_DMA>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);									// ERPA packet on
 8002136:	210c      	movs	r1, #12
 8002138:	4810      	ldr	r0, [pc, #64]	; (800217c <enter_flight_mode+0x80>)
 800213a:	f00c fbc5 	bl	800e8c8 <HAL_TIM_OC_Start_IT>
	ERPA_ON = 1;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <enter_flight_mode+0x84>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);									// PMT packet on
 8002144:	2100      	movs	r1, #0
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <enter_flight_mode+0x88>)
 8002148:	f00c fbbe 	bl	800e8c8 <HAL_TIM_OC_Start_IT>
	PMT_ON = 1;
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <enter_flight_mode+0x8c>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);									// HK packet on
 8002152:	2100      	movs	r1, #0
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <enter_flight_mode+0x90>)
 8002156:	f00c fbb7 	bl	800e8c8 <HAL_TIM_OC_Start_IT>
	HK_ON = 1;
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <enter_flight_mode+0x94>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000750 	.word	0x24000750
 800216c:	58020800 	.word	0x58020800
 8002170:	58020400 	.word	0x58020400
 8002174:	24000010 	.word	0x24000010
 8002178:	240002f4 	.word	0x240002f4
 800217c:	24000554 	.word	0x24000554
 8002180:	24000c5b 	.word	0x24000c5b
 8002184:	24000508 	.word	0x24000508
 8002188:	24000c5a 	.word	0x24000c5a
 800218c:	240005a0 	.word	0x240005a0
 8002190:	24000c5c 	.word	0x24000c5c

08002194 <get_current_step>:


uint8_t get_current_step(){
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <get_current_step+0xc0>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d04a      	beq.n	8002240 <get_current_step+0xac>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	da48      	bge.n	8002244 <get_current_step+0xb0>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d03f      	beq.n	800223c <get_current_step+0xa8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021c2:	4293      	cmp	r3, r2
 80021c4:	dc3e      	bgt.n	8002244 <get_current_step+0xb0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d033      	beq.n	8002238 <get_current_step+0xa4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021d6:	da35      	bge.n	8002244 <get_current_step+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021de:	4293      	cmp	r3, r2
 80021e0:	d028      	beq.n	8002234 <get_current_step+0xa0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021e8:	4293      	cmp	r3, r2
 80021ea:	dc2b      	bgt.n	8002244 <get_current_step+0xb0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f240 7245 	movw	r2, #1861	; 0x745
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01c      	beq.n	8002230 <get_current_step+0x9c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f240 7245 	movw	r2, #1861	; 0x745
 80021fc:	4293      	cmp	r3, r2
 80021fe:	dc21      	bgt.n	8002244 <get_current_step+0xb0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002206:	4293      	cmp	r3, r2
 8002208:	d010      	beq.n	800222c <get_current_step+0x98>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002210:	4293      	cmp	r3, r2
 8002212:	dc17      	bgt.n	8002244 <get_current_step+0xb0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <get_current_step+0x90>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002220:	d002      	beq.n	8002228 <get_current_step+0x94>
 8002222:	e00f      	b.n	8002244 <get_current_step+0xb0>
	case 0:
		return 0;
 8002224:	2300      	movs	r3, #0
 8002226:	e00e      	b.n	8002246 <get_current_step+0xb2>
	case 620:
		return 1;
 8002228:	2301      	movs	r3, #1
 800222a:	e00c      	b.n	8002246 <get_current_step+0xb2>
	case 1241:
		return 2;
 800222c:	2302      	movs	r3, #2
 800222e:	e00a      	b.n	8002246 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002230:	2303      	movs	r3, #3
 8002232:	e008      	b.n	8002246 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002234:	2304      	movs	r3, #4
 8002236:	e006      	b.n	8002246 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002238:	2305      	movs	r3, #5
 800223a:	e004      	b.n	8002246 <get_current_step+0xb2>
	case 3723:
		return 6;
 800223c:	2306      	movs	r3, #6
 800223e:	e002      	b.n	8002246 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002240:	2307      	movs	r3, #7
 8002242:	e000      	b.n	8002246 <get_current_step+0xb2>
	default:
		return -1;
 8002244:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40007400 	.word	0x40007400

08002258 <enter_stop>:

void enter_stop(){
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 800225c:	f000 f830 	bl	80022c0 <send_ACK>

	vTaskSuspendAll();
 8002260:	f012 fe1a 	bl	8014e98 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f007 fd50 	bl	8009d0c <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 800226c:	f012 fe22 	bl	8014eb4 <xTaskResumeAll>
	SystemClock_Config();
 8002270:	f7fe ff3c 	bl	80010ec <SystemClock_Config>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <sync>:
	if (status != HAL_OK) {
		Error_Handler();
	}
}

void sync() {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	// 1. Send acknowledgement (0xFF) (This tells OBC/GUI that we have woken up)
	// 2. Wait to receive RTC generated timestamp from OBC/GUI
	// 3. Calibrate our RTC from received timestamp
	// 4. Send acknowledgement (0xFF) (This tells OBC/GUI that we have calibrated our RTC, and are now in run mode)
	send_ACK();
 800227e:	f000 f81f 	bl	80022c0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <sync+0x40>)
 8002284:	f00e f8cc 	bl	8010420 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002288:	2364      	movs	r3, #100	; 0x64
 800228a:	2209      	movs	r2, #9
 800228c:	490b      	ldr	r1, [pc, #44]	; (80022bc <sync+0x44>)
 800228e:	480a      	ldr	r0, [pc, #40]	; (80022b8 <sync+0x40>)
 8002290:	f00d ff32 	bl	80100f8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <sync+0x44>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2bff      	cmp	r3, #255	; 0xff
 800229e:	d1f3      	bne.n	8002288 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER);
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80022a0:	2201      	movs	r2, #1
 80022a2:	4906      	ldr	r1, [pc, #24]	; (80022bc <sync+0x44>)
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <sync+0x40>)
 80022a6:	f00d ffef 	bl	8010288 <HAL_UART_Receive_IT>

	send_ACK();
 80022aa:	f000 f809 	bl	80022c0 <send_ACK>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	24000638 	.word	0x24000638
 80022bc:	24000c64 	.word	0x24000c64

080022c0 <send_ACK>:


void send_ACK() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <send_ACK+0x1c>)
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80022ca:	2364      	movs	r3, #100	; 0x64
 80022cc:	2201      	movs	r2, #1
 80022ce:	4903      	ldr	r1, [pc, #12]	; (80022dc <send_ACK+0x1c>)
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <send_ACK+0x20>)
 80022d2:	f00d fe83 	bl	800ffdc <HAL_UART_Transmit>
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	24000ce8 	.word	0x24000ce8
 80022e0:	24000638 	.word	0x24000638

080022e4 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_UART_TxCpltCallback+0x1c>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	24000000 	.word	0x24000000

08002304 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	4618      	mov	r0, r3
 8002316:	f014 fb13 	bl	8016940 <malloc>
 800231a:	4603      	mov	r3, r0
 800231c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	4618      	mov	r0, r3
 8002326:	f014 fb1b 	bl	8016960 <memcpy>
	packet.size = size;
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	461a      	mov	r2, r3
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800233a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800234c:	2100      	movs	r1, #0
 800234e:	481d      	ldr	r0, [pc, #116]	; (80023c4 <system_setup+0x7c>)
 8002350:	f00c faba 	bl	800e8c8 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002358:	f44f 729c 	mov.w	r2, #312	; 0x138
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800235e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002366:	4818      	ldr	r0, [pc, #96]	; (80023c8 <system_setup+0x80>)
 8002368:	f003 f872 	bl	8005450 <HAL_ADCEx_Calibration_Start>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002372:	f000 fddb 	bl	8002f2c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002376:	220b      	movs	r2, #11
 8002378:	4914      	ldr	r1, [pc, #80]	; (80023cc <system_setup+0x84>)
 800237a:	4813      	ldr	r0, [pc, #76]	; (80023c8 <system_setup+0x80>)
 800237c:	f002 f946 	bl	800460c <HAL_ADC_Start_DMA>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002386:	f000 fdd1 	bl	8002f2c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800238a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800238e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <system_setup+0x88>)
 8002394:	f003 f85c 	bl	8005450 <HAL_ADCEx_Calibration_Start>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800239e:	f000 fdc5 	bl	8002f2c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80023a2:	2204      	movs	r2, #4
 80023a4:	490b      	ldr	r1, [pc, #44]	; (80023d4 <system_setup+0x8c>)
 80023a6:	480a      	ldr	r0, [pc, #40]	; (80023d0 <system_setup+0x88>)
 80023a8:	f002 f930 	bl	800460c <HAL_ADC_Start_DMA>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80023b2:	f000 fdbb 	bl	8002f2c <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80023b6:	2201      	movs	r2, #1
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <system_setup+0x90>)
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <system_setup+0x94>)
 80023bc:	f00d ff64 	bl	8010288 <HAL_UART_Receive_IT>
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	240005ec 	.word	0x240005ec
 80023c8:	2400013c 	.word	0x2400013c
 80023cc:	24000cc0 	.word	0x24000cc0
 80023d0:	240001a0 	.word	0x240001a0
 80023d4:	24000ce0 	.word	0x24000ce0
 80023d8:	24000c64 	.word	0x24000c64
 80023dc:	24000638 	.word	0x24000638

080023e0 <get_uptime>:

void get_uptime(uint8_t *buffer) {
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <get_uptime+0x88>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <get_uptime+0x8c>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <get_uptime+0x88>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d005      	beq.n	800240e <get_uptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = uptime_millis;
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <get_uptime+0x88>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <get_uptime+0x8c>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002414:	fb03 f202 	mul.w	r2, r3, r2
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <get_uptime+0x8c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	3301      	adds	r3, #1
 800241e:	4914      	ldr	r1, [pc, #80]	; (8002470 <get_uptime+0x90>)
 8002420:	fba1 1303 	umull	r1, r3, r1, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	fbb1 f3f3 	udiv	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	0e1b      	lsrs	r3, r3, #24
 8002434:	b2da      	uxtb	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0c1a      	lsrs	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3301      	adds	r3, #1
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0a1a      	lsrs	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3302      	adds	r3, #2
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3303      	adds	r3, #3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	24000c44 	.word	0x24000c44
 800246c:	e000e010 	.word	0xe000e010
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	4821      	ldr	r0, [pc, #132]	; (800250c <getTimestamp+0x98>)
 8002486:	f00b fafd 	bl	800da84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	2200      	movs	r2, #0
 8002490:	4619      	mov	r1, r3
 8002492:	481e      	ldr	r0, [pc, #120]	; (800250c <getTimestamp+0x98>)
 8002494:	f00b fbda 	bl	800dc4c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2264      	movs	r2, #100	; 0x64
 800249c:	fb03 f202 	mul.w	r2, r3, r2
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <getTimestamp+0x9c>)
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3301      	adds	r3, #1
 80024b0:	7b7a      	ldrb	r2, [r7, #13]
 80024b2:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3302      	adds	r3, #2
 80024b8:	7bba      	ldrb	r2, [r7, #14]
 80024ba:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3303      	adds	r3, #3
 80024c0:	7c3a      	ldrb	r2, [r7, #16]
 80024c2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	7c7a      	ldrb	r2, [r7, #17]
 80024ca:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3305      	adds	r3, #5
 80024d0:	7cba      	ldrb	r2, [r7, #18]
 80024d2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	0e1a      	lsrs	r2, r3, #24
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3306      	adds	r3, #6
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	0c1a      	lsrs	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3307      	adds	r3, #7
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	0a1a      	lsrs	r2, r3, #8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3308      	adds	r3, #8
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3309      	adds	r3, #9
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	240003d4 	.word	0x240003d4
 8002510:	000f4240 	.word	0x000f4240

08002514 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800251a:	bf00      	nop
 800251c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002520:	4833      	ldr	r0, [pc, #204]	; (80025f0 <sample_pmt+0xdc>)
 8002522:	f006 fdb5 	bl	8009090 <HAL_GPIO_ReadPin>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f7      	bne.n	800251c <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800252c:	200a      	movs	r0, #10
 800252e:	f014 fa07 	bl	8016940 <malloc>
 8002532:	4603      	mov	r3, r0
 8002534:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002536:	2002      	movs	r0, #2
 8002538:	f014 fa02 	bl	8016940 <malloc>
 800253c:	4603      	mov	r3, r0
 800253e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002540:	2004      	movs	r0, #4
 8002542:	f014 f9fd 	bl	8016940 <malloc>
 8002546:	4603      	mov	r3, r0
 8002548:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ff48 	bl	80023e0 <get_uptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002550:	6938      	ldr	r0, [r7, #16]
 8002552:	f7ff fccf 	bl	8001ef4 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	22bb      	movs	r2, #187	; 0xbb
 800255a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	22bb      	movs	r2, #187	; 0xbb
 8002562:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <sample_pmt+0xe0>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	b29a      	uxth	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3302      	adds	r3, #2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <sample_pmt+0xe0>)
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3303      	adds	r3, #3
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3304      	adds	r3, #4
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3305      	adds	r3, #5
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	7852      	ldrb	r2, [r2, #1]
 8002592:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3306      	adds	r3, #6
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3307      	adds	r3, #7
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	7852      	ldrb	r2, [r2, #1]
 80025a6:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3308      	adds	r3, #8
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	7892      	ldrb	r2, [r2, #2]
 80025b0:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3309      	adds	r3, #9
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	78d2      	ldrb	r2, [r2, #3]
 80025ba:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	220a      	movs	r2, #10
 80025c0:	6979      	ldr	r1, [r7, #20]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fe9e 	bl	8002304 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <sample_pmt+0xe4>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	1d39      	adds	r1, r7, #4
 80025ce:	2300      	movs	r3, #0
 80025d0:	2200      	movs	r2, #0
 80025d2:	f010 ff53 	bl	801347c <osMessageQueuePut>
	free(buffer);
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f014 f9ba 	bl	8016950 <free>
	free(pmt_spi);
 80025dc:	6938      	ldr	r0, [r7, #16]
 80025de:	f014 f9b7 	bl	8016950 <free>
	free(uptime);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f014 f9b4 	bl	8016950 <free>
}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58020000 	.word	0x58020000
 80025f4:	24000c54 	.word	0x24000c54
 80025f8:	24000c48 	.word	0x24000c48

080025fc <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002602:	bf00      	nop
 8002604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002608:	4845      	ldr	r0, [pc, #276]	; (8002720 <sample_erpa+0x124>)
 800260a:	f006 fd41 	bl	8009090 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f7      	bne.n	8002604 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002614:	200d      	movs	r0, #13
 8002616:	f014 f993 	bl	8016940 <malloc>
 800261a:	4603      	mov	r3, r0
 800261c:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800261e:	2002      	movs	r0, #2
 8002620:	f014 f98e 	bl	8016940 <malloc>
 8002624:	4603      	mov	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002628:	2002      	movs	r0, #2
 800262a:	f014 f989 	bl	8016940 <malloc>
 800262e:	4603      	mov	r3, r0
 8002630:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002632:	2004      	movs	r0, #4
 8002634:	f014 f984 	bl	8016940 <malloc>
 8002638:	4603      	mov	r3, r0
 800263a:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 800263c:	23ff      	movs	r3, #255	; 0xff
 800263e:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002640:	6938      	ldr	r0, [r7, #16]
 8002642:	f7ff fecd 	bl	80023e0 <get_uptime>
	sweep_step = get_current_step();
 8002646:	f7ff fda5 	bl	8002194 <get_current_step>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 800264e:	69b8      	ldr	r0, [r7, #24]
 8002650:	f7ff fc74 	bl	8001f3c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002654:	6978      	ldr	r0, [r7, #20]
 8002656:	f7ff fc95 	bl	8001f84 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	22aa      	movs	r2, #170	; 0xaa
 800265e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3301      	adds	r3, #1
 8002664:	22aa      	movs	r2, #170	; 0xaa
 8002666:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002668:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <sample_erpa+0x128>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	b29a      	uxth	r2, r3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3302      	adds	r3, #2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <sample_erpa+0x128>)
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3303      	adds	r3, #3
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
	buffer[4] = sweep_step;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3304      	adds	r3, #4
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	701a      	strb	r2, [r3, #0]
	buffer[5] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	b29a      	uxth	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3305      	adds	r3, #5
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
	buffer[6] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3306      	adds	r3, #6
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
	buffer[7] = erpa_spi[0];					// ERPA eADC MSB
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3307      	adds	r3, #7
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	7812      	ldrb	r2, [r2, #0]
 80026b0:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[1];					// ERPA eADC LSB
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3308      	adds	r3, #8
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	7852      	ldrb	r2, [r2, #1]
 80026ba:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[0];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3309      	adds	r3, #9
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[1];
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	330a      	adds	r3, #10
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	7852      	ldrb	r2, [r2, #1]
 80026ce:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[2];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	330b      	adds	r3, #11
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	7892      	ldrb	r2, [r2, #2]
 80026d8:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[3];
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	330c      	adds	r3, #12
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	78d2      	ldrb	r2, [r2, #3]
 80026e2:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	220d      	movs	r2, #13
 80026e8:	69f9      	ldr	r1, [r7, #28]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fe0a 	bl	8002304 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <sample_erpa+0x12c>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	1d39      	adds	r1, r7, #4
 80026f6:	2300      	movs	r3, #0
 80026f8:	2200      	movs	r2, #0
 80026fa:	f010 febf 	bl	801347c <osMessageQueuePut>
	free(buffer);
 80026fe:	69f8      	ldr	r0, [r7, #28]
 8002700:	f014 f926 	bl	8016950 <free>
	free(erpa_spi);
 8002704:	69b8      	ldr	r0, [r7, #24]
 8002706:	f014 f923 	bl	8016950 <free>
	free(erpa_adc);
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f014 f920 	bl	8016950 <free>
	free(uptime);
 8002710:	6938      	ldr	r0, [r7, #16]
 8002712:	f014 f91d 	bl	8016950 <free>
}
 8002716:	bf00      	nop
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	58020400 	.word	0x58020400
 8002724:	24000c56 	.word	0x24000c56
 8002728:	24000c48 	.word	0x24000c48

0800272c <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002732:	2032      	movs	r0, #50	; 0x32
 8002734:	f014 f904 	bl	8016940 <malloc>
 8002738:	4603      	mov	r3, r0
 800273a:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 800273c:	2008      	movs	r0, #8
 800273e:	f014 f8ff 	bl	8016940 <malloc>
 8002742:	4603      	mov	r3, r0
 8002744:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002746:	200a      	movs	r0, #10
 8002748:	f014 f8fa 	bl	8016940 <malloc>
 800274c:	4603      	mov	r3, r0
 800274e:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fe8f 	bl	8002474 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <sample_hk+0x78>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275e:	db25      	blt.n	80027ac <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002760:	6938      	ldr	r0, [r7, #16]
 8002762:	f7ff fc21 	bl	8001fa8 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <sample_hk+0x7c>)
 8002770:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	3302      	adds	r3, #2
 8002776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <sample_hk+0x7c>)
 800277e:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	3304      	adds	r3, #4
 8002784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <sample_hk+0x7c>)
 800278c:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3306      	adds	r3, #6
 8002792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <sample_hk+0x7c>)
 800279a:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <sample_hk+0x78>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e01f      	b.n	80027e4 <sample_hk+0xb8>
 80027a4:	24000004 	.word	0x24000004
 80027a8:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 80027ac:	4b9f      	ldr	r3, [pc, #636]	; (8002a2c <sample_hk+0x300>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a9e      	ldr	r2, [pc, #632]	; (8002a2c <sample_hk+0x300>)
 80027b4:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80027b6:	4b9e      	ldr	r3, [pc, #632]	; (8002a30 <sample_hk+0x304>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80027c0:	4b9b      	ldr	r3, [pc, #620]	; (8002a30 <sample_hk+0x304>)
 80027c2:	885a      	ldrh	r2, [r3, #2]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3302      	adds	r3, #2
 80027c8:	b212      	sxth	r2, r2
 80027ca:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80027cc:	4b98      	ldr	r3, [pc, #608]	; (8002a30 <sample_hk+0x304>)
 80027ce:	889a      	ldrh	r2, [r3, #4]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3304      	adds	r3, #4
 80027d4:	b212      	sxth	r2, r2
 80027d6:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80027d8:	4b95      	ldr	r3, [pc, #596]	; (8002a30 <sample_hk+0x304>)
 80027da:	88da      	ldrh	r2, [r3, #6]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	3306      	adds	r3, #6
 80027e0:	b212      	sxth	r2, r2
 80027e2:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	22cc      	movs	r2, #204	; 0xcc
 80027e8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	22cc      	movs	r2, #204	; 0xcc
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80027f2:	4b90      	ldr	r3, [pc, #576]	; (8002a34 <sample_hk+0x308>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3302      	adds	r3, #2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002802:	4b8c      	ldr	r3, [pc, #560]	; (8002a34 <sample_hk+0x308>)
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3303      	adds	r3, #3
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 800280e:	4b8a      	ldr	r3, [pc, #552]	; (8002a38 <sample_hk+0x30c>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b29a      	uxth	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3304      	adds	r3, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800281e:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <sample_hk+0x30c>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3305      	adds	r3, #5
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800282a:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <sample_hk+0x310>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3306      	adds	r3, #6
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800283a:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <sample_hk+0x310>)
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3307      	adds	r3, #7
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284c:	121a      	asrs	r2, r3, #8
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3308      	adds	r3, #8
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f9b3 2000 	ldrsh.w	r2, [r3]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3309      	adds	r3, #9
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	3302      	adds	r3, #2
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	121a      	asrs	r2, r3, #8
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	330a      	adds	r3, #10
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	3302      	adds	r3, #2
 800287a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	330b      	adds	r3, #11
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	3304      	adds	r3, #4
 800288a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288e:	121a      	asrs	r2, r3, #8
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	330c      	adds	r3, #12
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	3304      	adds	r3, #4
 800289c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	330d      	adds	r3, #13
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	3306      	adds	r3, #6
 80028ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b0:	121a      	asrs	r2, r3, #8
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	330e      	adds	r3, #14
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	3306      	adds	r3, #6
 80028be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	330f      	adds	r3, #15
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <sample_hk+0x314>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3310      	adds	r3, #16
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <sample_hk+0x314>)
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3311      	adds	r3, #17
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <sample_hk+0x318>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3312      	adds	r3, #18
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <sample_hk+0x318>)
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3313      	adds	r3, #19
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <sample_hk+0x31c>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29a      	uxth	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3314      	adds	r3, #20
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002912:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <sample_hk+0x31c>)
 8002914:	881a      	ldrh	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3315      	adds	r3, #21
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 800291e:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <sample_hk+0x320>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3316      	adds	r3, #22
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <sample_hk+0x320>)
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3317      	adds	r3, #23
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 800293a:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <sample_hk+0x324>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	b29a      	uxth	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3318      	adds	r3, #24
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <sample_hk+0x324>)
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3319      	adds	r3, #25
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <sample_hk+0x328>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b29a      	uxth	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	331a      	adds	r3, #26
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <sample_hk+0x328>)
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	331b      	adds	r3, #27
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <sample_hk+0x32c>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	331c      	adds	r3, #28
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002982:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <sample_hk+0x32c>)
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	331d      	adds	r3, #29
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 800298e:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <sample_hk+0x330>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	331e      	adds	r3, #30
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <sample_hk+0x330>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	331f      	adds	r3, #31
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <sample_hk+0x334>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3320      	adds	r3, #32
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <sample_hk+0x334>)
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3321      	adds	r3, #33	; 0x21
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <sample_hk+0x338>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3322      	adds	r3, #34	; 0x22
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <sample_hk+0x338>)
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3323      	adds	r3, #35	; 0x23
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <sample_hk+0x33c>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3324      	adds	r3, #36	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <sample_hk+0x33c>)
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3325      	adds	r3, #37	; 0x25
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <sample_hk+0x340>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3326      	adds	r3, #38	; 0x26
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <sample_hk+0x340>)
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3327      	adds	r3, #39	; 0x27
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

	buffer[40] = timestamp[0];
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3328      	adds	r3, #40	; 0x28
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3329      	adds	r3, #41	; 0x29
 8002a28:	e022      	b.n	8002a70 <sample_hk+0x344>
 8002a2a:	bf00      	nop
 8002a2c:	24000004 	.word	0x24000004
 8002a30:	24000cec 	.word	0x24000cec
 8002a34:	24000c58 	.word	0x24000c58
 8002a38:	24000c26 	.word	0x24000c26
 8002a3c:	24000c28 	.word	0x24000c28
 8002a40:	24000c2a 	.word	0x24000c2a
 8002a44:	24000c2c 	.word	0x24000c2c
 8002a48:	24000c2e 	.word	0x24000c2e
 8002a4c:	24000c30 	.word	0x24000c30
 8002a50:	24000c32 	.word	0x24000c32
 8002a54:	24000c34 	.word	0x24000c34
 8002a58:	24000c36 	.word	0x24000c36
 8002a5c:	24000c38 	.word	0x24000c38
 8002a60:	24000c3a 	.word	0x24000c3a
 8002a64:	24000c3c 	.word	0x24000c3c
 8002a68:	24000c3e 	.word	0x24000c3e
 8002a6c:	24000c40 	.word	0x24000c40
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	7852      	ldrb	r2, [r2, #1]
 8002a74:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	332a      	adds	r3, #42	; 0x2a
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	7892      	ldrb	r2, [r2, #2]
 8002a7e:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	332b      	adds	r3, #43	; 0x2b
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	78d2      	ldrb	r2, [r2, #3]
 8002a88:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	332c      	adds	r3, #44	; 0x2c
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	7912      	ldrb	r2, [r2, #4]
 8002a92:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	332d      	adds	r3, #45	; 0x2d
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	7952      	ldrb	r2, [r2, #5]
 8002a9c:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	332e      	adds	r3, #46	; 0x2e
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	7992      	ldrb	r2, [r2, #6]
 8002aa6:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	332f      	adds	r3, #47	; 0x2f
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	79d2      	ldrb	r2, [r2, #7]
 8002ab0:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3330      	adds	r3, #48	; 0x30
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	7a12      	ldrb	r2, [r2, #8]
 8002aba:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3331      	adds	r3, #49	; 0x31
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	7a52      	ldrb	r2, [r2, #9]
 8002ac4:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	2232      	movs	r2, #50	; 0x32
 8002aca:	6979      	ldr	r1, [r7, #20]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fc19 	bl	8002304 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <sample_hk+0x3d0>)
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	1d39      	adds	r1, r7, #4
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2200      	movs	r2, #0
 8002adc:	f010 fcce 	bl	801347c <osMessageQueuePut>

	free(buffer);
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f013 ff35 	bl	8016950 <free>
	free(hk_i2c);
 8002ae6:	6938      	ldr	r0, [r7, #16]
 8002ae8:	f013 ff32 	bl	8016950 <free>
	free(timestamp);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f013 ff2f 	bl	8016950 <free>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	24000c48 	.word	0x24000c48

08002b00 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <PMT_init+0x38>)
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b10:	2200      	movs	r2, #0
 8002b12:	2101      	movs	r1, #1
 8002b14:	f010 fbd9 	bl	80132ca <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <PMT_init+0x3c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <PMT_init+0x30>
			sample_pmt();
 8002b20:	f7ff fcf8 	bl	8002514 <sample_pmt>
			pmt_seq++;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <PMT_init+0x40>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <PMT_init+0x40>)
 8002b2e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002b30:	f010 fa98 	bl	8013064 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b34:	e7e8      	b.n	8002b08 <PMT_init+0x8>
 8002b36:	bf00      	nop
 8002b38:	24000c60 	.word	0x24000c60
 8002b3c:	24000c5a 	.word	0x24000c5a
 8002b40:	24000c54 	.word	0x24000c54

08002b44 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <ERPA_init+0x38>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b54:	2200      	movs	r2, #0
 8002b56:	2102      	movs	r1, #2
 8002b58:	f010 fbb7 	bl	80132ca <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <ERPA_init+0x3c>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <ERPA_init+0x30>
			sample_erpa();
 8002b64:	f7ff fd4a 	bl	80025fc <sample_erpa>
			erpa_seq++;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <ERPA_init+0x40>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <ERPA_init+0x40>)
 8002b72:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002b74:	f010 fa76 	bl	8013064 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b78:	e7e8      	b.n	8002b4c <ERPA_init+0x8>
 8002b7a:	bf00      	nop
 8002b7c:	24000c60 	.word	0x24000c60
 8002b80:	24000c5b 	.word	0x24000c5b
 8002b84:	24000c56 	.word	0x24000c56

08002b88 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HK_init+0x38>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	f010 fb95 	bl	80132ca <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HK_init+0x3c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HK_init+0x30>
			sample_hk();
 8002ba8:	f7ff fdc0 	bl	800272c <sample_hk>
			hk_seq++;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HK_init+0x40>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <HK_init+0x40>)
 8002bb6:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002bb8:	f010 fa54 	bl	8013064 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002bbc:	e7e8      	b.n	8002b90 <HK_init+0x8>
 8002bbe:	bf00      	nop
 8002bc0:	24000c60 	.word	0x24000c60
 8002bc4:	24000c5c 	.word	0x24000c5c
 8002bc8:	24000c58 	.word	0x24000c58

08002bcc <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <GPIO_on_init+0x9c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f010 fa63 	bl	80130a4 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <GPIO_on_init+0xa0>)
 8002be0:	2104      	movs	r1, #4
 8002be2:	2201      	movs	r2, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f006 fa6b 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bea:	2064      	movs	r0, #100	; 0x64
 8002bec:	f010 fa7b 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <GPIO_on_init+0xa0>)
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 fa62 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	f010 fa72 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <GPIO_on_init+0xa4>)
 8002c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f006 fa58 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c10:	2064      	movs	r0, #100	; 0x64
 8002c12:	f010 fa68 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <GPIO_on_init+0xa4>)
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f006 fa4f 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c22:	2064      	movs	r0, #100	; 0x64
 8002c24:	f010 fa5f 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <GPIO_on_init+0xa4>)
 8002c2a:	2140      	movs	r1, #64	; 0x40
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f006 fa46 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c34:	2064      	movs	r0, #100	; 0x64
 8002c36:	f010 fa56 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <GPIO_on_init+0xa4>)
 8002c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c40:	2201      	movs	r2, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f006 fa3c 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c48:	2064      	movs	r0, #100	; 0x64
 8002c4a:	f010 fa4c 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <GPIO_on_init+0xa4>)
 8002c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c54:	2201      	movs	r2, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f006 fa32 	bl	80090c0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <GPIO_on_init+0x9c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f010 fa1f 	bl	80130a4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002c66:	e7ba      	b.n	8002bde <GPIO_on_init+0x12>
 8002c68:	24000750 	.word	0x24000750
 8002c6c:	58020400 	.word	0x58020400
 8002c70:	58020800 	.word	0x58020800

08002c74 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <GPIO_off_init+0x9c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f010 fa0f 	bl	80130a4 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <GPIO_off_init+0xa0>)
 8002c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f006 fa16 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c94:	2064      	movs	r0, #100	; 0x64
 8002c96:	f010 fa26 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <GPIO_off_init+0xa0>)
 8002c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f006 fa0c 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ca8:	2064      	movs	r0, #100	; 0x64
 8002caa:	f010 fa1c 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002cae:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <GPIO_off_init+0xa0>)
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f006 fa03 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cba:	2064      	movs	r0, #100	; 0x64
 8002cbc:	f010 fa13 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <GPIO_off_init+0xa0>)
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f006 f9fa 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ccc:	2064      	movs	r0, #100	; 0x64
 8002cce:	f010 fa0a 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <GPIO_off_init+0xa0>)
 8002cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f006 f9f0 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	f010 fa00 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <GPIO_off_init+0xa4>)
 8002ce8:	2120      	movs	r1, #32
 8002cea:	2200      	movs	r2, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f006 f9e7 	bl	80090c0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cf2:	2064      	movs	r0, #100	; 0x64
 8002cf4:	f010 f9f7 	bl	80130e6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <GPIO_off_init+0xa4>)
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f006 f9de 	bl	80090c0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <GPIO_off_init+0x9c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f010 f9cb 	bl	80130a4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002d0e:	e7ba      	b.n	8002c86 <GPIO_off_init+0x12>
 8002d10:	240009b0 	.word	0x240009b0
 8002d14:	58020800 	.word	0x58020800
 8002d18:	58020400 	.word	0x58020400

08002d1c <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <UART_TX_init+0xa4>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d34:	2200      	movs	r2, #0
 8002d36:	4923      	ldr	r1, [pc, #140]	; (8002dc4 <UART_TX_init+0xa8>)
 8002d38:	f010 fc00 	bl	801353c <osMessageQueueGet>
 8002d3c:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d121      	bne.n	8002d88 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <UART_TX_init+0xa8>)
 8002d46:	889b      	ldrh	r3, [r3, #4]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d52:	d219      	bcs.n	8002d88 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <UART_TX_init+0xac>)
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <UART_TX_init+0xa8>)
 8002d5c:	6811      	ldr	r1, [r2, #0]
 8002d5e:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <UART_TX_init+0xa8>)
 8002d60:	8892      	ldrh	r2, [r2, #4]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f013 fdfc 	bl	8016960 <memcpy>
					free(msg.array);
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <UART_TX_init+0xa8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f013 fdef 	bl	8016950 <free>
					total_size += msg.size;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <UART_TX_init+0xa8>)
 8002d74:	889b      	ldrh	r3, [r3, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d803      	bhi.n	8002d90 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ce      	beq.n	8002d2c <UART_TX_init+0x10>
 8002d8e:	e000      	b.n	8002d92 <UART_TX_init+0x76>
						break;
 8002d90:	bf00      	nop

		if (total_size > 0) {
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <UART_TX_init+0xac>)
 8002da0:	480a      	ldr	r0, [pc, #40]	; (8002dcc <UART_TX_init+0xb0>)
 8002da2:	f00d fabd 	bl	8010320 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002da6:	e001      	b.n	8002dac <UART_TX_init+0x90>
				osThreadYield();
 8002da8:	f010 f95c 	bl	8013064 <osThreadYield>
			while (tx_flag == 0) {
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <UART_TX_init+0xb4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f9      	beq.n	8002da8 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <UART_TX_init+0xb4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002dba:	f010 f953 	bl	8013064 <osThreadYield>
		total_size = 0;
 8002dbe:	e7b3      	b.n	8002d28 <UART_TX_init+0xc>
 8002dc0:	24000c48 	.word	0x24000c48
 8002dc4:	24000c4c 	.word	0x24000c4c
 8002dc8:	24000cf4 	.word	0x24000cf4
 8002dcc:	24000638 	.word	0x24000638
 8002dd0:	24000000 	.word	0x24000000

08002dd4 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <Voltage_Monitor_init+0xbc>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002de4:	2200      	movs	r2, #0
 8002de6:	2108      	movs	r1, #8
 8002de8:	f010 fa6f 	bl	80132ca <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002dec:	2014      	movs	r0, #20
 8002dee:	f013 fda7 	bl	8016940 <malloc>
 8002df2:	4603      	mov	r3, r0
 8002df4:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002df6:	2008      	movs	r0, #8
 8002df8:	f013 fda2 	bl	8016940 <malloc>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff f901 	bl	8002008 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002e06:	68b8      	ldr	r0, [r7, #8]
 8002e08:	f7ff f950 	bl	80020ac <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	885a      	ldrh	r2, [r3, #2]
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <Voltage_Monitor_init+0xc0>)
 8002e12:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	881a      	ldrh	r2, [r3, #0]
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <Voltage_Monitor_init+0xc4>)
 8002e1a:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <Voltage_Monitor_init+0xc8>)
 8002e22:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	885a      	ldrh	r2, [r3, #2]
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <Voltage_Monitor_init+0xcc>)
 8002e2a:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	889a      	ldrh	r2, [r3, #4]
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <Voltage_Monitor_init+0xd0>)
 8002e32:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	88da      	ldrh	r2, [r3, #6]
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <Voltage_Monitor_init+0xd4>)
 8002e3a:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	899a      	ldrh	r2, [r3, #12]
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <Voltage_Monitor_init+0xd8>)
 8002e42:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88da      	ldrh	r2, [r3, #6]
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <Voltage_Monitor_init+0xdc>)
 8002e4a:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	889a      	ldrh	r2, [r3, #4]
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <Voltage_Monitor_init+0xe0>)
 8002e52:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	89da      	ldrh	r2, [r3, #14]
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <Voltage_Monitor_init+0xe4>)
 8002e5a:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8a1a      	ldrh	r2, [r3, #16]
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <Voltage_Monitor_init+0xe8>)
 8002e62:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	891a      	ldrh	r2, [r3, #8]
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <Voltage_Monitor_init+0xec>)
 8002e6a:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	895a      	ldrh	r2, [r3, #10]
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <Voltage_Monitor_init+0xf0>)
 8002e72:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8a5a      	ldrh	r2, [r3, #18]
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <Voltage_Monitor_init+0xf4>)
 8002e7a:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f013 fd67 	bl	8016950 <free>
		free(hk_adc3);
 8002e82:	68b8      	ldr	r0, [r7, #8]
 8002e84:	f013 fd64 	bl	8016950 <free>

		osThreadYield();
 8002e88:	f010 f8ec 	bl	8013064 <osThreadYield>
	for (;;) {
 8002e8c:	e7a6      	b.n	8002ddc <Voltage_Monitor_init+0x8>
 8002e8e:	bf00      	nop
 8002e90:	24000c60 	.word	0x24000c60
 8002e94:	24000c26 	.word	0x24000c26
 8002e98:	24000c28 	.word	0x24000c28
 8002e9c:	24000c2a 	.word	0x24000c2a
 8002ea0:	24000c2c 	.word	0x24000c2c
 8002ea4:	24000c2e 	.word	0x24000c2e
 8002ea8:	24000c30 	.word	0x24000c30
 8002eac:	24000c32 	.word	0x24000c32
 8002eb0:	24000c34 	.word	0x24000c34
 8002eb4:	24000c36 	.word	0x24000c36
 8002eb8:	24000c38 	.word	0x24000c38
 8002ebc:	24000c3a 	.word	0x24000c3a
 8002ec0:	24000c3c 	.word	0x24000c3c
 8002ec4:	24000c3e 	.word	0x24000c3e
 8002ec8:	24000c40 	.word	0x24000c40

08002ecc <FLAG_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
  /* Infinite loop */
  for(;;)
  {
		int current_flag = osEventFlagsGet(event_flags);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <FLAG_init+0x38>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f010 f9d5 	bl	8013288 <osEventFlagsGet>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0316 	and.w	r3, r3, #22
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <FLAG_init+0x38>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2116      	movs	r1, #22
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f010 f996 	bl	8013224 <osEventFlagsClear>
			enter_stop();
 8002ef8:	f7ff f9ae 	bl	8002258 <enter_stop>
		}
    osDelay(1);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f010 f8f2 	bl	80130e6 <osDelay>
  {
 8002f02:	e7e7      	b.n	8002ed4 <FLAG_init+0x8>
 8002f04:	24000c60 	.word	0x24000c60

08002f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f1a:	f000 ff85 	bl	8003e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40001000 	.word	0x40001000

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_MspInit+0x38>)
 8002f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f44:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <HAL_MspInit+0x38>)
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_MspInit+0x38>)
 8002f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f06f 0001 	mvn.w	r0, #1
 8002f64:	f002 fc6e 	bl	8005844 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024400 	.word	0x58024400

08002f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	; 0x38
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a7b      	ldr	r2, [pc, #492]	; (8003180 <HAL_ADC_MspInit+0x20c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	f040 8091 	bne.w	80030ba <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f98:	4b7a      	ldr	r3, [pc, #488]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f9e:	4a79      	ldr	r2, [pc, #484]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002fa0:	f043 0320 	orr.w	r3, r3, #32
 8002fa4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fa8:	4b76      	ldr	r3, [pc, #472]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002faa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb6:	4b73      	ldr	r3, [pc, #460]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fbc:	4a71      	ldr	r2, [pc, #452]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fc6:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	4b6b      	ldr	r3, [pc, #428]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fda:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe4:	4b67      	ldr	r3, [pc, #412]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff8:	4a62      	ldr	r2, [pc, #392]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003002:	4b60      	ldr	r3, [pc, #384]	; (8003184 <HAL_ADC_MspInit+0x210>)
 8003004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003010:	2333      	movs	r3, #51	; 0x33
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003014:	2303      	movs	r3, #3
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003020:	4619      	mov	r1, r3
 8003022:	4859      	ldr	r0, [pc, #356]	; (8003188 <HAL_ADC_MspInit+0x214>)
 8003024:	f005 fe84 	bl	8008d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003028:	23ce      	movs	r3, #206	; 0xce
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302c:	2303      	movs	r3, #3
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003038:	4619      	mov	r1, r3
 800303a:	4854      	ldr	r0, [pc, #336]	; (800318c <HAL_ADC_MspInit+0x218>)
 800303c:	f005 fe78 	bl	8008d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003040:	2303      	movs	r3, #3
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003044:	2303      	movs	r3, #3
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003050:	4619      	mov	r1, r3
 8003052:	484f      	ldr	r0, [pc, #316]	; (8003190 <HAL_ADC_MspInit+0x21c>)
 8003054:	f005 fe6c 	bl	8008d30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003058:	4b4e      	ldr	r3, [pc, #312]	; (8003194 <HAL_ADC_MspInit+0x220>)
 800305a:	4a4f      	ldr	r2, [pc, #316]	; (8003198 <HAL_ADC_MspInit+0x224>)
 800305c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800305e:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <HAL_ADC_MspInit+0x220>)
 8003060:	2209      	movs	r2, #9
 8003062:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003064:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <HAL_ADC_MspInit+0x220>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800306a:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_ADC_MspInit+0x220>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003070:	4b48      	ldr	r3, [pc, #288]	; (8003194 <HAL_ADC_MspInit+0x220>)
 8003072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003078:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_ADC_MspInit+0x220>)
 800307a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003080:	4b44      	ldr	r3, [pc, #272]	; (8003194 <HAL_ADC_MspInit+0x220>)
 8003082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003086:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003088:	4b42      	ldr	r3, [pc, #264]	; (8003194 <HAL_ADC_MspInit+0x220>)
 800308a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003090:	4b40      	ldr	r3, [pc, #256]	; (8003194 <HAL_ADC_MspInit+0x220>)
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003096:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <HAL_ADC_MspInit+0x220>)
 8003098:	2200      	movs	r2, #0
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800309c:	483d      	ldr	r0, [pc, #244]	; (8003194 <HAL_ADC_MspInit+0x220>)
 800309e:	f002 ffff 	bl	80060a0 <HAL_DMA_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80030a8:	f7ff ff40 	bl	8002f2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a39      	ldr	r2, [pc, #228]	; (8003194 <HAL_ADC_MspInit+0x220>)
 80030b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80030b2:	4a38      	ldr	r2, [pc, #224]	; (8003194 <HAL_ADC_MspInit+0x220>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80030b8:	e05e      	b.n	8003178 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a37      	ldr	r2, [pc, #220]	; (800319c <HAL_ADC_MspInit+0x228>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d159      	bne.n	8003178 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_ADC_MspInit+0x210>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ca:	4a2e      	ldr	r2, [pc, #184]	; (8003184 <HAL_ADC_MspInit+0x210>)
 80030cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_ADC_MspInit+0x210>)
 80030d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_ADC_MspInit+0x210>)
 80030e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_ADC_MspInit+0x210>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_ADC_MspInit+0x210>)
 80030f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003100:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003104:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003108:	f000 feba 	bl	8003e80 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800310c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003110:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003114:	f000 feb4 	bl	8003e80 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 800311a:	4a22      	ldr	r2, [pc, #136]	; (80031a4 <HAL_ADC_MspInit+0x230>)
 800311c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003120:	2273      	movs	r2, #115	; 0x73
 8003122:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003136:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 800313a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800313e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003140:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003146:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 800314a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800314e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003152:	2200      	movs	r2, #0
 8003154:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003158:	2200      	movs	r2, #0
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800315c:	4810      	ldr	r0, [pc, #64]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 800315e:	f002 ff9f 	bl	80060a0 <HAL_DMA_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003168:	f7ff fee0 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003170:	64da      	str	r2, [r3, #76]	; 0x4c
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_ADC_MspInit+0x22c>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003178:	bf00      	nop
 800317a:	3738      	adds	r7, #56	; 0x38
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40022000 	.word	0x40022000
 8003184:	58024400 	.word	0x58024400
 8003188:	58020800 	.word	0x58020800
 800318c:	58020000 	.word	0x58020000
 8003190:	58020400 	.word	0x58020400
 8003194:	24000204 	.word	0x24000204
 8003198:	40020010 	.word	0x40020010
 800319c:	58026000 	.word	0x58026000
 80031a0:	2400027c 	.word	0x2400027c
 80031a4:	40020028 	.word	0x40020028

080031a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a34      	ldr	r2, [pc, #208]	; (8003298 <HAL_DAC_MspInit+0xf0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d161      	bne.n	800328e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80031ca:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_DAC_MspInit+0xf4>)
 80031cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d0:	4a32      	ldr	r2, [pc, #200]	; (800329c <HAL_DAC_MspInit+0xf4>)
 80031d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_DAC_MspInit+0xf4>)
 80031dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e8:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_DAC_MspInit+0xf4>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_DAC_MspInit+0xf4>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f8:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_DAC_MspInit+0xf4>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003206:	2310      	movs	r3, #16
 8003208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800320a:	2303      	movs	r3, #3
 800320c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	4821      	ldr	r0, [pc, #132]	; (80032a0 <HAL_DAC_MspInit+0xf8>)
 800321a:	f005 fd89 	bl	8008d30 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003220:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <HAL_DAC_MspInit+0x100>)
 8003222:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003226:	2243      	movs	r2, #67	; 0x43
 8003228:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 800322c:	2240      	movs	r2, #64	; 0x40
 800322e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003244:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003248:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800324c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003254:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003262:	4810      	ldr	r0, [pc, #64]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003264:	f002 ff1c 	bl	80060a0 <HAL_DMA_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800326e:	f7ff fe5d 	bl	8002f2c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <HAL_DAC_MspInit+0xfc>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2105      	movs	r1, #5
 8003282:	2036      	movs	r0, #54	; 0x36
 8003284:	f002 fade 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003288:	2036      	movs	r0, #54	; 0x36
 800328a:	f002 faf5 	bl	8005878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40007400 	.word	0x40007400
 800329c:	58024400 	.word	0x58024400
 80032a0:	58020000 	.word	0x58020000
 80032a4:	24000308 	.word	0x24000308
 80032a8:	40020088 	.word	0x40020088

080032ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0ba      	sub	sp, #232	; 0xe8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c4:	f107 0310 	add.w	r3, r7, #16
 80032c8:	22c0      	movs	r2, #192	; 0xc0
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f013 fb55 	bl	801697c <memset>
  if(hi2c->Instance==I2C1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_I2C_MspInit+0xc8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d146      	bne.n	800336a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032dc:	f04f 0208 	mov.w	r2, #8
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 fda8 	bl	800ae48 <HAL_RCCEx_PeriphCLKConfig>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80032fe:	f7ff fe15 	bl	8002f2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_I2C_MspInit+0xcc>)
 8003304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_I2C_MspInit+0xcc>)
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_I2C_MspInit+0xcc>)
 8003314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003320:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003328:	2312      	movs	r3, #18
 800332a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800333a:	2304      	movs	r3, #4
 800333c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003340:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003344:	4619      	mov	r1, r3
 8003346:	480d      	ldr	r0, [pc, #52]	; (800337c <HAL_I2C_MspInit+0xd0>)
 8003348:	f005 fcf2 	bl	8008d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_I2C_MspInit+0xcc>)
 800334e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_I2C_MspInit+0xcc>)
 8003354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_I2C_MspInit+0xcc>)
 800335e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800336a:	bf00      	nop
 800336c:	37e8      	adds	r7, #232	; 0xe8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40005400 	.word	0x40005400
 8003378:	58024400 	.word	0x58024400
 800337c:	58020400 	.word	0x58020400

08003380 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b0b2      	sub	sp, #200	; 0xc8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	22c0      	movs	r2, #192	; 0xc0
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f013 faf3 	bl	801697c <memset>
  if(hrtc->Instance==RTC)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_RTC_MspInit+0x5c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d118      	bne.n	80033d2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_RTC_MspInit+0x60>)
 80033ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	4618      	mov	r0, r3
 80033b8:	f007 fd46 	bl	800ae48 <HAL_RCCEx_PeriphCLKConfig>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80033c2:	f7ff fdb3 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RTC_MspInit+0x64>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_RTC_MspInit+0x64>)
 80033cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033d2:	bf00      	nop
 80033d4:	37c8      	adds	r7, #200	; 0xc8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	58004000 	.word	0x58004000
 80033e0:	00019300 	.word	0x00019300
 80033e4:	58024400 	.word	0x58024400

080033e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0bc      	sub	sp, #240	; 0xf0
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003400:	f107 0318 	add.w	r3, r7, #24
 8003404:	22c0      	movs	r2, #192	; 0xc0
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f013 fab7 	bl	801697c <memset>
  if(hspi->Instance==SPI1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a4c      	ldr	r2, [pc, #304]	; (8003544 <HAL_SPI_MspInit+0x15c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d145      	bne.n	80034a4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003424:	2300      	movs	r3, #0
 8003426:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003428:	f107 0318 	add.w	r3, r7, #24
 800342c:	4618      	mov	r0, r3
 800342e:	f007 fd0b 	bl	800ae48 <HAL_RCCEx_PeriphCLKConfig>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003438:	f7ff fd78 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_SPI_MspInit+0x160>)
 800343e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003442:	4a41      	ldr	r2, [pc, #260]	; (8003548 <HAL_SPI_MspInit+0x160>)
 8003444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003448:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800344c:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <HAL_SPI_MspInit+0x160>)
 800344e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_SPI_MspInit+0x160>)
 800345c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003460:	4a39      	ldr	r2, [pc, #228]	; (8003548 <HAL_SPI_MspInit+0x160>)
 8003462:	f043 0302 	orr.w	r3, r3, #2
 8003466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_SPI_MspInit+0x160>)
 800346c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003478:	2318      	movs	r3, #24
 800347a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003490:	2305      	movs	r3, #5
 8003492:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003496:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800349a:	4619      	mov	r1, r3
 800349c:	482b      	ldr	r0, [pc, #172]	; (800354c <HAL_SPI_MspInit+0x164>)
 800349e:	f005 fc47 	bl	8008d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034a2:	e04a      	b.n	800353a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <HAL_SPI_MspInit+0x168>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d145      	bne.n	800353a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80034ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034be:	f107 0318 	add.w	r3, r7, #24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f007 fcc0 	bl	800ae48 <HAL_RCCEx_PeriphCLKConfig>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80034ce:	f7ff fd2d 	bl	8002f2c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_SPI_MspInit+0x160>)
 80034d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_SPI_MspInit+0x160>)
 80034da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_SPI_MspInit+0x160>)
 80034e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f0:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_SPI_MspInit+0x160>)
 80034f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_SPI_MspInit+0x160>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_SPI_MspInit+0x160>)
 8003502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800350e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003528:	2305      	movs	r3, #5
 800352a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003532:	4619      	mov	r1, r3
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <HAL_SPI_MspInit+0x164>)
 8003536:	f005 fbfb 	bl	8008d30 <HAL_GPIO_Init>
}
 800353a:	bf00      	nop
 800353c:	37f0      	adds	r7, #240	; 0xf0
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40013000 	.word	0x40013000
 8003548:	58024400 	.word	0x58024400
 800354c:	58020400 	.word	0x58020400
 8003550:	40003800 	.word	0x40003800

08003554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a46      	ldr	r2, [pc, #280]	; (800367c <HAL_TIM_Base_MspInit+0x128>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12f      	bne.n	80035c6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003566:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 8003568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800356c:	4a44      	ldr	r2, [pc, #272]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003576:	4b42      	ldr	r3, [pc, #264]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 8003578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2105      	movs	r1, #5
 8003588:	2018      	movs	r0, #24
 800358a:	f002 f95b 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800358e:	2018      	movs	r0, #24
 8003590:	f002 f972 	bl	8005878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	2105      	movs	r1, #5
 8003598:	2019      	movs	r0, #25
 800359a:	f002 f953 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800359e:	2019      	movs	r0, #25
 80035a0:	f002 f96a 	bl	8005878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2105      	movs	r1, #5
 80035a8:	201a      	movs	r0, #26
 80035aa:	f002 f94b 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80035ae:	201a      	movs	r0, #26
 80035b0:	f002 f962 	bl	8005878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2105      	movs	r1, #5
 80035b8:	201b      	movs	r0, #27
 80035ba:	f002 f943 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80035be:	201b      	movs	r0, #27
 80035c0:	f002 f95a 	bl	8005878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035c4:	e055      	b.n	8003672 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d117      	bne.n	8003600 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 80035d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d6:	4a2a      	ldr	r2, [pc, #168]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 80035e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2105      	movs	r1, #5
 80035f2:	201c      	movs	r0, #28
 80035f4:	f002 f926 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035f8:	201c      	movs	r0, #28
 80035fa:	f002 f93d 	bl	8005878 <HAL_NVIC_EnableIRQ>
}
 80035fe:	e038      	b.n	8003672 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_TIM_Base_MspInit+0x130>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d117      	bne.n	800363a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 800360c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003610:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 800361c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2105      	movs	r1, #5
 800362c:	201d      	movs	r0, #29
 800362e:	f002 f909 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003632:	201d      	movs	r0, #29
 8003634:	f002 f920 	bl	8005878 <HAL_NVIC_EnableIRQ>
}
 8003638:	e01b      	b.n	8003672 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_TIM_Base_MspInit+0x134>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d116      	bne.n	8003672 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 8003646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800364a:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_TIM_Base_MspInit+0x12c>)
 8003656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2105      	movs	r1, #5
 8003666:	201e      	movs	r0, #30
 8003668:	f002 f8ec 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800366c:	201e      	movs	r0, #30
 800366e:	f002 f903 	bl	8005878 <HAL_NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	58024400 	.word	0x58024400
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800

0800368c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a26      	ldr	r2, [pc, #152]	; (8003744 <HAL_TIM_MspPostInit+0xb8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d120      	bne.n	80036f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_TIM_MspPostInit+0xbc>)
 80036b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b4:	4a24      	ldr	r2, [pc, #144]	; (8003748 <HAL_TIM_MspPostInit+0xbc>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_TIM_MspPostInit+0xbc>)
 80036c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036de:	2301      	movs	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	4818      	ldr	r0, [pc, #96]	; (800374c <HAL_TIM_MspPostInit+0xc0>)
 80036ea:	f005 fb21 	bl	8008d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036ee:	e024      	b.n	800373a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f8:	d11f      	bne.n	800373a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_TIM_MspPostInit+0xbc>)
 80036fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003700:	4a11      	ldr	r2, [pc, #68]	; (8003748 <HAL_TIM_MspPostInit+0xbc>)
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_TIM_MspPostInit+0xbc>)
 800370c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800371c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2300      	movs	r3, #0
 8003728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800372a:	2301      	movs	r3, #1
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	4619      	mov	r1, r3
 8003734:	4806      	ldr	r0, [pc, #24]	; (8003750 <HAL_TIM_MspPostInit+0xc4>)
 8003736:	f005 fafb 	bl	8008d30 <HAL_GPIO_Init>
}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40010000 	.word	0x40010000
 8003748:	58024400 	.word	0x58024400
 800374c:	58020000 	.word	0x58020000
 8003750:	58020400 	.word	0x58020400

08003754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b0ba      	sub	sp, #232	; 0xe8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	22c0      	movs	r2, #192	; 0xc0
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f013 f901 	bl	801697c <memset>
  if(huart->Instance==USART1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a41      	ldr	r2, [pc, #260]	; (8003884 <HAL_UART_MspInit+0x130>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d17b      	bne.n	800387c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003784:	f04f 0201 	mov.w	r2, #1
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003790:	2318      	movs	r3, #24
 8003792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003796:	f107 0310 	add.w	r3, r7, #16
 800379a:	4618      	mov	r0, r3
 800379c:	f007 fb54 	bl	800ae48 <HAL_RCCEx_PeriphCLKConfig>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80037a6:	f7ff fbc1 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037aa:	4b37      	ldr	r3, [pc, #220]	; (8003888 <HAL_UART_MspInit+0x134>)
 80037ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b0:	4a35      	ldr	r2, [pc, #212]	; (8003888 <HAL_UART_MspInit+0x134>)
 80037b2:	f043 0310 	orr.w	r3, r3, #16
 80037b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037ba:	4b33      	ldr	r3, [pc, #204]	; (8003888 <HAL_UART_MspInit+0x134>)
 80037bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_UART_MspInit+0x134>)
 80037ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ce:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <HAL_UART_MspInit+0x134>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_UART_MspInit+0x134>)
 80037da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003800:	2307      	movs	r3, #7
 8003802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003806:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800380a:	4619      	mov	r1, r3
 800380c:	481f      	ldr	r0, [pc, #124]	; (800388c <HAL_UART_MspInit+0x138>)
 800380e:	f005 fa8f 	bl	8008d30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003814:	4a1f      	ldr	r2, [pc, #124]	; (8003894 <HAL_UART_MspInit+0x140>)
 8003816:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_UART_MspInit+0x13c>)
 800381a:	222a      	movs	r2, #42	; 0x2a
 800381c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003820:	2240      	movs	r2, #64	; 0x40
 8003822:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_UART_MspInit+0x13c>)
 800382c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003830:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_UART_MspInit+0x13c>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003840:	2200      	movs	r2, #0
 8003842:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_UART_MspInit+0x13c>)
 800384c:	2200      	movs	r2, #0
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003850:	480f      	ldr	r0, [pc, #60]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003852:	f002 fc25 	bl	80060a0 <HAL_DMA_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800385c:	f7ff fb66 	bl	8002f2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003864:	67da      	str	r2, [r3, #124]	; 0x7c
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_UART_MspInit+0x13c>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800386c:	2200      	movs	r2, #0
 800386e:	2105      	movs	r1, #5
 8003870:	2025      	movs	r0, #37	; 0x25
 8003872:	f001 ffe7 	bl	8005844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003876:	2025      	movs	r0, #37	; 0x25
 8003878:	f001 fffe 	bl	8005878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800387c:	bf00      	nop
 800387e:	37e8      	adds	r7, #232	; 0xe8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40011000 	.word	0x40011000
 8003888:	58024400 	.word	0x58024400
 800388c:	58020000 	.word	0x58020000
 8003890:	240006cc 	.word	0x240006cc
 8003894:	40020040 	.word	0x40020040

08003898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b090      	sub	sp, #64	; 0x40
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d827      	bhi.n	80038f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80038a6:	2200      	movs	r2, #0
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	2036      	movs	r0, #54	; 0x36
 80038ac:	f001 ffca 	bl	8005844 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038b0:	2036      	movs	r0, #54	; 0x36
 80038b2:	f001 ffe1 	bl	8005878 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <HAL_InitTick+0xc4>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_InitTick+0xc8>)
 80038be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c2:	4a27      	ldr	r2, [pc, #156]	; (8003960 <HAL_InitTick+0xc8>)
 80038c4:	f043 0310 	orr.w	r3, r3, #16
 80038c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_InitTick+0xc8>)
 80038ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038da:	f107 0210 	add.w	r2, r7, #16
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f007 fa6d 	bl	800adc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_InitTick+0x6a>
 80038f4:	e001      	b.n	80038fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02b      	b.n	8003952 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038fa:	f007 fa37 	bl	800ad6c <HAL_RCC_GetPCLK1Freq>
 80038fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003900:	e004      	b.n	800390c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003902:	f007 fa33 	bl	800ad6c <HAL_RCC_GetPCLK1Freq>
 8003906:	4603      	mov	r3, r0
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_InitTick+0xcc>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	0c9b      	lsrs	r3, r3, #18
 8003916:	3b01      	subs	r3, #1
 8003918:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_InitTick+0xd0>)
 800391c:	4a13      	ldr	r2, [pc, #76]	; (800396c <HAL_InitTick+0xd4>)
 800391e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_InitTick+0xd0>)
 8003922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003926:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003928:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <HAL_InitTick+0xd0>)
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_InitTick+0xd0>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_InitTick+0xd0>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800393a:	480b      	ldr	r0, [pc, #44]	; (8003968 <HAL_InitTick+0xd0>)
 800393c:	f00a fef5 	bl	800e72a <HAL_TIM_Base_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003946:	4808      	ldr	r0, [pc, #32]	; (8003968 <HAL_InitTick+0xd0>)
 8003948:	f00a ff46 	bl	800e7d8 <HAL_TIM_Base_Start_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	e000      	b.n	8003952 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
}
 8003952:	4618      	mov	r0, r3
 8003954:	3740      	adds	r7, #64	; 0x40
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	24000098 	.word	0x24000098
 8003960:	58024400 	.word	0x58024400
 8003964:	431bde83 	.word	0x431bde83
 8003968:	240010dc 	.word	0x240010dc
 800396c:	40001000 	.word	0x40001000

08003970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003974:	e7fe      	b.n	8003974 <NMI_Handler+0x4>

08003976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <HardFault_Handler+0x4>

0800397c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <MemManage_Handler+0x4>

08003982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003986:	e7fe      	b.n	8003986 <BusFault_Handler+0x4>

08003988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800398c:	e7fe      	b.n	800398c <UsageFault_Handler+0x4>

0800398e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <DMA1_Stream0_IRQHandler+0x10>)
 80039a2:	f003 fea7 	bl	80076f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	24000204 	.word	0x24000204

080039b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <DMA1_Stream1_IRQHandler+0x10>)
 80039b6:	f003 fe9d 	bl	80076f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	2400027c 	.word	0x2400027c

080039c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80039c8:	4802      	ldr	r0, [pc, #8]	; (80039d4 <DMA1_Stream2_IRQHandler+0x10>)
 80039ca:	f003 fe93 	bl	80076f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	240006cc 	.word	0x240006cc

080039d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <DMA1_Stream5_IRQHandler+0x10>)
 80039de:	f003 fe89 	bl	80076f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	24000308 	.word	0x24000308

080039ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <TIM1_BRK_IRQHandler+0x10>)
 80039f2:	f00b fa08 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	24000508 	.word	0x24000508

08003a00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <TIM1_UP_IRQHandler+0x10>)
 8003a06:	f00b f9fe 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	24000508 	.word	0x24000508

08003a14 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003a1a:	f00b f9f4 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	24000508 	.word	0x24000508

08003a28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <TIM1_CC_IRQHandler+0x10>)
 8003a2e:	f00b f9ea 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24000508 	.word	0x24000508

08003a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <TIM2_IRQHandler+0x10>)
 8003a42:	f00b f9e0 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	24000554 	.word	0x24000554

08003a50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <TIM3_IRQHandler+0x10>)
 8003a56:	f00b f9d6 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	240005a0 	.word	0x240005a0

08003a64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a68:	4802      	ldr	r0, [pc, #8]	; (8003a74 <TIM4_IRQHandler+0x10>)
 8003a6a:	f00b f9cc 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	240005ec 	.word	0x240005ec

08003a78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <USART1_IRQHandler+0x10>)
 8003a7e:	f00c fd85 	bl	801058c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	24000638 	.word	0x24000638

08003a8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <TIM6_DAC_IRQHandler+0x20>)
 8003a92:	791b      	ldrb	r3, [r3, #4]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003a9a:	4804      	ldr	r0, [pc, #16]	; (8003aac <TIM6_DAC_IRQHandler+0x20>)
 8003a9c:	f002 f881 	bl	8005ba2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003aa0:	4803      	ldr	r0, [pc, #12]	; (8003ab0 <TIM6_DAC_IRQHandler+0x24>)
 8003aa2:	f00b f9b0 	bl	800ee06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	240002f4 	.word	0x240002f4
 8003ab0:	240010dc 	.word	0x240010dc

08003ab4 <ITM_SendChar>:
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <ITM_SendChar+0x48>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <ITM_SendChar+0x48>)
 8003ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <ITM_SendChar+0x4c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <ITM_SendChar+0x4c>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	bf00      	nop
 8003ad8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f8      	beq.n	8003ad8 <ITM_SendChar+0x24>
 8003ae6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000edfc 	.word	0xe000edfc
 8003b00:	e0000e00 	.word	0xe0000e00

08003b04 <_read>:
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e00a      	b.n	8003b2c <_read+0x28>
 8003b16:	f3af 8000 	nop.w
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	60ba      	str	r2, [r7, #8]
 8003b22:	b2ca      	uxtb	r2, r1
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	dbf0      	blt.n	8003b16 <_read+0x12>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <_write>:
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e009      	b.n	8003b64 <_write+0x26>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	60ba      	str	r2, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ffab 	bl	8003ab4 <ITM_SendChar>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	3301      	adds	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	dbf1      	blt.n	8003b50 <_write+0x12>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_close>:
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <_fstat>:
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <_isatty>:
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_lseek>:
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <_sbrk>:
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <_sbrk+0x5c>)
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <_sbrk+0x60>)
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <_sbrk+0x64>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <_sbrk+0x22>
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <_sbrk+0x64>)
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <_sbrk+0x68>)
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <_sbrk+0x64>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d207      	bcs.n	8003c20 <_sbrk+0x40>
 8003c10:	f012 fe6c 	bl	80168ec <__errno>
 8003c14:	4603      	mov	r3, r0
 8003c16:	220c      	movs	r2, #12
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c1e:	e009      	b.n	8003c34 <_sbrk+0x54>
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <_sbrk+0x64>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <_sbrk+0x64>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <_sbrk+0x64>)
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	24080000 	.word	0x24080000
 8003c40:	00000400 	.word	0x00000400
 8003c44:	24001128 	.word	0x24001128
 8003c48:	24005a90 	.word	0x24005a90

08003c4c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003c50:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <SystemInit+0xe4>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	4a36      	ldr	r2, [pc, #216]	; (8003d30 <SystemInit+0xe4>)
 8003c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c60:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <SystemInit+0xe8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d807      	bhi.n	8003c7c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <SystemInit+0xe8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 030f 	bic.w	r3, r3, #15
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <SystemInit+0xe8>)
 8003c76:	f043 0307 	orr.w	r3, r3, #7
 8003c7a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <SystemInit+0xec>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2d      	ldr	r2, [pc, #180]	; (8003d38 <SystemInit+0xec>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003c88:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <SystemInit+0xec>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <SystemInit+0xec>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4929      	ldr	r1, [pc, #164]	; (8003d38 <SystemInit+0xec>)
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <SystemInit+0xf0>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <SystemInit+0xe8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <SystemInit+0xe8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 030f 	bic.w	r3, r3, #15
 8003cae:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <SystemInit+0xe8>)
 8003cb0:	f043 0307 	orr.w	r3, r3, #7
 8003cb4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <SystemInit+0xec>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <SystemInit+0xec>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <SystemInit+0xec>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <SystemInit+0xec>)
 8003cca:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <SystemInit+0xf4>)
 8003ccc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <SystemInit+0xec>)
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <SystemInit+0xf8>)
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <SystemInit+0xec>)
 8003cd6:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <SystemInit+0xfc>)
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003cda:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <SystemInit+0xec>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <SystemInit+0xec>)
 8003ce2:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <SystemInit+0xfc>)
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <SystemInit+0xec>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <SystemInit+0xec>)
 8003cee:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <SystemInit+0xfc>)
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <SystemInit+0xec>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <SystemInit+0xec>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <SystemInit+0xec>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <SystemInit+0xec>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <SystemInit+0x100>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <SystemInit+0x104>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d16:	d202      	bcs.n	8003d1e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <SystemInit+0x108>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <SystemInit+0x10c>)
 8003d20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	e000ed00 	.word	0xe000ed00
 8003d34:	52002000 	.word	0x52002000
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d40:	02020200 	.word	0x02020200
 8003d44:	01ff0000 	.word	0x01ff0000
 8003d48:	01010280 	.word	0x01010280
 8003d4c:	5c001000 	.word	0x5c001000
 8003d50:	ffff0000 	.word	0xffff0000
 8003d54:	51008108 	.word	0x51008108
 8003d58:	52004000 	.word	0x52004000

08003d5c <Reset_Handler>:
 8003d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d94 <LoopFillZerobss+0xe>
 8003d60:	f7ff ff74 	bl	8003c4c <SystemInit>
 8003d64:	480c      	ldr	r0, [pc, #48]	; (8003d98 <LoopFillZerobss+0x12>)
 8003d66:	490d      	ldr	r1, [pc, #52]	; (8003d9c <LoopFillZerobss+0x16>)
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <LoopFillZerobss+0x1a>)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e002      	b.n	8003d74 <LoopCopyDataInit>

08003d6e <CopyDataInit>:
 8003d6e:	58d4      	ldr	r4, [r2, r3]
 8003d70:	50c4      	str	r4, [r0, r3]
 8003d72:	3304      	adds	r3, #4

08003d74 <LoopCopyDataInit>:
 8003d74:	18c4      	adds	r4, r0, r3
 8003d76:	428c      	cmp	r4, r1
 8003d78:	d3f9      	bcc.n	8003d6e <CopyDataInit>
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <LoopFillZerobss+0x1e>)
 8003d7c:	4c0a      	ldr	r4, [pc, #40]	; (8003da8 <LoopFillZerobss+0x22>)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e001      	b.n	8003d86 <LoopFillZerobss>

08003d82 <FillZerobss>:
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	3204      	adds	r2, #4

08003d86 <LoopFillZerobss>:
 8003d86:	42a2      	cmp	r2, r4
 8003d88:	d3fb      	bcc.n	8003d82 <FillZerobss>
 8003d8a:	f012 fdb5 	bl	80168f8 <__libc_init_array>
 8003d8e:	f7fd f8fb 	bl	8000f88 <main>
 8003d92:	4770      	bx	lr
 8003d94:	24080000 	.word	0x24080000
 8003d98:	24000000 	.word	0x24000000
 8003d9c:	24000108 	.word	0x24000108
 8003da0:	080177e4 	.word	0x080177e4
 8003da4:	24000120 	.word	0x24000120
 8003da8:	24005a90 	.word	0x24005a90

08003dac <ADC3_IRQHandler>:
 8003dac:	e7fe      	b.n	8003dac <ADC3_IRQHandler>
	...

08003db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db6:	2003      	movs	r0, #3
 8003db8:	f001 fd39 	bl	800582e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dbc:	f006 fe2c 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_Init+0x68>)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	4913      	ldr	r1, [pc, #76]	; (8003e1c <HAL_Init+0x6c>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dda:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_Init+0x68>)
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <HAL_Init+0x6c>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <HAL_Init+0x70>)
 8003df2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003df4:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <HAL_Init+0x74>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dfa:	2005      	movs	r0, #5
 8003dfc:	f7ff fd4c 	bl	8003898 <HAL_InitTick>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e002      	b.n	8003e10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e0a:	f7ff f895 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	08017730 	.word	0x08017730
 8003e20:	24000094 	.word	0x24000094
 8003e24:	24000090 	.word	0x24000090

08003e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_IncTick+0x20>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_IncTick+0x24>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4413      	add	r3, r2
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_IncTick+0x24>)
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2400009c 	.word	0x2400009c
 8003e4c:	2400112c 	.word	0x2400112c

08003e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return uwTick;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_GetTick+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	2400112c 	.word	0x2400112c

08003e68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_GetREVID+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0c1b      	lsrs	r3, r3, #16
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	5c001000 	.word	0x5c001000

08003e80 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	401a      	ands	r2, r3
 8003e94:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	58000400 	.word	0x58000400

08003eac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3360      	adds	r3, #96	; 0x60
 8003f26:	461a      	mov	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	611a      	str	r2, [r3, #16]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b087      	sub	sp, #28
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3360      	adds	r3, #96	; 0x60
 8003f96:	461a      	mov	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	601a      	str	r2, [r3, #0]
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3330      	adds	r3, #48	; 0x30
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	4413      	add	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	211f      	movs	r1, #31
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	401a      	ands	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	f003 011f 	and.w	r1, r3, #31
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	431a      	orrs	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f023 0203 	bic.w	r2, r3, #3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60da      	str	r2, [r3, #12]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3314      	adds	r3, #20
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	0e5b      	lsrs	r3, r3, #25
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	4413      	add	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	0d1b      	lsrs	r3, r3, #20
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2107      	movs	r1, #7
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	401a      	ands	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	0d1b      	lsrs	r3, r3, #20
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	431a      	orrs	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0318 	and.w	r3, r3, #24
 80040da:	4908      	ldr	r1, [pc, #32]	; (80040fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80040dc:	40d9      	lsrs	r1, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	400b      	ands	r3, r1
 80040e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	000fffff 	.word	0x000fffff

08004100 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 031f 	and.w	r3, r3, #31
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <LL_ADC_DisableDeepPowerDown+0x20>)
 800412a:	4013      	ands	r3, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6093      	str	r3, [r2, #8]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	5fffffc0 	.word	0x5fffffc0

08004140 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004154:	d101      	bne.n	800415a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <LL_ADC_EnableInternalRegulator+0x24>)
 8004176:	4013      	ands	r3, r2
 8004178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	6fffffc0 	.word	0x6fffffc0

08004190 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a4:	d101      	bne.n	80041aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <LL_ADC_Enable+0x24>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	f043 0201 	orr.w	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	7fffffc0 	.word	0x7fffffc0

080041e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <LL_ADC_Disable+0x24>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	f043 0202 	orr.w	r2, r3, #2
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	7fffffc0 	.word	0x7fffffc0

08004208 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <LL_ADC_IsEnabled+0x18>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <LL_ADC_IsEnabled+0x1a>
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d101      	bne.n	8004246 <LL_ADC_IsDisableOngoing+0x18>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <LL_ADC_IsDisableOngoing+0x1a>
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <LL_ADC_REG_StartConversion+0x24>)
 8004262:	4013      	ands	r3, r2
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	7fffffc0 	.word	0x7fffffc0

0800427c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d101      	bne.n	8004294 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d101      	bne.n	80042ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b089      	sub	sp, #36	; 0x24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e18f      	b.n	8004602 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7fe fe3f 	bl	8002f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff19 	bl	8004140 <LL_ADC_IsDeepPowerDownEnabled>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff feff 	bl	800411c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff34 	bl	8004190 <LL_ADC_IsInternalRegulatorEnabled>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d114      	bne.n	8004358 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff18 	bl	8004168 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004338:	4b87      	ldr	r3, [pc, #540]	; (8004558 <HAL_ADC_Init+0x290>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	099b      	lsrs	r3, r3, #6
 800433e:	4a87      	ldr	r2, [pc, #540]	; (800455c <HAL_ADC_Init+0x294>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800434a:	e002      	b.n	8004352 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3b01      	subs	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f9      	bne.n	800434c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff17 	bl	8004190 <LL_ADC_IsInternalRegulatorEnabled>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ff77 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 800438e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 8129 	bne.w	80045f0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f040 8125 	bne.w	80045f0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043ae:	f043 0202 	orr.w	r2, r3, #2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff24 	bl	8004208 <LL_ADC_IsEnabled>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d136      	bne.n	8004434 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a65      	ldr	r2, [pc, #404]	; (8004560 <HAL_ADC_Init+0x298>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_ADC_Init+0x112>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a63      	ldr	r2, [pc, #396]	; (8004564 <HAL_ADC_Init+0x29c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10e      	bne.n	80043f8 <HAL_ADC_Init+0x130>
 80043da:	4861      	ldr	r0, [pc, #388]	; (8004560 <HAL_ADC_Init+0x298>)
 80043dc:	f7ff ff14 	bl	8004208 <LL_ADC_IsEnabled>
 80043e0:	4604      	mov	r4, r0
 80043e2:	4860      	ldr	r0, [pc, #384]	; (8004564 <HAL_ADC_Init+0x29c>)
 80043e4:	f7ff ff10 	bl	8004208 <LL_ADC_IsEnabled>
 80043e8:	4603      	mov	r3, r0
 80043ea:	4323      	orrs	r3, r4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e008      	b.n	800440a <HAL_ADC_Init+0x142>
 80043f8:	485b      	ldr	r0, [pc, #364]	; (8004568 <HAL_ADC_Init+0x2a0>)
 80043fa:	f7ff ff05 	bl	8004208 <LL_ADC_IsEnabled>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d012      	beq.n	8004434 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a53      	ldr	r2, [pc, #332]	; (8004560 <HAL_ADC_Init+0x298>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_ADC_Init+0x15a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a51      	ldr	r2, [pc, #324]	; (8004564 <HAL_ADC_Init+0x29c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_ADC_Init+0x15e>
 8004422:	4a52      	ldr	r2, [pc, #328]	; (800456c <HAL_ADC_Init+0x2a4>)
 8004424:	e000      	b.n	8004428 <HAL_ADC_Init+0x160>
 8004426:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_ADC_Init+0x2a8>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f7ff fd3c 	bl	8003eac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004434:	f7ff fd18 	bl	8003e68 <HAL_GetREVID>
 8004438:	4603      	mov	r3, r0
 800443a:	f241 0203 	movw	r2, #4099	; 0x1003
 800443e:	4293      	cmp	r3, r2
 8004440:	d914      	bls.n	800446c <HAL_ADC_Init+0x1a4>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d110      	bne.n	800446c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7d5b      	ldrb	r3, [r3, #21]
 800444e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004454:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800445a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7f1b      	ldrb	r3, [r3, #28]
 8004460:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004462:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004464:	f043 030c 	orr.w	r3, r3, #12
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e00d      	b.n	8004488 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7d5b      	ldrb	r3, [r3, #21]
 8004470:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004476:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800447c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7f1b      	ldrb	r3, [r3, #28]
 8004482:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7f1b      	ldrb	r3, [r3, #28]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d106      	bne.n	800449e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	3b01      	subs	r3, #1
 8004496:	045b      	lsls	r3, r3, #17
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <HAL_ADC_Init+0x2ac>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	430b      	orrs	r3, r1
 80044cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fed2 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 80044d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fedf 	bl	80042a2 <LL_ADC_INJ_IsConversionOngoing>
 80044e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d15f      	bne.n	80045ac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d15c      	bne.n	80045ac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	7d1b      	ldrb	r3, [r3, #20]
 80044f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_ADC_Init+0x2b0>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	69b9      	ldr	r1, [r7, #24]
 8004510:	430b      	orrs	r3, r1
 8004512:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800451a:	2b01      	cmp	r3, #1
 800451c:	d130      	bne.n	8004580 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <HAL_ADC_Init+0x2b4>)
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004532:	3a01      	subs	r2, #1
 8004534:	0411      	lsls	r1, r2, #16
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004546:	430a      	orrs	r2, r1
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	611a      	str	r2, [r3, #16]
 8004554:	e01c      	b.n	8004590 <HAL_ADC_Init+0x2c8>
 8004556:	bf00      	nop
 8004558:	24000090 	.word	0x24000090
 800455c:	053e2d63 	.word	0x053e2d63
 8004560:	40022000 	.word	0x40022000
 8004564:	40022100 	.word	0x40022100
 8004568:	58026000 	.word	0x58026000
 800456c:	40022300 	.word	0x40022300
 8004570:	58026300 	.word	0x58026300
 8004574:	fff0c003 	.word	0xfff0c003
 8004578:	ffffbffc 	.word	0xffffbffc
 800457c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fdec 	bl	8005184 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10c      	bne.n	80045ce <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f023 010f 	bic.w	r1, r3, #15
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
 80045cc:	e007      	b.n	80045de <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 020f 	bic.w	r2, r2, #15
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
 80045ee:	e007      	b.n	8004600 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f043 0210 	orr.w	r2, r3, #16
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004600:	7ffb      	ldrb	r3, [r7, #31]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3724      	adds	r7, #36	; 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}
 800460a:	bf00      	nop

0800460c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a55      	ldr	r2, [pc, #340]	; (8004774 <HAL_ADC_Start_DMA+0x168>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_ADC_Start_DMA+0x20>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a54      	ldr	r2, [pc, #336]	; (8004778 <HAL_ADC_Start_DMA+0x16c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_ADC_Start_DMA+0x24>
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_ADC_Start_DMA+0x170>)
 800462e:	e000      	b.n	8004632 <HAL_ADC_Start_DMA+0x26>
 8004630:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_ADC_Start_DMA+0x174>)
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fd64 	bl	8004100 <LL_ADC_GetMultimode>
 8004638:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fe1c 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 808c 	bne.w	8004764 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_ADC_Start_DMA+0x4e>
 8004656:	2302      	movs	r3, #2
 8004658:	e087      	b.n	800476a <HAL_ADC_Start_DMA+0x15e>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d002      	beq.n	8004674 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b09      	cmp	r3, #9
 8004672:	d170      	bne.n	8004756 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fc07 	bl	8004e88 <ADC_Enable>
 800467a:	4603      	mov	r3, r0
 800467c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d163      	bne.n	800474c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004688:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <HAL_ADC_Start_DMA+0x178>)
 800468a:	4013      	ands	r3, r2
 800468c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a37      	ldr	r2, [pc, #220]	; (8004778 <HAL_ADC_Start_DMA+0x16c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d002      	beq.n	80046a4 <HAL_ADC_Start_DMA+0x98>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	e000      	b.n	80046a6 <HAL_ADC_Start_DMA+0x9a>
 80046a4:	4b33      	ldr	r3, [pc, #204]	; (8004774 <HAL_ADC_Start_DMA+0x168>)
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d002      	beq.n	80046b4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d006      	beq.n	80046da <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f023 0206 	bic.w	r2, r3, #6
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	659a      	str	r2, [r3, #88]	; 0x58
 80046d8:	e002      	b.n	80046e0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e4:	4a28      	ldr	r2, [pc, #160]	; (8004788 <HAL_ADC_Start_DMA+0x17c>)
 80046e6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ec:	4a27      	ldr	r2, [pc, #156]	; (800478c <HAL_ADC_Start_DMA+0x180>)
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	4a26      	ldr	r2, [pc, #152]	; (8004790 <HAL_ADC_Start_DMA+0x184>)
 80046f6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	221c      	movs	r2, #28
 80046fe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0210 	orr.w	r2, r2, #16
 8004716:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7ff fc89 	bl	800403a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3340      	adds	r3, #64	; 0x40
 8004732:	4619      	mov	r1, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f002 f80e 	bl	8006758 <HAL_DMA_Start_IT>
 800473c:	4603      	mov	r3, r0
 800473e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fd85 	bl	8004254 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800474a:	e00d      	b.n	8004768 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004754:	e008      	b.n	8004768 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004762:	e001      	b.n	8004768 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004764:	2302      	movs	r3, #2
 8004766:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40022000 	.word	0x40022000
 8004778:	40022100 	.word	0x40022100
 800477c:	40022300 	.word	0x40022300
 8004780:	58026300 	.word	0x58026300
 8004784:	fffff0fe 	.word	0xfffff0fe
 8004788:	0800505b 	.word	0x0800505b
 800478c:	08005133 	.word	0x08005133
 8004790:	0800514f 	.word	0x0800514f

08004794 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b0a1      	sub	sp, #132	; 0x84
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a65      	ldr	r2, [pc, #404]	; (8004980 <HAL_ADC_ConfigChannel+0x1b0>)
 80047ea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x2a>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e32e      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x688>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fd38 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 8313 	bne.w	8004e3a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	db2c      	blt.n	8004876 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <HAL_ADC_ConfigChannel+0x6a>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2201      	movs	r2, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	e016      	b.n	8004868 <HAL_ADC_ConfigChannel+0x98>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800484c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004852:	2320      	movs	r3, #32
 8004854:	e003      	b.n	800485e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2201      	movs	r2, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	69d1      	ldr	r1, [r2, #28]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	430b      	orrs	r3, r1
 8004874:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f7ff fbad 	bl	8003fe2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fcf5 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 8004892:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fd02 	bl	80042a2 <LL_ADC_INJ_IsConversionOngoing>
 800489e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 80b8 	bne.w	8004a18 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 80b4 	bne.w	8004a18 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	461a      	mov	r2, r3
 80048be:	f7ff fbcf 	bl	8004060 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048c2:	4b30      	ldr	r3, [pc, #192]	; (8004984 <HAL_ADC_ConfigChannel+0x1b4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ce:	d10b      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x118>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	e01d      	b.n	8004924 <HAL_ADC_ConfigChannel+0x154>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_ADC_ConfigChannel+0x13e>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	e00a      	b.n	8004924 <HAL_ADC_ConfigChannel+0x154>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b04      	cmp	r3, #4
 800492c:	d02c      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6919      	ldr	r1, [r3, #16]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800493c:	f7ff faea 	bl	8003f14 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6919      	ldr	r1, [r3, #16]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	7e5b      	ldrb	r3, [r3, #25]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d102      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x186>
 8004950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004954:	e000      	b.n	8004958 <HAL_ADC_ConfigChannel+0x188>
 8004956:	2300      	movs	r3, #0
 8004958:	461a      	mov	r2, r3
 800495a:	f7ff fb14 	bl	8003f86 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6919      	ldr	r1, [r3, #16]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	7e1b      	ldrb	r3, [r3, #24]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d102      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1a4>
 800496e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004972:	e000      	b.n	8004976 <HAL_ADC_ConfigChannel+0x1a6>
 8004974:	2300      	movs	r3, #0
 8004976:	461a      	mov	r2, r3
 8004978:	f7ff faec 	bl	8003f54 <LL_ADC_SetDataRightShift>
 800497c:	e04c      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x248>
 800497e:	bf00      	nop
 8004980:	47ff0000 	.word	0x47ff0000
 8004984:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	069b      	lsls	r3, r3, #26
 8004998:	429a      	cmp	r2, r3
 800499a:	d107      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	069b      	lsls	r3, r3, #26
 80049bc:	429a      	cmp	r2, r3
 80049be:	d107      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049ce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	069b      	lsls	r3, r3, #26
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d107      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049f2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	069b      	lsls	r3, r3, #26
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d107      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fbf3 	bl	8004208 <LL_ADC_IsEnabled>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f040 8211 	bne.w	8004e4c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f7ff fb3e 	bl	80040b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4aa1      	ldr	r2, [pc, #644]	; (8004cc8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	f040 812e 	bne.w	8004ca4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x2a0>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0e9b      	lsrs	r3, r3, #26
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2b09      	cmp	r3, #9
 8004a66:	bf94      	ite	ls
 8004a68:	2301      	movls	r3, #1
 8004a6a:	2300      	movhi	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e019      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x2d4>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e003      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2b09      	cmp	r3, #9
 8004a9c:	bf94      	ite	ls
 8004a9e:	2301      	movls	r3, #1
 8004aa0:	2300      	movhi	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d079      	beq.n	8004b9c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d107      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x2f4>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	0e9b      	lsrs	r3, r3, #26
 8004aba:	3301      	adds	r3, #1
 8004abc:	069b      	lsls	r3, r3, #26
 8004abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ac2:	e015      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x320>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	fa93 f3a3 	rbit	r3, r3
 8004ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004adc:	2320      	movs	r3, #32
 8004ade:	e003      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	069b      	lsls	r3, r3, #26
 8004aec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x340>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	3301      	adds	r3, #1
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	e017      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x370>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004b28:	2320      	movs	r3, #32
 8004b2a:	e003      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	ea42 0103 	orr.w	r1, r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <HAL_ADC_ConfigChannel+0x396>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	0e9b      	lsrs	r3, r3, #26
 8004b56:	3301      	adds	r3, #1
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	051b      	lsls	r3, r3, #20
 8004b64:	e018      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3c8>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004b7e:	2320      	movs	r3, #32
 8004b80:	e003      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	fab3 f383 	clz	r3, r3
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f003 021f 	and.w	r2, r3, #31
 8004b90:	4613      	mov	r3, r2
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	4413      	add	r3, r2
 8004b96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	e07e      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d107      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x3e8>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	0e9b      	lsrs	r3, r3, #26
 8004bae:	3301      	adds	r3, #1
 8004bb0:	069b      	lsls	r3, r3, #26
 8004bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bb6:	e015      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x414>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	e003      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	069b      	lsls	r3, r3, #26
 8004be0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x434>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0e9b      	lsrs	r3, r3, #26
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	e017      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x464>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	fa93 f3a3 	rbit	r3, r3
 8004c10:	61bb      	str	r3, [r7, #24]
  return result;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	e003      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	ea42 0103 	orr.w	r1, r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10d      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x490>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	0e9b      	lsrs	r3, r3, #26
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f003 021f 	and.w	r2, r3, #31
 8004c50:	4613      	mov	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	3b1e      	subs	r3, #30
 8004c58:	051b      	lsls	r3, r3, #20
 8004c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	e01b      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x4c8>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
  return result;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	e003      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	f003 021f 	and.w	r2, r3, #31
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4413      	add	r3, r2
 8004c90:	3b1e      	subs	r3, #30
 8004c92:	051b      	lsls	r3, r3, #20
 8004c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	6892      	ldr	r2, [r2, #8]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7ff f9de 	bl	8004060 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f280 80cf 	bge.w	8004e4c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a06      	ldr	r2, [pc, #24]	; (8004ccc <HAL_ADC_ConfigChannel+0x4fc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_ADC_ConfigChannel+0x4f2>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <HAL_ADC_ConfigChannel+0x500>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x508>
 8004cc2:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <HAL_ADC_ConfigChannel+0x504>)
 8004cc4:	e009      	b.n	8004cda <HAL_ADC_ConfigChannel+0x50a>
 8004cc6:	bf00      	nop
 8004cc8:	47ff0000 	.word	0x47ff0000
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40022100 	.word	0x40022100
 8004cd4:	40022300 	.word	0x40022300
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_ADC_ConfigChannel+0x690>)
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f90c 	bl	8003ef8 <LL_ADC_GetCommonPathInternalCh>
 8004ce0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a5f      	ldr	r2, [pc, #380]	; (8004e64 <HAL_ADC_ConfigChannel+0x694>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_ADC_ConfigChannel+0x526>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a5d      	ldr	r2, [pc, #372]	; (8004e68 <HAL_ADC_ConfigChannel+0x698>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10e      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x544>
 8004cf6:	485b      	ldr	r0, [pc, #364]	; (8004e64 <HAL_ADC_ConfigChannel+0x694>)
 8004cf8:	f7ff fa86 	bl	8004208 <LL_ADC_IsEnabled>
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	485a      	ldr	r0, [pc, #360]	; (8004e68 <HAL_ADC_ConfigChannel+0x698>)
 8004d00:	f7ff fa82 	bl	8004208 <LL_ADC_IsEnabled>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4323      	orrs	r3, r4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e008      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x556>
 8004d14:	4855      	ldr	r0, [pc, #340]	; (8004e6c <HAL_ADC_ConfigChannel+0x69c>)
 8004d16:	f7ff fa77 	bl	8004208 <LL_ADC_IsEnabled>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d07d      	beq.n	8004e26 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a50      	ldr	r2, [pc, #320]	; (8004e70 <HAL_ADC_ConfigChannel+0x6a0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d130      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x5c6>
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d12b      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <HAL_ADC_ConfigChannel+0x69c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	f040 8081 	bne.w	8004e4c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a45      	ldr	r2, [pc, #276]	; (8004e64 <HAL_ADC_ConfigChannel+0x694>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_ADC_ConfigChannel+0x58e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a43      	ldr	r2, [pc, #268]	; (8004e68 <HAL_ADC_ConfigChannel+0x698>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x592>
 8004d5e:	4a45      	ldr	r2, [pc, #276]	; (8004e74 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d60:	e000      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x594>
 8004d62:	4a3f      	ldr	r2, [pc, #252]	; (8004e60 <HAL_ADC_ConfigChannel+0x690>)
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7ff f8b0 	bl	8003ed2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_ADC_ConfigChannel+0x6a8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	4a40      	ldr	r2, [pc, #256]	; (8004e7c <HAL_ADC_ConfigChannel+0x6ac>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	3301      	adds	r3, #1
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d86:	e002      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f9      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d94:	e05a      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a39      	ldr	r2, [pc, #228]	; (8004e80 <HAL_ADC_ConfigChannel+0x6b0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d11e      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x60e>
 8004da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d119      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <HAL_ADC_ConfigChannel+0x69c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d14b      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2a      	ldr	r2, [pc, #168]	; (8004e64 <HAL_ADC_ConfigChannel+0x694>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_ADC_ConfigChannel+0x5f8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a29      	ldr	r2, [pc, #164]	; (8004e68 <HAL_ADC_ConfigChannel+0x698>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x5fc>
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <HAL_ADC_ConfigChannel+0x6a4>)
 8004dca:	e000      	b.n	8004dce <HAL_ADC_ConfigChannel+0x5fe>
 8004dcc:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <HAL_ADC_ConfigChannel+0x690>)
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7ff f87b 	bl	8003ed2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ddc:	e036      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <HAL_ADC_ConfigChannel+0x6b4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d131      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d12c      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <HAL_ADC_ConfigChannel+0x69c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d127      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_ADC_ConfigChannel+0x694>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x640>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <HAL_ADC_ConfigChannel+0x698>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x644>
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_ADC_ConfigChannel+0x6a4>)
 8004e12:	e000      	b.n	8004e16 <HAL_ADC_ConfigChannel+0x646>
 8004e14:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <HAL_ADC_ConfigChannel+0x690>)
 8004e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7ff f857 	bl	8003ed2 <LL_ADC_SetCommonPathInternalCh>
 8004e24:	e012      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e38:	e008      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3784      	adds	r7, #132	; 0x84
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	58026300 	.word	0x58026300
 8004e64:	40022000 	.word	0x40022000
 8004e68:	40022100 	.word	0x40022100
 8004e6c:	58026000 	.word	0x58026000
 8004e70:	cb840000 	.word	0xcb840000
 8004e74:	40022300 	.word	0x40022300
 8004e78:	24000090 	.word	0x24000090
 8004e7c:	053e2d63 	.word	0x053e2d63
 8004e80:	c7520000 	.word	0xc7520000
 8004e84:	cfb80000 	.word	0xcfb80000

08004e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff f9b7 	bl	8004208 <LL_ADC_IsEnabled>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d16e      	bne.n	8004f7e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	4b38      	ldr	r3, [pc, #224]	; (8004f88 <ADC_Enable+0x100>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f043 0210 	orr.w	r2, r3, #16
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	f043 0201 	orr.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e05a      	b.n	8004f80 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff f972 	bl	80041b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ed4:	f7fe ffbc 	bl	8003e50 <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2b      	ldr	r2, [pc, #172]	; (8004f8c <ADC_Enable+0x104>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <ADC_Enable+0x66>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a29      	ldr	r2, [pc, #164]	; (8004f90 <ADC_Enable+0x108>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d101      	bne.n	8004ef2 <ADC_Enable+0x6a>
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <ADC_Enable+0x10c>)
 8004ef0:	e000      	b.n	8004ef4 <ADC_Enable+0x6c>
 8004ef2:	4b29      	ldr	r3, [pc, #164]	; (8004f98 <ADC_Enable+0x110>)
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff f903 	bl	8004100 <LL_ADC_GetMultimode>
 8004efa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <ADC_Enable+0x108>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d002      	beq.n	8004f0c <ADC_Enable+0x84>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	e000      	b.n	8004f0e <ADC_Enable+0x86>
 8004f0c:	4b1f      	ldr	r3, [pc, #124]	; (8004f8c <ADC_Enable+0x104>)
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02c      	beq.n	8004f70 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d130      	bne.n	8004f7e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f1c:	e028      	b.n	8004f70 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff f970 	bl	8004208 <LL_ADC_IsEnabled>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f940 	bl	80041b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f38:	f7fe ff8a 	bl	8003e50 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d914      	bls.n	8004f70 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d00d      	beq.n	8004f70 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f043 0210 	orr.w	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e007      	b.n	8004f80 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d1cf      	bne.n	8004f1e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	8000003f 	.word	0x8000003f
 8004f8c:	40022000 	.word	0x40022000
 8004f90:	40022100 	.word	0x40022100
 8004f94:	40022300 	.word	0x40022300
 8004f98:	58026300 	.word	0x58026300

08004f9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff f940 	bl	800422e <LL_ADC_IsDisableOngoing>
 8004fae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff f927 	bl	8004208 <LL_ADC_IsEnabled>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d047      	beq.n	8005050 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d144      	bne.n	8005050 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 030d 	and.w	r3, r3, #13
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d10c      	bne.n	8004fee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff f901 	bl	80041e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fe6:	f7fe ff33 	bl	8003e50 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fec:	e029      	b.n	8005042 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e023      	b.n	8005052 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800500a:	f7fe ff21 	bl	8003e50 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d914      	bls.n	8005042 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	f043 0210 	orr.w	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e007      	b.n	8005052 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1dc      	bne.n	800500a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005070:	2b00      	cmp	r3, #0
 8005072:	d14b      	bne.n	800510c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d021      	beq.n	80050d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe ff92 	bl	8003fbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d032      	beq.n	8005104 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d12b      	bne.n	8005104 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11f      	bne.n	8005104 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c8:	f043 0201 	orr.w	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54
 80050d0:	e018      	b.n	8005104 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d111      	bne.n	8005104 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fb45 	bl	8004794 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800510a:	e00e      	b.n	800512a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff fb4f 	bl	80047bc <HAL_ADC_ErrorCallback>
}
 800511e:	e004      	b.n	800512a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff fb31 	bl	80047a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	f043 0204 	orr.w	r2, r3, #4
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fb21 	bl	80047bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7a      	ldr	r2, [pc, #488]	; (800537c <ADC_ConfigureBoostMode+0x1f8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <ADC_ConfigureBoostMode+0x1c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a79      	ldr	r2, [pc, #484]	; (8005380 <ADC_ConfigureBoostMode+0x1fc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d109      	bne.n	80051b4 <ADC_ConfigureBoostMode+0x30>
 80051a0:	4b78      	ldr	r3, [pc, #480]	; (8005384 <ADC_ConfigureBoostMode+0x200>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e008      	b.n	80051c6 <ADC_ConfigureBoostMode+0x42>
 80051b4:	4b74      	ldr	r3, [pc, #464]	; (8005388 <ADC_ConfigureBoostMode+0x204>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01c      	beq.n	8005204 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80051ca:	f005 fd9f 	bl	800ad0c <HAL_RCC_GetHCLKFreq>
 80051ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051d8:	d010      	beq.n	80051fc <ADC_ConfigureBoostMode+0x78>
 80051da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051de:	d873      	bhi.n	80052c8 <ADC_ConfigureBoostMode+0x144>
 80051e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e4:	d002      	beq.n	80051ec <ADC_ConfigureBoostMode+0x68>
 80051e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ea:	d16d      	bne.n	80052c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	60fb      	str	r3, [r7, #12]
        break;
 80051fa:	e068      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	089b      	lsrs	r3, r3, #2
 8005200:	60fb      	str	r3, [r7, #12]
        break;
 8005202:	e064      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005204:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	f007 f826 	bl	800c25c <HAL_RCCEx_GetPeriphCLKFreq>
 8005210:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800521a:	d051      	beq.n	80052c0 <ADC_ConfigureBoostMode+0x13c>
 800521c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005220:	d854      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 8005222:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005226:	d047      	beq.n	80052b8 <ADC_ConfigureBoostMode+0x134>
 8005228:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800522c:	d84e      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 800522e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005232:	d03d      	beq.n	80052b0 <ADC_ConfigureBoostMode+0x12c>
 8005234:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005238:	d848      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 800523a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800523e:	d033      	beq.n	80052a8 <ADC_ConfigureBoostMode+0x124>
 8005240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005244:	d842      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 8005246:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800524a:	d029      	beq.n	80052a0 <ADC_ConfigureBoostMode+0x11c>
 800524c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005250:	d83c      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 8005252:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005256:	d01a      	beq.n	800528e <ADC_ConfigureBoostMode+0x10a>
 8005258:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800525c:	d836      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 800525e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005262:	d014      	beq.n	800528e <ADC_ConfigureBoostMode+0x10a>
 8005264:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005268:	d830      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d00e      	beq.n	800528e <ADC_ConfigureBoostMode+0x10a>
 8005270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005274:	d82a      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 8005276:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800527a:	d008      	beq.n	800528e <ADC_ConfigureBoostMode+0x10a>
 800527c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005280:	d824      	bhi.n	80052cc <ADC_ConfigureBoostMode+0x148>
 8005282:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005286:	d002      	beq.n	800528e <ADC_ConfigureBoostMode+0x10a>
 8005288:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800528c:	d11e      	bne.n	80052cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	0c9b      	lsrs	r3, r3, #18
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	60fb      	str	r3, [r7, #12]
        break;
 800529e:	e016      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	60fb      	str	r3, [r7, #12]
        break;
 80052a6:	e012      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	60fb      	str	r3, [r7, #12]
        break;
 80052ae:	e00e      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	60fb      	str	r3, [r7, #12]
        break;
 80052b6:	e00a      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	09db      	lsrs	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
        break;
 80052be:	e006      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	60fb      	str	r3, [r7, #12]
        break;
 80052c6:	e002      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80052cc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80052ce:	f7fe fdcb 	bl	8003e68 <HAL_GetREVID>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052d8:	4293      	cmp	r3, r2
 80052da:	d815      	bhi.n	8005308 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <ADC_ConfigureBoostMode+0x208>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d908      	bls.n	80052f6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052f4:	e03e      	b.n	8005374 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005304:	609a      	str	r2, [r3, #8]
}
 8005306:	e035      	b.n	8005374 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <ADC_ConfigureBoostMode+0x20c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d808      	bhi.n	8005328 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005324:	609a      	str	r2, [r3, #8]
}
 8005326:	e025      	b.n	8005374 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <ADC_ConfigureBoostMode+0x210>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d80a      	bhi.n	8005346 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	e016      	b.n	8005374 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a13      	ldr	r2, [pc, #76]	; (8005398 <ADC_ConfigureBoostMode+0x214>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d80a      	bhi.n	8005364 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005360:	609a      	str	r2, [r3, #8]
}
 8005362:	e007      	b.n	8005374 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40022000 	.word	0x40022000
 8005380:	40022100 	.word	0x40022100
 8005384:	40022300 	.word	0x40022300
 8005388:	58026300 	.word	0x58026300
 800538c:	01312d00 	.word	0x01312d00
 8005390:	005f5e10 	.word	0x005f5e10
 8005394:	00bebc20 	.word	0x00bebc20
 8005398:	017d7840 	.word	0x017d7840

0800539c <LL_ADC_IsEnabled>:
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <LL_ADC_IsEnabled+0x18>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <LL_ADC_IsEnabled+0x1a>
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <LL_ADC_StartCalibration>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <LL_ADC_StartCalibration+0x38>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053e4:	430a      	orrs	r2, r1
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	3ffeffc0 	.word	0x3ffeffc0

08005400 <LL_ADC_IsCalibrationOnGoing>:
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005414:	d101      	bne.n	800541a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_ADC_REG_IsConversionOngoing>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d101      	bne.n	8005440 <LL_ADC_REG_IsConversionOngoing+0x18>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_ADCEx_Calibration_Start+0x1e>
 800546a:	2302      	movs	r3, #2
 800546c:	e04c      	b.n	8005508 <HAL_ADCEx_Calibration_Start+0xb8>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff fd90 	bl	8004f9c <ADC_Disable>
 800547c:	4603      	mov	r3, r0
 800547e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d135      	bne.n	80054f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548a:	4b21      	ldr	r3, [pc, #132]	; (8005510 <HAL_ADCEx_Calibration_Start+0xc0>)
 800548c:	4013      	ands	r3, r2
 800548e:	f043 0202 	orr.w	r2, r3, #2
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff ff90 	bl	80053c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054a4:	e014      	b.n	80054d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3301      	adds	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4a19      	ldr	r2, [pc, #100]	; (8005514 <HAL_ADCEx_Calibration_Start+0xc4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d30d      	bcc.n	80054d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	f023 0312 	bic.w	r3, r3, #18
 80054bc:	f043 0210 	orr.w	r2, r3, #16
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e01b      	b.n	8005508 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff ff93 	bl	8005400 <LL_ADC_IsCalibrationOnGoing>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e2      	bne.n	80054a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e4:	f023 0303 	bic.w	r3, r3, #3
 80054e8:	f043 0201 	orr.w	r2, r3, #1
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54
 80054f0:	e005      	b.n	80054fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f043 0210 	orr.w	r2, r3, #16
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	ffffeefd 	.word	0xffffeefd
 8005514:	25c3f800 	.word	0x25c3f800

08005518 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b09f      	sub	sp, #124	; 0x7c
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005532:	2302      	movs	r3, #2
 8005534:	e0be      	b.n	80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005542:	2300      	movs	r3, #0
 8005544:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a5c      	ldr	r2, [pc, #368]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d102      	bne.n	8005556 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005550:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	e001      	b.n	800555a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e09d      	b.n	80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff54 	bl	8005428 <LL_ADC_REG_IsConversionOngoing>
 8005580:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff ff4e 	bl	8005428 <LL_ADC_REG_IsConversionOngoing>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d17f      	bne.n	8005692 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005594:	2b00      	cmp	r3, #0
 8005596:	d17c      	bne.n	8005692 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a47      	ldr	r2, [pc, #284]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a46      	ldr	r2, [pc, #280]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80055ac:	4b45      	ldr	r3, [pc, #276]	; (80056c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80055ae:	e000      	b.n	80055b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80055b0:	4b45      	ldr	r3, [pc, #276]	; (80056c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d039      	beq.n	8005630 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a3a      	ldr	r2, [pc, #232]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10e      	bne.n	8005600 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80055e2:	4836      	ldr	r0, [pc, #216]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055e4:	f7ff feda 	bl	800539c <LL_ADC_IsEnabled>
 80055e8:	4604      	mov	r4, r0
 80055ea:	4835      	ldr	r0, [pc, #212]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055ec:	f7ff fed6 	bl	800539c <LL_ADC_IsEnabled>
 80055f0:	4603      	mov	r3, r0
 80055f2:	4323      	orrs	r3, r4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e008      	b.n	8005612 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005600:	4832      	ldr	r0, [pc, #200]	; (80056cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005602:	f7ff fecb 	bl	800539c <LL_ADC_IsEnabled>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d047      	beq.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	4b2d      	ldr	r3, [pc, #180]	; (80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800561c:	4013      	ands	r3, r2
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	6811      	ldr	r1, [r2, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	6892      	ldr	r2, [r2, #8]
 8005626:	430a      	orrs	r2, r1
 8005628:	431a      	orrs	r2, r3
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800562e:	e03a      	b.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d004      	beq.n	8005650 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10e      	bne.n	800566e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005650:	481a      	ldr	r0, [pc, #104]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005652:	f7ff fea3 	bl	800539c <LL_ADC_IsEnabled>
 8005656:	4604      	mov	r4, r0
 8005658:	4819      	ldr	r0, [pc, #100]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800565a:	f7ff fe9f 	bl	800539c <LL_ADC_IsEnabled>
 800565e:	4603      	mov	r3, r0
 8005660:	4323      	orrs	r3, r4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	e008      	b.n	8005680 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800566e:	4817      	ldr	r0, [pc, #92]	; (80056cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005670:	f7ff fe94 	bl	800539c <LL_ADC_IsEnabled>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800568a:	4013      	ands	r3, r2
 800568c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800568e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005690:	e009      	b.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80056a4:	e000      	b.n	80056a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	377c      	adds	r7, #124	; 0x7c
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd90      	pop	{r4, r7, pc}
 80056bc:	40022000 	.word	0x40022000
 80056c0:	40022100 	.word	0x40022100
 80056c4:	40022300 	.word	0x40022300
 80056c8:	58026300 	.word	0x58026300
 80056cc:	58026000 	.word	0x58026000
 80056d0:	fffff0e0 	.word	0xfffff0e0

080056d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <__NVIC_SetPriorityGrouping+0x40>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056f0:	4013      	ands	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <__NVIC_SetPriorityGrouping+0x44>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005702:	4a04      	ldr	r2, [pc, #16]	; (8005714 <__NVIC_SetPriorityGrouping+0x40>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	60d3      	str	r3, [r2, #12]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000ed00 	.word	0xe000ed00
 8005718:	05fa0000 	.word	0x05fa0000

0800571c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <__NVIC_GetPriorityGrouping+0x18>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	0a1b      	lsrs	r3, r3, #8
 8005726:	f003 0307 	and.w	r3, r3, #7
}
 800572a:	4618      	mov	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	e000ed00 	.word	0xe000ed00

08005738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005746:	2b00      	cmp	r3, #0
 8005748:	db0b      	blt.n	8005762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f003 021f 	and.w	r2, r3, #31
 8005750:	4907      	ldr	r1, [pc, #28]	; (8005770 <__NVIC_EnableIRQ+0x38>)
 8005752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	2001      	movs	r0, #1
 800575a:	fa00 f202 	lsl.w	r2, r0, r2
 800575e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	e000e100 	.word	0xe000e100

08005774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	6039      	str	r1, [r7, #0]
 800577e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005784:	2b00      	cmp	r3, #0
 8005786:	db0a      	blt.n	800579e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	b2da      	uxtb	r2, r3
 800578c:	490c      	ldr	r1, [pc, #48]	; (80057c0 <__NVIC_SetPriority+0x4c>)
 800578e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005792:	0112      	lsls	r2, r2, #4
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	440b      	add	r3, r1
 8005798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800579c:	e00a      	b.n	80057b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	4908      	ldr	r1, [pc, #32]	; (80057c4 <__NVIC_SetPriority+0x50>)
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	3b04      	subs	r3, #4
 80057ac:	0112      	lsls	r2, r2, #4
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	440b      	add	r3, r1
 80057b2:	761a      	strb	r2, [r3, #24]
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	e000e100 	.word	0xe000e100
 80057c4:	e000ed00 	.word	0xe000ed00

080057c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f1c3 0307 	rsb	r3, r3, #7
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	bf28      	it	cs
 80057e6:	2304      	movcs	r3, #4
 80057e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d902      	bls.n	80057f8 <NVIC_EncodePriority+0x30>
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3b03      	subs	r3, #3
 80057f6:	e000      	b.n	80057fa <NVIC_EncodePriority+0x32>
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43da      	mvns	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	401a      	ands	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	fa01 f303 	lsl.w	r3, r1, r3
 800581a:	43d9      	mvns	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005820:	4313      	orrs	r3, r2
         );
}
 8005822:	4618      	mov	r0, r3
 8005824:	3724      	adds	r7, #36	; 0x24
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ff4c 	bl	80056d4 <__NVIC_SetPriorityGrouping>
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005852:	f7ff ff63 	bl	800571c <__NVIC_GetPriorityGrouping>
 8005856:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	6978      	ldr	r0, [r7, #20]
 800585e:	f7ff ffb3 	bl	80057c8 <NVIC_EncodePriority>
 8005862:	4602      	mov	r2, r0
 8005864:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff ff82 	bl	8005774 <__NVIC_SetPriority>
}
 8005870:	bf00      	nop
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff ff56 	bl	8005738 <__NVIC_EnableIRQ>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e014      	b.n	80058d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	791b      	ldrb	r3, [r3, #4]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fd fc76 	bl	80031a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e046      	b.n	800597a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	795b      	ldrb	r3, [r3, #5]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_DAC_Start+0x20>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e040      	b.n	800597a <HAL_DAC_Start+0xa2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2201      	movs	r2, #1
 8005912:	409a      	lsls	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10f      	bne.n	8005942 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800592c:	2b02      	cmp	r3, #2
 800592e:	d11d      	bne.n	800596c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	e014      	b.n	800596c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2102      	movs	r1, #2
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0202 	orr.w	r2, r2, #2
 800596a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0a2      	b.n	8005ae6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	795b      	ldrb	r3, [r3, #5]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_DAC_Start_DMA+0x24>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e09c      	b.n	8005ae6 <HAL_DAC_Start_DMA+0x15e>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2202      	movs	r2, #2
 80059b6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d129      	bne.n	8005a12 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4a4b      	ldr	r2, [pc, #300]	; (8005af0 <HAL_DAC_Start_DMA+0x168>)
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <HAL_DAC_Start_DMA+0x16c>)
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	4a49      	ldr	r2, [pc, #292]	; (8005af8 <HAL_DAC_Start_DMA+0x170>)
 80059d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_DAC_Start_DMA+0x6c>
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d005      	beq.n	80059fe <HAL_DAC_Start_DMA+0x76>
 80059f2:	e009      	b.n	8005a08 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	613b      	str	r3, [r7, #16]
        break;
 80059fc:	e033      	b.n	8005a66 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	613b      	str	r3, [r7, #16]
        break;
 8005a06:	e02e      	b.n	8005a66 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3310      	adds	r3, #16
 8005a0e:	613b      	str	r3, [r7, #16]
        break;
 8005a10:	e029      	b.n	8005a66 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4a39      	ldr	r2, [pc, #228]	; (8005afc <HAL_DAC_Start_DMA+0x174>)
 8005a18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4a38      	ldr	r2, [pc, #224]	; (8005b00 <HAL_DAC_Start_DMA+0x178>)
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	4a37      	ldr	r2, [pc, #220]	; (8005b04 <HAL_DAC_Start_DMA+0x17c>)
 8005a28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a38:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_DAC_Start_DMA+0xc0>
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d005      	beq.n	8005a52 <HAL_DAC_Start_DMA+0xca>
 8005a46:	e009      	b.n	8005a5c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	613b      	str	r3, [r7, #16]
        break;
 8005a50:	e009      	b.n	8005a66 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3318      	adds	r3, #24
 8005a58:	613b      	str	r3, [r7, #16]
        break;
 8005a5a:	e004      	b.n	8005a66 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	331c      	adds	r3, #28
 8005a62:	613b      	str	r3, [r7, #16]
        break;
 8005a64:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d111      	bne.n	8005a90 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6898      	ldr	r0, [r3, #8]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	f000 fe67 	bl	8006758 <HAL_DMA_Start_IT>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]
 8005a8e:	e010      	b.n	8005ab2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68d8      	ldr	r0, [r3, #12]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	f000 fe55 	bl	8006758 <HAL_DMA_Start_IT>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10c      	bne.n	8005ad8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2201      	movs	r2, #1
 8005acc:	409a      	lsls	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e005      	b.n	8005ae4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f043 0204 	orr.w	r2, r3, #4
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	08005f79 	.word	0x08005f79
 8005af4:	08005f9b 	.word	0x08005f9b
 8005af8:	08005fb7 	.word	0x08005fb7
 8005afc:	08006035 	.word	0x08006035
 8005b00:	08006057 	.word	0x08006057
 8005b04:	08006073 	.word	0x08006073

08005b08 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e03e      	b.n	8005b9a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43da      	mvns	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	400a      	ands	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2201      	movs	r2, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	43da      	mvns	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	400a      	ands	r2, r1
 8005b54:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10d      	bne.n	8005b78 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 f863 	bl	8006c2c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e00c      	b.n	8005b92 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 f855 	bl	8006c2c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005b90:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01d      	beq.n	8005c00 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f043 0201 	orr.w	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bf8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f86f 	bl	8005cde <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01d      	beq.n	8005c46 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d018      	beq.n	8005c46 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2204      	movs	r2, #4
 8005c18:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f9ed 	bl	8006020 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e015      	b.n	8005c96 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d105      	bne.n	8005c82 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e004      	b.n	8005c8c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	3314      	adds	r3, #20
 8005c8a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_DAC_ConfigChannel+0x1e>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e12a      	b.n	8005f6c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	795b      	ldrb	r3, [r3, #5]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_DAC_ConfigChannel+0x2e>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e124      	b.n	8005f6c <HAL_DAC_ConfigChannel+0x278>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d17a      	bne.n	8005e2c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005d36:	f7fe f88b 	bl	8003e50 <HAL_GetTick>
 8005d3a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d13d      	bne.n	8005dbe <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d42:	e018      	b.n	8005d76 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d44:	f7fe f884 	bl	8003e50 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d911      	bls.n	8005d76 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d58:	4b86      	ldr	r3, [pc, #536]	; (8005f74 <HAL_DAC_ConfigChannel+0x280>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f043 0208 	orr.w	r2, r3, #8
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e0fa      	b.n	8005f6c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7c:	4b7d      	ldr	r3, [pc, #500]	; (8005f74 <HAL_DAC_ConfigChannel+0x280>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1df      	bne.n	8005d44 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	6992      	ldr	r2, [r2, #24]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d8e:	e020      	b.n	8005dd2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d90:	f7fe f85e 	bl	8003e50 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d90f      	bls.n	8005dbe <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	da0a      	bge.n	8005dbe <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f043 0208 	orr.w	r2, r3, #8
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2203      	movs	r2, #3
 8005db8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e0d6      	b.n	8005f6c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	dbe3      	blt.n	8005d90 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	6992      	ldr	r2, [r2, #24]
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	ea02 0103 	and.w	r1, r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	409a      	lsls	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	21ff      	movs	r1, #255	; 0xff
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	ea02 0103 	and.w	r1, r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	409a      	lsls	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d11d      	bne.n	8005e70 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	221f      	movs	r2, #31
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	2207      	movs	r2, #7
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	43db      	mvns	r3, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d102      	bne.n	8005e9a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
 8005e98:	e00f      	b.n	8005eba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d102      	bne.n	8005ea8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	e008      	b.n	8005eba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb4:	e001      	b.n	8005eba <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6819      	ldr	r1, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	43da      	mvns	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	400a      	ands	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	22c0      	movs	r2, #192	; 0xc0
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43da      	mvns	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	400a      	ands	r2, r1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3728      	adds	r7, #40	; 0x28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20008000 	.word	0x20008000

08005f78 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fe8b 	bl	8005ca2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	711a      	strb	r2, [r3, #4]
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fe84 	bl	8005cb6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f043 0204 	orr.w	r2, r3, #4
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff fe7a 	bl	8005cca <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	711a      	strb	r2, [r3, #4]
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff ffce 	bl	8005fe4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	711a      	strb	r2, [r3, #4]
}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff ffc7 	bl	8005ff8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f043 0204 	orr.w	r2, r3, #4
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff ffbd 	bl	800600c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	711a      	strb	r2, [r3, #4]
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80060a8:	f7fd fed2 	bl	8003e50 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e316      	b.n	80066e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a66      	ldr	r2, [pc, #408]	; (8006258 <HAL_DMA_Init+0x1b8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d04a      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a65      	ldr	r2, [pc, #404]	; (800625c <HAL_DMA_Init+0x1bc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d045      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a63      	ldr	r2, [pc, #396]	; (8006260 <HAL_DMA_Init+0x1c0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d040      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a62      	ldr	r2, [pc, #392]	; (8006264 <HAL_DMA_Init+0x1c4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d03b      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a60      	ldr	r2, [pc, #384]	; (8006268 <HAL_DMA_Init+0x1c8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d036      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a5f      	ldr	r2, [pc, #380]	; (800626c <HAL_DMA_Init+0x1cc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d031      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5d      	ldr	r2, [pc, #372]	; (8006270 <HAL_DMA_Init+0x1d0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d02c      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a5c      	ldr	r2, [pc, #368]	; (8006274 <HAL_DMA_Init+0x1d4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d027      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5a      	ldr	r2, [pc, #360]	; (8006278 <HAL_DMA_Init+0x1d8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d022      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a59      	ldr	r2, [pc, #356]	; (800627c <HAL_DMA_Init+0x1dc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d01d      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a57      	ldr	r2, [pc, #348]	; (8006280 <HAL_DMA_Init+0x1e0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a56      	ldr	r2, [pc, #344]	; (8006284 <HAL_DMA_Init+0x1e4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d013      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a54      	ldr	r2, [pc, #336]	; (8006288 <HAL_DMA_Init+0x1e8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a53      	ldr	r2, [pc, #332]	; (800628c <HAL_DMA_Init+0x1ec>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a51      	ldr	r2, [pc, #324]	; (8006290 <HAL_DMA_Init+0x1f0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_DMA_Init+0xb8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a50      	ldr	r2, [pc, #320]	; (8006294 <HAL_DMA_Init+0x1f4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d101      	bne.n	800615c <HAL_DMA_Init+0xbc>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <HAL_DMA_Init+0xbe>
 800615c:	2300      	movs	r3, #0
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 813b 	beq.w	80063da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a37      	ldr	r2, [pc, #220]	; (8006258 <HAL_DMA_Init+0x1b8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d04a      	beq.n	8006214 <HAL_DMA_Init+0x174>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a36      	ldr	r2, [pc, #216]	; (800625c <HAL_DMA_Init+0x1bc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d045      	beq.n	8006214 <HAL_DMA_Init+0x174>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a34      	ldr	r2, [pc, #208]	; (8006260 <HAL_DMA_Init+0x1c0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d040      	beq.n	8006214 <HAL_DMA_Init+0x174>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a33      	ldr	r2, [pc, #204]	; (8006264 <HAL_DMA_Init+0x1c4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d03b      	beq.n	8006214 <HAL_DMA_Init+0x174>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a31      	ldr	r2, [pc, #196]	; (8006268 <HAL_DMA_Init+0x1c8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d036      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a30      	ldr	r2, [pc, #192]	; (800626c <HAL_DMA_Init+0x1cc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d031      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2e      	ldr	r2, [pc, #184]	; (8006270 <HAL_DMA_Init+0x1d0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d02c      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2d      	ldr	r2, [pc, #180]	; (8006274 <HAL_DMA_Init+0x1d4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d027      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2b      	ldr	r2, [pc, #172]	; (8006278 <HAL_DMA_Init+0x1d8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d022      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2a      	ldr	r2, [pc, #168]	; (800627c <HAL_DMA_Init+0x1dc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d01d      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a28      	ldr	r2, [pc, #160]	; (8006280 <HAL_DMA_Init+0x1e0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d018      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a27      	ldr	r2, [pc, #156]	; (8006284 <HAL_DMA_Init+0x1e4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a25      	ldr	r2, [pc, #148]	; (8006288 <HAL_DMA_Init+0x1e8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00e      	beq.n	8006214 <HAL_DMA_Init+0x174>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a24      	ldr	r2, [pc, #144]	; (800628c <HAL_DMA_Init+0x1ec>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d009      	beq.n	8006214 <HAL_DMA_Init+0x174>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a22      	ldr	r2, [pc, #136]	; (8006290 <HAL_DMA_Init+0x1f0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <HAL_DMA_Init+0x174>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a21      	ldr	r2, [pc, #132]	; (8006294 <HAL_DMA_Init+0x1f4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d108      	bne.n	8006226 <HAL_DMA_Init+0x186>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e007      	b.n	8006236 <HAL_DMA_Init+0x196>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006236:	e02f      	b.n	8006298 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006238:	f7fd fe0a 	bl	8003e50 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b05      	cmp	r3, #5
 8006244:	d928      	bls.n	8006298 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2203      	movs	r2, #3
 8006250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e246      	b.n	80066e6 <HAL_DMA_Init+0x646>
 8006258:	40020010 	.word	0x40020010
 800625c:	40020028 	.word	0x40020028
 8006260:	40020040 	.word	0x40020040
 8006264:	40020058 	.word	0x40020058
 8006268:	40020070 	.word	0x40020070
 800626c:	40020088 	.word	0x40020088
 8006270:	400200a0 	.word	0x400200a0
 8006274:	400200b8 	.word	0x400200b8
 8006278:	40020410 	.word	0x40020410
 800627c:	40020428 	.word	0x40020428
 8006280:	40020440 	.word	0x40020440
 8006284:	40020458 	.word	0x40020458
 8006288:	40020470 	.word	0x40020470
 800628c:	40020488 	.word	0x40020488
 8006290:	400204a0 	.word	0x400204a0
 8006294:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1c8      	bne.n	8006238 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4b83      	ldr	r3, [pc, #524]	; (80064c0 <HAL_DMA_Init+0x420>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80062be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d107      	bne.n	80062fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	4313      	orrs	r3, r2
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80062fc:	4b71      	ldr	r3, [pc, #452]	; (80064c4 <HAL_DMA_Init+0x424>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b71      	ldr	r3, [pc, #452]	; (80064c8 <HAL_DMA_Init+0x428>)
 8006302:	4013      	ands	r3, r2
 8006304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006308:	d328      	bcc.n	800635c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b28      	cmp	r3, #40	; 0x28
 8006310:	d903      	bls.n	800631a <HAL_DMA_Init+0x27a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b2e      	cmp	r3, #46	; 0x2e
 8006318:	d917      	bls.n	800634a <HAL_DMA_Init+0x2aa>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b3e      	cmp	r3, #62	; 0x3e
 8006320:	d903      	bls.n	800632a <HAL_DMA_Init+0x28a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b42      	cmp	r3, #66	; 0x42
 8006328:	d90f      	bls.n	800634a <HAL_DMA_Init+0x2aa>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b46      	cmp	r3, #70	; 0x46
 8006330:	d903      	bls.n	800633a <HAL_DMA_Init+0x29a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b48      	cmp	r3, #72	; 0x48
 8006338:	d907      	bls.n	800634a <HAL_DMA_Init+0x2aa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b4e      	cmp	r3, #78	; 0x4e
 8006340:	d905      	bls.n	800634e <HAL_DMA_Init+0x2ae>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b52      	cmp	r3, #82	; 0x52
 8006348:	d801      	bhi.n	800634e <HAL_DMA_Init+0x2ae>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <HAL_DMA_Init+0x2b0>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800635a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0307 	bic.w	r3, r3, #7
 8006372:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b04      	cmp	r3, #4
 8006384:	d117      	bne.n	80063b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f002 fb3f 	bl	8008a1c <DMA_CheckFifoParam>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2240      	movs	r2, #64	; 0x40
 80063a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e197      	b.n	80066e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f002 fa7a 	bl	80088b8 <DMA_CalcBaseAndBitshift>
 80063c4:	4603      	mov	r3, r0
 80063c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	223f      	movs	r2, #63	; 0x3f
 80063d2:	409a      	lsls	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	e0cd      	b.n	8006576 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <HAL_DMA_Init+0x42c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <HAL_DMA_Init+0x38a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a39      	ldr	r2, [pc, #228]	; (80064d0 <HAL_DMA_Init+0x430>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <HAL_DMA_Init+0x38a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a38      	ldr	r2, [pc, #224]	; (80064d4 <HAL_DMA_Init+0x434>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_DMA_Init+0x38a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a36      	ldr	r2, [pc, #216]	; (80064d8 <HAL_DMA_Init+0x438>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_DMA_Init+0x38a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a35      	ldr	r2, [pc, #212]	; (80064dc <HAL_DMA_Init+0x43c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_DMA_Init+0x38a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a33      	ldr	r2, [pc, #204]	; (80064e0 <HAL_DMA_Init+0x440>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_DMA_Init+0x38a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a32      	ldr	r2, [pc, #200]	; (80064e4 <HAL_DMA_Init+0x444>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_DMA_Init+0x38a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a30      	ldr	r2, [pc, #192]	; (80064e8 <HAL_DMA_Init+0x448>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d101      	bne.n	800642e <HAL_DMA_Init+0x38e>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <HAL_DMA_Init+0x390>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8097 	beq.w	8006564 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a24      	ldr	r2, [pc, #144]	; (80064cc <HAL_DMA_Init+0x42c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d021      	beq.n	8006484 <HAL_DMA_Init+0x3e4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a22      	ldr	r2, [pc, #136]	; (80064d0 <HAL_DMA_Init+0x430>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01c      	beq.n	8006484 <HAL_DMA_Init+0x3e4>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_DMA_Init+0x434>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d017      	beq.n	8006484 <HAL_DMA_Init+0x3e4>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1f      	ldr	r2, [pc, #124]	; (80064d8 <HAL_DMA_Init+0x438>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d012      	beq.n	8006484 <HAL_DMA_Init+0x3e4>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <HAL_DMA_Init+0x43c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00d      	beq.n	8006484 <HAL_DMA_Init+0x3e4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <HAL_DMA_Init+0x440>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d008      	beq.n	8006484 <HAL_DMA_Init+0x3e4>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <HAL_DMA_Init+0x444>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <HAL_DMA_Init+0x3e4>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <HAL_DMA_Init+0x448>)
 8006482:	4293      	cmp	r3, r2
 8006484:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_DMA_Init+0x44c>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d020      	beq.n	80064f0 <HAL_DMA_Init+0x450>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d102      	bne.n	80064bc <HAL_DMA_Init+0x41c>
 80064b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064ba:	e01a      	b.n	80064f2 <HAL_DMA_Init+0x452>
 80064bc:	2300      	movs	r3, #0
 80064be:	e018      	b.n	80064f2 <HAL_DMA_Init+0x452>
 80064c0:	fe10803f 	.word	0xfe10803f
 80064c4:	5c001000 	.word	0x5c001000
 80064c8:	ffff0000 	.word	0xffff0000
 80064cc:	58025408 	.word	0x58025408
 80064d0:	5802541c 	.word	0x5802541c
 80064d4:	58025430 	.word	0x58025430
 80064d8:	58025444 	.word	0x58025444
 80064dc:	58025458 	.word	0x58025458
 80064e0:	5802546c 	.word	0x5802546c
 80064e4:	58025480 	.word	0x58025480
 80064e8:	58025494 	.word	0x58025494
 80064ec:	fffe000f 	.word	0xfffe000f
 80064f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68d2      	ldr	r2, [r2, #12]
 80064f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006500:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006508:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006510:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006518:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006520:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	4b6e      	ldr	r3, [pc, #440]	; (80066f0 <HAL_DMA_Init+0x650>)
 8006538:	4413      	add	r3, r2
 800653a:	4a6e      	ldr	r2, [pc, #440]	; (80066f4 <HAL_DMA_Init+0x654>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	009a      	lsls	r2, r3, #2
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f002 f9b5 	bl	80088b8 <DMA_CalcBaseAndBitshift>
 800654e:	4603      	mov	r3, r0
 8006550:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2201      	movs	r2, #1
 800655c:	409a      	lsls	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e008      	b.n	8006576 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2240      	movs	r2, #64	; 0x40
 8006568:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2203      	movs	r2, #3
 800656e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e0b7      	b.n	80066e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a5f      	ldr	r2, [pc, #380]	; (80066f8 <HAL_DMA_Init+0x658>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d072      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a5d      	ldr	r2, [pc, #372]	; (80066fc <HAL_DMA_Init+0x65c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d06d      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a5c      	ldr	r2, [pc, #368]	; (8006700 <HAL_DMA_Init+0x660>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d068      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a5a      	ldr	r2, [pc, #360]	; (8006704 <HAL_DMA_Init+0x664>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d063      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a59      	ldr	r2, [pc, #356]	; (8006708 <HAL_DMA_Init+0x668>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d05e      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a57      	ldr	r2, [pc, #348]	; (800670c <HAL_DMA_Init+0x66c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d059      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a56      	ldr	r2, [pc, #344]	; (8006710 <HAL_DMA_Init+0x670>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d054      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a54      	ldr	r2, [pc, #336]	; (8006714 <HAL_DMA_Init+0x674>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d04f      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a53      	ldr	r2, [pc, #332]	; (8006718 <HAL_DMA_Init+0x678>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d04a      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a51      	ldr	r2, [pc, #324]	; (800671c <HAL_DMA_Init+0x67c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d045      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a50      	ldr	r2, [pc, #320]	; (8006720 <HAL_DMA_Init+0x680>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d040      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a4e      	ldr	r2, [pc, #312]	; (8006724 <HAL_DMA_Init+0x684>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d03b      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a4d      	ldr	r2, [pc, #308]	; (8006728 <HAL_DMA_Init+0x688>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d036      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a4b      	ldr	r2, [pc, #300]	; (800672c <HAL_DMA_Init+0x68c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d031      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a4a      	ldr	r2, [pc, #296]	; (8006730 <HAL_DMA_Init+0x690>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d02c      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a48      	ldr	r2, [pc, #288]	; (8006734 <HAL_DMA_Init+0x694>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d027      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a47      	ldr	r2, [pc, #284]	; (8006738 <HAL_DMA_Init+0x698>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d022      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a45      	ldr	r2, [pc, #276]	; (800673c <HAL_DMA_Init+0x69c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01d      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a44      	ldr	r2, [pc, #272]	; (8006740 <HAL_DMA_Init+0x6a0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a42      	ldr	r2, [pc, #264]	; (8006744 <HAL_DMA_Init+0x6a4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a41      	ldr	r2, [pc, #260]	; (8006748 <HAL_DMA_Init+0x6a8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00e      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a3f      	ldr	r2, [pc, #252]	; (800674c <HAL_DMA_Init+0x6ac>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d009      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a3e      	ldr	r2, [pc, #248]	; (8006750 <HAL_DMA_Init+0x6b0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_DMA_Init+0x5c6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a3c      	ldr	r2, [pc, #240]	; (8006754 <HAL_DMA_Init+0x6b4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <HAL_DMA_Init+0x5ca>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <HAL_DMA_Init+0x5cc>
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d032      	beq.n	80066d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 fa4f 	bl	8008b14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d102      	bne.n	8006684 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006698:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d010      	beq.n	80066c4 <HAL_DMA_Init+0x624>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d80c      	bhi.n	80066c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f002 facc 	bl	8008c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066c0:	605a      	str	r2, [r3, #4]
 80066c2:	e008      	b.n	80066d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	a7fdabf8 	.word	0xa7fdabf8
 80066f4:	cccccccd 	.word	0xcccccccd
 80066f8:	40020010 	.word	0x40020010
 80066fc:	40020028 	.word	0x40020028
 8006700:	40020040 	.word	0x40020040
 8006704:	40020058 	.word	0x40020058
 8006708:	40020070 	.word	0x40020070
 800670c:	40020088 	.word	0x40020088
 8006710:	400200a0 	.word	0x400200a0
 8006714:	400200b8 	.word	0x400200b8
 8006718:	40020410 	.word	0x40020410
 800671c:	40020428 	.word	0x40020428
 8006720:	40020440 	.word	0x40020440
 8006724:	40020458 	.word	0x40020458
 8006728:	40020470 	.word	0x40020470
 800672c:	40020488 	.word	0x40020488
 8006730:	400204a0 	.word	0x400204a0
 8006734:	400204b8 	.word	0x400204b8
 8006738:	58025408 	.word	0x58025408
 800673c:	5802541c 	.word	0x5802541c
 8006740:	58025430 	.word	0x58025430
 8006744:	58025444 	.word	0x58025444
 8006748:	58025458 	.word	0x58025458
 800674c:	5802546c 	.word	0x5802546c
 8006750:	58025480 	.word	0x58025480
 8006754:	58025494 	.word	0x58025494

08006758 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e226      	b.n	8006bc2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_DMA_Start_IT+0x2a>
 800677e:	2302      	movs	r3, #2
 8006780:	e21f      	b.n	8006bc2 <HAL_DMA_Start_IT+0x46a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	f040 820a 	bne.w	8006bac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a68      	ldr	r2, [pc, #416]	; (800694c <HAL_DMA_Start_IT+0x1f4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04a      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a66      	ldr	r2, [pc, #408]	; (8006950 <HAL_DMA_Start_IT+0x1f8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d045      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a65      	ldr	r2, [pc, #404]	; (8006954 <HAL_DMA_Start_IT+0x1fc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d040      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a63      	ldr	r2, [pc, #396]	; (8006958 <HAL_DMA_Start_IT+0x200>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d03b      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a62      	ldr	r2, [pc, #392]	; (800695c <HAL_DMA_Start_IT+0x204>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d036      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a60      	ldr	r2, [pc, #384]	; (8006960 <HAL_DMA_Start_IT+0x208>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d031      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a5f      	ldr	r2, [pc, #380]	; (8006964 <HAL_DMA_Start_IT+0x20c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d02c      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a5d      	ldr	r2, [pc, #372]	; (8006968 <HAL_DMA_Start_IT+0x210>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d027      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a5c      	ldr	r2, [pc, #368]	; (800696c <HAL_DMA_Start_IT+0x214>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a5a      	ldr	r2, [pc, #360]	; (8006970 <HAL_DMA_Start_IT+0x218>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a59      	ldr	r2, [pc, #356]	; (8006974 <HAL_DMA_Start_IT+0x21c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a57      	ldr	r2, [pc, #348]	; (8006978 <HAL_DMA_Start_IT+0x220>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a56      	ldr	r2, [pc, #344]	; (800697c <HAL_DMA_Start_IT+0x224>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a54      	ldr	r2, [pc, #336]	; (8006980 <HAL_DMA_Start_IT+0x228>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a53      	ldr	r2, [pc, #332]	; (8006984 <HAL_DMA_Start_IT+0x22c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_DMA_Start_IT+0xee>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a51      	ldr	r2, [pc, #324]	; (8006988 <HAL_DMA_Start_IT+0x230>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <HAL_DMA_Start_IT+0x100>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0201 	bic.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e007      	b.n	8006868 <HAL_DMA_Start_IT+0x110>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f001 fe76 	bl	8008560 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a34      	ldr	r2, [pc, #208]	; (800694c <HAL_DMA_Start_IT+0x1f4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d04a      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a33      	ldr	r2, [pc, #204]	; (8006950 <HAL_DMA_Start_IT+0x1f8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d045      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a31      	ldr	r2, [pc, #196]	; (8006954 <HAL_DMA_Start_IT+0x1fc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d040      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a30      	ldr	r2, [pc, #192]	; (8006958 <HAL_DMA_Start_IT+0x200>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d03b      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2e      	ldr	r2, [pc, #184]	; (800695c <HAL_DMA_Start_IT+0x204>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d036      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2d      	ldr	r2, [pc, #180]	; (8006960 <HAL_DMA_Start_IT+0x208>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d031      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <HAL_DMA_Start_IT+0x20c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d02c      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <HAL_DMA_Start_IT+0x210>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d027      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a28      	ldr	r2, [pc, #160]	; (800696c <HAL_DMA_Start_IT+0x214>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a27      	ldr	r2, [pc, #156]	; (8006970 <HAL_DMA_Start_IT+0x218>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d01d      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a25      	ldr	r2, [pc, #148]	; (8006974 <HAL_DMA_Start_IT+0x21c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a24      	ldr	r2, [pc, #144]	; (8006978 <HAL_DMA_Start_IT+0x220>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a22      	ldr	r2, [pc, #136]	; (800697c <HAL_DMA_Start_IT+0x224>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a21      	ldr	r2, [pc, #132]	; (8006980 <HAL_DMA_Start_IT+0x228>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1f      	ldr	r2, [pc, #124]	; (8006984 <HAL_DMA_Start_IT+0x22c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_DMA_Start_IT+0x1bc>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <HAL_DMA_Start_IT+0x230>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d101      	bne.n	8006918 <HAL_DMA_Start_IT+0x1c0>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <HAL_DMA_Start_IT+0x1c2>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d036      	beq.n	800698c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f023 021e 	bic.w	r2, r3, #30
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0216 	orr.w	r2, r2, #22
 8006930:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d03e      	beq.n	80069b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0208 	orr.w	r2, r2, #8
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e035      	b.n	80069b8 <HAL_DMA_Start_IT+0x260>
 800694c:	40020010 	.word	0x40020010
 8006950:	40020028 	.word	0x40020028
 8006954:	40020040 	.word	0x40020040
 8006958:	40020058 	.word	0x40020058
 800695c:	40020070 	.word	0x40020070
 8006960:	40020088 	.word	0x40020088
 8006964:	400200a0 	.word	0x400200a0
 8006968:	400200b8 	.word	0x400200b8
 800696c:	40020410 	.word	0x40020410
 8006970:	40020428 	.word	0x40020428
 8006974:	40020440 	.word	0x40020440
 8006978:	40020458 	.word	0x40020458
 800697c:	40020470 	.word	0x40020470
 8006980:	40020488 	.word	0x40020488
 8006984:	400204a0 	.word	0x400204a0
 8006988:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f023 020e 	bic.w	r2, r3, #14
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 020a 	orr.w	r2, r2, #10
 800699e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0204 	orr.w	r2, r2, #4
 80069b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a83      	ldr	r2, [pc, #524]	; (8006bcc <HAL_DMA_Start_IT+0x474>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d072      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a82      	ldr	r2, [pc, #520]	; (8006bd0 <HAL_DMA_Start_IT+0x478>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d06d      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a80      	ldr	r2, [pc, #512]	; (8006bd4 <HAL_DMA_Start_IT+0x47c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d068      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a7f      	ldr	r2, [pc, #508]	; (8006bd8 <HAL_DMA_Start_IT+0x480>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d063      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a7d      	ldr	r2, [pc, #500]	; (8006bdc <HAL_DMA_Start_IT+0x484>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d05e      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a7c      	ldr	r2, [pc, #496]	; (8006be0 <HAL_DMA_Start_IT+0x488>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d059      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a7a      	ldr	r2, [pc, #488]	; (8006be4 <HAL_DMA_Start_IT+0x48c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d054      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a79      	ldr	r2, [pc, #484]	; (8006be8 <HAL_DMA_Start_IT+0x490>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d04f      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a77      	ldr	r2, [pc, #476]	; (8006bec <HAL_DMA_Start_IT+0x494>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d04a      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a76      	ldr	r2, [pc, #472]	; (8006bf0 <HAL_DMA_Start_IT+0x498>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d045      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a74      	ldr	r2, [pc, #464]	; (8006bf4 <HAL_DMA_Start_IT+0x49c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d040      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a73      	ldr	r2, [pc, #460]	; (8006bf8 <HAL_DMA_Start_IT+0x4a0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d03b      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a71      	ldr	r2, [pc, #452]	; (8006bfc <HAL_DMA_Start_IT+0x4a4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d036      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a70      	ldr	r2, [pc, #448]	; (8006c00 <HAL_DMA_Start_IT+0x4a8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d031      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a6e      	ldr	r2, [pc, #440]	; (8006c04 <HAL_DMA_Start_IT+0x4ac>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02c      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6d      	ldr	r2, [pc, #436]	; (8006c08 <HAL_DMA_Start_IT+0x4b0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d027      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a6b      	ldr	r2, [pc, #428]	; (8006c0c <HAL_DMA_Start_IT+0x4b4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d022      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a6a      	ldr	r2, [pc, #424]	; (8006c10 <HAL_DMA_Start_IT+0x4b8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d01d      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a68      	ldr	r2, [pc, #416]	; (8006c14 <HAL_DMA_Start_IT+0x4bc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a67      	ldr	r2, [pc, #412]	; (8006c18 <HAL_DMA_Start_IT+0x4c0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a65      	ldr	r2, [pc, #404]	; (8006c1c <HAL_DMA_Start_IT+0x4c4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a64      	ldr	r2, [pc, #400]	; (8006c20 <HAL_DMA_Start_IT+0x4c8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a62      	ldr	r2, [pc, #392]	; (8006c24 <HAL_DMA_Start_IT+0x4cc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x350>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a61      	ldr	r2, [pc, #388]	; (8006c28 <HAL_DMA_Start_IT+0x4d0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d101      	bne.n	8006aac <HAL_DMA_Start_IT+0x354>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <HAL_DMA_Start_IT+0x356>
 8006aac:	2300      	movs	r3, #0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01a      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ace:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a37      	ldr	r2, [pc, #220]	; (8006bcc <HAL_DMA_Start_IT+0x474>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d04a      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <HAL_DMA_Start_IT+0x478>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d045      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a34      	ldr	r2, [pc, #208]	; (8006bd4 <HAL_DMA_Start_IT+0x47c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d040      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a33      	ldr	r2, [pc, #204]	; (8006bd8 <HAL_DMA_Start_IT+0x480>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d03b      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a31      	ldr	r2, [pc, #196]	; (8006bdc <HAL_DMA_Start_IT+0x484>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d036      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <HAL_DMA_Start_IT+0x488>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d031      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2e      	ldr	r2, [pc, #184]	; (8006be4 <HAL_DMA_Start_IT+0x48c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d02c      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2d      	ldr	r2, [pc, #180]	; (8006be8 <HAL_DMA_Start_IT+0x490>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d027      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2b      	ldr	r2, [pc, #172]	; (8006bec <HAL_DMA_Start_IT+0x494>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d022      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <HAL_DMA_Start_IT+0x498>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d01d      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <HAL_DMA_Start_IT+0x49c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d018      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <HAL_DMA_Start_IT+0x4a0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a25      	ldr	r2, [pc, #148]	; (8006bfc <HAL_DMA_Start_IT+0x4a4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00e      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a24      	ldr	r2, [pc, #144]	; (8006c00 <HAL_DMA_Start_IT+0x4a8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d009      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a22      	ldr	r2, [pc, #136]	; (8006c04 <HAL_DMA_Start_IT+0x4ac>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_DMA_Start_IT+0x430>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a21      	ldr	r2, [pc, #132]	; (8006c08 <HAL_DMA_Start_IT+0x4b0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d108      	bne.n	8006b9a <HAL_DMA_Start_IT+0x442>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e012      	b.n	8006bc0 <HAL_DMA_Start_IT+0x468>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e009      	b.n	8006bc0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40020010 	.word	0x40020010
 8006bd0:	40020028 	.word	0x40020028
 8006bd4:	40020040 	.word	0x40020040
 8006bd8:	40020058 	.word	0x40020058
 8006bdc:	40020070 	.word	0x40020070
 8006be0:	40020088 	.word	0x40020088
 8006be4:	400200a0 	.word	0x400200a0
 8006be8:	400200b8 	.word	0x400200b8
 8006bec:	40020410 	.word	0x40020410
 8006bf0:	40020428 	.word	0x40020428
 8006bf4:	40020440 	.word	0x40020440
 8006bf8:	40020458 	.word	0x40020458
 8006bfc:	40020470 	.word	0x40020470
 8006c00:	40020488 	.word	0x40020488
 8006c04:	400204a0 	.word	0x400204a0
 8006c08:	400204b8 	.word	0x400204b8
 8006c0c:	58025408 	.word	0x58025408
 8006c10:	5802541c 	.word	0x5802541c
 8006c14:	58025430 	.word	0x58025430
 8006c18:	58025444 	.word	0x58025444
 8006c1c:	58025458 	.word	0x58025458
 8006c20:	5802546c 	.word	0x5802546c
 8006c24:	58025480 	.word	0x58025480
 8006c28:	58025494 	.word	0x58025494

08006c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c34:	f7fd f90c 	bl	8003e50 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e2dc      	b.n	80071fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d008      	beq.n	8006c62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2280      	movs	r2, #128	; 0x80
 8006c54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e2cd      	b.n	80071fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a76      	ldr	r2, [pc, #472]	; (8006e40 <HAL_DMA_Abort+0x214>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04a      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a74      	ldr	r2, [pc, #464]	; (8006e44 <HAL_DMA_Abort+0x218>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d045      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a73      	ldr	r2, [pc, #460]	; (8006e48 <HAL_DMA_Abort+0x21c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d040      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a71      	ldr	r2, [pc, #452]	; (8006e4c <HAL_DMA_Abort+0x220>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a70      	ldr	r2, [pc, #448]	; (8006e50 <HAL_DMA_Abort+0x224>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d036      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a6e      	ldr	r2, [pc, #440]	; (8006e54 <HAL_DMA_Abort+0x228>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d031      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a6d      	ldr	r2, [pc, #436]	; (8006e58 <HAL_DMA_Abort+0x22c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d02c      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a6b      	ldr	r2, [pc, #428]	; (8006e5c <HAL_DMA_Abort+0x230>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d027      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a6a      	ldr	r2, [pc, #424]	; (8006e60 <HAL_DMA_Abort+0x234>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a68      	ldr	r2, [pc, #416]	; (8006e64 <HAL_DMA_Abort+0x238>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a67      	ldr	r2, [pc, #412]	; (8006e68 <HAL_DMA_Abort+0x23c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a65      	ldr	r2, [pc, #404]	; (8006e6c <HAL_DMA_Abort+0x240>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a64      	ldr	r2, [pc, #400]	; (8006e70 <HAL_DMA_Abort+0x244>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a62      	ldr	r2, [pc, #392]	; (8006e74 <HAL_DMA_Abort+0x248>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a61      	ldr	r2, [pc, #388]	; (8006e78 <HAL_DMA_Abort+0x24c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_DMA_Abort+0xd6>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a5f      	ldr	r2, [pc, #380]	; (8006e7c <HAL_DMA_Abort+0x250>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d101      	bne.n	8006d06 <HAL_DMA_Abort+0xda>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <HAL_DMA_Abort+0xdc>
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d013      	beq.n	8006d34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 021e 	bic.w	r2, r2, #30
 8006d1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e00a      	b.n	8006d4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 020e 	bic.w	r2, r2, #14
 8006d42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a3c      	ldr	r2, [pc, #240]	; (8006e40 <HAL_DMA_Abort+0x214>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d072      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a3a      	ldr	r2, [pc, #232]	; (8006e44 <HAL_DMA_Abort+0x218>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d06d      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a39      	ldr	r2, [pc, #228]	; (8006e48 <HAL_DMA_Abort+0x21c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d068      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a37      	ldr	r2, [pc, #220]	; (8006e4c <HAL_DMA_Abort+0x220>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d063      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a36      	ldr	r2, [pc, #216]	; (8006e50 <HAL_DMA_Abort+0x224>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d05e      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a34      	ldr	r2, [pc, #208]	; (8006e54 <HAL_DMA_Abort+0x228>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d059      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a33      	ldr	r2, [pc, #204]	; (8006e58 <HAL_DMA_Abort+0x22c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d054      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a31      	ldr	r2, [pc, #196]	; (8006e5c <HAL_DMA_Abort+0x230>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d04f      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a30      	ldr	r2, [pc, #192]	; (8006e60 <HAL_DMA_Abort+0x234>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d04a      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a2e      	ldr	r2, [pc, #184]	; (8006e64 <HAL_DMA_Abort+0x238>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d045      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a2d      	ldr	r2, [pc, #180]	; (8006e68 <HAL_DMA_Abort+0x23c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d040      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2b      	ldr	r2, [pc, #172]	; (8006e6c <HAL_DMA_Abort+0x240>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d03b      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <HAL_DMA_Abort+0x244>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d036      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a28      	ldr	r2, [pc, #160]	; (8006e74 <HAL_DMA_Abort+0x248>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d031      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a27      	ldr	r2, [pc, #156]	; (8006e78 <HAL_DMA_Abort+0x24c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d02c      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a25      	ldr	r2, [pc, #148]	; (8006e7c <HAL_DMA_Abort+0x250>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d027      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a24      	ldr	r2, [pc, #144]	; (8006e80 <HAL_DMA_Abort+0x254>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d022      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a22      	ldr	r2, [pc, #136]	; (8006e84 <HAL_DMA_Abort+0x258>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d01d      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a21      	ldr	r2, [pc, #132]	; (8006e88 <HAL_DMA_Abort+0x25c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d018      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <HAL_DMA_Abort+0x260>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <HAL_DMA_Abort+0x264>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00e      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <HAL_DMA_Abort+0x268>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <HAL_DMA_Abort+0x26c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_DMA_Abort+0x20e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a19      	ldr	r2, [pc, #100]	; (8006e9c <HAL_DMA_Abort+0x270>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d132      	bne.n	8006ea0 <HAL_DMA_Abort+0x274>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e031      	b.n	8006ea2 <HAL_DMA_Abort+0x276>
 8006e3e:	bf00      	nop
 8006e40:	40020010 	.word	0x40020010
 8006e44:	40020028 	.word	0x40020028
 8006e48:	40020040 	.word	0x40020040
 8006e4c:	40020058 	.word	0x40020058
 8006e50:	40020070 	.word	0x40020070
 8006e54:	40020088 	.word	0x40020088
 8006e58:	400200a0 	.word	0x400200a0
 8006e5c:	400200b8 	.word	0x400200b8
 8006e60:	40020410 	.word	0x40020410
 8006e64:	40020428 	.word	0x40020428
 8006e68:	40020440 	.word	0x40020440
 8006e6c:	40020458 	.word	0x40020458
 8006e70:	40020470 	.word	0x40020470
 8006e74:	40020488 	.word	0x40020488
 8006e78:	400204a0 	.word	0x400204a0
 8006e7c:	400204b8 	.word	0x400204b8
 8006e80:	58025408 	.word	0x58025408
 8006e84:	5802541c 	.word	0x5802541c
 8006e88:	58025430 	.word	0x58025430
 8006e8c:	58025444 	.word	0x58025444
 8006e90:	58025458 	.word	0x58025458
 8006e94:	5802546c 	.word	0x5802546c
 8006e98:	58025480 	.word	0x58025480
 8006e9c:	58025494 	.word	0x58025494
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a6d      	ldr	r2, [pc, #436]	; (8007070 <HAL_DMA_Abort+0x444>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d04a      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a6b      	ldr	r2, [pc, #428]	; (8007074 <HAL_DMA_Abort+0x448>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d045      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a6a      	ldr	r2, [pc, #424]	; (8007078 <HAL_DMA_Abort+0x44c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d040      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a68      	ldr	r2, [pc, #416]	; (800707c <HAL_DMA_Abort+0x450>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d03b      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a67      	ldr	r2, [pc, #412]	; (8007080 <HAL_DMA_Abort+0x454>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d036      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a65      	ldr	r2, [pc, #404]	; (8007084 <HAL_DMA_Abort+0x458>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d031      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a64      	ldr	r2, [pc, #400]	; (8007088 <HAL_DMA_Abort+0x45c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d02c      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a62      	ldr	r2, [pc, #392]	; (800708c <HAL_DMA_Abort+0x460>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d027      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a61      	ldr	r2, [pc, #388]	; (8007090 <HAL_DMA_Abort+0x464>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d022      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a5f      	ldr	r2, [pc, #380]	; (8007094 <HAL_DMA_Abort+0x468>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01d      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a5e      	ldr	r2, [pc, #376]	; (8007098 <HAL_DMA_Abort+0x46c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d018      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a5c      	ldr	r2, [pc, #368]	; (800709c <HAL_DMA_Abort+0x470>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a5b      	ldr	r2, [pc, #364]	; (80070a0 <HAL_DMA_Abort+0x474>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00e      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a59      	ldr	r2, [pc, #356]	; (80070a4 <HAL_DMA_Abort+0x478>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a58      	ldr	r2, [pc, #352]	; (80070a8 <HAL_DMA_Abort+0x47c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_DMA_Abort+0x32a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a56      	ldr	r2, [pc, #344]	; (80070ac <HAL_DMA_Abort+0x480>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d108      	bne.n	8006f68 <HAL_DMA_Abort+0x33c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e007      	b.n	8006f78 <HAL_DMA_Abort+0x34c>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f78:	e013      	b.n	8006fa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f7a:	f7fc ff69 	bl	8003e50 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d90c      	bls.n	8006fa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e12d      	b.n	80071fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2f      	ldr	r2, [pc, #188]	; (8007070 <HAL_DMA_Abort+0x444>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d04a      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2d      	ldr	r2, [pc, #180]	; (8007074 <HAL_DMA_Abort+0x448>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d045      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2c      	ldr	r2, [pc, #176]	; (8007078 <HAL_DMA_Abort+0x44c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d040      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2a      	ldr	r2, [pc, #168]	; (800707c <HAL_DMA_Abort+0x450>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d03b      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a29      	ldr	r2, [pc, #164]	; (8007080 <HAL_DMA_Abort+0x454>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d036      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a27      	ldr	r2, [pc, #156]	; (8007084 <HAL_DMA_Abort+0x458>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d031      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a26      	ldr	r2, [pc, #152]	; (8007088 <HAL_DMA_Abort+0x45c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d02c      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a24      	ldr	r2, [pc, #144]	; (800708c <HAL_DMA_Abort+0x460>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d027      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a23      	ldr	r2, [pc, #140]	; (8007090 <HAL_DMA_Abort+0x464>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d022      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a21      	ldr	r2, [pc, #132]	; (8007094 <HAL_DMA_Abort+0x468>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01d      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a20      	ldr	r2, [pc, #128]	; (8007098 <HAL_DMA_Abort+0x46c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d018      	beq.n	800704e <HAL_DMA_Abort+0x422>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1e      	ldr	r2, [pc, #120]	; (800709c <HAL_DMA_Abort+0x470>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1d      	ldr	r2, [pc, #116]	; (80070a0 <HAL_DMA_Abort+0x474>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a1b      	ldr	r2, [pc, #108]	; (80070a4 <HAL_DMA_Abort+0x478>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_DMA_Abort+0x422>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a1a      	ldr	r2, [pc, #104]	; (80070a8 <HAL_DMA_Abort+0x47c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_DMA_Abort+0x422>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a18      	ldr	r2, [pc, #96]	; (80070ac <HAL_DMA_Abort+0x480>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d101      	bne.n	8007052 <HAL_DMA_Abort+0x426>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <HAL_DMA_Abort+0x428>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02b      	beq.n	80070b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	223f      	movs	r2, #63	; 0x3f
 8007068:	409a      	lsls	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	609a      	str	r2, [r3, #8]
 800706e:	e02a      	b.n	80070c6 <HAL_DMA_Abort+0x49a>
 8007070:	40020010 	.word	0x40020010
 8007074:	40020028 	.word	0x40020028
 8007078:	40020040 	.word	0x40020040
 800707c:	40020058 	.word	0x40020058
 8007080:	40020070 	.word	0x40020070
 8007084:	40020088 	.word	0x40020088
 8007088:	400200a0 	.word	0x400200a0
 800708c:	400200b8 	.word	0x400200b8
 8007090:	40020410 	.word	0x40020410
 8007094:	40020428 	.word	0x40020428
 8007098:	40020440 	.word	0x40020440
 800709c:	40020458 	.word	0x40020458
 80070a0:	40020470 	.word	0x40020470
 80070a4:	40020488 	.word	0x40020488
 80070a8:	400204a0 	.word	0x400204a0
 80070ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2201      	movs	r2, #1
 80070c0:	409a      	lsls	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a4f      	ldr	r2, [pc, #316]	; (8007208 <HAL_DMA_Abort+0x5dc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d072      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a4d      	ldr	r2, [pc, #308]	; (800720c <HAL_DMA_Abort+0x5e0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d06d      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a4c      	ldr	r2, [pc, #304]	; (8007210 <HAL_DMA_Abort+0x5e4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d068      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a4a      	ldr	r2, [pc, #296]	; (8007214 <HAL_DMA_Abort+0x5e8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d063      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a49      	ldr	r2, [pc, #292]	; (8007218 <HAL_DMA_Abort+0x5ec>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d05e      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a47      	ldr	r2, [pc, #284]	; (800721c <HAL_DMA_Abort+0x5f0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d059      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a46      	ldr	r2, [pc, #280]	; (8007220 <HAL_DMA_Abort+0x5f4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d054      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a44      	ldr	r2, [pc, #272]	; (8007224 <HAL_DMA_Abort+0x5f8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d04f      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a43      	ldr	r2, [pc, #268]	; (8007228 <HAL_DMA_Abort+0x5fc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d04a      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a41      	ldr	r2, [pc, #260]	; (800722c <HAL_DMA_Abort+0x600>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d045      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a40      	ldr	r2, [pc, #256]	; (8007230 <HAL_DMA_Abort+0x604>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d040      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3e      	ldr	r2, [pc, #248]	; (8007234 <HAL_DMA_Abort+0x608>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d03b      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3d      	ldr	r2, [pc, #244]	; (8007238 <HAL_DMA_Abort+0x60c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d036      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3b      	ldr	r2, [pc, #236]	; (800723c <HAL_DMA_Abort+0x610>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d031      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a3a      	ldr	r2, [pc, #232]	; (8007240 <HAL_DMA_Abort+0x614>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d02c      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a38      	ldr	r2, [pc, #224]	; (8007244 <HAL_DMA_Abort+0x618>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d027      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a37      	ldr	r2, [pc, #220]	; (8007248 <HAL_DMA_Abort+0x61c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d022      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a35      	ldr	r2, [pc, #212]	; (800724c <HAL_DMA_Abort+0x620>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01d      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a34      	ldr	r2, [pc, #208]	; (8007250 <HAL_DMA_Abort+0x624>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d018      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a32      	ldr	r2, [pc, #200]	; (8007254 <HAL_DMA_Abort+0x628>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d013      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a31      	ldr	r2, [pc, #196]	; (8007258 <HAL_DMA_Abort+0x62c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00e      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a2f      	ldr	r2, [pc, #188]	; (800725c <HAL_DMA_Abort+0x630>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2e      	ldr	r2, [pc, #184]	; (8007260 <HAL_DMA_Abort+0x634>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_DMA_Abort+0x58a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2c      	ldr	r2, [pc, #176]	; (8007264 <HAL_DMA_Abort+0x638>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d101      	bne.n	80071ba <HAL_DMA_Abort+0x58e>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e000      	b.n	80071bc <HAL_DMA_Abort+0x590>
 80071ba:	2300      	movs	r3, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d015      	beq.n	80071ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00c      	beq.n	80071ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40020010 	.word	0x40020010
 800720c:	40020028 	.word	0x40020028
 8007210:	40020040 	.word	0x40020040
 8007214:	40020058 	.word	0x40020058
 8007218:	40020070 	.word	0x40020070
 800721c:	40020088 	.word	0x40020088
 8007220:	400200a0 	.word	0x400200a0
 8007224:	400200b8 	.word	0x400200b8
 8007228:	40020410 	.word	0x40020410
 800722c:	40020428 	.word	0x40020428
 8007230:	40020440 	.word	0x40020440
 8007234:	40020458 	.word	0x40020458
 8007238:	40020470 	.word	0x40020470
 800723c:	40020488 	.word	0x40020488
 8007240:	400204a0 	.word	0x400204a0
 8007244:	400204b8 	.word	0x400204b8
 8007248:	58025408 	.word	0x58025408
 800724c:	5802541c 	.word	0x5802541c
 8007250:	58025430 	.word	0x58025430
 8007254:	58025444 	.word	0x58025444
 8007258:	58025458 	.word	0x58025458
 800725c:	5802546c 	.word	0x5802546c
 8007260:	58025480 	.word	0x58025480
 8007264:	58025494 	.word	0x58025494

08007268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e237      	b.n	80076ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d004      	beq.n	8007290 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2280      	movs	r2, #128	; 0x80
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e22c      	b.n	80076ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a5c      	ldr	r2, [pc, #368]	; (8007408 <HAL_DMA_Abort_IT+0x1a0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d04a      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a5b      	ldr	r2, [pc, #364]	; (800740c <HAL_DMA_Abort_IT+0x1a4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d045      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a59      	ldr	r2, [pc, #356]	; (8007410 <HAL_DMA_Abort_IT+0x1a8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d040      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a58      	ldr	r2, [pc, #352]	; (8007414 <HAL_DMA_Abort_IT+0x1ac>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d03b      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a56      	ldr	r2, [pc, #344]	; (8007418 <HAL_DMA_Abort_IT+0x1b0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d036      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a55      	ldr	r2, [pc, #340]	; (800741c <HAL_DMA_Abort_IT+0x1b4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d031      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a53      	ldr	r2, [pc, #332]	; (8007420 <HAL_DMA_Abort_IT+0x1b8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d02c      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a52      	ldr	r2, [pc, #328]	; (8007424 <HAL_DMA_Abort_IT+0x1bc>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d027      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a50      	ldr	r2, [pc, #320]	; (8007428 <HAL_DMA_Abort_IT+0x1c0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d022      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a4f      	ldr	r2, [pc, #316]	; (800742c <HAL_DMA_Abort_IT+0x1c4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d01d      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a4d      	ldr	r2, [pc, #308]	; (8007430 <HAL_DMA_Abort_IT+0x1c8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d018      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a4c      	ldr	r2, [pc, #304]	; (8007434 <HAL_DMA_Abort_IT+0x1cc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a4a      	ldr	r2, [pc, #296]	; (8007438 <HAL_DMA_Abort_IT+0x1d0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a49      	ldr	r2, [pc, #292]	; (800743c <HAL_DMA_Abort_IT+0x1d4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d009      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a47      	ldr	r2, [pc, #284]	; (8007440 <HAL_DMA_Abort_IT+0x1d8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_DMA_Abort_IT+0xc8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a46      	ldr	r2, [pc, #280]	; (8007444 <HAL_DMA_Abort_IT+0x1dc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d101      	bne.n	8007334 <HAL_DMA_Abort_IT+0xcc>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <HAL_DMA_Abort_IT+0xce>
 8007334:	2300      	movs	r3, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8086 	beq.w	8007448 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2204      	movs	r2, #4
 8007340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2f      	ldr	r2, [pc, #188]	; (8007408 <HAL_DMA_Abort_IT+0x1a0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d04a      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2e      	ldr	r2, [pc, #184]	; (800740c <HAL_DMA_Abort_IT+0x1a4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d045      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <HAL_DMA_Abort_IT+0x1a8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d040      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a2b      	ldr	r2, [pc, #172]	; (8007414 <HAL_DMA_Abort_IT+0x1ac>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d03b      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a29      	ldr	r2, [pc, #164]	; (8007418 <HAL_DMA_Abort_IT+0x1b0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d036      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a28      	ldr	r2, [pc, #160]	; (800741c <HAL_DMA_Abort_IT+0x1b4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d031      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a26      	ldr	r2, [pc, #152]	; (8007420 <HAL_DMA_Abort_IT+0x1b8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d02c      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a25      	ldr	r2, [pc, #148]	; (8007424 <HAL_DMA_Abort_IT+0x1bc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d027      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a23      	ldr	r2, [pc, #140]	; (8007428 <HAL_DMA_Abort_IT+0x1c0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d022      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a22      	ldr	r2, [pc, #136]	; (800742c <HAL_DMA_Abort_IT+0x1c4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d01d      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a20      	ldr	r2, [pc, #128]	; (8007430 <HAL_DMA_Abort_IT+0x1c8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d018      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1f      	ldr	r2, [pc, #124]	; (8007434 <HAL_DMA_Abort_IT+0x1cc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d013      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1d      	ldr	r2, [pc, #116]	; (8007438 <HAL_DMA_Abort_IT+0x1d0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00e      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1c      	ldr	r2, [pc, #112]	; (800743c <HAL_DMA_Abort_IT+0x1d4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d009      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <HAL_DMA_Abort_IT+0x1d8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d004      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x17c>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a19      	ldr	r2, [pc, #100]	; (8007444 <HAL_DMA_Abort_IT+0x1dc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d108      	bne.n	80073f6 <HAL_DMA_Abort_IT+0x18e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e178      	b.n	80076e8 <HAL_DMA_Abort_IT+0x480>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e16f      	b.n	80076e8 <HAL_DMA_Abort_IT+0x480>
 8007408:	40020010 	.word	0x40020010
 800740c:	40020028 	.word	0x40020028
 8007410:	40020040 	.word	0x40020040
 8007414:	40020058 	.word	0x40020058
 8007418:	40020070 	.word	0x40020070
 800741c:	40020088 	.word	0x40020088
 8007420:	400200a0 	.word	0x400200a0
 8007424:	400200b8 	.word	0x400200b8
 8007428:	40020410 	.word	0x40020410
 800742c:	40020428 	.word	0x40020428
 8007430:	40020440 	.word	0x40020440
 8007434:	40020458 	.word	0x40020458
 8007438:	40020470 	.word	0x40020470
 800743c:	40020488 	.word	0x40020488
 8007440:	400204a0 	.word	0x400204a0
 8007444:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 020e 	bic.w	r2, r2, #14
 8007456:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a6c      	ldr	r2, [pc, #432]	; (8007610 <HAL_DMA_Abort_IT+0x3a8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d04a      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a6b      	ldr	r2, [pc, #428]	; (8007614 <HAL_DMA_Abort_IT+0x3ac>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d045      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a69      	ldr	r2, [pc, #420]	; (8007618 <HAL_DMA_Abort_IT+0x3b0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d040      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a68      	ldr	r2, [pc, #416]	; (800761c <HAL_DMA_Abort_IT+0x3b4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d03b      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a66      	ldr	r2, [pc, #408]	; (8007620 <HAL_DMA_Abort_IT+0x3b8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d036      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a65      	ldr	r2, [pc, #404]	; (8007624 <HAL_DMA_Abort_IT+0x3bc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d031      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a63      	ldr	r2, [pc, #396]	; (8007628 <HAL_DMA_Abort_IT+0x3c0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d02c      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a62      	ldr	r2, [pc, #392]	; (800762c <HAL_DMA_Abort_IT+0x3c4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d027      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a60      	ldr	r2, [pc, #384]	; (8007630 <HAL_DMA_Abort_IT+0x3c8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d022      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a5f      	ldr	r2, [pc, #380]	; (8007634 <HAL_DMA_Abort_IT+0x3cc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d01d      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5d      	ldr	r2, [pc, #372]	; (8007638 <HAL_DMA_Abort_IT+0x3d0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d018      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a5c      	ldr	r2, [pc, #368]	; (800763c <HAL_DMA_Abort_IT+0x3d4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d013      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a5a      	ldr	r2, [pc, #360]	; (8007640 <HAL_DMA_Abort_IT+0x3d8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00e      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a59      	ldr	r2, [pc, #356]	; (8007644 <HAL_DMA_Abort_IT+0x3dc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d009      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a57      	ldr	r2, [pc, #348]	; (8007648 <HAL_DMA_Abort_IT+0x3e0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d004      	beq.n	80074f8 <HAL_DMA_Abort_IT+0x290>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a56      	ldr	r2, [pc, #344]	; (800764c <HAL_DMA_Abort_IT+0x3e4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d108      	bne.n	800750a <HAL_DMA_Abort_IT+0x2a2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0201 	bic.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	e007      	b.n	800751a <HAL_DMA_Abort_IT+0x2b2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a3c      	ldr	r2, [pc, #240]	; (8007610 <HAL_DMA_Abort_IT+0x3a8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d072      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a3a      	ldr	r2, [pc, #232]	; (8007614 <HAL_DMA_Abort_IT+0x3ac>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d06d      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a39      	ldr	r2, [pc, #228]	; (8007618 <HAL_DMA_Abort_IT+0x3b0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d068      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a37      	ldr	r2, [pc, #220]	; (800761c <HAL_DMA_Abort_IT+0x3b4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d063      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a36      	ldr	r2, [pc, #216]	; (8007620 <HAL_DMA_Abort_IT+0x3b8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d05e      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a34      	ldr	r2, [pc, #208]	; (8007624 <HAL_DMA_Abort_IT+0x3bc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d059      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a33      	ldr	r2, [pc, #204]	; (8007628 <HAL_DMA_Abort_IT+0x3c0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d054      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a31      	ldr	r2, [pc, #196]	; (800762c <HAL_DMA_Abort_IT+0x3c4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d04f      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a30      	ldr	r2, [pc, #192]	; (8007630 <HAL_DMA_Abort_IT+0x3c8>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d04a      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a2e      	ldr	r2, [pc, #184]	; (8007634 <HAL_DMA_Abort_IT+0x3cc>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d045      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2d      	ldr	r2, [pc, #180]	; (8007638 <HAL_DMA_Abort_IT+0x3d0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d040      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2b      	ldr	r2, [pc, #172]	; (800763c <HAL_DMA_Abort_IT+0x3d4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d03b      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a2a      	ldr	r2, [pc, #168]	; (8007640 <HAL_DMA_Abort_IT+0x3d8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d036      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a28      	ldr	r2, [pc, #160]	; (8007644 <HAL_DMA_Abort_IT+0x3dc>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d031      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a27      	ldr	r2, [pc, #156]	; (8007648 <HAL_DMA_Abort_IT+0x3e0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d02c      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a25      	ldr	r2, [pc, #148]	; (800764c <HAL_DMA_Abort_IT+0x3e4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d027      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a24      	ldr	r2, [pc, #144]	; (8007650 <HAL_DMA_Abort_IT+0x3e8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d022      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a22      	ldr	r2, [pc, #136]	; (8007654 <HAL_DMA_Abort_IT+0x3ec>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d01d      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a21      	ldr	r2, [pc, #132]	; (8007658 <HAL_DMA_Abort_IT+0x3f0>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d018      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1f      	ldr	r2, [pc, #124]	; (800765c <HAL_DMA_Abort_IT+0x3f4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1e      	ldr	r2, [pc, #120]	; (8007660 <HAL_DMA_Abort_IT+0x3f8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00e      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <HAL_DMA_Abort_IT+0x3fc>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d009      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <HAL_DMA_Abort_IT+0x400>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d004      	beq.n	800760a <HAL_DMA_Abort_IT+0x3a2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a19      	ldr	r2, [pc, #100]	; (800766c <HAL_DMA_Abort_IT+0x404>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d132      	bne.n	8007670 <HAL_DMA_Abort_IT+0x408>
 800760a:	2301      	movs	r3, #1
 800760c:	e031      	b.n	8007672 <HAL_DMA_Abort_IT+0x40a>
 800760e:	bf00      	nop
 8007610:	40020010 	.word	0x40020010
 8007614:	40020028 	.word	0x40020028
 8007618:	40020040 	.word	0x40020040
 800761c:	40020058 	.word	0x40020058
 8007620:	40020070 	.word	0x40020070
 8007624:	40020088 	.word	0x40020088
 8007628:	400200a0 	.word	0x400200a0
 800762c:	400200b8 	.word	0x400200b8
 8007630:	40020410 	.word	0x40020410
 8007634:	40020428 	.word	0x40020428
 8007638:	40020440 	.word	0x40020440
 800763c:	40020458 	.word	0x40020458
 8007640:	40020470 	.word	0x40020470
 8007644:	40020488 	.word	0x40020488
 8007648:	400204a0 	.word	0x400204a0
 800764c:	400204b8 	.word	0x400204b8
 8007650:	58025408 	.word	0x58025408
 8007654:	5802541c 	.word	0x5802541c
 8007658:	58025430 	.word	0x58025430
 800765c:	58025444 	.word	0x58025444
 8007660:	58025458 	.word	0x58025458
 8007664:	5802546c 	.word	0x5802546c
 8007668:	58025480 	.word	0x58025480
 800766c:	58025494 	.word	0x58025494
 8007670:	2300      	movs	r3, #0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d028      	beq.n	80076c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007684:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2201      	movs	r2, #1
 8007696:	409a      	lsls	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop

080076f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	; 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007700:	4b67      	ldr	r3, [pc, #412]	; (80078a0 <HAL_DMA_IRQHandler+0x1ac>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a67      	ldr	r2, [pc, #412]	; (80078a4 <HAL_DMA_IRQHandler+0x1b0>)
 8007706:	fba2 2303 	umull	r2, r3, r2, r3
 800770a:	0a9b      	lsrs	r3, r3, #10
 800770c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007712:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007718:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a5f      	ldr	r2, [pc, #380]	; (80078a8 <HAL_DMA_IRQHandler+0x1b4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d04a      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a5d      	ldr	r2, [pc, #372]	; (80078ac <HAL_DMA_IRQHandler+0x1b8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d045      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a5c      	ldr	r2, [pc, #368]	; (80078b0 <HAL_DMA_IRQHandler+0x1bc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d040      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a5a      	ldr	r2, [pc, #360]	; (80078b4 <HAL_DMA_IRQHandler+0x1c0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d03b      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a59      	ldr	r2, [pc, #356]	; (80078b8 <HAL_DMA_IRQHandler+0x1c4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d036      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a57      	ldr	r2, [pc, #348]	; (80078bc <HAL_DMA_IRQHandler+0x1c8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d031      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a56      	ldr	r2, [pc, #344]	; (80078c0 <HAL_DMA_IRQHandler+0x1cc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d02c      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a54      	ldr	r2, [pc, #336]	; (80078c4 <HAL_DMA_IRQHandler+0x1d0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d027      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a53      	ldr	r2, [pc, #332]	; (80078c8 <HAL_DMA_IRQHandler+0x1d4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a51      	ldr	r2, [pc, #324]	; (80078cc <HAL_DMA_IRQHandler+0x1d8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01d      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a50      	ldr	r2, [pc, #320]	; (80078d0 <HAL_DMA_IRQHandler+0x1dc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a4e      	ldr	r2, [pc, #312]	; (80078d4 <HAL_DMA_IRQHandler+0x1e0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a4d      	ldr	r2, [pc, #308]	; (80078d8 <HAL_DMA_IRQHandler+0x1e4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a4b      	ldr	r2, [pc, #300]	; (80078dc <HAL_DMA_IRQHandler+0x1e8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a4a      	ldr	r2, [pc, #296]	; (80078e0 <HAL_DMA_IRQHandler+0x1ec>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_DMA_IRQHandler+0xd2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a48      	ldr	r2, [pc, #288]	; (80078e4 <HAL_DMA_IRQHandler+0x1f0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <HAL_DMA_IRQHandler+0xd6>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <HAL_DMA_IRQHandler+0xd8>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 842b 	beq.w	8008028 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2208      	movs	r2, #8
 80077dc:	409a      	lsls	r2, r3
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80a2 	beq.w	800792c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a2e      	ldr	r2, [pc, #184]	; (80078a8 <HAL_DMA_IRQHandler+0x1b4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d04a      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a2d      	ldr	r2, [pc, #180]	; (80078ac <HAL_DMA_IRQHandler+0x1b8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d045      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a2b      	ldr	r2, [pc, #172]	; (80078b0 <HAL_DMA_IRQHandler+0x1bc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d040      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a2a      	ldr	r2, [pc, #168]	; (80078b4 <HAL_DMA_IRQHandler+0x1c0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d03b      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a28      	ldr	r2, [pc, #160]	; (80078b8 <HAL_DMA_IRQHandler+0x1c4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d036      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a27      	ldr	r2, [pc, #156]	; (80078bc <HAL_DMA_IRQHandler+0x1c8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d031      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a25      	ldr	r2, [pc, #148]	; (80078c0 <HAL_DMA_IRQHandler+0x1cc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d02c      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a24      	ldr	r2, [pc, #144]	; (80078c4 <HAL_DMA_IRQHandler+0x1d0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d027      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <HAL_DMA_IRQHandler+0x1d4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d022      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a21      	ldr	r2, [pc, #132]	; (80078cc <HAL_DMA_IRQHandler+0x1d8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d01d      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <HAL_DMA_IRQHandler+0x1dc>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d018      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <HAL_DMA_IRQHandler+0x1e0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d013      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <HAL_DMA_IRQHandler+0x1e4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00e      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <HAL_DMA_IRQHandler+0x1e8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d009      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a19      	ldr	r2, [pc, #100]	; (80078e0 <HAL_DMA_IRQHandler+0x1ec>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <HAL_DMA_IRQHandler+0x194>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a18      	ldr	r2, [pc, #96]	; (80078e4 <HAL_DMA_IRQHandler+0x1f0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d12f      	bne.n	80078e8 <HAL_DMA_IRQHandler+0x1f4>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0304 	and.w	r3, r3, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	bf14      	ite	ne
 8007896:	2301      	movne	r3, #1
 8007898:	2300      	moveq	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	e02e      	b.n	80078fc <HAL_DMA_IRQHandler+0x208>
 800789e:	bf00      	nop
 80078a0:	24000090 	.word	0x24000090
 80078a4:	1b4e81b5 	.word	0x1b4e81b5
 80078a8:	40020010 	.word	0x40020010
 80078ac:	40020028 	.word	0x40020028
 80078b0:	40020040 	.word	0x40020040
 80078b4:	40020058 	.word	0x40020058
 80078b8:	40020070 	.word	0x40020070
 80078bc:	40020088 	.word	0x40020088
 80078c0:	400200a0 	.word	0x400200a0
 80078c4:	400200b8 	.word	0x400200b8
 80078c8:	40020410 	.word	0x40020410
 80078cc:	40020428 	.word	0x40020428
 80078d0:	40020440 	.word	0x40020440
 80078d4:	40020458 	.word	0x40020458
 80078d8:	40020470 	.word	0x40020470
 80078dc:	40020488 	.word	0x40020488
 80078e0:	400204a0 	.word	0x400204a0
 80078e4:	400204b8 	.word	0x400204b8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf14      	ite	ne
 80078f6:	2301      	movne	r3, #1
 80078f8:	2300      	moveq	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d015      	beq.n	800792c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0204 	bic.w	r2, r2, #4
 800790e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007914:	f003 031f 	and.w	r3, r3, #31
 8007918:	2208      	movs	r2, #8
 800791a:	409a      	lsls	r2, r3
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007924:	f043 0201 	orr.w	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	fa22 f303 	lsr.w	r3, r2, r3
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d06e      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a69      	ldr	r2, [pc, #420]	; (8007aec <HAL_DMA_IRQHandler+0x3f8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d04a      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a67      	ldr	r2, [pc, #412]	; (8007af0 <HAL_DMA_IRQHandler+0x3fc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d045      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a66      	ldr	r2, [pc, #408]	; (8007af4 <HAL_DMA_IRQHandler+0x400>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d040      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a64      	ldr	r2, [pc, #400]	; (8007af8 <HAL_DMA_IRQHandler+0x404>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d03b      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a63      	ldr	r2, [pc, #396]	; (8007afc <HAL_DMA_IRQHandler+0x408>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d036      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a61      	ldr	r2, [pc, #388]	; (8007b00 <HAL_DMA_IRQHandler+0x40c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d031      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a60      	ldr	r2, [pc, #384]	; (8007b04 <HAL_DMA_IRQHandler+0x410>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d02c      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a5e      	ldr	r2, [pc, #376]	; (8007b08 <HAL_DMA_IRQHandler+0x414>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d027      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a5d      	ldr	r2, [pc, #372]	; (8007b0c <HAL_DMA_IRQHandler+0x418>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d022      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a5b      	ldr	r2, [pc, #364]	; (8007b10 <HAL_DMA_IRQHandler+0x41c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d01d      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a5a      	ldr	r2, [pc, #360]	; (8007b14 <HAL_DMA_IRQHandler+0x420>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d018      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a58      	ldr	r2, [pc, #352]	; (8007b18 <HAL_DMA_IRQHandler+0x424>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a57      	ldr	r2, [pc, #348]	; (8007b1c <HAL_DMA_IRQHandler+0x428>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00e      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a55      	ldr	r2, [pc, #340]	; (8007b20 <HAL_DMA_IRQHandler+0x42c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d009      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a54      	ldr	r2, [pc, #336]	; (8007b24 <HAL_DMA_IRQHandler+0x430>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x2ee>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a52      	ldr	r2, [pc, #328]	; (8007b28 <HAL_DMA_IRQHandler+0x434>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d10a      	bne.n	80079f8 <HAL_DMA_IRQHandler+0x304>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bf14      	ite	ne
 80079f0:	2301      	movne	r3, #1
 80079f2:	2300      	moveq	r3, #0
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	e003      	b.n	8007a00 <HAL_DMA_IRQHandler+0x30c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2300      	movs	r3, #0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00d      	beq.n	8007a20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	409a      	lsls	r2, r3
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a18:	f043 0202 	orr.w	r2, r3, #2
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2204      	movs	r2, #4
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 808f 	beq.w	8007b54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a2c      	ldr	r2, [pc, #176]	; (8007aec <HAL_DMA_IRQHandler+0x3f8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d04a      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a2a      	ldr	r2, [pc, #168]	; (8007af0 <HAL_DMA_IRQHandler+0x3fc>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d045      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a29      	ldr	r2, [pc, #164]	; (8007af4 <HAL_DMA_IRQHandler+0x400>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d040      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a27      	ldr	r2, [pc, #156]	; (8007af8 <HAL_DMA_IRQHandler+0x404>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d03b      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a26      	ldr	r2, [pc, #152]	; (8007afc <HAL_DMA_IRQHandler+0x408>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d036      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a24      	ldr	r2, [pc, #144]	; (8007b00 <HAL_DMA_IRQHandler+0x40c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d031      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a23      	ldr	r2, [pc, #140]	; (8007b04 <HAL_DMA_IRQHandler+0x410>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d02c      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a21      	ldr	r2, [pc, #132]	; (8007b08 <HAL_DMA_IRQHandler+0x414>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d027      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a20      	ldr	r2, [pc, #128]	; (8007b0c <HAL_DMA_IRQHandler+0x418>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d022      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a1e      	ldr	r2, [pc, #120]	; (8007b10 <HAL_DMA_IRQHandler+0x41c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d01d      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <HAL_DMA_IRQHandler+0x420>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d018      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1b      	ldr	r2, [pc, #108]	; (8007b18 <HAL_DMA_IRQHandler+0x424>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d013      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1a      	ldr	r2, [pc, #104]	; (8007b1c <HAL_DMA_IRQHandler+0x428>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <HAL_DMA_IRQHandler+0x42c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d009      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a17      	ldr	r2, [pc, #92]	; (8007b24 <HAL_DMA_IRQHandler+0x430>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x3e2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a15      	ldr	r2, [pc, #84]	; (8007b28 <HAL_DMA_IRQHandler+0x434>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d12a      	bne.n	8007b2c <HAL_DMA_IRQHandler+0x438>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bf14      	ite	ne
 8007ae4:	2301      	movne	r3, #1
 8007ae6:	2300      	moveq	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	e023      	b.n	8007b34 <HAL_DMA_IRQHandler+0x440>
 8007aec:	40020010 	.word	0x40020010
 8007af0:	40020028 	.word	0x40020028
 8007af4:	40020040 	.word	0x40020040
 8007af8:	40020058 	.word	0x40020058
 8007afc:	40020070 	.word	0x40020070
 8007b00:	40020088 	.word	0x40020088
 8007b04:	400200a0 	.word	0x400200a0
 8007b08:	400200b8 	.word	0x400200b8
 8007b0c:	40020410 	.word	0x40020410
 8007b10:	40020428 	.word	0x40020428
 8007b14:	40020440 	.word	0x40020440
 8007b18:	40020458 	.word	0x40020458
 8007b1c:	40020470 	.word	0x40020470
 8007b20:	40020488 	.word	0x40020488
 8007b24:	400204a0 	.word	0x400204a0
 8007b28:	400204b8 	.word	0x400204b8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2300      	movs	r3, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00d      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	2204      	movs	r2, #4
 8007b42:	409a      	lsls	r2, r3
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	f043 0204 	orr.w	r2, r3, #4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b58:	f003 031f 	and.w	r3, r3, #31
 8007b5c:	2210      	movs	r2, #16
 8007b5e:	409a      	lsls	r2, r3
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80a6 	beq.w	8007cb6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a85      	ldr	r2, [pc, #532]	; (8007d84 <HAL_DMA_IRQHandler+0x690>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d04a      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a83      	ldr	r2, [pc, #524]	; (8007d88 <HAL_DMA_IRQHandler+0x694>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d045      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a82      	ldr	r2, [pc, #520]	; (8007d8c <HAL_DMA_IRQHandler+0x698>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d040      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a80      	ldr	r2, [pc, #512]	; (8007d90 <HAL_DMA_IRQHandler+0x69c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d03b      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a7f      	ldr	r2, [pc, #508]	; (8007d94 <HAL_DMA_IRQHandler+0x6a0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d036      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a7d      	ldr	r2, [pc, #500]	; (8007d98 <HAL_DMA_IRQHandler+0x6a4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d031      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a7c      	ldr	r2, [pc, #496]	; (8007d9c <HAL_DMA_IRQHandler+0x6a8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d02c      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a7a      	ldr	r2, [pc, #488]	; (8007da0 <HAL_DMA_IRQHandler+0x6ac>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d027      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a79      	ldr	r2, [pc, #484]	; (8007da4 <HAL_DMA_IRQHandler+0x6b0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d022      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a77      	ldr	r2, [pc, #476]	; (8007da8 <HAL_DMA_IRQHandler+0x6b4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01d      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a76      	ldr	r2, [pc, #472]	; (8007dac <HAL_DMA_IRQHandler+0x6b8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d018      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a74      	ldr	r2, [pc, #464]	; (8007db0 <HAL_DMA_IRQHandler+0x6bc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a73      	ldr	r2, [pc, #460]	; (8007db4 <HAL_DMA_IRQHandler+0x6c0>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00e      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a71      	ldr	r2, [pc, #452]	; (8007db8 <HAL_DMA_IRQHandler+0x6c4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d009      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a70      	ldr	r2, [pc, #448]	; (8007dbc <HAL_DMA_IRQHandler+0x6c8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <HAL_DMA_IRQHandler+0x516>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a6e      	ldr	r2, [pc, #440]	; (8007dc0 <HAL_DMA_IRQHandler+0x6cc>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d10a      	bne.n	8007c20 <HAL_DMA_IRQHandler+0x52c>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bf14      	ite	ne
 8007c18:	2301      	movne	r3, #1
 8007c1a:	2300      	moveq	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	e009      	b.n	8007c34 <HAL_DMA_IRQHandler+0x540>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d03e      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	2210      	movs	r2, #16
 8007c42:	409a      	lsls	r2, r3
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d018      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d108      	bne.n	8007c76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d024      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
 8007c74:	e01f      	b.n	8007cb6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01b      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
 8007c86:	e016      	b.n	8007cb6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0208 	bic.w	r2, r2, #8
 8007ca4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cba:	f003 031f 	and.w	r3, r3, #31
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	409a      	lsls	r2, r3
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8110 	beq.w	8007eec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a2c      	ldr	r2, [pc, #176]	; (8007d84 <HAL_DMA_IRQHandler+0x690>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d04a      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a2b      	ldr	r2, [pc, #172]	; (8007d88 <HAL_DMA_IRQHandler+0x694>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d045      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a29      	ldr	r2, [pc, #164]	; (8007d8c <HAL_DMA_IRQHandler+0x698>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d040      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a28      	ldr	r2, [pc, #160]	; (8007d90 <HAL_DMA_IRQHandler+0x69c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d03b      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a26      	ldr	r2, [pc, #152]	; (8007d94 <HAL_DMA_IRQHandler+0x6a0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d036      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a25      	ldr	r2, [pc, #148]	; (8007d98 <HAL_DMA_IRQHandler+0x6a4>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d031      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a23      	ldr	r2, [pc, #140]	; (8007d9c <HAL_DMA_IRQHandler+0x6a8>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d02c      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a22      	ldr	r2, [pc, #136]	; (8007da0 <HAL_DMA_IRQHandler+0x6ac>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d027      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a20      	ldr	r2, [pc, #128]	; (8007da4 <HAL_DMA_IRQHandler+0x6b0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d022      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1f      	ldr	r2, [pc, #124]	; (8007da8 <HAL_DMA_IRQHandler+0x6b4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d01d      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1d      	ldr	r2, [pc, #116]	; (8007dac <HAL_DMA_IRQHandler+0x6b8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d018      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1c      	ldr	r2, [pc, #112]	; (8007db0 <HAL_DMA_IRQHandler+0x6bc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d013      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <HAL_DMA_IRQHandler+0x6c0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00e      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a19      	ldr	r2, [pc, #100]	; (8007db8 <HAL_DMA_IRQHandler+0x6c4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d009      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <HAL_DMA_IRQHandler+0x6c8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <HAL_DMA_IRQHandler+0x678>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <HAL_DMA_IRQHandler+0x6cc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d12b      	bne.n	8007dc4 <HAL_DMA_IRQHandler+0x6d0>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf14      	ite	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	2300      	moveq	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	e02a      	b.n	8007dd8 <HAL_DMA_IRQHandler+0x6e4>
 8007d82:	bf00      	nop
 8007d84:	40020010 	.word	0x40020010
 8007d88:	40020028 	.word	0x40020028
 8007d8c:	40020040 	.word	0x40020040
 8007d90:	40020058 	.word	0x40020058
 8007d94:	40020070 	.word	0x40020070
 8007d98:	40020088 	.word	0x40020088
 8007d9c:	400200a0 	.word	0x400200a0
 8007da0:	400200b8 	.word	0x400200b8
 8007da4:	40020410 	.word	0x40020410
 8007da8:	40020428 	.word	0x40020428
 8007dac:	40020440 	.word	0x40020440
 8007db0:	40020458 	.word	0x40020458
 8007db4:	40020470 	.word	0x40020470
 8007db8:	40020488 	.word	0x40020488
 8007dbc:	400204a0 	.word	0x400204a0
 8007dc0:	400204b8 	.word	0x400204b8
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bf14      	ite	ne
 8007dd2:	2301      	movne	r3, #1
 8007dd4:	2300      	moveq	r3, #0
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8087 	beq.w	8007eec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de2:	f003 031f 	and.w	r3, r3, #31
 8007de6:	2220      	movs	r2, #32
 8007de8:	409a      	lsls	r2, r3
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d139      	bne.n	8007e6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0216 	bic.w	r2, r2, #22
 8007e08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695a      	ldr	r2, [r3, #20]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <HAL_DMA_IRQHandler+0x736>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0208 	bic.w	r2, r2, #8
 8007e38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3e:	f003 031f 	and.w	r3, r3, #31
 8007e42:	223f      	movs	r2, #63	; 0x3f
 8007e44:	409a      	lsls	r2, r3
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 834a 	beq.w	80084f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
          }
          return;
 8007e6c:	e344      	b.n	80084f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d018      	beq.n	8007eae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d108      	bne.n	8007e9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d02c      	beq.n	8007eec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
 8007e9a:	e027      	b.n	8007eec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d023      	beq.n	8007eec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
 8007eac:	e01e      	b.n	8007eec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10f      	bne.n	8007edc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0210 	bic.w	r2, r2, #16
 8007eca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8306 	beq.w	8008502 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8088 	beq.w	8008014 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2204      	movs	r2, #4
 8007f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a7a      	ldr	r2, [pc, #488]	; (80080fc <HAL_DMA_IRQHandler+0xa08>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d04a      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a79      	ldr	r2, [pc, #484]	; (8008100 <HAL_DMA_IRQHandler+0xa0c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d045      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a77      	ldr	r2, [pc, #476]	; (8008104 <HAL_DMA_IRQHandler+0xa10>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d040      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a76      	ldr	r2, [pc, #472]	; (8008108 <HAL_DMA_IRQHandler+0xa14>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d03b      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a74      	ldr	r2, [pc, #464]	; (800810c <HAL_DMA_IRQHandler+0xa18>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d036      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a73      	ldr	r2, [pc, #460]	; (8008110 <HAL_DMA_IRQHandler+0xa1c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d031      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a71      	ldr	r2, [pc, #452]	; (8008114 <HAL_DMA_IRQHandler+0xa20>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d02c      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a70      	ldr	r2, [pc, #448]	; (8008118 <HAL_DMA_IRQHandler+0xa24>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d027      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a6e      	ldr	r2, [pc, #440]	; (800811c <HAL_DMA_IRQHandler+0xa28>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d022      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a6d      	ldr	r2, [pc, #436]	; (8008120 <HAL_DMA_IRQHandler+0xa2c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d01d      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a6b      	ldr	r2, [pc, #428]	; (8008124 <HAL_DMA_IRQHandler+0xa30>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d018      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a6a      	ldr	r2, [pc, #424]	; (8008128 <HAL_DMA_IRQHandler+0xa34>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d013      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a68      	ldr	r2, [pc, #416]	; (800812c <HAL_DMA_IRQHandler+0xa38>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00e      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a67      	ldr	r2, [pc, #412]	; (8008130 <HAL_DMA_IRQHandler+0xa3c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d009      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a65      	ldr	r2, [pc, #404]	; (8008134 <HAL_DMA_IRQHandler+0xa40>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d004      	beq.n	8007fac <HAL_DMA_IRQHandler+0x8b8>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a64      	ldr	r2, [pc, #400]	; (8008138 <HAL_DMA_IRQHandler+0xa44>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d108      	bne.n	8007fbe <HAL_DMA_IRQHandler+0x8ca>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e007      	b.n	8007fce <HAL_DMA_IRQHandler+0x8da>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d307      	bcc.n	8007fea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1f2      	bne.n	8007fce <HAL_DMA_IRQHandler+0x8da>
 8007fe8:	e000      	b.n	8007fec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007fea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2203      	movs	r2, #3
 8007ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008002:	e003      	b.n	800800c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 8272 	beq.w	8008502 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
 8008026:	e26c      	b.n	8008502 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a43      	ldr	r2, [pc, #268]	; (800813c <HAL_DMA_IRQHandler+0xa48>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d022      	beq.n	8008078 <HAL_DMA_IRQHandler+0x984>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a42      	ldr	r2, [pc, #264]	; (8008140 <HAL_DMA_IRQHandler+0xa4c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d01d      	beq.n	8008078 <HAL_DMA_IRQHandler+0x984>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a40      	ldr	r2, [pc, #256]	; (8008144 <HAL_DMA_IRQHandler+0xa50>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d018      	beq.n	8008078 <HAL_DMA_IRQHandler+0x984>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a3f      	ldr	r2, [pc, #252]	; (8008148 <HAL_DMA_IRQHandler+0xa54>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d013      	beq.n	8008078 <HAL_DMA_IRQHandler+0x984>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a3d      	ldr	r2, [pc, #244]	; (800814c <HAL_DMA_IRQHandler+0xa58>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00e      	beq.n	8008078 <HAL_DMA_IRQHandler+0x984>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a3c      	ldr	r2, [pc, #240]	; (8008150 <HAL_DMA_IRQHandler+0xa5c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d009      	beq.n	8008078 <HAL_DMA_IRQHandler+0x984>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a3a      	ldr	r2, [pc, #232]	; (8008154 <HAL_DMA_IRQHandler+0xa60>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <HAL_DMA_IRQHandler+0x984>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a39      	ldr	r2, [pc, #228]	; (8008158 <HAL_DMA_IRQHandler+0xa64>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d101      	bne.n	800807c <HAL_DMA_IRQHandler+0x988>
 8008078:	2301      	movs	r3, #1
 800807a:	e000      	b.n	800807e <HAL_DMA_IRQHandler+0x98a>
 800807c:	2300      	movs	r3, #0
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 823f 	beq.w	8008502 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	2204      	movs	r2, #4
 8008096:	409a      	lsls	r2, r3
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	4013      	ands	r3, r2
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 80cd 	beq.w	800823c <HAL_DMA_IRQHandler+0xb48>
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80c7 	beq.w	800823c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	2204      	movs	r2, #4
 80080b8:	409a      	lsls	r2, r3
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d049      	beq.n	800815c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8210 	beq.w	80084fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080e4:	e20a      	b.n	80084fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 8206 	beq.w	80084fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080f8:	e200      	b.n	80084fc <HAL_DMA_IRQHandler+0xe08>
 80080fa:	bf00      	nop
 80080fc:	40020010 	.word	0x40020010
 8008100:	40020028 	.word	0x40020028
 8008104:	40020040 	.word	0x40020040
 8008108:	40020058 	.word	0x40020058
 800810c:	40020070 	.word	0x40020070
 8008110:	40020088 	.word	0x40020088
 8008114:	400200a0 	.word	0x400200a0
 8008118:	400200b8 	.word	0x400200b8
 800811c:	40020410 	.word	0x40020410
 8008120:	40020428 	.word	0x40020428
 8008124:	40020440 	.word	0x40020440
 8008128:	40020458 	.word	0x40020458
 800812c:	40020470 	.word	0x40020470
 8008130:	40020488 	.word	0x40020488
 8008134:	400204a0 	.word	0x400204a0
 8008138:	400204b8 	.word	0x400204b8
 800813c:	58025408 	.word	0x58025408
 8008140:	5802541c 	.word	0x5802541c
 8008144:	58025430 	.word	0x58025430
 8008148:	58025444 	.word	0x58025444
 800814c:	58025458 	.word	0x58025458
 8008150:	5802546c 	.word	0x5802546c
 8008154:	58025480 	.word	0x58025480
 8008158:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d160      	bne.n	8008228 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a7f      	ldr	r2, [pc, #508]	; (8008368 <HAL_DMA_IRQHandler+0xc74>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d04a      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a7d      	ldr	r2, [pc, #500]	; (800836c <HAL_DMA_IRQHandler+0xc78>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d045      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a7c      	ldr	r2, [pc, #496]	; (8008370 <HAL_DMA_IRQHandler+0xc7c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d040      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a7a      	ldr	r2, [pc, #488]	; (8008374 <HAL_DMA_IRQHandler+0xc80>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d03b      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a79      	ldr	r2, [pc, #484]	; (8008378 <HAL_DMA_IRQHandler+0xc84>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d036      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a77      	ldr	r2, [pc, #476]	; (800837c <HAL_DMA_IRQHandler+0xc88>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d031      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a76      	ldr	r2, [pc, #472]	; (8008380 <HAL_DMA_IRQHandler+0xc8c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d02c      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a74      	ldr	r2, [pc, #464]	; (8008384 <HAL_DMA_IRQHandler+0xc90>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d027      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a73      	ldr	r2, [pc, #460]	; (8008388 <HAL_DMA_IRQHandler+0xc94>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d022      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a71      	ldr	r2, [pc, #452]	; (800838c <HAL_DMA_IRQHandler+0xc98>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a70      	ldr	r2, [pc, #448]	; (8008390 <HAL_DMA_IRQHandler+0xc9c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a6e      	ldr	r2, [pc, #440]	; (8008394 <HAL_DMA_IRQHandler+0xca0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a6d      	ldr	r2, [pc, #436]	; (8008398 <HAL_DMA_IRQHandler+0xca4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a6b      	ldr	r2, [pc, #428]	; (800839c <HAL_DMA_IRQHandler+0xca8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a6a      	ldr	r2, [pc, #424]	; (80083a0 <HAL_DMA_IRQHandler+0xcac>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_DMA_IRQHandler+0xb12>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a68      	ldr	r2, [pc, #416]	; (80083a4 <HAL_DMA_IRQHandler+0xcb0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d108      	bne.n	8008218 <HAL_DMA_IRQHandler+0xb24>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0208 	bic.w	r2, r2, #8
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e007      	b.n	8008228 <HAL_DMA_IRQHandler+0xb34>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0204 	bic.w	r2, r2, #4
 8008226:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8165 	beq.w	80084fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800823a:	e15f      	b.n	80084fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008240:	f003 031f 	and.w	r3, r3, #31
 8008244:	2202      	movs	r2, #2
 8008246:	409a      	lsls	r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 80c5 	beq.w	80083dc <HAL_DMA_IRQHandler+0xce8>
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 80bf 	beq.w	80083dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008262:	f003 031f 	and.w	r3, r3, #31
 8008266:	2202      	movs	r2, #2
 8008268:	409a      	lsls	r2, r3
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d018      	beq.n	80082aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 813a 	beq.w	8008500 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008294:	e134      	b.n	8008500 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 8130 	beq.w	8008500 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082a8:	e12a      	b.n	8008500 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f003 0320 	and.w	r3, r3, #32
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 8089 	bne.w	80083c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <HAL_DMA_IRQHandler+0xc74>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d04a      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a29      	ldr	r2, [pc, #164]	; (800836c <HAL_DMA_IRQHandler+0xc78>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d045      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a28      	ldr	r2, [pc, #160]	; (8008370 <HAL_DMA_IRQHandler+0xc7c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d040      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a26      	ldr	r2, [pc, #152]	; (8008374 <HAL_DMA_IRQHandler+0xc80>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d03b      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a25      	ldr	r2, [pc, #148]	; (8008378 <HAL_DMA_IRQHandler+0xc84>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d036      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a23      	ldr	r2, [pc, #140]	; (800837c <HAL_DMA_IRQHandler+0xc88>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d031      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a22      	ldr	r2, [pc, #136]	; (8008380 <HAL_DMA_IRQHandler+0xc8c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d02c      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a20      	ldr	r2, [pc, #128]	; (8008384 <HAL_DMA_IRQHandler+0xc90>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d027      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1f      	ldr	r2, [pc, #124]	; (8008388 <HAL_DMA_IRQHandler+0xc94>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d022      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <HAL_DMA_IRQHandler+0xc98>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d01d      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <HAL_DMA_IRQHandler+0xc9c>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d018      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <HAL_DMA_IRQHandler+0xca0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d013      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a19      	ldr	r2, [pc, #100]	; (8008398 <HAL_DMA_IRQHandler+0xca4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00e      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a17      	ldr	r2, [pc, #92]	; (800839c <HAL_DMA_IRQHandler+0xca8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d009      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <HAL_DMA_IRQHandler+0xcac>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d004      	beq.n	8008356 <HAL_DMA_IRQHandler+0xc62>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a14      	ldr	r2, [pc, #80]	; (80083a4 <HAL_DMA_IRQHandler+0xcb0>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d128      	bne.n	80083a8 <HAL_DMA_IRQHandler+0xcb4>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0214 	bic.w	r2, r2, #20
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e027      	b.n	80083b8 <HAL_DMA_IRQHandler+0xcc4>
 8008368:	40020010 	.word	0x40020010
 800836c:	40020028 	.word	0x40020028
 8008370:	40020040 	.word	0x40020040
 8008374:	40020058 	.word	0x40020058
 8008378:	40020070 	.word	0x40020070
 800837c:	40020088 	.word	0x40020088
 8008380:	400200a0 	.word	0x400200a0
 8008384:	400200b8 	.word	0x400200b8
 8008388:	40020410 	.word	0x40020410
 800838c:	40020428 	.word	0x40020428
 8008390:	40020440 	.word	0x40020440
 8008394:	40020458 	.word	0x40020458
 8008398:	40020470 	.word	0x40020470
 800839c:	40020488 	.word	0x40020488
 80083a0:	400204a0 	.word	0x400204a0
 80083a4:	400204b8 	.word	0x400204b8
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 020a 	bic.w	r2, r2, #10
 80083b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8097 	beq.w	8008500 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083da:	e091      	b.n	8008500 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2208      	movs	r2, #8
 80083e6:	409a      	lsls	r2, r3
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8088 	beq.w	8008502 <HAL_DMA_IRQHandler+0xe0e>
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8082 	beq.w	8008502 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a41      	ldr	r2, [pc, #260]	; (8008508 <HAL_DMA_IRQHandler+0xe14>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d04a      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a3f      	ldr	r2, [pc, #252]	; (800850c <HAL_DMA_IRQHandler+0xe18>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d045      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a3e      	ldr	r2, [pc, #248]	; (8008510 <HAL_DMA_IRQHandler+0xe1c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d040      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a3c      	ldr	r2, [pc, #240]	; (8008514 <HAL_DMA_IRQHandler+0xe20>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d03b      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a3b      	ldr	r2, [pc, #236]	; (8008518 <HAL_DMA_IRQHandler+0xe24>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d036      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a39      	ldr	r2, [pc, #228]	; (800851c <HAL_DMA_IRQHandler+0xe28>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d031      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a38      	ldr	r2, [pc, #224]	; (8008520 <HAL_DMA_IRQHandler+0xe2c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d02c      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a36      	ldr	r2, [pc, #216]	; (8008524 <HAL_DMA_IRQHandler+0xe30>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d027      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a35      	ldr	r2, [pc, #212]	; (8008528 <HAL_DMA_IRQHandler+0xe34>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d022      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a33      	ldr	r2, [pc, #204]	; (800852c <HAL_DMA_IRQHandler+0xe38>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01d      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a32      	ldr	r2, [pc, #200]	; (8008530 <HAL_DMA_IRQHandler+0xe3c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d018      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a30      	ldr	r2, [pc, #192]	; (8008534 <HAL_DMA_IRQHandler+0xe40>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a2f      	ldr	r2, [pc, #188]	; (8008538 <HAL_DMA_IRQHandler+0xe44>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00e      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a2d      	ldr	r2, [pc, #180]	; (800853c <HAL_DMA_IRQHandler+0xe48>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d009      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a2c      	ldr	r2, [pc, #176]	; (8008540 <HAL_DMA_IRQHandler+0xe4c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d004      	beq.n	800849e <HAL_DMA_IRQHandler+0xdaa>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a2a      	ldr	r2, [pc, #168]	; (8008544 <HAL_DMA_IRQHandler+0xe50>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d108      	bne.n	80084b0 <HAL_DMA_IRQHandler+0xdbc>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 021c 	bic.w	r2, r2, #28
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	e007      	b.n	80084c0 <HAL_DMA_IRQHandler+0xdcc>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 020e 	bic.w	r2, r2, #14
 80084be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c4:	f003 031f 	and.w	r3, r3, #31
 80084c8:	2201      	movs	r2, #1
 80084ca:	409a      	lsls	r2, r3
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d009      	beq.n	8008502 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	e004      	b.n	8008502 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80084f8:	bf00      	nop
 80084fa:	e002      	b.n	8008502 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008500:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008502:	3728      	adds	r7, #40	; 0x28
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	40020010 	.word	0x40020010
 800850c:	40020028 	.word	0x40020028
 8008510:	40020040 	.word	0x40020040
 8008514:	40020058 	.word	0x40020058
 8008518:	40020070 	.word	0x40020070
 800851c:	40020088 	.word	0x40020088
 8008520:	400200a0 	.word	0x400200a0
 8008524:	400200b8 	.word	0x400200b8
 8008528:	40020410 	.word	0x40020410
 800852c:	40020428 	.word	0x40020428
 8008530:	40020440 	.word	0x40020440
 8008534:	40020458 	.word	0x40020458
 8008538:	40020470 	.word	0x40020470
 800853c:	40020488 	.word	0x40020488
 8008540:	400204a0 	.word	0x400204a0
 8008544:	400204b8 	.word	0x400204b8

08008548 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008572:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008578:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a7f      	ldr	r2, [pc, #508]	; (800877c <DMA_SetConfig+0x21c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d072      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a7d      	ldr	r2, [pc, #500]	; (8008780 <DMA_SetConfig+0x220>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d06d      	beq.n	800866a <DMA_SetConfig+0x10a>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a7c      	ldr	r2, [pc, #496]	; (8008784 <DMA_SetConfig+0x224>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d068      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a7a      	ldr	r2, [pc, #488]	; (8008788 <DMA_SetConfig+0x228>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d063      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a79      	ldr	r2, [pc, #484]	; (800878c <DMA_SetConfig+0x22c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d05e      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a77      	ldr	r2, [pc, #476]	; (8008790 <DMA_SetConfig+0x230>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d059      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a76      	ldr	r2, [pc, #472]	; (8008794 <DMA_SetConfig+0x234>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d054      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a74      	ldr	r2, [pc, #464]	; (8008798 <DMA_SetConfig+0x238>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d04f      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a73      	ldr	r2, [pc, #460]	; (800879c <DMA_SetConfig+0x23c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d04a      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a71      	ldr	r2, [pc, #452]	; (80087a0 <DMA_SetConfig+0x240>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d045      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a70      	ldr	r2, [pc, #448]	; (80087a4 <DMA_SetConfig+0x244>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d040      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a6e      	ldr	r2, [pc, #440]	; (80087a8 <DMA_SetConfig+0x248>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d03b      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a6d      	ldr	r2, [pc, #436]	; (80087ac <DMA_SetConfig+0x24c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d036      	beq.n	800866a <DMA_SetConfig+0x10a>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a6b      	ldr	r2, [pc, #428]	; (80087b0 <DMA_SetConfig+0x250>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d031      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a6a      	ldr	r2, [pc, #424]	; (80087b4 <DMA_SetConfig+0x254>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d02c      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a68      	ldr	r2, [pc, #416]	; (80087b8 <DMA_SetConfig+0x258>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d027      	beq.n	800866a <DMA_SetConfig+0x10a>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a67      	ldr	r2, [pc, #412]	; (80087bc <DMA_SetConfig+0x25c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d022      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a65      	ldr	r2, [pc, #404]	; (80087c0 <DMA_SetConfig+0x260>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01d      	beq.n	800866a <DMA_SetConfig+0x10a>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a64      	ldr	r2, [pc, #400]	; (80087c4 <DMA_SetConfig+0x264>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d018      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a62      	ldr	r2, [pc, #392]	; (80087c8 <DMA_SetConfig+0x268>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d013      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a61      	ldr	r2, [pc, #388]	; (80087cc <DMA_SetConfig+0x26c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00e      	beq.n	800866a <DMA_SetConfig+0x10a>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a5f      	ldr	r2, [pc, #380]	; (80087d0 <DMA_SetConfig+0x270>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d009      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a5e      	ldr	r2, [pc, #376]	; (80087d4 <DMA_SetConfig+0x274>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d004      	beq.n	800866a <DMA_SetConfig+0x10a>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a5c      	ldr	r2, [pc, #368]	; (80087d8 <DMA_SetConfig+0x278>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d101      	bne.n	800866e <DMA_SetConfig+0x10e>
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <DMA_SetConfig+0x110>
 800866e:	2300      	movs	r3, #0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00d      	beq.n	8008690 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800867c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800868e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a39      	ldr	r2, [pc, #228]	; (800877c <DMA_SetConfig+0x21c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d04a      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a38      	ldr	r2, [pc, #224]	; (8008780 <DMA_SetConfig+0x220>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d045      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a36      	ldr	r2, [pc, #216]	; (8008784 <DMA_SetConfig+0x224>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d040      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a35      	ldr	r2, [pc, #212]	; (8008788 <DMA_SetConfig+0x228>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d03b      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a33      	ldr	r2, [pc, #204]	; (800878c <DMA_SetConfig+0x22c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d036      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a32      	ldr	r2, [pc, #200]	; (8008790 <DMA_SetConfig+0x230>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d031      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a30      	ldr	r2, [pc, #192]	; (8008794 <DMA_SetConfig+0x234>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d02c      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a2f      	ldr	r2, [pc, #188]	; (8008798 <DMA_SetConfig+0x238>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d027      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a2d      	ldr	r2, [pc, #180]	; (800879c <DMA_SetConfig+0x23c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d022      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a2c      	ldr	r2, [pc, #176]	; (80087a0 <DMA_SetConfig+0x240>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d01d      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a2a      	ldr	r2, [pc, #168]	; (80087a4 <DMA_SetConfig+0x244>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d018      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a29      	ldr	r2, [pc, #164]	; (80087a8 <DMA_SetConfig+0x248>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d013      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a27      	ldr	r2, [pc, #156]	; (80087ac <DMA_SetConfig+0x24c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00e      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <DMA_SetConfig+0x250>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d009      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a24      	ldr	r2, [pc, #144]	; (80087b4 <DMA_SetConfig+0x254>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <DMA_SetConfig+0x1d0>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a23      	ldr	r2, [pc, #140]	; (80087b8 <DMA_SetConfig+0x258>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d101      	bne.n	8008734 <DMA_SetConfig+0x1d4>
 8008730:	2301      	movs	r3, #1
 8008732:	e000      	b.n	8008736 <DMA_SetConfig+0x1d6>
 8008734:	2300      	movs	r3, #0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d059      	beq.n	80087ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873e:	f003 031f 	and.w	r3, r3, #31
 8008742:	223f      	movs	r2, #63	; 0x3f
 8008744:	409a      	lsls	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008758:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d138      	bne.n	80087dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800877a:	e086      	b.n	800888a <DMA_SetConfig+0x32a>
 800877c:	40020010 	.word	0x40020010
 8008780:	40020028 	.word	0x40020028
 8008784:	40020040 	.word	0x40020040
 8008788:	40020058 	.word	0x40020058
 800878c:	40020070 	.word	0x40020070
 8008790:	40020088 	.word	0x40020088
 8008794:	400200a0 	.word	0x400200a0
 8008798:	400200b8 	.word	0x400200b8
 800879c:	40020410 	.word	0x40020410
 80087a0:	40020428 	.word	0x40020428
 80087a4:	40020440 	.word	0x40020440
 80087a8:	40020458 	.word	0x40020458
 80087ac:	40020470 	.word	0x40020470
 80087b0:	40020488 	.word	0x40020488
 80087b4:	400204a0 	.word	0x400204a0
 80087b8:	400204b8 	.word	0x400204b8
 80087bc:	58025408 	.word	0x58025408
 80087c0:	5802541c 	.word	0x5802541c
 80087c4:	58025430 	.word	0x58025430
 80087c8:	58025444 	.word	0x58025444
 80087cc:	58025458 	.word	0x58025458
 80087d0:	5802546c 	.word	0x5802546c
 80087d4:	58025480 	.word	0x58025480
 80087d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	60da      	str	r2, [r3, #12]
}
 80087ec:	e04d      	b.n	800888a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a29      	ldr	r2, [pc, #164]	; (8008898 <DMA_SetConfig+0x338>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d022      	beq.n	800883e <DMA_SetConfig+0x2de>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a27      	ldr	r2, [pc, #156]	; (800889c <DMA_SetConfig+0x33c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d01d      	beq.n	800883e <DMA_SetConfig+0x2de>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <DMA_SetConfig+0x340>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d018      	beq.n	800883e <DMA_SetConfig+0x2de>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a24      	ldr	r2, [pc, #144]	; (80088a4 <DMA_SetConfig+0x344>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d013      	beq.n	800883e <DMA_SetConfig+0x2de>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a23      	ldr	r2, [pc, #140]	; (80088a8 <DMA_SetConfig+0x348>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00e      	beq.n	800883e <DMA_SetConfig+0x2de>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a21      	ldr	r2, [pc, #132]	; (80088ac <DMA_SetConfig+0x34c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d009      	beq.n	800883e <DMA_SetConfig+0x2de>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a20      	ldr	r2, [pc, #128]	; (80088b0 <DMA_SetConfig+0x350>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d004      	beq.n	800883e <DMA_SetConfig+0x2de>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a1e      	ldr	r2, [pc, #120]	; (80088b4 <DMA_SetConfig+0x354>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d101      	bne.n	8008842 <DMA_SetConfig+0x2e2>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <DMA_SetConfig+0x2e4>
 8008842:	2300      	movs	r3, #0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d020      	beq.n	800888a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	2201      	movs	r2, #1
 8008852:	409a      	lsls	r2, r3
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d108      	bne.n	800887a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	60da      	str	r2, [r3, #12]
}
 8008878:	e007      	b.n	800888a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	60da      	str	r2, [r3, #12]
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	58025408 	.word	0x58025408
 800889c:	5802541c 	.word	0x5802541c
 80088a0:	58025430 	.word	0x58025430
 80088a4:	58025444 	.word	0x58025444
 80088a8:	58025458 	.word	0x58025458
 80088ac:	5802546c 	.word	0x5802546c
 80088b0:	58025480 	.word	0x58025480
 80088b4:	58025494 	.word	0x58025494

080088b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a42      	ldr	r2, [pc, #264]	; (80089d0 <DMA_CalcBaseAndBitshift+0x118>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d04a      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a41      	ldr	r2, [pc, #260]	; (80089d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d045      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a3f      	ldr	r2, [pc, #252]	; (80089d8 <DMA_CalcBaseAndBitshift+0x120>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d040      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a3e      	ldr	r2, [pc, #248]	; (80089dc <DMA_CalcBaseAndBitshift+0x124>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d03b      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a3c      	ldr	r2, [pc, #240]	; (80089e0 <DMA_CalcBaseAndBitshift+0x128>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d036      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a3b      	ldr	r2, [pc, #236]	; (80089e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d031      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a39      	ldr	r2, [pc, #228]	; (80089e8 <DMA_CalcBaseAndBitshift+0x130>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d02c      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a38      	ldr	r2, [pc, #224]	; (80089ec <DMA_CalcBaseAndBitshift+0x134>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d027      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a36      	ldr	r2, [pc, #216]	; (80089f0 <DMA_CalcBaseAndBitshift+0x138>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d022      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a35      	ldr	r2, [pc, #212]	; (80089f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d01d      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a33      	ldr	r2, [pc, #204]	; (80089f8 <DMA_CalcBaseAndBitshift+0x140>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d018      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a32      	ldr	r2, [pc, #200]	; (80089fc <DMA_CalcBaseAndBitshift+0x144>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d013      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a30      	ldr	r2, [pc, #192]	; (8008a00 <DMA_CalcBaseAndBitshift+0x148>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00e      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a2f      	ldr	r2, [pc, #188]	; (8008a04 <DMA_CalcBaseAndBitshift+0x14c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d009      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a2d      	ldr	r2, [pc, #180]	; (8008a08 <DMA_CalcBaseAndBitshift+0x150>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d004      	beq.n	8008960 <DMA_CalcBaseAndBitshift+0xa8>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a2c      	ldr	r2, [pc, #176]	; (8008a0c <DMA_CalcBaseAndBitshift+0x154>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d101      	bne.n	8008964 <DMA_CalcBaseAndBitshift+0xac>
 8008960:	2301      	movs	r3, #1
 8008962:	e000      	b.n	8008966 <DMA_CalcBaseAndBitshift+0xae>
 8008964:	2300      	movs	r3, #0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d024      	beq.n	80089b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	3b10      	subs	r3, #16
 8008972:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <DMA_CalcBaseAndBitshift+0x158>)
 8008974:	fba2 2303 	umull	r2, r3, r2, r3
 8008978:	091b      	lsrs	r3, r3, #4
 800897a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	4a24      	ldr	r2, [pc, #144]	; (8008a14 <DMA_CalcBaseAndBitshift+0x15c>)
 8008984:	5cd3      	ldrb	r3, [r2, r3]
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b03      	cmp	r3, #3
 8008990:	d908      	bls.n	80089a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	4b1f      	ldr	r3, [pc, #124]	; (8008a18 <DMA_CalcBaseAndBitshift+0x160>)
 800899a:	4013      	ands	r3, r2
 800899c:	1d1a      	adds	r2, r3, #4
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	659a      	str	r2, [r3, #88]	; 0x58
 80089a2:	e00d      	b.n	80089c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	461a      	mov	r2, r3
 80089aa:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <DMA_CalcBaseAndBitshift+0x160>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6593      	str	r3, [r2, #88]	; 0x58
 80089b2:	e005      	b.n	80089c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	40020010 	.word	0x40020010
 80089d4:	40020028 	.word	0x40020028
 80089d8:	40020040 	.word	0x40020040
 80089dc:	40020058 	.word	0x40020058
 80089e0:	40020070 	.word	0x40020070
 80089e4:	40020088 	.word	0x40020088
 80089e8:	400200a0 	.word	0x400200a0
 80089ec:	400200b8 	.word	0x400200b8
 80089f0:	40020410 	.word	0x40020410
 80089f4:	40020428 	.word	0x40020428
 80089f8:	40020440 	.word	0x40020440
 80089fc:	40020458 	.word	0x40020458
 8008a00:	40020470 	.word	0x40020470
 8008a04:	40020488 	.word	0x40020488
 8008a08:	400204a0 	.word	0x400204a0
 8008a0c:	400204b8 	.word	0x400204b8
 8008a10:	aaaaaaab 	.word	0xaaaaaaab
 8008a14:	08017740 	.word	0x08017740
 8008a18:	fffffc00 	.word	0xfffffc00

08008a1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d120      	bne.n	8008a72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d858      	bhi.n	8008aea <DMA_CheckFifoParam+0xce>
 8008a38:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <DMA_CheckFifoParam+0x24>)
 8008a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3e:	bf00      	nop
 8008a40:	08008a51 	.word	0x08008a51
 8008a44:	08008a63 	.word	0x08008a63
 8008a48:	08008a51 	.word	0x08008a51
 8008a4c:	08008aeb 	.word	0x08008aeb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d048      	beq.n	8008aee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a60:	e045      	b.n	8008aee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a6a:	d142      	bne.n	8008af2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a70:	e03f      	b.n	8008af2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7a:	d123      	bne.n	8008ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d838      	bhi.n	8008af6 <DMA_CheckFifoParam+0xda>
 8008a84:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <DMA_CheckFifoParam+0x70>)
 8008a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8a:	bf00      	nop
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008aa3 	.word	0x08008aa3
 8008a94:	08008a9d 	.word	0x08008a9d
 8008a98:	08008ab5 	.word	0x08008ab5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8008aa0:	e030      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d025      	beq.n	8008afa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ab2:	e022      	b.n	8008afa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008abc:	d11f      	bne.n	8008afe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ac2:	e01c      	b.n	8008afe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d902      	bls.n	8008ad2 <DMA_CheckFifoParam+0xb6>
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d003      	beq.n	8008ad8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008ad0:	e018      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8008ad6:	e015      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00e      	beq.n	8008b02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae8:	e00b      	b.n	8008b02 <DMA_CheckFifoParam+0xe6>
        break;
 8008aea:	bf00      	nop
 8008aec:	e00a      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
        break;
 8008aee:	bf00      	nop
 8008af0:	e008      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
        break;
 8008af2:	bf00      	nop
 8008af4:	e006      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
        break;
 8008af6:	bf00      	nop
 8008af8:	e004      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
        break;
 8008afa:	bf00      	nop
 8008afc:	e002      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
        break;
 8008afe:	bf00      	nop
 8008b00:	e000      	b.n	8008b04 <DMA_CheckFifoParam+0xe8>
    break;
 8008b02:	bf00      	nop
    }
  }

  return status;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop

08008b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a38      	ldr	r2, [pc, #224]	; (8008c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d022      	beq.n	8008b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a36      	ldr	r2, [pc, #216]	; (8008c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01d      	beq.n	8008b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a35      	ldr	r2, [pc, #212]	; (8008c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d018      	beq.n	8008b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a33      	ldr	r2, [pc, #204]	; (8008c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d013      	beq.n	8008b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a32      	ldr	r2, [pc, #200]	; (8008c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00e      	beq.n	8008b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a30      	ldr	r2, [pc, #192]	; (8008c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d009      	beq.n	8008b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a2f      	ldr	r2, [pc, #188]	; (8008c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d004      	beq.n	8008b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a2d      	ldr	r2, [pc, #180]	; (8008c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d101      	bne.n	8008b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b76:	2300      	movs	r3, #0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01a      	beq.n	8008bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	3b08      	subs	r3, #8
 8008b84:	4a28      	ldr	r2, [pc, #160]	; (8008c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b86:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8a:	091b      	lsrs	r3, r3, #4
 8008b8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4b26      	ldr	r3, [pc, #152]	; (8008c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a24      	ldr	r2, [pc, #144]	; (8008c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008ba0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	2201      	movs	r2, #1
 8008baa:	409a      	lsls	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008bb0:	e024      	b.n	8008bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	3b10      	subs	r3, #16
 8008bba:	4a1e      	ldr	r2, [pc, #120]	; (8008c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc0:	091b      	lsrs	r3, r3, #4
 8008bc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4a1c      	ldr	r2, [pc, #112]	; (8008c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d806      	bhi.n	8008bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4a1b      	ldr	r2, [pc, #108]	; (8008c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d902      	bls.n	8008bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a16      	ldr	r2, [pc, #88]	; (8008c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008bec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	409a      	lsls	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	58025408 	.word	0x58025408
 8008c0c:	5802541c 	.word	0x5802541c
 8008c10:	58025430 	.word	0x58025430
 8008c14:	58025444 	.word	0x58025444
 8008c18:	58025458 	.word	0x58025458
 8008c1c:	5802546c 	.word	0x5802546c
 8008c20:	58025480 	.word	0x58025480
 8008c24:	58025494 	.word	0x58025494
 8008c28:	cccccccd 	.word	0xcccccccd
 8008c2c:	16009600 	.word	0x16009600
 8008c30:	58025880 	.word	0x58025880
 8008c34:	aaaaaaab 	.word	0xaaaaaaab
 8008c38:	400204b8 	.word	0x400204b8
 8008c3c:	4002040f 	.word	0x4002040f
 8008c40:	10008200 	.word	0x10008200
 8008c44:	40020880 	.word	0x40020880

08008c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d04a      	beq.n	8008cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d847      	bhi.n	8008cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a25      	ldr	r2, [pc, #148]	; (8008d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d022      	beq.n	8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a24      	ldr	r2, [pc, #144]	; (8008d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d01d      	beq.n	8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a22      	ldr	r2, [pc, #136]	; (8008d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d018      	beq.n	8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a21      	ldr	r2, [pc, #132]	; (8008d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d013      	beq.n	8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1f      	ldr	r2, [pc, #124]	; (8008d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00e      	beq.n	8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d009      	beq.n	8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1c      	ldr	r2, [pc, #112]	; (8008d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d004      	beq.n	8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d101      	bne.n	8008cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e000      	b.n	8008cba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4b17      	ldr	r3, [pc, #92]	; (8008d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a15      	ldr	r2, [pc, #84]	; (8008d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008cd0:	671a      	str	r2, [r3, #112]	; 0x70
 8008cd2:	e009      	b.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4b14      	ldr	r3, [pc, #80]	; (8008d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a11      	ldr	r2, [pc, #68]	; (8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008ce6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2201      	movs	r2, #1
 8008cee:	409a      	lsls	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	58025408 	.word	0x58025408
 8008d04:	5802541c 	.word	0x5802541c
 8008d08:	58025430 	.word	0x58025430
 8008d0c:	58025444 	.word	0x58025444
 8008d10:	58025458 	.word	0x58025458
 8008d14:	5802546c 	.word	0x5802546c
 8008d18:	58025480 	.word	0x58025480
 8008d1c:	58025494 	.word	0x58025494
 8008d20:	1600963f 	.word	0x1600963f
 8008d24:	58025940 	.word	0x58025940
 8008d28:	1000823f 	.word	0x1000823f
 8008d2c:	40020940 	.word	0x40020940

08008d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b089      	sub	sp, #36	; 0x24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d3e:	4b89      	ldr	r3, [pc, #548]	; (8008f64 <HAL_GPIO_Init+0x234>)
 8008d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d42:	e194      	b.n	800906e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	2101      	movs	r1, #1
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d50:	4013      	ands	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 8186 	beq.w	8009068 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d005      	beq.n	8008d74 <HAL_GPIO_Init+0x44>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d130      	bne.n	8008dd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	2203      	movs	r2, #3
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	43db      	mvns	r3, r3
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	fa02 f303 	lsl.w	r3, r2, r3
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008daa:	2201      	movs	r2, #1
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	43db      	mvns	r3, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4013      	ands	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	091b      	lsrs	r3, r3, #4
 8008dc0:	f003 0201 	and.w	r2, r3, #1
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d017      	beq.n	8008e12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	2203      	movs	r2, #3
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	43db      	mvns	r3, r3
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	4013      	ands	r3, r2
 8008df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	fa02 f303 	lsl.w	r3, r2, r3
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d123      	bne.n	8008e66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	08da      	lsrs	r2, r3, #3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3208      	adds	r2, #8
 8008e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	220f      	movs	r2, #15
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	4013      	ands	r3, r2
 8008e40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	691a      	ldr	r2, [r3, #16]
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	f003 0307 	and.w	r3, r3, #7
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	08da      	lsrs	r2, r3, #3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3208      	adds	r2, #8
 8008e60:	69b9      	ldr	r1, [r7, #24]
 8008e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	2203      	movs	r2, #3
 8008e72:	fa02 f303 	lsl.w	r3, r2, r3
 8008e76:	43db      	mvns	r3, r3
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f003 0203 	and.w	r2, r3, #3
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 80e0 	beq.w	8009068 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ea8:	4b2f      	ldr	r3, [pc, #188]	; (8008f68 <HAL_GPIO_Init+0x238>)
 8008eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eae:	4a2e      	ldr	r2, [pc, #184]	; (8008f68 <HAL_GPIO_Init+0x238>)
 8008eb0:	f043 0302 	orr.w	r3, r3, #2
 8008eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008eb8:	4b2b      	ldr	r3, [pc, #172]	; (8008f68 <HAL_GPIO_Init+0x238>)
 8008eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ec6:	4a29      	ldr	r2, [pc, #164]	; (8008f6c <HAL_GPIO_Init+0x23c>)
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	089b      	lsrs	r3, r3, #2
 8008ecc:	3302      	adds	r3, #2
 8008ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	220f      	movs	r2, #15
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	43db      	mvns	r3, r3
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a20      	ldr	r2, [pc, #128]	; (8008f70 <HAL_GPIO_Init+0x240>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d052      	beq.n	8008f98 <HAL_GPIO_Init+0x268>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a1f      	ldr	r2, [pc, #124]	; (8008f74 <HAL_GPIO_Init+0x244>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d031      	beq.n	8008f5e <HAL_GPIO_Init+0x22e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <HAL_GPIO_Init+0x248>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d02b      	beq.n	8008f5a <HAL_GPIO_Init+0x22a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <HAL_GPIO_Init+0x24c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d025      	beq.n	8008f56 <HAL_GPIO_Init+0x226>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1c      	ldr	r2, [pc, #112]	; (8008f80 <HAL_GPIO_Init+0x250>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d01f      	beq.n	8008f52 <HAL_GPIO_Init+0x222>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a1b      	ldr	r2, [pc, #108]	; (8008f84 <HAL_GPIO_Init+0x254>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d019      	beq.n	8008f4e <HAL_GPIO_Init+0x21e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a1a      	ldr	r2, [pc, #104]	; (8008f88 <HAL_GPIO_Init+0x258>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d013      	beq.n	8008f4a <HAL_GPIO_Init+0x21a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <HAL_GPIO_Init+0x25c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00d      	beq.n	8008f46 <HAL_GPIO_Init+0x216>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <HAL_GPIO_Init+0x260>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d007      	beq.n	8008f42 <HAL_GPIO_Init+0x212>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <HAL_GPIO_Init+0x264>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d101      	bne.n	8008f3e <HAL_GPIO_Init+0x20e>
 8008f3a:	2309      	movs	r3, #9
 8008f3c:	e02d      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f3e:	230a      	movs	r3, #10
 8008f40:	e02b      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f42:	2308      	movs	r3, #8
 8008f44:	e029      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f46:	2307      	movs	r3, #7
 8008f48:	e027      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f4a:	2306      	movs	r3, #6
 8008f4c:	e025      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f4e:	2305      	movs	r3, #5
 8008f50:	e023      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f52:	2304      	movs	r3, #4
 8008f54:	e021      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f56:	2303      	movs	r3, #3
 8008f58:	e01f      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e01d      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e01b      	b.n	8008f9a <HAL_GPIO_Init+0x26a>
 8008f62:	bf00      	nop
 8008f64:	58000080 	.word	0x58000080
 8008f68:	58024400 	.word	0x58024400
 8008f6c:	58000400 	.word	0x58000400
 8008f70:	58020000 	.word	0x58020000
 8008f74:	58020400 	.word	0x58020400
 8008f78:	58020800 	.word	0x58020800
 8008f7c:	58020c00 	.word	0x58020c00
 8008f80:	58021000 	.word	0x58021000
 8008f84:	58021400 	.word	0x58021400
 8008f88:	58021800 	.word	0x58021800
 8008f8c:	58021c00 	.word	0x58021c00
 8008f90:	58022000 	.word	0x58022000
 8008f94:	58022400 	.word	0x58022400
 8008f98:	2300      	movs	r3, #0
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	f002 0203 	and.w	r2, r2, #3
 8008fa0:	0092      	lsls	r2, r2, #2
 8008fa2:	4093      	lsls	r3, r2
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008faa:	4938      	ldr	r1, [pc, #224]	; (800908c <HAL_GPIO_Init+0x35c>)
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	089b      	lsrs	r3, r3, #2
 8008fb0:	3302      	adds	r3, #2
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	43db      	mvns	r3, r3
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800900c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	43db      	mvns	r3, r3
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	4013      	ands	r3, r2
 8009022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	4313      	orrs	r3, r2
 8009036:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	43db      	mvns	r3, r3
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	4013      	ands	r3, r2
 800904c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	3301      	adds	r3, #1
 800906c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	fa22 f303 	lsr.w	r3, r2, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	f47f ae63 	bne.w	8008d44 <HAL_GPIO_Init+0x14>
  }
}
 800907e:	bf00      	nop
 8009080:	bf00      	nop
 8009082:	3724      	adds	r7, #36	; 0x24
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	58000400 	.word	0x58000400

08009090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	887b      	ldrh	r3, [r7, #2]
 80090a2:	4013      	ands	r3, r2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	e001      	b.n	80090b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	807b      	strh	r3, [r7, #2]
 80090cc:	4613      	mov	r3, r2
 80090ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090d0:	787b      	ldrb	r3, [r7, #1]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090d6:	887a      	ldrh	r2, [r7, #2]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090dc:	e003      	b.n	80090e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090de:	887b      	ldrh	r3, [r7, #2]
 80090e0:	041a      	lsls	r2, r3, #16
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	619a      	str	r2, [r3, #24]
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e08b      	b.n	800921e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7fa f8c6 	bl	80032ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2224      	movs	r2, #36	; 0x24
 8009124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0201 	bic.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d107      	bne.n	800916e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800916a:	609a      	str	r2, [r3, #8]
 800916c:	e006      	b.n	800917c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800917a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	2b02      	cmp	r3, #2
 8009182:	d108      	bne.n	8009196 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009192:	605a      	str	r2, [r3, #4]
 8009194:	e007      	b.n	80091a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6859      	ldr	r1, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <HAL_I2C_Init+0x134>)
 80091b2:	430b      	orrs	r3, r1
 80091b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691a      	ldr	r2, [r3, #16]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69d9      	ldr	r1, [r3, #28]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1a      	ldr	r2, [r3, #32]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0201 	orr.w	r2, r2, #1
 80091fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	02008000 	.word	0x02008000

0800922c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af02      	add	r7, sp, #8
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	607a      	str	r2, [r7, #4]
 8009236:	461a      	mov	r2, r3
 8009238:	460b      	mov	r3, r1
 800923a:	817b      	strh	r3, [r7, #10]
 800923c:	4613      	mov	r3, r2
 800923e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b20      	cmp	r3, #32
 800924a:	f040 80fd 	bne.w	8009448 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_I2C_Master_Transmit+0x30>
 8009258:	2302      	movs	r3, #2
 800925a:	e0f6      	b.n	800944a <HAL_I2C_Master_Transmit+0x21e>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009264:	f7fa fdf4 	bl	8003e50 <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	2319      	movs	r3, #25
 8009270:	2201      	movs	r2, #1
 8009272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fa0a 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e0e1      	b.n	800944a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2221      	movs	r2, #33	; 0x21
 800928a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2210      	movs	r2, #16
 8009292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	893a      	ldrh	r2, [r7, #8]
 80092a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	2bff      	cmp	r3, #255	; 0xff
 80092b6:	d906      	bls.n	80092c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	22ff      	movs	r2, #255	; 0xff
 80092bc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80092be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e007      	b.n	80092d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80092d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d024      	beq.n	8009328 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	781a      	ldrb	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009312:	b2db      	uxtb	r3, r3
 8009314:	3301      	adds	r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	8979      	ldrh	r1, [r7, #10]
 800931a:	4b4e      	ldr	r3, [pc, #312]	; (8009454 <HAL_I2C_Master_Transmit+0x228>)
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 fc05 	bl	8009b30 <I2C_TransferConfig>
 8009326:	e066      	b.n	80093f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932c:	b2da      	uxtb	r2, r3
 800932e:	8979      	ldrh	r1, [r7, #10]
 8009330:	4b48      	ldr	r3, [pc, #288]	; (8009454 <HAL_I2C_Master_Transmit+0x228>)
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fbfa 	bl	8009b30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800933c:	e05b      	b.n	80093f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	6a39      	ldr	r1, [r7, #32]
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 f9fd 	bl	8009742 <I2C_WaitOnTXISFlagUntilTimeout>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e07b      	b.n	800944a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937a:	3b01      	subs	r3, #1
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009386:	b29b      	uxth	r3, r3
 8009388:	2b00      	cmp	r3, #0
 800938a:	d034      	beq.n	80093f6 <HAL_I2C_Master_Transmit+0x1ca>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	d130      	bne.n	80093f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	2200      	movs	r2, #0
 800939c:	2180      	movs	r1, #128	; 0x80
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f976 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e04d      	b.n	800944a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	2bff      	cmp	r3, #255	; 0xff
 80093b6:	d90e      	bls.n	80093d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	22ff      	movs	r2, #255	; 0xff
 80093bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	8979      	ldrh	r1, [r7, #10]
 80093c6:	2300      	movs	r3, #0
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fbae 	bl	8009b30 <I2C_TransferConfig>
 80093d4:	e00f      	b.n	80093f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	8979      	ldrh	r1, [r7, #10]
 80093e8:	2300      	movs	r3, #0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fb9d 	bl	8009b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d19e      	bne.n	800933e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	6a39      	ldr	r1, [r7, #32]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f9e3 	bl	80097d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e01a      	b.n	800944a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2220      	movs	r2, #32
 800941a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6859      	ldr	r1, [r3, #4]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <HAL_I2C_Master_Transmit+0x22c>)
 8009428:	400b      	ands	r3, r1
 800942a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2220      	movs	r2, #32
 8009430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	e000      	b.n	800944a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009448:	2302      	movs	r3, #2
  }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	80002000 	.word	0x80002000
 8009458:	fe00e800 	.word	0xfe00e800

0800945c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af02      	add	r7, sp, #8
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	607a      	str	r2, [r7, #4]
 8009466:	461a      	mov	r2, r3
 8009468:	460b      	mov	r3, r1
 800946a:	817b      	strh	r3, [r7, #10]
 800946c:	4613      	mov	r3, r2
 800946e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b20      	cmp	r3, #32
 800947a:	f040 80db 	bne.w	8009634 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_I2C_Master_Receive+0x30>
 8009488:	2302      	movs	r3, #2
 800948a:	e0d4      	b.n	8009636 <HAL_I2C_Master_Receive+0x1da>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009494:	f7fa fcdc 	bl	8003e50 <HAL_GetTick>
 8009498:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	2319      	movs	r3, #25
 80094a0:	2201      	movs	r2, #1
 80094a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 f8f2 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e0bf      	b.n	8009636 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2222      	movs	r2, #34	; 0x22
 80094ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2210      	movs	r2, #16
 80094c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	893a      	ldrh	r2, [r7, #8]
 80094d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2bff      	cmp	r3, #255	; 0xff
 80094e6:	d90e      	bls.n	8009506 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	22ff      	movs	r2, #255	; 0xff
 80094ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	8979      	ldrh	r1, [r7, #10]
 80094f6:	4b52      	ldr	r3, [pc, #328]	; (8009640 <HAL_I2C_Master_Receive+0x1e4>)
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fb16 	bl	8009b30 <I2C_TransferConfig>
 8009504:	e06d      	b.n	80095e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009514:	b2da      	uxtb	r2, r3
 8009516:	8979      	ldrh	r1, [r7, #10]
 8009518:	4b49      	ldr	r3, [pc, #292]	; (8009640 <HAL_I2C_Master_Receive+0x1e4>)
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fb05 	bl	8009b30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009526:	e05c      	b.n	80095e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	6a39      	ldr	r1, [r7, #32]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f993 	bl	8009858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e07c      	b.n	8009636 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009558:	3b01      	subs	r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009564:	b29b      	uxth	r3, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009572:	b29b      	uxth	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d034      	beq.n	80095e2 <HAL_I2C_Master_Receive+0x186>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957c:	2b00      	cmp	r3, #0
 800957e:	d130      	bne.n	80095e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	2200      	movs	r2, #0
 8009588:	2180      	movs	r1, #128	; 0x80
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 f880 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e04d      	b.n	8009636 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959e:	b29b      	uxth	r3, r3
 80095a0:	2bff      	cmp	r3, #255	; 0xff
 80095a2:	d90e      	bls.n	80095c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	22ff      	movs	r2, #255	; 0xff
 80095a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	8979      	ldrh	r1, [r7, #10]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 fab8 	bl	8009b30 <I2C_TransferConfig>
 80095c0:	e00f      	b.n	80095e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	8979      	ldrh	r1, [r7, #10]
 80095d4:	2300      	movs	r3, #0
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 faa7 	bl	8009b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d19d      	bne.n	8009528 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	6a39      	ldr	r1, [r7, #32]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f8ed 	bl	80097d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e01a      	b.n	8009636 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2220      	movs	r2, #32
 8009606:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6859      	ldr	r1, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <HAL_I2C_Master_Receive+0x1e8>)
 8009614:	400b      	ands	r3, r1
 8009616:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	e000      	b.n	8009636 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009634:	2302      	movs	r3, #2
  }
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	80002400 	.word	0x80002400
 8009644:	fe00e800 	.word	0xfe00e800

08009648 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b02      	cmp	r3, #2
 800965c:	d103      	bne.n	8009666 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2200      	movs	r2, #0
 8009664:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b01      	cmp	r3, #1
 8009672:	d007      	beq.n	8009684 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699a      	ldr	r2, [r3, #24]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f042 0201 	orr.w	r2, r2, #1
 8009682:	619a      	str	r2, [r3, #24]
  }
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	4613      	mov	r3, r2
 800969e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096a0:	e03b      	b.n	800971a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 f962 	bl	8009970 <I2C_IsErrorOccurred>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e041      	b.n	800973a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096bc:	d02d      	beq.n	800971a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096be:	f7fa fbc7 	bl	8003e50 <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d302      	bcc.n	80096d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d122      	bne.n	800971a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699a      	ldr	r2, [r3, #24]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	4013      	ands	r3, r2
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	bf0c      	ite	eq
 80096e4:	2301      	moveq	r3, #1
 80096e6:	2300      	movne	r3, #0
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d113      	bne.n	800971a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f6:	f043 0220 	orr.w	r2, r3, #32
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e00f      	b.n	800973a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	699a      	ldr	r2, [r3, #24]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4013      	ands	r3, r2
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	429a      	cmp	r2, r3
 8009736:	d0b4      	beq.n	80096a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800974e:	e033      	b.n	80097b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	68b9      	ldr	r1, [r7, #8]
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 f90b 	bl	8009970 <I2C_IsErrorOccurred>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e031      	b.n	80097c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800976a:	d025      	beq.n	80097b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800976c:	f7fa fb70 	bl	8003e50 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	429a      	cmp	r2, r3
 800977a:	d302      	bcc.n	8009782 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d11a      	bne.n	80097b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b02      	cmp	r3, #2
 800978e:	d013      	beq.n	80097b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009794:	f043 0220 	orr.w	r2, r3, #32
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2220      	movs	r2, #32
 80097a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e007      	b.n	80097c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d1c4      	bne.n	8009750 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097dc:	e02f      	b.n	800983e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	68b9      	ldr	r1, [r7, #8]
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 f8c4 	bl	8009970 <I2C_IsErrorOccurred>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d001      	beq.n	80097f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e02d      	b.n	800984e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097f2:	f7fa fb2d 	bl	8003e50 <HAL_GetTick>
 80097f6:	4602      	mov	r2, r0
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d302      	bcc.n	8009808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d11a      	bne.n	800983e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b20      	cmp	r3, #32
 8009814:	d013      	beq.n	800983e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	f043 0220 	orr.w	r2, r3, #32
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2220      	movs	r2, #32
 8009826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e007      	b.n	800984e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b20      	cmp	r3, #32
 800984a:	d1c8      	bne.n	80097de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009868:	e071      	b.n	800994e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f87e 	bl	8009970 <I2C_IsErrorOccurred>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	f003 0320 	and.w	r3, r3, #32
 8009888:	2b20      	cmp	r3, #32
 800988a:	d13b      	bne.n	8009904 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d138      	bne.n	8009904 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b04      	cmp	r3, #4
 800989e:	d105      	bne.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	f003 0310 	and.w	r3, r3, #16
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d121      	bne.n	80098fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2210      	movs	r2, #16
 80098c0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2204      	movs	r2, #4
 80098c6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2220      	movs	r2, #32
 80098ce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6859      	ldr	r1, [r3, #4]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b24      	ldr	r3, [pc, #144]	; (800996c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80098dc:	400b      	ands	r3, r1
 80098de:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	75fb      	strb	r3, [r7, #23]
 80098fc:	e002      	b.n	8009904 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009904:	f7fa faa4 	bl	8003e50 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d119      	bne.n	800994e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d116      	bne.n	800994e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f003 0304 	and.w	r3, r3, #4
 800992a:	2b04      	cmp	r3, #4
 800992c:	d00f      	beq.n	800994e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009932:	f043 0220 	orr.w	r2, r3, #32
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b04      	cmp	r3, #4
 800995a:	d002      	beq.n	8009962 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d083      	beq.n	800986a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	fe00e800 	.word	0xfe00e800

08009970 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	; 0x28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	f003 0310 	and.w	r3, r3, #16
 8009998:	2b00      	cmp	r3, #0
 800999a:	d068      	beq.n	8009a6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2210      	movs	r2, #16
 80099a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099a4:	e049      	b.n	8009a3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ac:	d045      	beq.n	8009a3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80099ae:	f7fa fa4f 	bl	8003e50 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d302      	bcc.n	80099c4 <I2C_IsErrorOccurred+0x54>
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d13a      	bne.n	8009a3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099e6:	d121      	bne.n	8009a2c <I2C_IsErrorOccurred+0xbc>
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ee:	d01d      	beq.n	8009a2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099f0:	7cfb      	ldrb	r3, [r7, #19]
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d01a      	beq.n	8009a2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a06:	f7fa fa23 	bl	8003e50 <HAL_GetTick>
 8009a0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a0c:	e00e      	b.n	8009a2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a0e:	f7fa fa1f 	bl	8003e50 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b19      	cmp	r3, #25
 8009a1a:	d907      	bls.n	8009a2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	f043 0320 	orr.w	r3, r3, #32
 8009a22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009a2a:	e006      	b.n	8009a3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d1e9      	bne.n	8009a0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d003      	beq.n	8009a50 <I2C_IsErrorOccurred+0xe0>
 8009a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0aa      	beq.n	80099a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	f043 0304 	orr.w	r3, r3, #4
 8009a66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00b      	beq.n	8009aba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	f043 0308 	orr.w	r3, r3, #8
 8009aa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	f043 0302 	orr.w	r3, r3, #2
 8009aca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01c      	beq.n	8009b1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff fdaf 	bl	8009648 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6859      	ldr	r1, [r3, #4]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <I2C_IsErrorOccurred+0x1bc>)
 8009af6:	400b      	ands	r3, r1
 8009af8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	431a      	orrs	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3728      	adds	r7, #40	; 0x28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	fe00e800 	.word	0xfe00e800

08009b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	607b      	str	r3, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	817b      	strh	r3, [r7, #10]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b42:	897b      	ldrh	r3, [r7, #10]
 8009b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b48:	7a7b      	ldrb	r3, [r7, #9]
 8009b4a:	041b      	lsls	r3, r3, #16
 8009b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	0d5b      	lsrs	r3, r3, #21
 8009b6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b6e:	4b08      	ldr	r3, [pc, #32]	; (8009b90 <I2C_TransferConfig+0x60>)
 8009b70:	430b      	orrs	r3, r1
 8009b72:	43db      	mvns	r3, r3
 8009b74:	ea02 0103 	and.w	r1, r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	03ff63ff 	.word	0x03ff63ff

08009b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	d138      	bne.n	8009c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e032      	b.n	8009c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2224      	movs	r2, #36	; 0x24
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0201 	bic.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6819      	ldr	r1, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0201 	orr.w	r2, r2, #1
 8009c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	e000      	b.n	8009c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c1c:	2302      	movs	r3, #2
  }
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b085      	sub	sp, #20
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d139      	bne.n	8009cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e033      	b.n	8009cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2224      	movs	r2, #36	; 0x24
 8009c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0201 	bic.w	r2, r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e000      	b.n	8009cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009cb4:	2302      	movs	r3, #2
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
	...

08009cc4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ccc:	4b0d      	ldr	r3, [pc, #52]	; (8009d04 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cd2:	4a0c      	ldr	r2, [pc, #48]	; (8009d04 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cd4:	f043 0302 	orr.w	r3, r3, #2
 8009cd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009cdc:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	4906      	ldr	r1, [pc, #24]	; (8009d08 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	604b      	str	r3, [r1, #4]
}
 8009cf6:	bf00      	nop
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	58024400 	.word	0x58024400
 8009d08:	58000400 	.word	0x58000400

08009d0c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009d18:	4b18      	ldr	r3, [pc, #96]	; (8009d7c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f023 0201 	bic.w	r2, r3, #1
 8009d20:	4916      	ldr	r1, [pc, #88]	; (8009d7c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009d28:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	4a13      	ldr	r2, [pc, #76]	; (8009d7c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d2e:	f023 0305 	bic.w	r3, r3, #5
 8009d32:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009d34:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	4a10      	ldr	r2, [pc, #64]	; (8009d7c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d3a:	f023 0302 	bic.w	r3, r3, #2
 8009d3e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d40:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	4a0e      	ldr	r2, [pc, #56]	; (8009d80 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d46:	f043 0304 	orr.w	r3, r3, #4
 8009d4a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d4c:	f3bf 8f4f 	dsb	sy
}
 8009d50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009d52:	f3bf 8f6f 	isb	sy
}
 8009d56:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009d5e:	bf30      	wfi
 8009d60:	e000      	b.n	8009d64 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009d62:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d64:	4b06      	ldr	r3, [pc, #24]	; (8009d80 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	4a05      	ldr	r2, [pc, #20]	; (8009d80 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d6a:	f023 0304 	bic.w	r3, r3, #4
 8009d6e:	6113      	str	r3, [r2, #16]
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	58024800 	.word	0x58024800
 8009d80:	e000ed00 	.word	0xe000ed00

08009d84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d8c:	4b19      	ldr	r3, [pc, #100]	; (8009df4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b04      	cmp	r3, #4
 8009d96:	d00a      	beq.n	8009dae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d98:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f003 0307 	and.w	r3, r3, #7
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d001      	beq.n	8009daa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e01f      	b.n	8009dea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e01d      	b.n	8009dea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009dae:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <HAL_PWREx_ConfigSupply+0x70>)
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f023 0207 	bic.w	r2, r3, #7
 8009db6:	490f      	ldr	r1, [pc, #60]	; (8009df4 <HAL_PWREx_ConfigSupply+0x70>)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009dbe:	f7fa f847 	bl	8003e50 <HAL_GetTick>
 8009dc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009dc4:	e009      	b.n	8009dda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009dc6:	f7fa f843 	bl	8003e50 <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dd4:	d901      	bls.n	8009dda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e007      	b.n	8009dea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009dda:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <HAL_PWREx_ConfigSupply+0x70>)
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de6:	d1ee      	bne.n	8009dc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	58024800 	.word	0x58024800

08009df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08c      	sub	sp, #48	; 0x30
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d102      	bne.n	8009e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f000 bc48 	b.w	800a69c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 8088 	beq.w	8009f2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e1a:	4b99      	ldr	r3, [pc, #612]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e24:	4b96      	ldr	r3, [pc, #600]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e28:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	2b10      	cmp	r3, #16
 8009e2e:	d007      	beq.n	8009e40 <HAL_RCC_OscConfig+0x48>
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	2b18      	cmp	r3, #24
 8009e34:	d111      	bne.n	8009e5a <HAL_RCC_OscConfig+0x62>
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	f003 0303 	and.w	r3, r3, #3
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d10c      	bne.n	8009e5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e40:	4b8f      	ldr	r3, [pc, #572]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d06d      	beq.n	8009f28 <HAL_RCC_OscConfig+0x130>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d169      	bne.n	8009f28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f000 bc21 	b.w	800a69c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e62:	d106      	bne.n	8009e72 <HAL_RCC_OscConfig+0x7a>
 8009e64:	4b86      	ldr	r3, [pc, #536]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a85      	ldr	r2, [pc, #532]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	e02e      	b.n	8009ed0 <HAL_RCC_OscConfig+0xd8>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10c      	bne.n	8009e94 <HAL_RCC_OscConfig+0x9c>
 8009e7a:	4b81      	ldr	r3, [pc, #516]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a80      	ldr	r2, [pc, #512]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	4b7e      	ldr	r3, [pc, #504]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a7d      	ldr	r2, [pc, #500]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	e01d      	b.n	8009ed0 <HAL_RCC_OscConfig+0xd8>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e9c:	d10c      	bne.n	8009eb8 <HAL_RCC_OscConfig+0xc0>
 8009e9e:	4b78      	ldr	r3, [pc, #480]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a77      	ldr	r2, [pc, #476]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	4b75      	ldr	r3, [pc, #468]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a74      	ldr	r2, [pc, #464]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	e00b      	b.n	8009ed0 <HAL_RCC_OscConfig+0xd8>
 8009eb8:	4b71      	ldr	r3, [pc, #452]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a70      	ldr	r2, [pc, #448]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	4b6e      	ldr	r3, [pc, #440]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a6d      	ldr	r2, [pc, #436]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d013      	beq.n	8009f00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed8:	f7f9 ffba 	bl	8003e50 <HAL_GetTick>
 8009edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ede:	e008      	b.n	8009ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ee0:	f7f9 ffb6 	bl	8003e50 <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	2b64      	cmp	r3, #100	; 0x64
 8009eec:	d901      	bls.n	8009ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e3d4      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ef2:	4b63      	ldr	r3, [pc, #396]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0f0      	beq.n	8009ee0 <HAL_RCC_OscConfig+0xe8>
 8009efe:	e014      	b.n	8009f2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f00:	f7f9 ffa6 	bl	8003e50 <HAL_GetTick>
 8009f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f06:	e008      	b.n	8009f1a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f08:	f7f9 ffa2 	bl	8003e50 <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	2b64      	cmp	r3, #100	; 0x64
 8009f14:	d901      	bls.n	8009f1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e3c0      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f1a:	4b59      	ldr	r3, [pc, #356]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1f0      	bne.n	8009f08 <HAL_RCC_OscConfig+0x110>
 8009f26:	e000      	b.n	8009f2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80ca 	beq.w	800a0cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f38:	4b51      	ldr	r3, [pc, #324]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f42:	4b4f      	ldr	r3, [pc, #316]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d007      	beq.n	8009f5e <HAL_RCC_OscConfig+0x166>
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	2b18      	cmp	r3, #24
 8009f52:	d156      	bne.n	800a002 <HAL_RCC_OscConfig+0x20a>
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d151      	bne.n	800a002 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f5e:	4b48      	ldr	r3, [pc, #288]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d005      	beq.n	8009f76 <HAL_RCC_OscConfig+0x17e>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e392      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f76:	4b42      	ldr	r3, [pc, #264]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f023 0219 	bic.w	r2, r3, #25
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	493f      	ldr	r1, [pc, #252]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f88:	f7f9 ff62 	bl	8003e50 <HAL_GetTick>
 8009f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f90:	f7f9 ff5e 	bl	8003e50 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e37c      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fa2:	4b37      	ldr	r3, [pc, #220]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0f0      	beq.n	8009f90 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fae:	f7f9 ff5b 	bl	8003e68 <HAL_GetREVID>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d817      	bhi.n	8009fec <HAL_RCC_OscConfig+0x1f4>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b40      	cmp	r3, #64	; 0x40
 8009fc2:	d108      	bne.n	8009fd6 <HAL_RCC_OscConfig+0x1de>
 8009fc4:	4b2e      	ldr	r3, [pc, #184]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009fcc:	4a2c      	ldr	r2, [pc, #176]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fd2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fd4:	e07a      	b.n	800a0cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fd6:	4b2a      	ldr	r3, [pc, #168]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	031b      	lsls	r3, r3, #12
 8009fe4:	4926      	ldr	r1, [pc, #152]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fea:	e06f      	b.n	800a0cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fec:	4b24      	ldr	r3, [pc, #144]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	061b      	lsls	r3, r3, #24
 8009ffa:	4921      	ldr	r1, [pc, #132]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a000:	e064      	b.n	800a0cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d047      	beq.n	800a09a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a00a:	4b1d      	ldr	r3, [pc, #116]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f023 0219 	bic.w	r2, r3, #25
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	491a      	ldr	r1, [pc, #104]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a01c:	f7f9 ff18 	bl	8003e50 <HAL_GetTick>
 800a020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a022:	e008      	b.n	800a036 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a024:	f7f9 ff14 	bl	8003e50 <HAL_GetTick>
 800a028:	4602      	mov	r2, r0
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d901      	bls.n	800a036 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e332      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a036:	4b12      	ldr	r3, [pc, #72]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0304 	and.w	r3, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0f0      	beq.n	800a024 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a042:	f7f9 ff11 	bl	8003e68 <HAL_GetREVID>
 800a046:	4603      	mov	r3, r0
 800a048:	f241 0203 	movw	r2, #4099	; 0x1003
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d819      	bhi.n	800a084 <HAL_RCC_OscConfig+0x28c>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	2b40      	cmp	r3, #64	; 0x40
 800a056:	d108      	bne.n	800a06a <HAL_RCC_OscConfig+0x272>
 800a058:	4b09      	ldr	r3, [pc, #36]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a060:	4a07      	ldr	r2, [pc, #28]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 800a062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a066:	6053      	str	r3, [r2, #4]
 800a068:	e030      	b.n	800a0cc <HAL_RCC_OscConfig+0x2d4>
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	031b      	lsls	r3, r3, #12
 800a078:	4901      	ldr	r1, [pc, #4]	; (800a080 <HAL_RCC_OscConfig+0x288>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	604b      	str	r3, [r1, #4]
 800a07e:	e025      	b.n	800a0cc <HAL_RCC_OscConfig+0x2d4>
 800a080:	58024400 	.word	0x58024400
 800a084:	4b9a      	ldr	r3, [pc, #616]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	061b      	lsls	r3, r3, #24
 800a092:	4997      	ldr	r1, [pc, #604]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a094:	4313      	orrs	r3, r2
 800a096:	604b      	str	r3, [r1, #4]
 800a098:	e018      	b.n	800a0cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a09a:	4b95      	ldr	r3, [pc, #596]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a94      	ldr	r2, [pc, #592]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a6:	f7f9 fed3 	bl	8003e50 <HAL_GetTick>
 800a0aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0ac:	e008      	b.n	800a0c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0ae:	f7f9 fecf 	bl	8003e50 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d901      	bls.n	800a0c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e2ed      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0c0:	4b8b      	ldr	r3, [pc, #556]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1f0      	bne.n	800a0ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 80a9 	beq.w	800a22c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0da:	4b85      	ldr	r3, [pc, #532]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0e4:	4b82      	ldr	r3, [pc, #520]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	2b08      	cmp	r3, #8
 800a0ee:	d007      	beq.n	800a100 <HAL_RCC_OscConfig+0x308>
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	2b18      	cmp	r3, #24
 800a0f4:	d13a      	bne.n	800a16c <HAL_RCC_OscConfig+0x374>
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f003 0303 	and.w	r3, r3, #3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d135      	bne.n	800a16c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a100:	4b7b      	ldr	r3, [pc, #492]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d005      	beq.n	800a118 <HAL_RCC_OscConfig+0x320>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	2b80      	cmp	r3, #128	; 0x80
 800a112:	d001      	beq.n	800a118 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e2c1      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a118:	f7f9 fea6 	bl	8003e68 <HAL_GetREVID>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a122:	4293      	cmp	r3, r2
 800a124:	d817      	bhi.n	800a156 <HAL_RCC_OscConfig+0x35e>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d108      	bne.n	800a140 <HAL_RCC_OscConfig+0x348>
 800a12e:	4b70      	ldr	r3, [pc, #448]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a136:	4a6e      	ldr	r2, [pc, #440]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a13c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a13e:	e075      	b.n	800a22c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a140:	4b6b      	ldr	r3, [pc, #428]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a1b      	ldr	r3, [r3, #32]
 800a14c:	069b      	lsls	r3, r3, #26
 800a14e:	4968      	ldr	r1, [pc, #416]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a150:	4313      	orrs	r3, r2
 800a152:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a154:	e06a      	b.n	800a22c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a156:	4b66      	ldr	r3, [pc, #408]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	061b      	lsls	r3, r3, #24
 800a164:	4962      	ldr	r1, [pc, #392]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a166:	4313      	orrs	r3, r2
 800a168:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a16a:	e05f      	b.n	800a22c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d042      	beq.n	800a1fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a174:	4b5e      	ldr	r3, [pc, #376]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a5d      	ldr	r2, [pc, #372]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a17a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a180:	f7f9 fe66 	bl	8003e50 <HAL_GetTick>
 800a184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a186:	e008      	b.n	800a19a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a188:	f7f9 fe62 	bl	8003e50 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b02      	cmp	r3, #2
 800a194:	d901      	bls.n	800a19a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e280      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a19a:	4b55      	ldr	r3, [pc, #340]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0f0      	beq.n	800a188 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1a6:	f7f9 fe5f 	bl	8003e68 <HAL_GetREVID>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d817      	bhi.n	800a1e4 <HAL_RCC_OscConfig+0x3ec>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	d108      	bne.n	800a1ce <HAL_RCC_OscConfig+0x3d6>
 800a1bc:	4b4c      	ldr	r3, [pc, #304]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a1c4:	4a4a      	ldr	r2, [pc, #296]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a1c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1ca:	6053      	str	r3, [r2, #4]
 800a1cc:	e02e      	b.n	800a22c <HAL_RCC_OscConfig+0x434>
 800a1ce:	4b48      	ldr	r3, [pc, #288]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	069b      	lsls	r3, r3, #26
 800a1dc:	4944      	ldr	r1, [pc, #272]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	604b      	str	r3, [r1, #4]
 800a1e2:	e023      	b.n	800a22c <HAL_RCC_OscConfig+0x434>
 800a1e4:	4b42      	ldr	r3, [pc, #264]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	061b      	lsls	r3, r3, #24
 800a1f2:	493f      	ldr	r1, [pc, #252]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60cb      	str	r3, [r1, #12]
 800a1f8:	e018      	b.n	800a22c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1fa:	4b3d      	ldr	r3, [pc, #244]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a3c      	ldr	r2, [pc, #240]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a206:	f7f9 fe23 	bl	8003e50 <HAL_GetTick>
 800a20a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a20c:	e008      	b.n	800a220 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a20e:	f7f9 fe1f 	bl	8003e50 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d901      	bls.n	800a220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e23d      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a220:	4b33      	ldr	r3, [pc, #204]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1f0      	bne.n	800a20e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0308 	and.w	r3, r3, #8
 800a234:	2b00      	cmp	r3, #0
 800a236:	d036      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d019      	beq.n	800a274 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a240:	4b2b      	ldr	r3, [pc, #172]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a244:	4a2a      	ldr	r2, [pc, #168]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a246:	f043 0301 	orr.w	r3, r3, #1
 800a24a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a24c:	f7f9 fe00 	bl	8003e50 <HAL_GetTick>
 800a250:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a254:	f7f9 fdfc 	bl	8003e50 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e21a      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a266:	4b22      	ldr	r3, [pc, #136]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0f0      	beq.n	800a254 <HAL_RCC_OscConfig+0x45c>
 800a272:	e018      	b.n	800a2a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a274:	4b1e      	ldr	r3, [pc, #120]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a278:	4a1d      	ldr	r2, [pc, #116]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a27a:	f023 0301 	bic.w	r3, r3, #1
 800a27e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a280:	f7f9 fde6 	bl	8003e50 <HAL_GetTick>
 800a284:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a286:	e008      	b.n	800a29a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a288:	f7f9 fde2 	bl	8003e50 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b02      	cmp	r3, #2
 800a294:	d901      	bls.n	800a29a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e200      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a29a:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1f0      	bne.n	800a288 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d039      	beq.n	800a326 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d01c      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a0c      	ldr	r2, [pc, #48]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a2c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2c6:	f7f9 fdc3 	bl	8003e50 <HAL_GetTick>
 800a2ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2cc:	e008      	b.n	800a2e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2ce:	f7f9 fdbf 	bl	8003e50 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d901      	bls.n	800a2e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e1dd      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2e0:	4b03      	ldr	r3, [pc, #12]	; (800a2f0 <HAL_RCC_OscConfig+0x4f8>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0f0      	beq.n	800a2ce <HAL_RCC_OscConfig+0x4d6>
 800a2ec:	e01b      	b.n	800a326 <HAL_RCC_OscConfig+0x52e>
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2f4:	4b9b      	ldr	r3, [pc, #620]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a9a      	ldr	r2, [pc, #616]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a2fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a300:	f7f9 fda6 	bl	8003e50 <HAL_GetTick>
 800a304:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a306:	e008      	b.n	800a31a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a308:	f7f9 fda2 	bl	8003e50 <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	2b02      	cmp	r3, #2
 800a314:	d901      	bls.n	800a31a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e1c0      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a31a:	4b92      	ldr	r3, [pc, #584]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1f0      	bne.n	800a308 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 8081 	beq.w	800a436 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a334:	4b8c      	ldr	r3, [pc, #560]	; (800a568 <HAL_RCC_OscConfig+0x770>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a8b      	ldr	r2, [pc, #556]	; (800a568 <HAL_RCC_OscConfig+0x770>)
 800a33a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a33e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a340:	f7f9 fd86 	bl	8003e50 <HAL_GetTick>
 800a344:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a346:	e008      	b.n	800a35a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a348:	f7f9 fd82 	bl	8003e50 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b64      	cmp	r3, #100	; 0x64
 800a354:	d901      	bls.n	800a35a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e1a0      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a35a:	4b83      	ldr	r3, [pc, #524]	; (800a568 <HAL_RCC_OscConfig+0x770>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0f0      	beq.n	800a348 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d106      	bne.n	800a37c <HAL_RCC_OscConfig+0x584>
 800a36e:	4b7d      	ldr	r3, [pc, #500]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a372:	4a7c      	ldr	r2, [pc, #496]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a374:	f043 0301 	orr.w	r3, r3, #1
 800a378:	6713      	str	r3, [r2, #112]	; 0x70
 800a37a:	e02d      	b.n	800a3d8 <HAL_RCC_OscConfig+0x5e0>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10c      	bne.n	800a39e <HAL_RCC_OscConfig+0x5a6>
 800a384:	4b77      	ldr	r3, [pc, #476]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a388:	4a76      	ldr	r2, [pc, #472]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a38a:	f023 0301 	bic.w	r3, r3, #1
 800a38e:	6713      	str	r3, [r2, #112]	; 0x70
 800a390:	4b74      	ldr	r3, [pc, #464]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a394:	4a73      	ldr	r2, [pc, #460]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a396:	f023 0304 	bic.w	r3, r3, #4
 800a39a:	6713      	str	r3, [r2, #112]	; 0x70
 800a39c:	e01c      	b.n	800a3d8 <HAL_RCC_OscConfig+0x5e0>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d10c      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x5c8>
 800a3a6:	4b6f      	ldr	r3, [pc, #444]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	4a6e      	ldr	r2, [pc, #440]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3ac:	f043 0304 	orr.w	r3, r3, #4
 800a3b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a3b2:	4b6c      	ldr	r3, [pc, #432]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	4a6b      	ldr	r2, [pc, #428]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3b8:	f043 0301 	orr.w	r3, r3, #1
 800a3bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a3be:	e00b      	b.n	800a3d8 <HAL_RCC_OscConfig+0x5e0>
 800a3c0:	4b68      	ldr	r3, [pc, #416]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c4:	4a67      	ldr	r2, [pc, #412]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3c6:	f023 0301 	bic.w	r3, r3, #1
 800a3ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a3cc:	4b65      	ldr	r3, [pc, #404]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d0:	4a64      	ldr	r2, [pc, #400]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a3d2:	f023 0304 	bic.w	r3, r3, #4
 800a3d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d015      	beq.n	800a40c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e0:	f7f9 fd36 	bl	8003e50 <HAL_GetTick>
 800a3e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3e6:	e00a      	b.n	800a3fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3e8:	f7f9 fd32 	bl	8003e50 <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d901      	bls.n	800a3fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e14e      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3fe:	4b59      	ldr	r3, [pc, #356]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0ee      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x5f0>
 800a40a:	e014      	b.n	800a436 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a40c:	f7f9 fd20 	bl	8003e50 <HAL_GetTick>
 800a410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a412:	e00a      	b.n	800a42a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a414:	f7f9 fd1c 	bl	8003e50 <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a422:	4293      	cmp	r3, r2
 800a424:	d901      	bls.n	800a42a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e138      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a42a:	4b4e      	ldr	r3, [pc, #312]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42e:	f003 0302 	and.w	r3, r3, #2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1ee      	bne.n	800a414 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 812d 	beq.w	800a69a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a440:	4b48      	ldr	r3, [pc, #288]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a448:	2b18      	cmp	r3, #24
 800a44a:	f000 80bd 	beq.w	800a5c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a452:	2b02      	cmp	r3, #2
 800a454:	f040 809e 	bne.w	800a594 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a458:	4b42      	ldr	r3, [pc, #264]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a41      	ldr	r2, [pc, #260]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a45e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a464:	f7f9 fcf4 	bl	8003e50 <HAL_GetTick>
 800a468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a46c:	f7f9 fcf0 	bl	8003e50 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e10e      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a47e:	4b39      	ldr	r3, [pc, #228]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f0      	bne.n	800a46c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a48a:	4b36      	ldr	r3, [pc, #216]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a48c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a48e:	4b37      	ldr	r3, [pc, #220]	; (800a56c <HAL_RCC_OscConfig+0x774>)
 800a490:	4013      	ands	r3, r2
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a49a:	0112      	lsls	r2, r2, #4
 800a49c:	430a      	orrs	r2, r1
 800a49e:	4931      	ldr	r1, [pc, #196]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	628b      	str	r3, [r1, #40]	; 0x28
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	025b      	lsls	r3, r3, #9
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	041b      	lsls	r3, r3, #16
 800a4c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	061b      	lsls	r3, r3, #24
 800a4d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4d4:	4923      	ldr	r1, [pc, #140]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a4da:	4b22      	ldr	r3, [pc, #136]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	4a21      	ldr	r2, [pc, #132]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a4e0:	f023 0301 	bic.w	r3, r3, #1
 800a4e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4e6:	4b1f      	ldr	r3, [pc, #124]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a4e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ea:	4b21      	ldr	r3, [pc, #132]	; (800a570 <HAL_RCC_OscConfig+0x778>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4f2:	00d2      	lsls	r2, r2, #3
 800a4f4:	491b      	ldr	r1, [pc, #108]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4fa:	4b1a      	ldr	r3, [pc, #104]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	f023 020c 	bic.w	r2, r3, #12
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a506:	4917      	ldr	r1, [pc, #92]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a50c:	4b15      	ldr	r3, [pc, #84]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	f023 0202 	bic.w	r2, r3, #2
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a518:	4912      	ldr	r1, [pc, #72]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a51e:	4b11      	ldr	r3, [pc, #68]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	4a10      	ldr	r2, [pc, #64]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a52a:	4b0e      	ldr	r3, [pc, #56]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	4a0d      	ldr	r2, [pc, #52]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a536:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	4a0a      	ldr	r2, [pc, #40]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a53c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a542:	4b08      	ldr	r3, [pc, #32]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a546:	4a07      	ldr	r2, [pc, #28]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a548:	f043 0301 	orr.w	r3, r3, #1
 800a54c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a04      	ldr	r2, [pc, #16]	; (800a564 <HAL_RCC_OscConfig+0x76c>)
 800a554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a55a:	f7f9 fc79 	bl	8003e50 <HAL_GetTick>
 800a55e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a560:	e011      	b.n	800a586 <HAL_RCC_OscConfig+0x78e>
 800a562:	bf00      	nop
 800a564:	58024400 	.word	0x58024400
 800a568:	58024800 	.word	0x58024800
 800a56c:	fffffc0c 	.word	0xfffffc0c
 800a570:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a574:	f7f9 fc6c 	bl	8003e50 <HAL_GetTick>
 800a578:	4602      	mov	r2, r0
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d901      	bls.n	800a586 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e08a      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a586:	4b47      	ldr	r3, [pc, #284]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0f0      	beq.n	800a574 <HAL_RCC_OscConfig+0x77c>
 800a592:	e082      	b.n	800a69a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a594:	4b43      	ldr	r3, [pc, #268]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a42      	ldr	r2, [pc, #264]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a59a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a59e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a0:	f7f9 fc56 	bl	8003e50 <HAL_GetTick>
 800a5a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5a6:	e008      	b.n	800a5ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5a8:	f7f9 fc52 	bl	8003e50 <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e070      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5ba:	4b3a      	ldr	r3, [pc, #232]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1f0      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x7b0>
 800a5c6:	e068      	b.n	800a69a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5c8:	4b36      	ldr	r3, [pc, #216]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5ce:	4b35      	ldr	r3, [pc, #212]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d031      	beq.n	800a640 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f003 0203 	and.w	r2, r3, #3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d12a      	bne.n	800a640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	091b      	lsrs	r3, r3, #4
 800a5ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d122      	bne.n	800a640 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a604:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a606:	429a      	cmp	r2, r3
 800a608:	d11a      	bne.n	800a640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	0a5b      	lsrs	r3, r3, #9
 800a60e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a616:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a618:	429a      	cmp	r2, r3
 800a61a:	d111      	bne.n	800a640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	0c1b      	lsrs	r3, r3, #16
 800a620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d108      	bne.n	800a640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	0e1b      	lsrs	r3, r3, #24
 800a632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d001      	beq.n	800a644 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e02b      	b.n	800a69c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a644:	4b17      	ldr	r3, [pc, #92]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a648:	08db      	lsrs	r3, r3, #3
 800a64a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a64e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	429a      	cmp	r2, r3
 800a658:	d01f      	beq.n	800a69a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a65a:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	4a11      	ldr	r2, [pc, #68]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a660:	f023 0301 	bic.w	r3, r3, #1
 800a664:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a666:	f7f9 fbf3 	bl	8003e50 <HAL_GetTick>
 800a66a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a66c:	bf00      	nop
 800a66e:	f7f9 fbef 	bl	8003e50 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	4293      	cmp	r3, r2
 800a678:	d0f9      	beq.n	800a66e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a67a:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a67c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a67e:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <HAL_RCC_OscConfig+0x8b0>)
 800a680:	4013      	ands	r3, r2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a686:	00d2      	lsls	r2, r2, #3
 800a688:	4906      	ldr	r1, [pc, #24]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a68e:	4b05      	ldr	r3, [pc, #20]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a692:	4a04      	ldr	r2, [pc, #16]	; (800a6a4 <HAL_RCC_OscConfig+0x8ac>)
 800a694:	f043 0301 	orr.w	r3, r3, #1
 800a698:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3730      	adds	r7, #48	; 0x30
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	58024400 	.word	0x58024400
 800a6a8:	ffff0007 	.word	0xffff0007

0800a6ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e19c      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6c0:	4b8a      	ldr	r3, [pc, #552]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d910      	bls.n	800a6f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ce:	4b87      	ldr	r3, [pc, #540]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f023 020f 	bic.w	r2, r3, #15
 800a6d6:	4985      	ldr	r1, [pc, #532]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6de:	4b83      	ldr	r3, [pc, #524]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d001      	beq.n	800a6f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e184      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d010      	beq.n	800a71e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	691a      	ldr	r2, [r3, #16]
 800a700:	4b7b      	ldr	r3, [pc, #492]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a708:	429a      	cmp	r2, r3
 800a70a:	d908      	bls.n	800a71e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a70c:	4b78      	ldr	r3, [pc, #480]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	4975      	ldr	r1, [pc, #468]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a71a:	4313      	orrs	r3, r2
 800a71c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0308 	and.w	r3, r3, #8
 800a726:	2b00      	cmp	r3, #0
 800a728:	d010      	beq.n	800a74c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	695a      	ldr	r2, [r3, #20]
 800a72e:	4b70      	ldr	r3, [pc, #448]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a736:	429a      	cmp	r2, r3
 800a738:	d908      	bls.n	800a74c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a73a:	4b6d      	ldr	r3, [pc, #436]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	496a      	ldr	r1, [pc, #424]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b00      	cmp	r3, #0
 800a756:	d010      	beq.n	800a77a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	699a      	ldr	r2, [r3, #24]
 800a75c:	4b64      	ldr	r3, [pc, #400]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a764:	429a      	cmp	r2, r3
 800a766:	d908      	bls.n	800a77a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a768:	4b61      	ldr	r3, [pc, #388]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	495e      	ldr	r1, [pc, #376]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a776:	4313      	orrs	r3, r2
 800a778:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0320 	and.w	r3, r3, #32
 800a782:	2b00      	cmp	r3, #0
 800a784:	d010      	beq.n	800a7a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	69da      	ldr	r2, [r3, #28]
 800a78a:	4b59      	ldr	r3, [pc, #356]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a792:	429a      	cmp	r2, r3
 800a794:	d908      	bls.n	800a7a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a796:	4b56      	ldr	r3, [pc, #344]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	4953      	ldr	r1, [pc, #332]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0302 	and.w	r3, r3, #2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d010      	beq.n	800a7d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	4b4d      	ldr	r3, [pc, #308]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	f003 030f 	and.w	r3, r3, #15
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d908      	bls.n	800a7d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7c4:	4b4a      	ldr	r3, [pc, #296]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	f023 020f 	bic.w	r2, r3, #15
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	4947      	ldr	r1, [pc, #284]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d055      	beq.n	800a88e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a7e2:	4b43      	ldr	r3, [pc, #268]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	4940      	ldr	r1, [pc, #256]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d107      	bne.n	800a80c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7fc:	4b3c      	ldr	r3, [pc, #240]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d121      	bne.n	800a84c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e0f6      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	2b03      	cmp	r3, #3
 800a812:	d107      	bne.n	800a824 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a814:	4b36      	ldr	r3, [pc, #216]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d115      	bne.n	800a84c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	e0ea      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d107      	bne.n	800a83c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a82c:	4b30      	ldr	r3, [pc, #192]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a834:	2b00      	cmp	r3, #0
 800a836:	d109      	bne.n	800a84c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e0de      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a83c:	4b2c      	ldr	r3, [pc, #176]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e0d6      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a84c:	4b28      	ldr	r3, [pc, #160]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	f023 0207 	bic.w	r2, r3, #7
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	4925      	ldr	r1, [pc, #148]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a85e:	f7f9 faf7 	bl	8003e50 <HAL_GetTick>
 800a862:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a864:	e00a      	b.n	800a87c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a866:	f7f9 faf3 	bl	8003e50 <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	f241 3288 	movw	r2, #5000	; 0x1388
 800a874:	4293      	cmp	r3, r2
 800a876:	d901      	bls.n	800a87c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e0be      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a87c:	4b1c      	ldr	r3, [pc, #112]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	00db      	lsls	r3, r3, #3
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d1eb      	bne.n	800a866 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d010      	beq.n	800a8bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f003 030f 	and.w	r3, r3, #15
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d208      	bcs.n	800a8bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8aa:	4b11      	ldr	r3, [pc, #68]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	f023 020f 	bic.w	r2, r3, #15
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	490e      	ldr	r1, [pc, #56]	; (800a8f0 <HAL_RCC_ClockConfig+0x244>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 030f 	and.w	r3, r3, #15
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d214      	bcs.n	800a8f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8ca:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f023 020f 	bic.w	r2, r3, #15
 800a8d2:	4906      	ldr	r1, [pc, #24]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8da:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <HAL_RCC_ClockConfig+0x240>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 030f 	and.w	r3, r3, #15
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d005      	beq.n	800a8f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e086      	b.n	800a9fa <HAL_RCC_ClockConfig+0x34e>
 800a8ec:	52002000 	.word	0x52002000
 800a8f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d010      	beq.n	800a922 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691a      	ldr	r2, [r3, #16]
 800a904:	4b3f      	ldr	r3, [pc, #252]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d208      	bcs.n	800a922 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a910:	4b3c      	ldr	r3, [pc, #240]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	4939      	ldr	r1, [pc, #228]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a91e:	4313      	orrs	r3, r2
 800a920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0308 	and.w	r3, r3, #8
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d010      	beq.n	800a950 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	695a      	ldr	r2, [r3, #20]
 800a932:	4b34      	ldr	r3, [pc, #208]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d208      	bcs.n	800a950 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a93e:	4b31      	ldr	r3, [pc, #196]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	492e      	ldr	r1, [pc, #184]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a94c:	4313      	orrs	r3, r2
 800a94e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d010      	beq.n	800a97e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	699a      	ldr	r2, [r3, #24]
 800a960:	4b28      	ldr	r3, [pc, #160]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a968:	429a      	cmp	r2, r3
 800a96a:	d208      	bcs.n	800a97e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a96c:	4b25      	ldr	r3, [pc, #148]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	4922      	ldr	r1, [pc, #136]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0320 	and.w	r3, r3, #32
 800a986:	2b00      	cmp	r3, #0
 800a988:	d010      	beq.n	800a9ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	69da      	ldr	r2, [r3, #28]
 800a98e:	4b1d      	ldr	r3, [pc, #116]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a996:	429a      	cmp	r2, r3
 800a998:	d208      	bcs.n	800a9ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a99a:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	4917      	ldr	r1, [pc, #92]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a9ac:	f000 f834 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	0a1b      	lsrs	r3, r3, #8
 800a9b8:	f003 030f 	and.w	r3, r3, #15
 800a9bc:	4912      	ldr	r1, [pc, #72]	; (800aa08 <HAL_RCC_ClockConfig+0x35c>)
 800a9be:	5ccb      	ldrb	r3, [r1, r3]
 800a9c0:	f003 031f 	and.w	r3, r3, #31
 800a9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9ca:	4b0e      	ldr	r3, [pc, #56]	; (800aa04 <HAL_RCC_ClockConfig+0x358>)
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	4a0d      	ldr	r2, [pc, #52]	; (800aa08 <HAL_RCC_ClockConfig+0x35c>)
 800a9d4:	5cd3      	ldrb	r3, [r2, r3]
 800a9d6:	f003 031f 	and.w	r3, r3, #31
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <HAL_RCC_ClockConfig+0x360>)
 800a9e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9e4:	4a0a      	ldr	r2, [pc, #40]	; (800aa10 <HAL_RCC_ClockConfig+0x364>)
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a9ea:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <HAL_RCC_ClockConfig+0x368>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7f8 ff52 	bl	8003898 <HAL_InitTick>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	58024400 	.word	0x58024400
 800aa08:	08017730 	.word	0x08017730
 800aa0c:	24000094 	.word	0x24000094
 800aa10:	24000090 	.word	0x24000090
 800aa14:	24000098 	.word	0x24000098

0800aa18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b089      	sub	sp, #36	; 0x24
 800aa1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa1e:	4bb3      	ldr	r3, [pc, #716]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa26:	2b18      	cmp	r3, #24
 800aa28:	f200 8155 	bhi.w	800acd6 <HAL_RCC_GetSysClockFreq+0x2be>
 800aa2c:	a201      	add	r2, pc, #4	; (adr r2, 800aa34 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa32:	bf00      	nop
 800aa34:	0800aa99 	.word	0x0800aa99
 800aa38:	0800acd7 	.word	0x0800acd7
 800aa3c:	0800acd7 	.word	0x0800acd7
 800aa40:	0800acd7 	.word	0x0800acd7
 800aa44:	0800acd7 	.word	0x0800acd7
 800aa48:	0800acd7 	.word	0x0800acd7
 800aa4c:	0800acd7 	.word	0x0800acd7
 800aa50:	0800acd7 	.word	0x0800acd7
 800aa54:	0800aabf 	.word	0x0800aabf
 800aa58:	0800acd7 	.word	0x0800acd7
 800aa5c:	0800acd7 	.word	0x0800acd7
 800aa60:	0800acd7 	.word	0x0800acd7
 800aa64:	0800acd7 	.word	0x0800acd7
 800aa68:	0800acd7 	.word	0x0800acd7
 800aa6c:	0800acd7 	.word	0x0800acd7
 800aa70:	0800acd7 	.word	0x0800acd7
 800aa74:	0800aac5 	.word	0x0800aac5
 800aa78:	0800acd7 	.word	0x0800acd7
 800aa7c:	0800acd7 	.word	0x0800acd7
 800aa80:	0800acd7 	.word	0x0800acd7
 800aa84:	0800acd7 	.word	0x0800acd7
 800aa88:	0800acd7 	.word	0x0800acd7
 800aa8c:	0800acd7 	.word	0x0800acd7
 800aa90:	0800acd7 	.word	0x0800acd7
 800aa94:	0800aacb 	.word	0x0800aacb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa98:	4b94      	ldr	r3, [pc, #592]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0320 	and.w	r3, r3, #32
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d009      	beq.n	800aab8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa4:	4b91      	ldr	r3, [pc, #580]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	08db      	lsrs	r3, r3, #3
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	4a90      	ldr	r2, [pc, #576]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aab0:	fa22 f303 	lsr.w	r3, r2, r3
 800aab4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aab6:	e111      	b.n	800acdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aab8:	4b8d      	ldr	r3, [pc, #564]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aaba:	61bb      	str	r3, [r7, #24]
      break;
 800aabc:	e10e      	b.n	800acdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aabe:	4b8d      	ldr	r3, [pc, #564]	; (800acf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aac0:	61bb      	str	r3, [r7, #24]
      break;
 800aac2:	e10b      	b.n	800acdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aac4:	4b8c      	ldr	r3, [pc, #560]	; (800acf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aac6:	61bb      	str	r3, [r7, #24]
      break;
 800aac8:	e108      	b.n	800acdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaca:	4b88      	ldr	r3, [pc, #544]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aace:	f003 0303 	and.w	r3, r3, #3
 800aad2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aad4:	4b85      	ldr	r3, [pc, #532]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad8:	091b      	lsrs	r3, r3, #4
 800aada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aade:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aae0:	4b82      	ldr	r3, [pc, #520]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aaea:	4b80      	ldr	r3, [pc, #512]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaee:	08db      	lsrs	r3, r3, #3
 800aaf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	fb02 f303 	mul.w	r3, r2, r3
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 80e1 	beq.w	800acd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	f000 8083 	beq.w	800ac1c <HAL_RCC_GetSysClockFreq+0x204>
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	f200 80a1 	bhi.w	800ac60 <HAL_RCC_GetSysClockFreq+0x248>
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <HAL_RCC_GetSysClockFreq+0x114>
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d056      	beq.n	800abd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ab2a:	e099      	b.n	800ac60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab2c:	4b6f      	ldr	r3, [pc, #444]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d02d      	beq.n	800ab94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab38:	4b6c      	ldr	r3, [pc, #432]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	08db      	lsrs	r3, r3, #3
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	4a6b      	ldr	r2, [pc, #428]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab44:	fa22 f303 	lsr.w	r3, r2, r3
 800ab48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	ee07 3a90 	vmov	s15, r3
 800ab50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	ee07 3a90 	vmov	s15, r3
 800ab5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab62:	4b62      	ldr	r3, [pc, #392]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab72:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab76:	eddf 5a61 	vldr	s11, [pc, #388]	; 800acfc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab92:	e087      	b.n	800aca4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ad00 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba6:	4b51      	ldr	r3, [pc, #324]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800abba:	eddf 5a50 	vldr	s11, [pc, #320]	; 800acfc <HAL_RCC_GetSysClockFreq+0x2e4>
 800abbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abd6:	e065      	b.n	800aca4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ad04 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abea:	4b40      	ldr	r3, [pc, #256]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfa:	ed97 6a02 	vldr	s12, [r7, #8]
 800abfe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800acfc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac1a:	e043      	b.n	800aca4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ad08 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ac2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2e:	4b2f      	ldr	r3, [pc, #188]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800acfc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac5e:	e021      	b.n	800aca4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ad04 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac72:	4b1e      	ldr	r3, [pc, #120]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac82:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800acfc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aca2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aca4:	4b11      	ldr	r3, [pc, #68]	; (800acec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca8:	0a5b      	lsrs	r3, r3, #9
 800acaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acae:	3301      	adds	r3, #1
 800acb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800acc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acc8:	ee17 3a90 	vmov	r3, s15
 800accc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800acce:	e005      	b.n	800acdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	61bb      	str	r3, [r7, #24]
      break;
 800acd4:	e002      	b.n	800acdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800acd6:	4b07      	ldr	r3, [pc, #28]	; (800acf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800acd8:	61bb      	str	r3, [r7, #24]
      break;
 800acda:	bf00      	nop
  }

  return sysclockfreq;
 800acdc:	69bb      	ldr	r3, [r7, #24]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	58024400 	.word	0x58024400
 800acf0:	03d09000 	.word	0x03d09000
 800acf4:	003d0900 	.word	0x003d0900
 800acf8:	017d7840 	.word	0x017d7840
 800acfc:	46000000 	.word	0x46000000
 800ad00:	4c742400 	.word	0x4c742400
 800ad04:	4a742400 	.word	0x4a742400
 800ad08:	4bbebc20 	.word	0x4bbebc20

0800ad0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad12:	f7ff fe81 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 800ad16:	4602      	mov	r2, r0
 800ad18:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <HAL_RCC_GetHCLKFreq+0x50>)
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	0a1b      	lsrs	r3, r3, #8
 800ad1e:	f003 030f 	and.w	r3, r3, #15
 800ad22:	490f      	ldr	r1, [pc, #60]	; (800ad60 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad24:	5ccb      	ldrb	r3, [r1, r3]
 800ad26:	f003 031f 	and.w	r3, r3, #31
 800ad2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad30:	4b0a      	ldr	r3, [pc, #40]	; (800ad5c <HAL_RCC_GetHCLKFreq+0x50>)
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	f003 030f 	and.w	r3, r3, #15
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad3a:	5cd3      	ldrb	r3, [r2, r3]
 800ad3c:	f003 031f 	and.w	r3, r3, #31
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	fa22 f303 	lsr.w	r3, r2, r3
 800ad46:	4a07      	ldr	r2, [pc, #28]	; (800ad64 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad4a:	4a07      	ldr	r2, [pc, #28]	; (800ad68 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad52:	681b      	ldr	r3, [r3, #0]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	08017730 	.word	0x08017730
 800ad64:	24000094 	.word	0x24000094
 800ad68:	24000090 	.word	0x24000090

0800ad6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad70:	f7ff ffcc 	bl	800ad0c <HAL_RCC_GetHCLKFreq>
 800ad74:	4602      	mov	r2, r0
 800ad76:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	091b      	lsrs	r3, r3, #4
 800ad7c:	f003 0307 	and.w	r3, r3, #7
 800ad80:	4904      	ldr	r1, [pc, #16]	; (800ad94 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad82:	5ccb      	ldrb	r3, [r1, r3]
 800ad84:	f003 031f 	and.w	r3, r3, #31
 800ad88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	58024400 	.word	0x58024400
 800ad94:	08017730 	.word	0x08017730

0800ad98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad9c:	f7ff ffb6 	bl	800ad0c <HAL_RCC_GetHCLKFreq>
 800ada0:	4602      	mov	r2, r0
 800ada2:	4b06      	ldr	r3, [pc, #24]	; (800adbc <HAL_RCC_GetPCLK2Freq+0x24>)
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	0a1b      	lsrs	r3, r3, #8
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	4904      	ldr	r1, [pc, #16]	; (800adc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800adae:	5ccb      	ldrb	r3, [r1, r3]
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800adb8:	4618      	mov	r0, r3
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	58024400 	.word	0x58024400
 800adc0:	08017730 	.word	0x08017730

0800adc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	223f      	movs	r2, #63	; 0x3f
 800add2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800add4:	4b1a      	ldr	r3, [pc, #104]	; (800ae40 <HAL_RCC_GetClockConfig+0x7c>)
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	f003 0207 	and.w	r2, r3, #7
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ade0:	4b17      	ldr	r3, [pc, #92]	; (800ae40 <HAL_RCC_GetClockConfig+0x7c>)
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800adec:	4b14      	ldr	r3, [pc, #80]	; (800ae40 <HAL_RCC_GetClockConfig+0x7c>)
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	f003 020f 	and.w	r2, r3, #15
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800adf8:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <HAL_RCC_GetClockConfig+0x7c>)
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ae04:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <HAL_RCC_GetClockConfig+0x7c>)
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <HAL_RCC_GetClockConfig+0x7c>)
 800ae12:	69db      	ldr	r3, [r3, #28]
 800ae14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ae1c:	4b08      	ldr	r3, [pc, #32]	; (800ae40 <HAL_RCC_GetClockConfig+0x7c>)
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae28:	4b06      	ldr	r3, [pc, #24]	; (800ae44 <HAL_RCC_GetClockConfig+0x80>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 020f 	and.w	r2, r3, #15
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	601a      	str	r2, [r3, #0]
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	58024400 	.word	0x58024400
 800ae44:	52002000 	.word	0x52002000

0800ae48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae4c:	b0ca      	sub	sp, #296	; 0x128
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae54:	2300      	movs	r3, #0
 800ae56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ae6c:	2500      	movs	r5, #0
 800ae6e:	ea54 0305 	orrs.w	r3, r4, r5
 800ae72:	d049      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae7e:	d02f      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae84:	d828      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae8a:	d01a      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ae8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae90:	d822      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d003      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ae96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae9a:	d007      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae9c:	e01c      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae9e:	4bb8      	ldr	r3, [pc, #736]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea2:	4ab7      	ldr	r2, [pc, #732]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aeaa:	e01a      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aeac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	2102      	movs	r1, #2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 fb61 	bl	800d57c <RCCEx_PLL2_Config>
 800aeba:	4603      	mov	r3, r0
 800aebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aec0:	e00f      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec6:	3328      	adds	r3, #40	; 0x28
 800aec8:	2102      	movs	r1, #2
 800aeca:	4618      	mov	r0, r3
 800aecc:	f002 fc08 	bl	800d6e0 <RCCEx_PLL3_Config>
 800aed0:	4603      	mov	r3, r0
 800aed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aed6:	e004      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aede:	e000      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10a      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aeea:	4ba5      	ldr	r3, [pc, #660]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aef8:	4aa1      	ldr	r2, [pc, #644]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aefa:	430b      	orrs	r3, r1
 800aefc:	6513      	str	r3, [r2, #80]	; 0x50
 800aefe:	e003      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800af08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800af14:	f04f 0900 	mov.w	r9, #0
 800af18:	ea58 0309 	orrs.w	r3, r8, r9
 800af1c:	d047      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800af1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af24:	2b04      	cmp	r3, #4
 800af26:	d82a      	bhi.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af45 	.word	0x0800af45
 800af34:	0800af53 	.word	0x0800af53
 800af38:	0800af69 	.word	0x0800af69
 800af3c:	0800af87 	.word	0x0800af87
 800af40:	0800af87 	.word	0x0800af87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af44:	4b8e      	ldr	r3, [pc, #568]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a8d      	ldr	r2, [pc, #564]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af50:	e01a      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af56:	3308      	adds	r3, #8
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f002 fb0e 	bl	800d57c <RCCEx_PLL2_Config>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af66:	e00f      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6c:	3328      	adds	r3, #40	; 0x28
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f002 fbb5 	bl	800d6e0 <RCCEx_PLL3_Config>
 800af76:	4603      	mov	r3, r0
 800af78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af7c:	e004      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af84:	e000      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af90:	4b7b      	ldr	r3, [pc, #492]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af94:	f023 0107 	bic.w	r1, r3, #7
 800af98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9e:	4a78      	ldr	r2, [pc, #480]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afa0:	430b      	orrs	r3, r1
 800afa2:	6513      	str	r3, [r2, #80]	; 0x50
 800afa4:	e003      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800afae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800afba:	f04f 0b00 	mov.w	fp, #0
 800afbe:	ea5a 030b 	orrs.w	r3, sl, fp
 800afc2:	d04c      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800afc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afce:	d030      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800afd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afd4:	d829      	bhi.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afd6:	2bc0      	cmp	r3, #192	; 0xc0
 800afd8:	d02d      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800afda:	2bc0      	cmp	r3, #192	; 0xc0
 800afdc:	d825      	bhi.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afde:	2b80      	cmp	r3, #128	; 0x80
 800afe0:	d018      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800afe2:	2b80      	cmp	r3, #128	; 0x80
 800afe4:	d821      	bhi.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800afea:	2b40      	cmp	r3, #64	; 0x40
 800afec:	d007      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800afee:	e01c      	b.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aff0:	4b63      	ldr	r3, [pc, #396]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff4:	4a62      	ldr	r2, [pc, #392]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800affa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800affc:	e01c      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800affe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b002:	3308      	adds	r3, #8
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f002 fab8 	bl	800d57c <RCCEx_PLL2_Config>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b012:	e011      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b018:	3328      	adds	r3, #40	; 0x28
 800b01a:	2100      	movs	r1, #0
 800b01c:	4618      	mov	r0, r3
 800b01e:	f002 fb5f 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b028:	e006      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b030:	e002      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b032:	bf00      	nop
 800b034:	e000      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b036:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b040:	4b4f      	ldr	r3, [pc, #316]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b044:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b04e:	4a4c      	ldr	r2, [pc, #304]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b050:	430b      	orrs	r3, r1
 800b052:	6513      	str	r3, [r2, #80]	; 0x50
 800b054:	e003      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b05a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b06a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b06e:	2300      	movs	r3, #0
 800b070:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b074:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b078:	460b      	mov	r3, r1
 800b07a:	4313      	orrs	r3, r2
 800b07c:	d053      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b086:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b08a:	d035      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b08c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b090:	d82e      	bhi.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b092:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b096:	d031      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b098:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b09c:	d828      	bhi.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b09e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0a2:	d01a      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b0a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0a8:	d822      	bhi.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b0ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0b2:	d007      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b0b4:	e01c      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0b6:	4b32      	ldr	r3, [pc, #200]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	4a31      	ldr	r2, [pc, #196]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0c2:	e01c      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f002 fa55 	bl	800d57c <RCCEx_PLL2_Config>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b0d8:	e011      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0de:	3328      	adds	r3, #40	; 0x28
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 fafc 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0ee:	e006      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0f6:	e002      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0f8:	bf00      	nop
 800b0fa:	e000      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10b      	bne.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b106:	4b1e      	ldr	r3, [pc, #120]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b116:	4a1a      	ldr	r2, [pc, #104]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b118:	430b      	orrs	r3, r1
 800b11a:	6593      	str	r3, [r2, #88]	; 0x58
 800b11c:	e003      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b132:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b136:	2300      	movs	r3, #0
 800b138:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b13c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b140:	460b      	mov	r3, r1
 800b142:	4313      	orrs	r3, r2
 800b144:	d056      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b14e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b152:	d038      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b158:	d831      	bhi.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b15a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b15e:	d034      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b160:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b164:	d82b      	bhi.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b16a:	d01d      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b16c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b170:	d825      	bhi.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d006      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b176:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b17a:	d00a      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b17c:	e01f      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b17e:	bf00      	nop
 800b180:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b184:	4ba2      	ldr	r3, [pc, #648]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	4aa1      	ldr	r2, [pc, #644]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b18a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b18e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b190:	e01c      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b196:	3308      	adds	r3, #8
 800b198:	2100      	movs	r1, #0
 800b19a:	4618      	mov	r0, r3
 800b19c:	f002 f9ee 	bl	800d57c <RCCEx_PLL2_Config>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b1a6:	e011      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ac:	3328      	adds	r3, #40	; 0x28
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f002 fa95 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1bc:	e006      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b1c6:	bf00      	nop
 800b1c8:	e000      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10b      	bne.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b1d4:	4b8e      	ldr	r3, [pc, #568]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1e4:	4a8a      	ldr	r2, [pc, #552]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1e6:	430b      	orrs	r3, r1
 800b1e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b1ea:	e003      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b200:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b204:	2300      	movs	r3, #0
 800b206:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b20a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b20e:	460b      	mov	r3, r1
 800b210:	4313      	orrs	r3, r2
 800b212:	d03a      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b21a:	2b30      	cmp	r3, #48	; 0x30
 800b21c:	d01f      	beq.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b21e:	2b30      	cmp	r3, #48	; 0x30
 800b220:	d819      	bhi.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b222:	2b20      	cmp	r3, #32
 800b224:	d00c      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b226:	2b20      	cmp	r3, #32
 800b228:	d815      	bhi.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d019      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b22e:	2b10      	cmp	r3, #16
 800b230:	d111      	bne.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b232:	4b77      	ldr	r3, [pc, #476]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b236:	4a76      	ldr	r2, [pc, #472]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b23c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b23e:	e011      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b244:	3308      	adds	r3, #8
 800b246:	2102      	movs	r1, #2
 800b248:	4618      	mov	r0, r3
 800b24a:	f002 f997 	bl	800d57c <RCCEx_PLL2_Config>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b254:	e006      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b25c:	e002      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b25e:	bf00      	nop
 800b260:	e000      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b262:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b26c:	4b68      	ldr	r3, [pc, #416]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b26e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b270:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b27a:	4a65      	ldr	r2, [pc, #404]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b27c:	430b      	orrs	r3, r1
 800b27e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b280:	e003      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b292:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b296:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b29a:	2300      	movs	r3, #0
 800b29c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b2a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	d051      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2b4:	d035      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b2b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2ba:	d82e      	bhi.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2c0:	d031      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b2c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2c6:	d828      	bhi.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2cc:	d01a      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2d2:	d822      	bhi.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d003      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2dc:	d007      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b2de:	e01c      	b.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2e0:	4b4b      	ldr	r3, [pc, #300]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	4a4a      	ldr	r2, [pc, #296]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2ec:	e01c      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f002 f940 	bl	800d57c <RCCEx_PLL2_Config>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b302:	e011      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b308:	3328      	adds	r3, #40	; 0x28
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f002 f9e7 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b318:	e006      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b320:	e002      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b322:	bf00      	nop
 800b324:	e000      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b326:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10a      	bne.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b330:	4b37      	ldr	r3, [pc, #220]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b334:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b33e:	4a34      	ldr	r2, [pc, #208]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b340:	430b      	orrs	r3, r1
 800b342:	6513      	str	r3, [r2, #80]	; 0x50
 800b344:	e003      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b34a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b35a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b35e:	2300      	movs	r3, #0
 800b360:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b364:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b368:	460b      	mov	r3, r1
 800b36a:	4313      	orrs	r3, r2
 800b36c:	d056      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b378:	d033      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b37a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b37e:	d82c      	bhi.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b384:	d02f      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b38a:	d826      	bhi.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b38c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b390:	d02b      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b396:	d820      	bhi.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b39c:	d012      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b39e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3a2:	d81a      	bhi.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d022      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ac:	d115      	bne.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f002 f8e0 	bl	800d57c <RCCEx_PLL2_Config>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3c2:	e015      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c8:	3328      	adds	r3, #40	; 0x28
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f002 f987 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3d8:	e00a      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3e0:	e006      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3e2:	bf00      	nop
 800b3e4:	e004      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3e6:	bf00      	nop
 800b3e8:	e002      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3ea:	bf00      	nop
 800b3ec:	e000      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10d      	bne.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b406:	4a02      	ldr	r2, [pc, #8]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b408:	430b      	orrs	r3, r1
 800b40a:	6513      	str	r3, [r2, #80]	; 0x50
 800b40c:	e006      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b40e:	bf00      	nop
 800b410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b42c:	2300      	movs	r3, #0
 800b42e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b432:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b436:	460b      	mov	r3, r1
 800b438:	4313      	orrs	r3, r2
 800b43a:	d055      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b448:	d033      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b44a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b44e:	d82c      	bhi.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b454:	d02f      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b45a:	d826      	bhi.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b45c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b460:	d02b      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b466:	d820      	bhi.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b46c:	d012      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b472:	d81a      	bhi.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d022      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b47c:	d115      	bne.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b482:	3308      	adds	r3, #8
 800b484:	2101      	movs	r1, #1
 800b486:	4618      	mov	r0, r3
 800b488:	f002 f878 	bl	800d57c <RCCEx_PLL2_Config>
 800b48c:	4603      	mov	r3, r0
 800b48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b492:	e015      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b498:	3328      	adds	r3, #40	; 0x28
 800b49a:	2101      	movs	r1, #1
 800b49c:	4618      	mov	r0, r3
 800b49e:	f002 f91f 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b4a8:	e00a      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4b0:	e006      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4b2:	bf00      	nop
 800b4b4:	e004      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4b6:	bf00      	nop
 800b4b8:	e002      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4ba:	bf00      	nop
 800b4bc:	e000      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10b      	bne.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b4c8:	4ba3      	ldr	r3, [pc, #652]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4cc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4d8:	4a9f      	ldr	r2, [pc, #636]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4da:	430b      	orrs	r3, r1
 800b4dc:	6593      	str	r3, [r2, #88]	; 0x58
 800b4de:	e003      	b.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b4f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b502:	460b      	mov	r3, r1
 800b504:	4313      	orrs	r3, r2
 800b506:	d037      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b512:	d00e      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b518:	d816      	bhi.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d018      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b51e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b522:	d111      	bne.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b524:	4b8c      	ldr	r3, [pc, #560]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b528:	4a8b      	ldr	r2, [pc, #556]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b52a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b52e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b530:	e00f      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b536:	3308      	adds	r3, #8
 800b538:	2101      	movs	r1, #1
 800b53a:	4618      	mov	r0, r3
 800b53c:	f002 f81e 	bl	800d57c <RCCEx_PLL2_Config>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b546:	e004      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b54e:	e000      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b550:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b55a:	4b7f      	ldr	r3, [pc, #508]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b568:	4a7b      	ldr	r2, [pc, #492]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b56a:	430b      	orrs	r3, r1
 800b56c:	6513      	str	r3, [r2, #80]	; 0x50
 800b56e:	e003      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b574:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b588:	2300      	movs	r3, #0
 800b58a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b58e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b592:	460b      	mov	r3, r1
 800b594:	4313      	orrs	r3, r2
 800b596:	d039      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d81c      	bhi.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b5a2:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a8:	0800b5e5 	.word	0x0800b5e5
 800b5ac:	0800b5b9 	.word	0x0800b5b9
 800b5b0:	0800b5c7 	.word	0x0800b5c7
 800b5b4:	0800b5e5 	.word	0x0800b5e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5b8:	4b67      	ldr	r3, [pc, #412]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	4a66      	ldr	r2, [pc, #408]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5c4:	e00f      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	2102      	movs	r1, #2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 ffd4 	bl	800d57c <RCCEx_PLL2_Config>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5da:	e004      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5e2:	e000      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b5e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b5ee:	4b5a      	ldr	r3, [pc, #360]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5f2:	f023 0103 	bic.w	r1, r3, #3
 800b5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5fc:	4a56      	ldr	r2, [pc, #344]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5fe:	430b      	orrs	r3, r1
 800b600:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b602:	e003      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b608:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b61c:	2300      	movs	r3, #0
 800b61e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b622:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b626:	460b      	mov	r3, r1
 800b628:	4313      	orrs	r3, r2
 800b62a:	f000 809f 	beq.w	800b76c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b62e:	4b4b      	ldr	r3, [pc, #300]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a4a      	ldr	r2, [pc, #296]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b63a:	f7f8 fc09 	bl	8003e50 <HAL_GetTick>
 800b63e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b642:	e00b      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b644:	f7f8 fc04 	bl	8003e50 <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	2b64      	cmp	r3, #100	; 0x64
 800b652:	d903      	bls.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b654:	2303      	movs	r3, #3
 800b656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b65a:	e005      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b65c:	4b3f      	ldr	r3, [pc, #252]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b664:	2b00      	cmp	r3, #0
 800b666:	d0ed      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d179      	bne.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b670:	4b39      	ldr	r3, [pc, #228]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b67c:	4053      	eors	r3, r2
 800b67e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b682:	2b00      	cmp	r3, #0
 800b684:	d015      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b686:	4b34      	ldr	r3, [pc, #208]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b68e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b692:	4b31      	ldr	r3, [pc, #196]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b696:	4a30      	ldr	r2, [pc, #192]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b69c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b69e:	4b2e      	ldr	r3, [pc, #184]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a2:	4a2d      	ldr	r2, [pc, #180]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b6aa:	4a2b      	ldr	r2, [pc, #172]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b6b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6be:	d118      	bne.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6c0:	f7f8 fbc6 	bl	8003e50 <HAL_GetTick>
 800b6c4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6c8:	e00d      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ca:	f7f8 fbc1 	bl	8003e50 <HAL_GetTick>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b6d4:	1ad2      	subs	r2, r2, r3
 800b6d6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d903      	bls.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b6e4:	e005      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6e6:	4b1c      	ldr	r3, [pc, #112]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ea:	f003 0302 	and.w	r3, r3, #2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0eb      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d129      	bne.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b70a:	d10e      	bne.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b70c:	4b12      	ldr	r3, [pc, #72]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b71c:	091a      	lsrs	r2, r3, #4
 800b71e:	4b10      	ldr	r3, [pc, #64]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b720:	4013      	ands	r3, r2
 800b722:	4a0d      	ldr	r2, [pc, #52]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b724:	430b      	orrs	r3, r1
 800b726:	6113      	str	r3, [r2, #16]
 800b728:	e005      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b72a:	4b0b      	ldr	r3, [pc, #44]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	4a0a      	ldr	r2, [pc, #40]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b730:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b734:	6113      	str	r3, [r2, #16]
 800b736:	4b08      	ldr	r3, [pc, #32]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b738:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b746:	4a04      	ldr	r2, [pc, #16]	; (800b758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b748:	430b      	orrs	r3, r1
 800b74a:	6713      	str	r3, [r2, #112]	; 0x70
 800b74c:	e00e      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b74e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b756:	e009      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b758:	58024400 	.word	0x58024400
 800b75c:	58024800 	.word	0x58024800
 800b760:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f002 0301 	and.w	r3, r2, #1
 800b778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b77c:	2300      	movs	r3, #0
 800b77e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b782:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b786:	460b      	mov	r3, r1
 800b788:	4313      	orrs	r3, r2
 800b78a:	f000 8089 	beq.w	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b794:	2b28      	cmp	r3, #40	; 0x28
 800b796:	d86b      	bhi.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b798:	a201      	add	r2, pc, #4	; (adr r2, 800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79e:	bf00      	nop
 800b7a0:	0800b879 	.word	0x0800b879
 800b7a4:	0800b871 	.word	0x0800b871
 800b7a8:	0800b871 	.word	0x0800b871
 800b7ac:	0800b871 	.word	0x0800b871
 800b7b0:	0800b871 	.word	0x0800b871
 800b7b4:	0800b871 	.word	0x0800b871
 800b7b8:	0800b871 	.word	0x0800b871
 800b7bc:	0800b871 	.word	0x0800b871
 800b7c0:	0800b845 	.word	0x0800b845
 800b7c4:	0800b871 	.word	0x0800b871
 800b7c8:	0800b871 	.word	0x0800b871
 800b7cc:	0800b871 	.word	0x0800b871
 800b7d0:	0800b871 	.word	0x0800b871
 800b7d4:	0800b871 	.word	0x0800b871
 800b7d8:	0800b871 	.word	0x0800b871
 800b7dc:	0800b871 	.word	0x0800b871
 800b7e0:	0800b85b 	.word	0x0800b85b
 800b7e4:	0800b871 	.word	0x0800b871
 800b7e8:	0800b871 	.word	0x0800b871
 800b7ec:	0800b871 	.word	0x0800b871
 800b7f0:	0800b871 	.word	0x0800b871
 800b7f4:	0800b871 	.word	0x0800b871
 800b7f8:	0800b871 	.word	0x0800b871
 800b7fc:	0800b871 	.word	0x0800b871
 800b800:	0800b879 	.word	0x0800b879
 800b804:	0800b871 	.word	0x0800b871
 800b808:	0800b871 	.word	0x0800b871
 800b80c:	0800b871 	.word	0x0800b871
 800b810:	0800b871 	.word	0x0800b871
 800b814:	0800b871 	.word	0x0800b871
 800b818:	0800b871 	.word	0x0800b871
 800b81c:	0800b871 	.word	0x0800b871
 800b820:	0800b879 	.word	0x0800b879
 800b824:	0800b871 	.word	0x0800b871
 800b828:	0800b871 	.word	0x0800b871
 800b82c:	0800b871 	.word	0x0800b871
 800b830:	0800b871 	.word	0x0800b871
 800b834:	0800b871 	.word	0x0800b871
 800b838:	0800b871 	.word	0x0800b871
 800b83c:	0800b871 	.word	0x0800b871
 800b840:	0800b879 	.word	0x0800b879
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b848:	3308      	adds	r3, #8
 800b84a:	2101      	movs	r1, #1
 800b84c:	4618      	mov	r0, r3
 800b84e:	f001 fe95 	bl	800d57c <RCCEx_PLL2_Config>
 800b852:	4603      	mov	r3, r0
 800b854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b858:	e00f      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85e:	3328      	adds	r3, #40	; 0x28
 800b860:	2101      	movs	r1, #1
 800b862:	4618      	mov	r0, r3
 800b864:	f001 ff3c 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b86e:	e004      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b876:	e000      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b87a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b882:	4bbf      	ldr	r3, [pc, #764]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b886:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b890:	4abb      	ldr	r2, [pc, #748]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b892:	430b      	orrs	r3, r1
 800b894:	6553      	str	r3, [r2, #84]	; 0x54
 800b896:	e003      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b89c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f002 0302 	and.w	r3, r2, #2
 800b8ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b8b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	d041      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8c6:	2b05      	cmp	r3, #5
 800b8c8:	d824      	bhi.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b8ca:	a201      	add	r2, pc, #4	; (adr r2, 800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d0:	0800b91d 	.word	0x0800b91d
 800b8d4:	0800b8e9 	.word	0x0800b8e9
 800b8d8:	0800b8ff 	.word	0x0800b8ff
 800b8dc:	0800b91d 	.word	0x0800b91d
 800b8e0:	0800b91d 	.word	0x0800b91d
 800b8e4:	0800b91d 	.word	0x0800b91d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 fe43 	bl	800d57c <RCCEx_PLL2_Config>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8fc:	e00f      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b902:	3328      	adds	r3, #40	; 0x28
 800b904:	2101      	movs	r1, #1
 800b906:	4618      	mov	r0, r3
 800b908:	f001 feea 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b912:	e004      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b91a:	e000      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b91c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10a      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b926:	4b96      	ldr	r3, [pc, #600]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f023 0107 	bic.w	r1, r3, #7
 800b92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b934:	4a92      	ldr	r2, [pc, #584]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b936:	430b      	orrs	r3, r1
 800b938:	6553      	str	r3, [r2, #84]	; 0x54
 800b93a:	e003      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 0304 	and.w	r3, r2, #4
 800b950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b954:	2300      	movs	r3, #0
 800b956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b95a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b95e:	460b      	mov	r3, r1
 800b960:	4313      	orrs	r3, r2
 800b962:	d044      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b96c:	2b05      	cmp	r3, #5
 800b96e:	d825      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b970:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b976:	bf00      	nop
 800b978:	0800b9c5 	.word	0x0800b9c5
 800b97c:	0800b991 	.word	0x0800b991
 800b980:	0800b9a7 	.word	0x0800b9a7
 800b984:	0800b9c5 	.word	0x0800b9c5
 800b988:	0800b9c5 	.word	0x0800b9c5
 800b98c:	0800b9c5 	.word	0x0800b9c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b994:	3308      	adds	r3, #8
 800b996:	2101      	movs	r1, #1
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 fdef 	bl	800d57c <RCCEx_PLL2_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b9a4:	e00f      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9aa:	3328      	adds	r3, #40	; 0x28
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 fe96 	bl	800d6e0 <RCCEx_PLL3_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b9ba:	e004      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9c2:	e000      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10b      	bne.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b9ce:	4b6c      	ldr	r3, [pc, #432]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d2:	f023 0107 	bic.w	r1, r3, #7
 800b9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9de:	4a68      	ldr	r2, [pc, #416]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b9e4:	e003      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	f002 0320 	and.w	r3, r2, #32
 800b9fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	d055      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba1a:	d033      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ba1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba20:	d82c      	bhi.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba26:	d02f      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ba28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba2c:	d826      	bhi.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba32:	d02b      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ba34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba38:	d820      	bhi.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba3e:	d012      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ba40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba44:	d81a      	bhi.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d022      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ba4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba4e:	d115      	bne.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba54:	3308      	adds	r3, #8
 800ba56:	2100      	movs	r1, #0
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f001 fd8f 	bl	800d57c <RCCEx_PLL2_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba64:	e015      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6a:	3328      	adds	r3, #40	; 0x28
 800ba6c:	2102      	movs	r1, #2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 fe36 	bl	800d6e0 <RCCEx_PLL3_Config>
 800ba74:	4603      	mov	r3, r0
 800ba76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba7a:	e00a      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba82:	e006      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba84:	bf00      	nop
 800ba86:	e004      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba88:	bf00      	nop
 800ba8a:	e002      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba8c:	bf00      	nop
 800ba8e:	e000      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10b      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba9a:	4b39      	ldr	r3, [pc, #228]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba9e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800baa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baaa:	4a35      	ldr	r2, [pc, #212]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baac:	430b      	orrs	r3, r1
 800baae:	6553      	str	r3, [r2, #84]	; 0x54
 800bab0:	e003      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800baba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800baca:	2300      	movs	r3, #0
 800bacc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bad0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4313      	orrs	r3, r2
 800bad8:	d058      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bae2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bae6:	d033      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bae8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800baec:	d82c      	bhi.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf2:	d02f      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800baf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf8:	d826      	bhi.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bafa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bafe:	d02b      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bb00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb04:	d820      	bhi.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb0a:	d012      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bb0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb10:	d81a      	bhi.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d022      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bb16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb1a:	d115      	bne.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb20:	3308      	adds	r3, #8
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 fd29 	bl	800d57c <RCCEx_PLL2_Config>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb30:	e015      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb36:	3328      	adds	r3, #40	; 0x28
 800bb38:	2102      	movs	r1, #2
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f001 fdd0 	bl	800d6e0 <RCCEx_PLL3_Config>
 800bb40:	4603      	mov	r3, r0
 800bb42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb46:	e00a      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb4e:	e006      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb50:	bf00      	nop
 800bb52:	e004      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb54:	bf00      	nop
 800bb56:	e002      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb58:	bf00      	nop
 800bb5a:	e000      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10e      	bne.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bb66:	4b06      	ldr	r3, [pc, #24]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb6a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb76:	4a02      	ldr	r2, [pc, #8]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb7c:	e006      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bb7e:	bf00      	nop
 800bb80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bb98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bba2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bba6:	460b      	mov	r3, r1
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	d055      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bbb8:	d033      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bbba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bbbe:	d82c      	bhi.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbc4:	d02f      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bbc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbca:	d826      	bhi.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbcc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bbd0:	d02b      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bbd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bbd6:	d820      	bhi.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbdc:	d012      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bbde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbe2:	d81a      	bhi.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d022      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bbe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbec:	d115      	bne.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f001 fcc0 	bl	800d57c <RCCEx_PLL2_Config>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bc02:	e015      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc08:	3328      	adds	r3, #40	; 0x28
 800bc0a:	2102      	movs	r1, #2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f001 fd67 	bl	800d6e0 <RCCEx_PLL3_Config>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bc18:	e00a      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc20:	e006      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc22:	bf00      	nop
 800bc24:	e004      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc26:	bf00      	nop
 800bc28:	e002      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc2a:	bf00      	nop
 800bc2c:	e000      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10b      	bne.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bc38:	4ba1      	ldr	r3, [pc, #644]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc3c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc48:	4a9d      	ldr	r2, [pc, #628]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc4a:	430b      	orrs	r3, r1
 800bc4c:	6593      	str	r3, [r2, #88]	; 0x58
 800bc4e:	e003      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f002 0308 	and.w	r3, r2, #8
 800bc64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bc72:	460b      	mov	r3, r1
 800bc74:	4313      	orrs	r3, r2
 800bc76:	d01e      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bc78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc84:	d10c      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8a:	3328      	adds	r3, #40	; 0x28
 800bc8c:	2102      	movs	r1, #2
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f001 fd26 	bl	800d6e0 <RCCEx_PLL3_Config>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bca0:	4b87      	ldr	r3, [pc, #540]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcb0:	4a83      	ldr	r2, [pc, #524]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcb2:	430b      	orrs	r3, r1
 800bcb4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bcb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f002 0310 	and.w	r3, r2, #16
 800bcc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bccc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	d01e      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce2:	d10c      	bne.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce8:	3328      	adds	r3, #40	; 0x28
 800bcea:	2102      	movs	r1, #2
 800bcec:	4618      	mov	r0, r3
 800bcee:	f001 fcf7 	bl	800d6e0 <RCCEx_PLL3_Config>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcfe:	4b70      	ldr	r3, [pc, #448]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd0e:	4a6c      	ldr	r2, [pc, #432]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd10:	430b      	orrs	r3, r1
 800bd12:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bd20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd24:	2300      	movs	r3, #0
 800bd26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4313      	orrs	r3, r2
 800bd32:	d03e      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd40:	d022      	beq.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bd42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd46:	d81b      	bhi.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bd4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd50:	d00b      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bd52:	e015      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd58:	3308      	adds	r3, #8
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f001 fc0d 	bl	800d57c <RCCEx_PLL2_Config>
 800bd62:	4603      	mov	r3, r0
 800bd64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd68:	e00f      	b.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6e:	3328      	adds	r3, #40	; 0x28
 800bd70:	2102      	movs	r1, #2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 fcb4 	bl	800d6e0 <RCCEx_PLL3_Config>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd7e:	e004      	b.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd86:	e000      	b.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bd88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10b      	bne.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd92:	4b4b      	ldr	r3, [pc, #300]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd96:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bda2:	4a47      	ldr	r2, [pc, #284]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bda4:	430b      	orrs	r3, r1
 800bda6:	6593      	str	r3, [r2, #88]	; 0x58
 800bda8:	e003      	b.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bdbe:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdc4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	d03b      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdda:	d01f      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bddc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bde0:	d818      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bde2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bde6:	d003      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bde8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdec:	d007      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bdee:	e011      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdf0:	4b33      	ldr	r3, [pc, #204]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	4a32      	ldr	r2, [pc, #200]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bdfc:	e00f      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be02:	3328      	adds	r3, #40	; 0x28
 800be04:	2101      	movs	r1, #1
 800be06:	4618      	mov	r0, r3
 800be08:	f001 fc6a 	bl	800d6e0 <RCCEx_PLL3_Config>
 800be0c:	4603      	mov	r3, r0
 800be0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800be12:	e004      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be1a:	e000      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800be1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10b      	bne.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be26:	4b26      	ldr	r3, [pc, #152]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800be2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be36:	4a22      	ldr	r2, [pc, #136]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be38:	430b      	orrs	r3, r1
 800be3a:	6553      	str	r3, [r2, #84]	; 0x54
 800be3c:	e003      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800be52:	673b      	str	r3, [r7, #112]	; 0x70
 800be54:	2300      	movs	r3, #0
 800be56:	677b      	str	r3, [r7, #116]	; 0x74
 800be58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800be5c:	460b      	mov	r3, r1
 800be5e:	4313      	orrs	r3, r2
 800be60:	d034      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800be62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800be6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be70:	d007      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800be72:	e011      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be74:	4b12      	ldr	r3, [pc, #72]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be78:	4a11      	ldr	r2, [pc, #68]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be80:	e00e      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be86:	3308      	adds	r3, #8
 800be88:	2102      	movs	r1, #2
 800be8a:	4618      	mov	r0, r3
 800be8c:	f001 fb76 	bl	800d57c <RCCEx_PLL2_Config>
 800be90:	4603      	mov	r3, r0
 800be92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be96:	e003      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10d      	bne.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bea8:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800beb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb6:	4a02      	ldr	r2, [pc, #8]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beb8:	430b      	orrs	r3, r1
 800beba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bebc:	e006      	b.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bebe:	bf00      	nop
 800bec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800becc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bed8:	66bb      	str	r3, [r7, #104]	; 0x68
 800beda:	2300      	movs	r3, #0
 800bedc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bede:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bee2:	460b      	mov	r3, r1
 800bee4:	4313      	orrs	r3, r2
 800bee6:	d00c      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beec:	3328      	adds	r3, #40	; 0x28
 800beee:	2102      	movs	r1, #2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f001 fbf5 	bl	800d6e0 <RCCEx_PLL3_Config>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bf0e:	663b      	str	r3, [r7, #96]	; 0x60
 800bf10:	2300      	movs	r3, #0
 800bf12:	667b      	str	r3, [r7, #100]	; 0x64
 800bf14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	d038      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bf1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf2a:	d018      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bf2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf30:	d811      	bhi.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf36:	d014      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bf38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf3c:	d80b      	bhi.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d011      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bf42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf46:	d106      	bne.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf48:	4bc3      	ldr	r3, [pc, #780]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	4ac2      	ldr	r2, [pc, #776]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bf54:	e008      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf5c:	e004      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf5e:	bf00      	nop
 800bf60:	e002      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf62:	bf00      	nop
 800bf64:	e000      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10b      	bne.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf70:	4bb9      	ldr	r3, [pc, #740]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf80:	4ab5      	ldr	r2, [pc, #724]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf82:	430b      	orrs	r3, r1
 800bf84:	6553      	str	r3, [r2, #84]	; 0x54
 800bf86:	e003      	b.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bf9c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfa2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	d009      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bfac:	4baa      	ldr	r3, [pc, #680]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfba:	4aa7      	ldr	r2, [pc, #668]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfbc:	430b      	orrs	r3, r1
 800bfbe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bfc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bfcc:	653b      	str	r3, [r7, #80]	; 0x50
 800bfce:	2300      	movs	r3, #0
 800bfd0:	657b      	str	r3, [r7, #84]	; 0x54
 800bfd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	d00a      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfdc:	4b9e      	ldr	r3, [pc, #632]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bfec:	4a9a      	ldr	r2, [pc, #616]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfee:	430b      	orrs	r3, r1
 800bff0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bffe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c000:	2300      	movs	r3, #0
 800c002:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c004:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c008:	460b      	mov	r3, r1
 800c00a:	4313      	orrs	r3, r2
 800c00c:	d009      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c00e:	4b92      	ldr	r3, [pc, #584]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c012:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c01c:	4a8e      	ldr	r2, [pc, #568]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c01e:	430b      	orrs	r3, r1
 800c020:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c02e:	643b      	str	r3, [r7, #64]	; 0x40
 800c030:	2300      	movs	r3, #0
 800c032:	647b      	str	r3, [r7, #68]	; 0x44
 800c034:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c038:	460b      	mov	r3, r1
 800c03a:	4313      	orrs	r3, r2
 800c03c:	d00e      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c03e:	4b86      	ldr	r3, [pc, #536]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	4a85      	ldr	r2, [pc, #532]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c048:	6113      	str	r3, [r2, #16]
 800c04a:	4b83      	ldr	r3, [pc, #524]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c04c:	6919      	ldr	r1, [r3, #16]
 800c04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c052:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c056:	4a80      	ldr	r2, [pc, #512]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c058:	430b      	orrs	r3, r1
 800c05a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c068:	63bb      	str	r3, [r7, #56]	; 0x38
 800c06a:	2300      	movs	r3, #0
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c06e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c072:	460b      	mov	r3, r1
 800c074:	4313      	orrs	r3, r2
 800c076:	d009      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c078:	4b77      	ldr	r3, [pc, #476]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c07c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c086:	4a74      	ldr	r2, [pc, #464]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c088:	430b      	orrs	r3, r1
 800c08a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
 800c09a:	2300      	movs	r3, #0
 800c09c:	637b      	str	r3, [r7, #52]	; 0x34
 800c09e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	d00a      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c0a8:	4b6b      	ldr	r3, [pc, #428]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ac:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0b8:	4a67      	ldr	r2, [pc, #412]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ba:	430b      	orrs	r3, r1
 800c0bc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	62b9      	str	r1, [r7, #40]	; 0x28
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	d011      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0de:	3308      	adds	r3, #8
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f001 fa4a 	bl	800d57c <RCCEx_PLL2_Config>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	2100      	movs	r1, #0
 800c108:	6239      	str	r1, [r7, #32]
 800c10a:	f003 0302 	and.w	r3, r3, #2
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
 800c110:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c114:	460b      	mov	r3, r1
 800c116:	4313      	orrs	r3, r2
 800c118:	d011      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11e:	3308      	adds	r3, #8
 800c120:	2101      	movs	r1, #1
 800c122:	4618      	mov	r0, r3
 800c124:	f001 fa2a 	bl	800d57c <RCCEx_PLL2_Config>
 800c128:	4603      	mov	r3, r0
 800c12a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c12e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c13a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	2100      	movs	r1, #0
 800c148:	61b9      	str	r1, [r7, #24]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	61fb      	str	r3, [r7, #28]
 800c150:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c154:	460b      	mov	r3, r1
 800c156:	4313      	orrs	r3, r2
 800c158:	d011      	beq.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15e:	3308      	adds	r3, #8
 800c160:	2102      	movs	r1, #2
 800c162:	4618      	mov	r0, r3
 800c164:	f001 fa0a 	bl	800d57c <RCCEx_PLL2_Config>
 800c168:	4603      	mov	r3, r0
 800c16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c16e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c172:	2b00      	cmp	r3, #0
 800c174:	d003      	beq.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c17a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	2100      	movs	r1, #0
 800c188:	6139      	str	r1, [r7, #16]
 800c18a:	f003 0308 	and.w	r3, r3, #8
 800c18e:	617b      	str	r3, [r7, #20]
 800c190:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c194:	460b      	mov	r3, r1
 800c196:	4313      	orrs	r3, r2
 800c198:	d011      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19e:	3328      	adds	r3, #40	; 0x28
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f001 fa9c 	bl	800d6e0 <RCCEx_PLL3_Config>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d003      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	f003 0310 	and.w	r3, r3, #16
 800c1ce:	60fb      	str	r3, [r7, #12]
 800c1d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	d011      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1de:	3328      	adds	r3, #40	; 0x28
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f001 fa7c 	bl	800d6e0 <RCCEx_PLL3_Config>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	2100      	movs	r1, #0
 800c208:	6039      	str	r1, [r7, #0]
 800c20a:	f003 0320 	and.w	r3, r3, #32
 800c20e:	607b      	str	r3, [r7, #4]
 800c210:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c214:	460b      	mov	r3, r1
 800c216:	4313      	orrs	r3, r2
 800c218:	d011      	beq.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21e:	3328      	adds	r3, #40	; 0x28
 800c220:	2102      	movs	r1, #2
 800c222:	4618      	mov	r0, r3
 800c224:	f001 fa5c 	bl	800d6e0 <RCCEx_PLL3_Config>
 800c228:	4603      	mov	r3, r0
 800c22a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c23a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c23e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	e000      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c252:	46bd      	mov	sp, r7
 800c254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c258:	58024400 	.word	0x58024400

0800c25c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b090      	sub	sp, #64	; 0x40
 800c260:	af00      	add	r7, sp, #0
 800c262:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c26a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c26e:	430b      	orrs	r3, r1
 800c270:	f040 8094 	bne.w	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c274:	4b9e      	ldr	r3, [pc, #632]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c278:	f003 0307 	and.w	r3, r3, #7
 800c27c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	2b04      	cmp	r3, #4
 800c282:	f200 8087 	bhi.w	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c286:	a201      	add	r2, pc, #4	; (adr r2, 800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28c:	0800c2a1 	.word	0x0800c2a1
 800c290:	0800c2c9 	.word	0x0800c2c9
 800c294:	0800c2f1 	.word	0x0800c2f1
 800c298:	0800c38d 	.word	0x0800c38d
 800c29c:	0800c319 	.word	0x0800c319
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2a0:	4b93      	ldr	r3, [pc, #588]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2ac:	d108      	bne.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f001 f810 	bl	800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2bc:	f000 bd45 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2c4:	f000 bd41 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2c8:	4b89      	ldr	r3, [pc, #548]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2d4:	d108      	bne.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2d6:	f107 0318 	add.w	r3, r7, #24
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fd54 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e4:	f000 bd31 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ec:	f000 bd2d 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2f0:	4b7f      	ldr	r3, [pc, #508]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2fc:	d108      	bne.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2fe:	f107 030c 	add.w	r3, r7, #12
 800c302:	4618      	mov	r0, r3
 800c304:	f000 fe94 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30c:	f000 bd1d 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c314:	f000 bd19 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c318:	4b75      	ldr	r3, [pc, #468]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c31a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c31c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c320:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c322:	4b73      	ldr	r3, [pc, #460]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 0304 	and.w	r3, r3, #4
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	d10c      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c330:	2b00      	cmp	r3, #0
 800c332:	d109      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c334:	4b6e      	ldr	r3, [pc, #440]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	08db      	lsrs	r3, r3, #3
 800c33a:	f003 0303 	and.w	r3, r3, #3
 800c33e:	4a6d      	ldr	r2, [pc, #436]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c346:	e01f      	b.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c348:	4b69      	ldr	r3, [pc, #420]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c354:	d106      	bne.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c35c:	d102      	bne.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c35e:	4b66      	ldr	r3, [pc, #408]	; (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c362:	e011      	b.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c364:	4b62      	ldr	r3, [pc, #392]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c36c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c370:	d106      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c378:	d102      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c37a:	4b60      	ldr	r3, [pc, #384]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c37e:	e003      	b.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c384:	f000 bce1 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c388:	f000 bcdf 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c38c:	4b5c      	ldr	r3, [pc, #368]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c390:	f000 bcdb 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c394:	2300      	movs	r3, #0
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c398:	f000 bcd7 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	f040 80ad 	bne.w	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c3aa:	4b51      	ldr	r3, [pc, #324]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c3b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ba:	d056      	beq.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c2:	f200 8090 	bhi.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	2bc0      	cmp	r3, #192	; 0xc0
 800c3ca:	f000 8088 	beq.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	2bc0      	cmp	r3, #192	; 0xc0
 800c3d2:	f200 8088 	bhi.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d8:	2b80      	cmp	r3, #128	; 0x80
 800c3da:	d032      	beq.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	2b80      	cmp	r3, #128	; 0x80
 800c3e0:	f200 8081 	bhi.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	2b40      	cmp	r3, #64	; 0x40
 800c3ee:	d014      	beq.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c3f0:	e079      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3f2:	4b3f      	ldr	r3, [pc, #252]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3fe:	d108      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c404:	4618      	mov	r0, r3
 800c406:	f000 ff67 	bl	800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c40e:	f000 bc9c 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c416:	f000 bc98 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c41a:	4b35      	ldr	r3, [pc, #212]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c426:	d108      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c428:	f107 0318 	add.w	r3, r7, #24
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 fcab 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c436:	f000 bc88 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43e:	f000 bc84 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c442:	4b2b      	ldr	r3, [pc, #172]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c44a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c44e:	d108      	bne.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c450:	f107 030c 	add.w	r3, r7, #12
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fdeb 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45e:	f000 bc74 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c466:	f000 bc70 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c46a:	4b21      	ldr	r3, [pc, #132]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c46e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c472:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c474:	4b1e      	ldr	r3, [pc, #120]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0304 	and.w	r3, r3, #4
 800c47c:	2b04      	cmp	r3, #4
 800c47e:	d10c      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c482:	2b00      	cmp	r3, #0
 800c484:	d109      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c486:	4b1a      	ldr	r3, [pc, #104]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	08db      	lsrs	r3, r3, #3
 800c48c:	f003 0303 	and.w	r3, r3, #3
 800c490:	4a18      	ldr	r2, [pc, #96]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c492:	fa22 f303 	lsr.w	r3, r2, r3
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c498:	e01f      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c49a:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a6:	d106      	bne.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4ae:	d102      	bne.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4b0:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b4:	e011      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4b6:	4b0e      	ldr	r3, [pc, #56]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4c2:	d106      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ca:	d102      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4cc:	4b0b      	ldr	r3, [pc, #44]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d0:	e003      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4d6:	f000 bc38 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4da:	f000 bc36 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4de:	4b08      	ldr	r3, [pc, #32]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e2:	f000 bc32 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ea:	f000 bc2e 	b.w	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4ee:	bf00      	nop
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	03d09000 	.word	0x03d09000
 800c4f8:	003d0900 	.word	0x003d0900
 800c4fc:	017d7840 	.word	0x017d7840
 800c500:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c504:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c508:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c50c:	430b      	orrs	r3, r1
 800c50e:	f040 809c 	bne.w	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c512:	4b9e      	ldr	r3, [pc, #632]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c516:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c51a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c522:	d054      	beq.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c52a:	f200 808b 	bhi.w	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c534:	f000 8083 	beq.w	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c53e:	f200 8081 	bhi.w	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c548:	d02f      	beq.n	800c5aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c550:	d878      	bhi.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	2b00      	cmp	r3, #0
 800c556:	d004      	beq.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c55e:	d012      	beq.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c560:	e070      	b.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c562:	4b8a      	ldr	r3, [pc, #552]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c56e:	d107      	bne.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c574:	4618      	mov	r0, r3
 800c576:	f000 feaf 	bl	800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c57e:	e3e4      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c584:	e3e1      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c586:	4b81      	ldr	r3, [pc, #516]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c58e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c592:	d107      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c594:	f107 0318 	add.w	r3, r7, #24
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 fbf5 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a2:	e3d2      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a8:	e3cf      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5aa:	4b78      	ldr	r3, [pc, #480]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5b6:	d107      	bne.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5b8:	f107 030c 	add.w	r3, r7, #12
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 fd37 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5c6:	e3c0      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5cc:	e3bd      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5ce:	4b6f      	ldr	r3, [pc, #444]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5d8:	4b6c      	ldr	r3, [pc, #432]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 0304 	and.w	r3, r3, #4
 800c5e0:	2b04      	cmp	r3, #4
 800c5e2:	d10c      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d109      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ea:	4b68      	ldr	r3, [pc, #416]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	08db      	lsrs	r3, r3, #3
 800c5f0:	f003 0303 	and.w	r3, r3, #3
 800c5f4:	4a66      	ldr	r2, [pc, #408]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5fc:	e01e      	b.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5fe:	4b63      	ldr	r3, [pc, #396]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c60a:	d106      	bne.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c612:	d102      	bne.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c614:	4b5f      	ldr	r3, [pc, #380]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c618:	e010      	b.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c61a:	4b5c      	ldr	r3, [pc, #368]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c626:	d106      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c62e:	d102      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c630:	4b59      	ldr	r3, [pc, #356]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c634:	e002      	b.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c63a:	e386      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c63c:	e385      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c63e:	4b57      	ldr	r3, [pc, #348]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c642:	e382      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c648:	e37f      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c64a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c64e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c652:	430b      	orrs	r3, r1
 800c654:	f040 80a7 	bne.w	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c658:	4b4c      	ldr	r3, [pc, #304]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c65c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c660:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c668:	d055      	beq.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c670:	f200 8096 	bhi.w	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c67a:	f000 8084 	beq.w	800c786 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c684:	f200 808c 	bhi.w	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c68e:	d030      	beq.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c696:	f200 8083 	bhi.w	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d004      	beq.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c6a6:	d012      	beq.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c6a8:	e07a      	b.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6aa:	4b38      	ldr	r3, [pc, #224]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6b6:	d107      	bne.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f000 fe0b 	bl	800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6c6:	e340      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6cc:	e33d      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6ce:	4b2f      	ldr	r3, [pc, #188]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6da:	d107      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6dc:	f107 0318 	add.w	r3, r7, #24
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 fb51 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ea:	e32e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f0:	e32b      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6f2:	4b26      	ldr	r3, [pc, #152]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6fe:	d107      	bne.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c700:	f107 030c 	add.w	r3, r7, #12
 800c704:	4618      	mov	r0, r3
 800c706:	f000 fc93 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c70e:	e31c      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c714:	e319      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c716:	4b1d      	ldr	r3, [pc, #116]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c71e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c720:	4b1a      	ldr	r3, [pc, #104]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 0304 	and.w	r3, r3, #4
 800c728:	2b04      	cmp	r3, #4
 800c72a:	d10c      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d109      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c732:	4b16      	ldr	r3, [pc, #88]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	08db      	lsrs	r3, r3, #3
 800c738:	f003 0303 	and.w	r3, r3, #3
 800c73c:	4a14      	ldr	r2, [pc, #80]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c73e:	fa22 f303 	lsr.w	r3, r2, r3
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c744:	e01e      	b.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c746:	4b11      	ldr	r3, [pc, #68]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c752:	d106      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c75a:	d102      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c75c:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c760:	e010      	b.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c762:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c76a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c76e:	d106      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c776:	d102      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c778:	4b07      	ldr	r3, [pc, #28]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c77c:	e002      	b.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c782:	e2e2      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c784:	e2e1      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c786:	4b05      	ldr	r3, [pc, #20]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78a:	e2de      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c78c:	58024400 	.word	0x58024400
 800c790:	03d09000 	.word	0x03d09000
 800c794:	003d0900 	.word	0x003d0900
 800c798:	017d7840 	.word	0x017d7840
 800c79c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a4:	e2d1      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c7a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7aa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c7ae:	430b      	orrs	r3, r1
 800c7b0:	f040 809c 	bne.w	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c7b4:	4b93      	ldr	r3, [pc, #588]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c7bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7c4:	d054      	beq.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7cc:	f200 808b 	bhi.w	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7d6:	f000 8083 	beq.w	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7e0:	f200 8081 	bhi.w	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7ea:	d02f      	beq.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7f2:	d878      	bhi.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d004      	beq.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c800:	d012      	beq.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c802:	e070      	b.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c804:	4b7f      	ldr	r3, [pc, #508]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c80c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c810:	d107      	bne.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c816:	4618      	mov	r0, r3
 800c818:	f000 fd5e 	bl	800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c820:	e293      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c826:	e290      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c828:	4b76      	ldr	r3, [pc, #472]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c834:	d107      	bne.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c836:	f107 0318 	add.w	r3, r7, #24
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 faa4 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c844:	e281      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84a:	e27e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c84c:	4b6d      	ldr	r3, [pc, #436]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c858:	d107      	bne.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85a:	f107 030c 	add.w	r3, r7, #12
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 fbe6 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c868:	e26f      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c86a:	2300      	movs	r3, #0
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c86e:	e26c      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c870:	4b64      	ldr	r3, [pc, #400]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c874:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c878:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c87a:	4b62      	ldr	r3, [pc, #392]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0304 	and.w	r3, r3, #4
 800c882:	2b04      	cmp	r3, #4
 800c884:	d10c      	bne.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d109      	bne.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c88c:	4b5d      	ldr	r3, [pc, #372]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	08db      	lsrs	r3, r3, #3
 800c892:	f003 0303 	and.w	r3, r3, #3
 800c896:	4a5c      	ldr	r2, [pc, #368]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c898:	fa22 f303 	lsr.w	r3, r2, r3
 800c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c89e:	e01e      	b.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8a0:	4b58      	ldr	r3, [pc, #352]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ac:	d106      	bne.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8b4:	d102      	bne.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8b6:	4b55      	ldr	r3, [pc, #340]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ba:	e010      	b.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8bc:	4b51      	ldr	r3, [pc, #324]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8c8:	d106      	bne.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8d0:	d102      	bne.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8d2:	4b4f      	ldr	r3, [pc, #316]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d6:	e002      	b.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8dc:	e235      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8de:	e234      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8e0:	4b4c      	ldr	r3, [pc, #304]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e4:	e231      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ea:	e22e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c8ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8f0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c8f4:	430b      	orrs	r3, r1
 800c8f6:	f040 808f 	bne.w	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c8fa:	4b42      	ldr	r3, [pc, #264]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c902:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c90a:	d06b      	beq.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c912:	d874      	bhi.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c91a:	d056      	beq.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c922:	d86c      	bhi.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c926:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c92a:	d03b      	beq.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c932:	d864      	bhi.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c93a:	d021      	beq.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c942:	d85c      	bhi.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c946:	2b00      	cmp	r3, #0
 800c948:	d004      	beq.n	800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c950:	d004      	beq.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c952:	e054      	b.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c954:	f7fe fa0a 	bl	800ad6c <HAL_RCC_GetPCLK1Freq>
 800c958:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c95a:	e1f6      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c95c:	4b29      	ldr	r3, [pc, #164]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c968:	d107      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c96a:	f107 0318 	add.w	r3, r7, #24
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 fa0a 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c978:	e1e7      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c97e:	e1e4      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c980:	4b20      	ldr	r3, [pc, #128]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c98c:	d107      	bne.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c98e:	f107 030c 	add.w	r3, r7, #12
 800c992:	4618      	mov	r0, r3
 800c994:	f000 fb4c 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c99c:	e1d5      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a2:	e1d2      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9a4:	4b17      	ldr	r3, [pc, #92]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b04      	cmp	r3, #4
 800c9ae:	d109      	bne.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9b0:	4b14      	ldr	r3, [pc, #80]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	08db      	lsrs	r3, r3, #3
 800c9b6:	f003 0303 	and.w	r3, r3, #3
 800c9ba:	4a13      	ldr	r2, [pc, #76]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9c2:	e1c2      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c8:	e1bf      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d6:	d102      	bne.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9dc:	e1b5      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e2:	e1b2      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9e4:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f0:	d102      	bne.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9f6:	e1a8      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9fc:	e1a5      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca02:	e1a2      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca04:	58024400 	.word	0x58024400
 800ca08:	03d09000 	.word	0x03d09000
 800ca0c:	003d0900 	.word	0x003d0900
 800ca10:	017d7840 	.word	0x017d7840
 800ca14:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ca18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ca20:	430b      	orrs	r3, r1
 800ca22:	d173      	bne.n	800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ca24:	4b9c      	ldr	r3, [pc, #624]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ca2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca34:	d02f      	beq.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca3c:	d863      	bhi.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d004      	beq.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca4a:	d012      	beq.n	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ca4c:	e05b      	b.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca4e:	4b92      	ldr	r3, [pc, #584]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca5a:	d107      	bne.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca5c:	f107 0318 	add.w	r3, r7, #24
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 f991 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca6a:	e16e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca70:	e16b      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca72:	4b89      	ldr	r3, [pc, #548]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca7e:	d107      	bne.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca80:	f107 030c 	add.w	r3, r7, #12
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 fad3 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca8e:	e15c      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca94:	e159      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca96:	4b80      	ldr	r3, [pc, #512]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca9e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caa0:	4b7d      	ldr	r3, [pc, #500]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b04      	cmp	r3, #4
 800caaa:	d10c      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800caac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d109      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cab2:	4b79      	ldr	r3, [pc, #484]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	08db      	lsrs	r3, r3, #3
 800cab8:	f003 0303 	and.w	r3, r3, #3
 800cabc:	4a77      	ldr	r2, [pc, #476]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cabe:	fa22 f303 	lsr.w	r3, r2, r3
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cac4:	e01e      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cac6:	4b74      	ldr	r3, [pc, #464]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cad2:	d106      	bne.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cada:	d102      	bne.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cadc:	4b70      	ldr	r3, [pc, #448]	; (800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cae0:	e010      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cae2:	4b6d      	ldr	r3, [pc, #436]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caee:	d106      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800caf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caf6:	d102      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800caf8:	4b6a      	ldr	r3, [pc, #424]	; (800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cafc:	e002      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cafe:	2300      	movs	r3, #0
 800cb00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb02:	e122      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb04:	e121      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb0a:	e11e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb10:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cb14:	430b      	orrs	r3, r1
 800cb16:	d133      	bne.n	800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cb18:	4b5f      	ldr	r3, [pc, #380]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d004      	beq.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb2e:	d012      	beq.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cb30:	e023      	b.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb32:	4b59      	ldr	r3, [pc, #356]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb3e:	d107      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fbc7 	bl	800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4e:	e0fc      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb54:	e0f9      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb56:	4b50      	ldr	r3, [pc, #320]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb62:	d107      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb64:	f107 0318 	add.w	r3, r7, #24
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 f90d 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cb6e:	6a3b      	ldr	r3, [r7, #32]
 800cb70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb72:	e0ea      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb78:	e0e7      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7e:	e0e4      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb84:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cb88:	430b      	orrs	r3, r1
 800cb8a:	f040 808d 	bne.w	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb8e:	4b42      	ldr	r3, [pc, #264]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb92:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cb96:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb9e:	d06b      	beq.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cba6:	d874      	bhi.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbae:	d056      	beq.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb6:	d86c      	bhi.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbbe:	d03b      	beq.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbc6:	d864      	bhi.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbce:	d021      	beq.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbd6:	d85c      	bhi.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d004      	beq.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbe4:	d004      	beq.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cbe6:	e054      	b.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cbe8:	f000 f8b8 	bl	800cd5c <HAL_RCCEx_GetD3PCLK1Freq>
 800cbec:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbee:	e0ac      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbf0:	4b29      	ldr	r3, [pc, #164]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbfc:	d107      	bne.n	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbfe:	f107 0318 	add.w	r3, r7, #24
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 f8c0 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc0c:	e09d      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc12:	e09a      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc14:	4b20      	ldr	r3, [pc, #128]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc20:	d107      	bne.n	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc22:	f107 030c 	add.w	r3, r7, #12
 800cc26:	4618      	mov	r0, r3
 800cc28:	f000 fa02 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc30:	e08b      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc32:	2300      	movs	r3, #0
 800cc34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc36:	e088      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc38:	4b17      	ldr	r3, [pc, #92]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b04      	cmp	r3, #4
 800cc42:	d109      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc44:	4b14      	ldr	r3, [pc, #80]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	08db      	lsrs	r3, r3, #3
 800cc4a:	f003 0303 	and.w	r3, r3, #3
 800cc4e:	4a13      	ldr	r2, [pc, #76]	; (800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc50:	fa22 f303 	lsr.w	r3, r2, r3
 800cc54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc56:	e078      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc5c:	e075      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc5e:	4b0e      	ldr	r3, [pc, #56]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc6a:	d102      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cc6c:	4b0c      	ldr	r3, [pc, #48]	; (800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc70:	e06b      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc76:	e068      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc78:	4b07      	ldr	r3, [pc, #28]	; (800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc84:	d102      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cc86:	4b07      	ldr	r3, [pc, #28]	; (800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc8a:	e05e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc90:	e05b      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc96:	e058      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc98:	58024400 	.word	0x58024400
 800cc9c:	03d09000 	.word	0x03d09000
 800cca0:	003d0900 	.word	0x003d0900
 800cca4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccac:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ccb0:	430b      	orrs	r3, r1
 800ccb2:	d148      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ccb4:	4b27      	ldr	r3, [pc, #156]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccbc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccc4:	d02a      	beq.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ccc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cccc:	d838      	bhi.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ccce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccda:	d00d      	beq.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ccdc:	e030      	b.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccde:	4b1d      	ldr	r3, [pc, #116]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccea:	d102      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ccec:	4b1a      	ldr	r3, [pc, #104]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf0:	e02b      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf6:	e028      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccf8:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd04:	d107      	bne.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f000 fae4 	bl	800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd14:	e019      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd1a:	e016      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd1c:	4b0d      	ldr	r3, [pc, #52]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd28:	d107      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd2a:	f107 0318 	add.w	r3, r7, #24
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f82a 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd38:	e007      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd3e:	e004      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd44:	e001      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3740      	adds	r7, #64	; 0x40
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	58024400 	.word	0x58024400
 800cd58:	017d7840 	.word	0x017d7840

0800cd5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd60:	f7fd ffd4 	bl	800ad0c <HAL_RCC_GetHCLKFreq>
 800cd64:	4602      	mov	r2, r0
 800cd66:	4b06      	ldr	r3, [pc, #24]	; (800cd80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	091b      	lsrs	r3, r3, #4
 800cd6c:	f003 0307 	and.w	r3, r3, #7
 800cd70:	4904      	ldr	r1, [pc, #16]	; (800cd84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd72:	5ccb      	ldrb	r3, [r1, r3]
 800cd74:	f003 031f 	and.w	r3, r3, #31
 800cd78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	58024400 	.word	0x58024400
 800cd84:	08017730 	.word	0x08017730

0800cd88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b089      	sub	sp, #36	; 0x24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd90:	4ba1      	ldr	r3, [pc, #644]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd94:	f003 0303 	and.w	r3, r3, #3
 800cd98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cd9a:	4b9f      	ldr	r3, [pc, #636]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd9e:	0b1b      	lsrs	r3, r3, #12
 800cda0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cda4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cda6:	4b9c      	ldr	r3, [pc, #624]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdaa:	091b      	lsrs	r3, r3, #4
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cdb2:	4b99      	ldr	r3, [pc, #612]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb6:	08db      	lsrs	r3, r3, #3
 800cdb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	fb02 f303 	mul.w	r3, r2, r3
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 8111 	beq.w	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	f000 8083 	beq.w	800cee4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	f200 80a1 	bhi.w	800cf28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d056      	beq.n	800cea0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cdf2:	e099      	b.n	800cf28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdf4:	4b88      	ldr	r3, [pc, #544]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 0320 	and.w	r3, r3, #32
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d02d      	beq.n	800ce5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce00:	4b85      	ldr	r3, [pc, #532]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	08db      	lsrs	r3, r3, #3
 800ce06:	f003 0303 	and.w	r3, r3, #3
 800ce0a:	4a84      	ldr	r2, [pc, #528]	; (800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ce10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	ee07 3a90 	vmov	s15, r3
 800ce18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	ee07 3a90 	vmov	s15, r3
 800ce22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce2a:	4b7b      	ldr	r3, [pc, #492]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce5a:	e087      	b.n	800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	ee07 3a90 	vmov	s15, r3
 800ce62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d024 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce6e:	4b6a      	ldr	r3, [pc, #424]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce76:	ee07 3a90 	vmov	s15, r3
 800ce7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce82:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce9e:	e065      	b.n	800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceaa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ceae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb2:	4b59      	ldr	r3, [pc, #356]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ceca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cee2:	e043      	b.n	800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	ee07 3a90 	vmov	s15, r3
 800ceea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d02c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef6:	4b48      	ldr	r3, [pc, #288]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf26:	e021      	b.n	800cf6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf3a:	4b37      	ldr	r3, [pc, #220]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf42:	ee07 3a90 	vmov	s15, r3
 800cf46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf6c:	4b2a      	ldr	r3, [pc, #168]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf70:	0a5b      	lsrs	r3, r3, #9
 800cf72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf76:	ee07 3a90 	vmov	s15, r3
 800cf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf86:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf92:	ee17 2a90 	vmov	r2, s15
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cf9a:	4b1f      	ldr	r3, [pc, #124]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	0c1b      	lsrs	r3, r3, #16
 800cfa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa4:	ee07 3a90 	vmov	s15, r3
 800cfa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfc0:	ee17 2a90 	vmov	r2, s15
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cfc8:	4b13      	ldr	r3, [pc, #76]	; (800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfcc:	0e1b      	lsrs	r3, r3, #24
 800cfce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd2:	ee07 3a90 	vmov	s15, r3
 800cfd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfee:	ee17 2a90 	vmov	r2, s15
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cff6:	e008      	b.n	800d00a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	609a      	str	r2, [r3, #8]
}
 800d00a:	bf00      	nop
 800d00c:	3724      	adds	r7, #36	; 0x24
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	58024400 	.word	0x58024400
 800d01c:	03d09000 	.word	0x03d09000
 800d020:	46000000 	.word	0x46000000
 800d024:	4c742400 	.word	0x4c742400
 800d028:	4a742400 	.word	0x4a742400
 800d02c:	4bbebc20 	.word	0x4bbebc20

0800d030 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d030:	b480      	push	{r7}
 800d032:	b089      	sub	sp, #36	; 0x24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d038:	4ba1      	ldr	r3, [pc, #644]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03c:	f003 0303 	and.w	r3, r3, #3
 800d040:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d042:	4b9f      	ldr	r3, [pc, #636]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d046:	0d1b      	lsrs	r3, r3, #20
 800d048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d04c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d04e:	4b9c      	ldr	r3, [pc, #624]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	0a1b      	lsrs	r3, r3, #8
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d05a:	4b99      	ldr	r3, [pc, #612]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d05c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d05e:	08db      	lsrs	r3, r3, #3
 800d060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	fb02 f303 	mul.w	r3, r2, r3
 800d06a:	ee07 3a90 	vmov	s15, r3
 800d06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d072:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 8111 	beq.w	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	2b02      	cmp	r3, #2
 800d082:	f000 8083 	beq.w	800d18c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	2b02      	cmp	r3, #2
 800d08a:	f200 80a1 	bhi.w	800d1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d003      	beq.n	800d09c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d056      	beq.n	800d148 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d09a:	e099      	b.n	800d1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d09c:	4b88      	ldr	r3, [pc, #544]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 0320 	and.w	r3, r3, #32
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d02d      	beq.n	800d104 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0a8:	4b85      	ldr	r3, [pc, #532]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	08db      	lsrs	r3, r3, #3
 800d0ae:	f003 0303 	and.w	r3, r3, #3
 800d0b2:	4a84      	ldr	r2, [pc, #528]	; (800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d0b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	ee07 3a90 	vmov	s15, r3
 800d0c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	ee07 3a90 	vmov	s15, r3
 800d0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d2:	4b7b      	ldr	r3, [pc, #492]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d102:	e087      	b.n	800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d2cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d116:	4b6a      	ldr	r3, [pc, #424]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d11e:	ee07 3a90 	vmov	s15, r3
 800d122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d126:	ed97 6a03 	vldr	s12, [r7, #12]
 800d12a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d146:	e065      	b.n	800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d152:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d15a:	4b59      	ldr	r3, [pc, #356]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d162:	ee07 3a90 	vmov	s15, r3
 800d166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d16a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d16e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d17a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d18a:	e043      	b.n	800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d196:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d19e:	4b48      	ldr	r3, [pc, #288]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a6:	ee07 3a90 	vmov	s15, r3
 800d1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1ce:	e021      	b.n	800d214 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1e2:	4b37      	ldr	r3, [pc, #220]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ea:	ee07 3a90 	vmov	s15, r3
 800d1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d20e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d212:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d214:	4b2a      	ldr	r3, [pc, #168]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d218:	0a5b      	lsrs	r3, r3, #9
 800d21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21e:	ee07 3a90 	vmov	s15, r3
 800d222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d22a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d22e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d23a:	ee17 2a90 	vmov	r2, s15
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d242:	4b1f      	ldr	r3, [pc, #124]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d246:	0c1b      	lsrs	r3, r3, #16
 800d248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d24c:	ee07 3a90 	vmov	s15, r3
 800d250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d25c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d268:	ee17 2a90 	vmov	r2, s15
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d270:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d274:	0e1b      	lsrs	r3, r3, #24
 800d276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27a:	ee07 3a90 	vmov	s15, r3
 800d27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d28a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d28e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d296:	ee17 2a90 	vmov	r2, s15
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d29e:	e008      	b.n	800d2b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	609a      	str	r2, [r3, #8]
}
 800d2b2:	bf00      	nop
 800d2b4:	3724      	adds	r7, #36	; 0x24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	58024400 	.word	0x58024400
 800d2c4:	03d09000 	.word	0x03d09000
 800d2c8:	46000000 	.word	0x46000000
 800d2cc:	4c742400 	.word	0x4c742400
 800d2d0:	4a742400 	.word	0x4a742400
 800d2d4:	4bbebc20 	.word	0x4bbebc20

0800d2d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b089      	sub	sp, #36	; 0x24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2e0:	4ba0      	ldr	r3, [pc, #640]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e4:	f003 0303 	and.w	r3, r3, #3
 800d2e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d2ea:	4b9e      	ldr	r3, [pc, #632]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ee:	091b      	lsrs	r3, r3, #4
 800d2f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d2f6:	4b9b      	ldr	r3, [pc, #620]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fa:	f003 0301 	and.w	r3, r3, #1
 800d2fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d300:	4b98      	ldr	r3, [pc, #608]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d304:	08db      	lsrs	r3, r3, #3
 800d306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	fb02 f303 	mul.w	r3, r2, r3
 800d310:	ee07 3a90 	vmov	s15, r3
 800d314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d318:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f000 8111 	beq.w	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	2b02      	cmp	r3, #2
 800d328:	f000 8083 	beq.w	800d432 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	2b02      	cmp	r3, #2
 800d330:	f200 80a1 	bhi.w	800d476 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d056      	beq.n	800d3ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d340:	e099      	b.n	800d476 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d342:	4b88      	ldr	r3, [pc, #544]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f003 0320 	and.w	r3, r3, #32
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d02d      	beq.n	800d3aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d34e:	4b85      	ldr	r3, [pc, #532]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	08db      	lsrs	r3, r3, #3
 800d354:	f003 0303 	and.w	r3, r3, #3
 800d358:	4a83      	ldr	r2, [pc, #524]	; (800d568 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d35a:	fa22 f303 	lsr.w	r3, r2, r3
 800d35e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	ee07 3a90 	vmov	s15, r3
 800d370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d378:	4b7a      	ldr	r3, [pc, #488]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d380:	ee07 3a90 	vmov	s15, r3
 800d384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d388:	ed97 6a03 	vldr	s12, [r7, #12]
 800d38c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d39c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3a8:	e087      	b.n	800d4ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	ee07 3a90 	vmov	s15, r3
 800d3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d570 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d3b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3bc:	4b69      	ldr	r3, [pc, #420]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3c4:	ee07 3a90 	vmov	s15, r3
 800d3c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ec:	e065      	b.n	800d4ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	ee07 3a90 	vmov	s15, r3
 800d3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d574 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d3fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d400:	4b58      	ldr	r3, [pc, #352]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d408:	ee07 3a90 	vmov	s15, r3
 800d40c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d410:	ed97 6a03 	vldr	s12, [r7, #12]
 800d414:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d41c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d42c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d430:	e043      	b.n	800d4ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	ee07 3a90 	vmov	s15, r3
 800d438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d43c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d578 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d444:	4b47      	ldr	r3, [pc, #284]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d44c:	ee07 3a90 	vmov	s15, r3
 800d450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d454:	ed97 6a03 	vldr	s12, [r7, #12]
 800d458:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d45c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d46c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d470:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d474:	e021      	b.n	800d4ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	ee07 3a90 	vmov	s15, r3
 800d47c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d480:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d570 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d488:	4b36      	ldr	r3, [pc, #216]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d490:	ee07 3a90 	vmov	s15, r3
 800d494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d498:	ed97 6a03 	vldr	s12, [r7, #12]
 800d49c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d4ba:	4b2a      	ldr	r3, [pc, #168]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4be:	0a5b      	lsrs	r3, r3, #9
 800d4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c4:	ee07 3a90 	vmov	s15, r3
 800d4c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4e0:	ee17 2a90 	vmov	r2, s15
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d4e8:	4b1e      	ldr	r3, [pc, #120]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ec:	0c1b      	lsrs	r3, r3, #16
 800d4ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f2:	ee07 3a90 	vmov	s15, r3
 800d4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d502:	edd7 6a07 	vldr	s13, [r7, #28]
 800d506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d50a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50e:	ee17 2a90 	vmov	r2, s15
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d516:	4b13      	ldr	r3, [pc, #76]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51a:	0e1b      	lsrs	r3, r3, #24
 800d51c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d520:	ee07 3a90 	vmov	s15, r3
 800d524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d52c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d530:	edd7 6a07 	vldr	s13, [r7, #28]
 800d534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d53c:	ee17 2a90 	vmov	r2, s15
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d544:	e008      	b.n	800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	609a      	str	r2, [r3, #8]
}
 800d558:	bf00      	nop
 800d55a:	3724      	adds	r7, #36	; 0x24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	58024400 	.word	0x58024400
 800d568:	03d09000 	.word	0x03d09000
 800d56c:	46000000 	.word	0x46000000
 800d570:	4c742400 	.word	0x4c742400
 800d574:	4a742400 	.word	0x4a742400
 800d578:	4bbebc20 	.word	0x4bbebc20

0800d57c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d58a:	4b53      	ldr	r3, [pc, #332]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58e:	f003 0303 	and.w	r3, r3, #3
 800d592:	2b03      	cmp	r3, #3
 800d594:	d101      	bne.n	800d59a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e099      	b.n	800d6ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d59a:	4b4f      	ldr	r3, [pc, #316]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a4e      	ldr	r2, [pc, #312]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d5a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d5a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5a6:	f7f6 fc53 	bl	8003e50 <HAL_GetTick>
 800d5aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5ac:	e008      	b.n	800d5c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d5ae:	f7f6 fc4f 	bl	8003e50 <HAL_GetTick>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d901      	bls.n	800d5c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	e086      	b.n	800d6ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5c0:	4b45      	ldr	r3, [pc, #276]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d1f0      	bne.n	800d5ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d5cc:	4b42      	ldr	r3, [pc, #264]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	031b      	lsls	r3, r3, #12
 800d5da:	493f      	ldr	r1, [pc, #252]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	628b      	str	r3, [r1, #40]	; 0x28
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	025b      	lsls	r3, r3, #9
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	431a      	orrs	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	041b      	lsls	r3, r3, #16
 800d5fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d602:	431a      	orrs	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	3b01      	subs	r3, #1
 800d60a:	061b      	lsls	r3, r3, #24
 800d60c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d610:	4931      	ldr	r1, [pc, #196]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d612:	4313      	orrs	r3, r2
 800d614:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d616:	4b30      	ldr	r3, [pc, #192]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	695b      	ldr	r3, [r3, #20]
 800d622:	492d      	ldr	r1, [pc, #180]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d624:	4313      	orrs	r3, r2
 800d626:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d628:	4b2b      	ldr	r3, [pc, #172]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62c:	f023 0220 	bic.w	r2, r3, #32
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	4928      	ldr	r1, [pc, #160]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d636:	4313      	orrs	r3, r2
 800d638:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d63a:	4b27      	ldr	r3, [pc, #156]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	4a26      	ldr	r2, [pc, #152]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d640:	f023 0310 	bic.w	r3, r3, #16
 800d644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d646:	4b24      	ldr	r3, [pc, #144]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d64a:	4b24      	ldr	r3, [pc, #144]	; (800d6dc <RCCEx_PLL2_Config+0x160>)
 800d64c:	4013      	ands	r3, r2
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	69d2      	ldr	r2, [r2, #28]
 800d652:	00d2      	lsls	r2, r2, #3
 800d654:	4920      	ldr	r1, [pc, #128]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d656:	4313      	orrs	r3, r2
 800d658:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d65a:	4b1f      	ldr	r3, [pc, #124]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65e:	4a1e      	ldr	r2, [pc, #120]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d660:	f043 0310 	orr.w	r3, r3, #16
 800d664:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d106      	bne.n	800d67a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d66c:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d670:	4a19      	ldr	r2, [pc, #100]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d676:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d678:	e00f      	b.n	800d69a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d106      	bne.n	800d68e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d680:	4b15      	ldr	r3, [pc, #84]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d684:	4a14      	ldr	r2, [pc, #80]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d68a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d68c:	e005      	b.n	800d69a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d68e:	4b12      	ldr	r3, [pc, #72]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	4a11      	ldr	r2, [pc, #68]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d698:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d69a:	4b0f      	ldr	r3, [pc, #60]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a0e      	ldr	r2, [pc, #56]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d6a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6a6:	f7f6 fbd3 	bl	8003e50 <HAL_GetTick>
 800d6aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6ac:	e008      	b.n	800d6c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d6ae:	f7f6 fbcf 	bl	8003e50 <HAL_GetTick>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	2b02      	cmp	r3, #2
 800d6ba:	d901      	bls.n	800d6c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6bc:	2303      	movs	r3, #3
 800d6be:	e006      	b.n	800d6ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6c0:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <RCCEx_PLL2_Config+0x15c>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d0f0      	beq.n	800d6ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	58024400 	.word	0x58024400
 800d6dc:	ffff0007 	.word	0xffff0007

0800d6e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d6ee:	4b53      	ldr	r3, [pc, #332]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f2:	f003 0303 	and.w	r3, r3, #3
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d101      	bne.n	800d6fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e099      	b.n	800d832 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d6fe:	4b4f      	ldr	r3, [pc, #316]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a4e      	ldr	r2, [pc, #312]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d70a:	f7f6 fba1 	bl	8003e50 <HAL_GetTick>
 800d70e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d710:	e008      	b.n	800d724 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d712:	f7f6 fb9d 	bl	8003e50 <HAL_GetTick>
 800d716:	4602      	mov	r2, r0
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	1ad3      	subs	r3, r2, r3
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d901      	bls.n	800d724 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d720:	2303      	movs	r3, #3
 800d722:	e086      	b.n	800d832 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d724:	4b45      	ldr	r3, [pc, #276]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1f0      	bne.n	800d712 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d730:	4b42      	ldr	r3, [pc, #264]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d734:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	051b      	lsls	r3, r3, #20
 800d73e:	493f      	ldr	r1, [pc, #252]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d740:	4313      	orrs	r3, r2
 800d742:	628b      	str	r3, [r1, #40]	; 0x28
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	3b01      	subs	r3, #1
 800d74a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	3b01      	subs	r3, #1
 800d754:	025b      	lsls	r3, r3, #9
 800d756:	b29b      	uxth	r3, r3
 800d758:	431a      	orrs	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	3b01      	subs	r3, #1
 800d760:	041b      	lsls	r3, r3, #16
 800d762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d766:	431a      	orrs	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	3b01      	subs	r3, #1
 800d76e:	061b      	lsls	r3, r3, #24
 800d770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d774:	4931      	ldr	r1, [pc, #196]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d776:	4313      	orrs	r3, r2
 800d778:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d77a:	4b30      	ldr	r3, [pc, #192]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	695b      	ldr	r3, [r3, #20]
 800d786:	492d      	ldr	r1, [pc, #180]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d788:	4313      	orrs	r3, r2
 800d78a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d78c:	4b2b      	ldr	r3, [pc, #172]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d790:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	4928      	ldr	r1, [pc, #160]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d79a:	4313      	orrs	r3, r2
 800d79c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d79e:	4b27      	ldr	r3, [pc, #156]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a2:	4a26      	ldr	r2, [pc, #152]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d7aa:	4b24      	ldr	r3, [pc, #144]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ae:	4b24      	ldr	r3, [pc, #144]	; (800d840 <RCCEx_PLL3_Config+0x160>)
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	69d2      	ldr	r2, [r2, #28]
 800d7b6:	00d2      	lsls	r2, r2, #3
 800d7b8:	4920      	ldr	r1, [pc, #128]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d7be:	4b1f      	ldr	r3, [pc, #124]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	4a1e      	ldr	r2, [pc, #120]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d106      	bne.n	800d7de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d7d0:	4b1a      	ldr	r3, [pc, #104]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	4a19      	ldr	r2, [pc, #100]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7dc:	e00f      	b.n	800d7fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d106      	bne.n	800d7f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d7e4:	4b15      	ldr	r3, [pc, #84]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	4a14      	ldr	r2, [pc, #80]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d7ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7f0:	e005      	b.n	800d7fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d7f2:	4b12      	ldr	r3, [pc, #72]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f6:	4a11      	ldr	r2, [pc, #68]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d7f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a0e      	ldr	r2, [pc, #56]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d80a:	f7f6 fb21 	bl	8003e50 <HAL_GetTick>
 800d80e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d810:	e008      	b.n	800d824 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d812:	f7f6 fb1d 	bl	8003e50 <HAL_GetTick>
 800d816:	4602      	mov	r2, r0
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d901      	bls.n	800d824 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e006      	b.n	800d832 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d824:	4b05      	ldr	r3, [pc, #20]	; (800d83c <RCCEx_PLL3_Config+0x15c>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d0f0      	beq.n	800d812 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d830:	7bfb      	ldrb	r3, [r7, #15]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	58024400 	.word	0x58024400
 800d840:	ffff0007 	.word	0xffff0007

0800d844 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d071      	beq.n	800d93a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7f5 fd88 	bl	8003380 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2202      	movs	r2, #2
 800d874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	f003 0310 	and.w	r3, r3, #16
 800d882:	2b10      	cmp	r3, #16
 800d884:	d050      	beq.n	800d928 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	22ca      	movs	r2, #202	; 0xca
 800d88c:	625a      	str	r2, [r3, #36]	; 0x24
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2253      	movs	r2, #83	; 0x53
 800d894:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fa4a 	bl	800dd30 <RTC_EnterInitMode>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d124      	bne.n	800d8f0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6899      	ldr	r1, [r3, #8]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	4b24      	ldr	r3, [pc, #144]	; (800d944 <HAL_RTC_Init+0x100>)
 800d8b2:	400b      	ands	r3, r1
 800d8b4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6899      	ldr	r1, [r3, #8]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	431a      	orrs	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	0419      	lsls	r1, r3, #16
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	68da      	ldr	r2, [r3, #12]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fa56 	bl	800dd98 <RTC_ExitInitMode>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d113      	bne.n	800d91e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f022 0203 	bic.w	r2, r2, #3
 800d904:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	69da      	ldr	r2, [r3, #28]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	695b      	ldr	r3, [r3, #20]
 800d914:	431a      	orrs	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	430a      	orrs	r2, r1
 800d91c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	22ff      	movs	r2, #255	; 0xff
 800d924:	625a      	str	r2, [r3, #36]	; 0x24
 800d926:	e001      	b.n	800d92c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d103      	bne.n	800d93a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	ff8fffbf 	.word	0xff8fffbf

0800d948 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d948:	b590      	push	{r4, r7, lr}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d101      	bne.n	800d962 <HAL_RTC_SetTime+0x1a>
 800d95e:	2302      	movs	r3, #2
 800d960:	e089      	b.n	800da76 <HAL_RTC_SetTime+0x12e>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2202      	movs	r2, #2
 800d96e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	22ca      	movs	r2, #202	; 0xca
 800d978:	625a      	str	r2, [r3, #36]	; 0x24
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2253      	movs	r2, #83	; 0x53
 800d980:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 f9d4 	bl	800dd30 <RTC_EnterInitMode>
 800d988:	4603      	mov	r3, r0
 800d98a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d98c:	7cfb      	ldrb	r3, [r7, #19]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d161      	bne.n	800da56 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d126      	bne.n	800d9e6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d102      	bne.n	800d9ac <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 fa2f 	bl	800de14 <RTC_ByteToBcd2>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	785b      	ldrb	r3, [r3, #1]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 fa28 	bl	800de14 <RTC_ByteToBcd2>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9c8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	789b      	ldrb	r3, [r3, #2]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 fa20 	bl	800de14 <RTC_ByteToBcd2>
 800d9d4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9d6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	78db      	ldrb	r3, [r3, #3]
 800d9de:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	617b      	str	r3, [r7, #20]
 800d9e4:	e018      	b.n	800da18 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d102      	bne.n	800d9fa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	785b      	ldrb	r3, [r3, #1]
 800da04:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da06:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da0c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	78db      	ldrb	r3, [r3, #3]
 800da12:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da14:	4313      	orrs	r3, r2
 800da16:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	6979      	ldr	r1, [r7, #20]
 800da1e:	4b18      	ldr	r3, [pc, #96]	; (800da80 <HAL_RTC_SetTime+0x138>)
 800da20:	400b      	ands	r3, r1
 800da22:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	689a      	ldr	r2, [r3, #8]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800da32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6899      	ldr	r1, [r3, #8]
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	431a      	orrs	r2, r3
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	430a      	orrs	r2, r1
 800da4a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 f9a3 	bl	800dd98 <RTC_ExitInitMode>
 800da52:	4603      	mov	r3, r0
 800da54:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	22ff      	movs	r2, #255	; 0xff
 800da5c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da5e:	7cfb      	ldrb	r3, [r7, #19]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d103      	bne.n	800da6c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da74:	7cfb      	ldrb	r3, [r7, #19]
}
 800da76:	4618      	mov	r0, r3
 800da78:	371c      	adds	r7, #28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd90      	pop	{r4, r7, pc}
 800da7e:	bf00      	nop
 800da80:	007f7f7f 	.word	0x007f7f7f

0800da84 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	4b22      	ldr	r3, [pc, #136]	; (800db38 <HAL_RTC_GetTime+0xb4>)
 800dab0:	4013      	ands	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	0c1b      	lsrs	r3, r3, #16
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	0d9b      	lsrs	r3, r3, #22
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 0301 	and.w	r3, r3, #1
 800daec:	b2da      	uxtb	r2, r3
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d11a      	bne.n	800db2e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	4618      	mov	r0, r3
 800dafe:	f000 f9a9 	bl	800de54 <RTC_Bcd2ToByte>
 800db02:	4603      	mov	r3, r0
 800db04:	461a      	mov	r2, r3
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	785b      	ldrb	r3, [r3, #1]
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 f9a0 	bl	800de54 <RTC_Bcd2ToByte>
 800db14:	4603      	mov	r3, r0
 800db16:	461a      	mov	r2, r3
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	789b      	ldrb	r3, [r3, #2]
 800db20:	4618      	mov	r0, r3
 800db22:	f000 f997 	bl	800de54 <RTC_Bcd2ToByte>
 800db26:	4603      	mov	r3, r0
 800db28:	461a      	mov	r2, r3
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	007f7f7f 	.word	0x007f7f7f

0800db3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db3c:	b590      	push	{r4, r7, lr}
 800db3e:	b087      	sub	sp, #28
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d101      	bne.n	800db56 <HAL_RTC_SetDate+0x1a>
 800db52:	2302      	movs	r3, #2
 800db54:	e073      	b.n	800dc3e <HAL_RTC_SetDate+0x102>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2202      	movs	r2, #2
 800db62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d10e      	bne.n	800db8a <HAL_RTC_SetDate+0x4e>
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	785b      	ldrb	r3, [r3, #1]
 800db70:	f003 0310 	and.w	r3, r3, #16
 800db74:	2b00      	cmp	r3, #0
 800db76:	d008      	beq.n	800db8a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	785b      	ldrb	r3, [r3, #1]
 800db7c:	f023 0310 	bic.w	r3, r3, #16
 800db80:	b2db      	uxtb	r3, r3
 800db82:	330a      	adds	r3, #10
 800db84:	b2da      	uxtb	r2, r3
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d11c      	bne.n	800dbca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	78db      	ldrb	r3, [r3, #3]
 800db94:	4618      	mov	r0, r3
 800db96:	f000 f93d 	bl	800de14 <RTC_ByteToBcd2>
 800db9a:	4603      	mov	r3, r0
 800db9c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	785b      	ldrb	r3, [r3, #1]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f000 f936 	bl	800de14 <RTC_ByteToBcd2>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dbac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	789b      	ldrb	r3, [r3, #2]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 f92e 	bl	800de14 <RTC_ByteToBcd2>
 800dbb8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dbba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	e00e      	b.n	800dbe8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	78db      	ldrb	r3, [r3, #3]
 800dbce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	785b      	ldrb	r3, [r3, #1]
 800dbd4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbd6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dbdc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	22ca      	movs	r2, #202	; 0xca
 800dbee:	625a      	str	r2, [r3, #36]	; 0x24
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2253      	movs	r2, #83	; 0x53
 800dbf6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 f899 	bl	800dd30 <RTC_EnterInitMode>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dc02:	7cfb      	ldrb	r3, [r7, #19]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10a      	bne.n	800dc1e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	6979      	ldr	r1, [r7, #20]
 800dc0e:	4b0e      	ldr	r3, [pc, #56]	; (800dc48 <HAL_RTC_SetDate+0x10c>)
 800dc10:	400b      	ands	r3, r1
 800dc12:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 f8bf 	bl	800dd98 <RTC_ExitInitMode>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	22ff      	movs	r2, #255	; 0xff
 800dc24:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dc26:	7cfb      	ldrb	r3, [r7, #19]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d103      	bne.n	800dc34 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc3c:	7cfb      	ldrb	r3, [r7, #19]


}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	371c      	adds	r7, #28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd90      	pop	{r4, r7, pc}
 800dc46:	bf00      	nop
 800dc48:	00ffff3f 	.word	0x00ffff3f

0800dc4c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	4b21      	ldr	r3, [pc, #132]	; (800dce4 <HAL_RTC_GetDate+0x98>)
 800dc60:	4013      	ands	r3, r2
 800dc62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	0c1b      	lsrs	r3, r3, #16
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	0a1b      	lsrs	r3, r3, #8
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	f003 031f 	and.w	r3, r3, #31
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	0b5b      	lsrs	r3, r3, #13
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	f003 0307 	and.w	r3, r3, #7
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d11a      	bne.n	800dcd8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	78db      	ldrb	r3, [r3, #3]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 f8d4 	bl	800de54 <RTC_Bcd2ToByte>
 800dcac:	4603      	mov	r3, r0
 800dcae:	461a      	mov	r2, r3
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	785b      	ldrb	r3, [r3, #1]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f000 f8cb 	bl	800de54 <RTC_Bcd2ToByte>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	789b      	ldrb	r3, [r3, #2]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 f8c2 	bl	800de54 <RTC_Bcd2ToByte>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	00ffff3f 	.word	0x00ffff3f

0800dce8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a0d      	ldr	r2, [pc, #52]	; (800dd2c <HAL_RTC_WaitForSynchro+0x44>)
 800dcf6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dcf8:	f7f6 f8aa 	bl	8003e50 <HAL_GetTick>
 800dcfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dcfe:	e009      	b.n	800dd14 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd00:	f7f6 f8a6 	bl	8003e50 <HAL_GetTick>
 800dd04:	4602      	mov	r2, r0
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd0e:	d901      	bls.n	800dd14 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dd10:	2303      	movs	r3, #3
 800dd12:	e007      	b.n	800dd24 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f003 0320 	and.w	r3, r3, #32
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0ee      	beq.n	800dd00 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3710      	adds	r7, #16
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	0003ff5f 	.word	0x0003ff5f

0800dd30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d120      	bne.n	800dd8c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dd54:	f7f6 f87c 	bl	8003e50 <HAL_GetTick>
 800dd58:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd5a:	e00d      	b.n	800dd78 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dd5c:	f7f6 f878 	bl	8003e50 <HAL_GetTick>
 800dd60:	4602      	mov	r2, r0
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd6a:	d905      	bls.n	800dd78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2203      	movs	r2, #3
 800dd74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d102      	bne.n	800dd8c <RTC_EnterInitMode+0x5c>
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d1e7      	bne.n	800dd5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
	...

0800dd98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dda0:	2300      	movs	r3, #0
 800dda2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dda4:	4b1a      	ldr	r3, [pc, #104]	; (800de10 <RTC_ExitInitMode+0x78>)
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	4a19      	ldr	r2, [pc, #100]	; (800de10 <RTC_ExitInitMode+0x78>)
 800ddaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddae:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ddb0:	4b17      	ldr	r3, [pc, #92]	; (800de10 <RTC_ExitInitMode+0x78>)
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f003 0320 	and.w	r3, r3, #32
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10c      	bne.n	800ddd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff ff93 	bl	800dce8 <HAL_RTC_WaitForSynchro>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d01e      	beq.n	800de06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2203      	movs	r2, #3
 800ddcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	73fb      	strb	r3, [r7, #15]
 800ddd4:	e017      	b.n	800de06 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddd6:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <RTC_ExitInitMode+0x78>)
 800ddd8:	689b      	ldr	r3, [r3, #8]
 800ddda:	4a0d      	ldr	r2, [pc, #52]	; (800de10 <RTC_ExitInitMode+0x78>)
 800dddc:	f023 0320 	bic.w	r3, r3, #32
 800dde0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff ff80 	bl	800dce8 <HAL_RTC_WaitForSynchro>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d005      	beq.n	800ddfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2203      	movs	r2, #3
 800ddf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddfa:	4b05      	ldr	r3, [pc, #20]	; (800de10 <RTC_ExitInitMode+0x78>)
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	4a04      	ldr	r2, [pc, #16]	; (800de10 <RTC_ExitInitMode+0x78>)
 800de00:	f043 0320 	orr.w	r3, r3, #32
 800de04:	6093      	str	r3, [r2, #8]
  }

  return status;
 800de06:	7bfb      	ldrb	r3, [r7, #15]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	58004000 	.word	0x58004000

0800de14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800de26:	e005      	b.n	800de34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	3301      	adds	r3, #1
 800de2c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800de2e:	7afb      	ldrb	r3, [r7, #11]
 800de30:	3b0a      	subs	r3, #10
 800de32:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800de34:	7afb      	ldrb	r3, [r7, #11]
 800de36:	2b09      	cmp	r3, #9
 800de38:	d8f6      	bhi.n	800de28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	011b      	lsls	r3, r3, #4
 800de40:	b2da      	uxtb	r2, r3
 800de42:	7afb      	ldrb	r3, [r7, #11]
 800de44:	4313      	orrs	r3, r2
 800de46:	b2db      	uxtb	r3, r3
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3714      	adds	r7, #20
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800de54:	b480      	push	{r7}
 800de56:	b085      	sub	sp, #20
 800de58:	af00      	add	r7, sp, #0
 800de5a:	4603      	mov	r3, r0
 800de5c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800de5e:	79fb      	ldrb	r3, [r7, #7]
 800de60:	091b      	lsrs	r3, r3, #4
 800de62:	b2db      	uxtb	r3, r3
 800de64:	461a      	mov	r2, r3
 800de66:	0092      	lsls	r2, r2, #2
 800de68:	4413      	add	r3, r2
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800de6e:	79fb      	ldrb	r3, [r7, #7]
 800de70:	f003 030f 	and.w	r3, r3, #15
 800de74:	b2da      	uxtb	r2, r3
 800de76:	7bfb      	ldrb	r3, [r7, #15]
 800de78:	4413      	add	r3, r2
 800de7a:	b2db      	uxtb	r3, r3
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d101      	bne.n	800de9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e10f      	b.n	800e0ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a87      	ldr	r2, [pc, #540]	; (800e0c4 <HAL_SPI_Init+0x23c>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d00f      	beq.n	800deca <HAL_SPI_Init+0x42>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a86      	ldr	r2, [pc, #536]	; (800e0c8 <HAL_SPI_Init+0x240>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d00a      	beq.n	800deca <HAL_SPI_Init+0x42>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a84      	ldr	r2, [pc, #528]	; (800e0cc <HAL_SPI_Init+0x244>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d005      	beq.n	800deca <HAL_SPI_Init+0x42>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	2b0f      	cmp	r3, #15
 800dec4:	d901      	bls.n	800deca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e0f7      	b.n	800e0ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fc12 	bl	800e6f4 <SPI_GetPacketSize>
 800ded0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a7b      	ldr	r2, [pc, #492]	; (800e0c4 <HAL_SPI_Init+0x23c>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d00c      	beq.n	800def6 <HAL_SPI_Init+0x6e>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a79      	ldr	r2, [pc, #484]	; (800e0c8 <HAL_SPI_Init+0x240>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d007      	beq.n	800def6 <HAL_SPI_Init+0x6e>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4a78      	ldr	r2, [pc, #480]	; (800e0cc <HAL_SPI_Init+0x244>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d002      	beq.n	800def6 <HAL_SPI_Init+0x6e>
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b08      	cmp	r3, #8
 800def4:	d811      	bhi.n	800df1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800defa:	4a72      	ldr	r2, [pc, #456]	; (800e0c4 <HAL_SPI_Init+0x23c>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d009      	beq.n	800df14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a70      	ldr	r2, [pc, #448]	; (800e0c8 <HAL_SPI_Init+0x240>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d004      	beq.n	800df14 <HAL_SPI_Init+0x8c>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a6f      	ldr	r2, [pc, #444]	; (800e0cc <HAL_SPI_Init+0x244>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d104      	bne.n	800df1e <HAL_SPI_Init+0x96>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2b10      	cmp	r3, #16
 800df18:	d901      	bls.n	800df1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	e0cd      	b.n	800e0ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b00      	cmp	r3, #0
 800df28:	d106      	bne.n	800df38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7f5 fa58 	bl	80033e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f022 0201 	bic.w	r2, r2, #1
 800df4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800df5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df64:	d119      	bne.n	800df9a <HAL_SPI_Init+0x112>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df6e:	d103      	bne.n	800df78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df74:	2b00      	cmp	r3, #0
 800df76:	d008      	beq.n	800df8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10c      	bne.n	800df9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df88:	d107      	bne.n	800df9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00f      	beq.n	800dfc6 <HAL_SPI_Init+0x13e>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	2b06      	cmp	r3, #6
 800dfac:	d90b      	bls.n	800dfc6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	430a      	orrs	r2, r1
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	e007      	b.n	800dfd6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfd4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	69da      	ldr	r2, [r3, #28]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfde:	431a      	orrs	r2, r3
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	431a      	orrs	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe8:	ea42 0103 	orr.w	r1, r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	68da      	ldr	r2, [r3, #12]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	430a      	orrs	r2, r1
 800dff6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e006:	431a      	orrs	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	431a      	orrs	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	431a      	orrs	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	431a      	orrs	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	431a      	orrs	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	431a      	orrs	r2, r3
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e02a:	431a      	orrs	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	431a      	orrs	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e036:	ea42 0103 	orr.w	r1, r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	430a      	orrs	r2, r1
 800e044:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d113      	bne.n	800e076 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e060:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e074:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f022 0201 	bic.w	r2, r2, #1
 800e084:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00a      	beq.n	800e0a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	430a      	orrs	r2, r1
 800e0a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	40013000 	.word	0x40013000
 800e0c8:	40003800 	.word	0x40003800
 800e0cc:	40003c00 	.word	0x40003c00

0800e0d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b088      	sub	sp, #32
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e4:	095b      	lsrs	r3, r3, #5
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	3330      	adds	r3, #48	; 0x30
 800e0f2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0f4:	f7f5 feac 	bl	8003e50 <HAL_GetTick>
 800e0f8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b01      	cmp	r3, #1
 800e104:	d001      	beq.n	800e10a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e106:	2302      	movs	r3, #2
 800e108:	e250      	b.n	800e5ac <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <HAL_SPI_Receive+0x46>
 800e110:	88fb      	ldrh	r3, [r7, #6]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e248      	b.n	800e5ac <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e120:	2b01      	cmp	r3, #1
 800e122:	d101      	bne.n	800e128 <HAL_SPI_Receive+0x58>
 800e124:	2302      	movs	r3, #2
 800e126:	e241      	b.n	800e5ac <HAL_SPI_Receive+0x4dc>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2204      	movs	r2, #4
 800e134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	88fa      	ldrh	r2, [r7, #6]
 800e14a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	88fa      	ldrh	r2, [r7, #6]
 800e152:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e180:	d108      	bne.n	800e194 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e190:	601a      	str	r2, [r3, #0]
 800e192:	e009      	b.n	800e1a8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e1a6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	685a      	ldr	r2, [r3, #4]
 800e1ae:	4b95      	ldr	r3, [pc, #596]	; (800e404 <HAL_SPI_Receive+0x334>)
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	88f9      	ldrh	r1, [r7, #6]
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	6812      	ldr	r2, [r2, #0]
 800e1b8:	430b      	orrs	r3, r1
 800e1ba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f042 0201 	orr.w	r2, r2, #1
 800e1ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1d4:	d107      	bne.n	800e1e6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	2b0f      	cmp	r3, #15
 800e1ec:	d96c      	bls.n	800e2c8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1ee:	e064      	b.n	800e2ba <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	695b      	ldr	r3, [r3, #20]
 800e1f6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	2b01      	cmp	r3, #1
 800e204:	d114      	bne.n	800e230 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e210:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e216:	1d1a      	adds	r2, r3, #4
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e222:	b29b      	uxth	r3, r3
 800e224:	3b01      	subs	r3, #1
 800e226:	b29a      	uxth	r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e22e:	e044      	b.n	800e2ba <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e236:	b29b      	uxth	r3, r3
 800e238:	8bfa      	ldrh	r2, [r7, #30]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d919      	bls.n	800e272 <HAL_SPI_Receive+0x1a2>
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d014      	beq.n	800e272 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e250:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e252:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e258:	1d1a      	adds	r2, r3, #4
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e264:	b29b      	uxth	r3, r3
 800e266:	3b01      	subs	r3, #1
 800e268:	b29a      	uxth	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e270:	e023      	b.n	800e2ba <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e272:	f7f5 fded 	bl	8003e50 <HAL_GetTick>
 800e276:	4602      	mov	r2, r0
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d803      	bhi.n	800e28a <HAL_SPI_Receive+0x1ba>
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e288:	d102      	bne.n	800e290 <HAL_SPI_Receive+0x1c0>
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d114      	bne.n	800e2ba <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f000 f98f 	bl	800e5b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e29c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	e178      	b.n	800e5ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d194      	bne.n	800e1f0 <HAL_SPI_Receive+0x120>
 800e2c6:	e15e      	b.n	800e586 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	2b07      	cmp	r3, #7
 800e2ce:	f240 8153 	bls.w	800e578 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e2d2:	e08f      	b.n	800e3f4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	695b      	ldr	r3, [r3, #20]
 800e2da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	695b      	ldr	r3, [r3, #20]
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d114      	bne.n	800e314 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ee:	69ba      	ldr	r2, [r7, #24]
 800e2f0:	8812      	ldrh	r2, [r2, #0]
 800e2f2:	b292      	uxth	r2, r2
 800e2f4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2fa:	1c9a      	adds	r2, r3, #2
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e306:	b29b      	uxth	r3, r3
 800e308:	3b01      	subs	r3, #1
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e312:	e06f      	b.n	800e3f4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	8bfa      	ldrh	r2, [r7, #30]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d924      	bls.n	800e36c <HAL_SPI_Receive+0x29c>
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d01f      	beq.n	800e36c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	8812      	ldrh	r2, [r2, #0]
 800e334:	b292      	uxth	r2, r2
 800e336:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33c:	1c9a      	adds	r2, r3, #2
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e346:	69ba      	ldr	r2, [r7, #24]
 800e348:	8812      	ldrh	r2, [r2, #0]
 800e34a:	b292      	uxth	r2, r2
 800e34c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e352:	1c9a      	adds	r2, r3, #2
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e35e:	b29b      	uxth	r3, r3
 800e360:	3b02      	subs	r3, #2
 800e362:	b29a      	uxth	r2, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e36a:	e043      	b.n	800e3f4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e372:	b29b      	uxth	r3, r3
 800e374:	2b01      	cmp	r3, #1
 800e376:	d119      	bne.n	800e3ac <HAL_SPI_Receive+0x2dc>
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d014      	beq.n	800e3ac <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	8812      	ldrh	r2, [r2, #0]
 800e38a:	b292      	uxth	r2, r2
 800e38c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e392:	1c9a      	adds	r2, r3, #2
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3aa:	e023      	b.n	800e3f4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3ac:	f7f5 fd50 	bl	8003e50 <HAL_GetTick>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d803      	bhi.n	800e3c4 <HAL_SPI_Receive+0x2f4>
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3c2:	d102      	bne.n	800e3ca <HAL_SPI_Receive+0x2fa>
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d114      	bne.n	800e3f4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f000 f8f2 	bl	800e5b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e0db      	b.n	800e5ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f47f af69 	bne.w	800e2d4 <HAL_SPI_Receive+0x204>
 800e402:	e0c0      	b.n	800e586 <HAL_SPI_Receive+0x4b6>
 800e404:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	695b      	ldr	r3, [r3, #20]
 800e40e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	f003 0301 	and.w	r3, r3, #1
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d117      	bne.n	800e44e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e42a:	7812      	ldrb	r2, [r2, #0]
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e434:	1c5a      	adds	r2, r3, #1
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e440:	b29b      	uxth	r3, r3
 800e442:	3b01      	subs	r3, #1
 800e444:	b29a      	uxth	r2, r3
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e44c:	e094      	b.n	800e578 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e454:	b29b      	uxth	r3, r3
 800e456:	8bfa      	ldrh	r2, [r7, #30]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d946      	bls.n	800e4ea <HAL_SPI_Receive+0x41a>
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e462:	2b00      	cmp	r3, #0
 800e464:	d041      	beq.n	800e4ea <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e472:	7812      	ldrb	r2, [r2, #0]
 800e474:	b2d2      	uxtb	r2, r2
 800e476:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48e:	7812      	ldrb	r2, [r2, #0]
 800e490:	b2d2      	uxtb	r2, r2
 800e492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4aa:	7812      	ldrb	r2, [r2, #0]
 800e4ac:	b2d2      	uxtb	r2, r2
 800e4ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b4:	1c5a      	adds	r2, r3, #1
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c6:	7812      	ldrb	r2, [r2, #0]
 800e4c8:	b2d2      	uxtb	r2, r2
 800e4ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d0:	1c5a      	adds	r2, r3, #1
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	3b04      	subs	r3, #4
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4e8:	e046      	b.n	800e578 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	2b03      	cmp	r3, #3
 800e4f4:	d81c      	bhi.n	800e530 <HAL_SPI_Receive+0x460>
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d017      	beq.n	800e530 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e50c:	7812      	ldrb	r2, [r2, #0]
 800e50e:	b2d2      	uxtb	r2, r2
 800e510:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e516:	1c5a      	adds	r2, r3, #1
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e522:	b29b      	uxth	r3, r3
 800e524:	3b01      	subs	r3, #1
 800e526:	b29a      	uxth	r2, r3
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e52e:	e023      	b.n	800e578 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e530:	f7f5 fc8e 	bl	8003e50 <HAL_GetTick>
 800e534:	4602      	mov	r2, r0
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d803      	bhi.n	800e548 <HAL_SPI_Receive+0x478>
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e546:	d102      	bne.n	800e54e <HAL_SPI_Receive+0x47e>
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d114      	bne.n	800e578 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 f830 	bl	800e5b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e55a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e574:	2303      	movs	r3, #3
 800e576:	e019      	b.n	800e5ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e57e:	b29b      	uxth	r3, r3
 800e580:	2b00      	cmp	r3, #0
 800e582:	f47f af41 	bne.w	800e408 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f000 f814 	bl	800e5b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2201      	movs	r2, #1
 800e590:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2200      	movs	r2, #0
 800e598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e000      	b.n	800e5ac <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e5aa:	2300      	movs	r3, #0
  }
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3720      	adds	r7, #32
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	695b      	ldr	r3, [r3, #20]
 800e5c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	699a      	ldr	r2, [r3, #24]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f042 0208 	orr.w	r2, r2, #8
 800e5d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	699a      	ldr	r2, [r3, #24]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f042 0210 	orr.w	r2, r2, #16
 800e5e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f022 0201 	bic.w	r2, r2, #1
 800e5f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6919      	ldr	r1, [r3, #16]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	4b3c      	ldr	r3, [pc, #240]	; (800e6f0 <SPI_CloseTransfer+0x13c>)
 800e600:	400b      	ands	r3, r1
 800e602:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689a      	ldr	r2, [r3, #8]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e612:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	d014      	beq.n	800e64a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f003 0320 	and.w	r3, r3, #32
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00f      	beq.n	800e64a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e630:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	699a      	ldr	r2, [r3, #24]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f042 0220 	orr.w	r2, r2, #32
 800e648:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b03      	cmp	r3, #3
 800e654:	d014      	beq.n	800e680 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00f      	beq.n	800e680 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e666:	f043 0204 	orr.w	r2, r3, #4
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	699a      	ldr	r2, [r3, #24]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e67e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00f      	beq.n	800e6aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e690:	f043 0201 	orr.w	r2, r3, #1
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	699a      	ldr	r2, [r3, #24]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00f      	beq.n	800e6d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6ba:	f043 0208 	orr.w	r2, r3, #8
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	699a      	ldr	r2, [r3, #24]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e6e4:	bf00      	nop
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	fffffc90 	.word	0xfffffc90

0800e6f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b085      	sub	sp, #20
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e700:	095b      	lsrs	r3, r3, #5
 800e702:	3301      	adds	r3, #1
 800e704:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	3301      	adds	r3, #1
 800e70c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	3307      	adds	r3, #7
 800e712:	08db      	lsrs	r3, r3, #3
 800e714:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3714      	adds	r7, #20
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b082      	sub	sp, #8
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	e049      	b.n	800e7d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d106      	bne.n	800e756 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7f4 feff 	bl	8003554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2202      	movs	r2, #2
 800e75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	3304      	adds	r3, #4
 800e766:	4619      	mov	r1, r3
 800e768:	4610      	mov	r0, r2
 800e76a:	f000 fe7d 	bl	800f468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2201      	movs	r2, #1
 800e792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d001      	beq.n	800e7f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	e054      	b.n	800e89a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68da      	ldr	r2, [r3, #12]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f042 0201 	orr.w	r2, r2, #1
 800e806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a26      	ldr	r2, [pc, #152]	; (800e8a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d022      	beq.n	800e858 <HAL_TIM_Base_Start_IT+0x80>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e81a:	d01d      	beq.n	800e858 <HAL_TIM_Base_Start_IT+0x80>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a22      	ldr	r2, [pc, #136]	; (800e8ac <HAL_TIM_Base_Start_IT+0xd4>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d018      	beq.n	800e858 <HAL_TIM_Base_Start_IT+0x80>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a21      	ldr	r2, [pc, #132]	; (800e8b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d013      	beq.n	800e858 <HAL_TIM_Base_Start_IT+0x80>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a1f      	ldr	r2, [pc, #124]	; (800e8b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d00e      	beq.n	800e858 <HAL_TIM_Base_Start_IT+0x80>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a1e      	ldr	r2, [pc, #120]	; (800e8b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d009      	beq.n	800e858 <HAL_TIM_Base_Start_IT+0x80>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a1c      	ldr	r2, [pc, #112]	; (800e8bc <HAL_TIM_Base_Start_IT+0xe4>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d004      	beq.n	800e858 <HAL_TIM_Base_Start_IT+0x80>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a1b      	ldr	r2, [pc, #108]	; (800e8c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d115      	bne.n	800e884 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	689a      	ldr	r2, [r3, #8]
 800e85e:	4b19      	ldr	r3, [pc, #100]	; (800e8c4 <HAL_TIM_Base_Start_IT+0xec>)
 800e860:	4013      	ands	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b06      	cmp	r3, #6
 800e868:	d015      	beq.n	800e896 <HAL_TIM_Base_Start_IT+0xbe>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e870:	d011      	beq.n	800e896 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f042 0201 	orr.w	r2, r2, #1
 800e880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e882:	e008      	b.n	800e896 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f042 0201 	orr.w	r2, r2, #1
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	e000      	b.n	800e898 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e898:	2300      	movs	r3, #0
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3714      	adds	r7, #20
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	40010000 	.word	0x40010000
 800e8ac:	40000400 	.word	0x40000400
 800e8b0:	40000800 	.word	0x40000800
 800e8b4:	40000c00 	.word	0x40000c00
 800e8b8:	40010400 	.word	0x40010400
 800e8bc:	40001800 	.word	0x40001800
 800e8c0:	40014000 	.word	0x40014000
 800e8c4:	00010007 	.word	0x00010007

0800e8c8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d109      	bne.n	800e8f0 <HAL_TIM_OC_Start_IT+0x28>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	bf14      	ite	ne
 800e8e8:	2301      	movne	r3, #1
 800e8ea:	2300      	moveq	r3, #0
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	e03c      	b.n	800e96a <HAL_TIM_OC_Start_IT+0xa2>
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	2b04      	cmp	r3, #4
 800e8f4:	d109      	bne.n	800e90a <HAL_TIM_OC_Start_IT+0x42>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	bf14      	ite	ne
 800e902:	2301      	movne	r3, #1
 800e904:	2300      	moveq	r3, #0
 800e906:	b2db      	uxtb	r3, r3
 800e908:	e02f      	b.n	800e96a <HAL_TIM_OC_Start_IT+0xa2>
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	2b08      	cmp	r3, #8
 800e90e:	d109      	bne.n	800e924 <HAL_TIM_OC_Start_IT+0x5c>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b01      	cmp	r3, #1
 800e91a:	bf14      	ite	ne
 800e91c:	2301      	movne	r3, #1
 800e91e:	2300      	moveq	r3, #0
 800e920:	b2db      	uxtb	r3, r3
 800e922:	e022      	b.n	800e96a <HAL_TIM_OC_Start_IT+0xa2>
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b0c      	cmp	r3, #12
 800e928:	d109      	bne.n	800e93e <HAL_TIM_OC_Start_IT+0x76>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b01      	cmp	r3, #1
 800e934:	bf14      	ite	ne
 800e936:	2301      	movne	r3, #1
 800e938:	2300      	moveq	r3, #0
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	e015      	b.n	800e96a <HAL_TIM_OC_Start_IT+0xa2>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b10      	cmp	r3, #16
 800e942:	d109      	bne.n	800e958 <HAL_TIM_OC_Start_IT+0x90>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	bf14      	ite	ne
 800e950:	2301      	movne	r3, #1
 800e952:	2300      	moveq	r3, #0
 800e954:	b2db      	uxtb	r3, r3
 800e956:	e008      	b.n	800e96a <HAL_TIM_OC_Start_IT+0xa2>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b01      	cmp	r3, #1
 800e962:	bf14      	ite	ne
 800e964:	2301      	movne	r3, #1
 800e966:	2300      	moveq	r3, #0
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	e0ec      	b.n	800eb4c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d104      	bne.n	800e982 <HAL_TIM_OC_Start_IT+0xba>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2202      	movs	r2, #2
 800e97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e980:	e023      	b.n	800e9ca <HAL_TIM_OC_Start_IT+0x102>
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	2b04      	cmp	r3, #4
 800e986:	d104      	bne.n	800e992 <HAL_TIM_OC_Start_IT+0xca>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2202      	movs	r2, #2
 800e98c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e990:	e01b      	b.n	800e9ca <HAL_TIM_OC_Start_IT+0x102>
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b08      	cmp	r3, #8
 800e996:	d104      	bne.n	800e9a2 <HAL_TIM_OC_Start_IT+0xda>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2202      	movs	r2, #2
 800e99c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9a0:	e013      	b.n	800e9ca <HAL_TIM_OC_Start_IT+0x102>
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	2b0c      	cmp	r3, #12
 800e9a6:	d104      	bne.n	800e9b2 <HAL_TIM_OC_Start_IT+0xea>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9b0:	e00b      	b.n	800e9ca <HAL_TIM_OC_Start_IT+0x102>
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b10      	cmp	r3, #16
 800e9b6:	d104      	bne.n	800e9c2 <HAL_TIM_OC_Start_IT+0xfa>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2202      	movs	r2, #2
 800e9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9c0:	e003      	b.n	800e9ca <HAL_TIM_OC_Start_IT+0x102>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2202      	movs	r2, #2
 800e9c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	2b0c      	cmp	r3, #12
 800e9ce:	d841      	bhi.n	800ea54 <HAL_TIM_OC_Start_IT+0x18c>
 800e9d0:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <HAL_TIM_OC_Start_IT+0x110>)
 800e9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d6:	bf00      	nop
 800e9d8:	0800ea0d 	.word	0x0800ea0d
 800e9dc:	0800ea55 	.word	0x0800ea55
 800e9e0:	0800ea55 	.word	0x0800ea55
 800e9e4:	0800ea55 	.word	0x0800ea55
 800e9e8:	0800ea1f 	.word	0x0800ea1f
 800e9ec:	0800ea55 	.word	0x0800ea55
 800e9f0:	0800ea55 	.word	0x0800ea55
 800e9f4:	0800ea55 	.word	0x0800ea55
 800e9f8:	0800ea31 	.word	0x0800ea31
 800e9fc:	0800ea55 	.word	0x0800ea55
 800ea00:	0800ea55 	.word	0x0800ea55
 800ea04:	0800ea55 	.word	0x0800ea55
 800ea08:	0800ea43 	.word	0x0800ea43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	68da      	ldr	r2, [r3, #12]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f042 0202 	orr.w	r2, r2, #2
 800ea1a:	60da      	str	r2, [r3, #12]
      break;
 800ea1c:	e01d      	b.n	800ea5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	68da      	ldr	r2, [r3, #12]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f042 0204 	orr.w	r2, r2, #4
 800ea2c:	60da      	str	r2, [r3, #12]
      break;
 800ea2e:	e014      	b.n	800ea5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68da      	ldr	r2, [r3, #12]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f042 0208 	orr.w	r2, r2, #8
 800ea3e:	60da      	str	r2, [r3, #12]
      break;
 800ea40:	e00b      	b.n	800ea5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	68da      	ldr	r2, [r3, #12]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f042 0210 	orr.w	r2, r2, #16
 800ea50:	60da      	str	r2, [r3, #12]
      break;
 800ea52:	e002      	b.n	800ea5a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	73fb      	strb	r3, [r7, #15]
      break;
 800ea58:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d174      	bne.n	800eb4a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2201      	movs	r2, #1
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f001 f917 	bl	800fc9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a38      	ldr	r2, [pc, #224]	; (800eb54 <HAL_TIM_OC_Start_IT+0x28c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d013      	beq.n	800eaa0 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a36      	ldr	r2, [pc, #216]	; (800eb58 <HAL_TIM_OC_Start_IT+0x290>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d00e      	beq.n	800eaa0 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a35      	ldr	r2, [pc, #212]	; (800eb5c <HAL_TIM_OC_Start_IT+0x294>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d009      	beq.n	800eaa0 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a33      	ldr	r2, [pc, #204]	; (800eb60 <HAL_TIM_OC_Start_IT+0x298>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d004      	beq.n	800eaa0 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a32      	ldr	r2, [pc, #200]	; (800eb64 <HAL_TIM_OC_Start_IT+0x29c>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d101      	bne.n	800eaa4 <HAL_TIM_OC_Start_IT+0x1dc>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e000      	b.n	800eaa6 <HAL_TIM_OC_Start_IT+0x1de>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d007      	beq.n	800eaba <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4a25      	ldr	r2, [pc, #148]	; (800eb54 <HAL_TIM_OC_Start_IT+0x28c>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d022      	beq.n	800eb0a <HAL_TIM_OC_Start_IT+0x242>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eacc:	d01d      	beq.n	800eb0a <HAL_TIM_OC_Start_IT+0x242>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4a25      	ldr	r2, [pc, #148]	; (800eb68 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d018      	beq.n	800eb0a <HAL_TIM_OC_Start_IT+0x242>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a23      	ldr	r2, [pc, #140]	; (800eb6c <HAL_TIM_OC_Start_IT+0x2a4>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d013      	beq.n	800eb0a <HAL_TIM_OC_Start_IT+0x242>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a22      	ldr	r2, [pc, #136]	; (800eb70 <HAL_TIM_OC_Start_IT+0x2a8>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d00e      	beq.n	800eb0a <HAL_TIM_OC_Start_IT+0x242>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a19      	ldr	r2, [pc, #100]	; (800eb58 <HAL_TIM_OC_Start_IT+0x290>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d009      	beq.n	800eb0a <HAL_TIM_OC_Start_IT+0x242>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a1e      	ldr	r2, [pc, #120]	; (800eb74 <HAL_TIM_OC_Start_IT+0x2ac>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d004      	beq.n	800eb0a <HAL_TIM_OC_Start_IT+0x242>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a15      	ldr	r2, [pc, #84]	; (800eb5c <HAL_TIM_OC_Start_IT+0x294>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d115      	bne.n	800eb36 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	689a      	ldr	r2, [r3, #8]
 800eb10:	4b19      	ldr	r3, [pc, #100]	; (800eb78 <HAL_TIM_OC_Start_IT+0x2b0>)
 800eb12:	4013      	ands	r3, r2
 800eb14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	2b06      	cmp	r3, #6
 800eb1a:	d015      	beq.n	800eb48 <HAL_TIM_OC_Start_IT+0x280>
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb22:	d011      	beq.n	800eb48 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f042 0201 	orr.w	r2, r2, #1
 800eb32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb34:	e008      	b.n	800eb48 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f042 0201 	orr.w	r2, r2, #1
 800eb44:	601a      	str	r2, [r3, #0]
 800eb46:	e000      	b.n	800eb4a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb48:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	40010000 	.word	0x40010000
 800eb58:	40010400 	.word	0x40010400
 800eb5c:	40014000 	.word	0x40014000
 800eb60:	40014400 	.word	0x40014400
 800eb64:	40014800 	.word	0x40014800
 800eb68:	40000400 	.word	0x40000400
 800eb6c:	40000800 	.word	0x40000800
 800eb70:	40000c00 	.word	0x40000c00
 800eb74:	40001800 	.word	0x40001800
 800eb78:	00010007 	.word	0x00010007

0800eb7c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb86:	2300      	movs	r3, #0
 800eb88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	2b0c      	cmp	r3, #12
 800eb8e:	d841      	bhi.n	800ec14 <HAL_TIM_OC_Stop_IT+0x98>
 800eb90:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <HAL_TIM_OC_Stop_IT+0x1c>)
 800eb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb96:	bf00      	nop
 800eb98:	0800ebcd 	.word	0x0800ebcd
 800eb9c:	0800ec15 	.word	0x0800ec15
 800eba0:	0800ec15 	.word	0x0800ec15
 800eba4:	0800ec15 	.word	0x0800ec15
 800eba8:	0800ebdf 	.word	0x0800ebdf
 800ebac:	0800ec15 	.word	0x0800ec15
 800ebb0:	0800ec15 	.word	0x0800ec15
 800ebb4:	0800ec15 	.word	0x0800ec15
 800ebb8:	0800ebf1 	.word	0x0800ebf1
 800ebbc:	0800ec15 	.word	0x0800ec15
 800ebc0:	0800ec15 	.word	0x0800ec15
 800ebc4:	0800ec15 	.word	0x0800ec15
 800ebc8:	0800ec03 	.word	0x0800ec03
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68da      	ldr	r2, [r3, #12]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f022 0202 	bic.w	r2, r2, #2
 800ebda:	60da      	str	r2, [r3, #12]
      break;
 800ebdc:	e01d      	b.n	800ec1a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	68da      	ldr	r2, [r3, #12]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f022 0204 	bic.w	r2, r2, #4
 800ebec:	60da      	str	r2, [r3, #12]
      break;
 800ebee:	e014      	b.n	800ec1a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68da      	ldr	r2, [r3, #12]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f022 0208 	bic.w	r2, r2, #8
 800ebfe:	60da      	str	r2, [r3, #12]
      break;
 800ec00:	e00b      	b.n	800ec1a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68da      	ldr	r2, [r3, #12]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f022 0210 	bic.w	r2, r2, #16
 800ec10:	60da      	str	r2, [r3, #12]
      break;
 800ec12:	e002      	b.n	800ec1a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	73fb      	strb	r3, [r7, #15]
      break;
 800ec18:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec1a:	7bfb      	ldrb	r3, [r7, #15]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f040 8081 	bne.w	800ed24 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2200      	movs	r2, #0
 800ec28:	6839      	ldr	r1, [r7, #0]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f001 f836 	bl	800fc9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a3e      	ldr	r2, [pc, #248]	; (800ed30 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d013      	beq.n	800ec62 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a3d      	ldr	r2, [pc, #244]	; (800ed34 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d00e      	beq.n	800ec62 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a3b      	ldr	r2, [pc, #236]	; (800ed38 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d009      	beq.n	800ec62 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a3a      	ldr	r2, [pc, #232]	; (800ed3c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d004      	beq.n	800ec62 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a38      	ldr	r2, [pc, #224]	; (800ed40 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d101      	bne.n	800ec66 <HAL_TIM_OC_Stop_IT+0xea>
 800ec62:	2301      	movs	r3, #1
 800ec64:	e000      	b.n	800ec68 <HAL_TIM_OC_Stop_IT+0xec>
 800ec66:	2300      	movs	r3, #0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d017      	beq.n	800ec9c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6a1a      	ldr	r2, [r3, #32]
 800ec72:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec76:	4013      	ands	r3, r2
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d10f      	bne.n	800ec9c <HAL_TIM_OC_Stop_IT+0x120>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6a1a      	ldr	r2, [r3, #32]
 800ec82:	f240 4344 	movw	r3, #1092	; 0x444
 800ec86:	4013      	ands	r3, r2
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d107      	bne.n	800ec9c <HAL_TIM_OC_Stop_IT+0x120>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	6a1a      	ldr	r2, [r3, #32]
 800eca2:	f241 1311 	movw	r3, #4369	; 0x1111
 800eca6:	4013      	ands	r3, r2
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10f      	bne.n	800eccc <HAL_TIM_OC_Stop_IT+0x150>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6a1a      	ldr	r2, [r3, #32]
 800ecb2:	f240 4344 	movw	r3, #1092	; 0x444
 800ecb6:	4013      	ands	r3, r2
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d107      	bne.n	800eccc <HAL_TIM_OC_Stop_IT+0x150>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f022 0201 	bic.w	r2, r2, #1
 800ecca:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d104      	bne.n	800ecdc <HAL_TIM_OC_Stop_IT+0x160>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecda:	e023      	b.n	800ed24 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b04      	cmp	r3, #4
 800ece0:	d104      	bne.n	800ecec <HAL_TIM_OC_Stop_IT+0x170>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2201      	movs	r2, #1
 800ece6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecea:	e01b      	b.n	800ed24 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b08      	cmp	r3, #8
 800ecf0:	d104      	bne.n	800ecfc <HAL_TIM_OC_Stop_IT+0x180>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecfa:	e013      	b.n	800ed24 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	2b0c      	cmp	r3, #12
 800ed00:	d104      	bne.n	800ed0c <HAL_TIM_OC_Stop_IT+0x190>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2201      	movs	r2, #1
 800ed06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed0a:	e00b      	b.n	800ed24 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2b10      	cmp	r3, #16
 800ed10:	d104      	bne.n	800ed1c <HAL_TIM_OC_Stop_IT+0x1a0>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2201      	movs	r2, #1
 800ed16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed1a:	e003      	b.n	800ed24 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	40010000 	.word	0x40010000
 800ed34:	40010400 	.word	0x40010400
 800ed38:	40014000 	.word	0x40014000
 800ed3c:	40014400 	.word	0x40014400
 800ed40:	40014800 	.word	0x40014800

0800ed44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed52:	2301      	movs	r3, #1
 800ed54:	e049      	b.n	800edea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d106      	bne.n	800ed70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 f841 	bl	800edf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2202      	movs	r2, #2
 800ed74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f000 fb70 	bl	800f468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800edfa:	bf00      	nop
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	f003 0302 	and.w	r3, r3, #2
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d020      	beq.n	800ee6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f003 0302 	and.w	r3, r3, #2
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d01b      	beq.n	800ee6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f06f 0202 	mvn.w	r2, #2
 800ee3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	f003 0303 	and.w	r3, r3, #3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d003      	beq.n	800ee58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 faeb 	bl	800f42c <HAL_TIM_IC_CaptureCallback>
 800ee56:	e005      	b.n	800ee64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f7f1 fbd1 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 faee 	bl	800f440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	f003 0304 	and.w	r3, r3, #4
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d020      	beq.n	800eeb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f003 0304 	and.w	r3, r3, #4
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d01b      	beq.n	800eeb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f06f 0204 	mvn.w	r2, #4
 800ee86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d003      	beq.n	800eea4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 fac5 	bl	800f42c <HAL_TIM_IC_CaptureCallback>
 800eea2:	e005      	b.n	800eeb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7f1 fbab 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fac8 	bl	800f440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	f003 0308 	and.w	r3, r3, #8
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d020      	beq.n	800ef02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f003 0308 	and.w	r3, r3, #8
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d01b      	beq.n	800ef02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f06f 0208 	mvn.w	r2, #8
 800eed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2204      	movs	r2, #4
 800eed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	69db      	ldr	r3, [r3, #28]
 800eee0:	f003 0303 	and.w	r3, r3, #3
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d003      	beq.n	800eef0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fa9f 	bl	800f42c <HAL_TIM_IC_CaptureCallback>
 800eeee:	e005      	b.n	800eefc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f7f1 fb85 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 faa2 	bl	800f440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	f003 0310 	and.w	r3, r3, #16
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d020      	beq.n	800ef4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f003 0310 	and.w	r3, r3, #16
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d01b      	beq.n	800ef4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f06f 0210 	mvn.w	r2, #16
 800ef1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2208      	movs	r2, #8
 800ef24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	69db      	ldr	r3, [r3, #28]
 800ef2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d003      	beq.n	800ef3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 fa79 	bl	800f42c <HAL_TIM_IC_CaptureCallback>
 800ef3a:	e005      	b.n	800ef48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7f1 fb5f 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 fa7c 	bl	800f440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	f003 0301 	and.w	r3, r3, #1
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00c      	beq.n	800ef72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d007      	beq.n	800ef72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f06f 0201 	mvn.w	r2, #1
 800ef6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7f3 ffcb 	bl	8002f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d104      	bne.n	800ef86 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00c      	beq.n	800efa0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d007      	beq.n	800efa0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ef98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 ffba 	bl	800ff14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d00c      	beq.n	800efc4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d007      	beq.n	800efc4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800efbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 ffb2 	bl	800ff28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00c      	beq.n	800efe8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d007      	beq.n	800efe8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800efe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 fa36 	bl	800f454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	f003 0320 	and.w	r3, r3, #32
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00c      	beq.n	800f00c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f003 0320 	and.w	r3, r3, #32
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d007      	beq.n	800f00c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f06f 0220 	mvn.w	r2, #32
 800f004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 ff7a 	bl	800ff00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f00c:	bf00      	nop
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f020:	2300      	movs	r3, #0
 800f022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d101      	bne.n	800f032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f02e:	2302      	movs	r3, #2
 800f030:	e0ff      	b.n	800f232 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2201      	movs	r2, #1
 800f036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2b14      	cmp	r3, #20
 800f03e:	f200 80f0 	bhi.w	800f222 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f042:	a201      	add	r2, pc, #4	; (adr r2, 800f048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f048:	0800f09d 	.word	0x0800f09d
 800f04c:	0800f223 	.word	0x0800f223
 800f050:	0800f223 	.word	0x0800f223
 800f054:	0800f223 	.word	0x0800f223
 800f058:	0800f0dd 	.word	0x0800f0dd
 800f05c:	0800f223 	.word	0x0800f223
 800f060:	0800f223 	.word	0x0800f223
 800f064:	0800f223 	.word	0x0800f223
 800f068:	0800f11f 	.word	0x0800f11f
 800f06c:	0800f223 	.word	0x0800f223
 800f070:	0800f223 	.word	0x0800f223
 800f074:	0800f223 	.word	0x0800f223
 800f078:	0800f15f 	.word	0x0800f15f
 800f07c:	0800f223 	.word	0x0800f223
 800f080:	0800f223 	.word	0x0800f223
 800f084:	0800f223 	.word	0x0800f223
 800f088:	0800f1a1 	.word	0x0800f1a1
 800f08c:	0800f223 	.word	0x0800f223
 800f090:	0800f223 	.word	0x0800f223
 800f094:	0800f223 	.word	0x0800f223
 800f098:	0800f1e1 	.word	0x0800f1e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 fa86 	bl	800f5b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	699a      	ldr	r2, [r3, #24]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f042 0208 	orr.w	r2, r2, #8
 800f0b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	699a      	ldr	r2, [r3, #24]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f022 0204 	bic.w	r2, r2, #4
 800f0c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	6999      	ldr	r1, [r3, #24]
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	691a      	ldr	r2, [r3, #16]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	430a      	orrs	r2, r1
 800f0d8:	619a      	str	r2, [r3, #24]
      break;
 800f0da:	e0a5      	b.n	800f228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68b9      	ldr	r1, [r7, #8]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 faf6 	bl	800f6d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	699a      	ldr	r2, [r3, #24]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	699a      	ldr	r2, [r3, #24]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6999      	ldr	r1, [r3, #24]
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	021a      	lsls	r2, r3, #8
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	430a      	orrs	r2, r1
 800f11a:	619a      	str	r2, [r3, #24]
      break;
 800f11c:	e084      	b.n	800f228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	68b9      	ldr	r1, [r7, #8]
 800f124:	4618      	mov	r0, r3
 800f126:	f000 fb5f 	bl	800f7e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	69da      	ldr	r2, [r3, #28]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f042 0208 	orr.w	r2, r2, #8
 800f138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	69da      	ldr	r2, [r3, #28]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f022 0204 	bic.w	r2, r2, #4
 800f148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	69d9      	ldr	r1, [r3, #28]
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	691a      	ldr	r2, [r3, #16]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	430a      	orrs	r2, r1
 800f15a:	61da      	str	r2, [r3, #28]
      break;
 800f15c:	e064      	b.n	800f228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	4618      	mov	r0, r3
 800f166:	f000 fbc7 	bl	800f8f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	69da      	ldr	r2, [r3, #28]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	69da      	ldr	r2, [r3, #28]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	69d9      	ldr	r1, [r3, #28]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	691b      	ldr	r3, [r3, #16]
 800f194:	021a      	lsls	r2, r3, #8
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	430a      	orrs	r2, r1
 800f19c:	61da      	str	r2, [r3, #28]
      break;
 800f19e:	e043      	b.n	800f228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68b9      	ldr	r1, [r7, #8]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f000 fc10 	bl	800f9cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f042 0208 	orr.w	r2, r2, #8
 800f1ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f022 0204 	bic.w	r2, r2, #4
 800f1ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	691a      	ldr	r2, [r3, #16]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	430a      	orrs	r2, r1
 800f1dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f1de:	e023      	b.n	800f228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	68b9      	ldr	r1, [r7, #8]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f000 fc54 	bl	800fa94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f20a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	691b      	ldr	r3, [r3, #16]
 800f216:	021a      	lsls	r2, r3, #8
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	430a      	orrs	r2, r1
 800f21e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f220:	e002      	b.n	800f228 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	75fb      	strb	r3, [r7, #23]
      break;
 800f226:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f230:	7dfb      	ldrb	r3, [r7, #23]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3718      	adds	r7, #24
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop

0800f23c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f246:	2300      	movs	r3, #0
 800f248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f250:	2b01      	cmp	r3, #1
 800f252:	d101      	bne.n	800f258 <HAL_TIM_ConfigClockSource+0x1c>
 800f254:	2302      	movs	r3, #2
 800f256:	e0dc      	b.n	800f412 <HAL_TIM_ConfigClockSource+0x1d6>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2201      	movs	r2, #1
 800f25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2202      	movs	r2, #2
 800f264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f270:	68ba      	ldr	r2, [r7, #8]
 800f272:	4b6a      	ldr	r3, [pc, #424]	; (800f41c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f274:	4013      	ands	r3, r2
 800f276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f27e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a64      	ldr	r2, [pc, #400]	; (800f420 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	f000 80a9 	beq.w	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f294:	4a62      	ldr	r2, [pc, #392]	; (800f420 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f296:	4293      	cmp	r3, r2
 800f298:	f200 80ae 	bhi.w	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f29c:	4a61      	ldr	r2, [pc, #388]	; (800f424 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	f000 80a1 	beq.w	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2a4:	4a5f      	ldr	r2, [pc, #380]	; (800f424 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	f200 80a6 	bhi.w	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2ac:	4a5e      	ldr	r2, [pc, #376]	; (800f428 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	f000 8099 	beq.w	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2b4:	4a5c      	ldr	r2, [pc, #368]	; (800f428 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	f200 809e 	bhi.w	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2c0:	f000 8091 	beq.w	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2c8:	f200 8096 	bhi.w	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2d0:	f000 8089 	beq.w	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2d8:	f200 808e 	bhi.w	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2e0:	d03e      	beq.n	800f360 <HAL_TIM_ConfigClockSource+0x124>
 800f2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2e6:	f200 8087 	bhi.w	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2ee:	f000 8086 	beq.w	800f3fe <HAL_TIM_ConfigClockSource+0x1c2>
 800f2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2f6:	d87f      	bhi.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2f8:	2b70      	cmp	r3, #112	; 0x70
 800f2fa:	d01a      	beq.n	800f332 <HAL_TIM_ConfigClockSource+0xf6>
 800f2fc:	2b70      	cmp	r3, #112	; 0x70
 800f2fe:	d87b      	bhi.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f300:	2b60      	cmp	r3, #96	; 0x60
 800f302:	d050      	beq.n	800f3a6 <HAL_TIM_ConfigClockSource+0x16a>
 800f304:	2b60      	cmp	r3, #96	; 0x60
 800f306:	d877      	bhi.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f308:	2b50      	cmp	r3, #80	; 0x50
 800f30a:	d03c      	beq.n	800f386 <HAL_TIM_ConfigClockSource+0x14a>
 800f30c:	2b50      	cmp	r3, #80	; 0x50
 800f30e:	d873      	bhi.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f310:	2b40      	cmp	r3, #64	; 0x40
 800f312:	d058      	beq.n	800f3c6 <HAL_TIM_ConfigClockSource+0x18a>
 800f314:	2b40      	cmp	r3, #64	; 0x40
 800f316:	d86f      	bhi.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f318:	2b30      	cmp	r3, #48	; 0x30
 800f31a:	d064      	beq.n	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f31c:	2b30      	cmp	r3, #48	; 0x30
 800f31e:	d86b      	bhi.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f320:	2b20      	cmp	r3, #32
 800f322:	d060      	beq.n	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f324:	2b20      	cmp	r3, #32
 800f326:	d867      	bhi.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d05c      	beq.n	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f32c:	2b10      	cmp	r3, #16
 800f32e:	d05a      	beq.n	800f3e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f330:	e062      	b.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6818      	ldr	r0, [r3, #0]
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	6899      	ldr	r1, [r3, #8]
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	685a      	ldr	r2, [r3, #4]
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	f000 fc8b 	bl	800fc5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	609a      	str	r2, [r3, #8]
      break;
 800f35e:	e04f      	b.n	800f400 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6818      	ldr	r0, [r3, #0]
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	6899      	ldr	r1, [r3, #8]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	f000 fc74 	bl	800fc5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	689a      	ldr	r2, [r3, #8]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f382:	609a      	str	r2, [r3, #8]
      break;
 800f384:	e03c      	b.n	800f400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6818      	ldr	r0, [r3, #0]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	6859      	ldr	r1, [r3, #4]
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	461a      	mov	r2, r3
 800f394:	f000 fbe4 	bl	800fb60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2150      	movs	r1, #80	; 0x50
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 fc3e 	bl	800fc20 <TIM_ITRx_SetConfig>
      break;
 800f3a4:	e02c      	b.n	800f400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	6859      	ldr	r1, [r3, #4]
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	f000 fc03 	bl	800fbbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2160      	movs	r1, #96	; 0x60
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fc2e 	bl	800fc20 <TIM_ITRx_SetConfig>
      break;
 800f3c4:	e01c      	b.n	800f400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6818      	ldr	r0, [r3, #0]
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	6859      	ldr	r1, [r3, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	f000 fbc4 	bl	800fb60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2140      	movs	r1, #64	; 0x40
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f000 fc1e 	bl	800fc20 <TIM_ITRx_SetConfig>
      break;
 800f3e4:	e00c      	b.n	800f400 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	f000 fc15 	bl	800fc20 <TIM_ITRx_SetConfig>
      break;
 800f3f6:	e003      	b.n	800f400 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f3fc:	e000      	b.n	800f400 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f3fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2201      	movs	r2, #1
 800f404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f410:	7bfb      	ldrb	r3, [r7, #15]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	ffceff88 	.word	0xffceff88
 800f420:	00100040 	.word	0x00100040
 800f424:	00100030 	.word	0x00100030
 800f428:	00100020 	.word	0x00100020

0800f42c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f448:	bf00      	nop
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f45c:	bf00      	nop
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4a46      	ldr	r2, [pc, #280]	; (800f594 <TIM_Base_SetConfig+0x12c>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d013      	beq.n	800f4a8 <TIM_Base_SetConfig+0x40>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f486:	d00f      	beq.n	800f4a8 <TIM_Base_SetConfig+0x40>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a43      	ldr	r2, [pc, #268]	; (800f598 <TIM_Base_SetConfig+0x130>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d00b      	beq.n	800f4a8 <TIM_Base_SetConfig+0x40>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a42      	ldr	r2, [pc, #264]	; (800f59c <TIM_Base_SetConfig+0x134>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d007      	beq.n	800f4a8 <TIM_Base_SetConfig+0x40>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a41      	ldr	r2, [pc, #260]	; (800f5a0 <TIM_Base_SetConfig+0x138>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d003      	beq.n	800f4a8 <TIM_Base_SetConfig+0x40>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a40      	ldr	r2, [pc, #256]	; (800f5a4 <TIM_Base_SetConfig+0x13c>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d108      	bne.n	800f4ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a35      	ldr	r2, [pc, #212]	; (800f594 <TIM_Base_SetConfig+0x12c>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d01f      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4c8:	d01b      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a32      	ldr	r2, [pc, #200]	; (800f598 <TIM_Base_SetConfig+0x130>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d017      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4a31      	ldr	r2, [pc, #196]	; (800f59c <TIM_Base_SetConfig+0x134>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d013      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a30      	ldr	r2, [pc, #192]	; (800f5a0 <TIM_Base_SetConfig+0x138>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d00f      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a2f      	ldr	r2, [pc, #188]	; (800f5a4 <TIM_Base_SetConfig+0x13c>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d00b      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a2e      	ldr	r2, [pc, #184]	; (800f5a8 <TIM_Base_SetConfig+0x140>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d007      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a2d      	ldr	r2, [pc, #180]	; (800f5ac <TIM_Base_SetConfig+0x144>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d003      	beq.n	800f502 <TIM_Base_SetConfig+0x9a>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a2c      	ldr	r2, [pc, #176]	; (800f5b0 <TIM_Base_SetConfig+0x148>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d108      	bne.n	800f514 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	4313      	orrs	r3, r2
 800f512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	4313      	orrs	r3, r2
 800f520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	689a      	ldr	r2, [r3, #8]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a16      	ldr	r2, [pc, #88]	; (800f594 <TIM_Base_SetConfig+0x12c>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d00f      	beq.n	800f560 <TIM_Base_SetConfig+0xf8>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a18      	ldr	r2, [pc, #96]	; (800f5a4 <TIM_Base_SetConfig+0x13c>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d00b      	beq.n	800f560 <TIM_Base_SetConfig+0xf8>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a17      	ldr	r2, [pc, #92]	; (800f5a8 <TIM_Base_SetConfig+0x140>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d007      	beq.n	800f560 <TIM_Base_SetConfig+0xf8>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a16      	ldr	r2, [pc, #88]	; (800f5ac <TIM_Base_SetConfig+0x144>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d003      	beq.n	800f560 <TIM_Base_SetConfig+0xf8>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a15      	ldr	r2, [pc, #84]	; (800f5b0 <TIM_Base_SetConfig+0x148>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d103      	bne.n	800f568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	691a      	ldr	r2, [r3, #16]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2201      	movs	r2, #1
 800f56c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	691b      	ldr	r3, [r3, #16]
 800f572:	f003 0301 	and.w	r3, r3, #1
 800f576:	2b01      	cmp	r3, #1
 800f578:	d105      	bne.n	800f586 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	f023 0201 	bic.w	r2, r3, #1
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	611a      	str	r2, [r3, #16]
  }
}
 800f586:	bf00      	nop
 800f588:	3714      	adds	r7, #20
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr
 800f592:	bf00      	nop
 800f594:	40010000 	.word	0x40010000
 800f598:	40000400 	.word	0x40000400
 800f59c:	40000800 	.word	0x40000800
 800f5a0:	40000c00 	.word	0x40000c00
 800f5a4:	40010400 	.word	0x40010400
 800f5a8:	40014000 	.word	0x40014000
 800f5ac:	40014400 	.word	0x40014400
 800f5b0:	40014800 	.word	0x40014800

0800f5b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6a1b      	ldr	r3, [r3, #32]
 800f5c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6a1b      	ldr	r3, [r3, #32]
 800f5c8:	f023 0201 	bic.w	r2, r3, #1
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	4b37      	ldr	r3, [pc, #220]	; (800f6bc <TIM_OC1_SetConfig+0x108>)
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f023 0303 	bic.w	r3, r3, #3
 800f5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	4313      	orrs	r3, r2
 800f5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	f023 0302 	bic.w	r3, r3, #2
 800f5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	697a      	ldr	r2, [r7, #20]
 800f604:	4313      	orrs	r3, r2
 800f606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4a2d      	ldr	r2, [pc, #180]	; (800f6c0 <TIM_OC1_SetConfig+0x10c>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d00f      	beq.n	800f630 <TIM_OC1_SetConfig+0x7c>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a2c      	ldr	r2, [pc, #176]	; (800f6c4 <TIM_OC1_SetConfig+0x110>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d00b      	beq.n	800f630 <TIM_OC1_SetConfig+0x7c>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a2b      	ldr	r2, [pc, #172]	; (800f6c8 <TIM_OC1_SetConfig+0x114>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d007      	beq.n	800f630 <TIM_OC1_SetConfig+0x7c>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a2a      	ldr	r2, [pc, #168]	; (800f6cc <TIM_OC1_SetConfig+0x118>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d003      	beq.n	800f630 <TIM_OC1_SetConfig+0x7c>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a29      	ldr	r2, [pc, #164]	; (800f6d0 <TIM_OC1_SetConfig+0x11c>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d10c      	bne.n	800f64a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	f023 0308 	bic.w	r3, r3, #8
 800f636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	697a      	ldr	r2, [r7, #20]
 800f63e:	4313      	orrs	r3, r2
 800f640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	f023 0304 	bic.w	r3, r3, #4
 800f648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a1c      	ldr	r2, [pc, #112]	; (800f6c0 <TIM_OC1_SetConfig+0x10c>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d00f      	beq.n	800f672 <TIM_OC1_SetConfig+0xbe>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4a1b      	ldr	r2, [pc, #108]	; (800f6c4 <TIM_OC1_SetConfig+0x110>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d00b      	beq.n	800f672 <TIM_OC1_SetConfig+0xbe>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4a1a      	ldr	r2, [pc, #104]	; (800f6c8 <TIM_OC1_SetConfig+0x114>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d007      	beq.n	800f672 <TIM_OC1_SetConfig+0xbe>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4a19      	ldr	r2, [pc, #100]	; (800f6cc <TIM_OC1_SetConfig+0x118>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d003      	beq.n	800f672 <TIM_OC1_SetConfig+0xbe>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4a18      	ldr	r2, [pc, #96]	; (800f6d0 <TIM_OC1_SetConfig+0x11c>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d111      	bne.n	800f696 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	693a      	ldr	r2, [r7, #16]
 800f688:	4313      	orrs	r3, r2
 800f68a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	699b      	ldr	r3, [r3, #24]
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	4313      	orrs	r3, r2
 800f694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	693a      	ldr	r2, [r7, #16]
 800f69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	621a      	str	r2, [r3, #32]
}
 800f6b0:	bf00      	nop
 800f6b2:	371c      	adds	r7, #28
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	fffeff8f 	.word	0xfffeff8f
 800f6c0:	40010000 	.word	0x40010000
 800f6c4:	40010400 	.word	0x40010400
 800f6c8:	40014000 	.word	0x40014000
 800f6cc:	40014400 	.word	0x40014400
 800f6d0:	40014800 	.word	0x40014800

0800f6d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b087      	sub	sp, #28
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a1b      	ldr	r3, [r3, #32]
 800f6e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a1b      	ldr	r3, [r3, #32]
 800f6e8:	f023 0210 	bic.w	r2, r3, #16
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	4b34      	ldr	r3, [pc, #208]	; (800f7d0 <TIM_OC2_SetConfig+0xfc>)
 800f700:	4013      	ands	r3, r2
 800f702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	021b      	lsls	r3, r3, #8
 800f712:	68fa      	ldr	r2, [r7, #12]
 800f714:	4313      	orrs	r3, r2
 800f716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	f023 0320 	bic.w	r3, r3, #32
 800f71e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	011b      	lsls	r3, r3, #4
 800f726:	697a      	ldr	r2, [r7, #20]
 800f728:	4313      	orrs	r3, r2
 800f72a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a29      	ldr	r2, [pc, #164]	; (800f7d4 <TIM_OC2_SetConfig+0x100>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d003      	beq.n	800f73c <TIM_OC2_SetConfig+0x68>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	4a28      	ldr	r2, [pc, #160]	; (800f7d8 <TIM_OC2_SetConfig+0x104>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d10d      	bne.n	800f758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	011b      	lsls	r3, r3, #4
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a1e      	ldr	r2, [pc, #120]	; (800f7d4 <TIM_OC2_SetConfig+0x100>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d00f      	beq.n	800f780 <TIM_OC2_SetConfig+0xac>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a1d      	ldr	r2, [pc, #116]	; (800f7d8 <TIM_OC2_SetConfig+0x104>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d00b      	beq.n	800f780 <TIM_OC2_SetConfig+0xac>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a1c      	ldr	r2, [pc, #112]	; (800f7dc <TIM_OC2_SetConfig+0x108>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d007      	beq.n	800f780 <TIM_OC2_SetConfig+0xac>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a1b      	ldr	r2, [pc, #108]	; (800f7e0 <TIM_OC2_SetConfig+0x10c>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d003      	beq.n	800f780 <TIM_OC2_SetConfig+0xac>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4a1a      	ldr	r2, [pc, #104]	; (800f7e4 <TIM_OC2_SetConfig+0x110>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d113      	bne.n	800f7a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f78e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	695b      	ldr	r3, [r3, #20]
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	4313      	orrs	r3, r2
 800f79a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	699b      	ldr	r3, [r3, #24]
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	693a      	ldr	r2, [r7, #16]
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	693a      	ldr	r2, [r7, #16]
 800f7ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	68fa      	ldr	r2, [r7, #12]
 800f7b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685a      	ldr	r2, [r3, #4]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	621a      	str	r2, [r3, #32]
}
 800f7c2:	bf00      	nop
 800f7c4:	371c      	adds	r7, #28
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	feff8fff 	.word	0xfeff8fff
 800f7d4:	40010000 	.word	0x40010000
 800f7d8:	40010400 	.word	0x40010400
 800f7dc:	40014000 	.word	0x40014000
 800f7e0:	40014400 	.word	0x40014400
 800f7e4:	40014800 	.word	0x40014800

0800f7e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a1b      	ldr	r3, [r3, #32]
 800f7fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	69db      	ldr	r3, [r3, #28]
 800f80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	4b33      	ldr	r3, [pc, #204]	; (800f8e0 <TIM_OC3_SetConfig+0xf8>)
 800f814:	4013      	ands	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f023 0303 	bic.w	r3, r3, #3
 800f81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	4313      	orrs	r3, r2
 800f828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	689b      	ldr	r3, [r3, #8]
 800f836:	021b      	lsls	r3, r3, #8
 800f838:	697a      	ldr	r2, [r7, #20]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a28      	ldr	r2, [pc, #160]	; (800f8e4 <TIM_OC3_SetConfig+0xfc>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d003      	beq.n	800f84e <TIM_OC3_SetConfig+0x66>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a27      	ldr	r2, [pc, #156]	; (800f8e8 <TIM_OC3_SetConfig+0x100>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d10d      	bne.n	800f86a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	021b      	lsls	r3, r3, #8
 800f85c:	697a      	ldr	r2, [r7, #20]
 800f85e:	4313      	orrs	r3, r2
 800f860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a1d      	ldr	r2, [pc, #116]	; (800f8e4 <TIM_OC3_SetConfig+0xfc>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d00f      	beq.n	800f892 <TIM_OC3_SetConfig+0xaa>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a1c      	ldr	r2, [pc, #112]	; (800f8e8 <TIM_OC3_SetConfig+0x100>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d00b      	beq.n	800f892 <TIM_OC3_SetConfig+0xaa>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a1b      	ldr	r2, [pc, #108]	; (800f8ec <TIM_OC3_SetConfig+0x104>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d007      	beq.n	800f892 <TIM_OC3_SetConfig+0xaa>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4a1a      	ldr	r2, [pc, #104]	; (800f8f0 <TIM_OC3_SetConfig+0x108>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d003      	beq.n	800f892 <TIM_OC3_SetConfig+0xaa>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4a19      	ldr	r2, [pc, #100]	; (800f8f4 <TIM_OC3_SetConfig+0x10c>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d113      	bne.n	800f8ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	695b      	ldr	r3, [r3, #20]
 800f8a6:	011b      	lsls	r3, r3, #4
 800f8a8:	693a      	ldr	r2, [r7, #16]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	699b      	ldr	r3, [r3, #24]
 800f8b2:	011b      	lsls	r3, r3, #4
 800f8b4:	693a      	ldr	r2, [r7, #16]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	693a      	ldr	r2, [r7, #16]
 800f8be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	685a      	ldr	r2, [r3, #4]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	697a      	ldr	r2, [r7, #20]
 800f8d2:	621a      	str	r2, [r3, #32]
}
 800f8d4:	bf00      	nop
 800f8d6:	371c      	adds	r7, #28
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	fffeff8f 	.word	0xfffeff8f
 800f8e4:	40010000 	.word	0x40010000
 800f8e8:	40010400 	.word	0x40010400
 800f8ec:	40014000 	.word	0x40014000
 800f8f0:	40014400 	.word	0x40014400
 800f8f4:	40014800 	.word	0x40014800

0800f8f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b087      	sub	sp, #28
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6a1b      	ldr	r3, [r3, #32]
 800f906:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a1b      	ldr	r3, [r3, #32]
 800f90c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	69db      	ldr	r3, [r3, #28]
 800f91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	4b24      	ldr	r3, [pc, #144]	; (800f9b4 <TIM_OC4_SetConfig+0xbc>)
 800f924:	4013      	ands	r3, r2
 800f926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	021b      	lsls	r3, r3, #8
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	4313      	orrs	r3, r2
 800f93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	031b      	lsls	r3, r3, #12
 800f94a:	693a      	ldr	r2, [r7, #16]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a19      	ldr	r2, [pc, #100]	; (800f9b8 <TIM_OC4_SetConfig+0xc0>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d00f      	beq.n	800f978 <TIM_OC4_SetConfig+0x80>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a18      	ldr	r2, [pc, #96]	; (800f9bc <TIM_OC4_SetConfig+0xc4>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d00b      	beq.n	800f978 <TIM_OC4_SetConfig+0x80>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a17      	ldr	r2, [pc, #92]	; (800f9c0 <TIM_OC4_SetConfig+0xc8>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d007      	beq.n	800f978 <TIM_OC4_SetConfig+0x80>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4a16      	ldr	r2, [pc, #88]	; (800f9c4 <TIM_OC4_SetConfig+0xcc>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d003      	beq.n	800f978 <TIM_OC4_SetConfig+0x80>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a15      	ldr	r2, [pc, #84]	; (800f9c8 <TIM_OC4_SetConfig+0xd0>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d109      	bne.n	800f98c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f97e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	695b      	ldr	r3, [r3, #20]
 800f984:	019b      	lsls	r3, r3, #6
 800f986:	697a      	ldr	r2, [r7, #20]
 800f988:	4313      	orrs	r3, r2
 800f98a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	697a      	ldr	r2, [r7, #20]
 800f990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	621a      	str	r2, [r3, #32]
}
 800f9a6:	bf00      	nop
 800f9a8:	371c      	adds	r7, #28
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	feff8fff 	.word	0xfeff8fff
 800f9b8:	40010000 	.word	0x40010000
 800f9bc:	40010400 	.word	0x40010400
 800f9c0:	40014000 	.word	0x40014000
 800f9c4:	40014400 	.word	0x40014400
 800f9c8:	40014800 	.word	0x40014800

0800f9cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b087      	sub	sp, #28
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a1b      	ldr	r3, [r3, #32]
 800f9da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a1b      	ldr	r3, [r3, #32]
 800f9e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	4b21      	ldr	r3, [pc, #132]	; (800fa7c <TIM_OC5_SetConfig+0xb0>)
 800f9f8:	4013      	ands	r3, r2
 800f9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	041b      	lsls	r3, r3, #16
 800fa14:	693a      	ldr	r2, [r7, #16]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a18      	ldr	r2, [pc, #96]	; (800fa80 <TIM_OC5_SetConfig+0xb4>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d00f      	beq.n	800fa42 <TIM_OC5_SetConfig+0x76>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a17      	ldr	r2, [pc, #92]	; (800fa84 <TIM_OC5_SetConfig+0xb8>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d00b      	beq.n	800fa42 <TIM_OC5_SetConfig+0x76>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a16      	ldr	r2, [pc, #88]	; (800fa88 <TIM_OC5_SetConfig+0xbc>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d007      	beq.n	800fa42 <TIM_OC5_SetConfig+0x76>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a15      	ldr	r2, [pc, #84]	; (800fa8c <TIM_OC5_SetConfig+0xc0>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d003      	beq.n	800fa42 <TIM_OC5_SetConfig+0x76>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a14      	ldr	r2, [pc, #80]	; (800fa90 <TIM_OC5_SetConfig+0xc4>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d109      	bne.n	800fa56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	695b      	ldr	r3, [r3, #20]
 800fa4e:	021b      	lsls	r3, r3, #8
 800fa50:	697a      	ldr	r2, [r7, #20]
 800fa52:	4313      	orrs	r3, r2
 800fa54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	697a      	ldr	r2, [r7, #20]
 800fa5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	621a      	str	r2, [r3, #32]
}
 800fa70:	bf00      	nop
 800fa72:	371c      	adds	r7, #28
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	fffeff8f 	.word	0xfffeff8f
 800fa80:	40010000 	.word	0x40010000
 800fa84:	40010400 	.word	0x40010400
 800fa88:	40014000 	.word	0x40014000
 800fa8c:	40014400 	.word	0x40014400
 800fa90:	40014800 	.word	0x40014800

0800fa94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b087      	sub	sp, #28
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a1b      	ldr	r3, [r3, #32]
 800faa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	4b22      	ldr	r3, [pc, #136]	; (800fb48 <TIM_OC6_SetConfig+0xb4>)
 800fac0:	4013      	ands	r3, r2
 800fac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	021b      	lsls	r3, r3, #8
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	4313      	orrs	r3, r2
 800face:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	051b      	lsls	r3, r3, #20
 800fade:	693a      	ldr	r2, [r7, #16]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4a19      	ldr	r2, [pc, #100]	; (800fb4c <TIM_OC6_SetConfig+0xb8>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d00f      	beq.n	800fb0c <TIM_OC6_SetConfig+0x78>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4a18      	ldr	r2, [pc, #96]	; (800fb50 <TIM_OC6_SetConfig+0xbc>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d00b      	beq.n	800fb0c <TIM_OC6_SetConfig+0x78>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a17      	ldr	r2, [pc, #92]	; (800fb54 <TIM_OC6_SetConfig+0xc0>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d007      	beq.n	800fb0c <TIM_OC6_SetConfig+0x78>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a16      	ldr	r2, [pc, #88]	; (800fb58 <TIM_OC6_SetConfig+0xc4>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d003      	beq.n	800fb0c <TIM_OC6_SetConfig+0x78>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a15      	ldr	r2, [pc, #84]	; (800fb5c <TIM_OC6_SetConfig+0xc8>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d109      	bne.n	800fb20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	695b      	ldr	r3, [r3, #20]
 800fb18:	029b      	lsls	r3, r3, #10
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	685a      	ldr	r2, [r3, #4]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	693a      	ldr	r2, [r7, #16]
 800fb38:	621a      	str	r2, [r3, #32]
}
 800fb3a:	bf00      	nop
 800fb3c:	371c      	adds	r7, #28
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
 800fb46:	bf00      	nop
 800fb48:	feff8fff 	.word	0xfeff8fff
 800fb4c:	40010000 	.word	0x40010000
 800fb50:	40010400 	.word	0x40010400
 800fb54:	40014000 	.word	0x40014000
 800fb58:	40014400 	.word	0x40014400
 800fb5c:	40014800 	.word	0x40014800

0800fb60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b087      	sub	sp, #28
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6a1b      	ldr	r3, [r3, #32]
 800fb70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	f023 0201 	bic.w	r2, r3, #1
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	699b      	ldr	r3, [r3, #24]
 800fb82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	011b      	lsls	r3, r3, #4
 800fb90:	693a      	ldr	r2, [r7, #16]
 800fb92:	4313      	orrs	r3, r2
 800fb94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	f023 030a 	bic.w	r3, r3, #10
 800fb9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb9e:	697a      	ldr	r2, [r7, #20]
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	4313      	orrs	r3, r2
 800fba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	621a      	str	r2, [r3, #32]
}
 800fbb2:	bf00      	nop
 800fbb4:	371c      	adds	r7, #28
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr

0800fbbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbbe:	b480      	push	{r7}
 800fbc0:	b087      	sub	sp, #28
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	60f8      	str	r0, [r7, #12]
 800fbc6:	60b9      	str	r1, [r7, #8]
 800fbc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6a1b      	ldr	r3, [r3, #32]
 800fbce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	6a1b      	ldr	r3, [r3, #32]
 800fbd4:	f023 0210 	bic.w	r2, r3, #16
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	699b      	ldr	r3, [r3, #24]
 800fbe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	031b      	lsls	r3, r3, #12
 800fbee:	693a      	ldr	r2, [r7, #16]
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fbfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	011b      	lsls	r3, r3, #4
 800fc00:	697a      	ldr	r2, [r7, #20]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	621a      	str	r2, [r3, #32]
}
 800fc12:	bf00      	nop
 800fc14:	371c      	adds	r7, #28
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr
	...

0800fc20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b085      	sub	sp, #20
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	689b      	ldr	r3, [r3, #8]
 800fc2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc30:	68fa      	ldr	r2, [r7, #12]
 800fc32:	4b09      	ldr	r3, [pc, #36]	; (800fc58 <TIM_ITRx_SetConfig+0x38>)
 800fc34:	4013      	ands	r3, r2
 800fc36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	f043 0307 	orr.w	r3, r3, #7
 800fc42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	68fa      	ldr	r2, [r7, #12]
 800fc48:	609a      	str	r2, [r3, #8]
}
 800fc4a:	bf00      	nop
 800fc4c:	3714      	adds	r7, #20
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
 800fc56:	bf00      	nop
 800fc58:	ffcfff8f 	.word	0xffcfff8f

0800fc5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b087      	sub	sp, #28
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	60f8      	str	r0, [r7, #12]
 800fc64:	60b9      	str	r1, [r7, #8]
 800fc66:	607a      	str	r2, [r7, #4]
 800fc68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	021a      	lsls	r2, r3, #8
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	431a      	orrs	r2, r3
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	697a      	ldr	r2, [r7, #20]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	609a      	str	r2, [r3, #8]
}
 800fc90:	bf00      	nop
 800fc92:	371c      	adds	r7, #28
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b087      	sub	sp, #28
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	f003 031f 	and.w	r3, r3, #31
 800fcae:	2201      	movs	r2, #1
 800fcb0:	fa02 f303 	lsl.w	r3, r2, r3
 800fcb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6a1a      	ldr	r2, [r3, #32]
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	43db      	mvns	r3, r3
 800fcbe:	401a      	ands	r2, r3
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6a1a      	ldr	r2, [r3, #32]
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	f003 031f 	and.w	r3, r3, #31
 800fcce:	6879      	ldr	r1, [r7, #4]
 800fcd0:	fa01 f303 	lsl.w	r3, r1, r3
 800fcd4:	431a      	orrs	r2, r3
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	621a      	str	r2, [r3, #32]
}
 800fcda:	bf00      	nop
 800fcdc:	371c      	adds	r7, #28
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr
	...

0800fce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcf8:	2b01      	cmp	r3, #1
 800fcfa:	d101      	bne.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcfc:	2302      	movs	r3, #2
 800fcfe:	e06d      	b.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2201      	movs	r2, #1
 800fd04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2202      	movs	r2, #2
 800fd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4a30      	ldr	r2, [pc, #192]	; (800fde8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d004      	beq.n	800fd34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a2f      	ldr	r2, [pc, #188]	; (800fdec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d108      	bne.n	800fd46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	4313      	orrs	r3, r2
 800fd44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a20      	ldr	r2, [pc, #128]	; (800fde8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d022      	beq.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd72:	d01d      	beq.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a1d      	ldr	r2, [pc, #116]	; (800fdf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d018      	beq.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a1c      	ldr	r2, [pc, #112]	; (800fdf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d013      	beq.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a1a      	ldr	r2, [pc, #104]	; (800fdf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d00e      	beq.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a15      	ldr	r2, [pc, #84]	; (800fdec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d009      	beq.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a16      	ldr	r2, [pc, #88]	; (800fdfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d004      	beq.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a15      	ldr	r2, [pc, #84]	; (800fe00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d10c      	bne.n	800fdca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	68ba      	ldr	r2, [r7, #8]
 800fdc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2201      	movs	r2, #1
 800fdce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3714      	adds	r7, #20
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr
 800fde8:	40010000 	.word	0x40010000
 800fdec:	40010400 	.word	0x40010400
 800fdf0:	40000400 	.word	0x40000400
 800fdf4:	40000800 	.word	0x40000800
 800fdf8:	40000c00 	.word	0x40000c00
 800fdfc:	40001800 	.word	0x40001800
 800fe00:	40014000 	.word	0x40014000

0800fe04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d101      	bne.n	800fe20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	e065      	b.n	800feec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2201      	movs	r2, #1
 800fe24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	4313      	orrs	r3, r2
 800fe42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	695b      	ldr	r3, [r3, #20]
 800fe78:	4313      	orrs	r3, r2
 800fe7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	041b      	lsls	r3, r3, #16
 800fe96:	4313      	orrs	r3, r2
 800fe98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4a16      	ldr	r2, [pc, #88]	; (800fef8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d004      	beq.n	800feae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4a14      	ldr	r2, [pc, #80]	; (800fefc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d115      	bne.n	800feda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb8:	051b      	lsls	r3, r3, #20
 800feba:	4313      	orrs	r3, r2
 800febc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	69db      	ldr	r3, [r3, #28]
 800fec8:	4313      	orrs	r3, r2
 800feca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	6a1b      	ldr	r3, [r3, #32]
 800fed6:	4313      	orrs	r3, r2
 800fed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	68fa      	ldr	r2, [r7, #12]
 800fee0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3714      	adds	r7, #20
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	40010000 	.word	0x40010000
 800fefc:	40010400 	.word	0x40010400

0800ff00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff08:	bf00      	nop
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d101      	bne.n	800ff4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e042      	b.n	800ffd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d106      	bne.n	800ff66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7f3 fbf7 	bl	8003754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2224      	movs	r2, #36	; 0x24
 800ff6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f022 0201 	bic.w	r2, r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d002      	beq.n	800ff8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f001 fc42 	bl	8011810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fed7 	bl	8010d40 <UART_SetConfig>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d101      	bne.n	800ff9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e01b      	b.n	800ffd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	685a      	ldr	r2, [r3, #4]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	689a      	ldr	r2, [r3, #8]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f042 0201 	orr.w	r2, r2, #1
 800ffca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f001 fcc1 	bl	8011954 <UART_CheckIdleState>
 800ffd2:	4603      	mov	r3, r0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b08a      	sub	sp, #40	; 0x28
 800ffe0:	af02      	add	r7, sp, #8
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	603b      	str	r3, [r7, #0]
 800ffe8:	4613      	mov	r3, r2
 800ffea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fff2:	2b20      	cmp	r3, #32
 800fff4:	d17b      	bne.n	80100ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <HAL_UART_Transmit+0x26>
 800fffc:	88fb      	ldrh	r3, [r7, #6]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010002:	2301      	movs	r3, #1
 8010004:	e074      	b.n	80100f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2221      	movs	r2, #33	; 0x21
 8010012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010016:	f7f3 ff1b 	bl	8003e50 <HAL_GetTick>
 801001a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	88fa      	ldrh	r2, [r7, #6]
 8010020:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	88fa      	ldrh	r2, [r7, #6]
 8010028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010034:	d108      	bne.n	8010048 <HAL_UART_Transmit+0x6c>
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	691b      	ldr	r3, [r3, #16]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d104      	bne.n	8010048 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801003e:	2300      	movs	r3, #0
 8010040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	61bb      	str	r3, [r7, #24]
 8010046:	e003      	b.n	8010050 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801004c:	2300      	movs	r3, #0
 801004e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010050:	e030      	b.n	80100b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	2200      	movs	r2, #0
 801005a:	2180      	movs	r1, #128	; 0x80
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f001 fd23 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d005      	beq.n	8010074 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2220      	movs	r2, #32
 801006c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010070:	2303      	movs	r3, #3
 8010072:	e03d      	b.n	80100f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d10b      	bne.n	8010092 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	881b      	ldrh	r3, [r3, #0]
 801007e:	461a      	mov	r2, r3
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010088:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	3302      	adds	r3, #2
 801008e:	61bb      	str	r3, [r7, #24]
 8010090:	e007      	b.n	80100a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	781a      	ldrb	r2, [r3, #0]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	3301      	adds	r3, #1
 80100a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	3b01      	subs	r3, #1
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1c8      	bne.n	8010052 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	2200      	movs	r2, #0
 80100c8:	2140      	movs	r1, #64	; 0x40
 80100ca:	68f8      	ldr	r0, [r7, #12]
 80100cc:	f001 fcec 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d005      	beq.n	80100e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2220      	movs	r2, #32
 80100da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80100de:	2303      	movs	r3, #3
 80100e0:	e006      	b.n	80100f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2220      	movs	r2, #32
 80100e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80100ea:	2300      	movs	r3, #0
 80100ec:	e000      	b.n	80100f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80100ee:	2302      	movs	r3, #2
  }
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3720      	adds	r7, #32
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b08a      	sub	sp, #40	; 0x28
 80100fc:	af02      	add	r7, sp, #8
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	603b      	str	r3, [r7, #0]
 8010104:	4613      	mov	r3, r2
 8010106:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801010e:	2b20      	cmp	r3, #32
 8010110:	f040 80b5 	bne.w	801027e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <HAL_UART_Receive+0x28>
 801011a:	88fb      	ldrh	r3, [r7, #6]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	e0ad      	b.n	8010280 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2200      	movs	r2, #0
 8010128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2222      	movs	r2, #34	; 0x22
 8010130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2200      	movs	r2, #0
 8010138:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801013a:	f7f3 fe89 	bl	8003e50 <HAL_GetTick>
 801013e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	88fa      	ldrh	r2, [r7, #6]
 8010144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	88fa      	ldrh	r2, [r7, #6]
 801014c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010158:	d10e      	bne.n	8010178 <HAL_UART_Receive+0x80>
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d105      	bne.n	801016e <HAL_UART_Receive+0x76>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801016c:	e02d      	b.n	80101ca <HAL_UART_Receive+0xd2>
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	22ff      	movs	r2, #255	; 0xff
 8010172:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010176:	e028      	b.n	80101ca <HAL_UART_Receive+0xd2>
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d10d      	bne.n	801019c <HAL_UART_Receive+0xa4>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	691b      	ldr	r3, [r3, #16]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d104      	bne.n	8010192 <HAL_UART_Receive+0x9a>
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	22ff      	movs	r2, #255	; 0xff
 801018c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010190:	e01b      	b.n	80101ca <HAL_UART_Receive+0xd2>
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	227f      	movs	r2, #127	; 0x7f
 8010196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801019a:	e016      	b.n	80101ca <HAL_UART_Receive+0xd2>
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	689b      	ldr	r3, [r3, #8]
 80101a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101a4:	d10d      	bne.n	80101c2 <HAL_UART_Receive+0xca>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d104      	bne.n	80101b8 <HAL_UART_Receive+0xc0>
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	227f      	movs	r2, #127	; 0x7f
 80101b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101b6:	e008      	b.n	80101ca <HAL_UART_Receive+0xd2>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	223f      	movs	r2, #63	; 0x3f
 80101bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101c0:	e003      	b.n	80101ca <HAL_UART_Receive+0xd2>
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101da:	d108      	bne.n	80101ee <HAL_UART_Receive+0xf6>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d104      	bne.n	80101ee <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	61bb      	str	r3, [r7, #24]
 80101ec:	e003      	b.n	80101f6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80101f6:	e036      	b.n	8010266 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	2200      	movs	r2, #0
 8010200:	2120      	movs	r1, #32
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f001 fc50 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2220      	movs	r2, #32
 8010212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010216:	2303      	movs	r3, #3
 8010218:	e032      	b.n	8010280 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10c      	bne.n	801023a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010226:	b29a      	uxth	r2, r3
 8010228:	8a7b      	ldrh	r3, [r7, #18]
 801022a:	4013      	ands	r3, r2
 801022c:	b29a      	uxth	r2, r3
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	3302      	adds	r3, #2
 8010236:	61bb      	str	r3, [r7, #24]
 8010238:	e00c      	b.n	8010254 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010240:	b2da      	uxtb	r2, r3
 8010242:	8a7b      	ldrh	r3, [r7, #18]
 8010244:	b2db      	uxtb	r3, r3
 8010246:	4013      	ands	r3, r2
 8010248:	b2da      	uxtb	r2, r3
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	3301      	adds	r3, #1
 8010252:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801025a:	b29b      	uxth	r3, r3
 801025c:	3b01      	subs	r3, #1
 801025e:	b29a      	uxth	r2, r3
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801026c:	b29b      	uxth	r3, r3
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1c2      	bne.n	80101f8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2220      	movs	r2, #32
 8010276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801027a:	2300      	movs	r3, #0
 801027c:	e000      	b.n	8010280 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801027e:	2302      	movs	r3, #2
  }
}
 8010280:	4618      	mov	r0, r3
 8010282:	3720      	adds	r7, #32
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b08a      	sub	sp, #40	; 0x28
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	4613      	mov	r3, r2
 8010294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801029c:	2b20      	cmp	r3, #32
 801029e:	d137      	bne.n	8010310 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d002      	beq.n	80102ac <HAL_UART_Receive_IT+0x24>
 80102a6:	88fb      	ldrh	r3, [r7, #6]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d101      	bne.n	80102b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80102ac:	2301      	movs	r3, #1
 80102ae:	e030      	b.n	8010312 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2200      	movs	r2, #0
 80102b4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a18      	ldr	r2, [pc, #96]	; (801031c <HAL_UART_Receive_IT+0x94>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d01f      	beq.n	8010300 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d018      	beq.n	8010300 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	e853 3f00 	ldrex	r3, [r3]
 80102da:	613b      	str	r3, [r7, #16]
   return(result);
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80102e2:	627b      	str	r3, [r7, #36]	; 0x24
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	461a      	mov	r2, r3
 80102ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ec:	623b      	str	r3, [r7, #32]
 80102ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f0:	69f9      	ldr	r1, [r7, #28]
 80102f2:	6a3a      	ldr	r2, [r7, #32]
 80102f4:	e841 2300 	strex	r3, r2, [r1]
 80102f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1e6      	bne.n	80102ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010300:	88fb      	ldrh	r3, [r7, #6]
 8010302:	461a      	mov	r2, r3
 8010304:	68b9      	ldr	r1, [r7, #8]
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f001 fc3c 	bl	8011b84 <UART_Start_Receive_IT>
 801030c:	4603      	mov	r3, r0
 801030e:	e000      	b.n	8010312 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010310:	2302      	movs	r3, #2
  }
}
 8010312:	4618      	mov	r0, r3
 8010314:	3728      	adds	r7, #40	; 0x28
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	58000c00 	.word	0x58000c00

08010320 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b08a      	sub	sp, #40	; 0x28
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	4613      	mov	r3, r2
 801032c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010334:	2b20      	cmp	r3, #32
 8010336:	d167      	bne.n	8010408 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <HAL_UART_Transmit_DMA+0x24>
 801033e:	88fb      	ldrh	r3, [r7, #6]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d101      	bne.n	8010348 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010344:	2301      	movs	r3, #1
 8010346:	e060      	b.n	801040a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	88fa      	ldrh	r2, [r7, #6]
 8010352:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	88fa      	ldrh	r2, [r7, #6]
 801035a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2200      	movs	r2, #0
 8010362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2221      	movs	r2, #33	; 0x21
 801036a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010372:	2b00      	cmp	r3, #0
 8010374:	d028      	beq.n	80103c8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801037a:	4a26      	ldr	r2, [pc, #152]	; (8010414 <HAL_UART_Transmit_DMA+0xf4>)
 801037c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010382:	4a25      	ldr	r2, [pc, #148]	; (8010418 <HAL_UART_Transmit_DMA+0xf8>)
 8010384:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801038a:	4a24      	ldr	r2, [pc, #144]	; (801041c <HAL_UART_Transmit_DMA+0xfc>)
 801038c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010392:	2200      	movs	r2, #0
 8010394:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801039e:	4619      	mov	r1, r3
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	3328      	adds	r3, #40	; 0x28
 80103a6:	461a      	mov	r2, r3
 80103a8:	88fb      	ldrh	r3, [r7, #6]
 80103aa:	f7f6 f9d5 	bl	8006758 <HAL_DMA_Start_IT>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d009      	beq.n	80103c8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2210      	movs	r2, #16
 80103b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2220      	movs	r2, #32
 80103c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80103c4:	2301      	movs	r3, #1
 80103c6:	e020      	b.n	801040a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2240      	movs	r2, #64	; 0x40
 80103ce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	3308      	adds	r3, #8
 80103d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	e853 3f00 	ldrex	r3, [r3]
 80103de:	613b      	str	r3, [r7, #16]
   return(result);
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103e6:	627b      	str	r3, [r7, #36]	; 0x24
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3308      	adds	r3, #8
 80103ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103f0:	623a      	str	r2, [r7, #32]
 80103f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f4:	69f9      	ldr	r1, [r7, #28]
 80103f6:	6a3a      	ldr	r2, [r7, #32]
 80103f8:	e841 2300 	strex	r3, r2, [r1]
 80103fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d1e5      	bne.n	80103d0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010404:	2300      	movs	r3, #0
 8010406:	e000      	b.n	801040a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010408:	2302      	movs	r3, #2
  }
}
 801040a:	4618      	mov	r0, r3
 801040c:	3728      	adds	r7, #40	; 0x28
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	08011f19 	.word	0x08011f19
 8010418:	08011faf 	.word	0x08011faf
 801041c:	08011fcb 	.word	0x08011fcb

08010420 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b09a      	sub	sp, #104	; 0x68
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010430:	e853 3f00 	ldrex	r3, [r3]
 8010434:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801043c:	667b      	str	r3, [r7, #100]	; 0x64
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	461a      	mov	r2, r3
 8010444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010446:	657b      	str	r3, [r7, #84]	; 0x54
 8010448:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801044c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801044e:	e841 2300 	strex	r3, r2, [r1]
 8010452:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1e6      	bne.n	8010428 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	3308      	adds	r3, #8
 8010460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010464:	e853 3f00 	ldrex	r3, [r3]
 8010468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801046a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801046c:	4b46      	ldr	r3, [pc, #280]	; (8010588 <HAL_UART_AbortReceive+0x168>)
 801046e:	4013      	ands	r3, r2
 8010470:	663b      	str	r3, [r7, #96]	; 0x60
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	3308      	adds	r3, #8
 8010478:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801047a:	643a      	str	r2, [r7, #64]	; 0x40
 801047c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010482:	e841 2300 	strex	r3, r2, [r1]
 8010486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048a:	2b00      	cmp	r3, #0
 801048c:	d1e5      	bne.n	801045a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010492:	2b01      	cmp	r3, #1
 8010494:	d118      	bne.n	80104c8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801049c:	6a3b      	ldr	r3, [r7, #32]
 801049e:	e853 3f00 	ldrex	r3, [r3]
 80104a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	f023 0310 	bic.w	r3, r3, #16
 80104aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	461a      	mov	r2, r3
 80104b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104bc:	e841 2300 	strex	r3, r2, [r1]
 80104c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1e6      	bne.n	8010496 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104d2:	2b40      	cmp	r3, #64	; 0x40
 80104d4:	d13b      	bne.n	801054e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3308      	adds	r3, #8
 80104dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	e853 3f00 	ldrex	r3, [r3]
 80104e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	3308      	adds	r3, #8
 80104f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104f6:	61ba      	str	r2, [r7, #24]
 80104f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fa:	6979      	ldr	r1, [r7, #20]
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	e841 2300 	strex	r3, r2, [r1]
 8010502:	613b      	str	r3, [r7, #16]
   return(result);
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d1e5      	bne.n	80104d6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010510:	2b00      	cmp	r3, #0
 8010512:	d01c      	beq.n	801054e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801051a:	2200      	movs	r2, #0
 801051c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010524:	4618      	mov	r0, r3
 8010526:	f7f6 fb81 	bl	8006c2c <HAL_DMA_Abort>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00e      	beq.n	801054e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010536:	4618      	mov	r0, r3
 8010538:	f7f8 f806 	bl	8008548 <HAL_DMA_GetError>
 801053c:	4603      	mov	r3, r0
 801053e:	2b20      	cmp	r3, #32
 8010540:	d105      	bne.n	801054e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2210      	movs	r2, #16
 8010546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801054a:	2303      	movs	r3, #3
 801054c:	e017      	b.n	801057e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2200      	movs	r2, #0
 8010552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	220f      	movs	r2, #15
 801055c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	699a      	ldr	r2, [r3, #24]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f042 0208 	orr.w	r2, r2, #8
 801056c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2220      	movs	r2, #32
 8010572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801057c:	2300      	movs	r3, #0
}
 801057e:	4618      	mov	r0, r3
 8010580:	3768      	adds	r7, #104	; 0x68
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	effffffe 	.word	0xeffffffe

0801058c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b0ba      	sub	sp, #232	; 0xe8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	69db      	ldr	r3, [r3, #28]
 801059a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80105b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80105b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80105ba:	4013      	ands	r3, r2
 80105bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80105c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d11b      	bne.n	8010600 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80105c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105cc:	f003 0320 	and.w	r3, r3, #32
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d015      	beq.n	8010600 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80105d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105d8:	f003 0320 	and.w	r3, r3, #32
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d105      	bne.n	80105ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80105e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d009      	beq.n	8010600 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	f000 8377 	beq.w	8010ce4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	4798      	blx	r3
      }
      return;
 80105fe:	e371      	b.n	8010ce4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010604:	2b00      	cmp	r3, #0
 8010606:	f000 8123 	beq.w	8010850 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801060a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801060e:	4b8d      	ldr	r3, [pc, #564]	; (8010844 <HAL_UART_IRQHandler+0x2b8>)
 8010610:	4013      	ands	r3, r2
 8010612:	2b00      	cmp	r3, #0
 8010614:	d106      	bne.n	8010624 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010616:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801061a:	4b8b      	ldr	r3, [pc, #556]	; (8010848 <HAL_UART_IRQHandler+0x2bc>)
 801061c:	4013      	ands	r3, r2
 801061e:	2b00      	cmp	r3, #0
 8010620:	f000 8116 	beq.w	8010850 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010628:	f003 0301 	and.w	r3, r3, #1
 801062c:	2b00      	cmp	r3, #0
 801062e:	d011      	beq.n	8010654 <HAL_UART_IRQHandler+0xc8>
 8010630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00b      	beq.n	8010654 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2201      	movs	r2, #1
 8010642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801064a:	f043 0201 	orr.w	r2, r3, #1
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010658:	f003 0302 	and.w	r3, r3, #2
 801065c:	2b00      	cmp	r3, #0
 801065e:	d011      	beq.n	8010684 <HAL_UART_IRQHandler+0xf8>
 8010660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010664:	f003 0301 	and.w	r3, r3, #1
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00b      	beq.n	8010684 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2202      	movs	r2, #2
 8010672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801067a:	f043 0204 	orr.w	r2, r3, #4
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010688:	f003 0304 	and.w	r3, r3, #4
 801068c:	2b00      	cmp	r3, #0
 801068e:	d011      	beq.n	80106b4 <HAL_UART_IRQHandler+0x128>
 8010690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010694:	f003 0301 	and.w	r3, r3, #1
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00b      	beq.n	80106b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2204      	movs	r2, #4
 80106a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106aa:	f043 0202 	orr.w	r2, r3, #2
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80106b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106b8:	f003 0308 	and.w	r3, r3, #8
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d017      	beq.n	80106f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80106c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106c4:	f003 0320 	and.w	r3, r3, #32
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d105      	bne.n	80106d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80106cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80106d0:	4b5c      	ldr	r3, [pc, #368]	; (8010844 <HAL_UART_IRQHandler+0x2b8>)
 80106d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00b      	beq.n	80106f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	2208      	movs	r2, #8
 80106de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106e6:	f043 0208 	orr.w	r2, r3, #8
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80106f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d012      	beq.n	8010722 <HAL_UART_IRQHandler+0x196>
 80106fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00c      	beq.n	8010722 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010718:	f043 0220 	orr.w	r2, r3, #32
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010728:	2b00      	cmp	r3, #0
 801072a:	f000 82dd 	beq.w	8010ce8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801072e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010732:	f003 0320 	and.w	r3, r3, #32
 8010736:	2b00      	cmp	r3, #0
 8010738:	d013      	beq.n	8010762 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801073a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801073e:	f003 0320 	and.w	r3, r3, #32
 8010742:	2b00      	cmp	r3, #0
 8010744:	d105      	bne.n	8010752 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801074e:	2b00      	cmp	r3, #0
 8010750:	d007      	beq.n	8010762 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010756:	2b00      	cmp	r3, #0
 8010758:	d003      	beq.n	8010762 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010776:	2b40      	cmp	r3, #64	; 0x40
 8010778:	d005      	beq.n	8010786 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801077a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801077e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010782:	2b00      	cmp	r3, #0
 8010784:	d054      	beq.n	8010830 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f001 fb60 	bl	8011e4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	689b      	ldr	r3, [r3, #8]
 8010792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010796:	2b40      	cmp	r3, #64	; 0x40
 8010798:	d146      	bne.n	8010828 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3308      	adds	r3, #8
 80107a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80107a8:	e853 3f00 	ldrex	r3, [r3]
 80107ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80107b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	3308      	adds	r3, #8
 80107c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80107c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80107ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80107d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80107d6:	e841 2300 	strex	r3, r2, [r1]
 80107da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80107de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1d9      	bne.n	801079a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d017      	beq.n	8010820 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f6:	4a15      	ldr	r2, [pc, #84]	; (801084c <HAL_UART_IRQHandler+0x2c0>)
 80107f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010800:	4618      	mov	r0, r3
 8010802:	f7f6 fd31 	bl	8007268 <HAL_DMA_Abort_IT>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d019      	beq.n	8010840 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801081a:	4610      	mov	r0, r2
 801081c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801081e:	e00f      	b.n	8010840 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fa77 	bl	8010d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010826:	e00b      	b.n	8010840 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 fa73 	bl	8010d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801082e:	e007      	b.n	8010840 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 fa6f 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801083e:	e253      	b.n	8010ce8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010840:	bf00      	nop
    return;
 8010842:	e251      	b.n	8010ce8 <HAL_UART_IRQHandler+0x75c>
 8010844:	10000001 	.word	0x10000001
 8010848:	04000120 	.word	0x04000120
 801084c:	0801204b 	.word	0x0801204b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010854:	2b01      	cmp	r3, #1
 8010856:	f040 81e7 	bne.w	8010c28 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801085a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801085e:	f003 0310 	and.w	r3, r3, #16
 8010862:	2b00      	cmp	r3, #0
 8010864:	f000 81e0 	beq.w	8010c28 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801086c:	f003 0310 	and.w	r3, r3, #16
 8010870:	2b00      	cmp	r3, #0
 8010872:	f000 81d9 	beq.w	8010c28 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2210      	movs	r2, #16
 801087c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010888:	2b40      	cmp	r3, #64	; 0x40
 801088a:	f040 8151 	bne.w	8010b30 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a96      	ldr	r2, [pc, #600]	; (8010af0 <HAL_UART_IRQHandler+0x564>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d068      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a93      	ldr	r2, [pc, #588]	; (8010af4 <HAL_UART_IRQHandler+0x568>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d061      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a91      	ldr	r2, [pc, #580]	; (8010af8 <HAL_UART_IRQHandler+0x56c>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d05a      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a8e      	ldr	r2, [pc, #568]	; (8010afc <HAL_UART_IRQHandler+0x570>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d053      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a8c      	ldr	r2, [pc, #560]	; (8010b00 <HAL_UART_IRQHandler+0x574>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d04c      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a89      	ldr	r2, [pc, #548]	; (8010b04 <HAL_UART_IRQHandler+0x578>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d045      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a87      	ldr	r2, [pc, #540]	; (8010b08 <HAL_UART_IRQHandler+0x57c>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d03e      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a84      	ldr	r2, [pc, #528]	; (8010b0c <HAL_UART_IRQHandler+0x580>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d037      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4a82      	ldr	r2, [pc, #520]	; (8010b10 <HAL_UART_IRQHandler+0x584>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d030      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4a7f      	ldr	r2, [pc, #508]	; (8010b14 <HAL_UART_IRQHandler+0x588>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d029      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4a7d      	ldr	r2, [pc, #500]	; (8010b18 <HAL_UART_IRQHandler+0x58c>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d022      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a7a      	ldr	r2, [pc, #488]	; (8010b1c <HAL_UART_IRQHandler+0x590>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d01b      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4a78      	ldr	r2, [pc, #480]	; (8010b20 <HAL_UART_IRQHandler+0x594>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d014      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a75      	ldr	r2, [pc, #468]	; (8010b24 <HAL_UART_IRQHandler+0x598>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d00d      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4a73      	ldr	r2, [pc, #460]	; (8010b28 <HAL_UART_IRQHandler+0x59c>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d006      	beq.n	801096e <HAL_UART_IRQHandler+0x3e2>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	4a70      	ldr	r2, [pc, #448]	; (8010b2c <HAL_UART_IRQHandler+0x5a0>)
 801096a:	4293      	cmp	r3, r2
 801096c:	d106      	bne.n	801097c <HAL_UART_IRQHandler+0x3f0>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	b29b      	uxth	r3, r3
 801097a:	e005      	b.n	8010988 <HAL_UART_IRQHandler+0x3fc>
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	b29b      	uxth	r3, r3
 8010988:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801098c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010990:	2b00      	cmp	r3, #0
 8010992:	f000 81ab 	beq.w	8010cec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801099c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80109a0:	429a      	cmp	r2, r3
 80109a2:	f080 81a3 	bcs.w	8010cec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80109ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109b6:	69db      	ldr	r3, [r3, #28]
 80109b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109bc:	f000 8087 	beq.w	8010ace <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80109cc:	e853 3f00 	ldrex	r3, [r3]
 80109d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80109d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80109d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	461a      	mov	r2, r3
 80109e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80109f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109fa:	e841 2300 	strex	r3, r2, [r1]
 80109fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1da      	bne.n	80109c0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	3308      	adds	r3, #8
 8010a10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a14:	e853 3f00 	ldrex	r3, [r3]
 8010a18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a1c:	f023 0301 	bic.w	r3, r3, #1
 8010a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	3308      	adds	r3, #8
 8010a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010a2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010a32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a3a:	e841 2300 	strex	r3, r2, [r1]
 8010a3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1e1      	bne.n	8010a0a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3308      	adds	r3, #8
 8010a4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a50:	e853 3f00 	ldrex	r3, [r3]
 8010a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	3308      	adds	r3, #8
 8010a66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010a6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a72:	e841 2300 	strex	r3, r2, [r1]
 8010a76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1e3      	bne.n	8010a46 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2220      	movs	r2, #32
 8010a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a94:	e853 3f00 	ldrex	r3, [r3]
 8010a98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a9c:	f023 0310 	bic.w	r3, r3, #16
 8010aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8010ab0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ab6:	e841 2300 	strex	r3, r2, [r1]
 8010aba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1e4      	bne.n	8010a8c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f6 f8af 	bl	8006c2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2202      	movs	r2, #2
 8010ad2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	1ad3      	subs	r3, r2, r3
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f91d 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010aee:	e0fd      	b.n	8010cec <HAL_UART_IRQHandler+0x760>
 8010af0:	40020010 	.word	0x40020010
 8010af4:	40020028 	.word	0x40020028
 8010af8:	40020040 	.word	0x40020040
 8010afc:	40020058 	.word	0x40020058
 8010b00:	40020070 	.word	0x40020070
 8010b04:	40020088 	.word	0x40020088
 8010b08:	400200a0 	.word	0x400200a0
 8010b0c:	400200b8 	.word	0x400200b8
 8010b10:	40020410 	.word	0x40020410
 8010b14:	40020428 	.word	0x40020428
 8010b18:	40020440 	.word	0x40020440
 8010b1c:	40020458 	.word	0x40020458
 8010b20:	40020470 	.word	0x40020470
 8010b24:	40020488 	.word	0x40020488
 8010b28:	400204a0 	.word	0x400204a0
 8010b2c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	1ad3      	subs	r3, r2, r3
 8010b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f000 80cf 	beq.w	8010cf0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	f000 80ca 	beq.w	8010cf0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b64:	e853 3f00 	ldrex	r3, [r3]
 8010b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8010b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b86:	e841 2300 	strex	r3, r2, [r1]
 8010b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1e4      	bne.n	8010b5c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	3308      	adds	r3, #8
 8010b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9c:	e853 3f00 	ldrex	r3, [r3]
 8010ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ba2:	6a3a      	ldr	r2, [r7, #32]
 8010ba4:	4b55      	ldr	r3, [pc, #340]	; (8010cfc <HAL_UART_IRQHandler+0x770>)
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3308      	adds	r3, #8
 8010bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8010bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bbe:	e841 2300 	strex	r3, r2, [r1]
 8010bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1e3      	bne.n	8010b92 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2220      	movs	r2, #32
 8010bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	e853 3f00 	ldrex	r3, [r3]
 8010bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f023 0310 	bic.w	r3, r3, #16
 8010bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010c00:	61fb      	str	r3, [r7, #28]
 8010c02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c04:	69b9      	ldr	r1, [r7, #24]
 8010c06:	69fa      	ldr	r2, [r7, #28]
 8010c08:	e841 2300 	strex	r3, r2, [r1]
 8010c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d1e4      	bne.n	8010bde <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2202      	movs	r2, #2
 8010c18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010c1e:	4619      	mov	r1, r3
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 f881 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c26:	e063      	b.n	8010cf0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00e      	beq.n	8010c52 <HAL_UART_IRQHandler+0x6c6>
 8010c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d008      	beq.n	8010c52 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f001 ff5a 	bl	8012b04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c50:	e051      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d014      	beq.n	8010c88 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d105      	bne.n	8010c76 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d008      	beq.n	8010c88 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d03a      	beq.n	8010cf4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	4798      	blx	r3
    }
    return;
 8010c86:	e035      	b.n	8010cf4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d009      	beq.n	8010ca8 <HAL_UART_IRQHandler+0x71c>
 8010c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d003      	beq.n	8010ca8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f001 f9e8 	bl	8012076 <UART_EndTransmit_IT>
    return;
 8010ca6:	e026      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d009      	beq.n	8010cc8 <HAL_UART_IRQHandler+0x73c>
 8010cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d003      	beq.n	8010cc8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f001 ff33 	bl	8012b2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010cc6:	e016      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d010      	beq.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
 8010cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	da0c      	bge.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f001 ff1b 	bl	8012b18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ce2:	e008      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010ce4:	bf00      	nop
 8010ce6:	e006      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010ce8:	bf00      	nop
 8010cea:	e004      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010cec:	bf00      	nop
 8010cee:	e002      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010cf0:	bf00      	nop
 8010cf2:	e000      	b.n	8010cf6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010cf4:	bf00      	nop
  }
}
 8010cf6:	37e8      	adds	r7, #232	; 0xe8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	effffffe 	.word	0xeffffffe

08010d00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010d08:	bf00      	nop
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010d34:	bf00      	nop
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d44:	b092      	sub	sp, #72	; 0x48
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	689a      	ldr	r2, [r3, #8]
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	691b      	ldr	r3, [r3, #16]
 8010d58:	431a      	orrs	r2, r3
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	695b      	ldr	r3, [r3, #20]
 8010d5e:	431a      	orrs	r2, r3
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	69db      	ldr	r3, [r3, #28]
 8010d64:	4313      	orrs	r3, r2
 8010d66:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	4bbe      	ldr	r3, [pc, #760]	; (8011068 <UART_SetConfig+0x328>)
 8010d70:	4013      	ands	r3, r2
 8010d72:	697a      	ldr	r2, [r7, #20]
 8010d74:	6812      	ldr	r2, [r2, #0]
 8010d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d78:	430b      	orrs	r3, r1
 8010d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	430a      	orrs	r2, r1
 8010d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	699b      	ldr	r3, [r3, #24]
 8010d96:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4ab3      	ldr	r2, [pc, #716]	; (801106c <UART_SetConfig+0x32c>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d004      	beq.n	8010dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	6a1b      	ldr	r3, [r3, #32]
 8010da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010da8:	4313      	orrs	r3, r2
 8010daa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	689a      	ldr	r2, [r3, #8]
 8010db2:	4baf      	ldr	r3, [pc, #700]	; (8011070 <UART_SetConfig+0x330>)
 8010db4:	4013      	ands	r3, r2
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	6812      	ldr	r2, [r2, #0]
 8010dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dbc:	430b      	orrs	r3, r1
 8010dbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc6:	f023 010f 	bic.w	r1, r3, #15
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	430a      	orrs	r2, r1
 8010dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4aa6      	ldr	r2, [pc, #664]	; (8011074 <UART_SetConfig+0x334>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d177      	bne.n	8010ed0 <UART_SetConfig+0x190>
 8010de0:	4ba5      	ldr	r3, [pc, #660]	; (8011078 <UART_SetConfig+0x338>)
 8010de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010de8:	2b28      	cmp	r3, #40	; 0x28
 8010dea:	d86d      	bhi.n	8010ec8 <UART_SetConfig+0x188>
 8010dec:	a201      	add	r2, pc, #4	; (adr r2, 8010df4 <UART_SetConfig+0xb4>)
 8010dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df2:	bf00      	nop
 8010df4:	08010e99 	.word	0x08010e99
 8010df8:	08010ec9 	.word	0x08010ec9
 8010dfc:	08010ec9 	.word	0x08010ec9
 8010e00:	08010ec9 	.word	0x08010ec9
 8010e04:	08010ec9 	.word	0x08010ec9
 8010e08:	08010ec9 	.word	0x08010ec9
 8010e0c:	08010ec9 	.word	0x08010ec9
 8010e10:	08010ec9 	.word	0x08010ec9
 8010e14:	08010ea1 	.word	0x08010ea1
 8010e18:	08010ec9 	.word	0x08010ec9
 8010e1c:	08010ec9 	.word	0x08010ec9
 8010e20:	08010ec9 	.word	0x08010ec9
 8010e24:	08010ec9 	.word	0x08010ec9
 8010e28:	08010ec9 	.word	0x08010ec9
 8010e2c:	08010ec9 	.word	0x08010ec9
 8010e30:	08010ec9 	.word	0x08010ec9
 8010e34:	08010ea9 	.word	0x08010ea9
 8010e38:	08010ec9 	.word	0x08010ec9
 8010e3c:	08010ec9 	.word	0x08010ec9
 8010e40:	08010ec9 	.word	0x08010ec9
 8010e44:	08010ec9 	.word	0x08010ec9
 8010e48:	08010ec9 	.word	0x08010ec9
 8010e4c:	08010ec9 	.word	0x08010ec9
 8010e50:	08010ec9 	.word	0x08010ec9
 8010e54:	08010eb1 	.word	0x08010eb1
 8010e58:	08010ec9 	.word	0x08010ec9
 8010e5c:	08010ec9 	.word	0x08010ec9
 8010e60:	08010ec9 	.word	0x08010ec9
 8010e64:	08010ec9 	.word	0x08010ec9
 8010e68:	08010ec9 	.word	0x08010ec9
 8010e6c:	08010ec9 	.word	0x08010ec9
 8010e70:	08010ec9 	.word	0x08010ec9
 8010e74:	08010eb9 	.word	0x08010eb9
 8010e78:	08010ec9 	.word	0x08010ec9
 8010e7c:	08010ec9 	.word	0x08010ec9
 8010e80:	08010ec9 	.word	0x08010ec9
 8010e84:	08010ec9 	.word	0x08010ec9
 8010e88:	08010ec9 	.word	0x08010ec9
 8010e8c:	08010ec9 	.word	0x08010ec9
 8010e90:	08010ec9 	.word	0x08010ec9
 8010e94:	08010ec1 	.word	0x08010ec1
 8010e98:	2301      	movs	r3, #1
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e222      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010ea0:	2304      	movs	r3, #4
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e21e      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010ea8:	2308      	movs	r3, #8
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e21a      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010eb0:	2310      	movs	r3, #16
 8010eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb6:	e216      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010eb8:	2320      	movs	r3, #32
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e212      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010ec0:	2340      	movs	r3, #64	; 0x40
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e20e      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010ec8:	2380      	movs	r3, #128	; 0x80
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e20a      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4a69      	ldr	r2, [pc, #420]	; (801107c <UART_SetConfig+0x33c>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d130      	bne.n	8010f3c <UART_SetConfig+0x1fc>
 8010eda:	4b67      	ldr	r3, [pc, #412]	; (8011078 <UART_SetConfig+0x338>)
 8010edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ede:	f003 0307 	and.w	r3, r3, #7
 8010ee2:	2b05      	cmp	r3, #5
 8010ee4:	d826      	bhi.n	8010f34 <UART_SetConfig+0x1f4>
 8010ee6:	a201      	add	r2, pc, #4	; (adr r2, 8010eec <UART_SetConfig+0x1ac>)
 8010ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eec:	08010f05 	.word	0x08010f05
 8010ef0:	08010f0d 	.word	0x08010f0d
 8010ef4:	08010f15 	.word	0x08010f15
 8010ef8:	08010f1d 	.word	0x08010f1d
 8010efc:	08010f25 	.word	0x08010f25
 8010f00:	08010f2d 	.word	0x08010f2d
 8010f04:	2300      	movs	r3, #0
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0a:	e1ec      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f0c:	2304      	movs	r3, #4
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f12:	e1e8      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f14:	2308      	movs	r3, #8
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1a:	e1e4      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f1c:	2310      	movs	r3, #16
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f22:	e1e0      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f24:	2320      	movs	r3, #32
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2a:	e1dc      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f2c:	2340      	movs	r3, #64	; 0x40
 8010f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f32:	e1d8      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f34:	2380      	movs	r3, #128	; 0x80
 8010f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3a:	e1d4      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a4f      	ldr	r2, [pc, #316]	; (8011080 <UART_SetConfig+0x340>)
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d130      	bne.n	8010fa8 <UART_SetConfig+0x268>
 8010f46:	4b4c      	ldr	r3, [pc, #304]	; (8011078 <UART_SetConfig+0x338>)
 8010f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f4a:	f003 0307 	and.w	r3, r3, #7
 8010f4e:	2b05      	cmp	r3, #5
 8010f50:	d826      	bhi.n	8010fa0 <UART_SetConfig+0x260>
 8010f52:	a201      	add	r2, pc, #4	; (adr r2, 8010f58 <UART_SetConfig+0x218>)
 8010f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f58:	08010f71 	.word	0x08010f71
 8010f5c:	08010f79 	.word	0x08010f79
 8010f60:	08010f81 	.word	0x08010f81
 8010f64:	08010f89 	.word	0x08010f89
 8010f68:	08010f91 	.word	0x08010f91
 8010f6c:	08010f99 	.word	0x08010f99
 8010f70:	2300      	movs	r3, #0
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f76:	e1b6      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f78:	2304      	movs	r3, #4
 8010f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7e:	e1b2      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f80:	2308      	movs	r3, #8
 8010f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f86:	e1ae      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f88:	2310      	movs	r3, #16
 8010f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8e:	e1aa      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f90:	2320      	movs	r3, #32
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f96:	e1a6      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010f98:	2340      	movs	r3, #64	; 0x40
 8010f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9e:	e1a2      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010fa0:	2380      	movs	r3, #128	; 0x80
 8010fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa6:	e19e      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4a35      	ldr	r2, [pc, #212]	; (8011084 <UART_SetConfig+0x344>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d130      	bne.n	8011014 <UART_SetConfig+0x2d4>
 8010fb2:	4b31      	ldr	r3, [pc, #196]	; (8011078 <UART_SetConfig+0x338>)
 8010fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fb6:	f003 0307 	and.w	r3, r3, #7
 8010fba:	2b05      	cmp	r3, #5
 8010fbc:	d826      	bhi.n	801100c <UART_SetConfig+0x2cc>
 8010fbe:	a201      	add	r2, pc, #4	; (adr r2, 8010fc4 <UART_SetConfig+0x284>)
 8010fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc4:	08010fdd 	.word	0x08010fdd
 8010fc8:	08010fe5 	.word	0x08010fe5
 8010fcc:	08010fed 	.word	0x08010fed
 8010fd0:	08010ff5 	.word	0x08010ff5
 8010fd4:	08010ffd 	.word	0x08010ffd
 8010fd8:	08011005 	.word	0x08011005
 8010fdc:	2300      	movs	r3, #0
 8010fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe2:	e180      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010fe4:	2304      	movs	r3, #4
 8010fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fea:	e17c      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010fec:	2308      	movs	r3, #8
 8010fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff2:	e178      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010ff4:	2310      	movs	r3, #16
 8010ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffa:	e174      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8010ffc:	2320      	movs	r3, #32
 8010ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011002:	e170      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011004:	2340      	movs	r3, #64	; 0x40
 8011006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100a:	e16c      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801100c:	2380      	movs	r3, #128	; 0x80
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011012:	e168      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4a1b      	ldr	r2, [pc, #108]	; (8011088 <UART_SetConfig+0x348>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d142      	bne.n	80110a4 <UART_SetConfig+0x364>
 801101e:	4b16      	ldr	r3, [pc, #88]	; (8011078 <UART_SetConfig+0x338>)
 8011020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011022:	f003 0307 	and.w	r3, r3, #7
 8011026:	2b05      	cmp	r3, #5
 8011028:	d838      	bhi.n	801109c <UART_SetConfig+0x35c>
 801102a:	a201      	add	r2, pc, #4	; (adr r2, 8011030 <UART_SetConfig+0x2f0>)
 801102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011030:	08011049 	.word	0x08011049
 8011034:	08011051 	.word	0x08011051
 8011038:	08011059 	.word	0x08011059
 801103c:	08011061 	.word	0x08011061
 8011040:	0801108d 	.word	0x0801108d
 8011044:	08011095 	.word	0x08011095
 8011048:	2300      	movs	r3, #0
 801104a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104e:	e14a      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011050:	2304      	movs	r3, #4
 8011052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011056:	e146      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011058:	2308      	movs	r3, #8
 801105a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105e:	e142      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011060:	2310      	movs	r3, #16
 8011062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011066:	e13e      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011068:	cfff69f3 	.word	0xcfff69f3
 801106c:	58000c00 	.word	0x58000c00
 8011070:	11fff4ff 	.word	0x11fff4ff
 8011074:	40011000 	.word	0x40011000
 8011078:	58024400 	.word	0x58024400
 801107c:	40004400 	.word	0x40004400
 8011080:	40004800 	.word	0x40004800
 8011084:	40004c00 	.word	0x40004c00
 8011088:	40005000 	.word	0x40005000
 801108c:	2320      	movs	r3, #32
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e128      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011094:	2340      	movs	r3, #64	; 0x40
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109a:	e124      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801109c:	2380      	movs	r3, #128	; 0x80
 801109e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a2:	e120      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4acb      	ldr	r2, [pc, #812]	; (80113d8 <UART_SetConfig+0x698>)
 80110aa:	4293      	cmp	r3, r2
 80110ac:	d176      	bne.n	801119c <UART_SetConfig+0x45c>
 80110ae:	4bcb      	ldr	r3, [pc, #812]	; (80113dc <UART_SetConfig+0x69c>)
 80110b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110b6:	2b28      	cmp	r3, #40	; 0x28
 80110b8:	d86c      	bhi.n	8011194 <UART_SetConfig+0x454>
 80110ba:	a201      	add	r2, pc, #4	; (adr r2, 80110c0 <UART_SetConfig+0x380>)
 80110bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c0:	08011165 	.word	0x08011165
 80110c4:	08011195 	.word	0x08011195
 80110c8:	08011195 	.word	0x08011195
 80110cc:	08011195 	.word	0x08011195
 80110d0:	08011195 	.word	0x08011195
 80110d4:	08011195 	.word	0x08011195
 80110d8:	08011195 	.word	0x08011195
 80110dc:	08011195 	.word	0x08011195
 80110e0:	0801116d 	.word	0x0801116d
 80110e4:	08011195 	.word	0x08011195
 80110e8:	08011195 	.word	0x08011195
 80110ec:	08011195 	.word	0x08011195
 80110f0:	08011195 	.word	0x08011195
 80110f4:	08011195 	.word	0x08011195
 80110f8:	08011195 	.word	0x08011195
 80110fc:	08011195 	.word	0x08011195
 8011100:	08011175 	.word	0x08011175
 8011104:	08011195 	.word	0x08011195
 8011108:	08011195 	.word	0x08011195
 801110c:	08011195 	.word	0x08011195
 8011110:	08011195 	.word	0x08011195
 8011114:	08011195 	.word	0x08011195
 8011118:	08011195 	.word	0x08011195
 801111c:	08011195 	.word	0x08011195
 8011120:	0801117d 	.word	0x0801117d
 8011124:	08011195 	.word	0x08011195
 8011128:	08011195 	.word	0x08011195
 801112c:	08011195 	.word	0x08011195
 8011130:	08011195 	.word	0x08011195
 8011134:	08011195 	.word	0x08011195
 8011138:	08011195 	.word	0x08011195
 801113c:	08011195 	.word	0x08011195
 8011140:	08011185 	.word	0x08011185
 8011144:	08011195 	.word	0x08011195
 8011148:	08011195 	.word	0x08011195
 801114c:	08011195 	.word	0x08011195
 8011150:	08011195 	.word	0x08011195
 8011154:	08011195 	.word	0x08011195
 8011158:	08011195 	.word	0x08011195
 801115c:	08011195 	.word	0x08011195
 8011160:	0801118d 	.word	0x0801118d
 8011164:	2301      	movs	r3, #1
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116a:	e0bc      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801116c:	2304      	movs	r3, #4
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011172:	e0b8      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011174:	2308      	movs	r3, #8
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117a:	e0b4      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801117c:	2310      	movs	r3, #16
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e0b0      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011184:	2320      	movs	r3, #32
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e0ac      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801118c:	2340      	movs	r3, #64	; 0x40
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e0a8      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011194:	2380      	movs	r3, #128	; 0x80
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e0a4      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4a8f      	ldr	r2, [pc, #572]	; (80113e0 <UART_SetConfig+0x6a0>)
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d130      	bne.n	8011208 <UART_SetConfig+0x4c8>
 80111a6:	4b8d      	ldr	r3, [pc, #564]	; (80113dc <UART_SetConfig+0x69c>)
 80111a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111aa:	f003 0307 	and.w	r3, r3, #7
 80111ae:	2b05      	cmp	r3, #5
 80111b0:	d826      	bhi.n	8011200 <UART_SetConfig+0x4c0>
 80111b2:	a201      	add	r2, pc, #4	; (adr r2, 80111b8 <UART_SetConfig+0x478>)
 80111b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111b8:	080111d1 	.word	0x080111d1
 80111bc:	080111d9 	.word	0x080111d9
 80111c0:	080111e1 	.word	0x080111e1
 80111c4:	080111e9 	.word	0x080111e9
 80111c8:	080111f1 	.word	0x080111f1
 80111cc:	080111f9 	.word	0x080111f9
 80111d0:	2300      	movs	r3, #0
 80111d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d6:	e086      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80111d8:	2304      	movs	r3, #4
 80111da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111de:	e082      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80111e0:	2308      	movs	r3, #8
 80111e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e6:	e07e      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80111e8:	2310      	movs	r3, #16
 80111ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ee:	e07a      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80111f0:	2320      	movs	r3, #32
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e076      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80111f8:	2340      	movs	r3, #64	; 0x40
 80111fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fe:	e072      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011200:	2380      	movs	r3, #128	; 0x80
 8011202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011206:	e06e      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	4a75      	ldr	r2, [pc, #468]	; (80113e4 <UART_SetConfig+0x6a4>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d130      	bne.n	8011274 <UART_SetConfig+0x534>
 8011212:	4b72      	ldr	r3, [pc, #456]	; (80113dc <UART_SetConfig+0x69c>)
 8011214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011216:	f003 0307 	and.w	r3, r3, #7
 801121a:	2b05      	cmp	r3, #5
 801121c:	d826      	bhi.n	801126c <UART_SetConfig+0x52c>
 801121e:	a201      	add	r2, pc, #4	; (adr r2, 8011224 <UART_SetConfig+0x4e4>)
 8011220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011224:	0801123d 	.word	0x0801123d
 8011228:	08011245 	.word	0x08011245
 801122c:	0801124d 	.word	0x0801124d
 8011230:	08011255 	.word	0x08011255
 8011234:	0801125d 	.word	0x0801125d
 8011238:	08011265 	.word	0x08011265
 801123c:	2300      	movs	r3, #0
 801123e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011242:	e050      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011244:	2304      	movs	r3, #4
 8011246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124a:	e04c      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801124c:	2308      	movs	r3, #8
 801124e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011252:	e048      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011254:	2310      	movs	r3, #16
 8011256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125a:	e044      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801125c:	2320      	movs	r3, #32
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e040      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011264:	2340      	movs	r3, #64	; 0x40
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e03c      	b.n	80112e6 <UART_SetConfig+0x5a6>
 801126c:	2380      	movs	r3, #128	; 0x80
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e038      	b.n	80112e6 <UART_SetConfig+0x5a6>
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a5b      	ldr	r2, [pc, #364]	; (80113e8 <UART_SetConfig+0x6a8>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d130      	bne.n	80112e0 <UART_SetConfig+0x5a0>
 801127e:	4b57      	ldr	r3, [pc, #348]	; (80113dc <UART_SetConfig+0x69c>)
 8011280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011282:	f003 0307 	and.w	r3, r3, #7
 8011286:	2b05      	cmp	r3, #5
 8011288:	d826      	bhi.n	80112d8 <UART_SetConfig+0x598>
 801128a:	a201      	add	r2, pc, #4	; (adr r2, 8011290 <UART_SetConfig+0x550>)
 801128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011290:	080112a9 	.word	0x080112a9
 8011294:	080112b1 	.word	0x080112b1
 8011298:	080112b9 	.word	0x080112b9
 801129c:	080112c1 	.word	0x080112c1
 80112a0:	080112c9 	.word	0x080112c9
 80112a4:	080112d1 	.word	0x080112d1
 80112a8:	2302      	movs	r3, #2
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ae:	e01a      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80112b0:	2304      	movs	r3, #4
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b6:	e016      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80112b8:	2308      	movs	r3, #8
 80112ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112be:	e012      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80112c0:	2310      	movs	r3, #16
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c6:	e00e      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80112c8:	2320      	movs	r3, #32
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e00a      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80112d0:	2340      	movs	r3, #64	; 0x40
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e006      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80112d8:	2380      	movs	r3, #128	; 0x80
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e002      	b.n	80112e6 <UART_SetConfig+0x5a6>
 80112e0:	2380      	movs	r3, #128	; 0x80
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a3f      	ldr	r2, [pc, #252]	; (80113e8 <UART_SetConfig+0x6a8>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	f040 80f8 	bne.w	80114e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80112f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112f6:	2b20      	cmp	r3, #32
 80112f8:	dc46      	bgt.n	8011388 <UART_SetConfig+0x648>
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	f2c0 8082 	blt.w	8011404 <UART_SetConfig+0x6c4>
 8011300:	3b02      	subs	r3, #2
 8011302:	2b1e      	cmp	r3, #30
 8011304:	d87e      	bhi.n	8011404 <UART_SetConfig+0x6c4>
 8011306:	a201      	add	r2, pc, #4	; (adr r2, 801130c <UART_SetConfig+0x5cc>)
 8011308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801130c:	0801138f 	.word	0x0801138f
 8011310:	08011405 	.word	0x08011405
 8011314:	08011397 	.word	0x08011397
 8011318:	08011405 	.word	0x08011405
 801131c:	08011405 	.word	0x08011405
 8011320:	08011405 	.word	0x08011405
 8011324:	080113a7 	.word	0x080113a7
 8011328:	08011405 	.word	0x08011405
 801132c:	08011405 	.word	0x08011405
 8011330:	08011405 	.word	0x08011405
 8011334:	08011405 	.word	0x08011405
 8011338:	08011405 	.word	0x08011405
 801133c:	08011405 	.word	0x08011405
 8011340:	08011405 	.word	0x08011405
 8011344:	080113b7 	.word	0x080113b7
 8011348:	08011405 	.word	0x08011405
 801134c:	08011405 	.word	0x08011405
 8011350:	08011405 	.word	0x08011405
 8011354:	08011405 	.word	0x08011405
 8011358:	08011405 	.word	0x08011405
 801135c:	08011405 	.word	0x08011405
 8011360:	08011405 	.word	0x08011405
 8011364:	08011405 	.word	0x08011405
 8011368:	08011405 	.word	0x08011405
 801136c:	08011405 	.word	0x08011405
 8011370:	08011405 	.word	0x08011405
 8011374:	08011405 	.word	0x08011405
 8011378:	08011405 	.word	0x08011405
 801137c:	08011405 	.word	0x08011405
 8011380:	08011405 	.word	0x08011405
 8011384:	080113f7 	.word	0x080113f7
 8011388:	2b40      	cmp	r3, #64	; 0x40
 801138a:	d037      	beq.n	80113fc <UART_SetConfig+0x6bc>
 801138c:	e03a      	b.n	8011404 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801138e:	f7fb fce5 	bl	800cd5c <HAL_RCCEx_GetD3PCLK1Freq>
 8011392:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011394:	e03c      	b.n	8011410 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801139a:	4618      	mov	r0, r3
 801139c:	f7fb fcf4 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113a4:	e034      	b.n	8011410 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113a6:	f107 0318 	add.w	r3, r7, #24
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fb fe40 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113b4:	e02c      	b.n	8011410 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113b6:	4b09      	ldr	r3, [pc, #36]	; (80113dc <UART_SetConfig+0x69c>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f003 0320 	and.w	r3, r3, #32
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d016      	beq.n	80113f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113c2:	4b06      	ldr	r3, [pc, #24]	; (80113dc <UART_SetConfig+0x69c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	08db      	lsrs	r3, r3, #3
 80113c8:	f003 0303 	and.w	r3, r3, #3
 80113cc:	4a07      	ldr	r2, [pc, #28]	; (80113ec <UART_SetConfig+0x6ac>)
 80113ce:	fa22 f303 	lsr.w	r3, r2, r3
 80113d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113d4:	e01c      	b.n	8011410 <UART_SetConfig+0x6d0>
 80113d6:	bf00      	nop
 80113d8:	40011400 	.word	0x40011400
 80113dc:	58024400 	.word	0x58024400
 80113e0:	40007800 	.word	0x40007800
 80113e4:	40007c00 	.word	0x40007c00
 80113e8:	58000c00 	.word	0x58000c00
 80113ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80113f0:	4b9d      	ldr	r3, [pc, #628]	; (8011668 <UART_SetConfig+0x928>)
 80113f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f4:	e00c      	b.n	8011410 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113f6:	4b9d      	ldr	r3, [pc, #628]	; (801166c <UART_SetConfig+0x92c>)
 80113f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113fa:	e009      	b.n	8011410 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011402:	e005      	b.n	8011410 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011404:	2300      	movs	r3, #0
 8011406:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011408:	2301      	movs	r3, #1
 801140a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801140e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011412:	2b00      	cmp	r3, #0
 8011414:	f000 81de 	beq.w	80117d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801141c:	4a94      	ldr	r2, [pc, #592]	; (8011670 <UART_SetConfig+0x930>)
 801141e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011422:	461a      	mov	r2, r3
 8011424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011426:	fbb3 f3f2 	udiv	r3, r3, r2
 801142a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	685a      	ldr	r2, [r3, #4]
 8011430:	4613      	mov	r3, r2
 8011432:	005b      	lsls	r3, r3, #1
 8011434:	4413      	add	r3, r2
 8011436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011438:	429a      	cmp	r2, r3
 801143a:	d305      	bcc.n	8011448 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011444:	429a      	cmp	r2, r3
 8011446:	d903      	bls.n	8011450 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011448:	2301      	movs	r3, #1
 801144a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801144e:	e1c1      	b.n	80117d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011452:	2200      	movs	r2, #0
 8011454:	60bb      	str	r3, [r7, #8]
 8011456:	60fa      	str	r2, [r7, #12]
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145c:	4a84      	ldr	r2, [pc, #528]	; (8011670 <UART_SetConfig+0x930>)
 801145e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011462:	b29b      	uxth	r3, r3
 8011464:	2200      	movs	r2, #0
 8011466:	603b      	str	r3, [r7, #0]
 8011468:	607a      	str	r2, [r7, #4]
 801146a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801146e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011472:	f7ee ff35 	bl	80002e0 <__aeabi_uldivmod>
 8011476:	4602      	mov	r2, r0
 8011478:	460b      	mov	r3, r1
 801147a:	4610      	mov	r0, r2
 801147c:	4619      	mov	r1, r3
 801147e:	f04f 0200 	mov.w	r2, #0
 8011482:	f04f 0300 	mov.w	r3, #0
 8011486:	020b      	lsls	r3, r1, #8
 8011488:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801148c:	0202      	lsls	r2, r0, #8
 801148e:	6979      	ldr	r1, [r7, #20]
 8011490:	6849      	ldr	r1, [r1, #4]
 8011492:	0849      	lsrs	r1, r1, #1
 8011494:	2000      	movs	r0, #0
 8011496:	460c      	mov	r4, r1
 8011498:	4605      	mov	r5, r0
 801149a:	eb12 0804 	adds.w	r8, r2, r4
 801149e:	eb43 0905 	adc.w	r9, r3, r5
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	469a      	mov	sl, r3
 80114aa:	4693      	mov	fp, r2
 80114ac:	4652      	mov	r2, sl
 80114ae:	465b      	mov	r3, fp
 80114b0:	4640      	mov	r0, r8
 80114b2:	4649      	mov	r1, r9
 80114b4:	f7ee ff14 	bl	80002e0 <__aeabi_uldivmod>
 80114b8:	4602      	mov	r2, r0
 80114ba:	460b      	mov	r3, r1
 80114bc:	4613      	mov	r3, r2
 80114be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80114c6:	d308      	bcc.n	80114da <UART_SetConfig+0x79a>
 80114c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114ce:	d204      	bcs.n	80114da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114d6:	60da      	str	r2, [r3, #12]
 80114d8:	e17c      	b.n	80117d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80114da:	2301      	movs	r3, #1
 80114dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114e0:	e178      	b.n	80117d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	69db      	ldr	r3, [r3, #28]
 80114e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114ea:	f040 80c5 	bne.w	8011678 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80114ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114f2:	2b20      	cmp	r3, #32
 80114f4:	dc48      	bgt.n	8011588 <UART_SetConfig+0x848>
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	db7b      	blt.n	80115f2 <UART_SetConfig+0x8b2>
 80114fa:	2b20      	cmp	r3, #32
 80114fc:	d879      	bhi.n	80115f2 <UART_SetConfig+0x8b2>
 80114fe:	a201      	add	r2, pc, #4	; (adr r2, 8011504 <UART_SetConfig+0x7c4>)
 8011500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011504:	0801158f 	.word	0x0801158f
 8011508:	08011597 	.word	0x08011597
 801150c:	080115f3 	.word	0x080115f3
 8011510:	080115f3 	.word	0x080115f3
 8011514:	0801159f 	.word	0x0801159f
 8011518:	080115f3 	.word	0x080115f3
 801151c:	080115f3 	.word	0x080115f3
 8011520:	080115f3 	.word	0x080115f3
 8011524:	080115af 	.word	0x080115af
 8011528:	080115f3 	.word	0x080115f3
 801152c:	080115f3 	.word	0x080115f3
 8011530:	080115f3 	.word	0x080115f3
 8011534:	080115f3 	.word	0x080115f3
 8011538:	080115f3 	.word	0x080115f3
 801153c:	080115f3 	.word	0x080115f3
 8011540:	080115f3 	.word	0x080115f3
 8011544:	080115bf 	.word	0x080115bf
 8011548:	080115f3 	.word	0x080115f3
 801154c:	080115f3 	.word	0x080115f3
 8011550:	080115f3 	.word	0x080115f3
 8011554:	080115f3 	.word	0x080115f3
 8011558:	080115f3 	.word	0x080115f3
 801155c:	080115f3 	.word	0x080115f3
 8011560:	080115f3 	.word	0x080115f3
 8011564:	080115f3 	.word	0x080115f3
 8011568:	080115f3 	.word	0x080115f3
 801156c:	080115f3 	.word	0x080115f3
 8011570:	080115f3 	.word	0x080115f3
 8011574:	080115f3 	.word	0x080115f3
 8011578:	080115f3 	.word	0x080115f3
 801157c:	080115f3 	.word	0x080115f3
 8011580:	080115f3 	.word	0x080115f3
 8011584:	080115e5 	.word	0x080115e5
 8011588:	2b40      	cmp	r3, #64	; 0x40
 801158a:	d02e      	beq.n	80115ea <UART_SetConfig+0x8aa>
 801158c:	e031      	b.n	80115f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801158e:	f7f9 fbed 	bl	800ad6c <HAL_RCC_GetPCLK1Freq>
 8011592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011594:	e033      	b.n	80115fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011596:	f7f9 fbff 	bl	800ad98 <HAL_RCC_GetPCLK2Freq>
 801159a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801159c:	e02f      	b.n	80115fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fb fbf0 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115ac:	e027      	b.n	80115fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115ae:	f107 0318 	add.w	r3, r7, #24
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fb fd3c 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115bc:	e01f      	b.n	80115fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115be:	4b2d      	ldr	r3, [pc, #180]	; (8011674 <UART_SetConfig+0x934>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f003 0320 	and.w	r3, r3, #32
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d009      	beq.n	80115de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115ca:	4b2a      	ldr	r3, [pc, #168]	; (8011674 <UART_SetConfig+0x934>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	08db      	lsrs	r3, r3, #3
 80115d0:	f003 0303 	and.w	r3, r3, #3
 80115d4:	4a24      	ldr	r2, [pc, #144]	; (8011668 <UART_SetConfig+0x928>)
 80115d6:	fa22 f303 	lsr.w	r3, r2, r3
 80115da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115dc:	e00f      	b.n	80115fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80115de:	4b22      	ldr	r3, [pc, #136]	; (8011668 <UART_SetConfig+0x928>)
 80115e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e2:	e00c      	b.n	80115fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115e4:	4b21      	ldr	r3, [pc, #132]	; (801166c <UART_SetConfig+0x92c>)
 80115e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e8:	e009      	b.n	80115fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115f0:	e005      	b.n	80115fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80115f2:	2300      	movs	r3, #0
 80115f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115f6:	2301      	movs	r3, #1
 80115f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80115fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011600:	2b00      	cmp	r3, #0
 8011602:	f000 80e7 	beq.w	80117d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801160a:	4a19      	ldr	r2, [pc, #100]	; (8011670 <UART_SetConfig+0x930>)
 801160c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011610:	461a      	mov	r2, r3
 8011612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011614:	fbb3 f3f2 	udiv	r3, r3, r2
 8011618:	005a      	lsls	r2, r3, #1
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	085b      	lsrs	r3, r3, #1
 8011620:	441a      	add	r2, r3
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	fbb2 f3f3 	udiv	r3, r2, r3
 801162a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	2b0f      	cmp	r3, #15
 8011630:	d916      	bls.n	8011660 <UART_SetConfig+0x920>
 8011632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011638:	d212      	bcs.n	8011660 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163c:	b29b      	uxth	r3, r3
 801163e:	f023 030f 	bic.w	r3, r3, #15
 8011642:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011646:	085b      	lsrs	r3, r3, #1
 8011648:	b29b      	uxth	r3, r3
 801164a:	f003 0307 	and.w	r3, r3, #7
 801164e:	b29a      	uxth	r2, r3
 8011650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011652:	4313      	orrs	r3, r2
 8011654:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801165c:	60da      	str	r2, [r3, #12]
 801165e:	e0b9      	b.n	80117d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011660:	2301      	movs	r3, #1
 8011662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011666:	e0b5      	b.n	80117d4 <UART_SetConfig+0xa94>
 8011668:	03d09000 	.word	0x03d09000
 801166c:	003d0900 	.word	0x003d0900
 8011670:	08017748 	.word	0x08017748
 8011674:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011678:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801167c:	2b20      	cmp	r3, #32
 801167e:	dc49      	bgt.n	8011714 <UART_SetConfig+0x9d4>
 8011680:	2b00      	cmp	r3, #0
 8011682:	db7c      	blt.n	801177e <UART_SetConfig+0xa3e>
 8011684:	2b20      	cmp	r3, #32
 8011686:	d87a      	bhi.n	801177e <UART_SetConfig+0xa3e>
 8011688:	a201      	add	r2, pc, #4	; (adr r2, 8011690 <UART_SetConfig+0x950>)
 801168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168e:	bf00      	nop
 8011690:	0801171b 	.word	0x0801171b
 8011694:	08011723 	.word	0x08011723
 8011698:	0801177f 	.word	0x0801177f
 801169c:	0801177f 	.word	0x0801177f
 80116a0:	0801172b 	.word	0x0801172b
 80116a4:	0801177f 	.word	0x0801177f
 80116a8:	0801177f 	.word	0x0801177f
 80116ac:	0801177f 	.word	0x0801177f
 80116b0:	0801173b 	.word	0x0801173b
 80116b4:	0801177f 	.word	0x0801177f
 80116b8:	0801177f 	.word	0x0801177f
 80116bc:	0801177f 	.word	0x0801177f
 80116c0:	0801177f 	.word	0x0801177f
 80116c4:	0801177f 	.word	0x0801177f
 80116c8:	0801177f 	.word	0x0801177f
 80116cc:	0801177f 	.word	0x0801177f
 80116d0:	0801174b 	.word	0x0801174b
 80116d4:	0801177f 	.word	0x0801177f
 80116d8:	0801177f 	.word	0x0801177f
 80116dc:	0801177f 	.word	0x0801177f
 80116e0:	0801177f 	.word	0x0801177f
 80116e4:	0801177f 	.word	0x0801177f
 80116e8:	0801177f 	.word	0x0801177f
 80116ec:	0801177f 	.word	0x0801177f
 80116f0:	0801177f 	.word	0x0801177f
 80116f4:	0801177f 	.word	0x0801177f
 80116f8:	0801177f 	.word	0x0801177f
 80116fc:	0801177f 	.word	0x0801177f
 8011700:	0801177f 	.word	0x0801177f
 8011704:	0801177f 	.word	0x0801177f
 8011708:	0801177f 	.word	0x0801177f
 801170c:	0801177f 	.word	0x0801177f
 8011710:	08011771 	.word	0x08011771
 8011714:	2b40      	cmp	r3, #64	; 0x40
 8011716:	d02e      	beq.n	8011776 <UART_SetConfig+0xa36>
 8011718:	e031      	b.n	801177e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801171a:	f7f9 fb27 	bl	800ad6c <HAL_RCC_GetPCLK1Freq>
 801171e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011720:	e033      	b.n	801178a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011722:	f7f9 fb39 	bl	800ad98 <HAL_RCC_GetPCLK2Freq>
 8011726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011728:	e02f      	b.n	801178a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801172e:	4618      	mov	r0, r3
 8011730:	f7fb fb2a 	bl	800cd88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011738:	e027      	b.n	801178a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801173a:	f107 0318 	add.w	r3, r7, #24
 801173e:	4618      	mov	r0, r3
 8011740:	f7fb fc76 	bl	800d030 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011748:	e01f      	b.n	801178a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801174a:	4b2d      	ldr	r3, [pc, #180]	; (8011800 <UART_SetConfig+0xac0>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f003 0320 	and.w	r3, r3, #32
 8011752:	2b00      	cmp	r3, #0
 8011754:	d009      	beq.n	801176a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011756:	4b2a      	ldr	r3, [pc, #168]	; (8011800 <UART_SetConfig+0xac0>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	08db      	lsrs	r3, r3, #3
 801175c:	f003 0303 	and.w	r3, r3, #3
 8011760:	4a28      	ldr	r2, [pc, #160]	; (8011804 <UART_SetConfig+0xac4>)
 8011762:	fa22 f303 	lsr.w	r3, r2, r3
 8011766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011768:	e00f      	b.n	801178a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801176a:	4b26      	ldr	r3, [pc, #152]	; (8011804 <UART_SetConfig+0xac4>)
 801176c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801176e:	e00c      	b.n	801178a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011770:	4b25      	ldr	r3, [pc, #148]	; (8011808 <UART_SetConfig+0xac8>)
 8011772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011774:	e009      	b.n	801178a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801177a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801177c:	e005      	b.n	801178a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801177e:	2300      	movs	r3, #0
 8011780:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011782:	2301      	movs	r3, #1
 8011784:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011788:	bf00      	nop
    }

    if (pclk != 0U)
 801178a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801178c:	2b00      	cmp	r3, #0
 801178e:	d021      	beq.n	80117d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011794:	4a1d      	ldr	r2, [pc, #116]	; (801180c <UART_SetConfig+0xacc>)
 8011796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801179a:	461a      	mov	r2, r3
 801179c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801179e:	fbb3 f2f2 	udiv	r2, r3, r2
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	085b      	lsrs	r3, r3, #1
 80117a8:	441a      	add	r2, r3
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80117b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b6:	2b0f      	cmp	r3, #15
 80117b8:	d909      	bls.n	80117ce <UART_SetConfig+0xa8e>
 80117ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117c0:	d205      	bcs.n	80117ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	60da      	str	r2, [r3, #12]
 80117cc:	e002      	b.n	80117d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	2201      	movs	r2, #1
 80117d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	2201      	movs	r2, #1
 80117e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	2200      	movs	r2, #0
 80117e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	2200      	movs	r2, #0
 80117ee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80117f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3748      	adds	r7, #72	; 0x48
 80117f8:	46bd      	mov	sp, r7
 80117fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117fe:	bf00      	nop
 8011800:	58024400 	.word	0x58024400
 8011804:	03d09000 	.word	0x03d09000
 8011808:	003d0900 	.word	0x003d0900
 801180c:	08017748 	.word	0x08017748

08011810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181c:	f003 0308 	and.w	r3, r3, #8
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00a      	beq.n	801183a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	430a      	orrs	r2, r1
 8011838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801183e:	f003 0301 	and.w	r3, r3, #1
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00a      	beq.n	801185c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	430a      	orrs	r2, r1
 801185a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011860:	f003 0302 	and.w	r3, r3, #2
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00a      	beq.n	801187e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	430a      	orrs	r2, r1
 801187c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011882:	f003 0304 	and.w	r3, r3, #4
 8011886:	2b00      	cmp	r3, #0
 8011888:	d00a      	beq.n	80118a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	430a      	orrs	r2, r1
 801189e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a4:	f003 0310 	and.w	r3, r3, #16
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00a      	beq.n	80118c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	689b      	ldr	r3, [r3, #8]
 80118b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	430a      	orrs	r2, r1
 80118c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c6:	f003 0320 	and.w	r3, r3, #32
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00a      	beq.n	80118e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	430a      	orrs	r2, r1
 80118e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d01a      	beq.n	8011926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	430a      	orrs	r2, r1
 8011904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801190a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801190e:	d10a      	bne.n	8011926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	430a      	orrs	r2, r1
 8011924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00a      	beq.n	8011948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	430a      	orrs	r2, r1
 8011946:	605a      	str	r2, [r3, #4]
  }
}
 8011948:	bf00      	nop
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b098      	sub	sp, #96	; 0x60
 8011958:	af02      	add	r7, sp, #8
 801195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011964:	f7f2 fa74 	bl	8003e50 <HAL_GetTick>
 8011968:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f003 0308 	and.w	r3, r3, #8
 8011974:	2b08      	cmp	r3, #8
 8011976:	d12f      	bne.n	80119d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011980:	2200      	movs	r2, #0
 8011982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f000 f88e 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d022      	beq.n	80119d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	e853 3f00 	ldrex	r3, [r3]
 801199e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119a6:	653b      	str	r3, [r7, #80]	; 0x50
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119b0:	647b      	str	r3, [r7, #68]	; 0x44
 80119b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119b8:	e841 2300 	strex	r3, r2, [r1]
 80119bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d1e6      	bne.n	8011992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2220      	movs	r2, #32
 80119c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2200      	movs	r2, #0
 80119d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119d4:	2303      	movs	r3, #3
 80119d6:	e063      	b.n	8011aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0304 	and.w	r3, r3, #4
 80119e2:	2b04      	cmp	r3, #4
 80119e4:	d149      	bne.n	8011a7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ee:	2200      	movs	r2, #0
 80119f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 f857 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 80119fa:	4603      	mov	r3, r0
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d03c      	beq.n	8011a7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a08:	e853 3f00 	ldrex	r3, [r3]
 8011a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8011a20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a26:	e841 2300 	strex	r3, r2, [r1]
 8011a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1e6      	bne.n	8011a00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	3308      	adds	r3, #8
 8011a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	e853 3f00 	ldrex	r3, [r3]
 8011a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f023 0301 	bic.w	r3, r3, #1
 8011a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	3308      	adds	r3, #8
 8011a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a52:	61fa      	str	r2, [r7, #28]
 8011a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a56:	69b9      	ldr	r1, [r7, #24]
 8011a58:	69fa      	ldr	r2, [r7, #28]
 8011a5a:	e841 2300 	strex	r3, r2, [r1]
 8011a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1e5      	bne.n	8011a32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2220      	movs	r2, #32
 8011a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a76:	2303      	movs	r3, #3
 8011a78:	e012      	b.n	8011aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2220      	movs	r2, #32
 8011a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2220      	movs	r2, #32
 8011a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3758      	adds	r7, #88	; 0x58
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	603b      	str	r3, [r7, #0]
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ab8:	e04f      	b.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ac0:	d04b      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ac2:	f7f2 f9c5 	bl	8003e50 <HAL_GetTick>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	69ba      	ldr	r2, [r7, #24]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d302      	bcc.n	8011ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d101      	bne.n	8011adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	e04e      	b.n	8011b7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f003 0304 	and.w	r3, r3, #4
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d037      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	2b80      	cmp	r3, #128	; 0x80
 8011aee:	d034      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	2b40      	cmp	r3, #64	; 0x40
 8011af4:	d031      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	69db      	ldr	r3, [r3, #28]
 8011afc:	f003 0308 	and.w	r3, r3, #8
 8011b00:	2b08      	cmp	r3, #8
 8011b02:	d110      	bne.n	8011b26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2208      	movs	r2, #8
 8011b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	f000 f99d 	bl	8011e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2208      	movs	r2, #8
 8011b16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011b22:	2301      	movs	r3, #1
 8011b24:	e029      	b.n	8011b7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	69db      	ldr	r3, [r3, #28]
 8011b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b34:	d111      	bne.n	8011b5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f000 f983 	bl	8011e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	2220      	movs	r2, #32
 8011b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2200      	movs	r2, #0
 8011b52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b56:	2303      	movs	r3, #3
 8011b58:	e00f      	b.n	8011b7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	69da      	ldr	r2, [r3, #28]
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	4013      	ands	r3, r2
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	bf0c      	ite	eq
 8011b6a:	2301      	moveq	r3, #1
 8011b6c:	2300      	movne	r3, #0
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	461a      	mov	r2, r3
 8011b72:	79fb      	ldrb	r3, [r7, #7]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d0a0      	beq.n	8011aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
	...

08011b84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b0a3      	sub	sp, #140	; 0x8c
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	4613      	mov	r3, r2
 8011b90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	68ba      	ldr	r2, [r7, #8]
 8011b96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	88fa      	ldrh	r2, [r7, #6]
 8011b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	88fa      	ldrh	r2, [r7, #6]
 8011ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2200      	movs	r2, #0
 8011bac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	689b      	ldr	r3, [r3, #8]
 8011bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011bb6:	d10e      	bne.n	8011bd6 <UART_Start_Receive_IT+0x52>
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	691b      	ldr	r3, [r3, #16]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d105      	bne.n	8011bcc <UART_Start_Receive_IT+0x48>
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011bc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bca:	e02d      	b.n	8011c28 <UART_Start_Receive_IT+0xa4>
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	22ff      	movs	r2, #255	; 0xff
 8011bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bd4:	e028      	b.n	8011c28 <UART_Start_Receive_IT+0xa4>
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d10d      	bne.n	8011bfa <UART_Start_Receive_IT+0x76>
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	691b      	ldr	r3, [r3, #16]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d104      	bne.n	8011bf0 <UART_Start_Receive_IT+0x6c>
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	22ff      	movs	r2, #255	; 0xff
 8011bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bee:	e01b      	b.n	8011c28 <UART_Start_Receive_IT+0xa4>
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	227f      	movs	r2, #127	; 0x7f
 8011bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bf8:	e016      	b.n	8011c28 <UART_Start_Receive_IT+0xa4>
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	689b      	ldr	r3, [r3, #8]
 8011bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011c02:	d10d      	bne.n	8011c20 <UART_Start_Receive_IT+0x9c>
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d104      	bne.n	8011c16 <UART_Start_Receive_IT+0x92>
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	227f      	movs	r2, #127	; 0x7f
 8011c10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c14:	e008      	b.n	8011c28 <UART_Start_Receive_IT+0xa4>
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	223f      	movs	r2, #63	; 0x3f
 8011c1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c1e:	e003      	b.n	8011c28 <UART_Start_Receive_IT+0xa4>
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2200      	movs	r2, #0
 8011c24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2222      	movs	r2, #34	; 0x22
 8011c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c42:	e853 3f00 	ldrex	r3, [r3]
 8011c46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c4a:	f043 0301 	orr.w	r3, r3, #1
 8011c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	3308      	adds	r3, #8
 8011c58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011c5c:	673a      	str	r2, [r7, #112]	; 0x70
 8011c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c60:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011c62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c64:	e841 2300 	strex	r3, r2, [r1]
 8011c68:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d1e3      	bne.n	8011c38 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c78:	d14f      	bne.n	8011d1a <UART_Start_Receive_IT+0x196>
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c80:	88fa      	ldrh	r2, [r7, #6]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d349      	bcc.n	8011d1a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c8e:	d107      	bne.n	8011ca0 <UART_Start_Receive_IT+0x11c>
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	691b      	ldr	r3, [r3, #16]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d103      	bne.n	8011ca0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	4a47      	ldr	r2, [pc, #284]	; (8011db8 <UART_Start_Receive_IT+0x234>)
 8011c9c:	675a      	str	r2, [r3, #116]	; 0x74
 8011c9e:	e002      	b.n	8011ca6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	4a46      	ldr	r2, [pc, #280]	; (8011dbc <UART_Start_Receive_IT+0x238>)
 8011ca4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	691b      	ldr	r3, [r3, #16]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d01a      	beq.n	8011ce4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cb6:	e853 3f00 	ldrex	r3, [r3]
 8011cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	461a      	mov	r2, r3
 8011ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011cd2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011cd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011cd8:	e841 2300 	strex	r3, r2, [r1]
 8011cdc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1e4      	bne.n	8011cae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	3308      	adds	r3, #8
 8011cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cee:	e853 3f00 	ldrex	r3, [r3]
 8011cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	3308      	adds	r3, #8
 8011d02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d04:	64ba      	str	r2, [r7, #72]	; 0x48
 8011d06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d0c:	e841 2300 	strex	r3, r2, [r1]
 8011d10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d1e5      	bne.n	8011ce4 <UART_Start_Receive_IT+0x160>
 8011d18:	e046      	b.n	8011da8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d22:	d107      	bne.n	8011d34 <UART_Start_Receive_IT+0x1b0>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	691b      	ldr	r3, [r3, #16]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d103      	bne.n	8011d34 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	4a24      	ldr	r2, [pc, #144]	; (8011dc0 <UART_Start_Receive_IT+0x23c>)
 8011d30:	675a      	str	r2, [r3, #116]	; 0x74
 8011d32:	e002      	b.n	8011d3a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	4a23      	ldr	r2, [pc, #140]	; (8011dc4 <UART_Start_Receive_IT+0x240>)
 8011d38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	691b      	ldr	r3, [r3, #16]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d019      	beq.n	8011d76 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4a:	e853 3f00 	ldrex	r3, [r3]
 8011d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011d56:	677b      	str	r3, [r7, #116]	; 0x74
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d60:	637b      	str	r3, [r7, #52]	; 0x34
 8011d62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d68:	e841 2300 	strex	r3, r2, [r1]
 8011d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1e6      	bne.n	8011d42 <UART_Start_Receive_IT+0x1be>
 8011d74:	e018      	b.n	8011da8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	e853 3f00 	ldrex	r3, [r3]
 8011d82:	613b      	str	r3, [r7, #16]
   return(result);
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	f043 0320 	orr.w	r3, r3, #32
 8011d8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	461a      	mov	r2, r3
 8011d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d94:	623b      	str	r3, [r7, #32]
 8011d96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d98:	69f9      	ldr	r1, [r7, #28]
 8011d9a:	6a3a      	ldr	r2, [r7, #32]
 8011d9c:	e841 2300 	strex	r3, r2, [r1]
 8011da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1e6      	bne.n	8011d76 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011da8:	2300      	movs	r3, #0
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	378c      	adds	r7, #140	; 0x8c
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	0801279d 	.word	0x0801279d
 8011dbc:	0801243d 	.word	0x0801243d
 8011dc0:	08012285 	.word	0x08012285
 8011dc4:	080120cd 	.word	0x080120cd

08011dc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b08f      	sub	sp, #60	; 0x3c
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dd6:	6a3b      	ldr	r3, [r7, #32]
 8011dd8:	e853 3f00 	ldrex	r3, [r3]
 8011ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011dde:	69fb      	ldr	r3, [r7, #28]
 8011de0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011de4:	637b      	str	r3, [r7, #52]	; 0x34
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	461a      	mov	r2, r3
 8011dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011df0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011df6:	e841 2300 	strex	r3, r2, [r1]
 8011dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1e6      	bne.n	8011dd0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	3308      	adds	r3, #8
 8011e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	e853 3f00 	ldrex	r3, [r3]
 8011e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011e18:	633b      	str	r3, [r7, #48]	; 0x30
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	3308      	adds	r3, #8
 8011e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e22:	61ba      	str	r2, [r7, #24]
 8011e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e26:	6979      	ldr	r1, [r7, #20]
 8011e28:	69ba      	ldr	r2, [r7, #24]
 8011e2a:	e841 2300 	strex	r3, r2, [r1]
 8011e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1e5      	bne.n	8011e02 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2220      	movs	r2, #32
 8011e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011e3e:	bf00      	nop
 8011e40:	373c      	adds	r7, #60	; 0x3c
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr
	...

08011e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b095      	sub	sp, #84	; 0x54
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e5c:	e853 3f00 	ldrex	r3, [r3]
 8011e60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	461a      	mov	r2, r3
 8011e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e72:	643b      	str	r3, [r7, #64]	; 0x40
 8011e74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e7a:	e841 2300 	strex	r3, r2, [r1]
 8011e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1e6      	bne.n	8011e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	3308      	adds	r3, #8
 8011e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	e853 3f00 	ldrex	r3, [r3]
 8011e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e96:	69fa      	ldr	r2, [r7, #28]
 8011e98:	4b1e      	ldr	r3, [pc, #120]	; (8011f14 <UART_EndRxTransfer+0xc8>)
 8011e9a:	4013      	ands	r3, r2
 8011e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	3308      	adds	r3, #8
 8011ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eae:	e841 2300 	strex	r3, r2, [r1]
 8011eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d1e5      	bne.n	8011e86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d118      	bne.n	8011ef4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	e853 3f00 	ldrex	r3, [r3]
 8011ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	f023 0310 	bic.w	r3, r3, #16
 8011ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	461a      	mov	r2, r3
 8011ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ee0:	61bb      	str	r3, [r7, #24]
 8011ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee4:	6979      	ldr	r1, [r7, #20]
 8011ee6:	69ba      	ldr	r2, [r7, #24]
 8011ee8:	e841 2300 	strex	r3, r2, [r1]
 8011eec:	613b      	str	r3, [r7, #16]
   return(result);
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1e6      	bne.n	8011ec2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2220      	movs	r2, #32
 8011ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2200      	movs	r2, #0
 8011f00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2200      	movs	r2, #0
 8011f06:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011f08:	bf00      	nop
 8011f0a:	3754      	adds	r7, #84	; 0x54
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr
 8011f14:	effffffe 	.word	0xeffffffe

08011f18 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b090      	sub	sp, #64	; 0x40
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	69db      	ldr	r3, [r3, #28]
 8011f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f2e:	d037      	beq.n	8011fa0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f32:	2200      	movs	r2, #0
 8011f34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	3308      	adds	r3, #8
 8011f3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f42:	e853 3f00 	ldrex	r3, [r3]
 8011f46:	623b      	str	r3, [r7, #32]
   return(result);
 8011f48:	6a3b      	ldr	r3, [r7, #32]
 8011f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	3308      	adds	r3, #8
 8011f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f58:	633a      	str	r2, [r7, #48]	; 0x30
 8011f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f60:	e841 2300 	strex	r3, r2, [r1]
 8011f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d1e5      	bne.n	8011f38 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	e853 3f00 	ldrex	r3, [r3]
 8011f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f80:	637b      	str	r3, [r7, #52]	; 0x34
 8011f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	461a      	mov	r2, r3
 8011f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8a:	61fb      	str	r3, [r7, #28]
 8011f8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f8e:	69b9      	ldr	r1, [r7, #24]
 8011f90:	69fa      	ldr	r2, [r7, #28]
 8011f92:	e841 2300 	strex	r3, r2, [r1]
 8011f96:	617b      	str	r3, [r7, #20]
   return(result);
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d1e6      	bne.n	8011f6c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011f9e:	e002      	b.n	8011fa6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011fa0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011fa2:	f7f0 f99f 	bl	80022e4 <HAL_UART_TxCpltCallback>
}
 8011fa6:	bf00      	nop
 8011fa8:	3740      	adds	r7, #64	; 0x40
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b084      	sub	sp, #16
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	f7fe fe9f 	bl	8010d00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fc2:	bf00      	nop
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b086      	sub	sp, #24
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fd6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fe6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ff2:	2b80      	cmp	r3, #128	; 0x80
 8011ff4:	d109      	bne.n	801200a <UART_DMAError+0x40>
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	2b21      	cmp	r3, #33	; 0x21
 8011ffa:	d106      	bne.n	801200a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	2200      	movs	r2, #0
 8012000:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012004:	6978      	ldr	r0, [r7, #20]
 8012006:	f7ff fedf 	bl	8011dc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012014:	2b40      	cmp	r3, #64	; 0x40
 8012016:	d109      	bne.n	801202c <UART_DMAError+0x62>
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b22      	cmp	r3, #34	; 0x22
 801201c:	d106      	bne.n	801202c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	2200      	movs	r2, #0
 8012022:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012026:	6978      	ldr	r0, [r7, #20]
 8012028:	f7ff ff10 	bl	8011e4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012032:	f043 0210 	orr.w	r2, r3, #16
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801203c:	6978      	ldr	r0, [r7, #20]
 801203e:	f7fe fe69 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012042:	bf00      	nop
 8012044:	3718      	adds	r7, #24
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b084      	sub	sp, #16
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2200      	movs	r2, #0
 801205c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2200      	movs	r2, #0
 8012064:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f7fe fe53 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801206e:	bf00      	nop
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012076:	b580      	push	{r7, lr}
 8012078:	b088      	sub	sp, #32
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	e853 3f00 	ldrex	r3, [r3]
 801208a:	60bb      	str	r3, [r7, #8]
   return(result);
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012092:	61fb      	str	r3, [r7, #28]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	461a      	mov	r2, r3
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	61bb      	str	r3, [r7, #24]
 801209e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a0:	6979      	ldr	r1, [r7, #20]
 80120a2:	69ba      	ldr	r2, [r7, #24]
 80120a4:	e841 2300 	strex	r3, r2, [r1]
 80120a8:	613b      	str	r3, [r7, #16]
   return(result);
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1e6      	bne.n	801207e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2220      	movs	r2, #32
 80120b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7f0 f910 	bl	80022e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120c4:	bf00      	nop
 80120c6:	3720      	adds	r7, #32
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b09c      	sub	sp, #112	; 0x70
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120e4:	2b22      	cmp	r3, #34	; 0x22
 80120e6:	f040 80be 	bne.w	8012266 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80120f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80120f8:	b2d9      	uxtb	r1, r3
 80120fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80120fe:	b2da      	uxtb	r2, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012104:	400a      	ands	r2, r1
 8012106:	b2d2      	uxtb	r2, r2
 8012108:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801210e:	1c5a      	adds	r2, r3, #1
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801211a:	b29b      	uxth	r3, r3
 801211c:	3b01      	subs	r3, #1
 801211e:	b29a      	uxth	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801212c:	b29b      	uxth	r3, r3
 801212e:	2b00      	cmp	r3, #0
 8012130:	f040 80a1 	bne.w	8012276 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801213a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801213c:	e853 3f00 	ldrex	r3, [r3]
 8012140:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012148:	66bb      	str	r3, [r7, #104]	; 0x68
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	461a      	mov	r2, r3
 8012150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012152:	65bb      	str	r3, [r7, #88]	; 0x58
 8012154:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801215a:	e841 2300 	strex	r3, r2, [r1]
 801215e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012162:	2b00      	cmp	r3, #0
 8012164:	d1e6      	bne.n	8012134 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	3308      	adds	r3, #8
 801216c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012170:	e853 3f00 	ldrex	r3, [r3]
 8012174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012178:	f023 0301 	bic.w	r3, r3, #1
 801217c:	667b      	str	r3, [r7, #100]	; 0x64
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	3308      	adds	r3, #8
 8012184:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012186:	647a      	str	r2, [r7, #68]	; 0x44
 8012188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801218a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801218c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801218e:	e841 2300 	strex	r3, r2, [r1]
 8012192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012196:	2b00      	cmp	r3, #0
 8012198:	d1e5      	bne.n	8012166 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2220      	movs	r2, #32
 801219e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2200      	movs	r2, #0
 80121a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	4a33      	ldr	r2, [pc, #204]	; (8012280 <UART_RxISR_8BIT+0x1b4>)
 80121b4:	4293      	cmp	r3, r2
 80121b6:	d01f      	beq.n	80121f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d018      	beq.n	80121f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	e853 3f00 	ldrex	r3, [r3]
 80121d2:	623b      	str	r3, [r7, #32]
   return(result);
 80121d4:	6a3b      	ldr	r3, [r7, #32]
 80121d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80121da:	663b      	str	r3, [r7, #96]	; 0x60
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	461a      	mov	r2, r3
 80121e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121e4:	633b      	str	r3, [r7, #48]	; 0x30
 80121e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121ec:	e841 2300 	strex	r3, r2, [r1]
 80121f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1e6      	bne.n	80121c6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121fc:	2b01      	cmp	r3, #1
 80121fe:	d12e      	bne.n	801225e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2200      	movs	r2, #0
 8012204:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	e853 3f00 	ldrex	r3, [r3]
 8012212:	60fb      	str	r3, [r7, #12]
   return(result);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f023 0310 	bic.w	r3, r3, #16
 801221a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	461a      	mov	r2, r3
 8012222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012224:	61fb      	str	r3, [r7, #28]
 8012226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012228:	69b9      	ldr	r1, [r7, #24]
 801222a:	69fa      	ldr	r2, [r7, #28]
 801222c:	e841 2300 	strex	r3, r2, [r1]
 8012230:	617b      	str	r3, [r7, #20]
   return(result);
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d1e6      	bne.n	8012206 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	69db      	ldr	r3, [r3, #28]
 801223e:	f003 0310 	and.w	r3, r3, #16
 8012242:	2b10      	cmp	r3, #16
 8012244:	d103      	bne.n	801224e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2210      	movs	r2, #16
 801224c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012254:	4619      	mov	r1, r3
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f7fe fd66 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801225c:	e00b      	b.n	8012276 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f7ee fa12 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012264:	e007      	b.n	8012276 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	699a      	ldr	r2, [r3, #24]
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f042 0208 	orr.w	r2, r2, #8
 8012274:	619a      	str	r2, [r3, #24]
}
 8012276:	bf00      	nop
 8012278:	3770      	adds	r7, #112	; 0x70
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	58000c00 	.word	0x58000c00

08012284 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b09c      	sub	sp, #112	; 0x70
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012292:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801229c:	2b22      	cmp	r3, #34	; 0x22
 801229e:	f040 80be 	bne.w	801241e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122b0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80122b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80122b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80122ba:	4013      	ands	r3, r2
 80122bc:	b29a      	uxth	r2, r3
 80122be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122c6:	1c9a      	adds	r2, r3, #2
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	3b01      	subs	r3, #1
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	f040 80a1 	bne.w	801242e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122f4:	e853 3f00 	ldrex	r3, [r3]
 80122f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80122fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012300:	667b      	str	r3, [r7, #100]	; 0x64
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	461a      	mov	r2, r3
 8012308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801230a:	657b      	str	r3, [r7, #84]	; 0x54
 801230c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801230e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012312:	e841 2300 	strex	r3, r2, [r1]
 8012316:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1e6      	bne.n	80122ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	3308      	adds	r3, #8
 8012324:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012328:	e853 3f00 	ldrex	r3, [r3]
 801232c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012330:	f023 0301 	bic.w	r3, r3, #1
 8012334:	663b      	str	r3, [r7, #96]	; 0x60
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	3308      	adds	r3, #8
 801233c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801233e:	643a      	str	r2, [r7, #64]	; 0x40
 8012340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012346:	e841 2300 	strex	r3, r2, [r1]
 801234a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234e:	2b00      	cmp	r3, #0
 8012350:	d1e5      	bne.n	801231e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2220      	movs	r2, #32
 8012356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2200      	movs	r2, #0
 801235e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	4a33      	ldr	r2, [pc, #204]	; (8012438 <UART_RxISR_16BIT+0x1b4>)
 801236c:	4293      	cmp	r3, r2
 801236e:	d01f      	beq.n	80123b0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801237a:	2b00      	cmp	r3, #0
 801237c:	d018      	beq.n	80123b0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012384:	6a3b      	ldr	r3, [r7, #32]
 8012386:	e853 3f00 	ldrex	r3, [r3]
 801238a:	61fb      	str	r3, [r7, #28]
   return(result);
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	461a      	mov	r2, r3
 801239a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801239c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801239e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123a4:	e841 2300 	strex	r3, r2, [r1]
 80123a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1e6      	bne.n	801237e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d12e      	bne.n	8012416 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2200      	movs	r2, #0
 80123bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	e853 3f00 	ldrex	r3, [r3]
 80123ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	f023 0310 	bic.w	r3, r3, #16
 80123d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	461a      	mov	r2, r3
 80123da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123dc:	61bb      	str	r3, [r7, #24]
 80123de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123e0:	6979      	ldr	r1, [r7, #20]
 80123e2:	69ba      	ldr	r2, [r7, #24]
 80123e4:	e841 2300 	strex	r3, r2, [r1]
 80123e8:	613b      	str	r3, [r7, #16]
   return(result);
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d1e6      	bne.n	80123be <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	69db      	ldr	r3, [r3, #28]
 80123f6:	f003 0310 	and.w	r3, r3, #16
 80123fa:	2b10      	cmp	r3, #16
 80123fc:	d103      	bne.n	8012406 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2210      	movs	r2, #16
 8012404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801240c:	4619      	mov	r1, r3
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7fe fc8a 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012414:	e00b      	b.n	801242e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7ee f936 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 801241c:	e007      	b.n	801242e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	699a      	ldr	r2, [r3, #24]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f042 0208 	orr.w	r2, r2, #8
 801242c:	619a      	str	r2, [r3, #24]
}
 801242e:	bf00      	nop
 8012430:	3770      	adds	r7, #112	; 0x70
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	58000c00 	.word	0x58000c00

0801243c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b0ac      	sub	sp, #176	; 0xb0
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801244a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	69db      	ldr	r3, [r3, #28]
 8012454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012472:	2b22      	cmp	r3, #34	; 0x22
 8012474:	f040 8180 	bne.w	8012778 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801247e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012482:	e123      	b.n	80126cc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801248e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012492:	b2d9      	uxtb	r1, r3
 8012494:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012498:	b2da      	uxtb	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801249e:	400a      	ands	r2, r1
 80124a0:	b2d2      	uxtb	r2, r2
 80124a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124a8:	1c5a      	adds	r2, r3, #1
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	3b01      	subs	r3, #1
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	69db      	ldr	r3, [r3, #28]
 80124c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80124ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124ce:	f003 0307 	and.w	r3, r3, #7
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d053      	beq.n	801257e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80124d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124da:	f003 0301 	and.w	r3, r3, #1
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d011      	beq.n	8012506 <UART_RxISR_8BIT_FIFOEN+0xca>
 80124e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80124e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d00b      	beq.n	8012506 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2201      	movs	r2, #1
 80124f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124fc:	f043 0201 	orr.w	r2, r3, #1
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801250a:	f003 0302 	and.w	r3, r3, #2
 801250e:	2b00      	cmp	r3, #0
 8012510:	d011      	beq.n	8012536 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012516:	f003 0301 	and.w	r3, r3, #1
 801251a:	2b00      	cmp	r3, #0
 801251c:	d00b      	beq.n	8012536 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2202      	movs	r2, #2
 8012524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801252c:	f043 0204 	orr.w	r2, r3, #4
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801253a:	f003 0304 	and.w	r3, r3, #4
 801253e:	2b00      	cmp	r3, #0
 8012540:	d011      	beq.n	8012566 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012546:	f003 0301 	and.w	r3, r3, #1
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00b      	beq.n	8012566 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2204      	movs	r2, #4
 8012554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801255c:	f043 0202 	orr.w	r2, r3, #2
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801256c:	2b00      	cmp	r3, #0
 801256e:	d006      	beq.n	801257e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f7fe fbcf 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2200      	movs	r2, #0
 801257a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012584:	b29b      	uxth	r3, r3
 8012586:	2b00      	cmp	r3, #0
 8012588:	f040 80a0 	bne.w	80126cc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012594:	e853 3f00 	ldrex	r3, [r3]
 8012598:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801259c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	461a      	mov	r2, r3
 80125aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80125b0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125b2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80125b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80125b6:	e841 2300 	strex	r3, r2, [r1]
 80125ba:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80125bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d1e4      	bne.n	801258c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	3308      	adds	r3, #8
 80125c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125cc:	e853 3f00 	ldrex	r3, [r3]
 80125d0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80125d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125d4:	4b6e      	ldr	r3, [pc, #440]	; (8012790 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80125d6:	4013      	ands	r3, r2
 80125d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	3308      	adds	r3, #8
 80125e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80125e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80125e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80125ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80125ee:	e841 2300 	strex	r3, r2, [r1]
 80125f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80125f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1e3      	bne.n	80125c2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2220      	movs	r2, #32
 80125fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2200      	movs	r2, #0
 8012606:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2200      	movs	r2, #0
 801260c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4a60      	ldr	r2, [pc, #384]	; (8012794 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012614:	4293      	cmp	r3, r2
 8012616:	d021      	beq.n	801265c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012622:	2b00      	cmp	r3, #0
 8012624:	d01a      	beq.n	801265c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801262c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801262e:	e853 3f00 	ldrex	r3, [r3]
 8012632:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801263a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	461a      	mov	r2, r3
 8012644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012648:	657b      	str	r3, [r7, #84]	; 0x54
 801264a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801264c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801264e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012650:	e841 2300 	strex	r3, r2, [r1]
 8012654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012658:	2b00      	cmp	r3, #0
 801265a:	d1e4      	bne.n	8012626 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012660:	2b01      	cmp	r3, #1
 8012662:	d130      	bne.n	80126c6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012672:	e853 3f00 	ldrex	r3, [r3]
 8012676:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267a:	f023 0310 	bic.w	r3, r3, #16
 801267e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	461a      	mov	r2, r3
 8012688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801268c:	643b      	str	r3, [r7, #64]	; 0x40
 801268e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012694:	e841 2300 	strex	r3, r2, [r1]
 8012698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1e4      	bne.n	801266a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	69db      	ldr	r3, [r3, #28]
 80126a6:	f003 0310 	and.w	r3, r3, #16
 80126aa:	2b10      	cmp	r3, #16
 80126ac:	d103      	bne.n	80126b6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2210      	movs	r2, #16
 80126b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80126bc:	4619      	mov	r1, r3
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f7fe fb32 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
 80126c4:	e002      	b.n	80126cc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f7ed ffde 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d006      	beq.n	80126e2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80126d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126d8:	f003 0320 	and.w	r3, r3, #32
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f47f aed1 	bne.w	8012484 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80126ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d049      	beq.n	8012788 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80126fe:	429a      	cmp	r2, r3
 8012700:	d242      	bcs.n	8012788 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	3308      	adds	r3, #8
 8012708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801270a:	6a3b      	ldr	r3, [r7, #32]
 801270c:	e853 3f00 	ldrex	r3, [r3]
 8012710:	61fb      	str	r3, [r7, #28]
   return(result);
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	3308      	adds	r3, #8
 8012722:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801272a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801272e:	e841 2300 	strex	r3, r2, [r1]
 8012732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012736:	2b00      	cmp	r3, #0
 8012738:	d1e3      	bne.n	8012702 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4a16      	ldr	r2, [pc, #88]	; (8012798 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801273e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	e853 3f00 	ldrex	r3, [r3]
 801274c:	60bb      	str	r3, [r7, #8]
   return(result);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	f043 0320 	orr.w	r3, r3, #32
 8012754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	461a      	mov	r2, r3
 801275e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012762:	61bb      	str	r3, [r7, #24]
 8012764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012766:	6979      	ldr	r1, [r7, #20]
 8012768:	69ba      	ldr	r2, [r7, #24]
 801276a:	e841 2300 	strex	r3, r2, [r1]
 801276e:	613b      	str	r3, [r7, #16]
   return(result);
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d1e4      	bne.n	8012740 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012776:	e007      	b.n	8012788 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	699a      	ldr	r2, [r3, #24]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f042 0208 	orr.w	r2, r2, #8
 8012786:	619a      	str	r2, [r3, #24]
}
 8012788:	bf00      	nop
 801278a:	37b0      	adds	r7, #176	; 0xb0
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	effffffe 	.word	0xeffffffe
 8012794:	58000c00 	.word	0x58000c00
 8012798:	080120cd 	.word	0x080120cd

0801279c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b0ae      	sub	sp, #184	; 0xb8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	69db      	ldr	r3, [r3, #28]
 80127b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	689b      	ldr	r3, [r3, #8]
 80127c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127d2:	2b22      	cmp	r3, #34	; 0x22
 80127d4:	f040 8184 	bne.w	8012ae0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127de:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127e2:	e127      	b.n	8012a34 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80127f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80127fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80127fe:	4013      	ands	r3, r2
 8012800:	b29a      	uxth	r2, r3
 8012802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801280c:	1c9a      	adds	r2, r3, #2
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012818:	b29b      	uxth	r3, r3
 801281a:	3b01      	subs	r3, #1
 801281c:	b29a      	uxth	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	69db      	ldr	r3, [r3, #28]
 801282a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801282e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012832:	f003 0307 	and.w	r3, r3, #7
 8012836:	2b00      	cmp	r3, #0
 8012838:	d053      	beq.n	80128e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801283a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801283e:	f003 0301 	and.w	r3, r3, #1
 8012842:	2b00      	cmp	r3, #0
 8012844:	d011      	beq.n	801286a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00b      	beq.n	801286a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2201      	movs	r2, #1
 8012858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012860:	f043 0201 	orr.w	r2, r3, #1
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801286a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801286e:	f003 0302 	and.w	r3, r3, #2
 8012872:	2b00      	cmp	r3, #0
 8012874:	d011      	beq.n	801289a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801287a:	f003 0301 	and.w	r3, r3, #1
 801287e:	2b00      	cmp	r3, #0
 8012880:	d00b      	beq.n	801289a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2202      	movs	r2, #2
 8012888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012890:	f043 0204 	orr.w	r2, r3, #4
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801289a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801289e:	f003 0304 	and.w	r3, r3, #4
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d011      	beq.n	80128ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80128a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80128aa:	f003 0301 	and.w	r3, r3, #1
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00b      	beq.n	80128ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2204      	movs	r2, #4
 80128b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128c0:	f043 0202 	orr.w	r2, r3, #2
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d006      	beq.n	80128e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7fe fa1d 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	f040 80a2 	bne.w	8012a34 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128f8:	e853 3f00 	ldrex	r3, [r3]
 80128fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80128fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	461a      	mov	r2, r3
 801290e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012916:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801291a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801291e:	e841 2300 	strex	r3, r2, [r1]
 8012922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012926:	2b00      	cmp	r3, #0
 8012928:	d1e2      	bne.n	80128f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	3308      	adds	r3, #8
 8012930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012934:	e853 3f00 	ldrex	r3, [r3]
 8012938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801293a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801293c:	4b6e      	ldr	r3, [pc, #440]	; (8012af8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801293e:	4013      	ands	r3, r2
 8012940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	3308      	adds	r3, #8
 801294a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801294e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012950:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012952:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012954:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012956:	e841 2300 	strex	r3, r2, [r1]
 801295a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801295c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1e3      	bne.n	801292a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2220      	movs	r2, #32
 8012966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2200      	movs	r2, #0
 8012974:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a60      	ldr	r2, [pc, #384]	; (8012afc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d021      	beq.n	80129c4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801298a:	2b00      	cmp	r3, #0
 801298c:	d01a      	beq.n	80129c4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012996:	e853 3f00 	ldrex	r3, [r3]
 801299a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801299c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801299e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80129a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	461a      	mov	r2, r3
 80129ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80129b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80129b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129b8:	e841 2300 	strex	r3, r2, [r1]
 80129bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80129be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1e4      	bne.n	801298e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d130      	bne.n	8012a2e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129da:	e853 3f00 	ldrex	r3, [r3]
 80129de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e2:	f023 0310 	bic.w	r3, r3, #16
 80129e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	461a      	mov	r2, r3
 80129f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80129f4:	647b      	str	r3, [r7, #68]	; 0x44
 80129f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129fc:	e841 2300 	strex	r3, r2, [r1]
 8012a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d1e4      	bne.n	80129d2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	69db      	ldr	r3, [r3, #28]
 8012a0e:	f003 0310 	and.w	r3, r3, #16
 8012a12:	2b10      	cmp	r3, #16
 8012a14:	d103      	bne.n	8012a1e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	2210      	movs	r2, #16
 8012a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a24:	4619      	mov	r1, r3
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f7fe f97e 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
 8012a2c:	e002      	b.n	8012a34 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f7ed fe2a 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a34:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d006      	beq.n	8012a4a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012a3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a40:	f003 0320 	and.w	r3, r3, #32
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f47f aecd 	bne.w	80127e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a50:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012a54:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d049      	beq.n	8012af0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a62:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d242      	bcs.n	8012af0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	3308      	adds	r3, #8
 8012a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a74:	e853 3f00 	ldrex	r3, [r3]
 8012a78:	623b      	str	r3, [r7, #32]
   return(result);
 8012a7a:	6a3b      	ldr	r3, [r7, #32]
 8012a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	3308      	adds	r3, #8
 8012a8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8012a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a96:	e841 2300 	strex	r3, r2, [r1]
 8012a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d1e3      	bne.n	8012a6a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4a16      	ldr	r2, [pc, #88]	; (8012b00 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012aa6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	e853 3f00 	ldrex	r3, [r3]
 8012ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	f043 0320 	orr.w	r3, r3, #32
 8012abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012aca:	61fb      	str	r3, [r7, #28]
 8012acc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ace:	69b9      	ldr	r1, [r7, #24]
 8012ad0:	69fa      	ldr	r2, [r7, #28]
 8012ad2:	e841 2300 	strex	r3, r2, [r1]
 8012ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1e4      	bne.n	8012aa8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012ade:	e007      	b.n	8012af0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	699a      	ldr	r2, [r3, #24]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f042 0208 	orr.w	r2, r2, #8
 8012aee:	619a      	str	r2, [r3, #24]
}
 8012af0:	bf00      	nop
 8012af2:	37b8      	adds	r7, #184	; 0xb8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	effffffe 	.word	0xeffffffe
 8012afc:	58000c00 	.word	0x58000c00
 8012b00:	08012285 	.word	0x08012285

08012b04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012b0c:	bf00      	nop
 8012b0e:	370c      	adds	r7, #12
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b083      	sub	sp, #12
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012b20:	bf00      	nop
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012b34:	bf00      	nop
 8012b36:	370c      	adds	r7, #12
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b089      	sub	sp, #36	; 0x24
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d101      	bne.n	8012b56 <HAL_UARTEx_EnableStopMode+0x16>
 8012b52:	2302      	movs	r3, #2
 8012b54:	e021      	b.n	8012b9a <HAL_UARTEx_EnableStopMode+0x5a>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2201      	movs	r2, #1
 8012b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	e853 3f00 	ldrex	r3, [r3]
 8012b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	f043 0302 	orr.w	r3, r3, #2
 8012b72:	61fb      	str	r3, [r7, #28]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	461a      	mov	r2, r3
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	61bb      	str	r3, [r7, #24]
 8012b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b80:	6979      	ldr	r1, [r7, #20]
 8012b82:	69ba      	ldr	r2, [r7, #24]
 8012b84:	e841 2300 	strex	r3, r2, [r1]
 8012b88:	613b      	str	r3, [r7, #16]
   return(result);
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d1e6      	bne.n	8012b5e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2200      	movs	r2, #0
 8012b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b98:	2300      	movs	r3, #0
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3724      	adds	r7, #36	; 0x24
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr

08012ba6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012ba6:	b580      	push	{r7, lr}
 8012ba8:	b084      	sub	sp, #16
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d101      	bne.n	8012bbc <HAL_UARTEx_EnableFifoMode+0x16>
 8012bb8:	2302      	movs	r3, #2
 8012bba:	e02b      	b.n	8012c14 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2224      	movs	r2, #36	; 0x24
 8012bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f022 0201 	bic.w	r2, r2, #1
 8012be2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012bea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012bf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f000 f8c3 	bl	8012d88 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2220      	movs	r2, #32
 8012c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d101      	bne.n	8012c32 <HAL_UARTEx_DisableFifoMode+0x16>
 8012c2e:	2302      	movs	r3, #2
 8012c30:	e027      	b.n	8012c82 <HAL_UARTEx_DisableFifoMode+0x66>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2201      	movs	r2, #1
 8012c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2224      	movs	r2, #36	; 0x24
 8012c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	f022 0201 	bic.w	r2, r2, #1
 8012c58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2200      	movs	r2, #0
 8012c66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	68fa      	ldr	r2, [r7, #12]
 8012c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2220      	movs	r2, #32
 8012c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3714      	adds	r7, #20
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr

08012c8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c8e:	b580      	push	{r7, lr}
 8012c90:	b084      	sub	sp, #16
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
 8012c96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	d101      	bne.n	8012ca6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012ca2:	2302      	movs	r3, #2
 8012ca4:	e02d      	b.n	8012d02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2201      	movs	r2, #1
 8012caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2224      	movs	r2, #36	; 0x24
 8012cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f022 0201 	bic.w	r2, r2, #1
 8012ccc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	689b      	ldr	r3, [r3, #8]
 8012cd4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	683a      	ldr	r2, [r7, #0]
 8012cde:	430a      	orrs	r2, r1
 8012ce0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 f850 	bl	8012d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2220      	movs	r2, #32
 8012cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
 8012d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d101      	bne.n	8012d22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012d1e:	2302      	movs	r3, #2
 8012d20:	e02d      	b.n	8012d7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2201      	movs	r2, #1
 8012d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2224      	movs	r2, #36	; 0x24
 8012d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f022 0201 	bic.w	r2, r2, #1
 8012d48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	683a      	ldr	r2, [r7, #0]
 8012d5a:	430a      	orrs	r2, r1
 8012d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f000 f812 	bl	8012d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2220      	movs	r2, #32
 8012d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2200      	movs	r2, #0
 8012d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d7c:	2300      	movs	r3, #0
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
	...

08012d88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d108      	bne.n	8012daa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2201      	movs	r2, #1
 8012da4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012da8:	e031      	b.n	8012e0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012daa:	2310      	movs	r3, #16
 8012dac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012dae:	2310      	movs	r3, #16
 8012db0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	689b      	ldr	r3, [r3, #8]
 8012db8:	0e5b      	lsrs	r3, r3, #25
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	f003 0307 	and.w	r3, r3, #7
 8012dc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	0f5b      	lsrs	r3, r3, #29
 8012dca:	b2db      	uxtb	r3, r3
 8012dcc:	f003 0307 	and.w	r3, r3, #7
 8012dd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012dd2:	7bbb      	ldrb	r3, [r7, #14]
 8012dd4:	7b3a      	ldrb	r2, [r7, #12]
 8012dd6:	4911      	ldr	r1, [pc, #68]	; (8012e1c <UARTEx_SetNbDataToProcess+0x94>)
 8012dd8:	5c8a      	ldrb	r2, [r1, r2]
 8012dda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012dde:	7b3a      	ldrb	r2, [r7, #12]
 8012de0:	490f      	ldr	r1, [pc, #60]	; (8012e20 <UARTEx_SetNbDataToProcess+0x98>)
 8012de2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012de4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012de8:	b29a      	uxth	r2, r3
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012df0:	7bfb      	ldrb	r3, [r7, #15]
 8012df2:	7b7a      	ldrb	r2, [r7, #13]
 8012df4:	4909      	ldr	r1, [pc, #36]	; (8012e1c <UARTEx_SetNbDataToProcess+0x94>)
 8012df6:	5c8a      	ldrb	r2, [r1, r2]
 8012df8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012dfc:	7b7a      	ldrb	r2, [r7, #13]
 8012dfe:	4908      	ldr	r1, [pc, #32]	; (8012e20 <UARTEx_SetNbDataToProcess+0x98>)
 8012e00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e02:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012e0e:	bf00      	nop
 8012e10:	3714      	adds	r7, #20
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop
 8012e1c:	08017760 	.word	0x08017760
 8012e20:	08017768 	.word	0x08017768

08012e24 <__NVIC_SetPriority>:
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	6039      	str	r1, [r7, #0]
 8012e2e:	80fb      	strh	r3, [r7, #6]
 8012e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	db0a      	blt.n	8012e4e <__NVIC_SetPriority+0x2a>
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	b2da      	uxtb	r2, r3
 8012e3c:	490c      	ldr	r1, [pc, #48]	; (8012e70 <__NVIC_SetPriority+0x4c>)
 8012e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e42:	0112      	lsls	r2, r2, #4
 8012e44:	b2d2      	uxtb	r2, r2
 8012e46:	440b      	add	r3, r1
 8012e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8012e4c:	e00a      	b.n	8012e64 <__NVIC_SetPriority+0x40>
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	4908      	ldr	r1, [pc, #32]	; (8012e74 <__NVIC_SetPriority+0x50>)
 8012e54:	88fb      	ldrh	r3, [r7, #6]
 8012e56:	f003 030f 	and.w	r3, r3, #15
 8012e5a:	3b04      	subs	r3, #4
 8012e5c:	0112      	lsls	r2, r2, #4
 8012e5e:	b2d2      	uxtb	r2, r2
 8012e60:	440b      	add	r3, r1
 8012e62:	761a      	strb	r2, [r3, #24]
 8012e64:	bf00      	nop
 8012e66:	370c      	adds	r7, #12
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr
 8012e70:	e000e100 	.word	0xe000e100
 8012e74:	e000ed00 	.word	0xe000ed00

08012e78 <SysTick_Handler>:
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	4b05      	ldr	r3, [pc, #20]	; (8012e94 <SysTick_Handler+0x1c>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	f002 fc92 	bl	80157a8 <xTaskGetSchedulerState>
 8012e84:	4603      	mov	r3, r0
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d001      	beq.n	8012e8e <SysTick_Handler+0x16>
 8012e8a:	f003 fab5 	bl	80163f8 <xPortSysTickHandler>
 8012e8e:	bf00      	nop
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	e000e010 	.word	0xe000e010

08012e98 <SVC_Setup>:
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	f06f 0004 	mvn.w	r0, #4
 8012ea2:	f7ff ffbf 	bl	8012e24 <__NVIC_SetPriority>
 8012ea6:	bf00      	nop
 8012ea8:	bd80      	pop	{r7, pc}
	...

08012eac <osKernelInitialize>:
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	f3ef 8305 	mrs	r3, IPSR
 8012eb6:	603b      	str	r3, [r7, #0]
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d003      	beq.n	8012ec6 <osKernelInitialize+0x1a>
 8012ebe:	f06f 0305 	mvn.w	r3, #5
 8012ec2:	607b      	str	r3, [r7, #4]
 8012ec4:	e00c      	b.n	8012ee0 <osKernelInitialize+0x34>
 8012ec6:	4b0a      	ldr	r3, [pc, #40]	; (8012ef0 <osKernelInitialize+0x44>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d105      	bne.n	8012eda <osKernelInitialize+0x2e>
 8012ece:	4b08      	ldr	r3, [pc, #32]	; (8012ef0 <osKernelInitialize+0x44>)
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	601a      	str	r2, [r3, #0]
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	607b      	str	r3, [r7, #4]
 8012ed8:	e002      	b.n	8012ee0 <osKernelInitialize+0x34>
 8012eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ede:	607b      	str	r3, [r7, #4]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	370c      	adds	r7, #12
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop
 8012ef0:	24001130 	.word	0x24001130

08012ef4 <osKernelStart>:
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	f3ef 8305 	mrs	r3, IPSR
 8012efe:	603b      	str	r3, [r7, #0]
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d003      	beq.n	8012f0e <osKernelStart+0x1a>
 8012f06:	f06f 0305 	mvn.w	r3, #5
 8012f0a:	607b      	str	r3, [r7, #4]
 8012f0c:	e010      	b.n	8012f30 <osKernelStart+0x3c>
 8012f0e:	4b0b      	ldr	r3, [pc, #44]	; (8012f3c <osKernelStart+0x48>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d109      	bne.n	8012f2a <osKernelStart+0x36>
 8012f16:	f7ff ffbf 	bl	8012e98 <SVC_Setup>
 8012f1a:	4b08      	ldr	r3, [pc, #32]	; (8012f3c <osKernelStart+0x48>)
 8012f1c:	2202      	movs	r2, #2
 8012f1e:	601a      	str	r2, [r3, #0]
 8012f20:	f001 ff54 	bl	8014dcc <vTaskStartScheduler>
 8012f24:	2300      	movs	r3, #0
 8012f26:	607b      	str	r3, [r7, #4]
 8012f28:	e002      	b.n	8012f30 <osKernelStart+0x3c>
 8012f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f2e:	607b      	str	r3, [r7, #4]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	4618      	mov	r0, r3
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	24001130 	.word	0x24001130

08012f40 <osThreadNew>:
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b08e      	sub	sp, #56	; 0x38
 8012f44:	af04      	add	r7, sp, #16
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	607a      	str	r2, [r7, #4]
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	613b      	str	r3, [r7, #16]
 8012f50:	f3ef 8305 	mrs	r3, IPSR
 8012f54:	617b      	str	r3, [r7, #20]
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d17e      	bne.n	801305a <osThreadNew+0x11a>
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d07b      	beq.n	801305a <osThreadNew+0x11a>
 8012f62:	2380      	movs	r3, #128	; 0x80
 8012f64:	623b      	str	r3, [r7, #32]
 8012f66:	2318      	movs	r3, #24
 8012f68:	61fb      	str	r3, [r7, #28]
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8012f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f72:	61bb      	str	r3, [r7, #24]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d045      	beq.n	8013006 <osThreadNew+0xc6>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d002      	beq.n	8012f88 <osThreadNew+0x48>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	627b      	str	r3, [r7, #36]	; 0x24
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	699b      	ldr	r3, [r3, #24]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d002      	beq.n	8012f96 <osThreadNew+0x56>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	699b      	ldr	r3, [r3, #24]
 8012f94:	61fb      	str	r3, [r7, #28]
 8012f96:	69fb      	ldr	r3, [r7, #28]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d008      	beq.n	8012fae <osThreadNew+0x6e>
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	2b38      	cmp	r3, #56	; 0x38
 8012fa0:	d805      	bhi.n	8012fae <osThreadNew+0x6e>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	f003 0301 	and.w	r3, r3, #1
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d001      	beq.n	8012fb2 <osThreadNew+0x72>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	e054      	b.n	801305c <osThreadNew+0x11c>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	695b      	ldr	r3, [r3, #20]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d003      	beq.n	8012fc2 <osThreadNew+0x82>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	695b      	ldr	r3, [r3, #20]
 8012fbe:	089b      	lsrs	r3, r3, #2
 8012fc0:	623b      	str	r3, [r7, #32]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	689b      	ldr	r3, [r3, #8]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00e      	beq.n	8012fe8 <osThreadNew+0xa8>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	2b5b      	cmp	r3, #91	; 0x5b
 8012fd0:	d90a      	bls.n	8012fe8 <osThreadNew+0xa8>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	691b      	ldr	r3, [r3, #16]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d006      	beq.n	8012fe8 <osThreadNew+0xa8>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	695b      	ldr	r3, [r3, #20]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d002      	beq.n	8012fe8 <osThreadNew+0xa8>
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	61bb      	str	r3, [r7, #24]
 8012fe6:	e010      	b.n	801300a <osThreadNew+0xca>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10c      	bne.n	801300a <osThreadNew+0xca>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	68db      	ldr	r3, [r3, #12]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d108      	bne.n	801300a <osThreadNew+0xca>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d104      	bne.n	801300a <osThreadNew+0xca>
 8013000:	2300      	movs	r3, #0
 8013002:	61bb      	str	r3, [r7, #24]
 8013004:	e001      	b.n	801300a <osThreadNew+0xca>
 8013006:	2300      	movs	r3, #0
 8013008:	61bb      	str	r3, [r7, #24]
 801300a:	69bb      	ldr	r3, [r7, #24]
 801300c:	2b01      	cmp	r3, #1
 801300e:	d110      	bne.n	8013032 <osThreadNew+0xf2>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	691b      	ldr	r3, [r3, #16]
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	6892      	ldr	r2, [r2, #8]
 8013018:	9202      	str	r2, [sp, #8]
 801301a:	9301      	str	r3, [sp, #4]
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	6a3a      	ldr	r2, [r7, #32]
 8013024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f001 fbe0 	bl	80147ec <xTaskCreateStatic>
 801302c:	4603      	mov	r3, r0
 801302e:	613b      	str	r3, [r7, #16]
 8013030:	e013      	b.n	801305a <osThreadNew+0x11a>
 8013032:	69bb      	ldr	r3, [r7, #24]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d110      	bne.n	801305a <osThreadNew+0x11a>
 8013038:	6a3b      	ldr	r3, [r7, #32]
 801303a:	b29a      	uxth	r2, r3
 801303c:	f107 0310 	add.w	r3, r7, #16
 8013040:	9301      	str	r3, [sp, #4]
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	9300      	str	r3, [sp, #0]
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801304a:	68f8      	ldr	r0, [r7, #12]
 801304c:	f001 fc2b 	bl	80148a6 <xTaskCreate>
 8013050:	4603      	mov	r3, r0
 8013052:	2b01      	cmp	r3, #1
 8013054:	d001      	beq.n	801305a <osThreadNew+0x11a>
 8013056:	2300      	movs	r3, #0
 8013058:	613b      	str	r3, [r7, #16]
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	4618      	mov	r0, r3
 801305e:	3728      	adds	r7, #40	; 0x28
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <osThreadYield>:
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	f3ef 8305 	mrs	r3, IPSR
 801306e:	603b      	str	r3, [r7, #0]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d003      	beq.n	801307e <osThreadYield+0x1a>
 8013076:	f06f 0305 	mvn.w	r3, #5
 801307a:	607b      	str	r3, [r7, #4]
 801307c:	e009      	b.n	8013092 <osThreadYield+0x2e>
 801307e:	2300      	movs	r3, #0
 8013080:	607b      	str	r3, [r7, #4]
 8013082:	4b07      	ldr	r3, [pc, #28]	; (80130a0 <osThreadYield+0x3c>)
 8013084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013088:	601a      	str	r2, [r3, #0]
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	f3bf 8f6f 	isb	sy
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	4618      	mov	r0, r3
 8013096:	370c      	adds	r7, #12
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr
 80130a0:	e000ed04 	.word	0xe000ed04

080130a4 <osThreadSuspend>:
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b086      	sub	sp, #24
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	613b      	str	r3, [r7, #16]
 80130b0:	f3ef 8305 	mrs	r3, IPSR
 80130b4:	60fb      	str	r3, [r7, #12]
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d003      	beq.n	80130c4 <osThreadSuspend+0x20>
 80130bc:	f06f 0305 	mvn.w	r3, #5
 80130c0:	617b      	str	r3, [r7, #20]
 80130c2:	e00b      	b.n	80130dc <osThreadSuspend+0x38>
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d103      	bne.n	80130d2 <osThreadSuspend+0x2e>
 80130ca:	f06f 0303 	mvn.w	r3, #3
 80130ce:	617b      	str	r3, [r7, #20]
 80130d0:	e004      	b.n	80130dc <osThreadSuspend+0x38>
 80130d2:	2300      	movs	r3, #0
 80130d4:	617b      	str	r3, [r7, #20]
 80130d6:	6938      	ldr	r0, [r7, #16]
 80130d8:	f001 fd5e 	bl	8014b98 <vTaskSuspend>
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	4618      	mov	r0, r3
 80130e0:	3718      	adds	r7, #24
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <osDelay>:
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b084      	sub	sp, #16
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	f3ef 8305 	mrs	r3, IPSR
 80130f2:	60bb      	str	r3, [r7, #8]
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d003      	beq.n	8013102 <osDelay+0x1c>
 80130fa:	f06f 0305 	mvn.w	r3, #5
 80130fe:	60fb      	str	r3, [r7, #12]
 8013100:	e007      	b.n	8013112 <osDelay+0x2c>
 8013102:	2300      	movs	r3, #0
 8013104:	60fb      	str	r3, [r7, #12]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <osDelay+0x2c>
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f001 fd0f 	bl	8014b30 <vTaskDelay>
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	4618      	mov	r0, r3
 8013116:	3710      	adds	r7, #16
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}

0801311c <osEventFlagsNew>:
 801311c:	b580      	push	{r7, lr}
 801311e:	b086      	sub	sp, #24
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	2300      	movs	r3, #0
 8013126:	617b      	str	r3, [r7, #20]
 8013128:	f3ef 8305 	mrs	r3, IPSR
 801312c:	60fb      	str	r3, [r7, #12]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d12d      	bne.n	8013190 <osEventFlagsNew+0x74>
 8013134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013138:	613b      	str	r3, [r7, #16]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d015      	beq.n	801316c <osEventFlagsNew+0x50>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	689b      	ldr	r3, [r3, #8]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d006      	beq.n	8013156 <osEventFlagsNew+0x3a>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	2b1f      	cmp	r3, #31
 801314e:	d902      	bls.n	8013156 <osEventFlagsNew+0x3a>
 8013150:	2301      	movs	r3, #1
 8013152:	613b      	str	r3, [r7, #16]
 8013154:	e00c      	b.n	8013170 <osEventFlagsNew+0x54>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	689b      	ldr	r3, [r3, #8]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d108      	bne.n	8013170 <osEventFlagsNew+0x54>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d104      	bne.n	8013170 <osEventFlagsNew+0x54>
 8013166:	2300      	movs	r3, #0
 8013168:	613b      	str	r3, [r7, #16]
 801316a:	e001      	b.n	8013170 <osEventFlagsNew+0x54>
 801316c:	2300      	movs	r3, #0
 801316e:	613b      	str	r3, [r7, #16]
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	2b01      	cmp	r3, #1
 8013174:	d106      	bne.n	8013184 <osEventFlagsNew+0x68>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	689b      	ldr	r3, [r3, #8]
 801317a:	4618      	mov	r0, r3
 801317c:	f000 fa70 	bl	8013660 <xEventGroupCreateStatic>
 8013180:	6178      	str	r0, [r7, #20]
 8013182:	e005      	b.n	8013190 <osEventFlagsNew+0x74>
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d102      	bne.n	8013190 <osEventFlagsNew+0x74>
 801318a:	f000 faa0 	bl	80136ce <xEventGroupCreate>
 801318e:	6178      	str	r0, [r7, #20]
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	4618      	mov	r0, r3
 8013194:	3718      	adds	r7, #24
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
	...

0801319c <osEventFlagsSet>:
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	613b      	str	r3, [r7, #16]
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d004      	beq.n	80131ba <osEventFlagsSet+0x1e>
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d003      	beq.n	80131c2 <osEventFlagsSet+0x26>
 80131ba:	f06f 0303 	mvn.w	r3, #3
 80131be:	617b      	str	r3, [r7, #20]
 80131c0:	e028      	b.n	8013214 <osEventFlagsSet+0x78>
 80131c2:	f3ef 8305 	mrs	r3, IPSR
 80131c6:	60fb      	str	r3, [r7, #12]
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d01d      	beq.n	801320a <osEventFlagsSet+0x6e>
 80131ce:	2300      	movs	r3, #0
 80131d0:	60bb      	str	r3, [r7, #8]
 80131d2:	f107 0308 	add.w	r3, r7, #8
 80131d6:	461a      	mov	r2, r3
 80131d8:	6839      	ldr	r1, [r7, #0]
 80131da:	6938      	ldr	r0, [r7, #16]
 80131dc:	f000 fc98 	bl	8013b10 <xEventGroupSetBitsFromISR>
 80131e0:	4603      	mov	r3, r0
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d103      	bne.n	80131ee <osEventFlagsSet+0x52>
 80131e6:	f06f 0302 	mvn.w	r3, #2
 80131ea:	617b      	str	r3, [r7, #20]
 80131ec:	e012      	b.n	8013214 <osEventFlagsSet+0x78>
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	617b      	str	r3, [r7, #20]
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d00d      	beq.n	8013214 <osEventFlagsSet+0x78>
 80131f8:	4b09      	ldr	r3, [pc, #36]	; (8013220 <osEventFlagsSet+0x84>)
 80131fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131fe:	601a      	str	r2, [r3, #0]
 8013200:	f3bf 8f4f 	dsb	sy
 8013204:	f3bf 8f6f 	isb	sy
 8013208:	e004      	b.n	8013214 <osEventFlagsSet+0x78>
 801320a:	6839      	ldr	r1, [r7, #0]
 801320c:	6938      	ldr	r0, [r7, #16]
 801320e:	f000 fbb7 	bl	8013980 <xEventGroupSetBits>
 8013212:	6178      	str	r0, [r7, #20]
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	4618      	mov	r0, r3
 8013218:	3718      	adds	r7, #24
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	e000ed04 	.word	0xe000ed04

08013224 <osEventFlagsClear>:
 8013224:	b580      	push	{r7, lr}
 8013226:	b086      	sub	sp, #24
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	613b      	str	r3, [r7, #16]
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d004      	beq.n	8013242 <osEventFlagsClear+0x1e>
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801323e:	2b00      	cmp	r3, #0
 8013240:	d003      	beq.n	801324a <osEventFlagsClear+0x26>
 8013242:	f06f 0303 	mvn.w	r3, #3
 8013246:	617b      	str	r3, [r7, #20]
 8013248:	e019      	b.n	801327e <osEventFlagsClear+0x5a>
 801324a:	f3ef 8305 	mrs	r3, IPSR
 801324e:	60fb      	str	r3, [r7, #12]
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d00e      	beq.n	8013274 <osEventFlagsClear+0x50>
 8013256:	6938      	ldr	r0, [r7, #16]
 8013258:	f000 fb6e 	bl	8013938 <xEventGroupGetBitsFromISR>
 801325c:	6178      	str	r0, [r7, #20]
 801325e:	6839      	ldr	r1, [r7, #0]
 8013260:	6938      	ldr	r0, [r7, #16]
 8013262:	f000 fb55 	bl	8013910 <xEventGroupClearBitsFromISR>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d108      	bne.n	801327e <osEventFlagsClear+0x5a>
 801326c:	f06f 0302 	mvn.w	r3, #2
 8013270:	617b      	str	r3, [r7, #20]
 8013272:	e004      	b.n	801327e <osEventFlagsClear+0x5a>
 8013274:	6839      	ldr	r1, [r7, #0]
 8013276:	6938      	ldr	r0, [r7, #16]
 8013278:	f000 fb12 	bl	80138a0 <xEventGroupClearBits>
 801327c:	6178      	str	r0, [r7, #20]
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	4618      	mov	r0, r3
 8013282:	3718      	adds	r7, #24
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <osEventFlagsGet>:
 8013288:	b580      	push	{r7, lr}
 801328a:	b086      	sub	sp, #24
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	613b      	str	r3, [r7, #16]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d102      	bne.n	80132a0 <osEventFlagsGet+0x18>
 801329a:	2300      	movs	r3, #0
 801329c:	617b      	str	r3, [r7, #20]
 801329e:	e00f      	b.n	80132c0 <osEventFlagsGet+0x38>
 80132a0:	f3ef 8305 	mrs	r3, IPSR
 80132a4:	60fb      	str	r3, [r7, #12]
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d004      	beq.n	80132b6 <osEventFlagsGet+0x2e>
 80132ac:	6938      	ldr	r0, [r7, #16]
 80132ae:	f000 fb43 	bl	8013938 <xEventGroupGetBitsFromISR>
 80132b2:	6178      	str	r0, [r7, #20]
 80132b4:	e004      	b.n	80132c0 <osEventFlagsGet+0x38>
 80132b6:	2100      	movs	r1, #0
 80132b8:	6938      	ldr	r0, [r7, #16]
 80132ba:	f000 faf1 	bl	80138a0 <xEventGroupClearBits>
 80132be:	6178      	str	r0, [r7, #20]
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	4618      	mov	r0, r3
 80132c4:	3718      	adds	r7, #24
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <osEventFlagsWait>:
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b08c      	sub	sp, #48	; 0x30
 80132ce:	af02      	add	r7, sp, #8
 80132d0:	60f8      	str	r0, [r7, #12]
 80132d2:	60b9      	str	r1, [r7, #8]
 80132d4:	607a      	str	r2, [r7, #4]
 80132d6:	603b      	str	r3, [r7, #0]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	61bb      	str	r3, [r7, #24]
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d004      	beq.n	80132ec <osEventFlagsWait+0x22>
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d003      	beq.n	80132f4 <osEventFlagsWait+0x2a>
 80132ec:	f06f 0303 	mvn.w	r3, #3
 80132f0:	61fb      	str	r3, [r7, #28]
 80132f2:	e04b      	b.n	801338c <osEventFlagsWait+0xc2>
 80132f4:	f3ef 8305 	mrs	r3, IPSR
 80132f8:	617b      	str	r3, [r7, #20]
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d003      	beq.n	8013308 <osEventFlagsWait+0x3e>
 8013300:	f06f 0305 	mvn.w	r3, #5
 8013304:	61fb      	str	r3, [r7, #28]
 8013306:	e041      	b.n	801338c <osEventFlagsWait+0xc2>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f003 0301 	and.w	r3, r3, #1
 801330e:	2b00      	cmp	r3, #0
 8013310:	d002      	beq.n	8013318 <osEventFlagsWait+0x4e>
 8013312:	2301      	movs	r3, #1
 8013314:	627b      	str	r3, [r7, #36]	; 0x24
 8013316:	e001      	b.n	801331c <osEventFlagsWait+0x52>
 8013318:	2300      	movs	r3, #0
 801331a:	627b      	str	r3, [r7, #36]	; 0x24
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f003 0302 	and.w	r3, r3, #2
 8013322:	2b00      	cmp	r3, #0
 8013324:	d002      	beq.n	801332c <osEventFlagsWait+0x62>
 8013326:	2300      	movs	r3, #0
 8013328:	623b      	str	r3, [r7, #32]
 801332a:	e001      	b.n	8013330 <osEventFlagsWait+0x66>
 801332c:	2301      	movs	r3, #1
 801332e:	623b      	str	r3, [r7, #32]
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013336:	6a3a      	ldr	r2, [r7, #32]
 8013338:	68b9      	ldr	r1, [r7, #8]
 801333a:	69b8      	ldr	r0, [r7, #24]
 801333c:	f000 f9e2 	bl	8013704 <xEventGroupWaitBits>
 8013340:	61f8      	str	r0, [r7, #28]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f003 0301 	and.w	r3, r3, #1
 8013348:	2b00      	cmp	r3, #0
 801334a:	d010      	beq.n	801336e <osEventFlagsWait+0xa4>
 801334c:	68ba      	ldr	r2, [r7, #8]
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	4013      	ands	r3, r2
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	429a      	cmp	r2, r3
 8013356:	d019      	beq.n	801338c <osEventFlagsWait+0xc2>
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d003      	beq.n	8013366 <osEventFlagsWait+0x9c>
 801335e:	f06f 0301 	mvn.w	r3, #1
 8013362:	61fb      	str	r3, [r7, #28]
 8013364:	e012      	b.n	801338c <osEventFlagsWait+0xc2>
 8013366:	f06f 0302 	mvn.w	r3, #2
 801336a:	61fb      	str	r3, [r7, #28]
 801336c:	e00e      	b.n	801338c <osEventFlagsWait+0xc2>
 801336e:	68ba      	ldr	r2, [r7, #8]
 8013370:	69fb      	ldr	r3, [r7, #28]
 8013372:	4013      	ands	r3, r2
 8013374:	2b00      	cmp	r3, #0
 8013376:	d109      	bne.n	801338c <osEventFlagsWait+0xc2>
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d003      	beq.n	8013386 <osEventFlagsWait+0xbc>
 801337e:	f06f 0301 	mvn.w	r3, #1
 8013382:	61fb      	str	r3, [r7, #28]
 8013384:	e002      	b.n	801338c <osEventFlagsWait+0xc2>
 8013386:	f06f 0302 	mvn.w	r3, #2
 801338a:	61fb      	str	r3, [r7, #28]
 801338c:	69fb      	ldr	r3, [r7, #28]
 801338e:	4618      	mov	r0, r3
 8013390:	3728      	adds	r7, #40	; 0x28
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <osMessageQueueNew>:
 8013396:	b580      	push	{r7, lr}
 8013398:	b08a      	sub	sp, #40	; 0x28
 801339a:	af02      	add	r7, sp, #8
 801339c:	60f8      	str	r0, [r7, #12]
 801339e:	60b9      	str	r1, [r7, #8]
 80133a0:	607a      	str	r2, [r7, #4]
 80133a2:	2300      	movs	r3, #0
 80133a4:	61fb      	str	r3, [r7, #28]
 80133a6:	f3ef 8305 	mrs	r3, IPSR
 80133aa:	613b      	str	r3, [r7, #16]
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d15f      	bne.n	8013472 <osMessageQueueNew+0xdc>
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d05c      	beq.n	8013472 <osMessageQueueNew+0xdc>
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d059      	beq.n	8013472 <osMessageQueueNew+0xdc>
 80133be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133c2:	61bb      	str	r3, [r7, #24]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d029      	beq.n	801341e <osMessageQueueNew+0x88>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	689b      	ldr	r3, [r3, #8]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d012      	beq.n	80133f8 <osMessageQueueNew+0x62>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	68db      	ldr	r3, [r3, #12]
 80133d6:	2b4f      	cmp	r3, #79	; 0x4f
 80133d8:	d90e      	bls.n	80133f8 <osMessageQueueNew+0x62>
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	691b      	ldr	r3, [r3, #16]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d00a      	beq.n	80133f8 <osMessageQueueNew+0x62>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	695a      	ldr	r2, [r3, #20]
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	68b9      	ldr	r1, [r7, #8]
 80133ea:	fb01 f303 	mul.w	r3, r1, r3
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d302      	bcc.n	80133f8 <osMessageQueueNew+0x62>
 80133f2:	2301      	movs	r3, #1
 80133f4:	61bb      	str	r3, [r7, #24]
 80133f6:	e014      	b.n	8013422 <osMessageQueueNew+0x8c>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	689b      	ldr	r3, [r3, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d110      	bne.n	8013422 <osMessageQueueNew+0x8c>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10c      	bne.n	8013422 <osMessageQueueNew+0x8c>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	691b      	ldr	r3, [r3, #16]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d108      	bne.n	8013422 <osMessageQueueNew+0x8c>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	695b      	ldr	r3, [r3, #20]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d104      	bne.n	8013422 <osMessageQueueNew+0x8c>
 8013418:	2300      	movs	r3, #0
 801341a:	61bb      	str	r3, [r7, #24]
 801341c:	e001      	b.n	8013422 <osMessageQueueNew+0x8c>
 801341e:	2300      	movs	r3, #0
 8013420:	61bb      	str	r3, [r7, #24]
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	2b01      	cmp	r3, #1
 8013426:	d10b      	bne.n	8013440 <osMessageQueueNew+0xaa>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	691a      	ldr	r2, [r3, #16]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	2100      	movs	r1, #0
 8013432:	9100      	str	r1, [sp, #0]
 8013434:	68b9      	ldr	r1, [r7, #8]
 8013436:	68f8      	ldr	r0, [r7, #12]
 8013438:	f000 fc9a 	bl	8013d70 <xQueueGenericCreateStatic>
 801343c:	61f8      	str	r0, [r7, #28]
 801343e:	e008      	b.n	8013452 <osMessageQueueNew+0xbc>
 8013440:	69bb      	ldr	r3, [r7, #24]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d105      	bne.n	8013452 <osMessageQueueNew+0xbc>
 8013446:	2200      	movs	r2, #0
 8013448:	68b9      	ldr	r1, [r7, #8]
 801344a:	68f8      	ldr	r0, [r7, #12]
 801344c:	f000 fd08 	bl	8013e60 <xQueueGenericCreate>
 8013450:	61f8      	str	r0, [r7, #28]
 8013452:	69fb      	ldr	r3, [r7, #28]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d00c      	beq.n	8013472 <osMessageQueueNew+0xdc>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d003      	beq.n	8013466 <osMessageQueueNew+0xd0>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	617b      	str	r3, [r7, #20]
 8013464:	e001      	b.n	801346a <osMessageQueueNew+0xd4>
 8013466:	2300      	movs	r3, #0
 8013468:	617b      	str	r3, [r7, #20]
 801346a:	6979      	ldr	r1, [r7, #20]
 801346c:	69f8      	ldr	r0, [r7, #28]
 801346e:	f001 f95f 	bl	8014730 <vQueueAddToRegistry>
 8013472:	69fb      	ldr	r3, [r7, #28]
 8013474:	4618      	mov	r0, r3
 8013476:	3720      	adds	r7, #32
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <osMessageQueuePut>:
 801347c:	b580      	push	{r7, lr}
 801347e:	b088      	sub	sp, #32
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	603b      	str	r3, [r7, #0]
 8013488:	4613      	mov	r3, r2
 801348a:	71fb      	strb	r3, [r7, #7]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	61bb      	str	r3, [r7, #24]
 8013490:	2300      	movs	r3, #0
 8013492:	61fb      	str	r3, [r7, #28]
 8013494:	f3ef 8305 	mrs	r3, IPSR
 8013498:	617b      	str	r3, [r7, #20]
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d028      	beq.n	80134f2 <osMessageQueuePut+0x76>
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d005      	beq.n	80134b2 <osMessageQueuePut+0x36>
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d002      	beq.n	80134b2 <osMessageQueuePut+0x36>
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d003      	beq.n	80134ba <osMessageQueuePut+0x3e>
 80134b2:	f06f 0303 	mvn.w	r3, #3
 80134b6:	61fb      	str	r3, [r7, #28]
 80134b8:	e038      	b.n	801352c <osMessageQueuePut+0xb0>
 80134ba:	2300      	movs	r3, #0
 80134bc:	613b      	str	r3, [r7, #16]
 80134be:	f107 0210 	add.w	r2, r7, #16
 80134c2:	2300      	movs	r3, #0
 80134c4:	68b9      	ldr	r1, [r7, #8]
 80134c6:	69b8      	ldr	r0, [r7, #24]
 80134c8:	f000 fe26 	bl	8014118 <xQueueGenericSendFromISR>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	d003      	beq.n	80134da <osMessageQueuePut+0x5e>
 80134d2:	f06f 0302 	mvn.w	r3, #2
 80134d6:	61fb      	str	r3, [r7, #28]
 80134d8:	e028      	b.n	801352c <osMessageQueuePut+0xb0>
 80134da:	693b      	ldr	r3, [r7, #16]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d025      	beq.n	801352c <osMessageQueuePut+0xb0>
 80134e0:	4b15      	ldr	r3, [pc, #84]	; (8013538 <osMessageQueuePut+0xbc>)
 80134e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134e6:	601a      	str	r2, [r3, #0]
 80134e8:	f3bf 8f4f 	dsb	sy
 80134ec:	f3bf 8f6f 	isb	sy
 80134f0:	e01c      	b.n	801352c <osMessageQueuePut+0xb0>
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <osMessageQueuePut+0x82>
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d103      	bne.n	8013506 <osMessageQueuePut+0x8a>
 80134fe:	f06f 0303 	mvn.w	r3, #3
 8013502:	61fb      	str	r3, [r7, #28]
 8013504:	e012      	b.n	801352c <osMessageQueuePut+0xb0>
 8013506:	2300      	movs	r3, #0
 8013508:	683a      	ldr	r2, [r7, #0]
 801350a:	68b9      	ldr	r1, [r7, #8]
 801350c:	69b8      	ldr	r0, [r7, #24]
 801350e:	f000 fd05 	bl	8013f1c <xQueueGenericSend>
 8013512:	4603      	mov	r3, r0
 8013514:	2b01      	cmp	r3, #1
 8013516:	d009      	beq.n	801352c <osMessageQueuePut+0xb0>
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d003      	beq.n	8013526 <osMessageQueuePut+0xaa>
 801351e:	f06f 0301 	mvn.w	r3, #1
 8013522:	61fb      	str	r3, [r7, #28]
 8013524:	e002      	b.n	801352c <osMessageQueuePut+0xb0>
 8013526:	f06f 0302 	mvn.w	r3, #2
 801352a:	61fb      	str	r3, [r7, #28]
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	4618      	mov	r0, r3
 8013530:	3720      	adds	r7, #32
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	e000ed04 	.word	0xe000ed04

0801353c <osMessageQueueGet>:
 801353c:	b580      	push	{r7, lr}
 801353e:	b088      	sub	sp, #32
 8013540:	af00      	add	r7, sp, #0
 8013542:	60f8      	str	r0, [r7, #12]
 8013544:	60b9      	str	r1, [r7, #8]
 8013546:	607a      	str	r2, [r7, #4]
 8013548:	603b      	str	r3, [r7, #0]
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	61bb      	str	r3, [r7, #24]
 801354e:	2300      	movs	r3, #0
 8013550:	61fb      	str	r3, [r7, #28]
 8013552:	f3ef 8305 	mrs	r3, IPSR
 8013556:	617b      	str	r3, [r7, #20]
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d028      	beq.n	80135b0 <osMessageQueueGet+0x74>
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d005      	beq.n	8013570 <osMessageQueueGet+0x34>
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d002      	beq.n	8013570 <osMessageQueueGet+0x34>
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d003      	beq.n	8013578 <osMessageQueueGet+0x3c>
 8013570:	f06f 0303 	mvn.w	r3, #3
 8013574:	61fb      	str	r3, [r7, #28]
 8013576:	e037      	b.n	80135e8 <osMessageQueueGet+0xac>
 8013578:	2300      	movs	r3, #0
 801357a:	613b      	str	r3, [r7, #16]
 801357c:	f107 0310 	add.w	r3, r7, #16
 8013580:	461a      	mov	r2, r3
 8013582:	68b9      	ldr	r1, [r7, #8]
 8013584:	69b8      	ldr	r0, [r7, #24]
 8013586:	f000 ff43 	bl	8014410 <xQueueReceiveFromISR>
 801358a:	4603      	mov	r3, r0
 801358c:	2b01      	cmp	r3, #1
 801358e:	d003      	beq.n	8013598 <osMessageQueueGet+0x5c>
 8013590:	f06f 0302 	mvn.w	r3, #2
 8013594:	61fb      	str	r3, [r7, #28]
 8013596:	e027      	b.n	80135e8 <osMessageQueueGet+0xac>
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d024      	beq.n	80135e8 <osMessageQueueGet+0xac>
 801359e:	4b15      	ldr	r3, [pc, #84]	; (80135f4 <osMessageQueueGet+0xb8>)
 80135a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135a4:	601a      	str	r2, [r3, #0]
 80135a6:	f3bf 8f4f 	dsb	sy
 80135aa:	f3bf 8f6f 	isb	sy
 80135ae:	e01b      	b.n	80135e8 <osMessageQueueGet+0xac>
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d002      	beq.n	80135bc <osMessageQueueGet+0x80>
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d103      	bne.n	80135c4 <osMessageQueueGet+0x88>
 80135bc:	f06f 0303 	mvn.w	r3, #3
 80135c0:	61fb      	str	r3, [r7, #28]
 80135c2:	e011      	b.n	80135e8 <osMessageQueueGet+0xac>
 80135c4:	683a      	ldr	r2, [r7, #0]
 80135c6:	68b9      	ldr	r1, [r7, #8]
 80135c8:	69b8      	ldr	r0, [r7, #24]
 80135ca:	f000 fe41 	bl	8014250 <xQueueReceive>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b01      	cmp	r3, #1
 80135d2:	d009      	beq.n	80135e8 <osMessageQueueGet+0xac>
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d003      	beq.n	80135e2 <osMessageQueueGet+0xa6>
 80135da:	f06f 0301 	mvn.w	r3, #1
 80135de:	61fb      	str	r3, [r7, #28]
 80135e0:	e002      	b.n	80135e8 <osMessageQueueGet+0xac>
 80135e2:	f06f 0302 	mvn.w	r3, #2
 80135e6:	61fb      	str	r3, [r7, #28]
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	4618      	mov	r0, r3
 80135ec:	3720      	adds	r7, #32
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	e000ed04 	.word	0xe000ed04

080135f8 <vApplicationGetIdleTaskMemory>:
 80135f8:	b480      	push	{r7}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	607a      	str	r2, [r7, #4]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	4a07      	ldr	r2, [pc, #28]	; (8013624 <vApplicationGetIdleTaskMemory+0x2c>)
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	4a06      	ldr	r2, [pc, #24]	; (8013628 <vApplicationGetIdleTaskMemory+0x30>)
 801360e:	601a      	str	r2, [r3, #0]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2280      	movs	r2, #128	; 0x80
 8013614:	601a      	str	r2, [r3, #0]
 8013616:	bf00      	nop
 8013618:	3714      	adds	r7, #20
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr
 8013622:	bf00      	nop
 8013624:	24001134 	.word	0x24001134
 8013628:	24001190 	.word	0x24001190

0801362c <vApplicationGetTimerTaskMemory>:
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	4a07      	ldr	r2, [pc, #28]	; (8013658 <vApplicationGetTimerTaskMemory+0x2c>)
 801363c:	601a      	str	r2, [r3, #0]
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	4a06      	ldr	r2, [pc, #24]	; (801365c <vApplicationGetTimerTaskMemory+0x30>)
 8013642:	601a      	str	r2, [r3, #0]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f44f 7280 	mov.w	r2, #256	; 0x100
 801364a:	601a      	str	r2, [r3, #0]
 801364c:	bf00      	nop
 801364e:	3714      	adds	r7, #20
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr
 8013658:	24001390 	.word	0x24001390
 801365c:	240013ec 	.word	0x240013ec

08013660 <xEventGroupCreateStatic>:
 8013660:	b580      	push	{r7, lr}
 8013662:	b086      	sub	sp, #24
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10a      	bne.n	8013684 <xEventGroupCreateStatic+0x24>
 801366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013672:	f383 8811 	msr	BASEPRI, r3
 8013676:	f3bf 8f6f 	isb	sy
 801367a:	f3bf 8f4f 	dsb	sy
 801367e:	613b      	str	r3, [r7, #16]
 8013680:	bf00      	nop
 8013682:	e7fe      	b.n	8013682 <xEventGroupCreateStatic+0x22>
 8013684:	2320      	movs	r3, #32
 8013686:	60bb      	str	r3, [r7, #8]
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	2b20      	cmp	r3, #32
 801368c:	d00a      	beq.n	80136a4 <xEventGroupCreateStatic+0x44>
 801368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	60fb      	str	r3, [r7, #12]
 80136a0:	bf00      	nop
 80136a2:	e7fe      	b.n	80136a2 <xEventGroupCreateStatic+0x42>
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	617b      	str	r3, [r7, #20]
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d00a      	beq.n	80136c4 <xEventGroupCreateStatic+0x64>
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	2200      	movs	r2, #0
 80136b2:	601a      	str	r2, [r3, #0]
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	3304      	adds	r3, #4
 80136b8:	4618      	mov	r0, r3
 80136ba:	f000 fa3d 	bl	8013b38 <vListInitialise>
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	2201      	movs	r2, #1
 80136c2:	771a      	strb	r2, [r3, #28]
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	4618      	mov	r0, r3
 80136c8:	3718      	adds	r7, #24
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}

080136ce <xEventGroupCreate>:
 80136ce:	b580      	push	{r7, lr}
 80136d0:	b082      	sub	sp, #8
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	2020      	movs	r0, #32
 80136d6:	f002 ff1f 	bl	8016518 <pvPortMalloc>
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d00a      	beq.n	80136f8 <xEventGroupCreate+0x2a>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2200      	movs	r2, #0
 80136e6:	601a      	str	r2, [r3, #0]
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	3304      	adds	r3, #4
 80136ec:	4618      	mov	r0, r3
 80136ee:	f000 fa23 	bl	8013b38 <vListInitialise>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	2200      	movs	r2, #0
 80136f6:	771a      	strb	r2, [r3, #28]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	4618      	mov	r0, r3
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
	...

08013704 <xEventGroupWaitBits>:
 8013704:	b580      	push	{r7, lr}
 8013706:	b090      	sub	sp, #64	; 0x40
 8013708:	af00      	add	r7, sp, #0
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	60b9      	str	r1, [r7, #8]
 801370e:	607a      	str	r2, [r7, #4]
 8013710:	603b      	str	r3, [r7, #0]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	637b      	str	r3, [r7, #52]	; 0x34
 8013716:	2300      	movs	r3, #0
 8013718:	63bb      	str	r3, [r7, #56]	; 0x38
 801371a:	2300      	movs	r3, #0
 801371c:	633b      	str	r3, [r7, #48]	; 0x30
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d10a      	bne.n	801373a <xEventGroupWaitBits+0x36>
 8013724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013728:	f383 8811 	msr	BASEPRI, r3
 801372c:	f3bf 8f6f 	isb	sy
 8013730:	f3bf 8f4f 	dsb	sy
 8013734:	623b      	str	r3, [r7, #32]
 8013736:	bf00      	nop
 8013738:	e7fe      	b.n	8013738 <xEventGroupWaitBits+0x34>
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013740:	2b00      	cmp	r3, #0
 8013742:	d00a      	beq.n	801375a <xEventGroupWaitBits+0x56>
 8013744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013748:	f383 8811 	msr	BASEPRI, r3
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	61fb      	str	r3, [r7, #28]
 8013756:	bf00      	nop
 8013758:	e7fe      	b.n	8013758 <xEventGroupWaitBits+0x54>
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10a      	bne.n	8013776 <xEventGroupWaitBits+0x72>
 8013760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013764:	f383 8811 	msr	BASEPRI, r3
 8013768:	f3bf 8f6f 	isb	sy
 801376c:	f3bf 8f4f 	dsb	sy
 8013770:	61bb      	str	r3, [r7, #24]
 8013772:	bf00      	nop
 8013774:	e7fe      	b.n	8013774 <xEventGroupWaitBits+0x70>
 8013776:	f002 f817 	bl	80157a8 <xTaskGetSchedulerState>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d102      	bne.n	8013786 <xEventGroupWaitBits+0x82>
 8013780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013782:	2b00      	cmp	r3, #0
 8013784:	d101      	bne.n	801378a <xEventGroupWaitBits+0x86>
 8013786:	2301      	movs	r3, #1
 8013788:	e000      	b.n	801378c <xEventGroupWaitBits+0x88>
 801378a:	2300      	movs	r3, #0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d10a      	bne.n	80137a6 <xEventGroupWaitBits+0xa2>
 8013790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013794:	f383 8811 	msr	BASEPRI, r3
 8013798:	f3bf 8f6f 	isb	sy
 801379c:	f3bf 8f4f 	dsb	sy
 80137a0:	617b      	str	r3, [r7, #20]
 80137a2:	bf00      	nop
 80137a4:	e7fe      	b.n	80137a4 <xEventGroupWaitBits+0xa0>
 80137a6:	f001 fb77 	bl	8014e98 <vTaskSuspendAll>
 80137aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137b0:	683a      	ldr	r2, [r7, #0]
 80137b2:	68b9      	ldr	r1, [r7, #8]
 80137b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137b6:	f000 f988 	bl	8013aca <prvTestWaitCondition>
 80137ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00e      	beq.n	80137e0 <xEventGroupWaitBits+0xdc>
 80137c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137c6:	2300      	movs	r3, #0
 80137c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d028      	beq.n	8013822 <xEventGroupWaitBits+0x11e>
 80137d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	43db      	mvns	r3, r3
 80137d8:	401a      	ands	r2, r3
 80137da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137dc:	601a      	str	r2, [r3, #0]
 80137de:	e020      	b.n	8013822 <xEventGroupWaitBits+0x11e>
 80137e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d104      	bne.n	80137f0 <xEventGroupWaitBits+0xec>
 80137e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137ea:	2301      	movs	r3, #1
 80137ec:	633b      	str	r3, [r7, #48]	; 0x30
 80137ee:	e018      	b.n	8013822 <xEventGroupWaitBits+0x11e>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d003      	beq.n	80137fe <xEventGroupWaitBits+0xfa>
 80137f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80137fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d003      	beq.n	801380c <xEventGroupWaitBits+0x108>
 8013804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801380a:	63bb      	str	r3, [r7, #56]	; 0x38
 801380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801380e:	1d18      	adds	r0, r3, #4
 8013810:	68ba      	ldr	r2, [r7, #8]
 8013812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013814:	4313      	orrs	r3, r2
 8013816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013818:	4619      	mov	r1, r3
 801381a:	f001 fd3d 	bl	8015298 <vTaskPlaceOnUnorderedEventList>
 801381e:	2300      	movs	r3, #0
 8013820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013822:	f001 fb47 	bl	8014eb4 <xTaskResumeAll>
 8013826:	6278      	str	r0, [r7, #36]	; 0x24
 8013828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801382a:	2b00      	cmp	r3, #0
 801382c:	d031      	beq.n	8013892 <xEventGroupWaitBits+0x18e>
 801382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013830:	2b00      	cmp	r3, #0
 8013832:	d107      	bne.n	8013844 <xEventGroupWaitBits+0x140>
 8013834:	4b19      	ldr	r3, [pc, #100]	; (801389c <xEventGroupWaitBits+0x198>)
 8013836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801383a:	601a      	str	r2, [r3, #0]
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	f3bf 8f6f 	isb	sy
 8013844:	f002 f83c 	bl	80158c0 <uxTaskResetEventItemValue>
 8013848:	63f8      	str	r0, [r7, #60]	; 0x3c
 801384a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013850:	2b00      	cmp	r3, #0
 8013852:	d11a      	bne.n	801388a <xEventGroupWaitBits+0x186>
 8013854:	f002 fd3e 	bl	80162d4 <vPortEnterCritical>
 8013858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801385e:	683a      	ldr	r2, [r7, #0]
 8013860:	68b9      	ldr	r1, [r7, #8]
 8013862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013864:	f000 f931 	bl	8013aca <prvTestWaitCondition>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	d009      	beq.n	8013882 <xEventGroupWaitBits+0x17e>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d006      	beq.n	8013882 <xEventGroupWaitBits+0x17e>
 8013874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013876:	681a      	ldr	r2, [r3, #0]
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	43db      	mvns	r3, r3
 801387c:	401a      	ands	r2, r3
 801387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013880:	601a      	str	r2, [r3, #0]
 8013882:	2301      	movs	r3, #1
 8013884:	633b      	str	r3, [r7, #48]	; 0x30
 8013886:	f002 fd55 	bl	8016334 <vPortExitCritical>
 801388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801388c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013894:	4618      	mov	r0, r3
 8013896:	3740      	adds	r7, #64	; 0x40
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	e000ed04 	.word	0xe000ed04

080138a0 <xEventGroupClearBits>:
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b086      	sub	sp, #24
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	617b      	str	r3, [r7, #20]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d10a      	bne.n	80138ca <xEventGroupClearBits+0x2a>
 80138b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138b8:	f383 8811 	msr	BASEPRI, r3
 80138bc:	f3bf 8f6f 	isb	sy
 80138c0:	f3bf 8f4f 	dsb	sy
 80138c4:	60fb      	str	r3, [r7, #12]
 80138c6:	bf00      	nop
 80138c8:	e7fe      	b.n	80138c8 <xEventGroupClearBits+0x28>
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d00a      	beq.n	80138ea <xEventGroupClearBits+0x4a>
 80138d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d8:	f383 8811 	msr	BASEPRI, r3
 80138dc:	f3bf 8f6f 	isb	sy
 80138e0:	f3bf 8f4f 	dsb	sy
 80138e4:	60bb      	str	r3, [r7, #8]
 80138e6:	bf00      	nop
 80138e8:	e7fe      	b.n	80138e8 <xEventGroupClearBits+0x48>
 80138ea:	f002 fcf3 	bl	80162d4 <vPortEnterCritical>
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	613b      	str	r3, [r7, #16]
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	43db      	mvns	r3, r3
 80138fc:	401a      	ands	r2, r3
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	601a      	str	r2, [r3, #0]
 8013902:	f002 fd17 	bl	8016334 <vPortExitCritical>
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	4618      	mov	r0, r3
 801390a:	3718      	adds	r7, #24
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <xEventGroupClearBitsFromISR>:
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
 801391a:	2300      	movs	r3, #0
 801391c:	683a      	ldr	r2, [r7, #0]
 801391e:	6879      	ldr	r1, [r7, #4]
 8013920:	4804      	ldr	r0, [pc, #16]	; (8013934 <xEventGroupClearBitsFromISR+0x24>)
 8013922:	f002 fb87 	bl	8016034 <xTimerPendFunctionCallFromISR>
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	4618      	mov	r0, r3
 801392c:	3710      	adds	r7, #16
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	08013ab1 	.word	0x08013ab1

08013938 <xEventGroupGetBitsFromISR>:
 8013938:	b480      	push	{r7}
 801393a:	b089      	sub	sp, #36	; 0x24
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	61fb      	str	r3, [r7, #28]
 8013944:	f3ef 8211 	mrs	r2, BASEPRI
 8013948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801394c:	f383 8811 	msr	BASEPRI, r3
 8013950:	f3bf 8f6f 	isb	sy
 8013954:	f3bf 8f4f 	dsb	sy
 8013958:	60fa      	str	r2, [r7, #12]
 801395a:	60bb      	str	r3, [r7, #8]
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	61bb      	str	r3, [r7, #24]
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	617b      	str	r3, [r7, #20]
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	613b      	str	r3, [r7, #16]
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	f383 8811 	msr	BASEPRI, r3
 8013970:	bf00      	nop
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	4618      	mov	r0, r3
 8013976:	3724      	adds	r7, #36	; 0x24
 8013978:	46bd      	mov	sp, r7
 801397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397e:	4770      	bx	lr

08013980 <xEventGroupSetBits>:
 8013980:	b580      	push	{r7, lr}
 8013982:	b08e      	sub	sp, #56	; 0x38
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
 801398a:	2300      	movs	r3, #0
 801398c:	633b      	str	r3, [r7, #48]	; 0x30
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	62bb      	str	r3, [r7, #40]	; 0x28
 8013992:	2300      	movs	r3, #0
 8013994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d10a      	bne.n	80139b2 <xEventGroupSetBits+0x32>
 801399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a0:	f383 8811 	msr	BASEPRI, r3
 80139a4:	f3bf 8f6f 	isb	sy
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	613b      	str	r3, [r7, #16]
 80139ae:	bf00      	nop
 80139b0:	e7fe      	b.n	80139b0 <xEventGroupSetBits+0x30>
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00a      	beq.n	80139d2 <xEventGroupSetBits+0x52>
 80139bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c0:	f383 8811 	msr	BASEPRI, r3
 80139c4:	f3bf 8f6f 	isb	sy
 80139c8:	f3bf 8f4f 	dsb	sy
 80139cc:	60fb      	str	r3, [r7, #12]
 80139ce:	bf00      	nop
 80139d0:	e7fe      	b.n	80139d0 <xEventGroupSetBits+0x50>
 80139d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d4:	3304      	adds	r3, #4
 80139d6:	627b      	str	r3, [r7, #36]	; 0x24
 80139d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139da:	3308      	adds	r3, #8
 80139dc:	623b      	str	r3, [r7, #32]
 80139de:	f001 fa5b 	bl	8014e98 <vTaskSuspendAll>
 80139e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	637b      	str	r3, [r7, #52]	; 0x34
 80139e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	431a      	orrs	r2, r3
 80139f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f2:	601a      	str	r2, [r3, #0]
 80139f4:	e03c      	b.n	8013a70 <xEventGroupSetBits+0xf0>
 80139f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	61fb      	str	r3, [r7, #28]
 80139fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	61bb      	str	r3, [r7, #24]
 8013a02:	2300      	movs	r3, #0
 8013a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013a0c:	617b      	str	r3, [r7, #20]
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a14:	61bb      	str	r3, [r7, #24]
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d108      	bne.n	8013a32 <xEventGroupSetBits+0xb2>
 8013a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	69bb      	ldr	r3, [r7, #24]
 8013a26:	4013      	ands	r3, r2
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00b      	beq.n	8013a44 <xEventGroupSetBits+0xc4>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a30:	e008      	b.n	8013a44 <xEventGroupSetBits+0xc4>
 8013a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	69bb      	ldr	r3, [r7, #24]
 8013a38:	4013      	ands	r3, r2
 8013a3a:	69ba      	ldr	r2, [r7, #24]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d101      	bne.n	8013a44 <xEventGroupSetBits+0xc4>
 8013a40:	2301      	movs	r3, #1
 8013a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d010      	beq.n	8013a6c <xEventGroupSetBits+0xec>
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d003      	beq.n	8013a5c <xEventGroupSetBits+0xdc>
 8013a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013a64:	4619      	mov	r1, r3
 8013a66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013a68:	f001 fce2 	bl	8015430 <vTaskRemoveFromUnorderedEventList>
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8013a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a72:	6a3b      	ldr	r3, [r7, #32]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d1be      	bne.n	80139f6 <xEventGroupSetBits+0x76>
 8013a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7a:	681a      	ldr	r2, [r3, #0]
 8013a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7e:	43db      	mvns	r3, r3
 8013a80:	401a      	ands	r2, r3
 8013a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a84:	601a      	str	r2, [r3, #0]
 8013a86:	f001 fa15 	bl	8014eb4 <xTaskResumeAll>
 8013a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3738      	adds	r7, #56	; 0x38
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}

08013a96 <vEventGroupSetBitsCallback>:
 8013a96:	b580      	push	{r7, lr}
 8013a98:	b082      	sub	sp, #8
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
 8013a9e:	6039      	str	r1, [r7, #0]
 8013aa0:	6839      	ldr	r1, [r7, #0]
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f7ff ff6c 	bl	8013980 <xEventGroupSetBits>
 8013aa8:	bf00      	nop
 8013aaa:	3708      	adds	r7, #8
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}

08013ab0 <vEventGroupClearBitsCallback>:
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
 8013aba:	6839      	ldr	r1, [r7, #0]
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f7ff feef 	bl	80138a0 <xEventGroupClearBits>
 8013ac2:	bf00      	nop
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <prvTestWaitCondition>:
 8013aca:	b480      	push	{r7}
 8013acc:	b087      	sub	sp, #28
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	60b9      	str	r1, [r7, #8]
 8013ad4:	607a      	str	r2, [r7, #4]
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	617b      	str	r3, [r7, #20]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d107      	bne.n	8013af0 <prvTestWaitCondition+0x26>
 8013ae0:	68fa      	ldr	r2, [r7, #12]
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	4013      	ands	r3, r2
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d00a      	beq.n	8013b00 <prvTestWaitCondition+0x36>
 8013aea:	2301      	movs	r3, #1
 8013aec:	617b      	str	r3, [r7, #20]
 8013aee:	e007      	b.n	8013b00 <prvTestWaitCondition+0x36>
 8013af0:	68fa      	ldr	r2, [r7, #12]
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	4013      	ands	r3, r2
 8013af6:	68ba      	ldr	r2, [r7, #8]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d101      	bne.n	8013b00 <prvTestWaitCondition+0x36>
 8013afc:	2301      	movs	r3, #1
 8013afe:	617b      	str	r3, [r7, #20]
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	4618      	mov	r0, r3
 8013b04:	371c      	adds	r7, #28
 8013b06:	46bd      	mov	sp, r7
 8013b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0c:	4770      	bx	lr
	...

08013b10 <xEventGroupSetBitsFromISR>:
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	68ba      	ldr	r2, [r7, #8]
 8013b20:	68f9      	ldr	r1, [r7, #12]
 8013b22:	4804      	ldr	r0, [pc, #16]	; (8013b34 <xEventGroupSetBitsFromISR+0x24>)
 8013b24:	f002 fa86 	bl	8016034 <xTimerPendFunctionCallFromISR>
 8013b28:	6178      	str	r0, [r7, #20]
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3718      	adds	r7, #24
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	08013a97 	.word	0x08013a97

08013b38 <vListInitialise>:
 8013b38:	b480      	push	{r7}
 8013b3a:	b083      	sub	sp, #12
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f103 0208 	add.w	r2, r3, #8
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	605a      	str	r2, [r3, #4]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b50:	609a      	str	r2, [r3, #8]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f103 0208 	add.w	r2, r3, #8
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	60da      	str	r2, [r3, #12]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f103 0208 	add.w	r2, r3, #8
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	611a      	str	r2, [r3, #16]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	601a      	str	r2, [r3, #0]
 8013b6c:	bf00      	nop
 8013b6e:	370c      	adds	r7, #12
 8013b70:	46bd      	mov	sp, r7
 8013b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b76:	4770      	bx	lr

08013b78 <vListInitialiseItem>:
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2200      	movs	r2, #0
 8013b84:	611a      	str	r2, [r3, #16]
 8013b86:	bf00      	nop
 8013b88:	370c      	adds	r7, #12
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr

08013b92 <vListInsertEnd>:
 8013b92:	b480      	push	{r7}
 8013b94:	b085      	sub	sp, #20
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
 8013b9a:	6039      	str	r1, [r7, #0]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	60fb      	str	r3, [r7, #12]
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	605a      	str	r2, [r3, #4]
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	689a      	ldr	r2, [r3, #8]
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	609a      	str	r2, [r3, #8]
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	689b      	ldr	r3, [r3, #8]
 8013bb4:	683a      	ldr	r2, [r7, #0]
 8013bb6:	605a      	str	r2, [r3, #4]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	683a      	ldr	r2, [r7, #0]
 8013bbc:	609a      	str	r2, [r3, #8]
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	611a      	str	r2, [r3, #16]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	1c5a      	adds	r2, r3, #1
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	601a      	str	r2, [r3, #0]
 8013bce:	bf00      	nop
 8013bd0:	3714      	adds	r7, #20
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr

08013bda <vListInsert>:
 8013bda:	b480      	push	{r7}
 8013bdc:	b085      	sub	sp, #20
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	6039      	str	r1, [r7, #0]
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	60bb      	str	r3, [r7, #8]
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bf0:	d103      	bne.n	8013bfa <vListInsert+0x20>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	691b      	ldr	r3, [r3, #16]
 8013bf6:	60fb      	str	r3, [r7, #12]
 8013bf8:	e00c      	b.n	8013c14 <vListInsert+0x3a>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	3308      	adds	r3, #8
 8013bfe:	60fb      	str	r3, [r7, #12]
 8013c00:	e002      	b.n	8013c08 <vListInsert+0x2e>
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	60fb      	str	r3, [r7, #12]
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	68ba      	ldr	r2, [r7, #8]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d2f6      	bcs.n	8013c02 <vListInsert+0x28>
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	685a      	ldr	r2, [r3, #4]
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	605a      	str	r2, [r3, #4]
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	683a      	ldr	r2, [r7, #0]
 8013c22:	609a      	str	r2, [r3, #8]
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	609a      	str	r2, [r3, #8]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	683a      	ldr	r2, [r7, #0]
 8013c2e:	605a      	str	r2, [r3, #4]
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	611a      	str	r2, [r3, #16]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	1c5a      	adds	r2, r3, #1
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	601a      	str	r2, [r3, #0]
 8013c40:	bf00      	nop
 8013c42:	3714      	adds	r7, #20
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <uxListRemove>:
 8013c4c:	b480      	push	{r7}
 8013c4e:	b085      	sub	sp, #20
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	691b      	ldr	r3, [r3, #16]
 8013c58:	60fb      	str	r3, [r7, #12]
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	6892      	ldr	r2, [r2, #8]
 8013c62:	609a      	str	r2, [r3, #8]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	689b      	ldr	r3, [r3, #8]
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	6852      	ldr	r2, [r2, #4]
 8013c6c:	605a      	str	r2, [r3, #4]
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d103      	bne.n	8013c80 <uxListRemove+0x34>
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	689a      	ldr	r2, [r3, #8]
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	605a      	str	r2, [r3, #4]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2200      	movs	r2, #0
 8013c84:	611a      	str	r2, [r3, #16]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	1e5a      	subs	r2, r3, #1
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	601a      	str	r2, [r3, #0]
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	4618      	mov	r0, r3
 8013c96:	3714      	adds	r7, #20
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr

08013ca0 <xQueueGenericReset>:
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	60fb      	str	r3, [r7, #12]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d10a      	bne.n	8013cca <xQueueGenericReset+0x2a>
 8013cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb8:	f383 8811 	msr	BASEPRI, r3
 8013cbc:	f3bf 8f6f 	isb	sy
 8013cc0:	f3bf 8f4f 	dsb	sy
 8013cc4:	60bb      	str	r3, [r7, #8]
 8013cc6:	bf00      	nop
 8013cc8:	e7fe      	b.n	8013cc8 <xQueueGenericReset+0x28>
 8013cca:	f002 fb03 	bl	80162d4 <vPortEnterCritical>
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cd6:	68f9      	ldr	r1, [r7, #12]
 8013cd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013cda:	fb01 f303 	mul.w	r3, r1, r3
 8013cde:	441a      	add	r2, r3
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	609a      	str	r2, [r3, #8]
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	605a      	str	r2, [r3, #4]
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cfa:	3b01      	subs	r3, #1
 8013cfc:	68f9      	ldr	r1, [r7, #12]
 8013cfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d00:	fb01 f303 	mul.w	r3, r1, r3
 8013d04:	441a      	add	r2, r3
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	60da      	str	r2, [r3, #12]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	22ff      	movs	r2, #255	; 0xff
 8013d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	22ff      	movs	r2, #255	; 0xff
 8013d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d114      	bne.n	8013d4a <xQueueGenericReset+0xaa>
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	691b      	ldr	r3, [r3, #16]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d01a      	beq.n	8013d5e <xQueueGenericReset+0xbe>
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	3310      	adds	r3, #16
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f001 fb1b 	bl	8015368 <xTaskRemoveFromEventList>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d012      	beq.n	8013d5e <xQueueGenericReset+0xbe>
 8013d38:	4b0c      	ldr	r3, [pc, #48]	; (8013d6c <xQueueGenericReset+0xcc>)
 8013d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d3e:	601a      	str	r2, [r3, #0]
 8013d40:	f3bf 8f4f 	dsb	sy
 8013d44:	f3bf 8f6f 	isb	sy
 8013d48:	e009      	b.n	8013d5e <xQueueGenericReset+0xbe>
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	3310      	adds	r3, #16
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7ff fef2 	bl	8013b38 <vListInitialise>
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	3324      	adds	r3, #36	; 0x24
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7ff feed 	bl	8013b38 <vListInitialise>
 8013d5e:	f002 fae9 	bl	8016334 <vPortExitCritical>
 8013d62:	2301      	movs	r3, #1
 8013d64:	4618      	mov	r0, r3
 8013d66:	3710      	adds	r7, #16
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	e000ed04 	.word	0xe000ed04

08013d70 <xQueueGenericCreateStatic>:
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b08e      	sub	sp, #56	; 0x38
 8013d74:	af02      	add	r7, sp, #8
 8013d76:	60f8      	str	r0, [r7, #12]
 8013d78:	60b9      	str	r1, [r7, #8]
 8013d7a:	607a      	str	r2, [r7, #4]
 8013d7c:	603b      	str	r3, [r7, #0]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d10a      	bne.n	8013d9a <xQueueGenericCreateStatic+0x2a>
 8013d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d88:	f383 8811 	msr	BASEPRI, r3
 8013d8c:	f3bf 8f6f 	isb	sy
 8013d90:	f3bf 8f4f 	dsb	sy
 8013d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d96:	bf00      	nop
 8013d98:	e7fe      	b.n	8013d98 <xQueueGenericCreateStatic+0x28>
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d10a      	bne.n	8013db6 <xQueueGenericCreateStatic+0x46>
 8013da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da4:	f383 8811 	msr	BASEPRI, r3
 8013da8:	f3bf 8f6f 	isb	sy
 8013dac:	f3bf 8f4f 	dsb	sy
 8013db0:	627b      	str	r3, [r7, #36]	; 0x24
 8013db2:	bf00      	nop
 8013db4:	e7fe      	b.n	8013db4 <xQueueGenericCreateStatic+0x44>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d002      	beq.n	8013dc2 <xQueueGenericCreateStatic+0x52>
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d001      	beq.n	8013dc6 <xQueueGenericCreateStatic+0x56>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	e000      	b.n	8013dc8 <xQueueGenericCreateStatic+0x58>
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d10a      	bne.n	8013de2 <xQueueGenericCreateStatic+0x72>
 8013dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd0:	f383 8811 	msr	BASEPRI, r3
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	f3bf 8f4f 	dsb	sy
 8013ddc:	623b      	str	r3, [r7, #32]
 8013dde:	bf00      	nop
 8013de0:	e7fe      	b.n	8013de0 <xQueueGenericCreateStatic+0x70>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d102      	bne.n	8013dee <xQueueGenericCreateStatic+0x7e>
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d101      	bne.n	8013df2 <xQueueGenericCreateStatic+0x82>
 8013dee:	2301      	movs	r3, #1
 8013df0:	e000      	b.n	8013df4 <xQueueGenericCreateStatic+0x84>
 8013df2:	2300      	movs	r3, #0
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d10a      	bne.n	8013e0e <xQueueGenericCreateStatic+0x9e>
 8013df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dfc:	f383 8811 	msr	BASEPRI, r3
 8013e00:	f3bf 8f6f 	isb	sy
 8013e04:	f3bf 8f4f 	dsb	sy
 8013e08:	61fb      	str	r3, [r7, #28]
 8013e0a:	bf00      	nop
 8013e0c:	e7fe      	b.n	8013e0c <xQueueGenericCreateStatic+0x9c>
 8013e0e:	2350      	movs	r3, #80	; 0x50
 8013e10:	617b      	str	r3, [r7, #20]
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	2b50      	cmp	r3, #80	; 0x50
 8013e16:	d00a      	beq.n	8013e2e <xQueueGenericCreateStatic+0xbe>
 8013e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1c:	f383 8811 	msr	BASEPRI, r3
 8013e20:	f3bf 8f6f 	isb	sy
 8013e24:	f3bf 8f4f 	dsb	sy
 8013e28:	61bb      	str	r3, [r7, #24]
 8013e2a:	bf00      	nop
 8013e2c:	e7fe      	b.n	8013e2c <xQueueGenericCreateStatic+0xbc>
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d00d      	beq.n	8013e56 <xQueueGenericCreateStatic+0xe6>
 8013e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013e42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	68b9      	ldr	r1, [r7, #8]
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	f000 f83f 	bl	8013ed4 <prvInitialiseNewQueue>
 8013e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3730      	adds	r7, #48	; 0x30
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <xQueueGenericCreate>:
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b08a      	sub	sp, #40	; 0x28
 8013e64:	af02      	add	r7, sp, #8
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	71fb      	strb	r3, [r7, #7]
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d10a      	bne.n	8013e8a <xQueueGenericCreate+0x2a>
 8013e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e78:	f383 8811 	msr	BASEPRI, r3
 8013e7c:	f3bf 8f6f 	isb	sy
 8013e80:	f3bf 8f4f 	dsb	sy
 8013e84:	613b      	str	r3, [r7, #16]
 8013e86:	bf00      	nop
 8013e88:	e7fe      	b.n	8013e88 <xQueueGenericCreate+0x28>
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	68ba      	ldr	r2, [r7, #8]
 8013e8e:	fb02 f303 	mul.w	r3, r2, r3
 8013e92:	61fb      	str	r3, [r7, #28]
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	3350      	adds	r3, #80	; 0x50
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f002 fb3d 	bl	8016518 <pvPortMalloc>
 8013e9e:	61b8      	str	r0, [r7, #24]
 8013ea0:	69bb      	ldr	r3, [r7, #24]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d011      	beq.n	8013eca <xQueueGenericCreate+0x6a>
 8013ea6:	69bb      	ldr	r3, [r7, #24]
 8013ea8:	617b      	str	r3, [r7, #20]
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	3350      	adds	r3, #80	; 0x50
 8013eae:	617b      	str	r3, [r7, #20]
 8013eb0:	69bb      	ldr	r3, [r7, #24]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013eb8:	79fa      	ldrb	r2, [r7, #7]
 8013eba:	69bb      	ldr	r3, [r7, #24]
 8013ebc:	9300      	str	r3, [sp, #0]
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	697a      	ldr	r2, [r7, #20]
 8013ec2:	68b9      	ldr	r1, [r7, #8]
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f000 f805 	bl	8013ed4 <prvInitialiseNewQueue>
 8013eca:	69bb      	ldr	r3, [r7, #24]
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3720      	adds	r7, #32
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <prvInitialiseNewQueue>:
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	607a      	str	r2, [r7, #4]
 8013ee0:	70fb      	strb	r3, [r7, #3]
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d103      	bne.n	8013ef0 <prvInitialiseNewQueue+0x1c>
 8013ee8:	69bb      	ldr	r3, [r7, #24]
 8013eea:	69ba      	ldr	r2, [r7, #24]
 8013eec:	601a      	str	r2, [r3, #0]
 8013eee:	e002      	b.n	8013ef6 <prvInitialiseNewQueue+0x22>
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	601a      	str	r2, [r3, #0]
 8013ef6:	69bb      	ldr	r3, [r7, #24]
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	63da      	str	r2, [r3, #60]	; 0x3c
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	68ba      	ldr	r2, [r7, #8]
 8013f00:	641a      	str	r2, [r3, #64]	; 0x40
 8013f02:	2101      	movs	r1, #1
 8013f04:	69b8      	ldr	r0, [r7, #24]
 8013f06:	f7ff fecb 	bl	8013ca0 <xQueueGenericReset>
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	78fa      	ldrb	r2, [r7, #3]
 8013f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8013f12:	bf00      	nop
 8013f14:	3710      	adds	r7, #16
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
	...

08013f1c <xQueueGenericSend>:
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b08e      	sub	sp, #56	; 0x38
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	607a      	str	r2, [r7, #4]
 8013f28:	603b      	str	r3, [r7, #0]
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	633b      	str	r3, [r7, #48]	; 0x30
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d10a      	bne.n	8013f4e <xQueueGenericSend+0x32>
 8013f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3c:	f383 8811 	msr	BASEPRI, r3
 8013f40:	f3bf 8f6f 	isb	sy
 8013f44:	f3bf 8f4f 	dsb	sy
 8013f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f4a:	bf00      	nop
 8013f4c:	e7fe      	b.n	8013f4c <xQueueGenericSend+0x30>
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d103      	bne.n	8013f5c <xQueueGenericSend+0x40>
 8013f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <xQueueGenericSend+0x44>
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	e000      	b.n	8013f62 <xQueueGenericSend+0x46>
 8013f60:	2300      	movs	r3, #0
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d10a      	bne.n	8013f7c <xQueueGenericSend+0x60>
 8013f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f6a:	f383 8811 	msr	BASEPRI, r3
 8013f6e:	f3bf 8f6f 	isb	sy
 8013f72:	f3bf 8f4f 	dsb	sy
 8013f76:	627b      	str	r3, [r7, #36]	; 0x24
 8013f78:	bf00      	nop
 8013f7a:	e7fe      	b.n	8013f7a <xQueueGenericSend+0x5e>
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	2b02      	cmp	r3, #2
 8013f80:	d103      	bne.n	8013f8a <xQueueGenericSend+0x6e>
 8013f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f86:	2b01      	cmp	r3, #1
 8013f88:	d101      	bne.n	8013f8e <xQueueGenericSend+0x72>
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e000      	b.n	8013f90 <xQueueGenericSend+0x74>
 8013f8e:	2300      	movs	r3, #0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d10a      	bne.n	8013faa <xQueueGenericSend+0x8e>
 8013f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f98:	f383 8811 	msr	BASEPRI, r3
 8013f9c:	f3bf 8f6f 	isb	sy
 8013fa0:	f3bf 8f4f 	dsb	sy
 8013fa4:	623b      	str	r3, [r7, #32]
 8013fa6:	bf00      	nop
 8013fa8:	e7fe      	b.n	8013fa8 <xQueueGenericSend+0x8c>
 8013faa:	f001 fbfd 	bl	80157a8 <xTaskGetSchedulerState>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d102      	bne.n	8013fba <xQueueGenericSend+0x9e>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d101      	bne.n	8013fbe <xQueueGenericSend+0xa2>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	e000      	b.n	8013fc0 <xQueueGenericSend+0xa4>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d10a      	bne.n	8013fda <xQueueGenericSend+0xbe>
 8013fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc8:	f383 8811 	msr	BASEPRI, r3
 8013fcc:	f3bf 8f6f 	isb	sy
 8013fd0:	f3bf 8f4f 	dsb	sy
 8013fd4:	61fb      	str	r3, [r7, #28]
 8013fd6:	bf00      	nop
 8013fd8:	e7fe      	b.n	8013fd8 <xQueueGenericSend+0xbc>
 8013fda:	f002 f97b 	bl	80162d4 <vPortEnterCritical>
 8013fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d302      	bcc.n	8013ff0 <xQueueGenericSend+0xd4>
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	2b02      	cmp	r3, #2
 8013fee:	d129      	bne.n	8014044 <xQueueGenericSend+0x128>
 8013ff0:	683a      	ldr	r2, [r7, #0]
 8013ff2:	68b9      	ldr	r1, [r7, #8]
 8013ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ff6:	f000 fa8b 	bl	8014510 <prvCopyDataToQueue>
 8013ffa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014000:	2b00      	cmp	r3, #0
 8014002:	d010      	beq.n	8014026 <xQueueGenericSend+0x10a>
 8014004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014006:	3324      	adds	r3, #36	; 0x24
 8014008:	4618      	mov	r0, r3
 801400a:	f001 f9ad 	bl	8015368 <xTaskRemoveFromEventList>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d013      	beq.n	801403c <xQueueGenericSend+0x120>
 8014014:	4b3f      	ldr	r3, [pc, #252]	; (8014114 <xQueueGenericSend+0x1f8>)
 8014016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801401a:	601a      	str	r2, [r3, #0]
 801401c:	f3bf 8f4f 	dsb	sy
 8014020:	f3bf 8f6f 	isb	sy
 8014024:	e00a      	b.n	801403c <xQueueGenericSend+0x120>
 8014026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014028:	2b00      	cmp	r3, #0
 801402a:	d007      	beq.n	801403c <xQueueGenericSend+0x120>
 801402c:	4b39      	ldr	r3, [pc, #228]	; (8014114 <xQueueGenericSend+0x1f8>)
 801402e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014032:	601a      	str	r2, [r3, #0]
 8014034:	f3bf 8f4f 	dsb	sy
 8014038:	f3bf 8f6f 	isb	sy
 801403c:	f002 f97a 	bl	8016334 <vPortExitCritical>
 8014040:	2301      	movs	r3, #1
 8014042:	e063      	b.n	801410c <xQueueGenericSend+0x1f0>
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d103      	bne.n	8014052 <xQueueGenericSend+0x136>
 801404a:	f002 f973 	bl	8016334 <vPortExitCritical>
 801404e:	2300      	movs	r3, #0
 8014050:	e05c      	b.n	801410c <xQueueGenericSend+0x1f0>
 8014052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014054:	2b00      	cmp	r3, #0
 8014056:	d106      	bne.n	8014066 <xQueueGenericSend+0x14a>
 8014058:	f107 0314 	add.w	r3, r7, #20
 801405c:	4618      	mov	r0, r3
 801405e:	f001 fa49 	bl	80154f4 <vTaskInternalSetTimeOutState>
 8014062:	2301      	movs	r3, #1
 8014064:	637b      	str	r3, [r7, #52]	; 0x34
 8014066:	f002 f965 	bl	8016334 <vPortExitCritical>
 801406a:	f000 ff15 	bl	8014e98 <vTaskSuspendAll>
 801406e:	f002 f931 	bl	80162d4 <vPortEnterCritical>
 8014072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014078:	b25b      	sxtb	r3, r3
 801407a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801407e:	d103      	bne.n	8014088 <xQueueGenericSend+0x16c>
 8014080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014082:	2200      	movs	r2, #0
 8014084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801408e:	b25b      	sxtb	r3, r3
 8014090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014094:	d103      	bne.n	801409e <xQueueGenericSend+0x182>
 8014096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014098:	2200      	movs	r2, #0
 801409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801409e:	f002 f949 	bl	8016334 <vPortExitCritical>
 80140a2:	1d3a      	adds	r2, r7, #4
 80140a4:	f107 0314 	add.w	r3, r7, #20
 80140a8:	4611      	mov	r1, r2
 80140aa:	4618      	mov	r0, r3
 80140ac:	f001 fa38 	bl	8015520 <xTaskCheckForTimeOut>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d124      	bne.n	8014100 <xQueueGenericSend+0x1e4>
 80140b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140b8:	f000 fb22 	bl	8014700 <prvIsQueueFull>
 80140bc:	4603      	mov	r3, r0
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d018      	beq.n	80140f4 <xQueueGenericSend+0x1d8>
 80140c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c4:	3310      	adds	r3, #16
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	4611      	mov	r1, r2
 80140ca:	4618      	mov	r0, r3
 80140cc:	f001 f8c0 	bl	8015250 <vTaskPlaceOnEventList>
 80140d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140d2:	f000 faad 	bl	8014630 <prvUnlockQueue>
 80140d6:	f000 feed 	bl	8014eb4 <xTaskResumeAll>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f47f af7c 	bne.w	8013fda <xQueueGenericSend+0xbe>
 80140e2:	4b0c      	ldr	r3, [pc, #48]	; (8014114 <xQueueGenericSend+0x1f8>)
 80140e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140e8:	601a      	str	r2, [r3, #0]
 80140ea:	f3bf 8f4f 	dsb	sy
 80140ee:	f3bf 8f6f 	isb	sy
 80140f2:	e772      	b.n	8013fda <xQueueGenericSend+0xbe>
 80140f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140f6:	f000 fa9b 	bl	8014630 <prvUnlockQueue>
 80140fa:	f000 fedb 	bl	8014eb4 <xTaskResumeAll>
 80140fe:	e76c      	b.n	8013fda <xQueueGenericSend+0xbe>
 8014100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014102:	f000 fa95 	bl	8014630 <prvUnlockQueue>
 8014106:	f000 fed5 	bl	8014eb4 <xTaskResumeAll>
 801410a:	2300      	movs	r3, #0
 801410c:	4618      	mov	r0, r3
 801410e:	3738      	adds	r7, #56	; 0x38
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	e000ed04 	.word	0xe000ed04

08014118 <xQueueGenericSendFromISR>:
 8014118:	b580      	push	{r7, lr}
 801411a:	b090      	sub	sp, #64	; 0x40
 801411c:	af00      	add	r7, sp, #0
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
 8014124:	603b      	str	r3, [r7, #0]
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	63bb      	str	r3, [r7, #56]	; 0x38
 801412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412c:	2b00      	cmp	r3, #0
 801412e:	d10a      	bne.n	8014146 <xQueueGenericSendFromISR+0x2e>
 8014130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014134:	f383 8811 	msr	BASEPRI, r3
 8014138:	f3bf 8f6f 	isb	sy
 801413c:	f3bf 8f4f 	dsb	sy
 8014140:	62bb      	str	r3, [r7, #40]	; 0x28
 8014142:	bf00      	nop
 8014144:	e7fe      	b.n	8014144 <xQueueGenericSendFromISR+0x2c>
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d103      	bne.n	8014154 <xQueueGenericSendFromISR+0x3c>
 801414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <xQueueGenericSendFromISR+0x40>
 8014154:	2301      	movs	r3, #1
 8014156:	e000      	b.n	801415a <xQueueGenericSendFromISR+0x42>
 8014158:	2300      	movs	r3, #0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d10a      	bne.n	8014174 <xQueueGenericSendFromISR+0x5c>
 801415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014162:	f383 8811 	msr	BASEPRI, r3
 8014166:	f3bf 8f6f 	isb	sy
 801416a:	f3bf 8f4f 	dsb	sy
 801416e:	627b      	str	r3, [r7, #36]	; 0x24
 8014170:	bf00      	nop
 8014172:	e7fe      	b.n	8014172 <xQueueGenericSendFromISR+0x5a>
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	2b02      	cmp	r3, #2
 8014178:	d103      	bne.n	8014182 <xQueueGenericSendFromISR+0x6a>
 801417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801417e:	2b01      	cmp	r3, #1
 8014180:	d101      	bne.n	8014186 <xQueueGenericSendFromISR+0x6e>
 8014182:	2301      	movs	r3, #1
 8014184:	e000      	b.n	8014188 <xQueueGenericSendFromISR+0x70>
 8014186:	2300      	movs	r3, #0
 8014188:	2b00      	cmp	r3, #0
 801418a:	d10a      	bne.n	80141a2 <xQueueGenericSendFromISR+0x8a>
 801418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014190:	f383 8811 	msr	BASEPRI, r3
 8014194:	f3bf 8f6f 	isb	sy
 8014198:	f3bf 8f4f 	dsb	sy
 801419c:	623b      	str	r3, [r7, #32]
 801419e:	bf00      	nop
 80141a0:	e7fe      	b.n	80141a0 <xQueueGenericSendFromISR+0x88>
 80141a2:	f002 f979 	bl	8016498 <vPortValidateInterruptPriority>
 80141a6:	f3ef 8211 	mrs	r2, BASEPRI
 80141aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ae:	f383 8811 	msr	BASEPRI, r3
 80141b2:	f3bf 8f6f 	isb	sy
 80141b6:	f3bf 8f4f 	dsb	sy
 80141ba:	61fa      	str	r2, [r7, #28]
 80141bc:	61bb      	str	r3, [r7, #24]
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	637b      	str	r3, [r7, #52]	; 0x34
 80141c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d302      	bcc.n	80141d4 <xQueueGenericSendFromISR+0xbc>
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	2b02      	cmp	r3, #2
 80141d2:	d12f      	bne.n	8014234 <xQueueGenericSendFromISR+0x11c>
 80141d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80141de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	68b9      	ldr	r1, [r7, #8]
 80141e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80141ea:	f000 f991 	bl	8014510 <prvCopyDataToQueue>
 80141ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80141f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141f6:	d112      	bne.n	801421e <xQueueGenericSendFromISR+0x106>
 80141f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d016      	beq.n	801422e <xQueueGenericSendFromISR+0x116>
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	3324      	adds	r3, #36	; 0x24
 8014204:	4618      	mov	r0, r3
 8014206:	f001 f8af 	bl	8015368 <xTaskRemoveFromEventList>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d00e      	beq.n	801422e <xQueueGenericSendFromISR+0x116>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d00b      	beq.n	801422e <xQueueGenericSendFromISR+0x116>
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2201      	movs	r2, #1
 801421a:	601a      	str	r2, [r3, #0]
 801421c:	e007      	b.n	801422e <xQueueGenericSendFromISR+0x116>
 801421e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014222:	3301      	adds	r3, #1
 8014224:	b2db      	uxtb	r3, r3
 8014226:	b25a      	sxtb	r2, r3
 8014228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801422a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801422e:	2301      	movs	r3, #1
 8014230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014232:	e001      	b.n	8014238 <xQueueGenericSendFromISR+0x120>
 8014234:	2300      	movs	r3, #0
 8014236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801423a:	617b      	str	r3, [r7, #20]
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	f383 8811 	msr	BASEPRI, r3
 8014242:	bf00      	nop
 8014244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014246:	4618      	mov	r0, r3
 8014248:	3740      	adds	r7, #64	; 0x40
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
	...

08014250 <xQueueReceive>:
 8014250:	b580      	push	{r7, lr}
 8014252:	b08c      	sub	sp, #48	; 0x30
 8014254:	af00      	add	r7, sp, #0
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	607a      	str	r2, [r7, #4]
 801425c:	2300      	movs	r3, #0
 801425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	62bb      	str	r3, [r7, #40]	; 0x28
 8014264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014266:	2b00      	cmp	r3, #0
 8014268:	d10a      	bne.n	8014280 <xQueueReceive+0x30>
 801426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801426e:	f383 8811 	msr	BASEPRI, r3
 8014272:	f3bf 8f6f 	isb	sy
 8014276:	f3bf 8f4f 	dsb	sy
 801427a:	623b      	str	r3, [r7, #32]
 801427c:	bf00      	nop
 801427e:	e7fe      	b.n	801427e <xQueueReceive+0x2e>
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d103      	bne.n	801428e <xQueueReceive+0x3e>
 8014286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801428a:	2b00      	cmp	r3, #0
 801428c:	d101      	bne.n	8014292 <xQueueReceive+0x42>
 801428e:	2301      	movs	r3, #1
 8014290:	e000      	b.n	8014294 <xQueueReceive+0x44>
 8014292:	2300      	movs	r3, #0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d10a      	bne.n	80142ae <xQueueReceive+0x5e>
 8014298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801429c:	f383 8811 	msr	BASEPRI, r3
 80142a0:	f3bf 8f6f 	isb	sy
 80142a4:	f3bf 8f4f 	dsb	sy
 80142a8:	61fb      	str	r3, [r7, #28]
 80142aa:	bf00      	nop
 80142ac:	e7fe      	b.n	80142ac <xQueueReceive+0x5c>
 80142ae:	f001 fa7b 	bl	80157a8 <xTaskGetSchedulerState>
 80142b2:	4603      	mov	r3, r0
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d102      	bne.n	80142be <xQueueReceive+0x6e>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d101      	bne.n	80142c2 <xQueueReceive+0x72>
 80142be:	2301      	movs	r3, #1
 80142c0:	e000      	b.n	80142c4 <xQueueReceive+0x74>
 80142c2:	2300      	movs	r3, #0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d10a      	bne.n	80142de <xQueueReceive+0x8e>
 80142c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142cc:	f383 8811 	msr	BASEPRI, r3
 80142d0:	f3bf 8f6f 	isb	sy
 80142d4:	f3bf 8f4f 	dsb	sy
 80142d8:	61bb      	str	r3, [r7, #24]
 80142da:	bf00      	nop
 80142dc:	e7fe      	b.n	80142dc <xQueueReceive+0x8c>
 80142de:	f001 fff9 	bl	80162d4 <vPortEnterCritical>
 80142e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142e6:	627b      	str	r3, [r7, #36]	; 0x24
 80142e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d01f      	beq.n	801432e <xQueueReceive+0xde>
 80142ee:	68b9      	ldr	r1, [r7, #8]
 80142f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142f2:	f000 f977 	bl	80145e4 <prvCopyDataFromQueue>
 80142f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f8:	1e5a      	subs	r2, r3, #1
 80142fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fc:	639a      	str	r2, [r3, #56]	; 0x38
 80142fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014300:	691b      	ldr	r3, [r3, #16]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d00f      	beq.n	8014326 <xQueueReceive+0xd6>
 8014306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014308:	3310      	adds	r3, #16
 801430a:	4618      	mov	r0, r3
 801430c:	f001 f82c 	bl	8015368 <xTaskRemoveFromEventList>
 8014310:	4603      	mov	r3, r0
 8014312:	2b00      	cmp	r3, #0
 8014314:	d007      	beq.n	8014326 <xQueueReceive+0xd6>
 8014316:	4b3d      	ldr	r3, [pc, #244]	; (801440c <xQueueReceive+0x1bc>)
 8014318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801431c:	601a      	str	r2, [r3, #0]
 801431e:	f3bf 8f4f 	dsb	sy
 8014322:	f3bf 8f6f 	isb	sy
 8014326:	f002 f805 	bl	8016334 <vPortExitCritical>
 801432a:	2301      	movs	r3, #1
 801432c:	e069      	b.n	8014402 <xQueueReceive+0x1b2>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d103      	bne.n	801433c <xQueueReceive+0xec>
 8014334:	f001 fffe 	bl	8016334 <vPortExitCritical>
 8014338:	2300      	movs	r3, #0
 801433a:	e062      	b.n	8014402 <xQueueReceive+0x1b2>
 801433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433e:	2b00      	cmp	r3, #0
 8014340:	d106      	bne.n	8014350 <xQueueReceive+0x100>
 8014342:	f107 0310 	add.w	r3, r7, #16
 8014346:	4618      	mov	r0, r3
 8014348:	f001 f8d4 	bl	80154f4 <vTaskInternalSetTimeOutState>
 801434c:	2301      	movs	r3, #1
 801434e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014350:	f001 fff0 	bl	8016334 <vPortExitCritical>
 8014354:	f000 fda0 	bl	8014e98 <vTaskSuspendAll>
 8014358:	f001 ffbc 	bl	80162d4 <vPortEnterCritical>
 801435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801435e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014362:	b25b      	sxtb	r3, r3
 8014364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014368:	d103      	bne.n	8014372 <xQueueReceive+0x122>
 801436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436c:	2200      	movs	r2, #0
 801436e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014378:	b25b      	sxtb	r3, r3
 801437a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801437e:	d103      	bne.n	8014388 <xQueueReceive+0x138>
 8014380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014382:	2200      	movs	r2, #0
 8014384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014388:	f001 ffd4 	bl	8016334 <vPortExitCritical>
 801438c:	1d3a      	adds	r2, r7, #4
 801438e:	f107 0310 	add.w	r3, r7, #16
 8014392:	4611      	mov	r1, r2
 8014394:	4618      	mov	r0, r3
 8014396:	f001 f8c3 	bl	8015520 <xTaskCheckForTimeOut>
 801439a:	4603      	mov	r3, r0
 801439c:	2b00      	cmp	r3, #0
 801439e:	d123      	bne.n	80143e8 <xQueueReceive+0x198>
 80143a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143a2:	f000 f997 	bl	80146d4 <prvIsQueueEmpty>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d017      	beq.n	80143dc <xQueueReceive+0x18c>
 80143ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ae:	3324      	adds	r3, #36	; 0x24
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	4611      	mov	r1, r2
 80143b4:	4618      	mov	r0, r3
 80143b6:	f000 ff4b 	bl	8015250 <vTaskPlaceOnEventList>
 80143ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143bc:	f000 f938 	bl	8014630 <prvUnlockQueue>
 80143c0:	f000 fd78 	bl	8014eb4 <xTaskResumeAll>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d189      	bne.n	80142de <xQueueReceive+0x8e>
 80143ca:	4b10      	ldr	r3, [pc, #64]	; (801440c <xQueueReceive+0x1bc>)
 80143cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143d0:	601a      	str	r2, [r3, #0]
 80143d2:	f3bf 8f4f 	dsb	sy
 80143d6:	f3bf 8f6f 	isb	sy
 80143da:	e780      	b.n	80142de <xQueueReceive+0x8e>
 80143dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143de:	f000 f927 	bl	8014630 <prvUnlockQueue>
 80143e2:	f000 fd67 	bl	8014eb4 <xTaskResumeAll>
 80143e6:	e77a      	b.n	80142de <xQueueReceive+0x8e>
 80143e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ea:	f000 f921 	bl	8014630 <prvUnlockQueue>
 80143ee:	f000 fd61 	bl	8014eb4 <xTaskResumeAll>
 80143f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143f4:	f000 f96e 	bl	80146d4 <prvIsQueueEmpty>
 80143f8:	4603      	mov	r3, r0
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	f43f af6f 	beq.w	80142de <xQueueReceive+0x8e>
 8014400:	2300      	movs	r3, #0
 8014402:	4618      	mov	r0, r3
 8014404:	3730      	adds	r7, #48	; 0x30
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	e000ed04 	.word	0xe000ed04

08014410 <xQueueReceiveFromISR>:
 8014410:	b580      	push	{r7, lr}
 8014412:	b08e      	sub	sp, #56	; 0x38
 8014414:	af00      	add	r7, sp, #0
 8014416:	60f8      	str	r0, [r7, #12]
 8014418:	60b9      	str	r1, [r7, #8]
 801441a:	607a      	str	r2, [r7, #4]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	633b      	str	r3, [r7, #48]	; 0x30
 8014420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014422:	2b00      	cmp	r3, #0
 8014424:	d10a      	bne.n	801443c <xQueueReceiveFromISR+0x2c>
 8014426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801442a:	f383 8811 	msr	BASEPRI, r3
 801442e:	f3bf 8f6f 	isb	sy
 8014432:	f3bf 8f4f 	dsb	sy
 8014436:	623b      	str	r3, [r7, #32]
 8014438:	bf00      	nop
 801443a:	e7fe      	b.n	801443a <xQueueReceiveFromISR+0x2a>
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d103      	bne.n	801444a <xQueueReceiveFromISR+0x3a>
 8014442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014446:	2b00      	cmp	r3, #0
 8014448:	d101      	bne.n	801444e <xQueueReceiveFromISR+0x3e>
 801444a:	2301      	movs	r3, #1
 801444c:	e000      	b.n	8014450 <xQueueReceiveFromISR+0x40>
 801444e:	2300      	movs	r3, #0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d10a      	bne.n	801446a <xQueueReceiveFromISR+0x5a>
 8014454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	61fb      	str	r3, [r7, #28]
 8014466:	bf00      	nop
 8014468:	e7fe      	b.n	8014468 <xQueueReceiveFromISR+0x58>
 801446a:	f002 f815 	bl	8016498 <vPortValidateInterruptPriority>
 801446e:	f3ef 8211 	mrs	r2, BASEPRI
 8014472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014476:	f383 8811 	msr	BASEPRI, r3
 801447a:	f3bf 8f6f 	isb	sy
 801447e:	f3bf 8f4f 	dsb	sy
 8014482:	61ba      	str	r2, [r7, #24]
 8014484:	617b      	str	r3, [r7, #20]
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	62fb      	str	r3, [r7, #44]	; 0x2c
 801448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801448e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014492:	2b00      	cmp	r3, #0
 8014494:	d02f      	beq.n	80144f6 <xQueueReceiveFromISR+0xe6>
 8014496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801449c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80144a0:	68b9      	ldr	r1, [r7, #8]
 80144a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144a4:	f000 f89e 	bl	80145e4 <prvCopyDataFromQueue>
 80144a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144aa:	1e5a      	subs	r2, r3, #1
 80144ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ae:	639a      	str	r2, [r3, #56]	; 0x38
 80144b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80144b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144b8:	d112      	bne.n	80144e0 <xQueueReceiveFromISR+0xd0>
 80144ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144bc:	691b      	ldr	r3, [r3, #16]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d016      	beq.n	80144f0 <xQueueReceiveFromISR+0xe0>
 80144c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c4:	3310      	adds	r3, #16
 80144c6:	4618      	mov	r0, r3
 80144c8:	f000 ff4e 	bl	8015368 <xTaskRemoveFromEventList>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d00e      	beq.n	80144f0 <xQueueReceiveFromISR+0xe0>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00b      	beq.n	80144f0 <xQueueReceiveFromISR+0xe0>
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2201      	movs	r2, #1
 80144dc:	601a      	str	r2, [r3, #0]
 80144de:	e007      	b.n	80144f0 <xQueueReceiveFromISR+0xe0>
 80144e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144e4:	3301      	adds	r3, #1
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	b25a      	sxtb	r2, r3
 80144ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144f0:	2301      	movs	r3, #1
 80144f2:	637b      	str	r3, [r7, #52]	; 0x34
 80144f4:	e001      	b.n	80144fa <xQueueReceiveFromISR+0xea>
 80144f6:	2300      	movs	r3, #0
 80144f8:	637b      	str	r3, [r7, #52]	; 0x34
 80144fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144fc:	613b      	str	r3, [r7, #16]
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	f383 8811 	msr	BASEPRI, r3
 8014504:	bf00      	nop
 8014506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014508:	4618      	mov	r0, r3
 801450a:	3738      	adds	r7, #56	; 0x38
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}

08014510 <prvCopyDataToQueue>:
 8014510:	b580      	push	{r7, lr}
 8014512:	b086      	sub	sp, #24
 8014514:	af00      	add	r7, sp, #0
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	60b9      	str	r1, [r7, #8]
 801451a:	607a      	str	r2, [r7, #4]
 801451c:	2300      	movs	r3, #0
 801451e:	617b      	str	r3, [r7, #20]
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014524:	613b      	str	r3, [r7, #16]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801452a:	2b00      	cmp	r3, #0
 801452c:	d10d      	bne.n	801454a <prvCopyDataToQueue+0x3a>
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d14d      	bne.n	80145d2 <prvCopyDataToQueue+0xc2>
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	689b      	ldr	r3, [r3, #8]
 801453a:	4618      	mov	r0, r3
 801453c:	f001 f952 	bl	80157e4 <xTaskPriorityDisinherit>
 8014540:	6178      	str	r0, [r7, #20]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2200      	movs	r2, #0
 8014546:	609a      	str	r2, [r3, #8]
 8014548:	e043      	b.n	80145d2 <prvCopyDataToQueue+0xc2>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d119      	bne.n	8014584 <prvCopyDataToQueue+0x74>
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6858      	ldr	r0, [r3, #4]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014558:	461a      	mov	r2, r3
 801455a:	68b9      	ldr	r1, [r7, #8]
 801455c:	f002 fa00 	bl	8016960 <memcpy>
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	685a      	ldr	r2, [r3, #4]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014568:	441a      	add	r2, r3
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	605a      	str	r2, [r3, #4]
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	685a      	ldr	r2, [r3, #4]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	429a      	cmp	r2, r3
 8014578:	d32b      	bcc.n	80145d2 <prvCopyDataToQueue+0xc2>
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	605a      	str	r2, [r3, #4]
 8014582:	e026      	b.n	80145d2 <prvCopyDataToQueue+0xc2>
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	68d8      	ldr	r0, [r3, #12]
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801458c:	461a      	mov	r2, r3
 801458e:	68b9      	ldr	r1, [r7, #8]
 8014590:	f002 f9e6 	bl	8016960 <memcpy>
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	68da      	ldr	r2, [r3, #12]
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801459c:	425b      	negs	r3, r3
 801459e:	441a      	add	r2, r3
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	60da      	str	r2, [r3, #12]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	68da      	ldr	r2, [r3, #12]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d207      	bcs.n	80145c0 <prvCopyDataToQueue+0xb0>
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	689a      	ldr	r2, [r3, #8]
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145b8:	425b      	negs	r3, r3
 80145ba:	441a      	add	r2, r3
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	60da      	str	r2, [r3, #12]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b02      	cmp	r3, #2
 80145c4:	d105      	bne.n	80145d2 <prvCopyDataToQueue+0xc2>
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d002      	beq.n	80145d2 <prvCopyDataToQueue+0xc2>
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	3b01      	subs	r3, #1
 80145d0:	613b      	str	r3, [r7, #16]
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	1c5a      	adds	r2, r3, #1
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	639a      	str	r2, [r3, #56]	; 0x38
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	4618      	mov	r0, r3
 80145de:	3718      	adds	r7, #24
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}

080145e4 <prvCopyDataFromQueue>:
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d018      	beq.n	8014628 <prvCopyDataFromQueue+0x44>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	68da      	ldr	r2, [r3, #12]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145fe:	441a      	add	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	60da      	str	r2, [r3, #12]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	68da      	ldr	r2, [r3, #12]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	689b      	ldr	r3, [r3, #8]
 801460c:	429a      	cmp	r2, r3
 801460e:	d303      	bcc.n	8014618 <prvCopyDataFromQueue+0x34>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681a      	ldr	r2, [r3, #0]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	60da      	str	r2, [r3, #12]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	68d9      	ldr	r1, [r3, #12]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014620:	461a      	mov	r2, r3
 8014622:	6838      	ldr	r0, [r7, #0]
 8014624:	f002 f99c 	bl	8016960 <memcpy>
 8014628:	bf00      	nop
 801462a:	3708      	adds	r7, #8
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <prvUnlockQueue>:
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	f001 fe4c 	bl	80162d4 <vPortEnterCritical>
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014642:	73fb      	strb	r3, [r7, #15]
 8014644:	e011      	b.n	801466a <prvUnlockQueue+0x3a>
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801464a:	2b00      	cmp	r3, #0
 801464c:	d012      	beq.n	8014674 <prvUnlockQueue+0x44>
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	3324      	adds	r3, #36	; 0x24
 8014652:	4618      	mov	r0, r3
 8014654:	f000 fe88 	bl	8015368 <xTaskRemoveFromEventList>
 8014658:	4603      	mov	r3, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d001      	beq.n	8014662 <prvUnlockQueue+0x32>
 801465e:	f000 ffc1 	bl	80155e4 <vTaskMissedYield>
 8014662:	7bfb      	ldrb	r3, [r7, #15]
 8014664:	3b01      	subs	r3, #1
 8014666:	b2db      	uxtb	r3, r3
 8014668:	73fb      	strb	r3, [r7, #15]
 801466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801466e:	2b00      	cmp	r3, #0
 8014670:	dce9      	bgt.n	8014646 <prvUnlockQueue+0x16>
 8014672:	e000      	b.n	8014676 <prvUnlockQueue+0x46>
 8014674:	bf00      	nop
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	22ff      	movs	r2, #255	; 0xff
 801467a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801467e:	f001 fe59 	bl	8016334 <vPortExitCritical>
 8014682:	f001 fe27 	bl	80162d4 <vPortEnterCritical>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801468c:	73bb      	strb	r3, [r7, #14]
 801468e:	e011      	b.n	80146b4 <prvUnlockQueue+0x84>
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	691b      	ldr	r3, [r3, #16]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d012      	beq.n	80146be <prvUnlockQueue+0x8e>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	3310      	adds	r3, #16
 801469c:	4618      	mov	r0, r3
 801469e:	f000 fe63 	bl	8015368 <xTaskRemoveFromEventList>
 80146a2:	4603      	mov	r3, r0
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d001      	beq.n	80146ac <prvUnlockQueue+0x7c>
 80146a8:	f000 ff9c 	bl	80155e4 <vTaskMissedYield>
 80146ac:	7bbb      	ldrb	r3, [r7, #14]
 80146ae:	3b01      	subs	r3, #1
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	73bb      	strb	r3, [r7, #14]
 80146b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	dce9      	bgt.n	8014690 <prvUnlockQueue+0x60>
 80146bc:	e000      	b.n	80146c0 <prvUnlockQueue+0x90>
 80146be:	bf00      	nop
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	22ff      	movs	r2, #255	; 0xff
 80146c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146c8:	f001 fe34 	bl	8016334 <vPortExitCritical>
 80146cc:	bf00      	nop
 80146ce:	3710      	adds	r7, #16
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <prvIsQueueEmpty>:
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b084      	sub	sp, #16
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	f001 fdfa 	bl	80162d4 <vPortEnterCritical>
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d102      	bne.n	80146ee <prvIsQueueEmpty+0x1a>
 80146e8:	2301      	movs	r3, #1
 80146ea:	60fb      	str	r3, [r7, #12]
 80146ec:	e001      	b.n	80146f2 <prvIsQueueEmpty+0x1e>
 80146ee:	2300      	movs	r3, #0
 80146f0:	60fb      	str	r3, [r7, #12]
 80146f2:	f001 fe1f 	bl	8016334 <vPortExitCritical>
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	4618      	mov	r0, r3
 80146fa:	3710      	adds	r7, #16
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <prvIsQueueFull>:
 8014700:	b580      	push	{r7, lr}
 8014702:	b084      	sub	sp, #16
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	f001 fde4 	bl	80162d4 <vPortEnterCritical>
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014714:	429a      	cmp	r2, r3
 8014716:	d102      	bne.n	801471e <prvIsQueueFull+0x1e>
 8014718:	2301      	movs	r3, #1
 801471a:	60fb      	str	r3, [r7, #12]
 801471c:	e001      	b.n	8014722 <prvIsQueueFull+0x22>
 801471e:	2300      	movs	r3, #0
 8014720:	60fb      	str	r3, [r7, #12]
 8014722:	f001 fe07 	bl	8016334 <vPortExitCritical>
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	4618      	mov	r0, r3
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <vQueueAddToRegistry>:
 8014730:	b480      	push	{r7}
 8014732:	b085      	sub	sp, #20
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6039      	str	r1, [r7, #0]
 801473a:	2300      	movs	r3, #0
 801473c:	60fb      	str	r3, [r7, #12]
 801473e:	e014      	b.n	801476a <vQueueAddToRegistry+0x3a>
 8014740:	4a0f      	ldr	r2, [pc, #60]	; (8014780 <vQueueAddToRegistry+0x50>)
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d10b      	bne.n	8014764 <vQueueAddToRegistry+0x34>
 801474c:	490c      	ldr	r1, [pc, #48]	; (8014780 <vQueueAddToRegistry+0x50>)
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	683a      	ldr	r2, [r7, #0]
 8014752:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014756:	4a0a      	ldr	r2, [pc, #40]	; (8014780 <vQueueAddToRegistry+0x50>)
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	00db      	lsls	r3, r3, #3
 801475c:	4413      	add	r3, r2
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	605a      	str	r2, [r3, #4]
 8014762:	e006      	b.n	8014772 <vQueueAddToRegistry+0x42>
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	3301      	adds	r3, #1
 8014768:	60fb      	str	r3, [r7, #12]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2b07      	cmp	r3, #7
 801476e:	d9e7      	bls.n	8014740 <vQueueAddToRegistry+0x10>
 8014770:	bf00      	nop
 8014772:	bf00      	nop
 8014774:	3714      	adds	r7, #20
 8014776:	46bd      	mov	sp, r7
 8014778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	240017ec 	.word	0x240017ec

08014784 <vQueueWaitForMessageRestricted>:
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	60b9      	str	r1, [r7, #8]
 801478e:	607a      	str	r2, [r7, #4]
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	617b      	str	r3, [r7, #20]
 8014794:	f001 fd9e 	bl	80162d4 <vPortEnterCritical>
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801479e:	b25b      	sxtb	r3, r3
 80147a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147a4:	d103      	bne.n	80147ae <vQueueWaitForMessageRestricted+0x2a>
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	2200      	movs	r2, #0
 80147aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80147b4:	b25b      	sxtb	r3, r3
 80147b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147ba:	d103      	bne.n	80147c4 <vQueueWaitForMessageRestricted+0x40>
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	2200      	movs	r2, #0
 80147c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80147c4:	f001 fdb6 	bl	8016334 <vPortExitCritical>
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d106      	bne.n	80147de <vQueueWaitForMessageRestricted+0x5a>
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	3324      	adds	r3, #36	; 0x24
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	68b9      	ldr	r1, [r7, #8]
 80147d8:	4618      	mov	r0, r3
 80147da:	f000 fd99 	bl	8015310 <vTaskPlaceOnEventListRestricted>
 80147de:	6978      	ldr	r0, [r7, #20]
 80147e0:	f7ff ff26 	bl	8014630 <prvUnlockQueue>
 80147e4:	bf00      	nop
 80147e6:	3718      	adds	r7, #24
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <xTaskCreateStatic>:
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b08e      	sub	sp, #56	; 0x38
 80147f0:	af04      	add	r7, sp, #16
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
 80147f8:	603b      	str	r3, [r7, #0]
 80147fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d10a      	bne.n	8014816 <xTaskCreateStatic+0x2a>
 8014800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014804:	f383 8811 	msr	BASEPRI, r3
 8014808:	f3bf 8f6f 	isb	sy
 801480c:	f3bf 8f4f 	dsb	sy
 8014810:	623b      	str	r3, [r7, #32]
 8014812:	bf00      	nop
 8014814:	e7fe      	b.n	8014814 <xTaskCreateStatic+0x28>
 8014816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014818:	2b00      	cmp	r3, #0
 801481a:	d10a      	bne.n	8014832 <xTaskCreateStatic+0x46>
 801481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014820:	f383 8811 	msr	BASEPRI, r3
 8014824:	f3bf 8f6f 	isb	sy
 8014828:	f3bf 8f4f 	dsb	sy
 801482c:	61fb      	str	r3, [r7, #28]
 801482e:	bf00      	nop
 8014830:	e7fe      	b.n	8014830 <xTaskCreateStatic+0x44>
 8014832:	235c      	movs	r3, #92	; 0x5c
 8014834:	613b      	str	r3, [r7, #16]
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	2b5c      	cmp	r3, #92	; 0x5c
 801483a:	d00a      	beq.n	8014852 <xTaskCreateStatic+0x66>
 801483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014840:	f383 8811 	msr	BASEPRI, r3
 8014844:	f3bf 8f6f 	isb	sy
 8014848:	f3bf 8f4f 	dsb	sy
 801484c:	61bb      	str	r3, [r7, #24]
 801484e:	bf00      	nop
 8014850:	e7fe      	b.n	8014850 <xTaskCreateStatic+0x64>
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014856:	2b00      	cmp	r3, #0
 8014858:	d01e      	beq.n	8014898 <xTaskCreateStatic+0xac>
 801485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801485c:	2b00      	cmp	r3, #0
 801485e:	d01b      	beq.n	8014898 <xTaskCreateStatic+0xac>
 8014860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014862:	627b      	str	r3, [r7, #36]	; 0x24
 8014864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014868:	631a      	str	r2, [r3, #48]	; 0x30
 801486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486c:	2202      	movs	r2, #2
 801486e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8014872:	2300      	movs	r3, #0
 8014874:	9303      	str	r3, [sp, #12]
 8014876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014878:	9302      	str	r3, [sp, #8]
 801487a:	f107 0314 	add.w	r3, r7, #20
 801487e:	9301      	str	r3, [sp, #4]
 8014880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014882:	9300      	str	r3, [sp, #0]
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	687a      	ldr	r2, [r7, #4]
 8014888:	68b9      	ldr	r1, [r7, #8]
 801488a:	68f8      	ldr	r0, [r7, #12]
 801488c:	f000 f850 	bl	8014930 <prvInitialiseNewTask>
 8014890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014892:	f000 f8dd 	bl	8014a50 <prvAddNewTaskToReadyList>
 8014896:	e001      	b.n	801489c <xTaskCreateStatic+0xb0>
 8014898:	2300      	movs	r3, #0
 801489a:	617b      	str	r3, [r7, #20]
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	4618      	mov	r0, r3
 80148a0:	3728      	adds	r7, #40	; 0x28
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}

080148a6 <xTaskCreate>:
 80148a6:	b580      	push	{r7, lr}
 80148a8:	b08c      	sub	sp, #48	; 0x30
 80148aa:	af04      	add	r7, sp, #16
 80148ac:	60f8      	str	r0, [r7, #12]
 80148ae:	60b9      	str	r1, [r7, #8]
 80148b0:	603b      	str	r3, [r7, #0]
 80148b2:	4613      	mov	r3, r2
 80148b4:	80fb      	strh	r3, [r7, #6]
 80148b6:	88fb      	ldrh	r3, [r7, #6]
 80148b8:	009b      	lsls	r3, r3, #2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f001 fe2c 	bl	8016518 <pvPortMalloc>
 80148c0:	6178      	str	r0, [r7, #20]
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d00e      	beq.n	80148e6 <xTaskCreate+0x40>
 80148c8:	205c      	movs	r0, #92	; 0x5c
 80148ca:	f001 fe25 	bl	8016518 <pvPortMalloc>
 80148ce:	61f8      	str	r0, [r7, #28]
 80148d0:	69fb      	ldr	r3, [r7, #28]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d003      	beq.n	80148de <xTaskCreate+0x38>
 80148d6:	69fb      	ldr	r3, [r7, #28]
 80148d8:	697a      	ldr	r2, [r7, #20]
 80148da:	631a      	str	r2, [r3, #48]	; 0x30
 80148dc:	e005      	b.n	80148ea <xTaskCreate+0x44>
 80148de:	6978      	ldr	r0, [r7, #20]
 80148e0:	f001 fee6 	bl	80166b0 <vPortFree>
 80148e4:	e001      	b.n	80148ea <xTaskCreate+0x44>
 80148e6:	2300      	movs	r3, #0
 80148e8:	61fb      	str	r3, [r7, #28]
 80148ea:	69fb      	ldr	r3, [r7, #28]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d017      	beq.n	8014920 <xTaskCreate+0x7a>
 80148f0:	69fb      	ldr	r3, [r7, #28]
 80148f2:	2200      	movs	r2, #0
 80148f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80148f8:	88fa      	ldrh	r2, [r7, #6]
 80148fa:	2300      	movs	r3, #0
 80148fc:	9303      	str	r3, [sp, #12]
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	9302      	str	r3, [sp, #8]
 8014902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014904:	9301      	str	r3, [sp, #4]
 8014906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	68b9      	ldr	r1, [r7, #8]
 801490e:	68f8      	ldr	r0, [r7, #12]
 8014910:	f000 f80e 	bl	8014930 <prvInitialiseNewTask>
 8014914:	69f8      	ldr	r0, [r7, #28]
 8014916:	f000 f89b 	bl	8014a50 <prvAddNewTaskToReadyList>
 801491a:	2301      	movs	r3, #1
 801491c:	61bb      	str	r3, [r7, #24]
 801491e:	e002      	b.n	8014926 <xTaskCreate+0x80>
 8014920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014924:	61bb      	str	r3, [r7, #24]
 8014926:	69bb      	ldr	r3, [r7, #24]
 8014928:	4618      	mov	r0, r3
 801492a:	3720      	adds	r7, #32
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <prvInitialiseNewTask>:
 8014930:	b580      	push	{r7, lr}
 8014932:	b088      	sub	sp, #32
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
 801493c:	603b      	str	r3, [r7, #0]
 801493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	461a      	mov	r2, r3
 8014948:	21a5      	movs	r1, #165	; 0xa5
 801494a:	f002 f817 	bl	801697c <memset>
 801494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014952:	6879      	ldr	r1, [r7, #4]
 8014954:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014958:	440b      	add	r3, r1
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	4413      	add	r3, r2
 801495e:	61bb      	str	r3, [r7, #24]
 8014960:	69bb      	ldr	r3, [r7, #24]
 8014962:	f023 0307 	bic.w	r3, r3, #7
 8014966:	61bb      	str	r3, [r7, #24]
 8014968:	69bb      	ldr	r3, [r7, #24]
 801496a:	f003 0307 	and.w	r3, r3, #7
 801496e:	2b00      	cmp	r3, #0
 8014970:	d00a      	beq.n	8014988 <prvInitialiseNewTask+0x58>
 8014972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014976:	f383 8811 	msr	BASEPRI, r3
 801497a:	f3bf 8f6f 	isb	sy
 801497e:	f3bf 8f4f 	dsb	sy
 8014982:	617b      	str	r3, [r7, #20]
 8014984:	bf00      	nop
 8014986:	e7fe      	b.n	8014986 <prvInitialiseNewTask+0x56>
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d01f      	beq.n	80149ce <prvInitialiseNewTask+0x9e>
 801498e:	2300      	movs	r3, #0
 8014990:	61fb      	str	r3, [r7, #28]
 8014992:	e012      	b.n	80149ba <prvInitialiseNewTask+0x8a>
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	69fb      	ldr	r3, [r7, #28]
 8014998:	4413      	add	r3, r2
 801499a:	7819      	ldrb	r1, [r3, #0]
 801499c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801499e:	69fb      	ldr	r3, [r7, #28]
 80149a0:	4413      	add	r3, r2
 80149a2:	3334      	adds	r3, #52	; 0x34
 80149a4:	460a      	mov	r2, r1
 80149a6:	701a      	strb	r2, [r3, #0]
 80149a8:	68ba      	ldr	r2, [r7, #8]
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	4413      	add	r3, r2
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d006      	beq.n	80149c2 <prvInitialiseNewTask+0x92>
 80149b4:	69fb      	ldr	r3, [r7, #28]
 80149b6:	3301      	adds	r3, #1
 80149b8:	61fb      	str	r3, [r7, #28]
 80149ba:	69fb      	ldr	r3, [r7, #28]
 80149bc:	2b0f      	cmp	r3, #15
 80149be:	d9e9      	bls.n	8014994 <prvInitialiseNewTask+0x64>
 80149c0:	e000      	b.n	80149c4 <prvInitialiseNewTask+0x94>
 80149c2:	bf00      	nop
 80149c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c6:	2200      	movs	r2, #0
 80149c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80149cc:	e003      	b.n	80149d6 <prvInitialiseNewTask+0xa6>
 80149ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d0:	2200      	movs	r2, #0
 80149d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80149d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d8:	2b37      	cmp	r3, #55	; 0x37
 80149da:	d901      	bls.n	80149e0 <prvInitialiseNewTask+0xb0>
 80149dc:	2337      	movs	r3, #55	; 0x37
 80149de:	62bb      	str	r3, [r7, #40]	; 0x28
 80149e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80149e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80149ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ee:	2200      	movs	r2, #0
 80149f0:	651a      	str	r2, [r3, #80]	; 0x50
 80149f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f4:	3304      	adds	r3, #4
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7ff f8be 	bl	8013b78 <vListInitialiseItem>
 80149fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fe:	3318      	adds	r3, #24
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7ff f8b9 	bl	8013b78 <vListInitialiseItem>
 8014a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a0a:	611a      	str	r2, [r3, #16]
 8014a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a14:	619a      	str	r2, [r3, #24]
 8014a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8014a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1e:	2200      	movs	r2, #0
 8014a20:	655a      	str	r2, [r3, #84]	; 0x54
 8014a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a24:	2200      	movs	r2, #0
 8014a26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	68f9      	ldr	r1, [r7, #12]
 8014a2e:	69b8      	ldr	r0, [r7, #24]
 8014a30:	f001 fb20 	bl	8016074 <pxPortInitialiseStack>
 8014a34:	4602      	mov	r2, r0
 8014a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a38:	601a      	str	r2, [r3, #0]
 8014a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d002      	beq.n	8014a46 <prvInitialiseNewTask+0x116>
 8014a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	bf00      	nop
 8014a48:	3720      	adds	r7, #32
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
	...

08014a50 <prvAddNewTaskToReadyList>:
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b082      	sub	sp, #8
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	f001 fc3c 	bl	80162d4 <vPortEnterCritical>
 8014a5c:	4b2d      	ldr	r3, [pc, #180]	; (8014b14 <prvAddNewTaskToReadyList+0xc4>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	3301      	adds	r3, #1
 8014a62:	4a2c      	ldr	r2, [pc, #176]	; (8014b14 <prvAddNewTaskToReadyList+0xc4>)
 8014a64:	6013      	str	r3, [r2, #0]
 8014a66:	4b2c      	ldr	r3, [pc, #176]	; (8014b18 <prvAddNewTaskToReadyList+0xc8>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d109      	bne.n	8014a82 <prvAddNewTaskToReadyList+0x32>
 8014a6e:	4a2a      	ldr	r2, [pc, #168]	; (8014b18 <prvAddNewTaskToReadyList+0xc8>)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6013      	str	r3, [r2, #0]
 8014a74:	4b27      	ldr	r3, [pc, #156]	; (8014b14 <prvAddNewTaskToReadyList+0xc4>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b01      	cmp	r3, #1
 8014a7a:	d110      	bne.n	8014a9e <prvAddNewTaskToReadyList+0x4e>
 8014a7c:	f000 fdd6 	bl	801562c <prvInitialiseTaskLists>
 8014a80:	e00d      	b.n	8014a9e <prvAddNewTaskToReadyList+0x4e>
 8014a82:	4b26      	ldr	r3, [pc, #152]	; (8014b1c <prvAddNewTaskToReadyList+0xcc>)
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d109      	bne.n	8014a9e <prvAddNewTaskToReadyList+0x4e>
 8014a8a:	4b23      	ldr	r3, [pc, #140]	; (8014b18 <prvAddNewTaskToReadyList+0xc8>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d802      	bhi.n	8014a9e <prvAddNewTaskToReadyList+0x4e>
 8014a98:	4a1f      	ldr	r2, [pc, #124]	; (8014b18 <prvAddNewTaskToReadyList+0xc8>)
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6013      	str	r3, [r2, #0]
 8014a9e:	4b20      	ldr	r3, [pc, #128]	; (8014b20 <prvAddNewTaskToReadyList+0xd0>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	4a1e      	ldr	r2, [pc, #120]	; (8014b20 <prvAddNewTaskToReadyList+0xd0>)
 8014aa6:	6013      	str	r3, [r2, #0]
 8014aa8:	4b1d      	ldr	r3, [pc, #116]	; (8014b20 <prvAddNewTaskToReadyList+0xd0>)
 8014aaa:	681a      	ldr	r2, [r3, #0]
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	645a      	str	r2, [r3, #68]	; 0x44
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ab4:	4b1b      	ldr	r3, [pc, #108]	; (8014b24 <prvAddNewTaskToReadyList+0xd4>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d903      	bls.n	8014ac4 <prvAddNewTaskToReadyList+0x74>
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac0:	4a18      	ldr	r2, [pc, #96]	; (8014b24 <prvAddNewTaskToReadyList+0xd4>)
 8014ac2:	6013      	str	r3, [r2, #0]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac8:	4613      	mov	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4413      	add	r3, r2
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	4a15      	ldr	r2, [pc, #84]	; (8014b28 <prvAddNewTaskToReadyList+0xd8>)
 8014ad2:	441a      	add	r2, r3
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	3304      	adds	r3, #4
 8014ad8:	4619      	mov	r1, r3
 8014ada:	4610      	mov	r0, r2
 8014adc:	f7ff f859 	bl	8013b92 <vListInsertEnd>
 8014ae0:	f001 fc28 	bl	8016334 <vPortExitCritical>
 8014ae4:	4b0d      	ldr	r3, [pc, #52]	; (8014b1c <prvAddNewTaskToReadyList+0xcc>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d00e      	beq.n	8014b0a <prvAddNewTaskToReadyList+0xba>
 8014aec:	4b0a      	ldr	r3, [pc, #40]	; (8014b18 <prvAddNewTaskToReadyList+0xc8>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d207      	bcs.n	8014b0a <prvAddNewTaskToReadyList+0xba>
 8014afa:	4b0c      	ldr	r3, [pc, #48]	; (8014b2c <prvAddNewTaskToReadyList+0xdc>)
 8014afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b00:	601a      	str	r2, [r3, #0]
 8014b02:	f3bf 8f4f 	dsb	sy
 8014b06:	f3bf 8f6f 	isb	sy
 8014b0a:	bf00      	nop
 8014b0c:	3708      	adds	r7, #8
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	24001d00 	.word	0x24001d00
 8014b18:	2400182c 	.word	0x2400182c
 8014b1c:	24001d0c 	.word	0x24001d0c
 8014b20:	24001d1c 	.word	0x24001d1c
 8014b24:	24001d08 	.word	0x24001d08
 8014b28:	24001830 	.word	0x24001830
 8014b2c:	e000ed04 	.word	0xe000ed04

08014b30 <vTaskDelay>:
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b084      	sub	sp, #16
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	2300      	movs	r3, #0
 8014b3a:	60fb      	str	r3, [r7, #12]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d017      	beq.n	8014b72 <vTaskDelay+0x42>
 8014b42:	4b13      	ldr	r3, [pc, #76]	; (8014b90 <vTaskDelay+0x60>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00a      	beq.n	8014b60 <vTaskDelay+0x30>
 8014b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	60bb      	str	r3, [r7, #8]
 8014b5c:	bf00      	nop
 8014b5e:	e7fe      	b.n	8014b5e <vTaskDelay+0x2e>
 8014b60:	f000 f99a 	bl	8014e98 <vTaskSuspendAll>
 8014b64:	2100      	movs	r1, #0
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f000 fec2 	bl	80158f0 <prvAddCurrentTaskToDelayedList>
 8014b6c:	f000 f9a2 	bl	8014eb4 <xTaskResumeAll>
 8014b70:	60f8      	str	r0, [r7, #12]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d107      	bne.n	8014b88 <vTaskDelay+0x58>
 8014b78:	4b06      	ldr	r3, [pc, #24]	; (8014b94 <vTaskDelay+0x64>)
 8014b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b7e:	601a      	str	r2, [r3, #0]
 8014b80:	f3bf 8f4f 	dsb	sy
 8014b84:	f3bf 8f6f 	isb	sy
 8014b88:	bf00      	nop
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	24001d28 	.word	0x24001d28
 8014b94:	e000ed04 	.word	0xe000ed04

08014b98 <vTaskSuspend>:
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b084      	sub	sp, #16
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
 8014ba0:	f001 fb98 	bl	80162d4 <vPortEnterCritical>
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d102      	bne.n	8014bb0 <vTaskSuspend+0x18>
 8014baa:	4b30      	ldr	r3, [pc, #192]	; (8014c6c <vTaskSuspend+0xd4>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	e000      	b.n	8014bb2 <vTaskSuspend+0x1a>
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	60fb      	str	r3, [r7, #12]
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	3304      	adds	r3, #4
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff f847 	bl	8013c4c <uxListRemove>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d004      	beq.n	8014bd0 <vTaskSuspend+0x38>
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	3318      	adds	r3, #24
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7ff f83e 	bl	8013c4c <uxListRemove>
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	3304      	adds	r3, #4
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	4826      	ldr	r0, [pc, #152]	; (8014c70 <vTaskSuspend+0xd8>)
 8014bd8:	f7fe ffdb 	bl	8013b92 <vListInsertEnd>
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	2b01      	cmp	r3, #1
 8014be6:	d103      	bne.n	8014bf0 <vTaskSuspend+0x58>
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2200      	movs	r2, #0
 8014bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014bf0:	f001 fba0 	bl	8016334 <vPortExitCritical>
 8014bf4:	4b1f      	ldr	r3, [pc, #124]	; (8014c74 <vTaskSuspend+0xdc>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d005      	beq.n	8014c08 <vTaskSuspend+0x70>
 8014bfc:	f001 fb6a 	bl	80162d4 <vPortEnterCritical>
 8014c00:	f000 fdb2 	bl	8015768 <prvResetNextTaskUnblockTime>
 8014c04:	f001 fb96 	bl	8016334 <vPortExitCritical>
 8014c08:	4b18      	ldr	r3, [pc, #96]	; (8014c6c <vTaskSuspend+0xd4>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	68fa      	ldr	r2, [r7, #12]
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d127      	bne.n	8014c62 <vTaskSuspend+0xca>
 8014c12:	4b18      	ldr	r3, [pc, #96]	; (8014c74 <vTaskSuspend+0xdc>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d017      	beq.n	8014c4a <vTaskSuspend+0xb2>
 8014c1a:	4b17      	ldr	r3, [pc, #92]	; (8014c78 <vTaskSuspend+0xe0>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d00a      	beq.n	8014c38 <vTaskSuspend+0xa0>
 8014c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c26:	f383 8811 	msr	BASEPRI, r3
 8014c2a:	f3bf 8f6f 	isb	sy
 8014c2e:	f3bf 8f4f 	dsb	sy
 8014c32:	60bb      	str	r3, [r7, #8]
 8014c34:	bf00      	nop
 8014c36:	e7fe      	b.n	8014c36 <vTaskSuspend+0x9e>
 8014c38:	4b10      	ldr	r3, [pc, #64]	; (8014c7c <vTaskSuspend+0xe4>)
 8014c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c3e:	601a      	str	r2, [r3, #0]
 8014c40:	f3bf 8f4f 	dsb	sy
 8014c44:	f3bf 8f6f 	isb	sy
 8014c48:	e00b      	b.n	8014c62 <vTaskSuspend+0xca>
 8014c4a:	4b09      	ldr	r3, [pc, #36]	; (8014c70 <vTaskSuspend+0xd8>)
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	4b0c      	ldr	r3, [pc, #48]	; (8014c80 <vTaskSuspend+0xe8>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d103      	bne.n	8014c5e <vTaskSuspend+0xc6>
 8014c56:	4b05      	ldr	r3, [pc, #20]	; (8014c6c <vTaskSuspend+0xd4>)
 8014c58:	2200      	movs	r2, #0
 8014c5a:	601a      	str	r2, [r3, #0]
 8014c5c:	e001      	b.n	8014c62 <vTaskSuspend+0xca>
 8014c5e:	f000 fa99 	bl	8015194 <vTaskSwitchContext>
 8014c62:	bf00      	nop
 8014c64:	3710      	adds	r7, #16
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	2400182c 	.word	0x2400182c
 8014c70:	24001cec 	.word	0x24001cec
 8014c74:	24001d0c 	.word	0x24001d0c
 8014c78:	24001d28 	.word	0x24001d28
 8014c7c:	e000ed04 	.word	0xe000ed04
 8014c80:	24001d00 	.word	0x24001d00

08014c84 <prvTaskIsTaskSuspended>:
 8014c84:	b480      	push	{r7}
 8014c86:	b087      	sub	sp, #28
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	617b      	str	r3, [r7, #20]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	613b      	str	r3, [r7, #16]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d10a      	bne.n	8014cb0 <prvTaskIsTaskSuspended+0x2c>
 8014c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c9e:	f383 8811 	msr	BASEPRI, r3
 8014ca2:	f3bf 8f6f 	isb	sy
 8014ca6:	f3bf 8f4f 	dsb	sy
 8014caa:	60fb      	str	r3, [r7, #12]
 8014cac:	bf00      	nop
 8014cae:	e7fe      	b.n	8014cae <prvTaskIsTaskSuspended+0x2a>
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	695b      	ldr	r3, [r3, #20]
 8014cb4:	4a0a      	ldr	r2, [pc, #40]	; (8014ce0 <prvTaskIsTaskSuspended+0x5c>)
 8014cb6:	4293      	cmp	r3, r2
 8014cb8:	d10a      	bne.n	8014cd0 <prvTaskIsTaskSuspended+0x4c>
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cbe:	4a09      	ldr	r2, [pc, #36]	; (8014ce4 <prvTaskIsTaskSuspended+0x60>)
 8014cc0:	4293      	cmp	r3, r2
 8014cc2:	d005      	beq.n	8014cd0 <prvTaskIsTaskSuspended+0x4c>
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d101      	bne.n	8014cd0 <prvTaskIsTaskSuspended+0x4c>
 8014ccc:	2301      	movs	r3, #1
 8014cce:	617b      	str	r3, [r7, #20]
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	371c      	adds	r7, #28
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	24001cec 	.word	0x24001cec
 8014ce4:	24001cc0 	.word	0x24001cc0

08014ce8 <xTaskResumeFromISR>:
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b08a      	sub	sp, #40	; 0x28
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	623b      	str	r3, [r7, #32]
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d10a      	bne.n	8014d14 <xTaskResumeFromISR+0x2c>
 8014cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d02:	f383 8811 	msr	BASEPRI, r3
 8014d06:	f3bf 8f6f 	isb	sy
 8014d0a:	f3bf 8f4f 	dsb	sy
 8014d0e:	61bb      	str	r3, [r7, #24]
 8014d10:	bf00      	nop
 8014d12:	e7fe      	b.n	8014d12 <xTaskResumeFromISR+0x2a>
 8014d14:	f001 fbc0 	bl	8016498 <vPortValidateInterruptPriority>
 8014d18:	f3ef 8211 	mrs	r2, BASEPRI
 8014d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d20:	f383 8811 	msr	BASEPRI, r3
 8014d24:	f3bf 8f6f 	isb	sy
 8014d28:	f3bf 8f4f 	dsb	sy
 8014d2c:	617a      	str	r2, [r7, #20]
 8014d2e:	613b      	str	r3, [r7, #16]
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	61fb      	str	r3, [r7, #28]
 8014d34:	6a38      	ldr	r0, [r7, #32]
 8014d36:	f7ff ffa5 	bl	8014c84 <prvTaskIsTaskSuspended>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d030      	beq.n	8014da2 <xTaskResumeFromISR+0xba>
 8014d40:	4b1d      	ldr	r3, [pc, #116]	; (8014db8 <xTaskResumeFromISR+0xd0>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d126      	bne.n	8014d96 <xTaskResumeFromISR+0xae>
 8014d48:	6a3b      	ldr	r3, [r7, #32]
 8014d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d4c:	4b1b      	ldr	r3, [pc, #108]	; (8014dbc <xTaskResumeFromISR+0xd4>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d301      	bcc.n	8014d5a <xTaskResumeFromISR+0x72>
 8014d56:	2301      	movs	r3, #1
 8014d58:	627b      	str	r3, [r7, #36]	; 0x24
 8014d5a:	6a3b      	ldr	r3, [r7, #32]
 8014d5c:	3304      	adds	r3, #4
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fe ff74 	bl	8013c4c <uxListRemove>
 8014d64:	6a3b      	ldr	r3, [r7, #32]
 8014d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d68:	4b15      	ldr	r3, [pc, #84]	; (8014dc0 <xTaskResumeFromISR+0xd8>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d903      	bls.n	8014d78 <xTaskResumeFromISR+0x90>
 8014d70:	6a3b      	ldr	r3, [r7, #32]
 8014d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d74:	4a12      	ldr	r2, [pc, #72]	; (8014dc0 <xTaskResumeFromISR+0xd8>)
 8014d76:	6013      	str	r3, [r2, #0]
 8014d78:	6a3b      	ldr	r3, [r7, #32]
 8014d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	4413      	add	r3, r2
 8014d82:	009b      	lsls	r3, r3, #2
 8014d84:	4a0f      	ldr	r2, [pc, #60]	; (8014dc4 <xTaskResumeFromISR+0xdc>)
 8014d86:	441a      	add	r2, r3
 8014d88:	6a3b      	ldr	r3, [r7, #32]
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	4610      	mov	r0, r2
 8014d90:	f7fe feff 	bl	8013b92 <vListInsertEnd>
 8014d94:	e005      	b.n	8014da2 <xTaskResumeFromISR+0xba>
 8014d96:	6a3b      	ldr	r3, [r7, #32]
 8014d98:	3318      	adds	r3, #24
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	480a      	ldr	r0, [pc, #40]	; (8014dc8 <xTaskResumeFromISR+0xe0>)
 8014d9e:	f7fe fef8 	bl	8013b92 <vListInsertEnd>
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	60fb      	str	r3, [r7, #12]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f383 8811 	msr	BASEPRI, r3
 8014dac:	bf00      	nop
 8014dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db0:	4618      	mov	r0, r3
 8014db2:	3728      	adds	r7, #40	; 0x28
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	24001d28 	.word	0x24001d28
 8014dbc:	2400182c 	.word	0x2400182c
 8014dc0:	24001d08 	.word	0x24001d08
 8014dc4:	24001830 	.word	0x24001830
 8014dc8:	24001cc0 	.word	0x24001cc0

08014dcc <vTaskStartScheduler>:
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b08a      	sub	sp, #40	; 0x28
 8014dd0:	af04      	add	r7, sp, #16
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	60bb      	str	r3, [r7, #8]
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	607b      	str	r3, [r7, #4]
 8014dda:	463a      	mov	r2, r7
 8014ddc:	1d39      	adds	r1, r7, #4
 8014dde:	f107 0308 	add.w	r3, r7, #8
 8014de2:	4618      	mov	r0, r3
 8014de4:	f7fe fc08 	bl	80135f8 <vApplicationGetIdleTaskMemory>
 8014de8:	6839      	ldr	r1, [r7, #0]
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	68ba      	ldr	r2, [r7, #8]
 8014dee:	9202      	str	r2, [sp, #8]
 8014df0:	9301      	str	r3, [sp, #4]
 8014df2:	2300      	movs	r3, #0
 8014df4:	9300      	str	r3, [sp, #0]
 8014df6:	2300      	movs	r3, #0
 8014df8:	460a      	mov	r2, r1
 8014dfa:	4921      	ldr	r1, [pc, #132]	; (8014e80 <vTaskStartScheduler+0xb4>)
 8014dfc:	4821      	ldr	r0, [pc, #132]	; (8014e84 <vTaskStartScheduler+0xb8>)
 8014dfe:	f7ff fcf5 	bl	80147ec <xTaskCreateStatic>
 8014e02:	4603      	mov	r3, r0
 8014e04:	4a20      	ldr	r2, [pc, #128]	; (8014e88 <vTaskStartScheduler+0xbc>)
 8014e06:	6013      	str	r3, [r2, #0]
 8014e08:	4b1f      	ldr	r3, [pc, #124]	; (8014e88 <vTaskStartScheduler+0xbc>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d002      	beq.n	8014e16 <vTaskStartScheduler+0x4a>
 8014e10:	2301      	movs	r3, #1
 8014e12:	617b      	str	r3, [r7, #20]
 8014e14:	e001      	b.n	8014e1a <vTaskStartScheduler+0x4e>
 8014e16:	2300      	movs	r3, #0
 8014e18:	617b      	str	r3, [r7, #20]
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	2b01      	cmp	r3, #1
 8014e1e:	d102      	bne.n	8014e26 <vTaskStartScheduler+0x5a>
 8014e20:	f000 fdba 	bl	8015998 <xTimerCreateTimerTask>
 8014e24:	6178      	str	r0, [r7, #20]
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	d116      	bne.n	8014e5a <vTaskStartScheduler+0x8e>
 8014e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e30:	f383 8811 	msr	BASEPRI, r3
 8014e34:	f3bf 8f6f 	isb	sy
 8014e38:	f3bf 8f4f 	dsb	sy
 8014e3c:	613b      	str	r3, [r7, #16]
 8014e3e:	bf00      	nop
 8014e40:	4b12      	ldr	r3, [pc, #72]	; (8014e8c <vTaskStartScheduler+0xc0>)
 8014e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e46:	601a      	str	r2, [r3, #0]
 8014e48:	4b11      	ldr	r3, [pc, #68]	; (8014e90 <vTaskStartScheduler+0xc4>)
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	601a      	str	r2, [r3, #0]
 8014e4e:	4b11      	ldr	r3, [pc, #68]	; (8014e94 <vTaskStartScheduler+0xc8>)
 8014e50:	2200      	movs	r2, #0
 8014e52:	601a      	str	r2, [r3, #0]
 8014e54:	f001 f99c 	bl	8016190 <xPortStartScheduler>
 8014e58:	e00e      	b.n	8014e78 <vTaskStartScheduler+0xac>
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e60:	d10a      	bne.n	8014e78 <vTaskStartScheduler+0xac>
 8014e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e66:	f383 8811 	msr	BASEPRI, r3
 8014e6a:	f3bf 8f6f 	isb	sy
 8014e6e:	f3bf 8f4f 	dsb	sy
 8014e72:	60fb      	str	r3, [r7, #12]
 8014e74:	bf00      	nop
 8014e76:	e7fe      	b.n	8014e76 <vTaskStartScheduler+0xaa>
 8014e78:	bf00      	nop
 8014e7a:	3718      	adds	r7, #24
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	080175f8 	.word	0x080175f8
 8014e84:	080155fd 	.word	0x080155fd
 8014e88:	24001d24 	.word	0x24001d24
 8014e8c:	24001d20 	.word	0x24001d20
 8014e90:	24001d0c 	.word	0x24001d0c
 8014e94:	24001d04 	.word	0x24001d04

08014e98 <vTaskSuspendAll>:
 8014e98:	b480      	push	{r7}
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	4b04      	ldr	r3, [pc, #16]	; (8014eb0 <vTaskSuspendAll+0x18>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	4a03      	ldr	r2, [pc, #12]	; (8014eb0 <vTaskSuspendAll+0x18>)
 8014ea4:	6013      	str	r3, [r2, #0]
 8014ea6:	bf00      	nop
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr
 8014eb0:	24001d28 	.word	0x24001d28

08014eb4 <xTaskResumeAll>:
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b084      	sub	sp, #16
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	2300      	movs	r3, #0
 8014ebc:	60fb      	str	r3, [r7, #12]
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	60bb      	str	r3, [r7, #8]
 8014ec2:	4b42      	ldr	r3, [pc, #264]	; (8014fcc <xTaskResumeAll+0x118>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d10a      	bne.n	8014ee0 <xTaskResumeAll+0x2c>
 8014eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ece:	f383 8811 	msr	BASEPRI, r3
 8014ed2:	f3bf 8f6f 	isb	sy
 8014ed6:	f3bf 8f4f 	dsb	sy
 8014eda:	603b      	str	r3, [r7, #0]
 8014edc:	bf00      	nop
 8014ede:	e7fe      	b.n	8014ede <xTaskResumeAll+0x2a>
 8014ee0:	f001 f9f8 	bl	80162d4 <vPortEnterCritical>
 8014ee4:	4b39      	ldr	r3, [pc, #228]	; (8014fcc <xTaskResumeAll+0x118>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	3b01      	subs	r3, #1
 8014eea:	4a38      	ldr	r2, [pc, #224]	; (8014fcc <xTaskResumeAll+0x118>)
 8014eec:	6013      	str	r3, [r2, #0]
 8014eee:	4b37      	ldr	r3, [pc, #220]	; (8014fcc <xTaskResumeAll+0x118>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d162      	bne.n	8014fbc <xTaskResumeAll+0x108>
 8014ef6:	4b36      	ldr	r3, [pc, #216]	; (8014fd0 <xTaskResumeAll+0x11c>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d05e      	beq.n	8014fbc <xTaskResumeAll+0x108>
 8014efe:	e02f      	b.n	8014f60 <xTaskResumeAll+0xac>
 8014f00:	4b34      	ldr	r3, [pc, #208]	; (8014fd4 <xTaskResumeAll+0x120>)
 8014f02:	68db      	ldr	r3, [r3, #12]
 8014f04:	68db      	ldr	r3, [r3, #12]
 8014f06:	60fb      	str	r3, [r7, #12]
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	3318      	adds	r3, #24
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7fe fe9d 	bl	8013c4c <uxListRemove>
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	3304      	adds	r3, #4
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7fe fe98 	bl	8013c4c <uxListRemove>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f20:	4b2d      	ldr	r3, [pc, #180]	; (8014fd8 <xTaskResumeAll+0x124>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d903      	bls.n	8014f30 <xTaskResumeAll+0x7c>
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f2c:	4a2a      	ldr	r2, [pc, #168]	; (8014fd8 <xTaskResumeAll+0x124>)
 8014f2e:	6013      	str	r3, [r2, #0]
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f34:	4613      	mov	r3, r2
 8014f36:	009b      	lsls	r3, r3, #2
 8014f38:	4413      	add	r3, r2
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	4a27      	ldr	r2, [pc, #156]	; (8014fdc <xTaskResumeAll+0x128>)
 8014f3e:	441a      	add	r2, r3
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	3304      	adds	r3, #4
 8014f44:	4619      	mov	r1, r3
 8014f46:	4610      	mov	r0, r2
 8014f48:	f7fe fe23 	bl	8013b92 <vListInsertEnd>
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f50:	4b23      	ldr	r3, [pc, #140]	; (8014fe0 <xTaskResumeAll+0x12c>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d302      	bcc.n	8014f60 <xTaskResumeAll+0xac>
 8014f5a:	4b22      	ldr	r3, [pc, #136]	; (8014fe4 <xTaskResumeAll+0x130>)
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	601a      	str	r2, [r3, #0]
 8014f60:	4b1c      	ldr	r3, [pc, #112]	; (8014fd4 <xTaskResumeAll+0x120>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d1cb      	bne.n	8014f00 <xTaskResumeAll+0x4c>
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d001      	beq.n	8014f72 <xTaskResumeAll+0xbe>
 8014f6e:	f000 fbfb 	bl	8015768 <prvResetNextTaskUnblockTime>
 8014f72:	4b1d      	ldr	r3, [pc, #116]	; (8014fe8 <xTaskResumeAll+0x134>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	607b      	str	r3, [r7, #4]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d010      	beq.n	8014fa0 <xTaskResumeAll+0xec>
 8014f7e:	f000 f847 	bl	8015010 <xTaskIncrementTick>
 8014f82:	4603      	mov	r3, r0
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d002      	beq.n	8014f8e <xTaskResumeAll+0xda>
 8014f88:	4b16      	ldr	r3, [pc, #88]	; (8014fe4 <xTaskResumeAll+0x130>)
 8014f8a:	2201      	movs	r2, #1
 8014f8c:	601a      	str	r2, [r3, #0]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	3b01      	subs	r3, #1
 8014f92:	607b      	str	r3, [r7, #4]
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d1f1      	bne.n	8014f7e <xTaskResumeAll+0xca>
 8014f9a:	4b13      	ldr	r3, [pc, #76]	; (8014fe8 <xTaskResumeAll+0x134>)
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	601a      	str	r2, [r3, #0]
 8014fa0:	4b10      	ldr	r3, [pc, #64]	; (8014fe4 <xTaskResumeAll+0x130>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d009      	beq.n	8014fbc <xTaskResumeAll+0x108>
 8014fa8:	2301      	movs	r3, #1
 8014faa:	60bb      	str	r3, [r7, #8]
 8014fac:	4b0f      	ldr	r3, [pc, #60]	; (8014fec <xTaskResumeAll+0x138>)
 8014fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fb2:	601a      	str	r2, [r3, #0]
 8014fb4:	f3bf 8f4f 	dsb	sy
 8014fb8:	f3bf 8f6f 	isb	sy
 8014fbc:	f001 f9ba 	bl	8016334 <vPortExitCritical>
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	3710      	adds	r7, #16
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	24001d28 	.word	0x24001d28
 8014fd0:	24001d00 	.word	0x24001d00
 8014fd4:	24001cc0 	.word	0x24001cc0
 8014fd8:	24001d08 	.word	0x24001d08
 8014fdc:	24001830 	.word	0x24001830
 8014fe0:	2400182c 	.word	0x2400182c
 8014fe4:	24001d14 	.word	0x24001d14
 8014fe8:	24001d10 	.word	0x24001d10
 8014fec:	e000ed04 	.word	0xe000ed04

08014ff0 <xTaskGetTickCount>:
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	4b05      	ldr	r3, [pc, #20]	; (801500c <xTaskGetTickCount+0x1c>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	607b      	str	r3, [r7, #4]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	4618      	mov	r0, r3
 8015000:	370c      	adds	r7, #12
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	24001d04 	.word	0x24001d04

08015010 <xTaskIncrementTick>:
 8015010:	b580      	push	{r7, lr}
 8015012:	b086      	sub	sp, #24
 8015014:	af00      	add	r7, sp, #0
 8015016:	2300      	movs	r3, #0
 8015018:	617b      	str	r3, [r7, #20]
 801501a:	4b53      	ldr	r3, [pc, #332]	; (8015168 <xTaskIncrementTick+0x158>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	f040 8095 	bne.w	801514e <xTaskIncrementTick+0x13e>
 8015024:	4b51      	ldr	r3, [pc, #324]	; (801516c <xTaskIncrementTick+0x15c>)
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	3301      	adds	r3, #1
 801502a:	613b      	str	r3, [r7, #16]
 801502c:	4a4f      	ldr	r2, [pc, #316]	; (801516c <xTaskIncrementTick+0x15c>)
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	6013      	str	r3, [r2, #0]
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d120      	bne.n	801507a <xTaskIncrementTick+0x6a>
 8015038:	4b4d      	ldr	r3, [pc, #308]	; (8015170 <xTaskIncrementTick+0x160>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d00a      	beq.n	8015058 <xTaskIncrementTick+0x48>
 8015042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	603b      	str	r3, [r7, #0]
 8015054:	bf00      	nop
 8015056:	e7fe      	b.n	8015056 <xTaskIncrementTick+0x46>
 8015058:	4b45      	ldr	r3, [pc, #276]	; (8015170 <xTaskIncrementTick+0x160>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	60fb      	str	r3, [r7, #12]
 801505e:	4b45      	ldr	r3, [pc, #276]	; (8015174 <xTaskIncrementTick+0x164>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	4a43      	ldr	r2, [pc, #268]	; (8015170 <xTaskIncrementTick+0x160>)
 8015064:	6013      	str	r3, [r2, #0]
 8015066:	4a43      	ldr	r2, [pc, #268]	; (8015174 <xTaskIncrementTick+0x164>)
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	6013      	str	r3, [r2, #0]
 801506c:	4b42      	ldr	r3, [pc, #264]	; (8015178 <xTaskIncrementTick+0x168>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	3301      	adds	r3, #1
 8015072:	4a41      	ldr	r2, [pc, #260]	; (8015178 <xTaskIncrementTick+0x168>)
 8015074:	6013      	str	r3, [r2, #0]
 8015076:	f000 fb77 	bl	8015768 <prvResetNextTaskUnblockTime>
 801507a:	4b40      	ldr	r3, [pc, #256]	; (801517c <xTaskIncrementTick+0x16c>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	693a      	ldr	r2, [r7, #16]
 8015080:	429a      	cmp	r2, r3
 8015082:	d349      	bcc.n	8015118 <xTaskIncrementTick+0x108>
 8015084:	4b3a      	ldr	r3, [pc, #232]	; (8015170 <xTaskIncrementTick+0x160>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d104      	bne.n	8015098 <xTaskIncrementTick+0x88>
 801508e:	4b3b      	ldr	r3, [pc, #236]	; (801517c <xTaskIncrementTick+0x16c>)
 8015090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015094:	601a      	str	r2, [r3, #0]
 8015096:	e03f      	b.n	8015118 <xTaskIncrementTick+0x108>
 8015098:	4b35      	ldr	r3, [pc, #212]	; (8015170 <xTaskIncrementTick+0x160>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	60bb      	str	r3, [r7, #8]
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	685b      	ldr	r3, [r3, #4]
 80150a6:	607b      	str	r3, [r7, #4]
 80150a8:	693a      	ldr	r2, [r7, #16]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	429a      	cmp	r2, r3
 80150ae:	d203      	bcs.n	80150b8 <xTaskIncrementTick+0xa8>
 80150b0:	4a32      	ldr	r2, [pc, #200]	; (801517c <xTaskIncrementTick+0x16c>)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6013      	str	r3, [r2, #0]
 80150b6:	e02f      	b.n	8015118 <xTaskIncrementTick+0x108>
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	3304      	adds	r3, #4
 80150bc:	4618      	mov	r0, r3
 80150be:	f7fe fdc5 	bl	8013c4c <uxListRemove>
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d004      	beq.n	80150d4 <xTaskIncrementTick+0xc4>
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	3318      	adds	r3, #24
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7fe fdbc 	bl	8013c4c <uxListRemove>
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150d8:	4b29      	ldr	r3, [pc, #164]	; (8015180 <xTaskIncrementTick+0x170>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d903      	bls.n	80150e8 <xTaskIncrementTick+0xd8>
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e4:	4a26      	ldr	r2, [pc, #152]	; (8015180 <xTaskIncrementTick+0x170>)
 80150e6:	6013      	str	r3, [r2, #0]
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ec:	4613      	mov	r3, r2
 80150ee:	009b      	lsls	r3, r3, #2
 80150f0:	4413      	add	r3, r2
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	4a23      	ldr	r2, [pc, #140]	; (8015184 <xTaskIncrementTick+0x174>)
 80150f6:	441a      	add	r2, r3
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	3304      	adds	r3, #4
 80150fc:	4619      	mov	r1, r3
 80150fe:	4610      	mov	r0, r2
 8015100:	f7fe fd47 	bl	8013b92 <vListInsertEnd>
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015108:	4b1f      	ldr	r3, [pc, #124]	; (8015188 <xTaskIncrementTick+0x178>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510e:	429a      	cmp	r2, r3
 8015110:	d3b8      	bcc.n	8015084 <xTaskIncrementTick+0x74>
 8015112:	2301      	movs	r3, #1
 8015114:	617b      	str	r3, [r7, #20]
 8015116:	e7b5      	b.n	8015084 <xTaskIncrementTick+0x74>
 8015118:	4b1b      	ldr	r3, [pc, #108]	; (8015188 <xTaskIncrementTick+0x178>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801511e:	4919      	ldr	r1, [pc, #100]	; (8015184 <xTaskIncrementTick+0x174>)
 8015120:	4613      	mov	r3, r2
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	4413      	add	r3, r2
 8015126:	009b      	lsls	r3, r3, #2
 8015128:	440b      	add	r3, r1
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2b01      	cmp	r3, #1
 801512e:	d901      	bls.n	8015134 <xTaskIncrementTick+0x124>
 8015130:	2301      	movs	r3, #1
 8015132:	617b      	str	r3, [r7, #20]
 8015134:	4b15      	ldr	r3, [pc, #84]	; (801518c <xTaskIncrementTick+0x17c>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d101      	bne.n	8015140 <xTaskIncrementTick+0x130>
 801513c:	f7eb fa52 	bl	80005e4 <vApplicationTickHook>
 8015140:	4b13      	ldr	r3, [pc, #76]	; (8015190 <xTaskIncrementTick+0x180>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d009      	beq.n	801515c <xTaskIncrementTick+0x14c>
 8015148:	2301      	movs	r3, #1
 801514a:	617b      	str	r3, [r7, #20]
 801514c:	e006      	b.n	801515c <xTaskIncrementTick+0x14c>
 801514e:	4b0f      	ldr	r3, [pc, #60]	; (801518c <xTaskIncrementTick+0x17c>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	3301      	adds	r3, #1
 8015154:	4a0d      	ldr	r2, [pc, #52]	; (801518c <xTaskIncrementTick+0x17c>)
 8015156:	6013      	str	r3, [r2, #0]
 8015158:	f7eb fa44 	bl	80005e4 <vApplicationTickHook>
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	4618      	mov	r0, r3
 8015160:	3718      	adds	r7, #24
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	24001d28 	.word	0x24001d28
 801516c:	24001d04 	.word	0x24001d04
 8015170:	24001cb8 	.word	0x24001cb8
 8015174:	24001cbc 	.word	0x24001cbc
 8015178:	24001d18 	.word	0x24001d18
 801517c:	24001d20 	.word	0x24001d20
 8015180:	24001d08 	.word	0x24001d08
 8015184:	24001830 	.word	0x24001830
 8015188:	2400182c 	.word	0x2400182c
 801518c:	24001d10 	.word	0x24001d10
 8015190:	24001d14 	.word	0x24001d14

08015194 <vTaskSwitchContext>:
 8015194:	b480      	push	{r7}
 8015196:	b085      	sub	sp, #20
 8015198:	af00      	add	r7, sp, #0
 801519a:	4b28      	ldr	r3, [pc, #160]	; (801523c <vTaskSwitchContext+0xa8>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d003      	beq.n	80151aa <vTaskSwitchContext+0x16>
 80151a2:	4b27      	ldr	r3, [pc, #156]	; (8015240 <vTaskSwitchContext+0xac>)
 80151a4:	2201      	movs	r2, #1
 80151a6:	601a      	str	r2, [r3, #0]
 80151a8:	e041      	b.n	801522e <vTaskSwitchContext+0x9a>
 80151aa:	4b25      	ldr	r3, [pc, #148]	; (8015240 <vTaskSwitchContext+0xac>)
 80151ac:	2200      	movs	r2, #0
 80151ae:	601a      	str	r2, [r3, #0]
 80151b0:	4b24      	ldr	r3, [pc, #144]	; (8015244 <vTaskSwitchContext+0xb0>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	60fb      	str	r3, [r7, #12]
 80151b6:	e010      	b.n	80151da <vTaskSwitchContext+0x46>
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d10a      	bne.n	80151d4 <vTaskSwitchContext+0x40>
 80151be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c2:	f383 8811 	msr	BASEPRI, r3
 80151c6:	f3bf 8f6f 	isb	sy
 80151ca:	f3bf 8f4f 	dsb	sy
 80151ce:	607b      	str	r3, [r7, #4]
 80151d0:	bf00      	nop
 80151d2:	e7fe      	b.n	80151d2 <vTaskSwitchContext+0x3e>
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	3b01      	subs	r3, #1
 80151d8:	60fb      	str	r3, [r7, #12]
 80151da:	491b      	ldr	r1, [pc, #108]	; (8015248 <vTaskSwitchContext+0xb4>)
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	4613      	mov	r3, r2
 80151e0:	009b      	lsls	r3, r3, #2
 80151e2:	4413      	add	r3, r2
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	440b      	add	r3, r1
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d0e4      	beq.n	80151b8 <vTaskSwitchContext+0x24>
 80151ee:	68fa      	ldr	r2, [r7, #12]
 80151f0:	4613      	mov	r3, r2
 80151f2:	009b      	lsls	r3, r3, #2
 80151f4:	4413      	add	r3, r2
 80151f6:	009b      	lsls	r3, r3, #2
 80151f8:	4a13      	ldr	r2, [pc, #76]	; (8015248 <vTaskSwitchContext+0xb4>)
 80151fa:	4413      	add	r3, r2
 80151fc:	60bb      	str	r3, [r7, #8]
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	685a      	ldr	r2, [r3, #4]
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	605a      	str	r2, [r3, #4]
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	685a      	ldr	r2, [r3, #4]
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	3308      	adds	r3, #8
 8015210:	429a      	cmp	r2, r3
 8015212:	d104      	bne.n	801521e <vTaskSwitchContext+0x8a>
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	685a      	ldr	r2, [r3, #4]
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	605a      	str	r2, [r3, #4]
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	68db      	ldr	r3, [r3, #12]
 8015224:	4a09      	ldr	r2, [pc, #36]	; (801524c <vTaskSwitchContext+0xb8>)
 8015226:	6013      	str	r3, [r2, #0]
 8015228:	4a06      	ldr	r2, [pc, #24]	; (8015244 <vTaskSwitchContext+0xb0>)
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	6013      	str	r3, [r2, #0]
 801522e:	bf00      	nop
 8015230:	3714      	adds	r7, #20
 8015232:	46bd      	mov	sp, r7
 8015234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015238:	4770      	bx	lr
 801523a:	bf00      	nop
 801523c:	24001d28 	.word	0x24001d28
 8015240:	24001d14 	.word	0x24001d14
 8015244:	24001d08 	.word	0x24001d08
 8015248:	24001830 	.word	0x24001830
 801524c:	2400182c 	.word	0x2400182c

08015250 <vTaskPlaceOnEventList>:
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d10a      	bne.n	8015276 <vTaskPlaceOnEventList+0x26>
 8015260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015264:	f383 8811 	msr	BASEPRI, r3
 8015268:	f3bf 8f6f 	isb	sy
 801526c:	f3bf 8f4f 	dsb	sy
 8015270:	60fb      	str	r3, [r7, #12]
 8015272:	bf00      	nop
 8015274:	e7fe      	b.n	8015274 <vTaskPlaceOnEventList+0x24>
 8015276:	4b07      	ldr	r3, [pc, #28]	; (8015294 <vTaskPlaceOnEventList+0x44>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	3318      	adds	r3, #24
 801527c:	4619      	mov	r1, r3
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f7fe fcab 	bl	8013bda <vListInsert>
 8015284:	2101      	movs	r1, #1
 8015286:	6838      	ldr	r0, [r7, #0]
 8015288:	f000 fb32 	bl	80158f0 <prvAddCurrentTaskToDelayedList>
 801528c:	bf00      	nop
 801528e:	3710      	adds	r7, #16
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}
 8015294:	2400182c 	.word	0x2400182c

08015298 <vTaskPlaceOnUnorderedEventList>:
 8015298:	b580      	push	{r7, lr}
 801529a:	b086      	sub	sp, #24
 801529c:	af00      	add	r7, sp, #0
 801529e:	60f8      	str	r0, [r7, #12]
 80152a0:	60b9      	str	r1, [r7, #8]
 80152a2:	607a      	str	r2, [r7, #4]
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d10a      	bne.n	80152c0 <vTaskPlaceOnUnorderedEventList+0x28>
 80152aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ae:	f383 8811 	msr	BASEPRI, r3
 80152b2:	f3bf 8f6f 	isb	sy
 80152b6:	f3bf 8f4f 	dsb	sy
 80152ba:	617b      	str	r3, [r7, #20]
 80152bc:	bf00      	nop
 80152be:	e7fe      	b.n	80152be <vTaskPlaceOnUnorderedEventList+0x26>
 80152c0:	4b11      	ldr	r3, [pc, #68]	; (8015308 <vTaskPlaceOnUnorderedEventList+0x70>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d10a      	bne.n	80152de <vTaskPlaceOnUnorderedEventList+0x46>
 80152c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152cc:	f383 8811 	msr	BASEPRI, r3
 80152d0:	f3bf 8f6f 	isb	sy
 80152d4:	f3bf 8f4f 	dsb	sy
 80152d8:	613b      	str	r3, [r7, #16]
 80152da:	bf00      	nop
 80152dc:	e7fe      	b.n	80152dc <vTaskPlaceOnUnorderedEventList+0x44>
 80152de:	4b0b      	ldr	r3, [pc, #44]	; (801530c <vTaskPlaceOnUnorderedEventList+0x74>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	68ba      	ldr	r2, [r7, #8]
 80152e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80152e8:	619a      	str	r2, [r3, #24]
 80152ea:	4b08      	ldr	r3, [pc, #32]	; (801530c <vTaskPlaceOnUnorderedEventList+0x74>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	3318      	adds	r3, #24
 80152f0:	4619      	mov	r1, r3
 80152f2:	68f8      	ldr	r0, [r7, #12]
 80152f4:	f7fe fc4d 	bl	8013b92 <vListInsertEnd>
 80152f8:	2101      	movs	r1, #1
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f000 faf8 	bl	80158f0 <prvAddCurrentTaskToDelayedList>
 8015300:	bf00      	nop
 8015302:	3718      	adds	r7, #24
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}
 8015308:	24001d28 	.word	0x24001d28
 801530c:	2400182c 	.word	0x2400182c

08015310 <vTaskPlaceOnEventListRestricted>:
 8015310:	b580      	push	{r7, lr}
 8015312:	b086      	sub	sp, #24
 8015314:	af00      	add	r7, sp, #0
 8015316:	60f8      	str	r0, [r7, #12]
 8015318:	60b9      	str	r1, [r7, #8]
 801531a:	607a      	str	r2, [r7, #4]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d10a      	bne.n	8015338 <vTaskPlaceOnEventListRestricted+0x28>
 8015322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015326:	f383 8811 	msr	BASEPRI, r3
 801532a:	f3bf 8f6f 	isb	sy
 801532e:	f3bf 8f4f 	dsb	sy
 8015332:	617b      	str	r3, [r7, #20]
 8015334:	bf00      	nop
 8015336:	e7fe      	b.n	8015336 <vTaskPlaceOnEventListRestricted+0x26>
 8015338:	4b0a      	ldr	r3, [pc, #40]	; (8015364 <vTaskPlaceOnEventListRestricted+0x54>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	3318      	adds	r3, #24
 801533e:	4619      	mov	r1, r3
 8015340:	68f8      	ldr	r0, [r7, #12]
 8015342:	f7fe fc26 	bl	8013b92 <vListInsertEnd>
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d002      	beq.n	8015352 <vTaskPlaceOnEventListRestricted+0x42>
 801534c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015350:	60bb      	str	r3, [r7, #8]
 8015352:	6879      	ldr	r1, [r7, #4]
 8015354:	68b8      	ldr	r0, [r7, #8]
 8015356:	f000 facb 	bl	80158f0 <prvAddCurrentTaskToDelayedList>
 801535a:	bf00      	nop
 801535c:	3718      	adds	r7, #24
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	2400182c 	.word	0x2400182c

08015368 <xTaskRemoveFromEventList>:
 8015368:	b580      	push	{r7, lr}
 801536a:	b086      	sub	sp, #24
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	68db      	ldr	r3, [r3, #12]
 8015374:	68db      	ldr	r3, [r3, #12]
 8015376:	613b      	str	r3, [r7, #16]
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d10a      	bne.n	8015394 <xTaskRemoveFromEventList+0x2c>
 801537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015382:	f383 8811 	msr	BASEPRI, r3
 8015386:	f3bf 8f6f 	isb	sy
 801538a:	f3bf 8f4f 	dsb	sy
 801538e:	60fb      	str	r3, [r7, #12]
 8015390:	bf00      	nop
 8015392:	e7fe      	b.n	8015392 <xTaskRemoveFromEventList+0x2a>
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	3318      	adds	r3, #24
 8015398:	4618      	mov	r0, r3
 801539a:	f7fe fc57 	bl	8013c4c <uxListRemove>
 801539e:	4b1e      	ldr	r3, [pc, #120]	; (8015418 <xTaskRemoveFromEventList+0xb0>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d11d      	bne.n	80153e2 <xTaskRemoveFromEventList+0x7a>
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	3304      	adds	r3, #4
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7fe fc4e 	bl	8013c4c <uxListRemove>
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153b4:	4b19      	ldr	r3, [pc, #100]	; (801541c <xTaskRemoveFromEventList+0xb4>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d903      	bls.n	80153c4 <xTaskRemoveFromEventList+0x5c>
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153c0:	4a16      	ldr	r2, [pc, #88]	; (801541c <xTaskRemoveFromEventList+0xb4>)
 80153c2:	6013      	str	r3, [r2, #0]
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153c8:	4613      	mov	r3, r2
 80153ca:	009b      	lsls	r3, r3, #2
 80153cc:	4413      	add	r3, r2
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	4a13      	ldr	r2, [pc, #76]	; (8015420 <xTaskRemoveFromEventList+0xb8>)
 80153d2:	441a      	add	r2, r3
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	3304      	adds	r3, #4
 80153d8:	4619      	mov	r1, r3
 80153da:	4610      	mov	r0, r2
 80153dc:	f7fe fbd9 	bl	8013b92 <vListInsertEnd>
 80153e0:	e005      	b.n	80153ee <xTaskRemoveFromEventList+0x86>
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	3318      	adds	r3, #24
 80153e6:	4619      	mov	r1, r3
 80153e8:	480e      	ldr	r0, [pc, #56]	; (8015424 <xTaskRemoveFromEventList+0xbc>)
 80153ea:	f7fe fbd2 	bl	8013b92 <vListInsertEnd>
 80153ee:	693b      	ldr	r3, [r7, #16]
 80153f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153f2:	4b0d      	ldr	r3, [pc, #52]	; (8015428 <xTaskRemoveFromEventList+0xc0>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d905      	bls.n	8015408 <xTaskRemoveFromEventList+0xa0>
 80153fc:	2301      	movs	r3, #1
 80153fe:	617b      	str	r3, [r7, #20]
 8015400:	4b0a      	ldr	r3, [pc, #40]	; (801542c <xTaskRemoveFromEventList+0xc4>)
 8015402:	2201      	movs	r2, #1
 8015404:	601a      	str	r2, [r3, #0]
 8015406:	e001      	b.n	801540c <xTaskRemoveFromEventList+0xa4>
 8015408:	2300      	movs	r3, #0
 801540a:	617b      	str	r3, [r7, #20]
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	4618      	mov	r0, r3
 8015410:	3718      	adds	r7, #24
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	24001d28 	.word	0x24001d28
 801541c:	24001d08 	.word	0x24001d08
 8015420:	24001830 	.word	0x24001830
 8015424:	24001cc0 	.word	0x24001cc0
 8015428:	2400182c 	.word	0x2400182c
 801542c:	24001d14 	.word	0x24001d14

08015430 <vTaskRemoveFromUnorderedEventList>:
 8015430:	b580      	push	{r7, lr}
 8015432:	b086      	sub	sp, #24
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
 801543a:	4b29      	ldr	r3, [pc, #164]	; (80154e0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d10a      	bne.n	8015458 <vTaskRemoveFromUnorderedEventList+0x28>
 8015442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015446:	f383 8811 	msr	BASEPRI, r3
 801544a:	f3bf 8f6f 	isb	sy
 801544e:	f3bf 8f4f 	dsb	sy
 8015452:	613b      	str	r3, [r7, #16]
 8015454:	bf00      	nop
 8015456:	e7fe      	b.n	8015456 <vTaskRemoveFromUnorderedEventList+0x26>
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	601a      	str	r2, [r3, #0]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	617b      	str	r3, [r7, #20]
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d10a      	bne.n	8015484 <vTaskRemoveFromUnorderedEventList+0x54>
 801546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015472:	f383 8811 	msr	BASEPRI, r3
 8015476:	f3bf 8f6f 	isb	sy
 801547a:	f3bf 8f4f 	dsb	sy
 801547e:	60fb      	str	r3, [r7, #12]
 8015480:	bf00      	nop
 8015482:	e7fe      	b.n	8015482 <vTaskRemoveFromUnorderedEventList+0x52>
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f7fe fbe1 	bl	8013c4c <uxListRemove>
 801548a:	697b      	ldr	r3, [r7, #20]
 801548c:	3304      	adds	r3, #4
 801548e:	4618      	mov	r0, r3
 8015490:	f7fe fbdc 	bl	8013c4c <uxListRemove>
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015498:	4b12      	ldr	r3, [pc, #72]	; (80154e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	429a      	cmp	r2, r3
 801549e:	d903      	bls.n	80154a8 <vTaskRemoveFromUnorderedEventList+0x78>
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154a4:	4a0f      	ldr	r2, [pc, #60]	; (80154e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80154a6:	6013      	str	r3, [r2, #0]
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ac:	4613      	mov	r3, r2
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	4413      	add	r3, r2
 80154b2:	009b      	lsls	r3, r3, #2
 80154b4:	4a0c      	ldr	r2, [pc, #48]	; (80154e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80154b6:	441a      	add	r2, r3
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	3304      	adds	r3, #4
 80154bc:	4619      	mov	r1, r3
 80154be:	4610      	mov	r0, r2
 80154c0:	f7fe fb67 	bl	8013b92 <vListInsertEnd>
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154c8:	4b08      	ldr	r3, [pc, #32]	; (80154ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d902      	bls.n	80154d8 <vTaskRemoveFromUnorderedEventList+0xa8>
 80154d2:	4b07      	ldr	r3, [pc, #28]	; (80154f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80154d4:	2201      	movs	r2, #1
 80154d6:	601a      	str	r2, [r3, #0]
 80154d8:	bf00      	nop
 80154da:	3718      	adds	r7, #24
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	24001d28 	.word	0x24001d28
 80154e4:	24001d08 	.word	0x24001d08
 80154e8:	24001830 	.word	0x24001830
 80154ec:	2400182c 	.word	0x2400182c
 80154f0:	24001d14 	.word	0x24001d14

080154f4 <vTaskInternalSetTimeOutState>:
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	4b06      	ldr	r3, [pc, #24]	; (8015518 <vTaskInternalSetTimeOutState+0x24>)
 80154fe:	681a      	ldr	r2, [r3, #0]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	601a      	str	r2, [r3, #0]
 8015504:	4b05      	ldr	r3, [pc, #20]	; (801551c <vTaskInternalSetTimeOutState+0x28>)
 8015506:	681a      	ldr	r2, [r3, #0]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	605a      	str	r2, [r3, #4]
 801550c:	bf00      	nop
 801550e:	370c      	adds	r7, #12
 8015510:	46bd      	mov	sp, r7
 8015512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015516:	4770      	bx	lr
 8015518:	24001d18 	.word	0x24001d18
 801551c:	24001d04 	.word	0x24001d04

08015520 <xTaskCheckForTimeOut>:
 8015520:	b580      	push	{r7, lr}
 8015522:	b088      	sub	sp, #32
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d10a      	bne.n	8015546 <xTaskCheckForTimeOut+0x26>
 8015530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015534:	f383 8811 	msr	BASEPRI, r3
 8015538:	f3bf 8f6f 	isb	sy
 801553c:	f3bf 8f4f 	dsb	sy
 8015540:	613b      	str	r3, [r7, #16]
 8015542:	bf00      	nop
 8015544:	e7fe      	b.n	8015544 <xTaskCheckForTimeOut+0x24>
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10a      	bne.n	8015562 <xTaskCheckForTimeOut+0x42>
 801554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015550:	f383 8811 	msr	BASEPRI, r3
 8015554:	f3bf 8f6f 	isb	sy
 8015558:	f3bf 8f4f 	dsb	sy
 801555c:	60fb      	str	r3, [r7, #12]
 801555e:	bf00      	nop
 8015560:	e7fe      	b.n	8015560 <xTaskCheckForTimeOut+0x40>
 8015562:	f000 feb7 	bl	80162d4 <vPortEnterCritical>
 8015566:	4b1d      	ldr	r3, [pc, #116]	; (80155dc <xTaskCheckForTimeOut+0xbc>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	61bb      	str	r3, [r7, #24]
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	69ba      	ldr	r2, [r7, #24]
 8015572:	1ad3      	subs	r3, r2, r3
 8015574:	617b      	str	r3, [r7, #20]
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801557e:	d102      	bne.n	8015586 <xTaskCheckForTimeOut+0x66>
 8015580:	2300      	movs	r3, #0
 8015582:	61fb      	str	r3, [r7, #28]
 8015584:	e023      	b.n	80155ce <xTaskCheckForTimeOut+0xae>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	681a      	ldr	r2, [r3, #0]
 801558a:	4b15      	ldr	r3, [pc, #84]	; (80155e0 <xTaskCheckForTimeOut+0xc0>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	429a      	cmp	r2, r3
 8015590:	d007      	beq.n	80155a2 <xTaskCheckForTimeOut+0x82>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	685b      	ldr	r3, [r3, #4]
 8015596:	69ba      	ldr	r2, [r7, #24]
 8015598:	429a      	cmp	r2, r3
 801559a:	d302      	bcc.n	80155a2 <xTaskCheckForTimeOut+0x82>
 801559c:	2301      	movs	r3, #1
 801559e:	61fb      	str	r3, [r7, #28]
 80155a0:	e015      	b.n	80155ce <xTaskCheckForTimeOut+0xae>
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	697a      	ldr	r2, [r7, #20]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d20b      	bcs.n	80155c4 <xTaskCheckForTimeOut+0xa4>
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	681a      	ldr	r2, [r3, #0]
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	1ad2      	subs	r2, r2, r3
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	601a      	str	r2, [r3, #0]
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f7ff ff9b 	bl	80154f4 <vTaskInternalSetTimeOutState>
 80155be:	2300      	movs	r3, #0
 80155c0:	61fb      	str	r3, [r7, #28]
 80155c2:	e004      	b.n	80155ce <xTaskCheckForTimeOut+0xae>
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	2200      	movs	r2, #0
 80155c8:	601a      	str	r2, [r3, #0]
 80155ca:	2301      	movs	r3, #1
 80155cc:	61fb      	str	r3, [r7, #28]
 80155ce:	f000 feb1 	bl	8016334 <vPortExitCritical>
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	4618      	mov	r0, r3
 80155d6:	3720      	adds	r7, #32
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	24001d04 	.word	0x24001d04
 80155e0:	24001d18 	.word	0x24001d18

080155e4 <vTaskMissedYield>:
 80155e4:	b480      	push	{r7}
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	4b03      	ldr	r3, [pc, #12]	; (80155f8 <vTaskMissedYield+0x14>)
 80155ea:	2201      	movs	r2, #1
 80155ec:	601a      	str	r2, [r3, #0]
 80155ee:	bf00      	nop
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr
 80155f8:	24001d14 	.word	0x24001d14

080155fc <prvIdleTask>:
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	f000 f852 	bl	80156ac <prvCheckTasksWaitingTermination>
 8015608:	4b06      	ldr	r3, [pc, #24]	; (8015624 <prvIdleTask+0x28>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	2b01      	cmp	r3, #1
 801560e:	d9f9      	bls.n	8015604 <prvIdleTask+0x8>
 8015610:	4b05      	ldr	r3, [pc, #20]	; (8015628 <prvIdleTask+0x2c>)
 8015612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015616:	601a      	str	r2, [r3, #0]
 8015618:	f3bf 8f4f 	dsb	sy
 801561c:	f3bf 8f6f 	isb	sy
 8015620:	e7f0      	b.n	8015604 <prvIdleTask+0x8>
 8015622:	bf00      	nop
 8015624:	24001830 	.word	0x24001830
 8015628:	e000ed04 	.word	0xe000ed04

0801562c <prvInitialiseTaskLists>:
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	2300      	movs	r3, #0
 8015634:	607b      	str	r3, [r7, #4]
 8015636:	e00c      	b.n	8015652 <prvInitialiseTaskLists+0x26>
 8015638:	687a      	ldr	r2, [r7, #4]
 801563a:	4613      	mov	r3, r2
 801563c:	009b      	lsls	r3, r3, #2
 801563e:	4413      	add	r3, r2
 8015640:	009b      	lsls	r3, r3, #2
 8015642:	4a12      	ldr	r2, [pc, #72]	; (801568c <prvInitialiseTaskLists+0x60>)
 8015644:	4413      	add	r3, r2
 8015646:	4618      	mov	r0, r3
 8015648:	f7fe fa76 	bl	8013b38 <vListInitialise>
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	3301      	adds	r3, #1
 8015650:	607b      	str	r3, [r7, #4]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2b37      	cmp	r3, #55	; 0x37
 8015656:	d9ef      	bls.n	8015638 <prvInitialiseTaskLists+0xc>
 8015658:	480d      	ldr	r0, [pc, #52]	; (8015690 <prvInitialiseTaskLists+0x64>)
 801565a:	f7fe fa6d 	bl	8013b38 <vListInitialise>
 801565e:	480d      	ldr	r0, [pc, #52]	; (8015694 <prvInitialiseTaskLists+0x68>)
 8015660:	f7fe fa6a 	bl	8013b38 <vListInitialise>
 8015664:	480c      	ldr	r0, [pc, #48]	; (8015698 <prvInitialiseTaskLists+0x6c>)
 8015666:	f7fe fa67 	bl	8013b38 <vListInitialise>
 801566a:	480c      	ldr	r0, [pc, #48]	; (801569c <prvInitialiseTaskLists+0x70>)
 801566c:	f7fe fa64 	bl	8013b38 <vListInitialise>
 8015670:	480b      	ldr	r0, [pc, #44]	; (80156a0 <prvInitialiseTaskLists+0x74>)
 8015672:	f7fe fa61 	bl	8013b38 <vListInitialise>
 8015676:	4b0b      	ldr	r3, [pc, #44]	; (80156a4 <prvInitialiseTaskLists+0x78>)
 8015678:	4a05      	ldr	r2, [pc, #20]	; (8015690 <prvInitialiseTaskLists+0x64>)
 801567a:	601a      	str	r2, [r3, #0]
 801567c:	4b0a      	ldr	r3, [pc, #40]	; (80156a8 <prvInitialiseTaskLists+0x7c>)
 801567e:	4a05      	ldr	r2, [pc, #20]	; (8015694 <prvInitialiseTaskLists+0x68>)
 8015680:	601a      	str	r2, [r3, #0]
 8015682:	bf00      	nop
 8015684:	3708      	adds	r7, #8
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}
 801568a:	bf00      	nop
 801568c:	24001830 	.word	0x24001830
 8015690:	24001c90 	.word	0x24001c90
 8015694:	24001ca4 	.word	0x24001ca4
 8015698:	24001cc0 	.word	0x24001cc0
 801569c:	24001cd4 	.word	0x24001cd4
 80156a0:	24001cec 	.word	0x24001cec
 80156a4:	24001cb8 	.word	0x24001cb8
 80156a8:	24001cbc 	.word	0x24001cbc

080156ac <prvCheckTasksWaitingTermination>:
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	e019      	b.n	80156e8 <prvCheckTasksWaitingTermination+0x3c>
 80156b4:	f000 fe0e 	bl	80162d4 <vPortEnterCritical>
 80156b8:	4b10      	ldr	r3, [pc, #64]	; (80156fc <prvCheckTasksWaitingTermination+0x50>)
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	607b      	str	r3, [r7, #4]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	3304      	adds	r3, #4
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7fe fac1 	bl	8013c4c <uxListRemove>
 80156ca:	4b0d      	ldr	r3, [pc, #52]	; (8015700 <prvCheckTasksWaitingTermination+0x54>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	3b01      	subs	r3, #1
 80156d0:	4a0b      	ldr	r2, [pc, #44]	; (8015700 <prvCheckTasksWaitingTermination+0x54>)
 80156d2:	6013      	str	r3, [r2, #0]
 80156d4:	4b0b      	ldr	r3, [pc, #44]	; (8015704 <prvCheckTasksWaitingTermination+0x58>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	3b01      	subs	r3, #1
 80156da:	4a0a      	ldr	r2, [pc, #40]	; (8015704 <prvCheckTasksWaitingTermination+0x58>)
 80156dc:	6013      	str	r3, [r2, #0]
 80156de:	f000 fe29 	bl	8016334 <vPortExitCritical>
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f000 f810 	bl	8015708 <prvDeleteTCB>
 80156e8:	4b06      	ldr	r3, [pc, #24]	; (8015704 <prvCheckTasksWaitingTermination+0x58>)
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d1e1      	bne.n	80156b4 <prvCheckTasksWaitingTermination+0x8>
 80156f0:	bf00      	nop
 80156f2:	bf00      	nop
 80156f4:	3708      	adds	r7, #8
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
 80156fa:	bf00      	nop
 80156fc:	24001cd4 	.word	0x24001cd4
 8015700:	24001d00 	.word	0x24001d00
 8015704:	24001ce8 	.word	0x24001ce8

08015708 <prvDeleteTCB>:
 8015708:	b580      	push	{r7, lr}
 801570a:	b084      	sub	sp, #16
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015716:	2b00      	cmp	r3, #0
 8015718:	d108      	bne.n	801572c <prvDeleteTCB+0x24>
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801571e:	4618      	mov	r0, r3
 8015720:	f000 ffc6 	bl	80166b0 <vPortFree>
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f000 ffc3 	bl	80166b0 <vPortFree>
 801572a:	e018      	b.n	801575e <prvDeleteTCB+0x56>
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015732:	2b01      	cmp	r3, #1
 8015734:	d103      	bne.n	801573e <prvDeleteTCB+0x36>
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	f000 ffba 	bl	80166b0 <vPortFree>
 801573c:	e00f      	b.n	801575e <prvDeleteTCB+0x56>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015744:	2b02      	cmp	r3, #2
 8015746:	d00a      	beq.n	801575e <prvDeleteTCB+0x56>
 8015748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801574c:	f383 8811 	msr	BASEPRI, r3
 8015750:	f3bf 8f6f 	isb	sy
 8015754:	f3bf 8f4f 	dsb	sy
 8015758:	60fb      	str	r3, [r7, #12]
 801575a:	bf00      	nop
 801575c:	e7fe      	b.n	801575c <prvDeleteTCB+0x54>
 801575e:	bf00      	nop
 8015760:	3710      	adds	r7, #16
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}
	...

08015768 <prvResetNextTaskUnblockTime>:
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	4b0c      	ldr	r3, [pc, #48]	; (80157a0 <prvResetNextTaskUnblockTime+0x38>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d104      	bne.n	8015782 <prvResetNextTaskUnblockTime+0x1a>
 8015778:	4b0a      	ldr	r3, [pc, #40]	; (80157a4 <prvResetNextTaskUnblockTime+0x3c>)
 801577a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801577e:	601a      	str	r2, [r3, #0]
 8015780:	e008      	b.n	8015794 <prvResetNextTaskUnblockTime+0x2c>
 8015782:	4b07      	ldr	r3, [pc, #28]	; (80157a0 <prvResetNextTaskUnblockTime+0x38>)
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	68db      	ldr	r3, [r3, #12]
 8015788:	68db      	ldr	r3, [r3, #12]
 801578a:	607b      	str	r3, [r7, #4]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	4a04      	ldr	r2, [pc, #16]	; (80157a4 <prvResetNextTaskUnblockTime+0x3c>)
 8015792:	6013      	str	r3, [r2, #0]
 8015794:	bf00      	nop
 8015796:	370c      	adds	r7, #12
 8015798:	46bd      	mov	sp, r7
 801579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579e:	4770      	bx	lr
 80157a0:	24001cb8 	.word	0x24001cb8
 80157a4:	24001d20 	.word	0x24001d20

080157a8 <xTaskGetSchedulerState>:
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	4b0b      	ldr	r3, [pc, #44]	; (80157dc <xTaskGetSchedulerState+0x34>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d102      	bne.n	80157bc <xTaskGetSchedulerState+0x14>
 80157b6:	2301      	movs	r3, #1
 80157b8:	607b      	str	r3, [r7, #4]
 80157ba:	e008      	b.n	80157ce <xTaskGetSchedulerState+0x26>
 80157bc:	4b08      	ldr	r3, [pc, #32]	; (80157e0 <xTaskGetSchedulerState+0x38>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d102      	bne.n	80157ca <xTaskGetSchedulerState+0x22>
 80157c4:	2302      	movs	r3, #2
 80157c6:	607b      	str	r3, [r7, #4]
 80157c8:	e001      	b.n	80157ce <xTaskGetSchedulerState+0x26>
 80157ca:	2300      	movs	r3, #0
 80157cc:	607b      	str	r3, [r7, #4]
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	4618      	mov	r0, r3
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr
 80157dc:	24001d0c 	.word	0x24001d0c
 80157e0:	24001d28 	.word	0x24001d28

080157e4 <xTaskPriorityDisinherit>:
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b086      	sub	sp, #24
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	613b      	str	r3, [r7, #16]
 80157f0:	2300      	movs	r3, #0
 80157f2:	617b      	str	r3, [r7, #20]
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d056      	beq.n	80158a8 <xTaskPriorityDisinherit+0xc4>
 80157fa:	4b2e      	ldr	r3, [pc, #184]	; (80158b4 <xTaskPriorityDisinherit+0xd0>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	693a      	ldr	r2, [r7, #16]
 8015800:	429a      	cmp	r2, r3
 8015802:	d00a      	beq.n	801581a <xTaskPriorityDisinherit+0x36>
 8015804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015808:	f383 8811 	msr	BASEPRI, r3
 801580c:	f3bf 8f6f 	isb	sy
 8015810:	f3bf 8f4f 	dsb	sy
 8015814:	60fb      	str	r3, [r7, #12]
 8015816:	bf00      	nop
 8015818:	e7fe      	b.n	8015818 <xTaskPriorityDisinherit+0x34>
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801581e:	2b00      	cmp	r3, #0
 8015820:	d10a      	bne.n	8015838 <xTaskPriorityDisinherit+0x54>
 8015822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015826:	f383 8811 	msr	BASEPRI, r3
 801582a:	f3bf 8f6f 	isb	sy
 801582e:	f3bf 8f4f 	dsb	sy
 8015832:	60bb      	str	r3, [r7, #8]
 8015834:	bf00      	nop
 8015836:	e7fe      	b.n	8015836 <xTaskPriorityDisinherit+0x52>
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801583c:	1e5a      	subs	r2, r3, #1
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	651a      	str	r2, [r3, #80]	; 0x50
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801584a:	429a      	cmp	r2, r3
 801584c:	d02c      	beq.n	80158a8 <xTaskPriorityDisinherit+0xc4>
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015852:	2b00      	cmp	r3, #0
 8015854:	d128      	bne.n	80158a8 <xTaskPriorityDisinherit+0xc4>
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	3304      	adds	r3, #4
 801585a:	4618      	mov	r0, r3
 801585c:	f7fe f9f6 	bl	8013c4c <uxListRemove>
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015864:	693b      	ldr	r3, [r7, #16]
 8015866:	62da      	str	r2, [r3, #44]	; 0x2c
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801586c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	619a      	str	r2, [r3, #24]
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015878:	4b0f      	ldr	r3, [pc, #60]	; (80158b8 <xTaskPriorityDisinherit+0xd4>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	429a      	cmp	r2, r3
 801587e:	d903      	bls.n	8015888 <xTaskPriorityDisinherit+0xa4>
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015884:	4a0c      	ldr	r2, [pc, #48]	; (80158b8 <xTaskPriorityDisinherit+0xd4>)
 8015886:	6013      	str	r3, [r2, #0]
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801588c:	4613      	mov	r3, r2
 801588e:	009b      	lsls	r3, r3, #2
 8015890:	4413      	add	r3, r2
 8015892:	009b      	lsls	r3, r3, #2
 8015894:	4a09      	ldr	r2, [pc, #36]	; (80158bc <xTaskPriorityDisinherit+0xd8>)
 8015896:	441a      	add	r2, r3
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	3304      	adds	r3, #4
 801589c:	4619      	mov	r1, r3
 801589e:	4610      	mov	r0, r2
 80158a0:	f7fe f977 	bl	8013b92 <vListInsertEnd>
 80158a4:	2301      	movs	r3, #1
 80158a6:	617b      	str	r3, [r7, #20]
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	4618      	mov	r0, r3
 80158ac:	3718      	adds	r7, #24
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}
 80158b2:	bf00      	nop
 80158b4:	2400182c 	.word	0x2400182c
 80158b8:	24001d08 	.word	0x24001d08
 80158bc:	24001830 	.word	0x24001830

080158c0 <uxTaskResetEventItemValue>:
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	4b09      	ldr	r3, [pc, #36]	; (80158ec <uxTaskResetEventItemValue+0x2c>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	699b      	ldr	r3, [r3, #24]
 80158cc:	607b      	str	r3, [r7, #4]
 80158ce:	4b07      	ldr	r3, [pc, #28]	; (80158ec <uxTaskResetEventItemValue+0x2c>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158d4:	4b05      	ldr	r3, [pc, #20]	; (80158ec <uxTaskResetEventItemValue+0x2c>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80158dc:	619a      	str	r2, [r3, #24]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	4618      	mov	r0, r3
 80158e2:	370c      	adds	r7, #12
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr
 80158ec:	2400182c 	.word	0x2400182c

080158f0 <prvAddCurrentTaskToDelayedList>:
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b084      	sub	sp, #16
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	6039      	str	r1, [r7, #0]
 80158fa:	4b21      	ldr	r3, [pc, #132]	; (8015980 <prvAddCurrentTaskToDelayedList+0x90>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	60fb      	str	r3, [r7, #12]
 8015900:	4b20      	ldr	r3, [pc, #128]	; (8015984 <prvAddCurrentTaskToDelayedList+0x94>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	3304      	adds	r3, #4
 8015906:	4618      	mov	r0, r3
 8015908:	f7fe f9a0 	bl	8013c4c <uxListRemove>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015912:	d10a      	bne.n	801592a <prvAddCurrentTaskToDelayedList+0x3a>
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d007      	beq.n	801592a <prvAddCurrentTaskToDelayedList+0x3a>
 801591a:	4b1a      	ldr	r3, [pc, #104]	; (8015984 <prvAddCurrentTaskToDelayedList+0x94>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	3304      	adds	r3, #4
 8015920:	4619      	mov	r1, r3
 8015922:	4819      	ldr	r0, [pc, #100]	; (8015988 <prvAddCurrentTaskToDelayedList+0x98>)
 8015924:	f7fe f935 	bl	8013b92 <vListInsertEnd>
 8015928:	e026      	b.n	8015978 <prvAddCurrentTaskToDelayedList+0x88>
 801592a:	68fa      	ldr	r2, [r7, #12]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	4413      	add	r3, r2
 8015930:	60bb      	str	r3, [r7, #8]
 8015932:	4b14      	ldr	r3, [pc, #80]	; (8015984 <prvAddCurrentTaskToDelayedList+0x94>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	68ba      	ldr	r2, [r7, #8]
 8015938:	605a      	str	r2, [r3, #4]
 801593a:	68ba      	ldr	r2, [r7, #8]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	429a      	cmp	r2, r3
 8015940:	d209      	bcs.n	8015956 <prvAddCurrentTaskToDelayedList+0x66>
 8015942:	4b12      	ldr	r3, [pc, #72]	; (801598c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	4b0f      	ldr	r3, [pc, #60]	; (8015984 <prvAddCurrentTaskToDelayedList+0x94>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	3304      	adds	r3, #4
 801594c:	4619      	mov	r1, r3
 801594e:	4610      	mov	r0, r2
 8015950:	f7fe f943 	bl	8013bda <vListInsert>
 8015954:	e010      	b.n	8015978 <prvAddCurrentTaskToDelayedList+0x88>
 8015956:	4b0e      	ldr	r3, [pc, #56]	; (8015990 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	4b0a      	ldr	r3, [pc, #40]	; (8015984 <prvAddCurrentTaskToDelayedList+0x94>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	3304      	adds	r3, #4
 8015960:	4619      	mov	r1, r3
 8015962:	4610      	mov	r0, r2
 8015964:	f7fe f939 	bl	8013bda <vListInsert>
 8015968:	4b0a      	ldr	r3, [pc, #40]	; (8015994 <prvAddCurrentTaskToDelayedList+0xa4>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	68ba      	ldr	r2, [r7, #8]
 801596e:	429a      	cmp	r2, r3
 8015970:	d202      	bcs.n	8015978 <prvAddCurrentTaskToDelayedList+0x88>
 8015972:	4a08      	ldr	r2, [pc, #32]	; (8015994 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	6013      	str	r3, [r2, #0]
 8015978:	bf00      	nop
 801597a:	3710      	adds	r7, #16
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}
 8015980:	24001d04 	.word	0x24001d04
 8015984:	2400182c 	.word	0x2400182c
 8015988:	24001cec 	.word	0x24001cec
 801598c:	24001cbc 	.word	0x24001cbc
 8015990:	24001cb8 	.word	0x24001cb8
 8015994:	24001d20 	.word	0x24001d20

08015998 <xTimerCreateTimerTask>:
 8015998:	b580      	push	{r7, lr}
 801599a:	b08a      	sub	sp, #40	; 0x28
 801599c:	af04      	add	r7, sp, #16
 801599e:	2300      	movs	r3, #0
 80159a0:	617b      	str	r3, [r7, #20]
 80159a2:	f000 fb07 	bl	8015fb4 <prvCheckForValidListAndQueue>
 80159a6:	4b1c      	ldr	r3, [pc, #112]	; (8015a18 <xTimerCreateTimerTask+0x80>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d021      	beq.n	80159f2 <xTimerCreateTimerTask+0x5a>
 80159ae:	2300      	movs	r3, #0
 80159b0:	60fb      	str	r3, [r7, #12]
 80159b2:	2300      	movs	r3, #0
 80159b4:	60bb      	str	r3, [r7, #8]
 80159b6:	1d3a      	adds	r2, r7, #4
 80159b8:	f107 0108 	add.w	r1, r7, #8
 80159bc:	f107 030c 	add.w	r3, r7, #12
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7fd fe33 	bl	801362c <vApplicationGetTimerTaskMemory>
 80159c6:	6879      	ldr	r1, [r7, #4]
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	68fa      	ldr	r2, [r7, #12]
 80159cc:	9202      	str	r2, [sp, #8]
 80159ce:	9301      	str	r3, [sp, #4]
 80159d0:	2302      	movs	r3, #2
 80159d2:	9300      	str	r3, [sp, #0]
 80159d4:	2300      	movs	r3, #0
 80159d6:	460a      	mov	r2, r1
 80159d8:	4910      	ldr	r1, [pc, #64]	; (8015a1c <xTimerCreateTimerTask+0x84>)
 80159da:	4811      	ldr	r0, [pc, #68]	; (8015a20 <xTimerCreateTimerTask+0x88>)
 80159dc:	f7fe ff06 	bl	80147ec <xTaskCreateStatic>
 80159e0:	4603      	mov	r3, r0
 80159e2:	4a10      	ldr	r2, [pc, #64]	; (8015a24 <xTimerCreateTimerTask+0x8c>)
 80159e4:	6013      	str	r3, [r2, #0]
 80159e6:	4b0f      	ldr	r3, [pc, #60]	; (8015a24 <xTimerCreateTimerTask+0x8c>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d001      	beq.n	80159f2 <xTimerCreateTimerTask+0x5a>
 80159ee:	2301      	movs	r3, #1
 80159f0:	617b      	str	r3, [r7, #20]
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d10a      	bne.n	8015a0e <xTimerCreateTimerTask+0x76>
 80159f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159fc:	f383 8811 	msr	BASEPRI, r3
 8015a00:	f3bf 8f6f 	isb	sy
 8015a04:	f3bf 8f4f 	dsb	sy
 8015a08:	613b      	str	r3, [r7, #16]
 8015a0a:	bf00      	nop
 8015a0c:	e7fe      	b.n	8015a0c <xTimerCreateTimerTask+0x74>
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	4618      	mov	r0, r3
 8015a12:	3718      	adds	r7, #24
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	24001d5c 	.word	0x24001d5c
 8015a1c:	08017600 	.word	0x08017600
 8015a20:	08015b5d 	.word	0x08015b5d
 8015a24:	24001d60 	.word	0x24001d60

08015a28 <xTimerGenericCommand>:
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b08a      	sub	sp, #40	; 0x28
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	607a      	str	r2, [r7, #4]
 8015a34:	603b      	str	r3, [r7, #0]
 8015a36:	2300      	movs	r3, #0
 8015a38:	627b      	str	r3, [r7, #36]	; 0x24
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d10a      	bne.n	8015a56 <xTimerGenericCommand+0x2e>
 8015a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a44:	f383 8811 	msr	BASEPRI, r3
 8015a48:	f3bf 8f6f 	isb	sy
 8015a4c:	f3bf 8f4f 	dsb	sy
 8015a50:	623b      	str	r3, [r7, #32]
 8015a52:	bf00      	nop
 8015a54:	e7fe      	b.n	8015a54 <xTimerGenericCommand+0x2c>
 8015a56:	4b1a      	ldr	r3, [pc, #104]	; (8015ac0 <xTimerGenericCommand+0x98>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d02a      	beq.n	8015ab4 <xTimerGenericCommand+0x8c>
 8015a5e:	68bb      	ldr	r3, [r7, #8]
 8015a60:	613b      	str	r3, [r7, #16]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	617b      	str	r3, [r7, #20]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	61bb      	str	r3, [r7, #24]
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	2b05      	cmp	r3, #5
 8015a6e:	dc18      	bgt.n	8015aa2 <xTimerGenericCommand+0x7a>
 8015a70:	f7ff fe9a 	bl	80157a8 <xTaskGetSchedulerState>
 8015a74:	4603      	mov	r3, r0
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	d109      	bne.n	8015a8e <xTimerGenericCommand+0x66>
 8015a7a:	4b11      	ldr	r3, [pc, #68]	; (8015ac0 <xTimerGenericCommand+0x98>)
 8015a7c:	6818      	ldr	r0, [r3, #0]
 8015a7e:	f107 0110 	add.w	r1, r7, #16
 8015a82:	2300      	movs	r3, #0
 8015a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a86:	f7fe fa49 	bl	8013f1c <xQueueGenericSend>
 8015a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8015a8c:	e012      	b.n	8015ab4 <xTimerGenericCommand+0x8c>
 8015a8e:	4b0c      	ldr	r3, [pc, #48]	; (8015ac0 <xTimerGenericCommand+0x98>)
 8015a90:	6818      	ldr	r0, [r3, #0]
 8015a92:	f107 0110 	add.w	r1, r7, #16
 8015a96:	2300      	movs	r3, #0
 8015a98:	2200      	movs	r2, #0
 8015a9a:	f7fe fa3f 	bl	8013f1c <xQueueGenericSend>
 8015a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8015aa0:	e008      	b.n	8015ab4 <xTimerGenericCommand+0x8c>
 8015aa2:	4b07      	ldr	r3, [pc, #28]	; (8015ac0 <xTimerGenericCommand+0x98>)
 8015aa4:	6818      	ldr	r0, [r3, #0]
 8015aa6:	f107 0110 	add.w	r1, r7, #16
 8015aaa:	2300      	movs	r3, #0
 8015aac:	683a      	ldr	r2, [r7, #0]
 8015aae:	f7fe fb33 	bl	8014118 <xQueueGenericSendFromISR>
 8015ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3728      	adds	r7, #40	; 0x28
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	24001d5c 	.word	0x24001d5c

08015ac4 <prvProcessExpiredTimer>:
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b088      	sub	sp, #32
 8015ac8:	af02      	add	r7, sp, #8
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	6039      	str	r1, [r7, #0]
 8015ace:	4b22      	ldr	r3, [pc, #136]	; (8015b58 <prvProcessExpiredTimer+0x94>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	68db      	ldr	r3, [r3, #12]
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	617b      	str	r3, [r7, #20]
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	3304      	adds	r3, #4
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7fe f8b5 	bl	8013c4c <uxListRemove>
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ae8:	f003 0304 	and.w	r3, r3, #4
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d022      	beq.n	8015b36 <prvProcessExpiredTimer+0x72>
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	699a      	ldr	r2, [r3, #24]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	18d1      	adds	r1, r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	683a      	ldr	r2, [r7, #0]
 8015afc:	6978      	ldr	r0, [r7, #20]
 8015afe:	f000 f8d1 	bl	8015ca4 <prvInsertTimerInActiveList>
 8015b02:	4603      	mov	r3, r0
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d01f      	beq.n	8015b48 <prvProcessExpiredTimer+0x84>
 8015b08:	2300      	movs	r3, #0
 8015b0a:	9300      	str	r3, [sp, #0]
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	2100      	movs	r1, #0
 8015b12:	6978      	ldr	r0, [r7, #20]
 8015b14:	f7ff ff88 	bl	8015a28 <xTimerGenericCommand>
 8015b18:	6138      	str	r0, [r7, #16]
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d113      	bne.n	8015b48 <prvProcessExpiredTimer+0x84>
 8015b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b24:	f383 8811 	msr	BASEPRI, r3
 8015b28:	f3bf 8f6f 	isb	sy
 8015b2c:	f3bf 8f4f 	dsb	sy
 8015b30:	60fb      	str	r3, [r7, #12]
 8015b32:	bf00      	nop
 8015b34:	e7fe      	b.n	8015b34 <prvProcessExpiredTimer+0x70>
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b3c:	f023 0301 	bic.w	r3, r3, #1
 8015b40:	b2da      	uxtb	r2, r3
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	6a1b      	ldr	r3, [r3, #32]
 8015b4c:	6978      	ldr	r0, [r7, #20]
 8015b4e:	4798      	blx	r3
 8015b50:	bf00      	nop
 8015b52:	3718      	adds	r7, #24
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}
 8015b58:	24001d54 	.word	0x24001d54

08015b5c <prvTimerTask>:
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b084      	sub	sp, #16
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	f107 0308 	add.w	r3, r7, #8
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f000 f857 	bl	8015c1c <prvGetNextExpireTime>
 8015b6e:	60f8      	str	r0, [r7, #12]
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	4619      	mov	r1, r3
 8015b74:	68f8      	ldr	r0, [r7, #12]
 8015b76:	f000 f803 	bl	8015b80 <prvProcessTimerOrBlockTask>
 8015b7a:	f000 f8d5 	bl	8015d28 <prvProcessReceivedCommands>
 8015b7e:	e7f1      	b.n	8015b64 <prvTimerTask+0x8>

08015b80 <prvProcessTimerOrBlockTask>:
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b084      	sub	sp, #16
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
 8015b88:	6039      	str	r1, [r7, #0]
 8015b8a:	f7ff f985 	bl	8014e98 <vTaskSuspendAll>
 8015b8e:	f107 0308 	add.w	r3, r7, #8
 8015b92:	4618      	mov	r0, r3
 8015b94:	f000 f866 	bl	8015c64 <prvSampleTimeNow>
 8015b98:	60f8      	str	r0, [r7, #12]
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d130      	bne.n	8015c02 <prvProcessTimerOrBlockTask+0x82>
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d10a      	bne.n	8015bbc <prvProcessTimerOrBlockTask+0x3c>
 8015ba6:	687a      	ldr	r2, [r7, #4]
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d806      	bhi.n	8015bbc <prvProcessTimerOrBlockTask+0x3c>
 8015bae:	f7ff f981 	bl	8014eb4 <xTaskResumeAll>
 8015bb2:	68f9      	ldr	r1, [r7, #12]
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f7ff ff85 	bl	8015ac4 <prvProcessExpiredTimer>
 8015bba:	e024      	b.n	8015c06 <prvProcessTimerOrBlockTask+0x86>
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d008      	beq.n	8015bd4 <prvProcessTimerOrBlockTask+0x54>
 8015bc2:	4b13      	ldr	r3, [pc, #76]	; (8015c10 <prvProcessTimerOrBlockTask+0x90>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d101      	bne.n	8015bd0 <prvProcessTimerOrBlockTask+0x50>
 8015bcc:	2301      	movs	r3, #1
 8015bce:	e000      	b.n	8015bd2 <prvProcessTimerOrBlockTask+0x52>
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	603b      	str	r3, [r7, #0]
 8015bd4:	4b0f      	ldr	r3, [pc, #60]	; (8015c14 <prvProcessTimerOrBlockTask+0x94>)
 8015bd6:	6818      	ldr	r0, [r3, #0]
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	683a      	ldr	r2, [r7, #0]
 8015be0:	4619      	mov	r1, r3
 8015be2:	f7fe fdcf 	bl	8014784 <vQueueWaitForMessageRestricted>
 8015be6:	f7ff f965 	bl	8014eb4 <xTaskResumeAll>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d10a      	bne.n	8015c06 <prvProcessTimerOrBlockTask+0x86>
 8015bf0:	4b09      	ldr	r3, [pc, #36]	; (8015c18 <prvProcessTimerOrBlockTask+0x98>)
 8015bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bf6:	601a      	str	r2, [r3, #0]
 8015bf8:	f3bf 8f4f 	dsb	sy
 8015bfc:	f3bf 8f6f 	isb	sy
 8015c00:	e001      	b.n	8015c06 <prvProcessTimerOrBlockTask+0x86>
 8015c02:	f7ff f957 	bl	8014eb4 <xTaskResumeAll>
 8015c06:	bf00      	nop
 8015c08:	3710      	adds	r7, #16
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	24001d58 	.word	0x24001d58
 8015c14:	24001d5c 	.word	0x24001d5c
 8015c18:	e000ed04 	.word	0xe000ed04

08015c1c <prvGetNextExpireTime>:
 8015c1c:	b480      	push	{r7}
 8015c1e:	b085      	sub	sp, #20
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	4b0e      	ldr	r3, [pc, #56]	; (8015c60 <prvGetNextExpireTime+0x44>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d101      	bne.n	8015c32 <prvGetNextExpireTime+0x16>
 8015c2e:	2201      	movs	r2, #1
 8015c30:	e000      	b.n	8015c34 <prvGetNextExpireTime+0x18>
 8015c32:	2200      	movs	r2, #0
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	601a      	str	r2, [r3, #0]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d105      	bne.n	8015c4c <prvGetNextExpireTime+0x30>
 8015c40:	4b07      	ldr	r3, [pc, #28]	; (8015c60 <prvGetNextExpireTime+0x44>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	68db      	ldr	r3, [r3, #12]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	60fb      	str	r3, [r7, #12]
 8015c4a:	e001      	b.n	8015c50 <prvGetNextExpireTime+0x34>
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	60fb      	str	r3, [r7, #12]
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	4618      	mov	r0, r3
 8015c54:	3714      	adds	r7, #20
 8015c56:	46bd      	mov	sp, r7
 8015c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5c:	4770      	bx	lr
 8015c5e:	bf00      	nop
 8015c60:	24001d54 	.word	0x24001d54

08015c64 <prvSampleTimeNow>:
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	f7ff f9c0 	bl	8014ff0 <xTaskGetTickCount>
 8015c70:	60f8      	str	r0, [r7, #12]
 8015c72:	4b0b      	ldr	r3, [pc, #44]	; (8015ca0 <prvSampleTimeNow+0x3c>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	68fa      	ldr	r2, [r7, #12]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d205      	bcs.n	8015c88 <prvSampleTimeNow+0x24>
 8015c7c:	f000 f936 	bl	8015eec <prvSwitchTimerLists>
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2201      	movs	r2, #1
 8015c84:	601a      	str	r2, [r3, #0]
 8015c86:	e002      	b.n	8015c8e <prvSampleTimeNow+0x2a>
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	601a      	str	r2, [r3, #0]
 8015c8e:	4a04      	ldr	r2, [pc, #16]	; (8015ca0 <prvSampleTimeNow+0x3c>)
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	6013      	str	r3, [r2, #0]
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	4618      	mov	r0, r3
 8015c98:	3710      	adds	r7, #16
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	24001d64 	.word	0x24001d64

08015ca4 <prvInsertTimerInActiveList>:
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b086      	sub	sp, #24
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	60f8      	str	r0, [r7, #12]
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	607a      	str	r2, [r7, #4]
 8015cb0:	603b      	str	r3, [r7, #0]
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	617b      	str	r3, [r7, #20]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	68ba      	ldr	r2, [r7, #8]
 8015cba:	605a      	str	r2, [r3, #4]
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	611a      	str	r2, [r3, #16]
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d812      	bhi.n	8015cf0 <prvInsertTimerInActiveList+0x4c>
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	1ad2      	subs	r2, r2, r3
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	699b      	ldr	r3, [r3, #24]
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d302      	bcc.n	8015cde <prvInsertTimerInActiveList+0x3a>
 8015cd8:	2301      	movs	r3, #1
 8015cda:	617b      	str	r3, [r7, #20]
 8015cdc:	e01b      	b.n	8015d16 <prvInsertTimerInActiveList+0x72>
 8015cde:	4b10      	ldr	r3, [pc, #64]	; (8015d20 <prvInsertTimerInActiveList+0x7c>)
 8015ce0:	681a      	ldr	r2, [r3, #0]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	3304      	adds	r3, #4
 8015ce6:	4619      	mov	r1, r3
 8015ce8:	4610      	mov	r0, r2
 8015cea:	f7fd ff76 	bl	8013bda <vListInsert>
 8015cee:	e012      	b.n	8015d16 <prvInsertTimerInActiveList+0x72>
 8015cf0:	687a      	ldr	r2, [r7, #4]
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	d206      	bcs.n	8015d06 <prvInsertTimerInActiveList+0x62>
 8015cf8:	68ba      	ldr	r2, [r7, #8]
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d302      	bcc.n	8015d06 <prvInsertTimerInActiveList+0x62>
 8015d00:	2301      	movs	r3, #1
 8015d02:	617b      	str	r3, [r7, #20]
 8015d04:	e007      	b.n	8015d16 <prvInsertTimerInActiveList+0x72>
 8015d06:	4b07      	ldr	r3, [pc, #28]	; (8015d24 <prvInsertTimerInActiveList+0x80>)
 8015d08:	681a      	ldr	r2, [r3, #0]
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	3304      	adds	r3, #4
 8015d0e:	4619      	mov	r1, r3
 8015d10:	4610      	mov	r0, r2
 8015d12:	f7fd ff62 	bl	8013bda <vListInsert>
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3718      	adds	r7, #24
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}
 8015d20:	24001d58 	.word	0x24001d58
 8015d24:	24001d54 	.word	0x24001d54

08015d28 <prvProcessReceivedCommands>:
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b08e      	sub	sp, #56	; 0x38
 8015d2c:	af02      	add	r7, sp, #8
 8015d2e:	e0ca      	b.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	da18      	bge.n	8015d68 <prvProcessReceivedCommands+0x40>
 8015d36:	1d3b      	adds	r3, r7, #4
 8015d38:	3304      	adds	r3, #4
 8015d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d10a      	bne.n	8015d58 <prvProcessReceivedCommands+0x30>
 8015d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d46:	f383 8811 	msr	BASEPRI, r3
 8015d4a:	f3bf 8f6f 	isb	sy
 8015d4e:	f3bf 8f4f 	dsb	sy
 8015d52:	61fb      	str	r3, [r7, #28]
 8015d54:	bf00      	nop
 8015d56:	e7fe      	b.n	8015d56 <prvProcessReceivedCommands+0x2e>
 8015d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d5e:	6850      	ldr	r0, [r2, #4]
 8015d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d62:	6892      	ldr	r2, [r2, #8]
 8015d64:	4611      	mov	r1, r2
 8015d66:	4798      	blx	r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	f2c0 80aa 	blt.w	8015ec4 <prvProcessReceivedCommands+0x19c>
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d76:	695b      	ldr	r3, [r3, #20]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d004      	beq.n	8015d86 <prvProcessReceivedCommands+0x5e>
 8015d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7e:	3304      	adds	r3, #4
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7fd ff63 	bl	8013c4c <uxListRemove>
 8015d86:	463b      	mov	r3, r7
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f7ff ff6b 	bl	8015c64 <prvSampleTimeNow>
 8015d8e:	6278      	str	r0, [r7, #36]	; 0x24
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b09      	cmp	r3, #9
 8015d94:	f200 8097 	bhi.w	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015d98:	a201      	add	r2, pc, #4	; (adr r2, 8015da0 <prvProcessReceivedCommands+0x78>)
 8015d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d9e:	bf00      	nop
 8015da0:	08015dc9 	.word	0x08015dc9
 8015da4:	08015dc9 	.word	0x08015dc9
 8015da8:	08015dc9 	.word	0x08015dc9
 8015dac:	08015e3d 	.word	0x08015e3d
 8015db0:	08015e51 	.word	0x08015e51
 8015db4:	08015e9b 	.word	0x08015e9b
 8015db8:	08015dc9 	.word	0x08015dc9
 8015dbc:	08015dc9 	.word	0x08015dc9
 8015dc0:	08015e3d 	.word	0x08015e3d
 8015dc4:	08015e51 	.word	0x08015e51
 8015dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015dce:	f043 0301 	orr.w	r3, r3, #1
 8015dd2:	b2da      	uxtb	r2, r3
 8015dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015dda:	68ba      	ldr	r2, [r7, #8]
 8015ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dde:	699b      	ldr	r3, [r3, #24]
 8015de0:	18d1      	adds	r1, r2, r3
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015de8:	f7ff ff5c 	bl	8015ca4 <prvInsertTimerInActiveList>
 8015dec:	4603      	mov	r3, r0
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d069      	beq.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df4:	6a1b      	ldr	r3, [r3, #32]
 8015df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015df8:	4798      	blx	r3
 8015dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e00:	f003 0304 	and.w	r3, r3, #4
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d05e      	beq.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015e08:	68ba      	ldr	r2, [r7, #8]
 8015e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0c:	699b      	ldr	r3, [r3, #24]
 8015e0e:	441a      	add	r2, r3
 8015e10:	2300      	movs	r3, #0
 8015e12:	9300      	str	r3, [sp, #0]
 8015e14:	2300      	movs	r3, #0
 8015e16:	2100      	movs	r1, #0
 8015e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e1a:	f7ff fe05 	bl	8015a28 <xTimerGenericCommand>
 8015e1e:	6238      	str	r0, [r7, #32]
 8015e20:	6a3b      	ldr	r3, [r7, #32]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d14f      	bne.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e2a:	f383 8811 	msr	BASEPRI, r3
 8015e2e:	f3bf 8f6f 	isb	sy
 8015e32:	f3bf 8f4f 	dsb	sy
 8015e36:	61bb      	str	r3, [r7, #24]
 8015e38:	bf00      	nop
 8015e3a:	e7fe      	b.n	8015e3a <prvProcessReceivedCommands+0x112>
 8015e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e42:	f023 0301 	bic.w	r3, r3, #1
 8015e46:	b2da      	uxtb	r2, r3
 8015e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015e4e:	e03a      	b.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e56:	f043 0301 	orr.w	r3, r3, #1
 8015e5a:	b2da      	uxtb	r2, r3
 8015e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015e62:	68ba      	ldr	r2, [r7, #8]
 8015e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e66:	619a      	str	r2, [r3, #24]
 8015e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6a:	699b      	ldr	r3, [r3, #24]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d10a      	bne.n	8015e86 <prvProcessReceivedCommands+0x15e>
 8015e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e74:	f383 8811 	msr	BASEPRI, r3
 8015e78:	f3bf 8f6f 	isb	sy
 8015e7c:	f3bf 8f4f 	dsb	sy
 8015e80:	617b      	str	r3, [r7, #20]
 8015e82:	bf00      	nop
 8015e84:	e7fe      	b.n	8015e84 <prvProcessReceivedCommands+0x15c>
 8015e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e88:	699a      	ldr	r2, [r3, #24]
 8015e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8c:	18d1      	adds	r1, r2, r3
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e94:	f7ff ff06 	bl	8015ca4 <prvInsertTimerInActiveList>
 8015e98:	e015      	b.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ea0:	f003 0302 	and.w	r3, r3, #2
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d103      	bne.n	8015eb0 <prvProcessReceivedCommands+0x188>
 8015ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eaa:	f000 fc01 	bl	80166b0 <vPortFree>
 8015eae:	e00a      	b.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eb6:	f023 0301 	bic.w	r3, r3, #1
 8015eba:	b2da      	uxtb	r2, r3
 8015ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015ec2:	e000      	b.n	8015ec6 <prvProcessReceivedCommands+0x19e>
 8015ec4:	bf00      	nop
 8015ec6:	4b08      	ldr	r3, [pc, #32]	; (8015ee8 <prvProcessReceivedCommands+0x1c0>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	1d39      	adds	r1, r7, #4
 8015ecc:	2200      	movs	r2, #0
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7fe f9be 	bl	8014250 <xQueueReceive>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	f47f af2a 	bne.w	8015d30 <prvProcessReceivedCommands+0x8>
 8015edc:	bf00      	nop
 8015ede:	bf00      	nop
 8015ee0:	3730      	adds	r7, #48	; 0x30
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}
 8015ee6:	bf00      	nop
 8015ee8:	24001d5c 	.word	0x24001d5c

08015eec <prvSwitchTimerLists>:
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b088      	sub	sp, #32
 8015ef0:	af02      	add	r7, sp, #8
 8015ef2:	e048      	b.n	8015f86 <prvSwitchTimerLists+0x9a>
 8015ef4:	4b2d      	ldr	r3, [pc, #180]	; (8015fac <prvSwitchTimerLists+0xc0>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68db      	ldr	r3, [r3, #12]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	613b      	str	r3, [r7, #16]
 8015efe:	4b2b      	ldr	r3, [pc, #172]	; (8015fac <prvSwitchTimerLists+0xc0>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	68db      	ldr	r3, [r3, #12]
 8015f04:	68db      	ldr	r3, [r3, #12]
 8015f06:	60fb      	str	r3, [r7, #12]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	3304      	adds	r3, #4
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7fd fe9d 	bl	8013c4c <uxListRemove>
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	6a1b      	ldr	r3, [r3, #32]
 8015f16:	68f8      	ldr	r0, [r7, #12]
 8015f18:	4798      	blx	r3
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f20:	f003 0304 	and.w	r3, r3, #4
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d02e      	beq.n	8015f86 <prvSwitchTimerLists+0x9a>
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	699b      	ldr	r3, [r3, #24]
 8015f2c:	693a      	ldr	r2, [r7, #16]
 8015f2e:	4413      	add	r3, r2
 8015f30:	60bb      	str	r3, [r7, #8]
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d90e      	bls.n	8015f58 <prvSwitchTimerLists+0x6c>
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	68ba      	ldr	r2, [r7, #8]
 8015f3e:	605a      	str	r2, [r3, #4]
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	68fa      	ldr	r2, [r7, #12]
 8015f44:	611a      	str	r2, [r3, #16]
 8015f46:	4b19      	ldr	r3, [pc, #100]	; (8015fac <prvSwitchTimerLists+0xc0>)
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	3304      	adds	r3, #4
 8015f4e:	4619      	mov	r1, r3
 8015f50:	4610      	mov	r0, r2
 8015f52:	f7fd fe42 	bl	8013bda <vListInsert>
 8015f56:	e016      	b.n	8015f86 <prvSwitchTimerLists+0x9a>
 8015f58:	2300      	movs	r3, #0
 8015f5a:	9300      	str	r3, [sp, #0]
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	693a      	ldr	r2, [r7, #16]
 8015f60:	2100      	movs	r1, #0
 8015f62:	68f8      	ldr	r0, [r7, #12]
 8015f64:	f7ff fd60 	bl	8015a28 <xTimerGenericCommand>
 8015f68:	6078      	str	r0, [r7, #4]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d10a      	bne.n	8015f86 <prvSwitchTimerLists+0x9a>
 8015f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f74:	f383 8811 	msr	BASEPRI, r3
 8015f78:	f3bf 8f6f 	isb	sy
 8015f7c:	f3bf 8f4f 	dsb	sy
 8015f80:	603b      	str	r3, [r7, #0]
 8015f82:	bf00      	nop
 8015f84:	e7fe      	b.n	8015f84 <prvSwitchTimerLists+0x98>
 8015f86:	4b09      	ldr	r3, [pc, #36]	; (8015fac <prvSwitchTimerLists+0xc0>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d1b1      	bne.n	8015ef4 <prvSwitchTimerLists+0x8>
 8015f90:	4b06      	ldr	r3, [pc, #24]	; (8015fac <prvSwitchTimerLists+0xc0>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	617b      	str	r3, [r7, #20]
 8015f96:	4b06      	ldr	r3, [pc, #24]	; (8015fb0 <prvSwitchTimerLists+0xc4>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	4a04      	ldr	r2, [pc, #16]	; (8015fac <prvSwitchTimerLists+0xc0>)
 8015f9c:	6013      	str	r3, [r2, #0]
 8015f9e:	4a04      	ldr	r2, [pc, #16]	; (8015fb0 <prvSwitchTimerLists+0xc4>)
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	6013      	str	r3, [r2, #0]
 8015fa4:	bf00      	nop
 8015fa6:	3718      	adds	r7, #24
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}
 8015fac:	24001d54 	.word	0x24001d54
 8015fb0:	24001d58 	.word	0x24001d58

08015fb4 <prvCheckForValidListAndQueue>:
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af02      	add	r7, sp, #8
 8015fba:	f000 f98b 	bl	80162d4 <vPortEnterCritical>
 8015fbe:	4b15      	ldr	r3, [pc, #84]	; (8016014 <prvCheckForValidListAndQueue+0x60>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d120      	bne.n	8016008 <prvCheckForValidListAndQueue+0x54>
 8015fc6:	4814      	ldr	r0, [pc, #80]	; (8016018 <prvCheckForValidListAndQueue+0x64>)
 8015fc8:	f7fd fdb6 	bl	8013b38 <vListInitialise>
 8015fcc:	4813      	ldr	r0, [pc, #76]	; (801601c <prvCheckForValidListAndQueue+0x68>)
 8015fce:	f7fd fdb3 	bl	8013b38 <vListInitialise>
 8015fd2:	4b13      	ldr	r3, [pc, #76]	; (8016020 <prvCheckForValidListAndQueue+0x6c>)
 8015fd4:	4a10      	ldr	r2, [pc, #64]	; (8016018 <prvCheckForValidListAndQueue+0x64>)
 8015fd6:	601a      	str	r2, [r3, #0]
 8015fd8:	4b12      	ldr	r3, [pc, #72]	; (8016024 <prvCheckForValidListAndQueue+0x70>)
 8015fda:	4a10      	ldr	r2, [pc, #64]	; (801601c <prvCheckForValidListAndQueue+0x68>)
 8015fdc:	601a      	str	r2, [r3, #0]
 8015fde:	2300      	movs	r3, #0
 8015fe0:	9300      	str	r3, [sp, #0]
 8015fe2:	4b11      	ldr	r3, [pc, #68]	; (8016028 <prvCheckForValidListAndQueue+0x74>)
 8015fe4:	4a11      	ldr	r2, [pc, #68]	; (801602c <prvCheckForValidListAndQueue+0x78>)
 8015fe6:	2110      	movs	r1, #16
 8015fe8:	200a      	movs	r0, #10
 8015fea:	f7fd fec1 	bl	8013d70 <xQueueGenericCreateStatic>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	4a08      	ldr	r2, [pc, #32]	; (8016014 <prvCheckForValidListAndQueue+0x60>)
 8015ff2:	6013      	str	r3, [r2, #0]
 8015ff4:	4b07      	ldr	r3, [pc, #28]	; (8016014 <prvCheckForValidListAndQueue+0x60>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d005      	beq.n	8016008 <prvCheckForValidListAndQueue+0x54>
 8015ffc:	4b05      	ldr	r3, [pc, #20]	; (8016014 <prvCheckForValidListAndQueue+0x60>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	490b      	ldr	r1, [pc, #44]	; (8016030 <prvCheckForValidListAndQueue+0x7c>)
 8016002:	4618      	mov	r0, r3
 8016004:	f7fe fb94 	bl	8014730 <vQueueAddToRegistry>
 8016008:	f000 f994 	bl	8016334 <vPortExitCritical>
 801600c:	bf00      	nop
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	24001d5c 	.word	0x24001d5c
 8016018:	24001d2c 	.word	0x24001d2c
 801601c:	24001d40 	.word	0x24001d40
 8016020:	24001d54 	.word	0x24001d54
 8016024:	24001d58 	.word	0x24001d58
 8016028:	24001e08 	.word	0x24001e08
 801602c:	24001d68 	.word	0x24001d68
 8016030:	08017608 	.word	0x08017608

08016034 <xTimerPendFunctionCallFromISR>:
 8016034:	b580      	push	{r7, lr}
 8016036:	b08a      	sub	sp, #40	; 0x28
 8016038:	af00      	add	r7, sp, #0
 801603a:	60f8      	str	r0, [r7, #12]
 801603c:	60b9      	str	r1, [r7, #8]
 801603e:	607a      	str	r2, [r7, #4]
 8016040:	603b      	str	r3, [r7, #0]
 8016042:	f06f 0301 	mvn.w	r3, #1
 8016046:	617b      	str	r3, [r7, #20]
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	61bb      	str	r3, [r7, #24]
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	61fb      	str	r3, [r7, #28]
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	623b      	str	r3, [r7, #32]
 8016054:	4b06      	ldr	r3, [pc, #24]	; (8016070 <xTimerPendFunctionCallFromISR+0x3c>)
 8016056:	6818      	ldr	r0, [r3, #0]
 8016058:	f107 0114 	add.w	r1, r7, #20
 801605c:	2300      	movs	r3, #0
 801605e:	683a      	ldr	r2, [r7, #0]
 8016060:	f7fe f85a 	bl	8014118 <xQueueGenericSendFromISR>
 8016064:	6278      	str	r0, [r7, #36]	; 0x24
 8016066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016068:	4618      	mov	r0, r3
 801606a:	3728      	adds	r7, #40	; 0x28
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	24001d5c 	.word	0x24001d5c

08016074 <pxPortInitialiseStack>:
 8016074:	b480      	push	{r7}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	3b04      	subs	r3, #4
 8016084:	60fb      	str	r3, [r7, #12]
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801608c:	601a      	str	r2, [r3, #0]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	3b04      	subs	r3, #4
 8016092:	60fb      	str	r3, [r7, #12]
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	f023 0201 	bic.w	r2, r3, #1
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	601a      	str	r2, [r3, #0]
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	3b04      	subs	r3, #4
 80160a2:	60fb      	str	r3, [r7, #12]
 80160a4:	4a0c      	ldr	r2, [pc, #48]	; (80160d8 <pxPortInitialiseStack+0x64>)
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	601a      	str	r2, [r3, #0]
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	3b14      	subs	r3, #20
 80160ae:	60fb      	str	r3, [r7, #12]
 80160b0:	687a      	ldr	r2, [r7, #4]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	601a      	str	r2, [r3, #0]
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	3b04      	subs	r3, #4
 80160ba:	60fb      	str	r3, [r7, #12]
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	f06f 0202 	mvn.w	r2, #2
 80160c2:	601a      	str	r2, [r3, #0]
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	3b20      	subs	r3, #32
 80160c8:	60fb      	str	r3, [r7, #12]
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	4618      	mov	r0, r3
 80160ce:	3714      	adds	r7, #20
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr
 80160d8:	080160dd 	.word	0x080160dd

080160dc <prvTaskExitError>:
 80160dc:	b480      	push	{r7}
 80160de:	b085      	sub	sp, #20
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	2300      	movs	r3, #0
 80160e4:	607b      	str	r3, [r7, #4]
 80160e6:	4b12      	ldr	r3, [pc, #72]	; (8016130 <prvTaskExitError+0x54>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80160ee:	d00a      	beq.n	8016106 <prvTaskExitError+0x2a>
 80160f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f4:	f383 8811 	msr	BASEPRI, r3
 80160f8:	f3bf 8f6f 	isb	sy
 80160fc:	f3bf 8f4f 	dsb	sy
 8016100:	60fb      	str	r3, [r7, #12]
 8016102:	bf00      	nop
 8016104:	e7fe      	b.n	8016104 <prvTaskExitError+0x28>
 8016106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610a:	f383 8811 	msr	BASEPRI, r3
 801610e:	f3bf 8f6f 	isb	sy
 8016112:	f3bf 8f4f 	dsb	sy
 8016116:	60bb      	str	r3, [r7, #8]
 8016118:	bf00      	nop
 801611a:	bf00      	nop
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d0fc      	beq.n	801611c <prvTaskExitError+0x40>
 8016122:	bf00      	nop
 8016124:	bf00      	nop
 8016126:	3714      	adds	r7, #20
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr
 8016130:	240000a0 	.word	0x240000a0
	...

08016140 <SVC_Handler>:
 8016140:	4b07      	ldr	r3, [pc, #28]	; (8016160 <pxCurrentTCBConst2>)
 8016142:	6819      	ldr	r1, [r3, #0]
 8016144:	6808      	ldr	r0, [r1, #0]
 8016146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801614a:	f380 8809 	msr	PSP, r0
 801614e:	f3bf 8f6f 	isb	sy
 8016152:	f04f 0000 	mov.w	r0, #0
 8016156:	f380 8811 	msr	BASEPRI, r0
 801615a:	4770      	bx	lr
 801615c:	f3af 8000 	nop.w

08016160 <pxCurrentTCBConst2>:
 8016160:	2400182c 	.word	0x2400182c
 8016164:	bf00      	nop
 8016166:	bf00      	nop

08016168 <prvPortStartFirstTask>:
 8016168:	4808      	ldr	r0, [pc, #32]	; (801618c <prvPortStartFirstTask+0x24>)
 801616a:	6800      	ldr	r0, [r0, #0]
 801616c:	6800      	ldr	r0, [r0, #0]
 801616e:	f380 8808 	msr	MSP, r0
 8016172:	f04f 0000 	mov.w	r0, #0
 8016176:	f380 8814 	msr	CONTROL, r0
 801617a:	b662      	cpsie	i
 801617c:	b661      	cpsie	f
 801617e:	f3bf 8f4f 	dsb	sy
 8016182:	f3bf 8f6f 	isb	sy
 8016186:	df00      	svc	0
 8016188:	bf00      	nop
 801618a:	bf00      	nop
 801618c:	e000ed08 	.word	0xe000ed08

08016190 <xPortStartScheduler>:
 8016190:	b580      	push	{r7, lr}
 8016192:	b086      	sub	sp, #24
 8016194:	af00      	add	r7, sp, #0
 8016196:	4b46      	ldr	r3, [pc, #280]	; (80162b0 <xPortStartScheduler+0x120>)
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	4a46      	ldr	r2, [pc, #280]	; (80162b4 <xPortStartScheduler+0x124>)
 801619c:	4293      	cmp	r3, r2
 801619e:	d10a      	bne.n	80161b6 <xPortStartScheduler+0x26>
 80161a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a4:	f383 8811 	msr	BASEPRI, r3
 80161a8:	f3bf 8f6f 	isb	sy
 80161ac:	f3bf 8f4f 	dsb	sy
 80161b0:	613b      	str	r3, [r7, #16]
 80161b2:	bf00      	nop
 80161b4:	e7fe      	b.n	80161b4 <xPortStartScheduler+0x24>
 80161b6:	4b3e      	ldr	r3, [pc, #248]	; (80162b0 <xPortStartScheduler+0x120>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	4a3f      	ldr	r2, [pc, #252]	; (80162b8 <xPortStartScheduler+0x128>)
 80161bc:	4293      	cmp	r3, r2
 80161be:	d10a      	bne.n	80161d6 <xPortStartScheduler+0x46>
 80161c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161c4:	f383 8811 	msr	BASEPRI, r3
 80161c8:	f3bf 8f6f 	isb	sy
 80161cc:	f3bf 8f4f 	dsb	sy
 80161d0:	60fb      	str	r3, [r7, #12]
 80161d2:	bf00      	nop
 80161d4:	e7fe      	b.n	80161d4 <xPortStartScheduler+0x44>
 80161d6:	4b39      	ldr	r3, [pc, #228]	; (80162bc <xPortStartScheduler+0x12c>)
 80161d8:	617b      	str	r3, [r7, #20]
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	781b      	ldrb	r3, [r3, #0]
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	607b      	str	r3, [r7, #4]
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	22ff      	movs	r2, #255	; 0xff
 80161e6:	701a      	strb	r2, [r3, #0]
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	781b      	ldrb	r3, [r3, #0]
 80161ec:	b2db      	uxtb	r3, r3
 80161ee:	70fb      	strb	r3, [r7, #3]
 80161f0:	78fb      	ldrb	r3, [r7, #3]
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80161f8:	b2da      	uxtb	r2, r3
 80161fa:	4b31      	ldr	r3, [pc, #196]	; (80162c0 <xPortStartScheduler+0x130>)
 80161fc:	701a      	strb	r2, [r3, #0]
 80161fe:	4b31      	ldr	r3, [pc, #196]	; (80162c4 <xPortStartScheduler+0x134>)
 8016200:	2207      	movs	r2, #7
 8016202:	601a      	str	r2, [r3, #0]
 8016204:	e009      	b.n	801621a <xPortStartScheduler+0x8a>
 8016206:	4b2f      	ldr	r3, [pc, #188]	; (80162c4 <xPortStartScheduler+0x134>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	3b01      	subs	r3, #1
 801620c:	4a2d      	ldr	r2, [pc, #180]	; (80162c4 <xPortStartScheduler+0x134>)
 801620e:	6013      	str	r3, [r2, #0]
 8016210:	78fb      	ldrb	r3, [r7, #3]
 8016212:	b2db      	uxtb	r3, r3
 8016214:	005b      	lsls	r3, r3, #1
 8016216:	b2db      	uxtb	r3, r3
 8016218:	70fb      	strb	r3, [r7, #3]
 801621a:	78fb      	ldrb	r3, [r7, #3]
 801621c:	b2db      	uxtb	r3, r3
 801621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016222:	2b80      	cmp	r3, #128	; 0x80
 8016224:	d0ef      	beq.n	8016206 <xPortStartScheduler+0x76>
 8016226:	4b27      	ldr	r3, [pc, #156]	; (80162c4 <xPortStartScheduler+0x134>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	f1c3 0307 	rsb	r3, r3, #7
 801622e:	2b04      	cmp	r3, #4
 8016230:	d00a      	beq.n	8016248 <xPortStartScheduler+0xb8>
 8016232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016236:	f383 8811 	msr	BASEPRI, r3
 801623a:	f3bf 8f6f 	isb	sy
 801623e:	f3bf 8f4f 	dsb	sy
 8016242:	60bb      	str	r3, [r7, #8]
 8016244:	bf00      	nop
 8016246:	e7fe      	b.n	8016246 <xPortStartScheduler+0xb6>
 8016248:	4b1e      	ldr	r3, [pc, #120]	; (80162c4 <xPortStartScheduler+0x134>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	021b      	lsls	r3, r3, #8
 801624e:	4a1d      	ldr	r2, [pc, #116]	; (80162c4 <xPortStartScheduler+0x134>)
 8016250:	6013      	str	r3, [r2, #0]
 8016252:	4b1c      	ldr	r3, [pc, #112]	; (80162c4 <xPortStartScheduler+0x134>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801625a:	4a1a      	ldr	r2, [pc, #104]	; (80162c4 <xPortStartScheduler+0x134>)
 801625c:	6013      	str	r3, [r2, #0]
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	b2da      	uxtb	r2, r3
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	701a      	strb	r2, [r3, #0]
 8016266:	4b18      	ldr	r3, [pc, #96]	; (80162c8 <xPortStartScheduler+0x138>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	4a17      	ldr	r2, [pc, #92]	; (80162c8 <xPortStartScheduler+0x138>)
 801626c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016270:	6013      	str	r3, [r2, #0]
 8016272:	4b15      	ldr	r3, [pc, #84]	; (80162c8 <xPortStartScheduler+0x138>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	4a14      	ldr	r2, [pc, #80]	; (80162c8 <xPortStartScheduler+0x138>)
 8016278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801627c:	6013      	str	r3, [r2, #0]
 801627e:	f000 f8dd 	bl	801643c <vPortSetupTimerInterrupt>
 8016282:	4b12      	ldr	r3, [pc, #72]	; (80162cc <xPortStartScheduler+0x13c>)
 8016284:	2200      	movs	r2, #0
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	f000 f8fc 	bl	8016484 <vPortEnableVFP>
 801628c:	4b10      	ldr	r3, [pc, #64]	; (80162d0 <xPortStartScheduler+0x140>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	4a0f      	ldr	r2, [pc, #60]	; (80162d0 <xPortStartScheduler+0x140>)
 8016292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016296:	6013      	str	r3, [r2, #0]
 8016298:	f7ff ff66 	bl	8016168 <prvPortStartFirstTask>
 801629c:	f7fe ff7a 	bl	8015194 <vTaskSwitchContext>
 80162a0:	f7ff ff1c 	bl	80160dc <prvTaskExitError>
 80162a4:	2300      	movs	r3, #0
 80162a6:	4618      	mov	r0, r3
 80162a8:	3718      	adds	r7, #24
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	e000ed00 	.word	0xe000ed00
 80162b4:	410fc271 	.word	0x410fc271
 80162b8:	410fc270 	.word	0x410fc270
 80162bc:	e000e400 	.word	0xe000e400
 80162c0:	24001e58 	.word	0x24001e58
 80162c4:	24001e5c 	.word	0x24001e5c
 80162c8:	e000ed20 	.word	0xe000ed20
 80162cc:	240000a0 	.word	0x240000a0
 80162d0:	e000ef34 	.word	0xe000ef34

080162d4 <vPortEnterCritical>:
 80162d4:	b480      	push	{r7}
 80162d6:	b083      	sub	sp, #12
 80162d8:	af00      	add	r7, sp, #0
 80162da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162de:	f383 8811 	msr	BASEPRI, r3
 80162e2:	f3bf 8f6f 	isb	sy
 80162e6:	f3bf 8f4f 	dsb	sy
 80162ea:	607b      	str	r3, [r7, #4]
 80162ec:	bf00      	nop
 80162ee:	4b0f      	ldr	r3, [pc, #60]	; (801632c <vPortEnterCritical+0x58>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	3301      	adds	r3, #1
 80162f4:	4a0d      	ldr	r2, [pc, #52]	; (801632c <vPortEnterCritical+0x58>)
 80162f6:	6013      	str	r3, [r2, #0]
 80162f8:	4b0c      	ldr	r3, [pc, #48]	; (801632c <vPortEnterCritical+0x58>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	2b01      	cmp	r3, #1
 80162fe:	d10f      	bne.n	8016320 <vPortEnterCritical+0x4c>
 8016300:	4b0b      	ldr	r3, [pc, #44]	; (8016330 <vPortEnterCritical+0x5c>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	b2db      	uxtb	r3, r3
 8016306:	2b00      	cmp	r3, #0
 8016308:	d00a      	beq.n	8016320 <vPortEnterCritical+0x4c>
 801630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801630e:	f383 8811 	msr	BASEPRI, r3
 8016312:	f3bf 8f6f 	isb	sy
 8016316:	f3bf 8f4f 	dsb	sy
 801631a:	603b      	str	r3, [r7, #0]
 801631c:	bf00      	nop
 801631e:	e7fe      	b.n	801631e <vPortEnterCritical+0x4a>
 8016320:	bf00      	nop
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr
 801632c:	240000a0 	.word	0x240000a0
 8016330:	e000ed04 	.word	0xe000ed04

08016334 <vPortExitCritical>:
 8016334:	b480      	push	{r7}
 8016336:	b083      	sub	sp, #12
 8016338:	af00      	add	r7, sp, #0
 801633a:	4b12      	ldr	r3, [pc, #72]	; (8016384 <vPortExitCritical+0x50>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d10a      	bne.n	8016358 <vPortExitCritical+0x24>
 8016342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016346:	f383 8811 	msr	BASEPRI, r3
 801634a:	f3bf 8f6f 	isb	sy
 801634e:	f3bf 8f4f 	dsb	sy
 8016352:	607b      	str	r3, [r7, #4]
 8016354:	bf00      	nop
 8016356:	e7fe      	b.n	8016356 <vPortExitCritical+0x22>
 8016358:	4b0a      	ldr	r3, [pc, #40]	; (8016384 <vPortExitCritical+0x50>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	3b01      	subs	r3, #1
 801635e:	4a09      	ldr	r2, [pc, #36]	; (8016384 <vPortExitCritical+0x50>)
 8016360:	6013      	str	r3, [r2, #0]
 8016362:	4b08      	ldr	r3, [pc, #32]	; (8016384 <vPortExitCritical+0x50>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d105      	bne.n	8016376 <vPortExitCritical+0x42>
 801636a:	2300      	movs	r3, #0
 801636c:	603b      	str	r3, [r7, #0]
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	f383 8811 	msr	BASEPRI, r3
 8016374:	bf00      	nop
 8016376:	bf00      	nop
 8016378:	370c      	adds	r7, #12
 801637a:	46bd      	mov	sp, r7
 801637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016380:	4770      	bx	lr
 8016382:	bf00      	nop
 8016384:	240000a0 	.word	0x240000a0
	...

08016390 <PendSV_Handler>:
 8016390:	f3ef 8009 	mrs	r0, PSP
 8016394:	f3bf 8f6f 	isb	sy
 8016398:	4b15      	ldr	r3, [pc, #84]	; (80163f0 <pxCurrentTCBConst>)
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	f01e 0f10 	tst.w	lr, #16
 80163a0:	bf08      	it	eq
 80163a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80163a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163aa:	6010      	str	r0, [r2, #0]
 80163ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80163b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80163b4:	f380 8811 	msr	BASEPRI, r0
 80163b8:	f3bf 8f4f 	dsb	sy
 80163bc:	f3bf 8f6f 	isb	sy
 80163c0:	f7fe fee8 	bl	8015194 <vTaskSwitchContext>
 80163c4:	f04f 0000 	mov.w	r0, #0
 80163c8:	f380 8811 	msr	BASEPRI, r0
 80163cc:	bc09      	pop	{r0, r3}
 80163ce:	6819      	ldr	r1, [r3, #0]
 80163d0:	6808      	ldr	r0, [r1, #0]
 80163d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163d6:	f01e 0f10 	tst.w	lr, #16
 80163da:	bf08      	it	eq
 80163dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80163e0:	f380 8809 	msr	PSP, r0
 80163e4:	f3bf 8f6f 	isb	sy
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop
 80163ec:	f3af 8000 	nop.w

080163f0 <pxCurrentTCBConst>:
 80163f0:	2400182c 	.word	0x2400182c
 80163f4:	bf00      	nop
 80163f6:	bf00      	nop

080163f8 <xPortSysTickHandler>:
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016402:	f383 8811 	msr	BASEPRI, r3
 8016406:	f3bf 8f6f 	isb	sy
 801640a:	f3bf 8f4f 	dsb	sy
 801640e:	607b      	str	r3, [r7, #4]
 8016410:	bf00      	nop
 8016412:	f7fe fdfd 	bl	8015010 <xTaskIncrementTick>
 8016416:	4603      	mov	r3, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	d003      	beq.n	8016424 <xPortSysTickHandler+0x2c>
 801641c:	4b06      	ldr	r3, [pc, #24]	; (8016438 <xPortSysTickHandler+0x40>)
 801641e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016422:	601a      	str	r2, [r3, #0]
 8016424:	2300      	movs	r3, #0
 8016426:	603b      	str	r3, [r7, #0]
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	f383 8811 	msr	BASEPRI, r3
 801642e:	bf00      	nop
 8016430:	bf00      	nop
 8016432:	3708      	adds	r7, #8
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}
 8016438:	e000ed04 	.word	0xe000ed04

0801643c <vPortSetupTimerInterrupt>:
 801643c:	b480      	push	{r7}
 801643e:	af00      	add	r7, sp, #0
 8016440:	4b0b      	ldr	r3, [pc, #44]	; (8016470 <vPortSetupTimerInterrupt+0x34>)
 8016442:	2200      	movs	r2, #0
 8016444:	601a      	str	r2, [r3, #0]
 8016446:	4b0b      	ldr	r3, [pc, #44]	; (8016474 <vPortSetupTimerInterrupt+0x38>)
 8016448:	2200      	movs	r2, #0
 801644a:	601a      	str	r2, [r3, #0]
 801644c:	4b0a      	ldr	r3, [pc, #40]	; (8016478 <vPortSetupTimerInterrupt+0x3c>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	4a0a      	ldr	r2, [pc, #40]	; (801647c <vPortSetupTimerInterrupt+0x40>)
 8016452:	fba2 2303 	umull	r2, r3, r2, r3
 8016456:	099b      	lsrs	r3, r3, #6
 8016458:	4a09      	ldr	r2, [pc, #36]	; (8016480 <vPortSetupTimerInterrupt+0x44>)
 801645a:	3b01      	subs	r3, #1
 801645c:	6013      	str	r3, [r2, #0]
 801645e:	4b04      	ldr	r3, [pc, #16]	; (8016470 <vPortSetupTimerInterrupt+0x34>)
 8016460:	2207      	movs	r2, #7
 8016462:	601a      	str	r2, [r3, #0]
 8016464:	bf00      	nop
 8016466:	46bd      	mov	sp, r7
 8016468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	e000e010 	.word	0xe000e010
 8016474:	e000e018 	.word	0xe000e018
 8016478:	24000090 	.word	0x24000090
 801647c:	10624dd3 	.word	0x10624dd3
 8016480:	e000e014 	.word	0xe000e014

08016484 <vPortEnableVFP>:
 8016484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016494 <vPortEnableVFP+0x10>
 8016488:	6801      	ldr	r1, [r0, #0]
 801648a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801648e:	6001      	str	r1, [r0, #0]
 8016490:	4770      	bx	lr
 8016492:	bf00      	nop
 8016494:	e000ed88 	.word	0xe000ed88

08016498 <vPortValidateInterruptPriority>:
 8016498:	b480      	push	{r7}
 801649a:	b085      	sub	sp, #20
 801649c:	af00      	add	r7, sp, #0
 801649e:	f3ef 8305 	mrs	r3, IPSR
 80164a2:	60fb      	str	r3, [r7, #12]
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	2b0f      	cmp	r3, #15
 80164a8:	d914      	bls.n	80164d4 <vPortValidateInterruptPriority+0x3c>
 80164aa:	4a17      	ldr	r2, [pc, #92]	; (8016508 <vPortValidateInterruptPriority+0x70>)
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	4413      	add	r3, r2
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	72fb      	strb	r3, [r7, #11]
 80164b4:	4b15      	ldr	r3, [pc, #84]	; (801650c <vPortValidateInterruptPriority+0x74>)
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	7afa      	ldrb	r2, [r7, #11]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d20a      	bcs.n	80164d4 <vPortValidateInterruptPriority+0x3c>
 80164be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c2:	f383 8811 	msr	BASEPRI, r3
 80164c6:	f3bf 8f6f 	isb	sy
 80164ca:	f3bf 8f4f 	dsb	sy
 80164ce:	607b      	str	r3, [r7, #4]
 80164d0:	bf00      	nop
 80164d2:	e7fe      	b.n	80164d2 <vPortValidateInterruptPriority+0x3a>
 80164d4:	4b0e      	ldr	r3, [pc, #56]	; (8016510 <vPortValidateInterruptPriority+0x78>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80164dc:	4b0d      	ldr	r3, [pc, #52]	; (8016514 <vPortValidateInterruptPriority+0x7c>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d90a      	bls.n	80164fa <vPortValidateInterruptPriority+0x62>
 80164e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e8:	f383 8811 	msr	BASEPRI, r3
 80164ec:	f3bf 8f6f 	isb	sy
 80164f0:	f3bf 8f4f 	dsb	sy
 80164f4:	603b      	str	r3, [r7, #0]
 80164f6:	bf00      	nop
 80164f8:	e7fe      	b.n	80164f8 <vPortValidateInterruptPriority+0x60>
 80164fa:	bf00      	nop
 80164fc:	3714      	adds	r7, #20
 80164fe:	46bd      	mov	sp, r7
 8016500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016504:	4770      	bx	lr
 8016506:	bf00      	nop
 8016508:	e000e3f0 	.word	0xe000e3f0
 801650c:	24001e58 	.word	0x24001e58
 8016510:	e000ed0c 	.word	0xe000ed0c
 8016514:	24001e5c 	.word	0x24001e5c

08016518 <pvPortMalloc>:
 8016518:	b580      	push	{r7, lr}
 801651a:	b08a      	sub	sp, #40	; 0x28
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
 8016520:	2300      	movs	r3, #0
 8016522:	61fb      	str	r3, [r7, #28]
 8016524:	f7fe fcb8 	bl	8014e98 <vTaskSuspendAll>
 8016528:	4b5b      	ldr	r3, [pc, #364]	; (8016698 <pvPortMalloc+0x180>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d101      	bne.n	8016534 <pvPortMalloc+0x1c>
 8016530:	f000 f920 	bl	8016774 <prvHeapInit>
 8016534:	4b59      	ldr	r3, [pc, #356]	; (801669c <pvPortMalloc+0x184>)
 8016536:	681a      	ldr	r2, [r3, #0]
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	4013      	ands	r3, r2
 801653c:	2b00      	cmp	r3, #0
 801653e:	f040 8093 	bne.w	8016668 <pvPortMalloc+0x150>
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d01d      	beq.n	8016584 <pvPortMalloc+0x6c>
 8016548:	2208      	movs	r2, #8
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	4413      	add	r3, r2
 801654e:	607b      	str	r3, [r7, #4]
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f003 0307 	and.w	r3, r3, #7
 8016556:	2b00      	cmp	r3, #0
 8016558:	d014      	beq.n	8016584 <pvPortMalloc+0x6c>
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	f023 0307 	bic.w	r3, r3, #7
 8016560:	3308      	adds	r3, #8
 8016562:	607b      	str	r3, [r7, #4]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f003 0307 	and.w	r3, r3, #7
 801656a:	2b00      	cmp	r3, #0
 801656c:	d00a      	beq.n	8016584 <pvPortMalloc+0x6c>
 801656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016572:	f383 8811 	msr	BASEPRI, r3
 8016576:	f3bf 8f6f 	isb	sy
 801657a:	f3bf 8f4f 	dsb	sy
 801657e:	617b      	str	r3, [r7, #20]
 8016580:	bf00      	nop
 8016582:	e7fe      	b.n	8016582 <pvPortMalloc+0x6a>
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d06e      	beq.n	8016668 <pvPortMalloc+0x150>
 801658a:	4b45      	ldr	r3, [pc, #276]	; (80166a0 <pvPortMalloc+0x188>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	687a      	ldr	r2, [r7, #4]
 8016590:	429a      	cmp	r2, r3
 8016592:	d869      	bhi.n	8016668 <pvPortMalloc+0x150>
 8016594:	4b43      	ldr	r3, [pc, #268]	; (80166a4 <pvPortMalloc+0x18c>)
 8016596:	623b      	str	r3, [r7, #32]
 8016598:	4b42      	ldr	r3, [pc, #264]	; (80166a4 <pvPortMalloc+0x18c>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	627b      	str	r3, [r7, #36]	; 0x24
 801659e:	e004      	b.n	80165aa <pvPortMalloc+0x92>
 80165a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a2:	623b      	str	r3, [r7, #32]
 80165a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	627b      	str	r3, [r7, #36]	; 0x24
 80165aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d903      	bls.n	80165bc <pvPortMalloc+0xa4>
 80165b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d1f1      	bne.n	80165a0 <pvPortMalloc+0x88>
 80165bc:	4b36      	ldr	r3, [pc, #216]	; (8016698 <pvPortMalloc+0x180>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d050      	beq.n	8016668 <pvPortMalloc+0x150>
 80165c6:	6a3b      	ldr	r3, [r7, #32]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	2208      	movs	r2, #8
 80165cc:	4413      	add	r3, r2
 80165ce:	61fb      	str	r3, [r7, #28]
 80165d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	6a3b      	ldr	r3, [r7, #32]
 80165d6:	601a      	str	r2, [r3, #0]
 80165d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165da:	685a      	ldr	r2, [r3, #4]
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	1ad2      	subs	r2, r2, r3
 80165e0:	2308      	movs	r3, #8
 80165e2:	005b      	lsls	r3, r3, #1
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d91f      	bls.n	8016628 <pvPortMalloc+0x110>
 80165e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	4413      	add	r3, r2
 80165ee:	61bb      	str	r3, [r7, #24]
 80165f0:	69bb      	ldr	r3, [r7, #24]
 80165f2:	f003 0307 	and.w	r3, r3, #7
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d00a      	beq.n	8016610 <pvPortMalloc+0xf8>
 80165fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165fe:	f383 8811 	msr	BASEPRI, r3
 8016602:	f3bf 8f6f 	isb	sy
 8016606:	f3bf 8f4f 	dsb	sy
 801660a:	613b      	str	r3, [r7, #16]
 801660c:	bf00      	nop
 801660e:	e7fe      	b.n	801660e <pvPortMalloc+0xf6>
 8016610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016612:	685a      	ldr	r2, [r3, #4]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	1ad2      	subs	r2, r2, r3
 8016618:	69bb      	ldr	r3, [r7, #24]
 801661a:	605a      	str	r2, [r3, #4]
 801661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661e:	687a      	ldr	r2, [r7, #4]
 8016620:	605a      	str	r2, [r3, #4]
 8016622:	69b8      	ldr	r0, [r7, #24]
 8016624:	f000 f908 	bl	8016838 <prvInsertBlockIntoFreeList>
 8016628:	4b1d      	ldr	r3, [pc, #116]	; (80166a0 <pvPortMalloc+0x188>)
 801662a:	681a      	ldr	r2, [r3, #0]
 801662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662e:	685b      	ldr	r3, [r3, #4]
 8016630:	1ad3      	subs	r3, r2, r3
 8016632:	4a1b      	ldr	r2, [pc, #108]	; (80166a0 <pvPortMalloc+0x188>)
 8016634:	6013      	str	r3, [r2, #0]
 8016636:	4b1a      	ldr	r3, [pc, #104]	; (80166a0 <pvPortMalloc+0x188>)
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	4b1b      	ldr	r3, [pc, #108]	; (80166a8 <pvPortMalloc+0x190>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	429a      	cmp	r2, r3
 8016640:	d203      	bcs.n	801664a <pvPortMalloc+0x132>
 8016642:	4b17      	ldr	r3, [pc, #92]	; (80166a0 <pvPortMalloc+0x188>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	4a18      	ldr	r2, [pc, #96]	; (80166a8 <pvPortMalloc+0x190>)
 8016648:	6013      	str	r3, [r2, #0]
 801664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801664c:	685a      	ldr	r2, [r3, #4]
 801664e:	4b13      	ldr	r3, [pc, #76]	; (801669c <pvPortMalloc+0x184>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	431a      	orrs	r2, r3
 8016654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016656:	605a      	str	r2, [r3, #4]
 8016658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665a:	2200      	movs	r2, #0
 801665c:	601a      	str	r2, [r3, #0]
 801665e:	4b13      	ldr	r3, [pc, #76]	; (80166ac <pvPortMalloc+0x194>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	3301      	adds	r3, #1
 8016664:	4a11      	ldr	r2, [pc, #68]	; (80166ac <pvPortMalloc+0x194>)
 8016666:	6013      	str	r3, [r2, #0]
 8016668:	f7fe fc24 	bl	8014eb4 <xTaskResumeAll>
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	f003 0307 	and.w	r3, r3, #7
 8016672:	2b00      	cmp	r3, #0
 8016674:	d00a      	beq.n	801668c <pvPortMalloc+0x174>
 8016676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667a:	f383 8811 	msr	BASEPRI, r3
 801667e:	f3bf 8f6f 	isb	sy
 8016682:	f3bf 8f4f 	dsb	sy
 8016686:	60fb      	str	r3, [r7, #12]
 8016688:	bf00      	nop
 801668a:	e7fe      	b.n	801668a <pvPortMalloc+0x172>
 801668c:	69fb      	ldr	r3, [r7, #28]
 801668e:	4618      	mov	r0, r3
 8016690:	3728      	adds	r7, #40	; 0x28
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	24005a68 	.word	0x24005a68
 801669c:	24005a7c 	.word	0x24005a7c
 80166a0:	24005a6c 	.word	0x24005a6c
 80166a4:	24005a60 	.word	0x24005a60
 80166a8:	24005a70 	.word	0x24005a70
 80166ac:	24005a74 	.word	0x24005a74

080166b0 <vPortFree>:
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b086      	sub	sp, #24
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	617b      	str	r3, [r7, #20]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d04d      	beq.n	801675e <vPortFree+0xae>
 80166c2:	2308      	movs	r3, #8
 80166c4:	425b      	negs	r3, r3
 80166c6:	697a      	ldr	r2, [r7, #20]
 80166c8:	4413      	add	r3, r2
 80166ca:	617b      	str	r3, [r7, #20]
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	613b      	str	r3, [r7, #16]
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	685a      	ldr	r2, [r3, #4]
 80166d4:	4b24      	ldr	r3, [pc, #144]	; (8016768 <vPortFree+0xb8>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4013      	ands	r3, r2
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d10a      	bne.n	80166f4 <vPortFree+0x44>
 80166de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e2:	f383 8811 	msr	BASEPRI, r3
 80166e6:	f3bf 8f6f 	isb	sy
 80166ea:	f3bf 8f4f 	dsb	sy
 80166ee:	60fb      	str	r3, [r7, #12]
 80166f0:	bf00      	nop
 80166f2:	e7fe      	b.n	80166f2 <vPortFree+0x42>
 80166f4:	693b      	ldr	r3, [r7, #16]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d00a      	beq.n	8016712 <vPortFree+0x62>
 80166fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016700:	f383 8811 	msr	BASEPRI, r3
 8016704:	f3bf 8f6f 	isb	sy
 8016708:	f3bf 8f4f 	dsb	sy
 801670c:	60bb      	str	r3, [r7, #8]
 801670e:	bf00      	nop
 8016710:	e7fe      	b.n	8016710 <vPortFree+0x60>
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	685a      	ldr	r2, [r3, #4]
 8016716:	4b14      	ldr	r3, [pc, #80]	; (8016768 <vPortFree+0xb8>)
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	4013      	ands	r3, r2
 801671c:	2b00      	cmp	r3, #0
 801671e:	d01e      	beq.n	801675e <vPortFree+0xae>
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d11a      	bne.n	801675e <vPortFree+0xae>
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	685a      	ldr	r2, [r3, #4]
 801672c:	4b0e      	ldr	r3, [pc, #56]	; (8016768 <vPortFree+0xb8>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	43db      	mvns	r3, r3
 8016732:	401a      	ands	r2, r3
 8016734:	693b      	ldr	r3, [r7, #16]
 8016736:	605a      	str	r2, [r3, #4]
 8016738:	f7fe fbae 	bl	8014e98 <vTaskSuspendAll>
 801673c:	693b      	ldr	r3, [r7, #16]
 801673e:	685a      	ldr	r2, [r3, #4]
 8016740:	4b0a      	ldr	r3, [pc, #40]	; (801676c <vPortFree+0xbc>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	4413      	add	r3, r2
 8016746:	4a09      	ldr	r2, [pc, #36]	; (801676c <vPortFree+0xbc>)
 8016748:	6013      	str	r3, [r2, #0]
 801674a:	6938      	ldr	r0, [r7, #16]
 801674c:	f000 f874 	bl	8016838 <prvInsertBlockIntoFreeList>
 8016750:	4b07      	ldr	r3, [pc, #28]	; (8016770 <vPortFree+0xc0>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	3301      	adds	r3, #1
 8016756:	4a06      	ldr	r2, [pc, #24]	; (8016770 <vPortFree+0xc0>)
 8016758:	6013      	str	r3, [r2, #0]
 801675a:	f7fe fbab 	bl	8014eb4 <xTaskResumeAll>
 801675e:	bf00      	nop
 8016760:	3718      	adds	r7, #24
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	24005a7c 	.word	0x24005a7c
 801676c:	24005a6c 	.word	0x24005a6c
 8016770:	24005a78 	.word	0x24005a78

08016774 <prvHeapInit>:
 8016774:	b480      	push	{r7}
 8016776:	b085      	sub	sp, #20
 8016778:	af00      	add	r7, sp, #0
 801677a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801677e:	60bb      	str	r3, [r7, #8]
 8016780:	4b27      	ldr	r3, [pc, #156]	; (8016820 <prvHeapInit+0xac>)
 8016782:	60fb      	str	r3, [r7, #12]
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f003 0307 	and.w	r3, r3, #7
 801678a:	2b00      	cmp	r3, #0
 801678c:	d00c      	beq.n	80167a8 <prvHeapInit+0x34>
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	3307      	adds	r3, #7
 8016792:	60fb      	str	r3, [r7, #12]
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f023 0307 	bic.w	r3, r3, #7
 801679a:	60fb      	str	r3, [r7, #12]
 801679c:	68ba      	ldr	r2, [r7, #8]
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	1ad3      	subs	r3, r2, r3
 80167a2:	4a1f      	ldr	r2, [pc, #124]	; (8016820 <prvHeapInit+0xac>)
 80167a4:	4413      	add	r3, r2
 80167a6:	60bb      	str	r3, [r7, #8]
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	607b      	str	r3, [r7, #4]
 80167ac:	4a1d      	ldr	r2, [pc, #116]	; (8016824 <prvHeapInit+0xb0>)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6013      	str	r3, [r2, #0]
 80167b2:	4b1c      	ldr	r3, [pc, #112]	; (8016824 <prvHeapInit+0xb0>)
 80167b4:	2200      	movs	r2, #0
 80167b6:	605a      	str	r2, [r3, #4]
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	68ba      	ldr	r2, [r7, #8]
 80167bc:	4413      	add	r3, r2
 80167be:	60fb      	str	r3, [r7, #12]
 80167c0:	2208      	movs	r2, #8
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	1a9b      	subs	r3, r3, r2
 80167c6:	60fb      	str	r3, [r7, #12]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	f023 0307 	bic.w	r3, r3, #7
 80167ce:	60fb      	str	r3, [r7, #12]
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	4a15      	ldr	r2, [pc, #84]	; (8016828 <prvHeapInit+0xb4>)
 80167d4:	6013      	str	r3, [r2, #0]
 80167d6:	4b14      	ldr	r3, [pc, #80]	; (8016828 <prvHeapInit+0xb4>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	2200      	movs	r2, #0
 80167dc:	605a      	str	r2, [r3, #4]
 80167de:	4b12      	ldr	r3, [pc, #72]	; (8016828 <prvHeapInit+0xb4>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2200      	movs	r2, #0
 80167e4:	601a      	str	r2, [r3, #0]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	603b      	str	r3, [r7, #0]
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	68fa      	ldr	r2, [r7, #12]
 80167ee:	1ad2      	subs	r2, r2, r3
 80167f0:	683b      	ldr	r3, [r7, #0]
 80167f2:	605a      	str	r2, [r3, #4]
 80167f4:	4b0c      	ldr	r3, [pc, #48]	; (8016828 <prvHeapInit+0xb4>)
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	601a      	str	r2, [r3, #0]
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	685b      	ldr	r3, [r3, #4]
 8016800:	4a0a      	ldr	r2, [pc, #40]	; (801682c <prvHeapInit+0xb8>)
 8016802:	6013      	str	r3, [r2, #0]
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	4a09      	ldr	r2, [pc, #36]	; (8016830 <prvHeapInit+0xbc>)
 801680a:	6013      	str	r3, [r2, #0]
 801680c:	4b09      	ldr	r3, [pc, #36]	; (8016834 <prvHeapInit+0xc0>)
 801680e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016812:	601a      	str	r2, [r3, #0]
 8016814:	bf00      	nop
 8016816:	3714      	adds	r7, #20
 8016818:	46bd      	mov	sp, r7
 801681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681e:	4770      	bx	lr
 8016820:	24001e60 	.word	0x24001e60
 8016824:	24005a60 	.word	0x24005a60
 8016828:	24005a68 	.word	0x24005a68
 801682c:	24005a70 	.word	0x24005a70
 8016830:	24005a6c 	.word	0x24005a6c
 8016834:	24005a7c 	.word	0x24005a7c

08016838 <prvInsertBlockIntoFreeList>:
 8016838:	b480      	push	{r7}
 801683a:	b085      	sub	sp, #20
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	4b28      	ldr	r3, [pc, #160]	; (80168e4 <prvInsertBlockIntoFreeList+0xac>)
 8016842:	60fb      	str	r3, [r7, #12]
 8016844:	e002      	b.n	801684c <prvInsertBlockIntoFreeList+0x14>
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	60fb      	str	r3, [r7, #12]
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	687a      	ldr	r2, [r7, #4]
 8016852:	429a      	cmp	r2, r3
 8016854:	d8f7      	bhi.n	8016846 <prvInsertBlockIntoFreeList+0xe>
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	60bb      	str	r3, [r7, #8]
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	685b      	ldr	r3, [r3, #4]
 801685e:	68ba      	ldr	r2, [r7, #8]
 8016860:	4413      	add	r3, r2
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	429a      	cmp	r2, r3
 8016866:	d108      	bne.n	801687a <prvInsertBlockIntoFreeList+0x42>
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	685a      	ldr	r2, [r3, #4]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	441a      	add	r2, r3
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	605a      	str	r2, [r3, #4]
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	607b      	str	r3, [r7, #4]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	60bb      	str	r3, [r7, #8]
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	68ba      	ldr	r2, [r7, #8]
 8016884:	441a      	add	r2, r3
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	429a      	cmp	r2, r3
 801688c:	d118      	bne.n	80168c0 <prvInsertBlockIntoFreeList+0x88>
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681a      	ldr	r2, [r3, #0]
 8016892:	4b15      	ldr	r3, [pc, #84]	; (80168e8 <prvInsertBlockIntoFreeList+0xb0>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	429a      	cmp	r2, r3
 8016898:	d00d      	beq.n	80168b6 <prvInsertBlockIntoFreeList+0x7e>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	685a      	ldr	r2, [r3, #4]
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	441a      	add	r2, r3
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	605a      	str	r2, [r3, #4]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	681a      	ldr	r2, [r3, #0]
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	601a      	str	r2, [r3, #0]
 80168b4:	e008      	b.n	80168c8 <prvInsertBlockIntoFreeList+0x90>
 80168b6:	4b0c      	ldr	r3, [pc, #48]	; (80168e8 <prvInsertBlockIntoFreeList+0xb0>)
 80168b8:	681a      	ldr	r2, [r3, #0]
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	601a      	str	r2, [r3, #0]
 80168be:	e003      	b.n	80168c8 <prvInsertBlockIntoFreeList+0x90>
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	681a      	ldr	r2, [r3, #0]
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	601a      	str	r2, [r3, #0]
 80168c8:	68fa      	ldr	r2, [r7, #12]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d002      	beq.n	80168d6 <prvInsertBlockIntoFreeList+0x9e>
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	687a      	ldr	r2, [r7, #4]
 80168d4:	601a      	str	r2, [r3, #0]
 80168d6:	bf00      	nop
 80168d8:	3714      	adds	r7, #20
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop
 80168e4:	24005a60 	.word	0x24005a60
 80168e8:	24005a68 	.word	0x24005a68

080168ec <__errno>:
 80168ec:	4b01      	ldr	r3, [pc, #4]	; (80168f4 <__errno+0x8>)
 80168ee:	6818      	ldr	r0, [r3, #0]
 80168f0:	4770      	bx	lr
 80168f2:	bf00      	nop
 80168f4:	240000a4 	.word	0x240000a4

080168f8 <__libc_init_array>:
 80168f8:	b570      	push	{r4, r5, r6, lr}
 80168fa:	4d0d      	ldr	r5, [pc, #52]	; (8016930 <__libc_init_array+0x38>)
 80168fc:	4c0d      	ldr	r4, [pc, #52]	; (8016934 <__libc_init_array+0x3c>)
 80168fe:	1b64      	subs	r4, r4, r5
 8016900:	10a4      	asrs	r4, r4, #2
 8016902:	2600      	movs	r6, #0
 8016904:	42a6      	cmp	r6, r4
 8016906:	d109      	bne.n	801691c <__libc_init_array+0x24>
 8016908:	4d0b      	ldr	r5, [pc, #44]	; (8016938 <__libc_init_array+0x40>)
 801690a:	4c0c      	ldr	r4, [pc, #48]	; (801693c <__libc_init_array+0x44>)
 801690c:	f000 fd3c 	bl	8017388 <_init>
 8016910:	1b64      	subs	r4, r4, r5
 8016912:	10a4      	asrs	r4, r4, #2
 8016914:	2600      	movs	r6, #0
 8016916:	42a6      	cmp	r6, r4
 8016918:	d105      	bne.n	8016926 <__libc_init_array+0x2e>
 801691a:	bd70      	pop	{r4, r5, r6, pc}
 801691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016920:	4798      	blx	r3
 8016922:	3601      	adds	r6, #1
 8016924:	e7ee      	b.n	8016904 <__libc_init_array+0xc>
 8016926:	f855 3b04 	ldr.w	r3, [r5], #4
 801692a:	4798      	blx	r3
 801692c:	3601      	adds	r6, #1
 801692e:	e7f2      	b.n	8016916 <__libc_init_array+0x1e>
 8016930:	080177dc 	.word	0x080177dc
 8016934:	080177dc 	.word	0x080177dc
 8016938:	080177dc 	.word	0x080177dc
 801693c:	080177e0 	.word	0x080177e0

08016940 <malloc>:
 8016940:	4b02      	ldr	r3, [pc, #8]	; (801694c <malloc+0xc>)
 8016942:	4601      	mov	r1, r0
 8016944:	6818      	ldr	r0, [r3, #0]
 8016946:	f000 b88d 	b.w	8016a64 <_malloc_r>
 801694a:	bf00      	nop
 801694c:	240000a4 	.word	0x240000a4

08016950 <free>:
 8016950:	4b02      	ldr	r3, [pc, #8]	; (801695c <free+0xc>)
 8016952:	4601      	mov	r1, r0
 8016954:	6818      	ldr	r0, [r3, #0]
 8016956:	f000 b819 	b.w	801698c <_free_r>
 801695a:	bf00      	nop
 801695c:	240000a4 	.word	0x240000a4

08016960 <memcpy>:
 8016960:	440a      	add	r2, r1
 8016962:	4291      	cmp	r1, r2
 8016964:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016968:	d100      	bne.n	801696c <memcpy+0xc>
 801696a:	4770      	bx	lr
 801696c:	b510      	push	{r4, lr}
 801696e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016976:	4291      	cmp	r1, r2
 8016978:	d1f9      	bne.n	801696e <memcpy+0xe>
 801697a:	bd10      	pop	{r4, pc}

0801697c <memset>:
 801697c:	4402      	add	r2, r0
 801697e:	4603      	mov	r3, r0
 8016980:	4293      	cmp	r3, r2
 8016982:	d100      	bne.n	8016986 <memset+0xa>
 8016984:	4770      	bx	lr
 8016986:	f803 1b01 	strb.w	r1, [r3], #1
 801698a:	e7f9      	b.n	8016980 <memset+0x4>

0801698c <_free_r>:
 801698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801698e:	2900      	cmp	r1, #0
 8016990:	d044      	beq.n	8016a1c <_free_r+0x90>
 8016992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016996:	9001      	str	r0, [sp, #4]
 8016998:	2b00      	cmp	r3, #0
 801699a:	f1a1 0404 	sub.w	r4, r1, #4
 801699e:	bfb8      	it	lt
 80169a0:	18e4      	addlt	r4, r4, r3
 80169a2:	f000 fc39 	bl	8017218 <__malloc_lock>
 80169a6:	4a1e      	ldr	r2, [pc, #120]	; (8016a20 <_free_r+0x94>)
 80169a8:	9801      	ldr	r0, [sp, #4]
 80169aa:	6813      	ldr	r3, [r2, #0]
 80169ac:	b933      	cbnz	r3, 80169bc <_free_r+0x30>
 80169ae:	6063      	str	r3, [r4, #4]
 80169b0:	6014      	str	r4, [r2, #0]
 80169b2:	b003      	add	sp, #12
 80169b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80169b8:	f000 bc34 	b.w	8017224 <__malloc_unlock>
 80169bc:	42a3      	cmp	r3, r4
 80169be:	d908      	bls.n	80169d2 <_free_r+0x46>
 80169c0:	6825      	ldr	r5, [r4, #0]
 80169c2:	1961      	adds	r1, r4, r5
 80169c4:	428b      	cmp	r3, r1
 80169c6:	bf01      	itttt	eq
 80169c8:	6819      	ldreq	r1, [r3, #0]
 80169ca:	685b      	ldreq	r3, [r3, #4]
 80169cc:	1949      	addeq	r1, r1, r5
 80169ce:	6021      	streq	r1, [r4, #0]
 80169d0:	e7ed      	b.n	80169ae <_free_r+0x22>
 80169d2:	461a      	mov	r2, r3
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	b10b      	cbz	r3, 80169dc <_free_r+0x50>
 80169d8:	42a3      	cmp	r3, r4
 80169da:	d9fa      	bls.n	80169d2 <_free_r+0x46>
 80169dc:	6811      	ldr	r1, [r2, #0]
 80169de:	1855      	adds	r5, r2, r1
 80169e0:	42a5      	cmp	r5, r4
 80169e2:	d10b      	bne.n	80169fc <_free_r+0x70>
 80169e4:	6824      	ldr	r4, [r4, #0]
 80169e6:	4421      	add	r1, r4
 80169e8:	1854      	adds	r4, r2, r1
 80169ea:	42a3      	cmp	r3, r4
 80169ec:	6011      	str	r1, [r2, #0]
 80169ee:	d1e0      	bne.n	80169b2 <_free_r+0x26>
 80169f0:	681c      	ldr	r4, [r3, #0]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	6053      	str	r3, [r2, #4]
 80169f6:	4421      	add	r1, r4
 80169f8:	6011      	str	r1, [r2, #0]
 80169fa:	e7da      	b.n	80169b2 <_free_r+0x26>
 80169fc:	d902      	bls.n	8016a04 <_free_r+0x78>
 80169fe:	230c      	movs	r3, #12
 8016a00:	6003      	str	r3, [r0, #0]
 8016a02:	e7d6      	b.n	80169b2 <_free_r+0x26>
 8016a04:	6825      	ldr	r5, [r4, #0]
 8016a06:	1961      	adds	r1, r4, r5
 8016a08:	428b      	cmp	r3, r1
 8016a0a:	bf04      	itt	eq
 8016a0c:	6819      	ldreq	r1, [r3, #0]
 8016a0e:	685b      	ldreq	r3, [r3, #4]
 8016a10:	6063      	str	r3, [r4, #4]
 8016a12:	bf04      	itt	eq
 8016a14:	1949      	addeq	r1, r1, r5
 8016a16:	6021      	streq	r1, [r4, #0]
 8016a18:	6054      	str	r4, [r2, #4]
 8016a1a:	e7ca      	b.n	80169b2 <_free_r+0x26>
 8016a1c:	b003      	add	sp, #12
 8016a1e:	bd30      	pop	{r4, r5, pc}
 8016a20:	24005a80 	.word	0x24005a80

08016a24 <sbrk_aligned>:
 8016a24:	b570      	push	{r4, r5, r6, lr}
 8016a26:	4e0e      	ldr	r6, [pc, #56]	; (8016a60 <sbrk_aligned+0x3c>)
 8016a28:	460c      	mov	r4, r1
 8016a2a:	6831      	ldr	r1, [r6, #0]
 8016a2c:	4605      	mov	r5, r0
 8016a2e:	b911      	cbnz	r1, 8016a36 <sbrk_aligned+0x12>
 8016a30:	f000 f902 	bl	8016c38 <_sbrk_r>
 8016a34:	6030      	str	r0, [r6, #0]
 8016a36:	4621      	mov	r1, r4
 8016a38:	4628      	mov	r0, r5
 8016a3a:	f000 f8fd 	bl	8016c38 <_sbrk_r>
 8016a3e:	1c43      	adds	r3, r0, #1
 8016a40:	d00a      	beq.n	8016a58 <sbrk_aligned+0x34>
 8016a42:	1cc4      	adds	r4, r0, #3
 8016a44:	f024 0403 	bic.w	r4, r4, #3
 8016a48:	42a0      	cmp	r0, r4
 8016a4a:	d007      	beq.n	8016a5c <sbrk_aligned+0x38>
 8016a4c:	1a21      	subs	r1, r4, r0
 8016a4e:	4628      	mov	r0, r5
 8016a50:	f000 f8f2 	bl	8016c38 <_sbrk_r>
 8016a54:	3001      	adds	r0, #1
 8016a56:	d101      	bne.n	8016a5c <sbrk_aligned+0x38>
 8016a58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	bd70      	pop	{r4, r5, r6, pc}
 8016a60:	24005a84 	.word	0x24005a84

08016a64 <_malloc_r>:
 8016a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a68:	1ccd      	adds	r5, r1, #3
 8016a6a:	f025 0503 	bic.w	r5, r5, #3
 8016a6e:	3508      	adds	r5, #8
 8016a70:	2d0c      	cmp	r5, #12
 8016a72:	bf38      	it	cc
 8016a74:	250c      	movcc	r5, #12
 8016a76:	2d00      	cmp	r5, #0
 8016a78:	4607      	mov	r7, r0
 8016a7a:	db01      	blt.n	8016a80 <_malloc_r+0x1c>
 8016a7c:	42a9      	cmp	r1, r5
 8016a7e:	d905      	bls.n	8016a8c <_malloc_r+0x28>
 8016a80:	230c      	movs	r3, #12
 8016a82:	603b      	str	r3, [r7, #0]
 8016a84:	2600      	movs	r6, #0
 8016a86:	4630      	mov	r0, r6
 8016a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a8c:	4e2e      	ldr	r6, [pc, #184]	; (8016b48 <_malloc_r+0xe4>)
 8016a8e:	f000 fbc3 	bl	8017218 <__malloc_lock>
 8016a92:	6833      	ldr	r3, [r6, #0]
 8016a94:	461c      	mov	r4, r3
 8016a96:	bb34      	cbnz	r4, 8016ae6 <_malloc_r+0x82>
 8016a98:	4629      	mov	r1, r5
 8016a9a:	4638      	mov	r0, r7
 8016a9c:	f7ff ffc2 	bl	8016a24 <sbrk_aligned>
 8016aa0:	1c43      	adds	r3, r0, #1
 8016aa2:	4604      	mov	r4, r0
 8016aa4:	d14d      	bne.n	8016b42 <_malloc_r+0xde>
 8016aa6:	6834      	ldr	r4, [r6, #0]
 8016aa8:	4626      	mov	r6, r4
 8016aaa:	2e00      	cmp	r6, #0
 8016aac:	d140      	bne.n	8016b30 <_malloc_r+0xcc>
 8016aae:	6823      	ldr	r3, [r4, #0]
 8016ab0:	4631      	mov	r1, r6
 8016ab2:	4638      	mov	r0, r7
 8016ab4:	eb04 0803 	add.w	r8, r4, r3
 8016ab8:	f000 f8be 	bl	8016c38 <_sbrk_r>
 8016abc:	4580      	cmp	r8, r0
 8016abe:	d13a      	bne.n	8016b36 <_malloc_r+0xd2>
 8016ac0:	6821      	ldr	r1, [r4, #0]
 8016ac2:	3503      	adds	r5, #3
 8016ac4:	1a6d      	subs	r5, r5, r1
 8016ac6:	f025 0503 	bic.w	r5, r5, #3
 8016aca:	3508      	adds	r5, #8
 8016acc:	2d0c      	cmp	r5, #12
 8016ace:	bf38      	it	cc
 8016ad0:	250c      	movcc	r5, #12
 8016ad2:	4629      	mov	r1, r5
 8016ad4:	4638      	mov	r0, r7
 8016ad6:	f7ff ffa5 	bl	8016a24 <sbrk_aligned>
 8016ada:	3001      	adds	r0, #1
 8016adc:	d02b      	beq.n	8016b36 <_malloc_r+0xd2>
 8016ade:	6823      	ldr	r3, [r4, #0]
 8016ae0:	442b      	add	r3, r5
 8016ae2:	6023      	str	r3, [r4, #0]
 8016ae4:	e00e      	b.n	8016b04 <_malloc_r+0xa0>
 8016ae6:	6822      	ldr	r2, [r4, #0]
 8016ae8:	1b52      	subs	r2, r2, r5
 8016aea:	d41e      	bmi.n	8016b2a <_malloc_r+0xc6>
 8016aec:	2a0b      	cmp	r2, #11
 8016aee:	d916      	bls.n	8016b1e <_malloc_r+0xba>
 8016af0:	1961      	adds	r1, r4, r5
 8016af2:	42a3      	cmp	r3, r4
 8016af4:	6025      	str	r5, [r4, #0]
 8016af6:	bf18      	it	ne
 8016af8:	6059      	strne	r1, [r3, #4]
 8016afa:	6863      	ldr	r3, [r4, #4]
 8016afc:	bf08      	it	eq
 8016afe:	6031      	streq	r1, [r6, #0]
 8016b00:	5162      	str	r2, [r4, r5]
 8016b02:	604b      	str	r3, [r1, #4]
 8016b04:	4638      	mov	r0, r7
 8016b06:	f104 060b 	add.w	r6, r4, #11
 8016b0a:	f000 fb8b 	bl	8017224 <__malloc_unlock>
 8016b0e:	f026 0607 	bic.w	r6, r6, #7
 8016b12:	1d23      	adds	r3, r4, #4
 8016b14:	1af2      	subs	r2, r6, r3
 8016b16:	d0b6      	beq.n	8016a86 <_malloc_r+0x22>
 8016b18:	1b9b      	subs	r3, r3, r6
 8016b1a:	50a3      	str	r3, [r4, r2]
 8016b1c:	e7b3      	b.n	8016a86 <_malloc_r+0x22>
 8016b1e:	6862      	ldr	r2, [r4, #4]
 8016b20:	42a3      	cmp	r3, r4
 8016b22:	bf0c      	ite	eq
 8016b24:	6032      	streq	r2, [r6, #0]
 8016b26:	605a      	strne	r2, [r3, #4]
 8016b28:	e7ec      	b.n	8016b04 <_malloc_r+0xa0>
 8016b2a:	4623      	mov	r3, r4
 8016b2c:	6864      	ldr	r4, [r4, #4]
 8016b2e:	e7b2      	b.n	8016a96 <_malloc_r+0x32>
 8016b30:	4634      	mov	r4, r6
 8016b32:	6876      	ldr	r6, [r6, #4]
 8016b34:	e7b9      	b.n	8016aaa <_malloc_r+0x46>
 8016b36:	230c      	movs	r3, #12
 8016b38:	603b      	str	r3, [r7, #0]
 8016b3a:	4638      	mov	r0, r7
 8016b3c:	f000 fb72 	bl	8017224 <__malloc_unlock>
 8016b40:	e7a1      	b.n	8016a86 <_malloc_r+0x22>
 8016b42:	6025      	str	r5, [r4, #0]
 8016b44:	e7de      	b.n	8016b04 <_malloc_r+0xa0>
 8016b46:	bf00      	nop
 8016b48:	24005a80 	.word	0x24005a80

08016b4c <_puts_r>:
 8016b4c:	b570      	push	{r4, r5, r6, lr}
 8016b4e:	460e      	mov	r6, r1
 8016b50:	4605      	mov	r5, r0
 8016b52:	b118      	cbz	r0, 8016b5c <_puts_r+0x10>
 8016b54:	6983      	ldr	r3, [r0, #24]
 8016b56:	b90b      	cbnz	r3, 8016b5c <_puts_r+0x10>
 8016b58:	f000 fa58 	bl	801700c <__sinit>
 8016b5c:	69ab      	ldr	r3, [r5, #24]
 8016b5e:	68ac      	ldr	r4, [r5, #8]
 8016b60:	b913      	cbnz	r3, 8016b68 <_puts_r+0x1c>
 8016b62:	4628      	mov	r0, r5
 8016b64:	f000 fa52 	bl	801700c <__sinit>
 8016b68:	4b2c      	ldr	r3, [pc, #176]	; (8016c1c <_puts_r+0xd0>)
 8016b6a:	429c      	cmp	r4, r3
 8016b6c:	d120      	bne.n	8016bb0 <_puts_r+0x64>
 8016b6e:	686c      	ldr	r4, [r5, #4]
 8016b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b72:	07db      	lsls	r3, r3, #31
 8016b74:	d405      	bmi.n	8016b82 <_puts_r+0x36>
 8016b76:	89a3      	ldrh	r3, [r4, #12]
 8016b78:	0598      	lsls	r0, r3, #22
 8016b7a:	d402      	bmi.n	8016b82 <_puts_r+0x36>
 8016b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b7e:	f000 fae3 	bl	8017148 <__retarget_lock_acquire_recursive>
 8016b82:	89a3      	ldrh	r3, [r4, #12]
 8016b84:	0719      	lsls	r1, r3, #28
 8016b86:	d51d      	bpl.n	8016bc4 <_puts_r+0x78>
 8016b88:	6923      	ldr	r3, [r4, #16]
 8016b8a:	b1db      	cbz	r3, 8016bc4 <_puts_r+0x78>
 8016b8c:	3e01      	subs	r6, #1
 8016b8e:	68a3      	ldr	r3, [r4, #8]
 8016b90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016b94:	3b01      	subs	r3, #1
 8016b96:	60a3      	str	r3, [r4, #8]
 8016b98:	bb39      	cbnz	r1, 8016bea <_puts_r+0x9e>
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	da38      	bge.n	8016c10 <_puts_r+0xc4>
 8016b9e:	4622      	mov	r2, r4
 8016ba0:	210a      	movs	r1, #10
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	f000 f858 	bl	8016c58 <__swbuf_r>
 8016ba8:	3001      	adds	r0, #1
 8016baa:	d011      	beq.n	8016bd0 <_puts_r+0x84>
 8016bac:	250a      	movs	r5, #10
 8016bae:	e011      	b.n	8016bd4 <_puts_r+0x88>
 8016bb0:	4b1b      	ldr	r3, [pc, #108]	; (8016c20 <_puts_r+0xd4>)
 8016bb2:	429c      	cmp	r4, r3
 8016bb4:	d101      	bne.n	8016bba <_puts_r+0x6e>
 8016bb6:	68ac      	ldr	r4, [r5, #8]
 8016bb8:	e7da      	b.n	8016b70 <_puts_r+0x24>
 8016bba:	4b1a      	ldr	r3, [pc, #104]	; (8016c24 <_puts_r+0xd8>)
 8016bbc:	429c      	cmp	r4, r3
 8016bbe:	bf08      	it	eq
 8016bc0:	68ec      	ldreq	r4, [r5, #12]
 8016bc2:	e7d5      	b.n	8016b70 <_puts_r+0x24>
 8016bc4:	4621      	mov	r1, r4
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	f000 f898 	bl	8016cfc <__swsetup_r>
 8016bcc:	2800      	cmp	r0, #0
 8016bce:	d0dd      	beq.n	8016b8c <_puts_r+0x40>
 8016bd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bd6:	07da      	lsls	r2, r3, #31
 8016bd8:	d405      	bmi.n	8016be6 <_puts_r+0x9a>
 8016bda:	89a3      	ldrh	r3, [r4, #12]
 8016bdc:	059b      	lsls	r3, r3, #22
 8016bde:	d402      	bmi.n	8016be6 <_puts_r+0x9a>
 8016be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016be2:	f000 fab2 	bl	801714a <__retarget_lock_release_recursive>
 8016be6:	4628      	mov	r0, r5
 8016be8:	bd70      	pop	{r4, r5, r6, pc}
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	da04      	bge.n	8016bf8 <_puts_r+0xac>
 8016bee:	69a2      	ldr	r2, [r4, #24]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	dc06      	bgt.n	8016c02 <_puts_r+0xb6>
 8016bf4:	290a      	cmp	r1, #10
 8016bf6:	d004      	beq.n	8016c02 <_puts_r+0xb6>
 8016bf8:	6823      	ldr	r3, [r4, #0]
 8016bfa:	1c5a      	adds	r2, r3, #1
 8016bfc:	6022      	str	r2, [r4, #0]
 8016bfe:	7019      	strb	r1, [r3, #0]
 8016c00:	e7c5      	b.n	8016b8e <_puts_r+0x42>
 8016c02:	4622      	mov	r2, r4
 8016c04:	4628      	mov	r0, r5
 8016c06:	f000 f827 	bl	8016c58 <__swbuf_r>
 8016c0a:	3001      	adds	r0, #1
 8016c0c:	d1bf      	bne.n	8016b8e <_puts_r+0x42>
 8016c0e:	e7df      	b.n	8016bd0 <_puts_r+0x84>
 8016c10:	6823      	ldr	r3, [r4, #0]
 8016c12:	250a      	movs	r5, #10
 8016c14:	1c5a      	adds	r2, r3, #1
 8016c16:	6022      	str	r2, [r4, #0]
 8016c18:	701d      	strb	r5, [r3, #0]
 8016c1a:	e7db      	b.n	8016bd4 <_puts_r+0x88>
 8016c1c:	08017794 	.word	0x08017794
 8016c20:	080177b4 	.word	0x080177b4
 8016c24:	08017774 	.word	0x08017774

08016c28 <puts>:
 8016c28:	4b02      	ldr	r3, [pc, #8]	; (8016c34 <puts+0xc>)
 8016c2a:	4601      	mov	r1, r0
 8016c2c:	6818      	ldr	r0, [r3, #0]
 8016c2e:	f7ff bf8d 	b.w	8016b4c <_puts_r>
 8016c32:	bf00      	nop
 8016c34:	240000a4 	.word	0x240000a4

08016c38 <_sbrk_r>:
 8016c38:	b538      	push	{r3, r4, r5, lr}
 8016c3a:	4d06      	ldr	r5, [pc, #24]	; (8016c54 <_sbrk_r+0x1c>)
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	4604      	mov	r4, r0
 8016c40:	4608      	mov	r0, r1
 8016c42:	602b      	str	r3, [r5, #0]
 8016c44:	f7ec ffcc 	bl	8003be0 <_sbrk>
 8016c48:	1c43      	adds	r3, r0, #1
 8016c4a:	d102      	bne.n	8016c52 <_sbrk_r+0x1a>
 8016c4c:	682b      	ldr	r3, [r5, #0]
 8016c4e:	b103      	cbz	r3, 8016c52 <_sbrk_r+0x1a>
 8016c50:	6023      	str	r3, [r4, #0]
 8016c52:	bd38      	pop	{r3, r4, r5, pc}
 8016c54:	24005a8c 	.word	0x24005a8c

08016c58 <__swbuf_r>:
 8016c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c5a:	460e      	mov	r6, r1
 8016c5c:	4614      	mov	r4, r2
 8016c5e:	4605      	mov	r5, r0
 8016c60:	b118      	cbz	r0, 8016c6a <__swbuf_r+0x12>
 8016c62:	6983      	ldr	r3, [r0, #24]
 8016c64:	b90b      	cbnz	r3, 8016c6a <__swbuf_r+0x12>
 8016c66:	f000 f9d1 	bl	801700c <__sinit>
 8016c6a:	4b21      	ldr	r3, [pc, #132]	; (8016cf0 <__swbuf_r+0x98>)
 8016c6c:	429c      	cmp	r4, r3
 8016c6e:	d12b      	bne.n	8016cc8 <__swbuf_r+0x70>
 8016c70:	686c      	ldr	r4, [r5, #4]
 8016c72:	69a3      	ldr	r3, [r4, #24]
 8016c74:	60a3      	str	r3, [r4, #8]
 8016c76:	89a3      	ldrh	r3, [r4, #12]
 8016c78:	071a      	lsls	r2, r3, #28
 8016c7a:	d52f      	bpl.n	8016cdc <__swbuf_r+0x84>
 8016c7c:	6923      	ldr	r3, [r4, #16]
 8016c7e:	b36b      	cbz	r3, 8016cdc <__swbuf_r+0x84>
 8016c80:	6923      	ldr	r3, [r4, #16]
 8016c82:	6820      	ldr	r0, [r4, #0]
 8016c84:	1ac0      	subs	r0, r0, r3
 8016c86:	6963      	ldr	r3, [r4, #20]
 8016c88:	b2f6      	uxtb	r6, r6
 8016c8a:	4283      	cmp	r3, r0
 8016c8c:	4637      	mov	r7, r6
 8016c8e:	dc04      	bgt.n	8016c9a <__swbuf_r+0x42>
 8016c90:	4621      	mov	r1, r4
 8016c92:	4628      	mov	r0, r5
 8016c94:	f000 f926 	bl	8016ee4 <_fflush_r>
 8016c98:	bb30      	cbnz	r0, 8016ce8 <__swbuf_r+0x90>
 8016c9a:	68a3      	ldr	r3, [r4, #8]
 8016c9c:	3b01      	subs	r3, #1
 8016c9e:	60a3      	str	r3, [r4, #8]
 8016ca0:	6823      	ldr	r3, [r4, #0]
 8016ca2:	1c5a      	adds	r2, r3, #1
 8016ca4:	6022      	str	r2, [r4, #0]
 8016ca6:	701e      	strb	r6, [r3, #0]
 8016ca8:	6963      	ldr	r3, [r4, #20]
 8016caa:	3001      	adds	r0, #1
 8016cac:	4283      	cmp	r3, r0
 8016cae:	d004      	beq.n	8016cba <__swbuf_r+0x62>
 8016cb0:	89a3      	ldrh	r3, [r4, #12]
 8016cb2:	07db      	lsls	r3, r3, #31
 8016cb4:	d506      	bpl.n	8016cc4 <__swbuf_r+0x6c>
 8016cb6:	2e0a      	cmp	r6, #10
 8016cb8:	d104      	bne.n	8016cc4 <__swbuf_r+0x6c>
 8016cba:	4621      	mov	r1, r4
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	f000 f911 	bl	8016ee4 <_fflush_r>
 8016cc2:	b988      	cbnz	r0, 8016ce8 <__swbuf_r+0x90>
 8016cc4:	4638      	mov	r0, r7
 8016cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cc8:	4b0a      	ldr	r3, [pc, #40]	; (8016cf4 <__swbuf_r+0x9c>)
 8016cca:	429c      	cmp	r4, r3
 8016ccc:	d101      	bne.n	8016cd2 <__swbuf_r+0x7a>
 8016cce:	68ac      	ldr	r4, [r5, #8]
 8016cd0:	e7cf      	b.n	8016c72 <__swbuf_r+0x1a>
 8016cd2:	4b09      	ldr	r3, [pc, #36]	; (8016cf8 <__swbuf_r+0xa0>)
 8016cd4:	429c      	cmp	r4, r3
 8016cd6:	bf08      	it	eq
 8016cd8:	68ec      	ldreq	r4, [r5, #12]
 8016cda:	e7ca      	b.n	8016c72 <__swbuf_r+0x1a>
 8016cdc:	4621      	mov	r1, r4
 8016cde:	4628      	mov	r0, r5
 8016ce0:	f000 f80c 	bl	8016cfc <__swsetup_r>
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	d0cb      	beq.n	8016c80 <__swbuf_r+0x28>
 8016ce8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016cec:	e7ea      	b.n	8016cc4 <__swbuf_r+0x6c>
 8016cee:	bf00      	nop
 8016cf0:	08017794 	.word	0x08017794
 8016cf4:	080177b4 	.word	0x080177b4
 8016cf8:	08017774 	.word	0x08017774

08016cfc <__swsetup_r>:
 8016cfc:	4b32      	ldr	r3, [pc, #200]	; (8016dc8 <__swsetup_r+0xcc>)
 8016cfe:	b570      	push	{r4, r5, r6, lr}
 8016d00:	681d      	ldr	r5, [r3, #0]
 8016d02:	4606      	mov	r6, r0
 8016d04:	460c      	mov	r4, r1
 8016d06:	b125      	cbz	r5, 8016d12 <__swsetup_r+0x16>
 8016d08:	69ab      	ldr	r3, [r5, #24]
 8016d0a:	b913      	cbnz	r3, 8016d12 <__swsetup_r+0x16>
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	f000 f97d 	bl	801700c <__sinit>
 8016d12:	4b2e      	ldr	r3, [pc, #184]	; (8016dcc <__swsetup_r+0xd0>)
 8016d14:	429c      	cmp	r4, r3
 8016d16:	d10f      	bne.n	8016d38 <__swsetup_r+0x3c>
 8016d18:	686c      	ldr	r4, [r5, #4]
 8016d1a:	89a3      	ldrh	r3, [r4, #12]
 8016d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d20:	0719      	lsls	r1, r3, #28
 8016d22:	d42c      	bmi.n	8016d7e <__swsetup_r+0x82>
 8016d24:	06dd      	lsls	r5, r3, #27
 8016d26:	d411      	bmi.n	8016d4c <__swsetup_r+0x50>
 8016d28:	2309      	movs	r3, #9
 8016d2a:	6033      	str	r3, [r6, #0]
 8016d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016d30:	81a3      	strh	r3, [r4, #12]
 8016d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d36:	e03e      	b.n	8016db6 <__swsetup_r+0xba>
 8016d38:	4b25      	ldr	r3, [pc, #148]	; (8016dd0 <__swsetup_r+0xd4>)
 8016d3a:	429c      	cmp	r4, r3
 8016d3c:	d101      	bne.n	8016d42 <__swsetup_r+0x46>
 8016d3e:	68ac      	ldr	r4, [r5, #8]
 8016d40:	e7eb      	b.n	8016d1a <__swsetup_r+0x1e>
 8016d42:	4b24      	ldr	r3, [pc, #144]	; (8016dd4 <__swsetup_r+0xd8>)
 8016d44:	429c      	cmp	r4, r3
 8016d46:	bf08      	it	eq
 8016d48:	68ec      	ldreq	r4, [r5, #12]
 8016d4a:	e7e6      	b.n	8016d1a <__swsetup_r+0x1e>
 8016d4c:	0758      	lsls	r0, r3, #29
 8016d4e:	d512      	bpl.n	8016d76 <__swsetup_r+0x7a>
 8016d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d52:	b141      	cbz	r1, 8016d66 <__swsetup_r+0x6a>
 8016d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d58:	4299      	cmp	r1, r3
 8016d5a:	d002      	beq.n	8016d62 <__swsetup_r+0x66>
 8016d5c:	4630      	mov	r0, r6
 8016d5e:	f7ff fe15 	bl	801698c <_free_r>
 8016d62:	2300      	movs	r3, #0
 8016d64:	6363      	str	r3, [r4, #52]	; 0x34
 8016d66:	89a3      	ldrh	r3, [r4, #12]
 8016d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016d6c:	81a3      	strh	r3, [r4, #12]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	6063      	str	r3, [r4, #4]
 8016d72:	6923      	ldr	r3, [r4, #16]
 8016d74:	6023      	str	r3, [r4, #0]
 8016d76:	89a3      	ldrh	r3, [r4, #12]
 8016d78:	f043 0308 	orr.w	r3, r3, #8
 8016d7c:	81a3      	strh	r3, [r4, #12]
 8016d7e:	6923      	ldr	r3, [r4, #16]
 8016d80:	b94b      	cbnz	r3, 8016d96 <__swsetup_r+0x9a>
 8016d82:	89a3      	ldrh	r3, [r4, #12]
 8016d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d8c:	d003      	beq.n	8016d96 <__swsetup_r+0x9a>
 8016d8e:	4621      	mov	r1, r4
 8016d90:	4630      	mov	r0, r6
 8016d92:	f000 fa01 	bl	8017198 <__smakebuf_r>
 8016d96:	89a0      	ldrh	r0, [r4, #12]
 8016d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d9c:	f010 0301 	ands.w	r3, r0, #1
 8016da0:	d00a      	beq.n	8016db8 <__swsetup_r+0xbc>
 8016da2:	2300      	movs	r3, #0
 8016da4:	60a3      	str	r3, [r4, #8]
 8016da6:	6963      	ldr	r3, [r4, #20]
 8016da8:	425b      	negs	r3, r3
 8016daa:	61a3      	str	r3, [r4, #24]
 8016dac:	6923      	ldr	r3, [r4, #16]
 8016dae:	b943      	cbnz	r3, 8016dc2 <__swsetup_r+0xc6>
 8016db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016db4:	d1ba      	bne.n	8016d2c <__swsetup_r+0x30>
 8016db6:	bd70      	pop	{r4, r5, r6, pc}
 8016db8:	0781      	lsls	r1, r0, #30
 8016dba:	bf58      	it	pl
 8016dbc:	6963      	ldrpl	r3, [r4, #20]
 8016dbe:	60a3      	str	r3, [r4, #8]
 8016dc0:	e7f4      	b.n	8016dac <__swsetup_r+0xb0>
 8016dc2:	2000      	movs	r0, #0
 8016dc4:	e7f7      	b.n	8016db6 <__swsetup_r+0xba>
 8016dc6:	bf00      	nop
 8016dc8:	240000a4 	.word	0x240000a4
 8016dcc:	08017794 	.word	0x08017794
 8016dd0:	080177b4 	.word	0x080177b4
 8016dd4:	08017774 	.word	0x08017774

08016dd8 <__sflush_r>:
 8016dd8:	898a      	ldrh	r2, [r1, #12]
 8016dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dde:	4605      	mov	r5, r0
 8016de0:	0710      	lsls	r0, r2, #28
 8016de2:	460c      	mov	r4, r1
 8016de4:	d458      	bmi.n	8016e98 <__sflush_r+0xc0>
 8016de6:	684b      	ldr	r3, [r1, #4]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	dc05      	bgt.n	8016df8 <__sflush_r+0x20>
 8016dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	dc02      	bgt.n	8016df8 <__sflush_r+0x20>
 8016df2:	2000      	movs	r0, #0
 8016df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016dfa:	2e00      	cmp	r6, #0
 8016dfc:	d0f9      	beq.n	8016df2 <__sflush_r+0x1a>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e04:	682f      	ldr	r7, [r5, #0]
 8016e06:	602b      	str	r3, [r5, #0]
 8016e08:	d032      	beq.n	8016e70 <__sflush_r+0x98>
 8016e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e0c:	89a3      	ldrh	r3, [r4, #12]
 8016e0e:	075a      	lsls	r2, r3, #29
 8016e10:	d505      	bpl.n	8016e1e <__sflush_r+0x46>
 8016e12:	6863      	ldr	r3, [r4, #4]
 8016e14:	1ac0      	subs	r0, r0, r3
 8016e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e18:	b10b      	cbz	r3, 8016e1e <__sflush_r+0x46>
 8016e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e1c:	1ac0      	subs	r0, r0, r3
 8016e1e:	2300      	movs	r3, #0
 8016e20:	4602      	mov	r2, r0
 8016e22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e24:	6a21      	ldr	r1, [r4, #32]
 8016e26:	4628      	mov	r0, r5
 8016e28:	47b0      	blx	r6
 8016e2a:	1c43      	adds	r3, r0, #1
 8016e2c:	89a3      	ldrh	r3, [r4, #12]
 8016e2e:	d106      	bne.n	8016e3e <__sflush_r+0x66>
 8016e30:	6829      	ldr	r1, [r5, #0]
 8016e32:	291d      	cmp	r1, #29
 8016e34:	d82c      	bhi.n	8016e90 <__sflush_r+0xb8>
 8016e36:	4a2a      	ldr	r2, [pc, #168]	; (8016ee0 <__sflush_r+0x108>)
 8016e38:	40ca      	lsrs	r2, r1
 8016e3a:	07d6      	lsls	r6, r2, #31
 8016e3c:	d528      	bpl.n	8016e90 <__sflush_r+0xb8>
 8016e3e:	2200      	movs	r2, #0
 8016e40:	6062      	str	r2, [r4, #4]
 8016e42:	04d9      	lsls	r1, r3, #19
 8016e44:	6922      	ldr	r2, [r4, #16]
 8016e46:	6022      	str	r2, [r4, #0]
 8016e48:	d504      	bpl.n	8016e54 <__sflush_r+0x7c>
 8016e4a:	1c42      	adds	r2, r0, #1
 8016e4c:	d101      	bne.n	8016e52 <__sflush_r+0x7a>
 8016e4e:	682b      	ldr	r3, [r5, #0]
 8016e50:	b903      	cbnz	r3, 8016e54 <__sflush_r+0x7c>
 8016e52:	6560      	str	r0, [r4, #84]	; 0x54
 8016e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e56:	602f      	str	r7, [r5, #0]
 8016e58:	2900      	cmp	r1, #0
 8016e5a:	d0ca      	beq.n	8016df2 <__sflush_r+0x1a>
 8016e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e60:	4299      	cmp	r1, r3
 8016e62:	d002      	beq.n	8016e6a <__sflush_r+0x92>
 8016e64:	4628      	mov	r0, r5
 8016e66:	f7ff fd91 	bl	801698c <_free_r>
 8016e6a:	2000      	movs	r0, #0
 8016e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8016e6e:	e7c1      	b.n	8016df4 <__sflush_r+0x1c>
 8016e70:	6a21      	ldr	r1, [r4, #32]
 8016e72:	2301      	movs	r3, #1
 8016e74:	4628      	mov	r0, r5
 8016e76:	47b0      	blx	r6
 8016e78:	1c41      	adds	r1, r0, #1
 8016e7a:	d1c7      	bne.n	8016e0c <__sflush_r+0x34>
 8016e7c:	682b      	ldr	r3, [r5, #0]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d0c4      	beq.n	8016e0c <__sflush_r+0x34>
 8016e82:	2b1d      	cmp	r3, #29
 8016e84:	d001      	beq.n	8016e8a <__sflush_r+0xb2>
 8016e86:	2b16      	cmp	r3, #22
 8016e88:	d101      	bne.n	8016e8e <__sflush_r+0xb6>
 8016e8a:	602f      	str	r7, [r5, #0]
 8016e8c:	e7b1      	b.n	8016df2 <__sflush_r+0x1a>
 8016e8e:	89a3      	ldrh	r3, [r4, #12]
 8016e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e94:	81a3      	strh	r3, [r4, #12]
 8016e96:	e7ad      	b.n	8016df4 <__sflush_r+0x1c>
 8016e98:	690f      	ldr	r7, [r1, #16]
 8016e9a:	2f00      	cmp	r7, #0
 8016e9c:	d0a9      	beq.n	8016df2 <__sflush_r+0x1a>
 8016e9e:	0793      	lsls	r3, r2, #30
 8016ea0:	680e      	ldr	r6, [r1, #0]
 8016ea2:	bf08      	it	eq
 8016ea4:	694b      	ldreq	r3, [r1, #20]
 8016ea6:	600f      	str	r7, [r1, #0]
 8016ea8:	bf18      	it	ne
 8016eaa:	2300      	movne	r3, #0
 8016eac:	eba6 0807 	sub.w	r8, r6, r7
 8016eb0:	608b      	str	r3, [r1, #8]
 8016eb2:	f1b8 0f00 	cmp.w	r8, #0
 8016eb6:	dd9c      	ble.n	8016df2 <__sflush_r+0x1a>
 8016eb8:	6a21      	ldr	r1, [r4, #32]
 8016eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ebc:	4643      	mov	r3, r8
 8016ebe:	463a      	mov	r2, r7
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	47b0      	blx	r6
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	dc06      	bgt.n	8016ed6 <__sflush_r+0xfe>
 8016ec8:	89a3      	ldrh	r3, [r4, #12]
 8016eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ece:	81a3      	strh	r3, [r4, #12]
 8016ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ed4:	e78e      	b.n	8016df4 <__sflush_r+0x1c>
 8016ed6:	4407      	add	r7, r0
 8016ed8:	eba8 0800 	sub.w	r8, r8, r0
 8016edc:	e7e9      	b.n	8016eb2 <__sflush_r+0xda>
 8016ede:	bf00      	nop
 8016ee0:	20400001 	.word	0x20400001

08016ee4 <_fflush_r>:
 8016ee4:	b538      	push	{r3, r4, r5, lr}
 8016ee6:	690b      	ldr	r3, [r1, #16]
 8016ee8:	4605      	mov	r5, r0
 8016eea:	460c      	mov	r4, r1
 8016eec:	b913      	cbnz	r3, 8016ef4 <_fflush_r+0x10>
 8016eee:	2500      	movs	r5, #0
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	bd38      	pop	{r3, r4, r5, pc}
 8016ef4:	b118      	cbz	r0, 8016efe <_fflush_r+0x1a>
 8016ef6:	6983      	ldr	r3, [r0, #24]
 8016ef8:	b90b      	cbnz	r3, 8016efe <_fflush_r+0x1a>
 8016efa:	f000 f887 	bl	801700c <__sinit>
 8016efe:	4b14      	ldr	r3, [pc, #80]	; (8016f50 <_fflush_r+0x6c>)
 8016f00:	429c      	cmp	r4, r3
 8016f02:	d11b      	bne.n	8016f3c <_fflush_r+0x58>
 8016f04:	686c      	ldr	r4, [r5, #4]
 8016f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d0ef      	beq.n	8016eee <_fflush_r+0xa>
 8016f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f10:	07d0      	lsls	r0, r2, #31
 8016f12:	d404      	bmi.n	8016f1e <_fflush_r+0x3a>
 8016f14:	0599      	lsls	r1, r3, #22
 8016f16:	d402      	bmi.n	8016f1e <_fflush_r+0x3a>
 8016f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f1a:	f000 f915 	bl	8017148 <__retarget_lock_acquire_recursive>
 8016f1e:	4628      	mov	r0, r5
 8016f20:	4621      	mov	r1, r4
 8016f22:	f7ff ff59 	bl	8016dd8 <__sflush_r>
 8016f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f28:	07da      	lsls	r2, r3, #31
 8016f2a:	4605      	mov	r5, r0
 8016f2c:	d4e0      	bmi.n	8016ef0 <_fflush_r+0xc>
 8016f2e:	89a3      	ldrh	r3, [r4, #12]
 8016f30:	059b      	lsls	r3, r3, #22
 8016f32:	d4dd      	bmi.n	8016ef0 <_fflush_r+0xc>
 8016f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f36:	f000 f908 	bl	801714a <__retarget_lock_release_recursive>
 8016f3a:	e7d9      	b.n	8016ef0 <_fflush_r+0xc>
 8016f3c:	4b05      	ldr	r3, [pc, #20]	; (8016f54 <_fflush_r+0x70>)
 8016f3e:	429c      	cmp	r4, r3
 8016f40:	d101      	bne.n	8016f46 <_fflush_r+0x62>
 8016f42:	68ac      	ldr	r4, [r5, #8]
 8016f44:	e7df      	b.n	8016f06 <_fflush_r+0x22>
 8016f46:	4b04      	ldr	r3, [pc, #16]	; (8016f58 <_fflush_r+0x74>)
 8016f48:	429c      	cmp	r4, r3
 8016f4a:	bf08      	it	eq
 8016f4c:	68ec      	ldreq	r4, [r5, #12]
 8016f4e:	e7da      	b.n	8016f06 <_fflush_r+0x22>
 8016f50:	08017794 	.word	0x08017794
 8016f54:	080177b4 	.word	0x080177b4
 8016f58:	08017774 	.word	0x08017774

08016f5c <std>:
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	b510      	push	{r4, lr}
 8016f60:	4604      	mov	r4, r0
 8016f62:	e9c0 3300 	strd	r3, r3, [r0]
 8016f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f6a:	6083      	str	r3, [r0, #8]
 8016f6c:	8181      	strh	r1, [r0, #12]
 8016f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8016f70:	81c2      	strh	r2, [r0, #14]
 8016f72:	6183      	str	r3, [r0, #24]
 8016f74:	4619      	mov	r1, r3
 8016f76:	2208      	movs	r2, #8
 8016f78:	305c      	adds	r0, #92	; 0x5c
 8016f7a:	f7ff fcff 	bl	801697c <memset>
 8016f7e:	4b05      	ldr	r3, [pc, #20]	; (8016f94 <std+0x38>)
 8016f80:	6263      	str	r3, [r4, #36]	; 0x24
 8016f82:	4b05      	ldr	r3, [pc, #20]	; (8016f98 <std+0x3c>)
 8016f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f86:	4b05      	ldr	r3, [pc, #20]	; (8016f9c <std+0x40>)
 8016f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f8a:	4b05      	ldr	r3, [pc, #20]	; (8016fa0 <std+0x44>)
 8016f8c:	6224      	str	r4, [r4, #32]
 8016f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8016f90:	bd10      	pop	{r4, pc}
 8016f92:	bf00      	nop
 8016f94:	08017231 	.word	0x08017231
 8016f98:	08017253 	.word	0x08017253
 8016f9c:	0801728b 	.word	0x0801728b
 8016fa0:	080172af 	.word	0x080172af

08016fa4 <_cleanup_r>:
 8016fa4:	4901      	ldr	r1, [pc, #4]	; (8016fac <_cleanup_r+0x8>)
 8016fa6:	f000 b8af 	b.w	8017108 <_fwalk_reent>
 8016faa:	bf00      	nop
 8016fac:	08016ee5 	.word	0x08016ee5

08016fb0 <__sfmoreglue>:
 8016fb0:	b570      	push	{r4, r5, r6, lr}
 8016fb2:	2268      	movs	r2, #104	; 0x68
 8016fb4:	1e4d      	subs	r5, r1, #1
 8016fb6:	4355      	muls	r5, r2
 8016fb8:	460e      	mov	r6, r1
 8016fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016fbe:	f7ff fd51 	bl	8016a64 <_malloc_r>
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	b140      	cbz	r0, 8016fd8 <__sfmoreglue+0x28>
 8016fc6:	2100      	movs	r1, #0
 8016fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8016fcc:	300c      	adds	r0, #12
 8016fce:	60a0      	str	r0, [r4, #8]
 8016fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016fd4:	f7ff fcd2 	bl	801697c <memset>
 8016fd8:	4620      	mov	r0, r4
 8016fda:	bd70      	pop	{r4, r5, r6, pc}

08016fdc <__sfp_lock_acquire>:
 8016fdc:	4801      	ldr	r0, [pc, #4]	; (8016fe4 <__sfp_lock_acquire+0x8>)
 8016fde:	f000 b8b3 	b.w	8017148 <__retarget_lock_acquire_recursive>
 8016fe2:	bf00      	nop
 8016fe4:	24005a89 	.word	0x24005a89

08016fe8 <__sfp_lock_release>:
 8016fe8:	4801      	ldr	r0, [pc, #4]	; (8016ff0 <__sfp_lock_release+0x8>)
 8016fea:	f000 b8ae 	b.w	801714a <__retarget_lock_release_recursive>
 8016fee:	bf00      	nop
 8016ff0:	24005a89 	.word	0x24005a89

08016ff4 <__sinit_lock_acquire>:
 8016ff4:	4801      	ldr	r0, [pc, #4]	; (8016ffc <__sinit_lock_acquire+0x8>)
 8016ff6:	f000 b8a7 	b.w	8017148 <__retarget_lock_acquire_recursive>
 8016ffa:	bf00      	nop
 8016ffc:	24005a8a 	.word	0x24005a8a

08017000 <__sinit_lock_release>:
 8017000:	4801      	ldr	r0, [pc, #4]	; (8017008 <__sinit_lock_release+0x8>)
 8017002:	f000 b8a2 	b.w	801714a <__retarget_lock_release_recursive>
 8017006:	bf00      	nop
 8017008:	24005a8a 	.word	0x24005a8a

0801700c <__sinit>:
 801700c:	b510      	push	{r4, lr}
 801700e:	4604      	mov	r4, r0
 8017010:	f7ff fff0 	bl	8016ff4 <__sinit_lock_acquire>
 8017014:	69a3      	ldr	r3, [r4, #24]
 8017016:	b11b      	cbz	r3, 8017020 <__sinit+0x14>
 8017018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801701c:	f7ff bff0 	b.w	8017000 <__sinit_lock_release>
 8017020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017024:	6523      	str	r3, [r4, #80]	; 0x50
 8017026:	4b13      	ldr	r3, [pc, #76]	; (8017074 <__sinit+0x68>)
 8017028:	4a13      	ldr	r2, [pc, #76]	; (8017078 <__sinit+0x6c>)
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	62a2      	str	r2, [r4, #40]	; 0x28
 801702e:	42a3      	cmp	r3, r4
 8017030:	bf04      	itt	eq
 8017032:	2301      	moveq	r3, #1
 8017034:	61a3      	streq	r3, [r4, #24]
 8017036:	4620      	mov	r0, r4
 8017038:	f000 f820 	bl	801707c <__sfp>
 801703c:	6060      	str	r0, [r4, #4]
 801703e:	4620      	mov	r0, r4
 8017040:	f000 f81c 	bl	801707c <__sfp>
 8017044:	60a0      	str	r0, [r4, #8]
 8017046:	4620      	mov	r0, r4
 8017048:	f000 f818 	bl	801707c <__sfp>
 801704c:	2200      	movs	r2, #0
 801704e:	60e0      	str	r0, [r4, #12]
 8017050:	2104      	movs	r1, #4
 8017052:	6860      	ldr	r0, [r4, #4]
 8017054:	f7ff ff82 	bl	8016f5c <std>
 8017058:	68a0      	ldr	r0, [r4, #8]
 801705a:	2201      	movs	r2, #1
 801705c:	2109      	movs	r1, #9
 801705e:	f7ff ff7d 	bl	8016f5c <std>
 8017062:	68e0      	ldr	r0, [r4, #12]
 8017064:	2202      	movs	r2, #2
 8017066:	2112      	movs	r1, #18
 8017068:	f7ff ff78 	bl	8016f5c <std>
 801706c:	2301      	movs	r3, #1
 801706e:	61a3      	str	r3, [r4, #24]
 8017070:	e7d2      	b.n	8017018 <__sinit+0xc>
 8017072:	bf00      	nop
 8017074:	08017770 	.word	0x08017770
 8017078:	08016fa5 	.word	0x08016fa5

0801707c <__sfp>:
 801707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801707e:	4607      	mov	r7, r0
 8017080:	f7ff ffac 	bl	8016fdc <__sfp_lock_acquire>
 8017084:	4b1e      	ldr	r3, [pc, #120]	; (8017100 <__sfp+0x84>)
 8017086:	681e      	ldr	r6, [r3, #0]
 8017088:	69b3      	ldr	r3, [r6, #24]
 801708a:	b913      	cbnz	r3, 8017092 <__sfp+0x16>
 801708c:	4630      	mov	r0, r6
 801708e:	f7ff ffbd 	bl	801700c <__sinit>
 8017092:	3648      	adds	r6, #72	; 0x48
 8017094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017098:	3b01      	subs	r3, #1
 801709a:	d503      	bpl.n	80170a4 <__sfp+0x28>
 801709c:	6833      	ldr	r3, [r6, #0]
 801709e:	b30b      	cbz	r3, 80170e4 <__sfp+0x68>
 80170a0:	6836      	ldr	r6, [r6, #0]
 80170a2:	e7f7      	b.n	8017094 <__sfp+0x18>
 80170a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80170a8:	b9d5      	cbnz	r5, 80170e0 <__sfp+0x64>
 80170aa:	4b16      	ldr	r3, [pc, #88]	; (8017104 <__sfp+0x88>)
 80170ac:	60e3      	str	r3, [r4, #12]
 80170ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80170b2:	6665      	str	r5, [r4, #100]	; 0x64
 80170b4:	f000 f847 	bl	8017146 <__retarget_lock_init_recursive>
 80170b8:	f7ff ff96 	bl	8016fe8 <__sfp_lock_release>
 80170bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80170c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80170c4:	6025      	str	r5, [r4, #0]
 80170c6:	61a5      	str	r5, [r4, #24]
 80170c8:	2208      	movs	r2, #8
 80170ca:	4629      	mov	r1, r5
 80170cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80170d0:	f7ff fc54 	bl	801697c <memset>
 80170d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80170d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80170dc:	4620      	mov	r0, r4
 80170de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170e0:	3468      	adds	r4, #104	; 0x68
 80170e2:	e7d9      	b.n	8017098 <__sfp+0x1c>
 80170e4:	2104      	movs	r1, #4
 80170e6:	4638      	mov	r0, r7
 80170e8:	f7ff ff62 	bl	8016fb0 <__sfmoreglue>
 80170ec:	4604      	mov	r4, r0
 80170ee:	6030      	str	r0, [r6, #0]
 80170f0:	2800      	cmp	r0, #0
 80170f2:	d1d5      	bne.n	80170a0 <__sfp+0x24>
 80170f4:	f7ff ff78 	bl	8016fe8 <__sfp_lock_release>
 80170f8:	230c      	movs	r3, #12
 80170fa:	603b      	str	r3, [r7, #0]
 80170fc:	e7ee      	b.n	80170dc <__sfp+0x60>
 80170fe:	bf00      	nop
 8017100:	08017770 	.word	0x08017770
 8017104:	ffff0001 	.word	0xffff0001

08017108 <_fwalk_reent>:
 8017108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801710c:	4606      	mov	r6, r0
 801710e:	4688      	mov	r8, r1
 8017110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017114:	2700      	movs	r7, #0
 8017116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801711a:	f1b9 0901 	subs.w	r9, r9, #1
 801711e:	d505      	bpl.n	801712c <_fwalk_reent+0x24>
 8017120:	6824      	ldr	r4, [r4, #0]
 8017122:	2c00      	cmp	r4, #0
 8017124:	d1f7      	bne.n	8017116 <_fwalk_reent+0xe>
 8017126:	4638      	mov	r0, r7
 8017128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801712c:	89ab      	ldrh	r3, [r5, #12]
 801712e:	2b01      	cmp	r3, #1
 8017130:	d907      	bls.n	8017142 <_fwalk_reent+0x3a>
 8017132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017136:	3301      	adds	r3, #1
 8017138:	d003      	beq.n	8017142 <_fwalk_reent+0x3a>
 801713a:	4629      	mov	r1, r5
 801713c:	4630      	mov	r0, r6
 801713e:	47c0      	blx	r8
 8017140:	4307      	orrs	r7, r0
 8017142:	3568      	adds	r5, #104	; 0x68
 8017144:	e7e9      	b.n	801711a <_fwalk_reent+0x12>

08017146 <__retarget_lock_init_recursive>:
 8017146:	4770      	bx	lr

08017148 <__retarget_lock_acquire_recursive>:
 8017148:	4770      	bx	lr

0801714a <__retarget_lock_release_recursive>:
 801714a:	4770      	bx	lr

0801714c <__swhatbuf_r>:
 801714c:	b570      	push	{r4, r5, r6, lr}
 801714e:	460e      	mov	r6, r1
 8017150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017154:	2900      	cmp	r1, #0
 8017156:	b096      	sub	sp, #88	; 0x58
 8017158:	4614      	mov	r4, r2
 801715a:	461d      	mov	r5, r3
 801715c:	da08      	bge.n	8017170 <__swhatbuf_r+0x24>
 801715e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017162:	2200      	movs	r2, #0
 8017164:	602a      	str	r2, [r5, #0]
 8017166:	061a      	lsls	r2, r3, #24
 8017168:	d410      	bmi.n	801718c <__swhatbuf_r+0x40>
 801716a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801716e:	e00e      	b.n	801718e <__swhatbuf_r+0x42>
 8017170:	466a      	mov	r2, sp
 8017172:	f000 f8c3 	bl	80172fc <_fstat_r>
 8017176:	2800      	cmp	r0, #0
 8017178:	dbf1      	blt.n	801715e <__swhatbuf_r+0x12>
 801717a:	9a01      	ldr	r2, [sp, #4]
 801717c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017180:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017184:	425a      	negs	r2, r3
 8017186:	415a      	adcs	r2, r3
 8017188:	602a      	str	r2, [r5, #0]
 801718a:	e7ee      	b.n	801716a <__swhatbuf_r+0x1e>
 801718c:	2340      	movs	r3, #64	; 0x40
 801718e:	2000      	movs	r0, #0
 8017190:	6023      	str	r3, [r4, #0]
 8017192:	b016      	add	sp, #88	; 0x58
 8017194:	bd70      	pop	{r4, r5, r6, pc}
	...

08017198 <__smakebuf_r>:
 8017198:	898b      	ldrh	r3, [r1, #12]
 801719a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801719c:	079d      	lsls	r5, r3, #30
 801719e:	4606      	mov	r6, r0
 80171a0:	460c      	mov	r4, r1
 80171a2:	d507      	bpl.n	80171b4 <__smakebuf_r+0x1c>
 80171a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80171a8:	6023      	str	r3, [r4, #0]
 80171aa:	6123      	str	r3, [r4, #16]
 80171ac:	2301      	movs	r3, #1
 80171ae:	6163      	str	r3, [r4, #20]
 80171b0:	b002      	add	sp, #8
 80171b2:	bd70      	pop	{r4, r5, r6, pc}
 80171b4:	ab01      	add	r3, sp, #4
 80171b6:	466a      	mov	r2, sp
 80171b8:	f7ff ffc8 	bl	801714c <__swhatbuf_r>
 80171bc:	9900      	ldr	r1, [sp, #0]
 80171be:	4605      	mov	r5, r0
 80171c0:	4630      	mov	r0, r6
 80171c2:	f7ff fc4f 	bl	8016a64 <_malloc_r>
 80171c6:	b948      	cbnz	r0, 80171dc <__smakebuf_r+0x44>
 80171c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171cc:	059a      	lsls	r2, r3, #22
 80171ce:	d4ef      	bmi.n	80171b0 <__smakebuf_r+0x18>
 80171d0:	f023 0303 	bic.w	r3, r3, #3
 80171d4:	f043 0302 	orr.w	r3, r3, #2
 80171d8:	81a3      	strh	r3, [r4, #12]
 80171da:	e7e3      	b.n	80171a4 <__smakebuf_r+0xc>
 80171dc:	4b0d      	ldr	r3, [pc, #52]	; (8017214 <__smakebuf_r+0x7c>)
 80171de:	62b3      	str	r3, [r6, #40]	; 0x28
 80171e0:	89a3      	ldrh	r3, [r4, #12]
 80171e2:	6020      	str	r0, [r4, #0]
 80171e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171e8:	81a3      	strh	r3, [r4, #12]
 80171ea:	9b00      	ldr	r3, [sp, #0]
 80171ec:	6163      	str	r3, [r4, #20]
 80171ee:	9b01      	ldr	r3, [sp, #4]
 80171f0:	6120      	str	r0, [r4, #16]
 80171f2:	b15b      	cbz	r3, 801720c <__smakebuf_r+0x74>
 80171f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80171f8:	4630      	mov	r0, r6
 80171fa:	f000 f891 	bl	8017320 <_isatty_r>
 80171fe:	b128      	cbz	r0, 801720c <__smakebuf_r+0x74>
 8017200:	89a3      	ldrh	r3, [r4, #12]
 8017202:	f023 0303 	bic.w	r3, r3, #3
 8017206:	f043 0301 	orr.w	r3, r3, #1
 801720a:	81a3      	strh	r3, [r4, #12]
 801720c:	89a0      	ldrh	r0, [r4, #12]
 801720e:	4305      	orrs	r5, r0
 8017210:	81a5      	strh	r5, [r4, #12]
 8017212:	e7cd      	b.n	80171b0 <__smakebuf_r+0x18>
 8017214:	08016fa5 	.word	0x08016fa5

08017218 <__malloc_lock>:
 8017218:	4801      	ldr	r0, [pc, #4]	; (8017220 <__malloc_lock+0x8>)
 801721a:	f7ff bf95 	b.w	8017148 <__retarget_lock_acquire_recursive>
 801721e:	bf00      	nop
 8017220:	24005a88 	.word	0x24005a88

08017224 <__malloc_unlock>:
 8017224:	4801      	ldr	r0, [pc, #4]	; (801722c <__malloc_unlock+0x8>)
 8017226:	f7ff bf90 	b.w	801714a <__retarget_lock_release_recursive>
 801722a:	bf00      	nop
 801722c:	24005a88 	.word	0x24005a88

08017230 <__sread>:
 8017230:	b510      	push	{r4, lr}
 8017232:	460c      	mov	r4, r1
 8017234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017238:	f000 f894 	bl	8017364 <_read_r>
 801723c:	2800      	cmp	r0, #0
 801723e:	bfab      	itete	ge
 8017240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017242:	89a3      	ldrhlt	r3, [r4, #12]
 8017244:	181b      	addge	r3, r3, r0
 8017246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801724a:	bfac      	ite	ge
 801724c:	6563      	strge	r3, [r4, #84]	; 0x54
 801724e:	81a3      	strhlt	r3, [r4, #12]
 8017250:	bd10      	pop	{r4, pc}

08017252 <__swrite>:
 8017252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017256:	461f      	mov	r7, r3
 8017258:	898b      	ldrh	r3, [r1, #12]
 801725a:	05db      	lsls	r3, r3, #23
 801725c:	4605      	mov	r5, r0
 801725e:	460c      	mov	r4, r1
 8017260:	4616      	mov	r6, r2
 8017262:	d505      	bpl.n	8017270 <__swrite+0x1e>
 8017264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017268:	2302      	movs	r3, #2
 801726a:	2200      	movs	r2, #0
 801726c:	f000 f868 	bl	8017340 <_lseek_r>
 8017270:	89a3      	ldrh	r3, [r4, #12]
 8017272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801727a:	81a3      	strh	r3, [r4, #12]
 801727c:	4632      	mov	r2, r6
 801727e:	463b      	mov	r3, r7
 8017280:	4628      	mov	r0, r5
 8017282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017286:	f000 b817 	b.w	80172b8 <_write_r>

0801728a <__sseek>:
 801728a:	b510      	push	{r4, lr}
 801728c:	460c      	mov	r4, r1
 801728e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017292:	f000 f855 	bl	8017340 <_lseek_r>
 8017296:	1c43      	adds	r3, r0, #1
 8017298:	89a3      	ldrh	r3, [r4, #12]
 801729a:	bf15      	itete	ne
 801729c:	6560      	strne	r0, [r4, #84]	; 0x54
 801729e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80172a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80172a6:	81a3      	strheq	r3, [r4, #12]
 80172a8:	bf18      	it	ne
 80172aa:	81a3      	strhne	r3, [r4, #12]
 80172ac:	bd10      	pop	{r4, pc}

080172ae <__sclose>:
 80172ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172b2:	f000 b813 	b.w	80172dc <_close_r>
	...

080172b8 <_write_r>:
 80172b8:	b538      	push	{r3, r4, r5, lr}
 80172ba:	4d07      	ldr	r5, [pc, #28]	; (80172d8 <_write_r+0x20>)
 80172bc:	4604      	mov	r4, r0
 80172be:	4608      	mov	r0, r1
 80172c0:	4611      	mov	r1, r2
 80172c2:	2200      	movs	r2, #0
 80172c4:	602a      	str	r2, [r5, #0]
 80172c6:	461a      	mov	r2, r3
 80172c8:	f7ec fc39 	bl	8003b3e <_write>
 80172cc:	1c43      	adds	r3, r0, #1
 80172ce:	d102      	bne.n	80172d6 <_write_r+0x1e>
 80172d0:	682b      	ldr	r3, [r5, #0]
 80172d2:	b103      	cbz	r3, 80172d6 <_write_r+0x1e>
 80172d4:	6023      	str	r3, [r4, #0]
 80172d6:	bd38      	pop	{r3, r4, r5, pc}
 80172d8:	24005a8c 	.word	0x24005a8c

080172dc <_close_r>:
 80172dc:	b538      	push	{r3, r4, r5, lr}
 80172de:	4d06      	ldr	r5, [pc, #24]	; (80172f8 <_close_r+0x1c>)
 80172e0:	2300      	movs	r3, #0
 80172e2:	4604      	mov	r4, r0
 80172e4:	4608      	mov	r0, r1
 80172e6:	602b      	str	r3, [r5, #0]
 80172e8:	f7ec fc45 	bl	8003b76 <_close>
 80172ec:	1c43      	adds	r3, r0, #1
 80172ee:	d102      	bne.n	80172f6 <_close_r+0x1a>
 80172f0:	682b      	ldr	r3, [r5, #0]
 80172f2:	b103      	cbz	r3, 80172f6 <_close_r+0x1a>
 80172f4:	6023      	str	r3, [r4, #0]
 80172f6:	bd38      	pop	{r3, r4, r5, pc}
 80172f8:	24005a8c 	.word	0x24005a8c

080172fc <_fstat_r>:
 80172fc:	b538      	push	{r3, r4, r5, lr}
 80172fe:	4d07      	ldr	r5, [pc, #28]	; (801731c <_fstat_r+0x20>)
 8017300:	2300      	movs	r3, #0
 8017302:	4604      	mov	r4, r0
 8017304:	4608      	mov	r0, r1
 8017306:	4611      	mov	r1, r2
 8017308:	602b      	str	r3, [r5, #0]
 801730a:	f7ec fc40 	bl	8003b8e <_fstat>
 801730e:	1c43      	adds	r3, r0, #1
 8017310:	d102      	bne.n	8017318 <_fstat_r+0x1c>
 8017312:	682b      	ldr	r3, [r5, #0]
 8017314:	b103      	cbz	r3, 8017318 <_fstat_r+0x1c>
 8017316:	6023      	str	r3, [r4, #0]
 8017318:	bd38      	pop	{r3, r4, r5, pc}
 801731a:	bf00      	nop
 801731c:	24005a8c 	.word	0x24005a8c

08017320 <_isatty_r>:
 8017320:	b538      	push	{r3, r4, r5, lr}
 8017322:	4d06      	ldr	r5, [pc, #24]	; (801733c <_isatty_r+0x1c>)
 8017324:	2300      	movs	r3, #0
 8017326:	4604      	mov	r4, r0
 8017328:	4608      	mov	r0, r1
 801732a:	602b      	str	r3, [r5, #0]
 801732c:	f7ec fc3f 	bl	8003bae <_isatty>
 8017330:	1c43      	adds	r3, r0, #1
 8017332:	d102      	bne.n	801733a <_isatty_r+0x1a>
 8017334:	682b      	ldr	r3, [r5, #0]
 8017336:	b103      	cbz	r3, 801733a <_isatty_r+0x1a>
 8017338:	6023      	str	r3, [r4, #0]
 801733a:	bd38      	pop	{r3, r4, r5, pc}
 801733c:	24005a8c 	.word	0x24005a8c

08017340 <_lseek_r>:
 8017340:	b538      	push	{r3, r4, r5, lr}
 8017342:	4d07      	ldr	r5, [pc, #28]	; (8017360 <_lseek_r+0x20>)
 8017344:	4604      	mov	r4, r0
 8017346:	4608      	mov	r0, r1
 8017348:	4611      	mov	r1, r2
 801734a:	2200      	movs	r2, #0
 801734c:	602a      	str	r2, [r5, #0]
 801734e:	461a      	mov	r2, r3
 8017350:	f7ec fc38 	bl	8003bc4 <_lseek>
 8017354:	1c43      	adds	r3, r0, #1
 8017356:	d102      	bne.n	801735e <_lseek_r+0x1e>
 8017358:	682b      	ldr	r3, [r5, #0]
 801735a:	b103      	cbz	r3, 801735e <_lseek_r+0x1e>
 801735c:	6023      	str	r3, [r4, #0]
 801735e:	bd38      	pop	{r3, r4, r5, pc}
 8017360:	24005a8c 	.word	0x24005a8c

08017364 <_read_r>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	4d07      	ldr	r5, [pc, #28]	; (8017384 <_read_r+0x20>)
 8017368:	4604      	mov	r4, r0
 801736a:	4608      	mov	r0, r1
 801736c:	4611      	mov	r1, r2
 801736e:	2200      	movs	r2, #0
 8017370:	602a      	str	r2, [r5, #0]
 8017372:	461a      	mov	r2, r3
 8017374:	f7ec fbc6 	bl	8003b04 <_read>
 8017378:	1c43      	adds	r3, r0, #1
 801737a:	d102      	bne.n	8017382 <_read_r+0x1e>
 801737c:	682b      	ldr	r3, [r5, #0]
 801737e:	b103      	cbz	r3, 8017382 <_read_r+0x1e>
 8017380:	6023      	str	r3, [r4, #0]
 8017382:	bd38      	pop	{r3, r4, r5, pc}
 8017384:	24005a8c 	.word	0x24005a8c

08017388 <_init>:
 8017388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801738a:	bf00      	nop
 801738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801738e:	bc08      	pop	{r3}
 8017390:	469e      	mov	lr, r3
 8017392:	4770      	bx	lr

08017394 <_fini>:
 8017394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017396:	bf00      	nop
 8017398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801739a:	bc08      	pop	{r3}
 801739c:	469e      	mov	lr, r3
 801739e:	4770      	bx	lr
