
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001455c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080147fc  080147fc  000247fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014bac  08014bac  00024bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014bb4  08014bb4  00024bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014bb8  08014bb8  00024bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08014bbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f1c  24000100  08014cbc  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400501c  08014cbc  0003501c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030b88  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000527a  00000000  00000000  00060cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002530  00000000  00000000  00065f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002348  00000000  00000000  00068460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000748b  00000000  00000000  0006a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ee31  00000000  00000000  00071c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d55f  00000000  00000000  000a0a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022dfc3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a94c  00000000  00000000  0022e014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080147e4 	.word	0x080147e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080147e4 	.word	0x080147e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f00f fe40 	bl	8010320 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f fe35 	bl	8010320 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fe2a 	bl	8010320 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f013 f9ea 	bl	8013aa8 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2400043c 	.word	0x2400043c
 80006e0:	240005d8 	.word	0x240005d8
 80006e4:	24000488 	.word	0x24000488
 80006e8:	240004d4 	.word	0x240004d4
 80006ec:	0801483c 	.word	0x0801483c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d f925 	bl	800d94c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f013 f979 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fb2d 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f013 f96f 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fb23 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f013 f965 	bl	8013aa8 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 f8f4 	bl	80049f2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f003 ff35 	bl	800467c <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f013 f947 	bl	8013aa8 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 f8d6 	bl	80049f2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f003 ff17 	bl	800467c <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f013 f929 	bl	8013aa8 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00b fb1d 	bl	800bea4 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f003 ff59 	bl	800472c <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00b fb7e 	bl	800bf84 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 f80e 	bl	80048ac <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 f908 	bl	8013aa8 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 f8f3 	bl	8013aa8 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 f8de 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fa92 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 f8d4 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fa88 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 f8ca 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fa7e 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 f8c0 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fa74 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 f8b6 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fa69 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f013 f8ab 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fa5e 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f013 f8a0 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fa53 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f013 f895 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fa48 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f013 f88a 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fa3e 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f013 f880 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fa34 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 f876 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fa29 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 f86b 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fa1e 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 f860 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fa13 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	240005dc 	.word	0x240005dc
 80009fc:	24000520 	.word	0x24000520
 8000a00:	08014854 	.word	0x08014854
 8000a04:	58020400 	.word	0x58020400
 8000a08:	0801485c 	.word	0x0801485c
 8000a0c:	08014868 	.word	0x08014868
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08014870 	.word	0x08014870
 8000a20:	0801487c 	.word	0x0801487c
 8000a24:	240005d4 	.word	0x240005d4
 8000a28:	24000488 	.word	0x24000488
 8000a2c:	08014890 	.word	0x08014890
 8000a30:	24000000 	.word	0x24000000
 8000a34:	0801489c 	.word	0x0801489c
 8000a38:	080148a8 	.word	0x080148a8
 8000a3c:	080148b4 	.word	0x080148b4
 8000a40:	080148c0 	.word	0x080148c0
 8000a44:	080148cc 	.word	0x080148cc
 8000a48:	080148dc 	.word	0x080148dc
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	080148e8 	.word	0x080148e8
 8000a54:	080148f4 	.word	0x080148f4
 8000a58:	08014904 	.word	0x08014904
 8000a5c:	08014914 	.word	0x08014914
 8000a60:	08014920 	.word	0x08014920
 8000a64:	0801492c 	.word	0x0801492c
 8000a68:	08014938 	.word	0x08014938
 8000a6c:	08014944 	.word	0x08014944
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 f819 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 f9cc 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 f80e 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 f9c2 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 f804 	bl	8013aa8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 f9b8 	bl	8007e1c <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f012 fffa 	bl	8013aa8 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f012 fff6 	bl	8013aa8 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f012 ffef 	bl	8013aa8 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f012 ffe8 	bl	8013aa8 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f012 ffe1 	bl	8013aa8 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f012 ffda 	bl	8013aa8 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f012 ffd3 	bl	8013aa8 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08014950 	.word	0x08014950
 8000b24:	58020800 	.word	0x58020800
 8000b28:	0801495c 	.word	0x0801495c
 8000b2c:	08014968 	.word	0x08014968
 8000b30:	08014978 	.word	0x08014978
 8000b34:	08014988 	.word	0x08014988
 8000b38:	240005cf 	.word	0x240005cf
 8000b3c:	08014990 	.word	0x08014990
 8000b40:	08014998 	.word	0x08014998
 8000b44:	240005d0 	.word	0x240005d0
 8000b48:	080149a0 	.word	0x080149a0
 8000b4c:	080149ac 	.word	0x080149ac
 8000b50:	240005d1 	.word	0x240005d1
 8000b54:	080149b4 	.word	0x080149b4

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f001 fffa 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f88e 	bl	8000c80 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f90a 	bl	8000d7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fda8 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fd76 	bl	800165c <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fcda 	bl	8001528 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fd26 	bl	80015c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb1a 	bl	80011b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fb58 	bl	8001230 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fc5c 	bl	800143c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fbac 	bl	80012e0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa4e 	bl	8001028 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f926 	bl	8000ddc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 fadc 	bl	800114c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b94:	2100      	movs	r1, #0
 8000b96:	4825      	ldr	r0, [pc, #148]	; (8000c2c <main+0xd4>)
 8000b98:	f00b fa94 	bl	800c0c4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4824      	ldr	r0, [pc, #144]	; (8000c30 <main+0xd8>)
 8000ba0:	f00b fa90 	bl	800c0c4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4823      	ldr	r0, [pc, #140]	; (8000c34 <main+0xdc>)
 8000ba8:	f00b fa8c 	bl	800c0c4 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bac:	f00f fa62 	bl	8010074 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	2010      	movs	r0, #16
 8000bb6:	f00f fc5d 	bl	8010474 <osMessageQueueNew>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <main+0xe0>)
 8000bbe:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <main+0xe4>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	481e      	ldr	r0, [pc, #120]	; (8000c40 <main+0xe8>)
 8000bc6:	f00f fa9f 	bl	8010108 <osThreadNew>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <main+0xec>)
 8000bce:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <main+0xf0>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	481d      	ldr	r0, [pc, #116]	; (8000c4c <main+0xf4>)
 8000bd6:	f00f fa97 	bl	8010108 <osThreadNew>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <main+0xf8>)
 8000bde:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <main+0xfc>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	481c      	ldr	r0, [pc, #112]	; (8000c58 <main+0x100>)
 8000be6:	f00f fa8f 	bl	8010108 <osThreadNew>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <main+0x104>)
 8000bee:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <main+0x108>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	481b      	ldr	r0, [pc, #108]	; (8000c64 <main+0x10c>)
 8000bf6:	f00f fa87 	bl	8010108 <osThreadNew>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <main+0x110>)
 8000bfe:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <main+0x114>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <main+0x118>)
 8000c06:	f00f fa7f 	bl	8010108 <osThreadNew>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <main+0x11c>)
 8000c0e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f00f fb46 	bl	80102a2 <osEventFlagsNew>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <main+0x120>)
 8000c1a:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c1c:	f000 fdb8 	bl	8001790 <system_setup>
  printf("Starting kernal...\n");
 8000c20:	4816      	ldr	r0, [pc, #88]	; (8000c7c <main+0x124>)
 8000c22:	f012 ff41 	bl	8013aa8 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c26:	f00f fa49 	bl	80100bc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c2a:	e7fe      	b.n	8000c2a <main+0xd2>
 8000c2c:	2400043c 	.word	0x2400043c
 8000c30:	24000488 	.word	0x24000488
 8000c34:	240004d4 	.word	0x240004d4
 8000c38:	240005c8 	.word	0x240005c8
 8000c3c:	08014a20 	.word	0x08014a20
 8000c40:	08001d2d 	.word	0x08001d2d
 8000c44:	240005b4 	.word	0x240005b4
 8000c48:	08014a44 	.word	0x08014a44
 8000c4c:	08001d71 	.word	0x08001d71
 8000c50:	240005b8 	.word	0x240005b8
 8000c54:	08014a68 	.word	0x08014a68
 8000c58:	08001db5 	.word	0x08001db5
 8000c5c:	240005bc 	.word	0x240005bc
 8000c60:	08014a8c 	.word	0x08014a8c
 8000c64:	08001df9 	.word	0x08001df9
 8000c68:	240005c0 	.word	0x240005c0
 8000c6c:	08014ab0 	.word	0x08014ab0
 8000c70:	08001e1d 	.word	0x08001e1d
 8000c74:	240005c4 	.word	0x240005c4
 8000c78:	240005d8 	.word	0x240005d8
 8000c7c:	080149bc 	.word	0x080149bc

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	; 0x70
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	224c      	movs	r2, #76	; 0x4c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f012 fd9c 	bl	80137cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f012 fd96 	bl	80137cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f007 fa09 	bl	80080b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <SystemClock_Config+0xf4>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <SystemClock_Config+0xf4>)
 8000cb0:	f023 0301 	bic.w	r3, r3, #1
 8000cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <SystemClock_Config+0xf4>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <SystemClock_Config+0xf8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <SystemClock_Config+0xf8>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <SystemClock_Config+0xf8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cdc:	bf00      	nop
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <SystemClock_Config+0xf8>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cea:	d1f8      	bne.n	8000cde <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf4:	2340      	movs	r3, #64	; 0x40
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d00:	2304      	movs	r3, #4
 8000d02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000d04:	2309      	movs	r3, #9
 8000d06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d14:	230c      	movs	r3, #12
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000d1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fa00 	bl	800812c <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d32:	f001 f8b3 	bl	8001e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	233f      	movs	r3, #63	; 0x3f
 8000d38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d4a:	2340      	movs	r3, #64	; 0x40
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f007 fe3f 	bl	80089e0 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000d68:	f001 f898 	bl	8001e9c <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3770      	adds	r7, #112	; 0x70
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58000400 	.word	0x58000400
 8000d78:	58024800 	.word	0x58024800

08000d7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0b0      	sub	sp, #192	; 0xc0
 8000d80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	22c0      	movs	r2, #192	; 0xc0
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f012 fd1f 	bl	80137cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000d9e:	2309      	movs	r3, #9
 8000da0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000da2:	2304      	movs	r3, #4
 8000da4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000db2:	2320      	movs	r3, #32
 8000db4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000db6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f008 f9d9 	bl	800917c <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000dd0:	f001 f864 	bl	8001e9c <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	37c0      	adds	r7, #192	; 0xc0
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e00:	4b7c      	ldr	r3, [pc, #496]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e02:	4a7d      	ldr	r2, [pc, #500]	; (8000ff8 <MX_ADC1_Init+0x21c>)
 8000e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e06:	4b7b      	ldr	r3, [pc, #492]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0e:	4b79      	ldr	r3, [pc, #484]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e14:	4b77      	ldr	r3, [pc, #476]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1a:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e20:	4b74      	ldr	r3, [pc, #464]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e2c:	4b71      	ldr	r3, [pc, #452]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e2e:	220b      	movs	r2, #11
 8000e30:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e32:	4b70      	ldr	r3, [pc, #448]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e38:	4b6e      	ldr	r3, [pc, #440]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3e:	4b6d      	ldr	r3, [pc, #436]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e44:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e46:	2203      	movs	r2, #3
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e4a:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e52:	4b68      	ldr	r3, [pc, #416]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e58:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e60:	4864      	ldr	r0, [pc, #400]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e62:	f002 f903 	bl	800306c <HAL_ADC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e6c:	f001 f816 	bl	8001e9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	485e      	ldr	r0, [pc, #376]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000e7c:	f003 fa1e 	bl	80042bc <HAL_ADCEx_MultiModeConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e86:	f001 f809 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	; (8000ffc <MX_ADC1_Init+0x220>)
 8000e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e8e:	2306      	movs	r3, #6
 8000e90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e92:	2307      	movs	r3, #7
 8000e94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4851      	ldr	r0, [pc, #324]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000eae:	f002 fb61 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000eb8:	f000 fff0 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ebc:	4b50      	ldr	r3, [pc, #320]	; (8001000 <MX_ADC1_Init+0x224>)
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	484a      	ldr	r0, [pc, #296]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000eca:	f002 fb53 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ed4:	f000 ffe2 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <MX_ADC1_Init+0x228>)
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000edc:	2312      	movs	r3, #18
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4843      	ldr	r0, [pc, #268]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000ee6:	f002 fb45 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000ef0:	f000 ffd4 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ef4:	4b44      	ldr	r3, [pc, #272]	; (8001008 <MX_ADC1_Init+0x22c>)
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ef8:	2318      	movs	r3, #24
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	483c      	ldr	r0, [pc, #240]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000f02:	f002 fb37 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f0c:	f000 ffc6 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f10:	4b3e      	ldr	r3, [pc, #248]	; (800100c <MX_ADC1_Init+0x230>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4835      	ldr	r0, [pc, #212]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000f20:	f002 fb28 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f2a:	f000 ffb7 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <MX_ADC1_Init+0x234>)
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f32:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000f3e:	f002 fb19 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f48:	f000 ffa8 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <MX_ADC1_Init+0x238>)
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f50:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000f5c:	f002 fb0a 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f66:	f000 ff99 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_ADC1_Init+0x23c>)
 8000f6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f6e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000f7a:	f002 fafb 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000f84:	f000 ff8a 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_ADC1_Init+0x240>)
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f8c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000f98:	f002 faec 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fa2:	f000 ff7b 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_ADC1_Init+0x244>)
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000fba:	f002 fadb 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fc4:	f000 ff6a 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_ADC1_Init+0x248>)
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fcc:	f240 2306 	movw	r3, #518	; 0x206
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_ADC1_Init+0x218>)
 8000fdc:	f002 faca 	bl	8003574 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000fe6:	f000 ff59 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2400011c 	.word	0x2400011c
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	0c900008 	.word	0x0c900008
 8001000:	10c00010 	.word	0x10c00010
 8001004:	14f00020 	.word	0x14f00020
 8001008:	1d500080 	.word	0x1d500080
 800100c:	21800100 	.word	0x21800100
 8001010:	25b00200 	.word	0x25b00200
 8001014:	2a000400 	.word	0x2a000400
 8001018:	2e300800 	.word	0x2e300800
 800101c:	3ac04000 	.word	0x3ac04000
 8001020:	3ef08000 	.word	0x3ef08000
 8001024:	47520000 	.word	0x47520000

08001028 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001040:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <MX_ADC3_Init+0x110>)
 8001042:	4a3e      	ldr	r2, [pc, #248]	; (800113c <MX_ADC3_Init+0x114>)
 8001044:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001046:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <MX_ADC3_Init+0x110>)
 8001048:	2208      	movs	r2, #8
 800104a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <MX_ADC3_Init+0x110>)
 800104e:	2201      	movs	r2, #1
 8001050:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <MX_ADC3_Init+0x110>)
 8001054:	2204      	movs	r2, #4
 8001056:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <MX_ADC3_Init+0x110>)
 800105a:	2200      	movs	r2, #0
 800105c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <MX_ADC3_Init+0x110>)
 8001060:	2201      	movs	r2, #1
 8001062:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <MX_ADC3_Init+0x110>)
 8001066:	2204      	movs	r2, #4
 8001068:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <MX_ADC3_Init+0x110>)
 800106c:	2200      	movs	r2, #0
 800106e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MX_ADC3_Init+0x110>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_ADC3_Init+0x110>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_ADC3_Init+0x110>)
 800107e:	2203      	movs	r2, #3
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_ADC3_Init+0x110>)
 8001084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <MX_ADC3_Init+0x110>)
 800108c:	2200      	movs	r2, #0
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_ADC3_Init+0x110>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001098:	4827      	ldr	r0, [pc, #156]	; (8001138 <MX_ADC3_Init+0x110>)
 800109a:	f001 ffe7 	bl	800306c <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010a4:	f000 fefa 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <MX_ADC3_Init+0x118>)
 80010aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ac:	2306      	movs	r3, #6
 80010ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010b0:	2307      	movs	r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ba:	2304      	movs	r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	481b      	ldr	r0, [pc, #108]	; (8001138 <MX_ADC3_Init+0x110>)
 80010cc:	f002 fa52 	bl	8003574 <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010d6:	f000 fee1 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_ADC3_Init+0x11c>)
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010de:	230c      	movs	r3, #12
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_ADC3_Init+0x110>)
 80010e8:	f002 fa44 	bl	8003574 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80010f2:	f000 fed3 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010fa:	2312      	movs	r3, #18
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_ADC3_Init+0x110>)
 8001104:	f002 fa36 	bl	8003574 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800110e:	f000 fec5 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_ADC3_Init+0x120>)
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001116:	2318      	movs	r3, #24
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_ADC3_Init+0x110>)
 8001120:	f002 fa28 	bl	8003574 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800112a:	f000 feb7 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	24000180 	.word	0x24000180
 800113c:	58026000 	.word	0x58026000
 8001140:	cb840000 	.word	0xcb840000
 8001144:	cfb80000 	.word	0xcfb80000
 8001148:	04300002 	.word	0x04300002

0800114c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2224      	movs	r2, #36	; 0x24
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f012 fb37 	bl	80137cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_DAC1_Init+0x5c>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_DAC1_Init+0x60>)
 8001162:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <MX_DAC1_Init+0x5c>)
 8001166:	f003 fa67 	bl	8004638 <HAL_DAC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001170:	f000 fe94 	bl	8001e9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001178:	230a      	movs	r3, #10
 800117a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_DAC1_Init+0x5c>)
 8001190:	f003 fc82 	bl	8004a98 <HAL_DAC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800119a:	f000 fe7f 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	240002d4 	.word	0x240002d4
 80011ac:	40007400 	.word	0x40007400

080011b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_I2C1_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <MX_I2C1_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_I2C1_Init+0x74>)
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <MX_I2C1_Init+0x7c>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_I2C1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_I2C1_Init+0x74>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_I2C1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <MX_I2C1_Init+0x74>)
 80011ec:	f006 fe30 	bl	8007e50 <HAL_I2C_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011f6:	f000 fe51 	bl	8001e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <MX_I2C1_Init+0x74>)
 80011fe:	f006 fec3 	bl	8007f88 <HAL_I2CEx_ConfigAnalogFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 fe48 	bl	8001e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_I2C1_Init+0x74>)
 8001210:	f006 ff05 	bl	800801e <HAL_I2CEx_ConfigDigitalFilter>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 fe3f 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24000360 	.word	0x24000360
 8001228:	40005400 	.word	0x40005400
 800122c:	00707cbb 	.word	0x00707cbb

08001230 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001236:	4a29      	ldr	r2, [pc, #164]	; (80012dc <MX_SPI2_Init+0xac>)
 8001238:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <MX_SPI2_Init+0xa8>)
 800123c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001240:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001244:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001248:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_SPI2_Init+0xa8>)
 800124c:	220f      	movs	r2, #15
 800124e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_SPI2_Init+0xa8>)
 800125e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001262:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001266:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800126a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_SPI2_Init+0xa8>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_SPI2_Init+0xa8>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_SPI2_Init+0xa8>)
 800128e:	2200      	movs	r2, #0
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_SPI2_Init+0xa8>)
 8001294:	2200      	movs	r2, #0
 8001296:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_SPI2_Init+0xa8>)
 800129a:	2200      	movs	r2, #0
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_SPI2_Init+0xa8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_SPI2_Init+0xa8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_SPI2_Init+0xa8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_SPI2_Init+0xa8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_SPI2_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_SPI2_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_SPI2_Init+0xa8>)
 80012c4:	f00a fc58 	bl	800bb78 <HAL_SPI_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80012ce:	f000 fde5 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	240003b4 	.word	0x240003b4
 80012dc:	40003800 	.word	0x40003800

080012e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b09a      	sub	sp, #104	; 0x68
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]
 8001312:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	222c      	movs	r2, #44	; 0x2c
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f012 fa56 	bl	80137cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <MX_TIM1_Init+0x154>)
 8001322:	4a45      	ldr	r2, [pc, #276]	; (8001438 <MX_TIM1_Init+0x158>)
 8001324:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8001326:	4b43      	ldr	r3, [pc, #268]	; (8001434 <MX_TIM1_Init+0x154>)
 8001328:	227f      	movs	r2, #127	; 0x7f
 800132a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <MX_TIM1_Init+0x154>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001332:	4b40      	ldr	r3, [pc, #256]	; (8001434 <MX_TIM1_Init+0x154>)
 8001334:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001338:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <MX_TIM1_Init+0x154>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001340:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <MX_TIM1_Init+0x154>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <MX_TIM1_Init+0x154>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800134c:	4839      	ldr	r0, [pc, #228]	; (8001434 <MX_TIM1_Init+0x154>)
 800134e:	f00a fd52 	bl	800bdf6 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001358:	f000 fda0 	bl	8001e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001366:	4619      	mov	r1, r3
 8001368:	4832      	ldr	r0, [pc, #200]	; (8001434 <MX_TIM1_Init+0x154>)
 800136a:	f00b fb91 	bl	800ca90 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001374:	f000 fd92 	bl	8001e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001378:	482e      	ldr	r0, [pc, #184]	; (8001434 <MX_TIM1_Init+0x154>)
 800137a:	f00a fffd 	bl	800c378 <HAL_TIM_PWM_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001384:	f000 fd8a 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001394:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001398:	4619      	mov	r1, r3
 800139a:	4826      	ldr	r0, [pc, #152]	; (8001434 <MX_TIM1_Init+0x154>)
 800139c:	f00c f8ce 	bl	800d53c <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013a6:	f000 fd79 	bl	8001e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	; 0x60
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80013ae:	f240 13df 	movw	r3, #479	; 0x1df
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4818      	ldr	r0, [pc, #96]	; (8001434 <MX_TIM1_Init+0x154>)
 80013d2:	f00b fa49 	bl	800c868 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80013dc:	f000 fd5e 	bl	8001e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM1_Init+0x154>)
 8001416:	f00c f91f 	bl	800d658 <HAL_TIMEx_ConfigBreakDeadTime>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001420:	f000 fd3c 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM1_Init+0x154>)
 8001426:	f001 f847 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 800142a:	bf00      	nop
 800142c:	3768      	adds	r7, #104	; 0x68
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2400043c 	.word	0x2400043c
 8001438:	40010000 	.word	0x40010000

0800143c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	; 0x38
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001474:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001478:	223f      	movs	r2, #63	; 0x3f
 800147a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_TIM2_Init+0xe8>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001484:	f640 4234 	movw	r2, #3124	; 0xc34
 8001488:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_TIM2_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001496:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001498:	f00a fcad 	bl	800bdf6 <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014a2:	f000 fcfb 	bl	8001e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b0:	4619      	mov	r1, r3
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_TIM2_Init+0xe8>)
 80014b4:	f00b faec 	bl	800ca90 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014be:	f000 fced 	bl	8001e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <MX_TIM2_Init+0xe8>)
 80014c4:	f00a ff58 	bl	800c378 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014ce:	f000 fce5 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014d2:	2320      	movs	r3, #32
 80014d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4810      	ldr	r0, [pc, #64]	; (8001524 <MX_TIM2_Init+0xe8>)
 80014e2:	f00c f82b 	bl	800d53c <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014ec:	f000 fcd6 	bl	8001e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	220c      	movs	r2, #12
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001508:	f00b f9ae 	bl	800c868 <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001512:	f000 fcc3 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001518:	f000 ffce 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	24000488 	.word	0x24000488

08001528 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM3_Init+0x94>)
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <MX_TIM3_Init+0x98>)
 800154a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_TIM3_Init+0x94>)
 800154e:	223f      	movs	r2, #63	; 0x3f
 8001550:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM3_Init+0x94>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_TIM3_Init+0x94>)
 800155a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800155e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_TIM3_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_TIM3_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <MX_TIM3_Init+0x94>)
 800156e:	f00a fc42 	bl	800bdf6 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001578:	f000 fc90 	bl	8001e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_TIM3_Init+0x94>)
 800158a:	f00b fa81 	bl	800ca90 <HAL_TIM_ConfigClockSource>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001594:	f000 fc82 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_TIM3_Init+0x94>)
 80015a6:	f00b ffc9 	bl	800d53c <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015b0:	f000 fc74 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	240004d4 	.word	0x240004d4
 80015c0:	40000400 	.word	0x40000400

080015c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015ca:	4a23      	ldr	r2, [pc, #140]	; (8001658 <MX_USART1_UART_Init+0x94>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015d0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80015d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_USART1_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x90>)
 800160e:	f00c f8bf 	bl	800d790 <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001618:	f000 fc40 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001620:	f00e fc19 	bl	800fe56 <HAL_UARTEx_SetTxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800162a:	f000 fc37 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001632:	f00e fc4e 	bl	800fed2 <HAL_UARTEx_SetRxFifoThreshold>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800163c:	f000 fc2e 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_USART1_UART_Init+0x90>)
 8001642:	f00e fbcf 	bl	800fde4 <HAL_UARTEx_DisableFifoMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800164c:	f000 fc26 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24000520 	.word	0x24000520
 8001658:	40011000 	.word	0x40011000

0800165c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_DMA_Init+0x5c>)
 8001664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <MX_DMA_Init+0x5c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_DMA_Init+0x5c>)
 8001674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2105      	movs	r1, #5
 8001684:	200b      	movs	r0, #11
 8001686:	f002 ffaf 	bl	80045e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800168a:	200b      	movs	r0, #11
 800168c:	f002 ffc6 	bl	800461c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2105      	movs	r1, #5
 8001694:	200c      	movs	r0, #12
 8001696:	f002 ffa7 	bl	80045e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800169a:	200c      	movs	r0, #12
 800169c:	f002 ffbe 	bl	800461c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2105      	movs	r1, #5
 80016a4:	2010      	movs	r0, #16
 80016a6:	f002 ff9f 	bl	80045e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016aa:	2010      	movs	r0, #16
 80016ac:	f002 ffb6 	bl	800461c <HAL_NVIC_EnableIRQ>

}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58024400 	.word	0x58024400

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <MX_GPIO_Init+0xc8>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <MX_GPIO_Init+0xc8>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <MX_GPIO_Init+0xc8>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_GPIO_Init+0xc8>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	4a23      	ldr	r2, [pc, #140]	; (8001784 <MX_GPIO_Init+0xc8>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_GPIO_Init+0xc8>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_GPIO_Init+0xc8>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <MX_GPIO_Init+0xc8>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_GPIO_Init+0xc8>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_GPIO_Init+0xcc>)
 8001734:	f006 fb72 	bl	8007e1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2164      	movs	r1, #100	; 0x64
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <MX_GPIO_Init+0xd0>)
 800173e:	f006 fb6d 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001742:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001746:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4619      	mov	r1, r3
 800175a:	480b      	ldr	r0, [pc, #44]	; (8001788 <MX_GPIO_Init+0xcc>)
 800175c:	f006 f9ae 	bl	8007abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4619      	mov	r1, r3
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_GPIO_Init+0xd0>)
 8001778:	f006 f9a0 	bl	8007abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58024400 	.word	0x58024400
 8001788:	58020800 	.word	0x58020800
 800178c:	58020400 	.word	0x58020400

08001790 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001798:	f44f 729c 	mov.w	r2, #312	; 0x138
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800179e:	210c      	movs	r1, #12
 80017a0:	4818      	ldr	r0, [pc, #96]	; (8001804 <system_setup+0x74>)
 80017a2:	f00a fe4b 	bl	800c43c <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80017a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017ae:	4816      	ldr	r0, [pc, #88]	; (8001808 <system_setup+0x78>)
 80017b0:	f002 fd20 	bl	80041f4 <HAL_ADCEx_Calibration_Start>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80017ba:	f000 fb6f 	bl	8001e9c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80017be:	220b      	movs	r2, #11
 80017c0:	4912      	ldr	r1, [pc, #72]	; (800180c <system_setup+0x7c>)
 80017c2:	4811      	ldr	r0, [pc, #68]	; (8001808 <system_setup+0x78>)
 80017c4:	f001 fdf4 	bl	80033b0 <HAL_ADC_Start_DMA>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80017ce:	f000 fb65 	bl	8001e9c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80017d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <system_setup+0x80>)
 80017dc:	f002 fd0a 	bl	80041f4 <HAL_ADCEx_Calibration_Start>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80017e6:	f000 fb59 	bl	8001e9c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80017ea:	2204      	movs	r2, #4
 80017ec:	4909      	ldr	r1, [pc, #36]	; (8001814 <system_setup+0x84>)
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <system_setup+0x80>)
 80017f0:	f001 fdde 	bl	80033b0 <HAL_ADC_Start_DMA>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80017fa:	f000 fb4f 	bl	8001e9c <Error_Handler>
	  	}
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	24000488 	.word	0x24000488
 8001808:	2400011c 	.word	0x2400011c
 800180c:	24000640 	.word	0x24000640
 8001810:	24000180 	.word	0x24000180
 8001814:	24000660 	.word	0x24000660

08001818 <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	4613      	mov	r3, r2
 8001824:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	4618      	mov	r0, r3
 800182a:	f011 ffb1 	bl	8013790 <malloc>
 800182e:	4603      	mov	r3, r0
 8001830:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f011 ffb9 	bl	80137b0 <memcpy>
    packet.size = size;
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	461a      	mov	r2, r3
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800184e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001862:	2006      	movs	r0, #6
 8001864:	f011 ff94 	bl	8013790 <malloc>
 8001868:	4603      	mov	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800186c:	2002      	movs	r0, #2
 800186e:	f011 ff8f 	bl	8013790 <malloc>
 8001872:	4603      	mov	r3, r0
 8001874:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	220e      	movs	r2, #14
 800187a:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	220d      	movs	r2, #13
 8001882:	701a      	strb	r2, [r3, #0]
#else
	receive_spi(hspi1, pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	22bb      	movs	r2, #187	; 0xbb
 8001888:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	22bb      	movs	r2, #187	; 0xbb
 8001890:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3302      	adds	r3, #2
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3303      	adds	r3, #3
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <sample_pmt+0x8c>)
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3304      	adds	r3, #4
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3305      	adds	r3, #5
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	7852      	ldrb	r2, [r2, #1]
 80018b6:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80018b8:	463b      	mov	r3, r7
 80018ba:	2206      	movs	r2, #6
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ffaa 	bl	8001818 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <sample_pmt+0x90>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	4639      	mov	r1, r7
 80018ca:	2300      	movs	r3, #0
 80018cc:	2200      	movs	r2, #0
 80018ce:	f00e fe45 	bl	801055c <osMessageQueuePut>
	free(buffer);
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f011 ff64 	bl	80137a0 <free>
	free(pmt_spi);
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	f011 ff61 	bl	80137a0 <free>
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	240005cc 	.word	0x240005cc
 80018ec:	240005c8 	.word	0x240005c8

080018f0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80018f6:	200e      	movs	r0, #14
 80018f8:	f011 ff4a 	bl	8013790 <malloc>
 80018fc:	4603      	mov	r3, r0
 80018fe:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001900:	2002      	movs	r0, #2
 8001902:	f011 ff45 	bl	8013790 <malloc>
 8001906:	4603      	mov	r3, r0
 8001908:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 800190a:	2004      	movs	r0, #4
 800190c:	f011 ff40 	bl	8013790 <malloc>
 8001910:	4603      	mov	r3, r0
 8001912:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	220e      	movs	r2, #14
 8001918:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	3301      	adds	r3, #1
 800191e:	220d      	movs	r2, #13
 8001920:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	22ee      	movs	r2, #238	; 0xee
 8001926:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3302      	adds	r3, #2
 800192c:	22dd      	movs	r2, #221	; 0xdd
 800192e:	801a      	strh	r2, [r3, #0]
#else
	receive_spi(hspi2);
	reveice_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	22aa      	movs	r2, #170	; 0xaa
 8001934:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	22aa      	movs	r2, #170	; 0xaa
 800193c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3302      	adds	r3, #2
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3303      	adds	r3, #3
 800194a:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <sample_erpa+0x104>)
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3304      	adds	r3, #4
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3305      	adds	r3, #5
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b29a      	uxth	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3306      	adds	r3, #6
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3307      	adds	r3, #7
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3302      	adds	r3, #2
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	b29a      	uxth	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3308      	adds	r3, #8
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3302      	adds	r3, #2
 8001992:	881a      	ldrh	r2, [r3, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3309      	adds	r3, #9
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	330a      	adds	r3, #10
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	330b      	adds	r3, #11
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	330c      	adds	r3, #12
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	330d      	adds	r3, #13
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	7852      	ldrb	r2, [r2, #1]
 80019be:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	220e      	movs	r2, #14
 80019c4:	6979      	ldr	r1, [r7, #20]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff26 	bl	8001818 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <sample_erpa+0x108>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	1d39      	adds	r1, r7, #4
 80019d2:	2300      	movs	r3, #0
 80019d4:	2200      	movs	r2, #0
 80019d6:	f00e fdc1 	bl	801055c <osMessageQueuePut>
	free(buffer);
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f011 fee0 	bl	80137a0 <free>
	free(erpa_spi);
 80019e0:	6938      	ldr	r0, [r7, #16]
 80019e2:	f011 fedd 	bl	80137a0 <free>
	free(erpa_adc);
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f011 feda 	bl	80137a0 <free>
}
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	240005cd 	.word	0x240005cd
 80019f8:	240005c8 	.word	0x240005c8

080019fc <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001a02:	2026      	movs	r0, #38	; 0x26
 8001a04:	f011 fec4 	bl	8013790 <malloc>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001a0c:	2008      	movs	r0, #8
 8001a0e:	f011 febf 	bl	8013790 <malloc>
 8001a12:	4603      	mov	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001a16:	2012      	movs	r0, #18
 8001a18:	f011 feba 	bl	8013790 <malloc>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001a20:	2008      	movs	r0, #8
 8001a22:	f011 feb5 	bl	8013790 <malloc>
 8001a26:	4603      	mov	r3, r0
 8001a28:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2211      	movs	r2, #17
 8001a2e:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3302      	adds	r3, #2
 8001a34:	2212      	movs	r2, #18
 8001a36:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	2213      	movs	r2, #19
 8001a3e:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	3306      	adds	r3, #6
 8001a44:	2214      	movs	r2, #20
 8001a46:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	22a0      	movs	r2, #160	; 0xa0
 8001a4c:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3302      	adds	r3, #2
 8001a52:	22a1      	movs	r2, #161	; 0xa1
 8001a54:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	22a2      	movs	r2, #162	; 0xa2
 8001a5c:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3306      	adds	r3, #6
 8001a62:	22a3      	movs	r2, #163	; 0xa3
 8001a64:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3308      	adds	r3, #8
 8001a6a:	22a4      	movs	r2, #164	; 0xa4
 8001a6c:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	330a      	adds	r3, #10
 8001a72:	22a5      	movs	r2, #165	; 0xa5
 8001a74:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	22a6      	movs	r2, #166	; 0xa6
 8001a7c:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	330e      	adds	r3, #14
 8001a82:	22a7      	movs	r2, #167	; 0xa7
 8001a84:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3310      	adds	r3, #16
 8001a8a:	22a8      	movs	r2, #168	; 0xa8
 8001a8c:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	22b0      	movs	r2, #176	; 0xb0
 8001a92:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3302      	adds	r3, #2
 8001a98:	22b1      	movs	r2, #177	; 0xb1
 8001a9a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	22b2      	movs	r2, #178	; 0xb2
 8001aa2:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	22b3      	movs	r2, #179	; 0xb3
 8001aaa:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	22cc      	movs	r2, #204	; 0xcc
 8001ab0:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	22cc      	movs	r2, #204	; 0xcc
 8001ab8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3302      	adds	r3, #2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	4a97      	ldr	r2, [pc, #604]	; (8001d24 <sample_hk+0x328>)
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3305      	adds	r3, #5
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3306      	adds	r3, #6
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3307      	adds	r3, #7
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0e:	121a      	asrs	r2, r3, #8
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3308      	adds	r3, #8
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3309      	adds	r3, #9
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2e:	121a      	asrs	r2, r3, #8
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	330a      	adds	r3, #10
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	330b      	adds	r3, #11
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b50:	121a      	asrs	r2, r3, #8
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	330c      	adds	r3, #12
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	330d      	adds	r3, #13
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	3306      	adds	r3, #6
 8001b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b72:	121a      	asrs	r2, r3, #8
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	330e      	adds	r3, #14
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	3306      	adds	r3, #6
 8001b80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	330f      	adds	r3, #15
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3310      	adds	r3, #16
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	881a      	ldrh	r2, [r3, #0]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3311      	adds	r3, #17
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3302      	adds	r3, #2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3312      	adds	r3, #18
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3313      	adds	r3, #19
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	881a      	ldrh	r2, [r3, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3315      	adds	r3, #21
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3306      	adds	r3, #6
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3316      	adds	r3, #22
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3306      	adds	r3, #6
 8001bfe:	881a      	ldrh	r2, [r3, #0]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3317      	adds	r3, #23
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3318      	adds	r3, #24
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3319      	adds	r3, #25
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	331a      	adds	r3, #26
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	881a      	ldrh	r2, [r3, #0]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	331b      	adds	r3, #27
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	331c      	adds	r3, #28
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	881a      	ldrh	r2, [r3, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	331d      	adds	r3, #29
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	330e      	adds	r3, #14
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	331e      	adds	r3, #30
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	330e      	adds	r3, #14
 8001c7e:	881a      	ldrh	r2, [r3, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	331f      	adds	r3, #31
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3320      	adds	r3, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3321      	adds	r3, #33	; 0x21
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3308      	adds	r3, #8
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3322      	adds	r3, #34	; 0x22
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	881a      	ldrh	r2, [r3, #0]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3323      	adds	r3, #35	; 0x23
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	330a      	adds	r3, #10
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3324      	adds	r3, #36	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	330a      	adds	r3, #10
 8001cde:	881a      	ldrh	r2, [r3, #0]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3325      	adds	r3, #37	; 0x25
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2226      	movs	r2, #38	; 0x26
 8001cec:	6979      	ldr	r1, [r7, #20]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fd92 	bl	8001818 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <sample_hk+0x32c>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	4639      	mov	r1, r7
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f00e fc2d 	bl	801055c <osMessageQueuePut>
	free(buffer);
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f011 fd4c 	bl	80137a0 <free>
	free(hk_i2c);
 8001d08:	6938      	ldr	r0, [r7, #16]
 8001d0a:	f011 fd49 	bl	80137a0 <free>
	free(hk_adc1);
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f011 fd46 	bl	80137a0 <free>
	free(hk_adc3);
 8001d14:	68b8      	ldr	r0, [r7, #8]
 8001d16:	f011 fd43 	bl	80137a0 <free>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	240005ce 	.word	0x240005ce
 8001d28:	240005c8 	.word	0x240005c8

08001d2c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <PMT_init+0x38>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	f00e fb32 	bl	80103a8 <osEventFlagsWait>
		if(PMT_ON){
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <PMT_init+0x3c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <PMT_init+0x30>
	    sample_pmt();
 8001d4c:	f7ff fd86 	bl	800185c <sample_pmt>
		pmt_seq++;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <PMT_init+0x40>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <PMT_init+0x40>)
 8001d5a:	701a      	strb	r2, [r3, #0]

		}
		osThreadYield();
 8001d5c:	f00e fa66 	bl	801022c <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001d60:	e7e8      	b.n	8001d34 <PMT_init+0x8>
 8001d62:	bf00      	nop
 8001d64:	240005d8 	.word	0x240005d8
 8001d68:	240005cf 	.word	0x240005cf
 8001d6c:	240005cc 	.word	0x240005cc

08001d70 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <ERPA_init+0x38>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d80:	2200      	movs	r2, #0
 8001d82:	2102      	movs	r1, #2
 8001d84:	f00e fb10 	bl	80103a8 <osEventFlagsWait>
	  if (ERPA_ON)
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <ERPA_init+0x3c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8001d90:	f7ff fdae 	bl	80018f0 <sample_erpa>
		erpa_seq++;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <ERPA_init+0x40>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <ERPA_init+0x40>)
 8001d9e:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8001da0:	f00e fa44 	bl	801022c <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001da4:	e7e8      	b.n	8001d78 <ERPA_init+0x8>
 8001da6:	bf00      	nop
 8001da8:	240005d8 	.word	0x240005d8
 8001dac:	240005d0 	.word	0x240005d0
 8001db0:	240005cd 	.word	0x240005cd

08001db4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HK_init+0x38>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	f00e faee 	bl	80103a8 <osEventFlagsWait>
	  if(HK_ON)
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HK_init+0x3c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HK_init+0x30>
	  {
	    sample_hk();
 8001dd4:	f7ff fe12 	bl	80019fc <sample_hk>
		hk_seq++;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HK_init+0x40>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HK_init+0x40>)
 8001de2:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8001de4:	f00e fa22 	bl	801022c <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001de8:	e7e8      	b.n	8001dbc <HK_init+0x8>
 8001dea:	bf00      	nop
 8001dec:	240005d8 	.word	0x240005d8
 8001df0:	240005d1 	.word	0x240005d1
 8001df4:	240005ce 	.word	0x240005ce

08001df8 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001e00:	2201      	movs	r2, #1
 8001e02:	4904      	ldr	r1, [pc, #16]	; (8001e14 <UART_RX_init+0x1c>)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <UART_RX_init+0x20>)
 8001e06:	f00b fda1 	bl	800d94c <HAL_UART_Receive_IT>
		osDelay(5);
 8001e0a:	2005      	movs	r0, #5
 8001e0c:	f00e fa2e 	bl	801026c <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001e10:	e7f6      	b.n	8001e00 <UART_RX_init+0x8>
 8001e12:	bf00      	nop
 8001e14:	240005dc 	.word	0x240005dc
 8001e18:	24000520 	.word	0x24000520

08001e1c <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <UART_TX_init+0x50>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f107 010c 	add.w	r1, r7, #12
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e30:	2200      	movs	r2, #0
 8001e32:	f00e fbf3 	bl	801061c <osMessageQueueGet>
 8001e36:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d113      	bne.n	8001e66 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <UART_TX_init+0x50>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00e fc48 	bl	80106d8 <osMessageQueueGetCount>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <UART_TX_init+0x54>)
 8001e4e:	f011 fda5 	bl	801399c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8001e52:	68f9      	ldr	r1, [r7, #12]
 8001e54:	8a3a      	ldrh	r2, [r7, #16]
 8001e56:	2364      	movs	r3, #100	; 0x64
 8001e58:	4806      	ldr	r0, [pc, #24]	; (8001e74 <UART_TX_init+0x58>)
 8001e5a:	f00b fce9 	bl	800d830 <HAL_UART_Transmit>
	       free(msg.array);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f011 fc9d 	bl	80137a0 <free>
	   }
	   osThreadYield();
 8001e66:	f00e f9e1 	bl	801022c <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001e6a:	e7db      	b.n	8001e24 <UART_TX_init+0x8>
 8001e6c:	240005c8 	.word	0x240005c8
 8001e70:	080149f0 	.word	0x080149f0
 8001e74:	24000520 	.word	0x24000520

08001e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e8a:	f000 fe9f 	bl	8002bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40001000 	.word	0x40001000

08001e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ea4:	e7fe      	b.n	8001ea4 <Error_Handler+0x8>
	...

08001ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x38>)
 8001eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_MspInit+0x38>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_MspInit+0x38>)
 8001ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f06f 0001 	mvn.w	r0, #1
 8001ed4:	f002 fb88 	bl	80045e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58024400 	.word	0x58024400

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7b      	ldr	r2, [pc, #492]	; (80020f0 <HAL_ADC_MspInit+0x20c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f040 8091 	bne.w	800202a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f08:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f0e:	4a79      	ldr	r2, [pc, #484]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f18:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f26:	4b73      	ldr	r3, [pc, #460]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	4a71      	ldr	r2, [pc, #452]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f36:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f54:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	4a62      	ldr	r2, [pc, #392]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001f80:	2333      	movs	r3, #51	; 0x33
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f84:	2303      	movs	r3, #3
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	4859      	ldr	r0, [pc, #356]	; (80020f8 <HAL_ADC_MspInit+0x214>)
 8001f94:	f005 fd92 	bl	8007abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001f98:	23ce      	movs	r3, #206	; 0xce
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4854      	ldr	r0, [pc, #336]	; (80020fc <HAL_ADC_MspInit+0x218>)
 8001fac:	f005 fd86 	bl	8007abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	484f      	ldr	r0, [pc, #316]	; (8002100 <HAL_ADC_MspInit+0x21c>)
 8001fc4:	f005 fd7a 	bl	8007abc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fca:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_ADC_MspInit+0x224>)
 8001fcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fce:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fd0:	2209      	movs	r2, #9
 8001fd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd4:	4b4b      	ldr	r3, [pc, #300]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fda:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fe0:	4b48      	ldr	r3, [pc, #288]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff0:	4b44      	ldr	r3, [pc, #272]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ff8:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8001ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ffe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800200c:	483d      	ldr	r0, [pc, #244]	; (8002104 <HAL_ADC_MspInit+0x220>)
 800200e:	f002 ff19 	bl	8004e44 <HAL_DMA_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002018:	f7ff ff40 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a39      	ldr	r2, [pc, #228]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002020:	64da      	str	r2, [r3, #76]	; 0x4c
 8002022:	4a38      	ldr	r2, [pc, #224]	; (8002104 <HAL_ADC_MspInit+0x220>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002028:	e05e      	b.n	80020e8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a37      	ldr	r2, [pc, #220]	; (800210c <HAL_ADC_MspInit+0x228>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d159      	bne.n	80020e8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002034:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	4a2e      	ldr	r2, [pc, #184]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 800203c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_ADC_MspInit+0x210>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002070:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002074:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002078:	f000 fdd4 	bl	8002c24 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800207c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002080:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002084:	f000 fdce 	bl	8002c24 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002088:	4b21      	ldr	r3, [pc, #132]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_ADC_MspInit+0x230>)
 800208c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 8002090:	2273      	movs	r2, #115	; 0x73
 8002092:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020cc:	4810      	ldr	r0, [pc, #64]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020ce:	f002 feb9 	bl	8004e44 <HAL_DMA_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80020d8:	f7ff fee0 	bl	8001e9c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <HAL_ADC_MspInit+0x22c>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020e8:	bf00      	nop
 80020ea:	3738      	adds	r7, #56	; 0x38
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40022000 	.word	0x40022000
 80020f4:	58024400 	.word	0x58024400
 80020f8:	58020800 	.word	0x58020800
 80020fc:	58020000 	.word	0x58020000
 8002100:	58020400 	.word	0x58020400
 8002104:	240001e4 	.word	0x240001e4
 8002108:	40020010 	.word	0x40020010
 800210c:	58026000 	.word	0x58026000
 8002110:	2400025c 	.word	0x2400025c
 8002114:	40020028 	.word	0x40020028

08002118 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a34      	ldr	r2, [pc, #208]	; (8002208 <HAL_DAC_MspInit+0xf0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d161      	bne.n	80021fe <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_DAC_MspInit+0xf4>)
 800213c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002140:	4a32      	ldr	r2, [pc, #200]	; (800220c <HAL_DAC_MspInit+0xf4>)
 8002142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002146:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800214a:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_DAC_MspInit+0xf4>)
 800214c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_DAC_MspInit+0xf4>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_DAC_MspInit+0xf4>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <HAL_DAC_MspInit+0xf4>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002176:	2310      	movs	r3, #16
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217a:	2303      	movs	r3, #3
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4821      	ldr	r0, [pc, #132]	; (8002210 <HAL_DAC_MspInit+0xf8>)
 800218a:	f005 fc97 	bl	8007abc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 8002190:	4a21      	ldr	r2, [pc, #132]	; (8002218 <HAL_DAC_MspInit+0x100>)
 8002192:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 8002196:	2243      	movs	r2, #67	; 0x43
 8002198:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 800219c:	2240      	movs	r2, #64	; 0x40
 800219e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ac:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021bc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80021d2:	4810      	ldr	r0, [pc, #64]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021d4:	f002 fe36 	bl	8004e44 <HAL_DMA_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80021de:	f7ff fe5d 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_DAC_MspInit+0xfc>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2105      	movs	r1, #5
 80021f2:	2036      	movs	r0, #54	; 0x36
 80021f4:	f002 f9f8 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021f8:	2036      	movs	r0, #54	; 0x36
 80021fa:	f002 fa0f 	bl	800461c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40007400 	.word	0x40007400
 800220c:	58024400 	.word	0x58024400
 8002210:	58020000 	.word	0x58020000
 8002214:	240002e8 	.word	0x240002e8
 8002218:	40020088 	.word	0x40020088

0800221c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0ba      	sub	sp, #232	; 0xe8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	22c0      	movs	r2, #192	; 0xc0
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f011 fac5 	bl	80137cc <memset>
  if(hi2c->Instance==I2C1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_I2C_MspInit+0xc8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d146      	bne.n	80022da <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800224c:	f04f 0208 	mov.w	r2, #8
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4618      	mov	r0, r3
 8002264:	f006 ff8a 	bl	800917c <HAL_RCCEx_PeriphCLKConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800226e:	f7ff fe15 	bl	8001e9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_I2C_MspInit+0xcc>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_I2C_MspInit+0xcc>)
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_I2C_MspInit+0xcc>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002290:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002298:	2312      	movs	r3, #18
 800229a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022aa:	2304      	movs	r3, #4
 80022ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022b4:	4619      	mov	r1, r3
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <HAL_I2C_MspInit+0xd0>)
 80022b8:	f005 fc00 	bl	8007abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_I2C_MspInit+0xcc>)
 80022be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_I2C_MspInit+0xcc>)
 80022c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_I2C_MspInit+0xcc>)
 80022ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	37e8      	adds	r7, #232	; 0xe8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40005400 	.word	0x40005400
 80022e8:	58024400 	.word	0x58024400
 80022ec:	58020400 	.word	0x58020400

080022f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0ba      	sub	sp, #232	; 0xe8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	22c0      	movs	r2, #192	; 0xc0
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f011 fa5b 	bl	80137cc <memset>
  if(hspi->Instance==SPI2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d145      	bne.n	80023ac <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800232c:	2300      	movs	r3, #0
 800232e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	4618      	mov	r0, r3
 8002336:	f006 ff21 	bl	800917c <HAL_RCCEx_PeriphCLKConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002340:	f7ff fdac 	bl	8001e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 8002346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002350:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 8002356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002368:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 8002374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002380:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800239a:	2305      	movs	r3, #5
 800239c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 80023a8:	f005 fb88 	bl	8007abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023ac:	bf00      	nop
 80023ae:	37e8      	adds	r7, #232	; 0xe8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40003800 	.word	0x40003800
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58020400 	.word	0x58020400

080023c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a37      	ldr	r2, [pc, #220]	; (80024ac <HAL_TIM_Base_MspInit+0xec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d12f      	bne.n	8002432 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 80023d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023d8:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2105      	movs	r1, #5
 80023f4:	2018      	movs	r0, #24
 80023f6:	f002 f8f7 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80023fa:	2018      	movs	r0, #24
 80023fc:	f002 f90e 	bl	800461c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2105      	movs	r1, #5
 8002404:	2019      	movs	r0, #25
 8002406:	f002 f8ef 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800240a:	2019      	movs	r0, #25
 800240c:	f002 f906 	bl	800461c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2105      	movs	r1, #5
 8002414:	201a      	movs	r0, #26
 8002416:	f002 f8e7 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800241a:	201a      	movs	r0, #26
 800241c:	f002 f8fe 	bl	800461c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2105      	movs	r1, #5
 8002424:	201b      	movs	r0, #27
 8002426:	f002 f8df 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800242a:	201b      	movs	r0, #27
 800242c:	f002 f8f6 	bl	800461c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002430:	e038      	b.n	80024a4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d117      	bne.n	800246c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 800243e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002442:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 800244e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2105      	movs	r1, #5
 800245e:	201c      	movs	r0, #28
 8002460:	f002 f8c2 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002464:	201c      	movs	r0, #28
 8002466:	f002 f8d9 	bl	800461c <HAL_NVIC_EnableIRQ>
}
 800246a:	e01b      	b.n	80024a4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d116      	bne.n	80024a4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 8002478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_TIM_Base_MspInit+0xf0>)
 8002488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2105      	movs	r1, #5
 8002498:	201d      	movs	r0, #29
 800249a:	f002 f8a5 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800249e:	201d      	movs	r0, #29
 80024a0:	f002 f8bc 	bl	800461c <HAL_NVIC_EnableIRQ>
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40010000 	.word	0x40010000
 80024b0:	58024400 	.word	0x58024400
 80024b4:	40000400 	.word	0x40000400

080024b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <HAL_TIM_MspPostInit+0xb8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d120      	bne.n	800251c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_TIM_MspPostInit+0xbc>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <HAL_TIM_MspPostInit+0xbc>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_TIM_MspPostInit+0xbc>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800250a:	2301      	movs	r3, #1
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	4818      	ldr	r0, [pc, #96]	; (8002578 <HAL_TIM_MspPostInit+0xc0>)
 8002516:	f005 fad1 	bl	8007abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800251a:	e024      	b.n	8002566 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d11f      	bne.n	8002566 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_TIM_MspPostInit+0xbc>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_TIM_MspPostInit+0xbc>)
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_TIM_MspPostInit+0xbc>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002556:	2301      	movs	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	4806      	ldr	r0, [pc, #24]	; (800257c <HAL_TIM_MspPostInit+0xc4>)
 8002562:	f005 faab 	bl	8007abc <HAL_GPIO_Init>
}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	58024400 	.word	0x58024400
 8002578:	58020000 	.word	0x58020000
 800257c:	58020400 	.word	0x58020400

08002580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0ba      	sub	sp, #232	; 0xe8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	22c0      	movs	r2, #192	; 0xc0
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f011 f913 	bl	80137cc <memset>
  if(huart->Instance==USART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <HAL_UART_MspInit+0xd8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d14e      	bne.n	800264e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025b0:	f04f 0201 	mov.w	r2, #1
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	4618      	mov	r0, r3
 80025c8:	f006 fdd8 	bl	800917c <HAL_RCCEx_PeriphCLKConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025d2:	f7ff fc63 	bl	8001e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_UART_MspInit+0xdc>)
 80025d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_UART_MspInit+0xdc>)
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_UART_MspInit+0xdc>)
 80025e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_UART_MspInit+0xdc>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_UART_MspInit+0xdc>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_UART_MspInit+0xdc>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800262c:	2307      	movs	r3, #7
 800262e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002636:	4619      	mov	r1, r3
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <HAL_UART_MspInit+0xe0>)
 800263a:	f005 fa3f 	bl	8007abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2105      	movs	r1, #5
 8002642:	2025      	movs	r0, #37	; 0x25
 8002644:	f001 ffd0 	bl	80045e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002648:	2025      	movs	r0, #37	; 0x25
 800264a:	f001 ffe7 	bl	800461c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	37e8      	adds	r7, #232	; 0xe8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40011000 	.word	0x40011000
 800265c:	58024400 	.word	0x58024400
 8002660:	58020000 	.word	0x58020000

08002664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b090      	sub	sp, #64	; 0x40
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	d827      	bhi.n	80026c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002672:	2200      	movs	r2, #0
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	2036      	movs	r0, #54	; 0x36
 8002678:	f001 ffb6 	bl	80045e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800267c:	2036      	movs	r0, #54	; 0x36
 800267e:	f001 ffcd 	bl	800461c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002682:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_InitTick+0xc4>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <HAL_InitTick+0xc8>)
 800268a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800268e:	4a27      	ldr	r2, [pc, #156]	; (800272c <HAL_InitTick+0xc8>)
 8002690:	f043 0310 	orr.w	r3, r3, #16
 8002694:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002698:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_InitTick+0xc8>)
 800269a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026a6:	f107 0210 	add.w	r2, r7, #16
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f006 fd21 	bl	80090f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_InitTick+0x6a>
 80026c0:	e001      	b.n	80026c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e02b      	b.n	800271e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026c6:	f006 fceb 	bl	80090a0 <HAL_RCC_GetPCLK1Freq>
 80026ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80026cc:	e004      	b.n	80026d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026ce:	f006 fce7 	bl	80090a0 <HAL_RCC_GetPCLK1Freq>
 80026d2:	4603      	mov	r3, r0
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <HAL_InitTick+0xcc>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	0c9b      	lsrs	r3, r3, #18
 80026e2:	3b01      	subs	r3, #1
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_InitTick+0xd0>)
 80026e8:	4a13      	ldr	r2, [pc, #76]	; (8002738 <HAL_InitTick+0xd4>)
 80026ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_InitTick+0xd0>)
 80026ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026f4:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_InitTick+0xd0>)
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_InitTick+0xd0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_InitTick+0xd0>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002706:	480b      	ldr	r0, [pc, #44]	; (8002734 <HAL_InitTick+0xd0>)
 8002708:	f009 fb75 	bl	800bdf6 <HAL_TIM_Base_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002712:	4808      	ldr	r0, [pc, #32]	; (8002734 <HAL_InitTick+0xd0>)
 8002714:	f009 fc5e 	bl	800bfd4 <HAL_TIM_Base_Start_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	e000      	b.n	800271e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	3740      	adds	r7, #64	; 0x40
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	24000090 	.word	0x24000090
 800272c:	58024400 	.word	0x58024400
 8002730:	431bde83 	.word	0x431bde83
 8002734:	24000668 	.word	0x24000668
 8002738:	40001000 	.word	0x40001000

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002740:	e7fe      	b.n	8002740 <NMI_Handler+0x4>

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <DMA1_Stream0_IRQHandler+0x10>)
 800276e:	f003 fe93 	bl	8006498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	240001e4 	.word	0x240001e4

0800277c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <DMA1_Stream1_IRQHandler+0x10>)
 8002782:	f003 fe89 	bl	8006498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2400025c 	.word	0x2400025c

08002790 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <DMA1_Stream5_IRQHandler+0x10>)
 8002796:	f003 fe7f 	bl	8006498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	240002e8 	.word	0x240002e8

080027a4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <TIM1_BRK_IRQHandler+0x10>)
 80027aa:	f009 ff55 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2400043c 	.word	0x2400043c

080027b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM1_UP_IRQHandler+0x10>)
 80027be:	f009 ff4b 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2400043c 	.word	0x2400043c

080027cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <TIM1_TRG_COM_IRQHandler+0x10>)
 80027d2:	f009 ff41 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2400043c 	.word	0x2400043c

080027e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <TIM1_CC_IRQHandler+0x10>)
 80027e6:	f009 ff37 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2400043c 	.word	0x2400043c

080027f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <TIM2_IRQHandler+0x10>)
 80027fa:	f009 ff2d 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	24000488 	.word	0x24000488

08002808 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <TIM3_IRQHandler+0x10>)
 800280e:	f009 ff23 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	240004d4 	.word	0x240004d4

0800281c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <USART1_IRQHandler+0x10>)
 8002822:	f00b f8df 	bl	800d9e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	24000520 	.word	0x24000520

08002830 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <TIM6_DAC_IRQHandler+0x20>)
 8002836:	791b      	ldrb	r3, [r3, #4]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800283e:	4804      	ldr	r0, [pc, #16]	; (8002850 <TIM6_DAC_IRQHandler+0x20>)
 8002840:	f002 f881 	bl	8004946 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <TIM6_DAC_IRQHandler+0x24>)
 8002846:	f009 ff07 	bl	800c658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	240002d4 	.word	0x240002d4
 8002854:	24000668 	.word	0x24000668

08002858 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <ITM_SendChar+0x48>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <ITM_SendChar+0x48>)
 8002868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <ITM_SendChar+0x4c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <ITM_SendChar+0x4c>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800287a:	bf00      	nop
 800287c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f8      	beq.n	800287c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800288a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000edfc 	.word	0xe000edfc
 80028a4:	e0000e00 	.word	0xe0000e00

080028a8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e00a      	b.n	80028d0 <_read+0x28>
		*ptr++ = __io_getchar();
 80028ba:	f3af 8000 	nop.w
 80028be:	4601      	mov	r1, r0
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	60ba      	str	r2, [r7, #8]
 80028c6:	b2ca      	uxtb	r2, r1
 80028c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	dbf0      	blt.n	80028ba <_read+0x12>
	}

	return len;
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e009      	b.n	8002908 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	60ba      	str	r2, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ffab 	bl	8002858 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf1      	blt.n	80028f4 <_write+0x12>
	}
	return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_close>:

int _close(int file) {
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002942:	605a      	str	r2, [r3, #4]
	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_isatty>:

int _isatty(int file) {
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <_sbrk+0x64>)
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <_sbrk+0x68>)
 80029a4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d207      	bcs.n	80029c4 <_sbrk+0x40>
		errno = ENOMEM;
 80029b4:	f010 fec2 	bl	801373c <__errno>
 80029b8:	4603      	mov	r3, r0
 80029ba:	220c      	movs	r2, #12
 80029bc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c2:	e009      	b.n	80029d8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <_sbrk+0x64>)
 80029d4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	24080000 	.word	0x24080000
 80029e4:	00000400 	.word	0x00000400
 80029e8:	240006b4 	.word	0x240006b4
 80029ec:	24005020 	.word	0x24005020

080029f0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <SystemInit+0xe4>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	4a36      	ldr	r2, [pc, #216]	; (8002ad4 <SystemInit+0xe4>)
 80029fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <SystemInit+0xe8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d807      	bhi.n	8002a20 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <SystemInit+0xe8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 030f 	bic.w	r3, r3, #15
 8002a18:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <SystemInit+0xe8>)
 8002a1a:	f043 0307 	orr.w	r3, r3, #7
 8002a1e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002a20:	4b2e      	ldr	r3, [pc, #184]	; (8002adc <SystemInit+0xec>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <SystemInit+0xec>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002a2c:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <SystemInit+0xec>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <SystemInit+0xec>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4929      	ldr	r1, [pc, #164]	; (8002adc <SystemInit+0xec>)
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <SystemInit+0xf0>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <SystemInit+0xe8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <SystemInit+0xe8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 030f 	bic.w	r3, r3, #15
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <SystemInit+0xe8>)
 8002a54:	f043 0307 	orr.w	r3, r3, #7
 8002a58:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <SystemInit+0xec>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <SystemInit+0xec>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <SystemInit+0xec>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <SystemInit+0xec>)
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <SystemInit+0xf4>)
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <SystemInit+0xec>)
 8002a74:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <SystemInit+0xf8>)
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <SystemInit+0xec>)
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <SystemInit+0xfc>)
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002a7e:	4b17      	ldr	r3, [pc, #92]	; (8002adc <SystemInit+0xec>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <SystemInit+0xec>)
 8002a86:	4a19      	ldr	r2, [pc, #100]	; (8002aec <SystemInit+0xfc>)
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <SystemInit+0xec>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <SystemInit+0xec>)
 8002a92:	4a16      	ldr	r2, [pc, #88]	; (8002aec <SystemInit+0xfc>)
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <SystemInit+0xec>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <SystemInit+0xec>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <SystemInit+0xec>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <SystemInit+0xec>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <SystemInit+0x100>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <SystemInit+0x104>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aba:	d202      	bcs.n	8002ac2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <SystemInit+0x108>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <SystemInit+0x10c>)
 8002ac4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ac8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00
 8002ad8:	52002000 	.word	0x52002000
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ae4:	02020200 	.word	0x02020200
 8002ae8:	01ff0000 	.word	0x01ff0000
 8002aec:	01010280 	.word	0x01010280
 8002af0:	5c001000 	.word	0x5c001000
 8002af4:	ffff0000 	.word	0xffff0000
 8002af8:	51008108 	.word	0x51008108
 8002afc:	52004000 	.word	0x52004000

08002b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b04:	f7ff ff74 	bl	80029f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b08:	480c      	ldr	r0, [pc, #48]	; (8002b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b0a:	490d      	ldr	r1, [pc, #52]	; (8002b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b10:	e002      	b.n	8002b18 <LoopCopyDataInit>

08002b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b16:	3304      	adds	r3, #4

08002b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b1c:	d3f9      	bcc.n	8002b12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b20:	4c0a      	ldr	r4, [pc, #40]	; (8002b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b24:	e001      	b.n	8002b2a <LoopFillZerobss>

08002b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b28:	3204      	adds	r2, #4

08002b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b2c:	d3fb      	bcc.n	8002b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b2e:	f010 fe0b 	bl	8013748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b32:	f7fe f811 	bl	8000b58 <main>
  bx  lr
 8002b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b38:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b40:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002b44:	08014bbc 	.word	0x08014bbc
  ldr r2, =_sbss
 8002b48:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002b4c:	2400501c 	.word	0x2400501c

08002b50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <ADC3_IRQHandler>
	...

08002b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	f001 fd39 	bl	80045d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b60:	f006 f8f4 	bl	8008d4c <HAL_RCC_GetSysClockFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_Init+0x68>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	4913      	ldr	r1, [pc, #76]	; (8002bc0 <HAL_Init+0x6c>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_Init+0x68>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_Init+0x6c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <HAL_Init+0x70>)
 8002b96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b98:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_Init+0x74>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b9e:	2005      	movs	r0, #5
 8002ba0:	f7ff fd60 	bl	8002664 <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e002      	b.n	8002bb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bae:	f7ff f97b 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	08014ad4 	.word	0x08014ad4
 8002bc4:	2400008c 	.word	0x2400008c
 8002bc8:	24000088 	.word	0x24000088

08002bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	24000094 	.word	0x24000094
 8002bf0:	240006b8 	.word	0x240006b8

08002bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	240006b8 	.word	0x240006b8

08002c0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_GetREVID+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0c1b      	lsrs	r3, r3, #16
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	5c001000 	.word	0x5c001000

08002c24 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	4904      	ldr	r1, [pc, #16]	; (8002c4c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	58000400 	.word	0x58000400

08002c50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	609a      	str	r2, [r3, #8]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	611a      	str	r2, [r3, #16]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	601a      	str	r2, [r3, #0]
  }
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b087      	sub	sp, #28
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3330      	adds	r3, #48	; 0x30
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	4413      	add	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	211f      	movs	r1, #31
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	f003 011f 	and.w	r1, r3, #31
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f023 0203 	bic.w	r2, r3, #3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3314      	adds	r3, #20
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	0e5b      	lsrs	r3, r3, #25
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0d1b      	lsrs	r3, r3, #20
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2107      	movs	r1, #7
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	401a      	ands	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	0d1b      	lsrs	r3, r3, #20
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0318 	and.w	r3, r3, #24
 8002e7e:	4908      	ldr	r1, [pc, #32]	; (8002ea0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e80:	40d9      	lsrs	r1, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	400b      	ands	r3, r1
 8002e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	000fffff 	.word	0x000fffff

08002ea4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6093      	str	r3, [r2, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	5fffffc0 	.word	0x5fffffc0

08002ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef8:	d101      	bne.n	8002efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	6fffffc0 	.word	0x6fffffc0

08002f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f48:	d101      	bne.n	8002f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <LL_ADC_Enable+0x24>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	7fffffc0 	.word	0x7fffffc0

08002f84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <LL_ADC_Disable+0x24>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	7fffffc0 	.word	0x7fffffc0

08002fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <LL_ADC_IsEnabled+0x18>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <LL_ADC_IsEnabled+0x1a>
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d101      	bne.n	8002fea <LL_ADC_IsDisableOngoing+0x18>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <LL_ADC_IsDisableOngoing+0x1a>
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <LL_ADC_REG_StartConversion+0x24>)
 8003006:	4013      	ands	r3, r2
 8003008:	f043 0204 	orr.w	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	7fffffc0 	.word	0x7fffffc0

08003020 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d101      	bne.n	8003038 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d101      	bne.n	800305e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e18f      	b.n	80033a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fe ff25 	bl	8001ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff19 	bl	8002ee4 <LL_ADC_IsDeepPowerDownEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff feff 	bl	8002ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff34 	bl	8002f34 <LL_ADC_IsInternalRegulatorEnabled>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d114      	bne.n	80030fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff18 	bl	8002f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030dc:	4b87      	ldr	r3, [pc, #540]	; (80032fc <HAL_ADC_Init+0x290>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	4a87      	ldr	r2, [pc, #540]	; (8003300 <HAL_ADC_Init+0x294>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030ee:	e002      	b.n	80030f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f9      	bne.n	80030f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff17 	bl	8002f34 <LL_ADC_IsInternalRegulatorEnabled>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff77 	bl	8003020 <LL_ADC_REG_IsConversionOngoing>
 8003132:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 8129 	bne.w	8003394 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 8125 	bne.w	8003394 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff24 	bl	8002fac <LL_ADC_IsEnabled>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d136      	bne.n	80031d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_ADC_Init+0x298>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_ADC_Init+0x112>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a63      	ldr	r2, [pc, #396]	; (8003308 <HAL_ADC_Init+0x29c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10e      	bne.n	800319c <HAL_ADC_Init+0x130>
 800317e:	4861      	ldr	r0, [pc, #388]	; (8003304 <HAL_ADC_Init+0x298>)
 8003180:	f7ff ff14 	bl	8002fac <LL_ADC_IsEnabled>
 8003184:	4604      	mov	r4, r0
 8003186:	4860      	ldr	r0, [pc, #384]	; (8003308 <HAL_ADC_Init+0x29c>)
 8003188:	f7ff ff10 	bl	8002fac <LL_ADC_IsEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	4323      	orrs	r3, r4
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_ADC_Init+0x142>
 800319c:	485b      	ldr	r0, [pc, #364]	; (800330c <HAL_ADC_Init+0x2a0>)
 800319e:	f7ff ff05 	bl	8002fac <LL_ADC_IsEnabled>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a53      	ldr	r2, [pc, #332]	; (8003304 <HAL_ADC_Init+0x298>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_Init+0x15a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a51      	ldr	r2, [pc, #324]	; (8003308 <HAL_ADC_Init+0x29c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_Init+0x15e>
 80031c6:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_ADC_Init+0x2a4>)
 80031c8:	e000      	b.n	80031cc <HAL_ADC_Init+0x160>
 80031ca:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_ADC_Init+0x2a8>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7ff fd3c 	bl	8002c50 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031d8:	f7ff fd18 	bl	8002c0c <HAL_GetREVID>
 80031dc:	4603      	mov	r3, r0
 80031de:	f241 0203 	movw	r2, #4099	; 0x1003
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d914      	bls.n	8003210 <HAL_ADC_Init+0x1a4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d110      	bne.n	8003210 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7d5b      	ldrb	r3, [r3, #21]
 80031f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7f1b      	ldrb	r3, [r3, #28]
 8003204:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003206:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003208:	f043 030c 	orr.w	r3, r3, #12
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e00d      	b.n	800322c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7d5b      	ldrb	r3, [r3, #21]
 8003214:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003220:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7f1b      	ldrb	r3, [r3, #28]
 8003226:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7f1b      	ldrb	r3, [r3, #28]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	3b01      	subs	r3, #1
 800323a:	045b      	lsls	r3, r3, #17
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_ADC_Init+0x2ac>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	69b9      	ldr	r1, [r7, #24]
 800326e:	430b      	orrs	r3, r1
 8003270:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fed2 	bl	8003020 <LL_ADC_REG_IsConversionOngoing>
 800327c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fedf 	bl	8003046 <LL_ADC_INJ_IsConversionOngoing>
 8003288:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d15f      	bne.n	8003350 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d15c      	bne.n	8003350 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7d1b      	ldrb	r3, [r3, #20]
 800329a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_ADC_Init+0x2b0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d130      	bne.n	8003324 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_ADC_Init+0x2b4>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032d6:	3a01      	subs	r2, #1
 80032d8:	0411      	lsls	r1, r2, #16
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032de:	4311      	orrs	r1, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032ea:	430a      	orrs	r2, r1
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	611a      	str	r2, [r3, #16]
 80032f8:	e01c      	b.n	8003334 <HAL_ADC_Init+0x2c8>
 80032fa:	bf00      	nop
 80032fc:	24000088 	.word	0x24000088
 8003300:	053e2d63 	.word	0x053e2d63
 8003304:	40022000 	.word	0x40022000
 8003308:	40022100 	.word	0x40022100
 800330c:	58026000 	.word	0x58026000
 8003310:	40022300 	.word	0x40022300
 8003314:	58026300 	.word	0x58026300
 8003318:	fff0c003 	.word	0xfff0c003
 800331c:	ffffbffc 	.word	0xffffbffc
 8003320:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fdec 	bl	8003f28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10c      	bne.n	8003372 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f023 010f 	bic.w	r1, r3, #15
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	e007      	b.n	8003382 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 020f 	bic.w	r2, r2, #15
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
 8003392:	e007      	b.n	80033a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0210 	orr.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	bf00      	nop

080033b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a55      	ldr	r2, [pc, #340]	; (8003518 <HAL_ADC_Start_DMA+0x168>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_ADC_Start_DMA+0x20>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a54      	ldr	r2, [pc, #336]	; (800351c <HAL_ADC_Start_DMA+0x16c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_Start_DMA+0x24>
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_ADC_Start_DMA+0x170>)
 80033d2:	e000      	b.n	80033d6 <HAL_ADC_Start_DMA+0x26>
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_ADC_Start_DMA+0x174>)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fd64 	bl	8002ea4 <LL_ADC_GetMultimode>
 80033dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe1c 	bl	8003020 <LL_ADC_REG_IsConversionOngoing>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 808c 	bne.w	8003508 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_Start_DMA+0x4e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e087      	b.n	800350e <HAL_ADC_Start_DMA+0x15e>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d002      	beq.n	8003418 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b09      	cmp	r3, #9
 8003416:	d170      	bne.n	80034fa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fc07 	bl	8003c2c <ADC_Enable>
 800341e:	4603      	mov	r3, r0
 8003420:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d163      	bne.n	80034f0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800342c:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <HAL_ADC_Start_DMA+0x178>)
 800342e:	4013      	ands	r3, r2
 8003430:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a37      	ldr	r2, [pc, #220]	; (800351c <HAL_ADC_Start_DMA+0x16c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d002      	beq.n	8003448 <HAL_ADC_Start_DMA+0x98>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e000      	b.n	800344a <HAL_ADC_Start_DMA+0x9a>
 8003448:	4b33      	ldr	r3, [pc, #204]	; (8003518 <HAL_ADC_Start_DMA+0x168>)
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4293      	cmp	r3, r2
 8003450:	d002      	beq.n	8003458 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	f023 0206 	bic.w	r2, r3, #6
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	659a      	str	r2, [r3, #88]	; 0x58
 800347c:	e002      	b.n	8003484 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	4a28      	ldr	r2, [pc, #160]	; (800352c <HAL_ADC_Start_DMA+0x17c>)
 800348a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <HAL_ADC_Start_DMA+0x180>)
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	4a26      	ldr	r2, [pc, #152]	; (8003534 <HAL_ADC_Start_DMA+0x184>)
 800349a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	221c      	movs	r2, #28
 80034a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0210 	orr.w	r2, r2, #16
 80034ba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7ff fc89 	bl	8002dde <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3340      	adds	r3, #64	; 0x40
 80034d6:	4619      	mov	r1, r3
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f002 f80e 	bl	80054fc <HAL_DMA_Start_IT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fd85 	bl	8002ff8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034ee:	e00d      	b.n	800350c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80034f8:	e008      	b.n	800350c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003506:	e001      	b.n	800350c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800350c:	7dfb      	ldrb	r3, [r7, #23]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40022000 	.word	0x40022000
 800351c:	40022100 	.word	0x40022100
 8003520:	40022300 	.word	0x40022300
 8003524:	58026300 	.word	0x58026300
 8003528:	fffff0fe 	.word	0xfffff0fe
 800352c:	08003dff 	.word	0x08003dff
 8003530:	08003ed7 	.word	0x08003ed7
 8003534:	08003ef3 	.word	0x08003ef3

08003538 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b0a1      	sub	sp, #132	; 0x84
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a65      	ldr	r2, [pc, #404]	; (8003724 <HAL_ADC_ConfigChannel+0x1b0>)
 800358e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_ADC_ConfigChannel+0x2a>
 800359a:	2302      	movs	r3, #2
 800359c:	e32e      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x688>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fd38 	bl	8003020 <LL_ADC_REG_IsConversionOngoing>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 8313 	bne.w	8003bde <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db2c      	blt.n	800361a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d108      	bne.n	80035de <HAL_ADC_ConfigChannel+0x6a>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2201      	movs	r2, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	e016      	b.n	800360c <HAL_ADC_ConfigChannel+0x98>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80035f6:	2320      	movs	r3, #32
 80035f8:	e003      	b.n	8003602 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80035fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2201      	movs	r2, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	69d1      	ldr	r1, [r2, #28]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	430b      	orrs	r3, r1
 8003618:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f7ff fbad 	bl	8002d86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fcf5 	bl	8003020 <LL_ADC_REG_IsConversionOngoing>
 8003636:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fd02 	bl	8003046 <LL_ADC_INJ_IsConversionOngoing>
 8003642:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80b8 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800364c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 80b4 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	461a      	mov	r2, r3
 8003662:	f7ff fbcf 	bl	8002e04 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003666:	4b30      	ldr	r3, [pc, #192]	; (8003728 <HAL_ADC_ConfigChannel+0x1b4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800366e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003672:	d10b      	bne.n	800368c <HAL_ADC_ConfigChannel+0x118>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	e01d      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x154>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x13e>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	e00a      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x154>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d02c      	beq.n	800372c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6919      	ldr	r1, [r3, #16]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036e0:	f7ff faea 	bl	8002cb8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6919      	ldr	r1, [r3, #16]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	7e5b      	ldrb	r3, [r3, #25]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d102      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x186>
 80036f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036f8:	e000      	b.n	80036fc <HAL_ADC_ConfigChannel+0x188>
 80036fa:	2300      	movs	r3, #0
 80036fc:	461a      	mov	r2, r3
 80036fe:	f7ff fb14 	bl	8002d2a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6919      	ldr	r1, [r3, #16]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	7e1b      	ldrb	r3, [r3, #24]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d102      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1a4>
 8003712:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003716:	e000      	b.n	800371a <HAL_ADC_ConfigChannel+0x1a6>
 8003718:	2300      	movs	r3, #0
 800371a:	461a      	mov	r2, r3
 800371c:	f7ff faec 	bl	8002cf8 <LL_ADC_SetDataRightShift>
 8003720:	e04c      	b.n	80037bc <HAL_ADC_ConfigChannel+0x248>
 8003722:	bf00      	nop
 8003724:	47ff0000 	.word	0x47ff0000
 8003728:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	069b      	lsls	r3, r3, #26
 800373c:	429a      	cmp	r2, r3
 800373e:	d107      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800374e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003772:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	069b      	lsls	r3, r3, #26
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003796:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d107      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fbf3 	bl	8002fac <LL_ADC_IsEnabled>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 8211 	bne.w	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6819      	ldr	r1, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	461a      	mov	r2, r3
 80037dc:	f7ff fb3e 	bl	8002e5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4aa1      	ldr	r2, [pc, #644]	; (8003a6c <HAL_ADC_ConfigChannel+0x4f8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f040 812e 	bne.w	8003a48 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x2a0>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	3301      	adds	r3, #1
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2b09      	cmp	r3, #9
 800380a:	bf94      	ite	ls
 800380c:	2301      	movls	r3, #1
 800380e:	2300      	movhi	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e019      	b.n	8003848 <HAL_ADC_ConfigChannel+0x2d4>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800382c:	2320      	movs	r3, #32
 800382e:	e003      	b.n	8003838 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	2b09      	cmp	r3, #9
 8003840:	bf94      	ite	ls
 8003842:	2301      	movls	r3, #1
 8003844:	2300      	movhi	r3, #0
 8003846:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003848:	2b00      	cmp	r3, #0
 800384a:	d079      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x2f4>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0e9b      	lsrs	r3, r3, #26
 800385e:	3301      	adds	r3, #1
 8003860:	069b      	lsls	r3, r3, #26
 8003862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003866:	e015      	b.n	8003894 <HAL_ADC_ConfigChannel+0x320>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003878:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800387a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003880:	2320      	movs	r3, #32
 8003882:	e003      	b.n	800388c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3301      	adds	r3, #1
 800388e:	069b      	lsls	r3, r3, #26
 8003890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x340>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	3301      	adds	r3, #1
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	e017      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x370>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80038c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80038c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e003      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80038d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	3301      	adds	r3, #1
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	ea42 0103 	orr.w	r1, r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <HAL_ADC_ConfigChannel+0x396>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	3301      	adds	r3, #1
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	051b      	lsls	r3, r3, #20
 8003908:	e018      	b.n	800393c <HAL_ADC_ConfigChannel+0x3c8>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003922:	2320      	movs	r3, #32
 8003924:	e003      	b.n	800392e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393c:	430b      	orrs	r3, r1
 800393e:	e07e      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_ADC_ConfigChannel+0x3e8>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	069b      	lsls	r3, r3, #26
 8003956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800395a:	e015      	b.n	8003988 <HAL_ADC_ConfigChannel+0x414>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003974:	2320      	movs	r3, #32
 8003976:	e003      	b.n	8003980 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3301      	adds	r3, #1
 8003982:	069b      	lsls	r3, r3, #26
 8003984:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x434>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	3301      	adds	r3, #1
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	e017      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x464>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	61bb      	str	r3, [r7, #24]
  return result;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80039c0:	2320      	movs	r3, #32
 80039c2:	e003      	b.n	80039cc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	ea42 0103 	orr.w	r1, r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x490>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	3301      	adds	r3, #1
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	3b1e      	subs	r3, #30
 80039fc:	051b      	lsls	r3, r3, #20
 80039fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a02:	e01b      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x4c8>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	60fb      	str	r3, [r7, #12]
  return result;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	e003      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f003 021f 	and.w	r2, r3, #31
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	3b1e      	subs	r3, #30
 8003a36:	051b      	lsls	r3, r3, #20
 8003a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	6892      	ldr	r2, [r2, #8]
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7ff f9de 	bl	8002e04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f280 80cf 	bge.w	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a06      	ldr	r2, [pc, #24]	; (8003a70 <HAL_ADC_ConfigChannel+0x4fc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x4f2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_ADC_ConfigChannel+0x500>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10a      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x508>
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_ADC_ConfigChannel+0x504>)
 8003a68:	e009      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x50a>
 8003a6a:	bf00      	nop
 8003a6c:	47ff0000 	.word	0x47ff0000
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40022100 	.word	0x40022100
 8003a78:	40022300 	.word	0x40022300
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <HAL_ADC_ConfigChannel+0x690>)
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff f90c 	bl	8002c9c <LL_ADC_GetCommonPathInternalCh>
 8003a84:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5f      	ldr	r2, [pc, #380]	; (8003c08 <HAL_ADC_ConfigChannel+0x694>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_ADC_ConfigChannel+0x526>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a5d      	ldr	r2, [pc, #372]	; (8003c0c <HAL_ADC_ConfigChannel+0x698>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10e      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x544>
 8003a9a:	485b      	ldr	r0, [pc, #364]	; (8003c08 <HAL_ADC_ConfigChannel+0x694>)
 8003a9c:	f7ff fa86 	bl	8002fac <LL_ADC_IsEnabled>
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	485a      	ldr	r0, [pc, #360]	; (8003c0c <HAL_ADC_ConfigChannel+0x698>)
 8003aa4:	f7ff fa82 	bl	8002fac <LL_ADC_IsEnabled>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4323      	orrs	r3, r4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e008      	b.n	8003aca <HAL_ADC_ConfigChannel+0x556>
 8003ab8:	4855      	ldr	r0, [pc, #340]	; (8003c10 <HAL_ADC_ConfigChannel+0x69c>)
 8003aba:	f7ff fa77 	bl	8002fac <LL_ADC_IsEnabled>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d07d      	beq.n	8003bca <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a50      	ldr	r2, [pc, #320]	; (8003c14 <HAL_ADC_ConfigChannel+0x6a0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d130      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x5c6>
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d12b      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <HAL_ADC_ConfigChannel+0x69c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	f040 8081 	bne.w	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a45      	ldr	r2, [pc, #276]	; (8003c08 <HAL_ADC_ConfigChannel+0x694>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_ADC_ConfigChannel+0x58e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a43      	ldr	r2, [pc, #268]	; (8003c0c <HAL_ADC_ConfigChannel+0x698>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x592>
 8003b02:	4a45      	ldr	r2, [pc, #276]	; (8003c18 <HAL_ADC_ConfigChannel+0x6a4>)
 8003b04:	e000      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x594>
 8003b06:	4a3f      	ldr	r2, [pc, #252]	; (8003c04 <HAL_ADC_ConfigChannel+0x690>)
 8003b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7ff f8b0 	bl	8002c76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b16:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_ADC_ConfigChannel+0x6a8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	4a40      	ldr	r2, [pc, #256]	; (8003c20 <HAL_ADC_ConfigChannel+0x6ac>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	3301      	adds	r3, #1
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b2a:	e002      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f9      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b38:	e05a      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <HAL_ADC_ConfigChannel+0x6b0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d11e      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x60e>
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d119      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <HAL_ADC_ConfigChannel+0x69c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d14b      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_ADC_ConfigChannel+0x694>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x5f8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <HAL_ADC_ConfigChannel+0x698>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x5fc>
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <HAL_ADC_ConfigChannel+0x6a4>)
 8003b6e:	e000      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x5fe>
 8003b70:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <HAL_ADC_ConfigChannel+0x690>)
 8003b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff f87b 	bl	8002c76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b80:	e036      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a28      	ldr	r2, [pc, #160]	; (8003c28 <HAL_ADC_ConfigChannel+0x6b4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d131      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
 8003b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d12c      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_ADC_ConfigChannel+0x69c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d127      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_ADC_ConfigChannel+0x694>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_ADC_ConfigChannel+0x640>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_ADC_ConfigChannel+0x698>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x644>
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_ADC_ConfigChannel+0x6a4>)
 8003bb6:	e000      	b.n	8003bba <HAL_ADC_ConfigChannel+0x646>
 8003bb8:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <HAL_ADC_ConfigChannel+0x690>)
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f7ff f857 	bl	8002c76 <LL_ADC_SetCommonPathInternalCh>
 8003bc8:	e012      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003bdc:	e008      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bf8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3784      	adds	r7, #132	; 0x84
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd90      	pop	{r4, r7, pc}
 8003c04:	58026300 	.word	0x58026300
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40022100 	.word	0x40022100
 8003c10:	58026000 	.word	0x58026000
 8003c14:	cb840000 	.word	0xcb840000
 8003c18:	40022300 	.word	0x40022300
 8003c1c:	24000088 	.word	0x24000088
 8003c20:	053e2d63 	.word	0x053e2d63
 8003c24:	c7520000 	.word	0xc7520000
 8003c28:	cfb80000 	.word	0xcfb80000

08003c2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff f9b7 	bl	8002fac <LL_ADC_IsEnabled>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d16e      	bne.n	8003d22 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	4b38      	ldr	r3, [pc, #224]	; (8003d2c <ADC_Enable+0x100>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00d      	beq.n	8003c6e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	f043 0210 	orr.w	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e05a      	b.n	8003d24 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff f972 	bl	8002f5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c78:	f7fe ffbc 	bl	8002bf4 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <ADC_Enable+0x104>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <ADC_Enable+0x66>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <ADC_Enable+0x108>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <ADC_Enable+0x6a>
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <ADC_Enable+0x10c>)
 8003c94:	e000      	b.n	8003c98 <ADC_Enable+0x6c>
 8003c96:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <ADC_Enable+0x110>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f903 	bl	8002ea4 <LL_ADC_GetMultimode>
 8003c9e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <ADC_Enable+0x108>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d002      	beq.n	8003cb0 <ADC_Enable+0x84>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	e000      	b.n	8003cb2 <ADC_Enable+0x86>
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <ADC_Enable+0x104>)
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d02c      	beq.n	8003d14 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d130      	bne.n	8003d22 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cc0:	e028      	b.n	8003d14 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f970 	bl	8002fac <LL_ADC_IsEnabled>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f940 	bl	8002f5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cdc:	f7fe ff8a 	bl	8002bf4 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d914      	bls.n	8003d14 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d00d      	beq.n	8003d14 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e007      	b.n	8003d24 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d1cf      	bne.n	8003cc2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	8000003f 	.word	0x8000003f
 8003d30:	40022000 	.word	0x40022000
 8003d34:	40022100 	.word	0x40022100
 8003d38:	40022300 	.word	0x40022300
 8003d3c:	58026300 	.word	0x58026300

08003d40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff f940 	bl	8002fd2 <LL_ADC_IsDisableOngoing>
 8003d52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff f927 	bl	8002fac <LL_ADC_IsEnabled>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d047      	beq.n	8003df4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d144      	bne.n	8003df4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030d 	and.w	r3, r3, #13
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d10c      	bne.n	8003d92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff f901 	bl	8002f84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2203      	movs	r2, #3
 8003d88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d8a:	f7fe ff33 	bl	8002bf4 <HAL_GetTick>
 8003d8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d90:	e029      	b.n	8003de6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	f043 0210 	orr.w	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	f043 0201 	orr.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e023      	b.n	8003df6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dae:	f7fe ff21 	bl	8002bf4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d914      	bls.n	8003de6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f043 0210 	orr.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e007      	b.n	8003df6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1dc      	bne.n	8003dae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d14b      	bne.n	8003eb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d021      	beq.n	8003e76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe ff92 	bl	8002d60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d032      	beq.n	8003ea8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d12b      	bne.n	8003ea8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d11f      	bne.n	8003ea8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54
 8003e74:	e018      	b.n	8003ea8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d105      	bne.n	8003ea8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff fb45 	bl	8003538 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003eae:	e00e      	b.n	8003ece <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff fb4f 	bl	8003560 <HAL_ADC_ErrorCallback>
}
 8003ec2:	e004      	b.n	8003ece <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fb31 	bl	800354c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff fb21 	bl	8003560 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a7a      	ldr	r2, [pc, #488]	; (8004120 <ADC_ConfigureBoostMode+0x1f8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <ADC_ConfigureBoostMode+0x1c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a79      	ldr	r2, [pc, #484]	; (8004124 <ADC_ConfigureBoostMode+0x1fc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d109      	bne.n	8003f58 <ADC_ConfigureBoostMode+0x30>
 8003f44:	4b78      	ldr	r3, [pc, #480]	; (8004128 <ADC_ConfigureBoostMode+0x200>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e008      	b.n	8003f6a <ADC_ConfigureBoostMode+0x42>
 8003f58:	4b74      	ldr	r3, [pc, #464]	; (800412c <ADC_ConfigureBoostMode+0x204>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01c      	beq.n	8003fa8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f6e:	f005 f867 	bl	8009040 <HAL_RCC_GetHCLKFreq>
 8003f72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f7c:	d010      	beq.n	8003fa0 <ADC_ConfigureBoostMode+0x78>
 8003f7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f82:	d873      	bhi.n	800406c <ADC_ConfigureBoostMode+0x144>
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f88:	d002      	beq.n	8003f90 <ADC_ConfigureBoostMode+0x68>
 8003f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f8e:	d16d      	bne.n	800406c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	60fb      	str	r3, [r7, #12]
        break;
 8003f9e:	e068      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	60fb      	str	r3, [r7, #12]
        break;
 8003fa6:	e064      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003fa8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	f006 faee 	bl	800a590 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fb4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003fbe:	d051      	beq.n	8004064 <ADC_ConfigureBoostMode+0x13c>
 8003fc0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003fc4:	d854      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 8003fc6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003fca:	d047      	beq.n	800405c <ADC_ConfigureBoostMode+0x134>
 8003fcc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003fd0:	d84e      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 8003fd2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003fd6:	d03d      	beq.n	8004054 <ADC_ConfigureBoostMode+0x12c>
 8003fd8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003fdc:	d848      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 8003fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe2:	d033      	beq.n	800404c <ADC_ConfigureBoostMode+0x124>
 8003fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe8:	d842      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 8003fea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003fee:	d029      	beq.n	8004044 <ADC_ConfigureBoostMode+0x11c>
 8003ff0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ff4:	d83c      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 8003ff6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ffa:	d01a      	beq.n	8004032 <ADC_ConfigureBoostMode+0x10a>
 8003ffc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004000:	d836      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 8004002:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004006:	d014      	beq.n	8004032 <ADC_ConfigureBoostMode+0x10a>
 8004008:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800400c:	d830      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004012:	d00e      	beq.n	8004032 <ADC_ConfigureBoostMode+0x10a>
 8004014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004018:	d82a      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 800401a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800401e:	d008      	beq.n	8004032 <ADC_ConfigureBoostMode+0x10a>
 8004020:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004024:	d824      	bhi.n	8004070 <ADC_ConfigureBoostMode+0x148>
 8004026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800402a:	d002      	beq.n	8004032 <ADC_ConfigureBoostMode+0x10a>
 800402c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004030:	d11e      	bne.n	8004070 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	0c9b      	lsrs	r3, r3, #18
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	60fb      	str	r3, [r7, #12]
        break;
 8004042:	e016      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
        break;
 800404a:	e012      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	60fb      	str	r3, [r7, #12]
        break;
 8004052:	e00e      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	60fb      	str	r3, [r7, #12]
        break;
 800405a:	e00a      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	09db      	lsrs	r3, r3, #7
 8004060:	60fb      	str	r3, [r7, #12]
        break;
 8004062:	e006      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	60fb      	str	r3, [r7, #12]
        break;
 800406a:	e002      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
        break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004070:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004072:	f7fe fdcb 	bl	8002c0c <HAL_GetREVID>
 8004076:	4603      	mov	r3, r0
 8004078:	f241 0203 	movw	r2, #4099	; 0x1003
 800407c:	4293      	cmp	r3, r2
 800407e:	d815      	bhi.n	80040ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <ADC_ConfigureBoostMode+0x208>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d908      	bls.n	800409a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004096:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004098:	e03e      	b.n	8004118 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	e035      	b.n	8004118 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <ADC_ConfigureBoostMode+0x20c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d808      	bhi.n	80040cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	e025      	b.n	8004118 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <ADC_ConfigureBoostMode+0x210>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d80a      	bhi.n	80040ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	e016      	b.n	8004118 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <ADC_ConfigureBoostMode+0x214>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d80a      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	e007      	b.n	8004118 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40022000 	.word	0x40022000
 8004124:	40022100 	.word	0x40022100
 8004128:	40022300 	.word	0x40022300
 800412c:	58026300 	.word	0x58026300
 8004130:	01312d00 	.word	0x01312d00
 8004134:	005f5e10 	.word	0x005f5e10
 8004138:	00bebc20 	.word	0x00bebc20
 800413c:	017d7840 	.word	0x017d7840

08004140 <LL_ADC_IsEnabled>:
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <LL_ADC_IsEnabled+0x18>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <LL_ADC_IsEnabled+0x1a>
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <LL_ADC_StartCalibration>:
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <LL_ADC_StartCalibration+0x38>)
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004188:	430a      	orrs	r2, r1
 800418a:	4313      	orrs	r3, r2
 800418c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	3ffeffc0 	.word	0x3ffeffc0

080041a4 <LL_ADC_IsCalibrationOnGoing>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b8:	d101      	bne.n	80041be <LL_ADC_IsCalibrationOnGoing+0x1a>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_ADC_REG_IsConversionOngoing>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d101      	bne.n	80041e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_ADCEx_Calibration_Start+0x1e>
 800420e:	2302      	movs	r3, #2
 8004210:	e04c      	b.n	80042ac <HAL_ADCEx_Calibration_Start+0xb8>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff fd90 	bl	8003d40 <ADC_Disable>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d135      	bne.n	8004296 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422e:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004230:	4013      	ands	r3, r2
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff90 	bl	8004168 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004248:	e014      	b.n	8004274 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d30d      	bcc.n	8004274 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f023 0312 	bic.w	r3, r3, #18
 8004260:	f043 0210 	orr.w	r2, r3, #16
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e01b      	b.n	80042ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff93 	bl	80041a4 <LL_ADC_IsCalibrationOnGoing>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e2      	bne.n	800424a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f023 0303 	bic.w	r3, r3, #3
 800428c:	f043 0201 	orr.w	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
 8004294:	e005      	b.n	80042a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	f043 0210 	orr.w	r2, r3, #16
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	ffffeefd 	.word	0xffffeefd
 80042b8:	25c3f800 	.word	0x25c3f800

080042bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b09f      	sub	sp, #124	; 0x7c
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0be      	b.n	8004458 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d102      	bne.n	80042fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042f4:	4b5b      	ldr	r3, [pc, #364]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	e001      	b.n	80042fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e09d      	b.n	8004458 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff54 	bl	80041cc <LL_ADC_REG_IsConversionOngoing>
 8004324:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff4e 	bl	80041cc <LL_ADC_REG_IsConversionOngoing>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d17f      	bne.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004338:	2b00      	cmp	r3, #0
 800433a:	d17c      	bne.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a47      	ldr	r2, [pc, #284]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a46      	ldr	r2, [pc, #280]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004350:	4b45      	ldr	r3, [pc, #276]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004352:	e000      	b.n	8004356 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004354:	4b45      	ldr	r3, [pc, #276]	; (800446c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004356:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d039      	beq.n	80043d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	431a      	orrs	r2, r3
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a38      	ldr	r2, [pc, #224]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10e      	bne.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004386:	4836      	ldr	r0, [pc, #216]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004388:	f7ff feda 	bl	8004140 <LL_ADC_IsEnabled>
 800438c:	4604      	mov	r4, r0
 800438e:	4835      	ldr	r0, [pc, #212]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004390:	f7ff fed6 	bl	8004140 <LL_ADC_IsEnabled>
 8004394:	4603      	mov	r3, r0
 8004396:	4323      	orrs	r3, r4
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e008      	b.n	80043b6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80043a4:	4832      	ldr	r0, [pc, #200]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80043a6:	f7ff fecb 	bl	8004140 <LL_ADC_IsEnabled>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d047      	beq.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	6811      	ldr	r1, [r2, #0]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	6892      	ldr	r2, [r2, #8]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	431a      	orrs	r2, r3
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043d2:	e03a      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80043d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10e      	bne.n	8004412 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80043f4:	481a      	ldr	r0, [pc, #104]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043f6:	f7ff fea3 	bl	8004140 <LL_ADC_IsEnabled>
 80043fa:	4604      	mov	r4, r0
 80043fc:	4819      	ldr	r0, [pc, #100]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043fe:	f7ff fe9f 	bl	8004140 <LL_ADC_IsEnabled>
 8004402:	4603      	mov	r3, r0
 8004404:	4323      	orrs	r3, r4
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e008      	b.n	8004424 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004412:	4817      	ldr	r0, [pc, #92]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004414:	f7ff fe94 	bl	8004140 <LL_ADC_IsEnabled>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800442e:	4013      	ands	r3, r2
 8004430:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004432:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004434:	e009      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004448:	e000      	b.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800444a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004454:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004458:	4618      	mov	r0, r3
 800445a:	377c      	adds	r7, #124	; 0x7c
 800445c:	46bd      	mov	sp, r7
 800445e:	bd90      	pop	{r4, r7, pc}
 8004460:	40022000 	.word	0x40022000
 8004464:	40022100 	.word	0x40022100
 8004468:	40022300 	.word	0x40022300
 800446c:	58026300 	.word	0x58026300
 8004470:	58026000 	.word	0x58026000
 8004474:	fffff0e0 	.word	0xfffff0e0

08004478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <__NVIC_SetPriorityGrouping+0x40>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004494:	4013      	ands	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <__NVIC_SetPriorityGrouping+0x44>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <__NVIC_SetPriorityGrouping+0x40>)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	60d3      	str	r3, [r2, #12]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000ed00 	.word	0xe000ed00
 80044bc:	05fa0000 	.word	0x05fa0000

080044c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <__NVIC_GetPriorityGrouping+0x18>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	f003 0307 	and.w	r3, r3, #7
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	db0b      	blt.n	8004506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	4907      	ldr	r1, [pc, #28]	; (8004514 <__NVIC_EnableIRQ+0x38>)
 80044f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2001      	movs	r0, #1
 80044fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	e000e100 	.word	0xe000e100

08004518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db0a      	blt.n	8004542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	490c      	ldr	r1, [pc, #48]	; (8004564 <__NVIC_SetPriority+0x4c>)
 8004532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	440b      	add	r3, r1
 800453c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004540:	e00a      	b.n	8004558 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4908      	ldr	r1, [pc, #32]	; (8004568 <__NVIC_SetPriority+0x50>)
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	3b04      	subs	r3, #4
 8004550:	0112      	lsls	r2, r2, #4
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	440b      	add	r3, r1
 8004556:	761a      	strb	r2, [r3, #24]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000e100 	.word	0xe000e100
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	; 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f1c3 0307 	rsb	r3, r3, #7
 8004586:	2b04      	cmp	r3, #4
 8004588:	bf28      	it	cs
 800458a:	2304      	movcs	r3, #4
 800458c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3304      	adds	r3, #4
 8004592:	2b06      	cmp	r3, #6
 8004594:	d902      	bls.n	800459c <NVIC_EncodePriority+0x30>
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3b03      	subs	r3, #3
 800459a:	e000      	b.n	800459e <NVIC_EncodePriority+0x32>
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	401a      	ands	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	43d9      	mvns	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c4:	4313      	orrs	r3, r2
         );
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ff4c 	bl	8004478 <__NVIC_SetPriorityGrouping>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045f6:	f7ff ff63 	bl	80044c0 <__NVIC_GetPriorityGrouping>
 80045fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	f7ff ffb3 	bl	800456c <NVIC_EncodePriority>
 8004606:	4602      	mov	r2, r0
 8004608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ff82 	bl	8004518 <__NVIC_SetPriority>
}
 8004614:	bf00      	nop
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ff56 	bl	80044dc <__NVIC_EnableIRQ>
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e014      	b.n	8004674 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	791b      	ldrb	r3, [r3, #4]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd fd5c 	bl	8002118 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e046      	b.n	800471e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	795b      	ldrb	r3, [r3, #5]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_DAC_Start+0x20>
 8004698:	2302      	movs	r3, #2
 800469a:	e040      	b.n	800471e <HAL_DAC_Start+0xa2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d11d      	bne.n	8004710 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	e014      	b.n	8004710 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2102      	movs	r1, #2
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0202 	orr.w	r2, r2, #2
 800470e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0a2      	b.n	800488a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	795b      	ldrb	r3, [r3, #5]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_DAC_Start_DMA+0x24>
 800474c:	2302      	movs	r3, #2
 800474e:	e09c      	b.n	800488a <HAL_DAC_Start_DMA+0x15e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2202      	movs	r2, #2
 800475a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d129      	bne.n	80047b6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	4a4b      	ldr	r2, [pc, #300]	; (8004894 <HAL_DAC_Start_DMA+0x168>)
 8004768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	4a4a      	ldr	r2, [pc, #296]	; (8004898 <HAL_DAC_Start_DMA+0x16c>)
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	4a49      	ldr	r2, [pc, #292]	; (800489c <HAL_DAC_Start_DMA+0x170>)
 8004778:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004788:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_DAC_Start_DMA+0x6c>
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b04      	cmp	r3, #4
 8004794:	d005      	beq.n	80047a2 <HAL_DAC_Start_DMA+0x76>
 8004796:	e009      	b.n	80047ac <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	613b      	str	r3, [r7, #16]
        break;
 80047a0:	e033      	b.n	800480a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	613b      	str	r3, [r7, #16]
        break;
 80047aa:	e02e      	b.n	800480a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3310      	adds	r3, #16
 80047b2:	613b      	str	r3, [r7, #16]
        break;
 80047b4:	e029      	b.n	800480a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	4a39      	ldr	r2, [pc, #228]	; (80048a0 <HAL_DAC_Start_DMA+0x174>)
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4a38      	ldr	r2, [pc, #224]	; (80048a4 <HAL_DAC_Start_DMA+0x178>)
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4a37      	ldr	r2, [pc, #220]	; (80048a8 <HAL_DAC_Start_DMA+0x17c>)
 80047cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047dc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_DAC_Start_DMA+0xc0>
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d005      	beq.n	80047f6 <HAL_DAC_Start_DMA+0xca>
 80047ea:	e009      	b.n	8004800 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	613b      	str	r3, [r7, #16]
        break;
 80047f4:	e009      	b.n	800480a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3318      	adds	r3, #24
 80047fc:	613b      	str	r3, [r7, #16]
        break;
 80047fe:	e004      	b.n	800480a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	331c      	adds	r3, #28
 8004806:	613b      	str	r3, [r7, #16]
        break;
 8004808:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d111      	bne.n	8004834 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800481e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6898      	ldr	r0, [r3, #8]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	f000 fe67 	bl	80054fc <HAL_DMA_Start_IT>
 800482e:	4603      	mov	r3, r0
 8004830:	75fb      	strb	r3, [r7, #23]
 8004832:	e010      	b.n	8004856 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004842:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68d8      	ldr	r0, [r3, #12]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	f000 fe55 	bl	80054fc <HAL_DMA_Start_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800485c:	7dfb      	ldrb	r3, [r7, #23]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10c      	bne.n	800487c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6819      	ldr	r1, [r3, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2201      	movs	r2, #1
 8004870:	409a      	lsls	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e005      	b.n	8004888 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f043 0204 	orr.w	r2, r3, #4
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	08004d1d 	.word	0x08004d1d
 8004898:	08004d3f 	.word	0x08004d3f
 800489c:	08004d5b 	.word	0x08004d5b
 80048a0:	08004dd9 	.word	0x08004dd9
 80048a4:	08004dfb 	.word	0x08004dfb
 80048a8:	08004e17 	.word	0x08004e17

080048ac <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e03e      	b.n	800493e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43da      	mvns	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	400a      	ands	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2201      	movs	r2, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43da      	mvns	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	400a      	ands	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f863 	bl	80059d0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e00c      	b.n	8004936 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 f855 	bl	80059d0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004934:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01d      	beq.n	80049a4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2204      	movs	r2, #4
 8004976:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800498c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800499c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f86f 	bl	8004a82 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01d      	beq.n	80049ea <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d018      	beq.n	80049ea <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2204      	movs	r2, #4
 80049bc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f043 0202 	orr.w	r2, r3, #2
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80049d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f9ed 	bl	8004dc4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e015      	b.n	8004a3a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d105      	bne.n	8004a26 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4413      	add	r3, r2
 8004a20:	3308      	adds	r3, #8
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e004      	b.n	8004a30 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	461a      	mov	r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_DAC_ConfigChannel+0x1e>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e12a      	b.n	8004d10 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	795b      	ldrb	r3, [r3, #5]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_DAC_ConfigChannel+0x2e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e124      	b.n	8004d10 <HAL_DAC_ConfigChannel+0x278>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d17a      	bne.n	8004bd0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ada:	f7fe f88b 	bl	8002bf4 <HAL_GetTick>
 8004ade:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d13d      	bne.n	8004b62 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ae6:	e018      	b.n	8004b1a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ae8:	f7fe f884 	bl	8002bf4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d911      	bls.n	8004b1a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afc:	4b86      	ldr	r3, [pc, #536]	; (8004d18 <HAL_DAC_ConfigChannel+0x280>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f043 0208 	orr.w	r2, r3, #8
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2203      	movs	r2, #3
 8004b14:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0fa      	b.n	8004d10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b20:	4b7d      	ldr	r3, [pc, #500]	; (8004d18 <HAL_DAC_ConfigChannel+0x280>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1df      	bne.n	8004ae8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	6992      	ldr	r2, [r2, #24]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
 8004b32:	e020      	b.n	8004b76 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b34:	f7fe f85e 	bl	8002bf4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d90f      	bls.n	8004b62 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da0a      	bge.n	8004b62 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f043 0208 	orr.w	r2, r3, #8
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e0d6      	b.n	8004d10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dbe3      	blt.n	8004b34 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	6992      	ldr	r2, [r2, #24]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	ea02 0103 	and.w	r1, r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	21ff      	movs	r1, #255	; 0xff
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	ea02 0103 	and.w	r1, r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d11d      	bne.n	8004c14 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	221f      	movs	r2, #31
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2207      	movs	r2, #7
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d102      	bne.n	8004c3e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	e00f      	b.n	8004c5e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d102      	bne.n	8004c4c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004c46:	2301      	movs	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	e008      	b.n	8004c5e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c54:	2301      	movs	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	e001      	b.n	8004c5e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	22c0      	movs	r2, #192	; 0xc0
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3728      	adds	r7, #40	; 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20008000 	.word	0x20008000

08004d1c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff fe8b 	bl	8004a46 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	711a      	strb	r2, [r3, #4]
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff fe84 	bl	8004a5a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f043 0204 	orr.w	r2, r3, #4
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff fe7a 	bl	8004a6e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	711a      	strb	r2, [r3, #4]
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff ffce 	bl	8004d88 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	711a      	strb	r2, [r3, #4]
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff ffc7 	bl	8004d9c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f043 0204 	orr.w	r2, r3, #4
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ffbd 	bl	8004db0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	711a      	strb	r2, [r3, #4]
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e4c:	f7fd fed2 	bl	8002bf4 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e316      	b.n	800548a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a66      	ldr	r2, [pc, #408]	; (8004ffc <HAL_DMA_Init+0x1b8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a65      	ldr	r2, [pc, #404]	; (8005000 <HAL_DMA_Init+0x1bc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a63      	ldr	r2, [pc, #396]	; (8005004 <HAL_DMA_Init+0x1c0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a62      	ldr	r2, [pc, #392]	; (8005008 <HAL_DMA_Init+0x1c4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a60      	ldr	r2, [pc, #384]	; (800500c <HAL_DMA_Init+0x1c8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a5f      	ldr	r2, [pc, #380]	; (8005010 <HAL_DMA_Init+0x1cc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a5d      	ldr	r2, [pc, #372]	; (8005014 <HAL_DMA_Init+0x1d0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a5c      	ldr	r2, [pc, #368]	; (8005018 <HAL_DMA_Init+0x1d4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5a      	ldr	r2, [pc, #360]	; (800501c <HAL_DMA_Init+0x1d8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a59      	ldr	r2, [pc, #356]	; (8005020 <HAL_DMA_Init+0x1dc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a57      	ldr	r2, [pc, #348]	; (8005024 <HAL_DMA_Init+0x1e0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a56      	ldr	r2, [pc, #344]	; (8005028 <HAL_DMA_Init+0x1e4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a54      	ldr	r2, [pc, #336]	; (800502c <HAL_DMA_Init+0x1e8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a53      	ldr	r2, [pc, #332]	; (8005030 <HAL_DMA_Init+0x1ec>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a51      	ldr	r2, [pc, #324]	; (8005034 <HAL_DMA_Init+0x1f0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_Init+0xb8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a50      	ldr	r2, [pc, #320]	; (8005038 <HAL_DMA_Init+0x1f4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_DMA_Init+0xbc>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_DMA_Init+0xbe>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 813b 	beq.w	800517e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a37      	ldr	r2, [pc, #220]	; (8004ffc <HAL_DMA_Init+0x1b8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d04a      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a36      	ldr	r2, [pc, #216]	; (8005000 <HAL_DMA_Init+0x1bc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d045      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a34      	ldr	r2, [pc, #208]	; (8005004 <HAL_DMA_Init+0x1c0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d040      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a33      	ldr	r2, [pc, #204]	; (8005008 <HAL_DMA_Init+0x1c4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d03b      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a31      	ldr	r2, [pc, #196]	; (800500c <HAL_DMA_Init+0x1c8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d036      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a30      	ldr	r2, [pc, #192]	; (8005010 <HAL_DMA_Init+0x1cc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d031      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <HAL_DMA_Init+0x1d0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02c      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <HAL_DMA_Init+0x1d4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d027      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2b      	ldr	r2, [pc, #172]	; (800501c <HAL_DMA_Init+0x1d8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <HAL_DMA_Init+0x1dc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a28      	ldr	r2, [pc, #160]	; (8005024 <HAL_DMA_Init+0x1e0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a27      	ldr	r2, [pc, #156]	; (8005028 <HAL_DMA_Init+0x1e4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a25      	ldr	r2, [pc, #148]	; (800502c <HAL_DMA_Init+0x1e8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a24      	ldr	r2, [pc, #144]	; (8005030 <HAL_DMA_Init+0x1ec>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_DMA_Init+0x1f0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_DMA_Init+0x174>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a21      	ldr	r2, [pc, #132]	; (8005038 <HAL_DMA_Init+0x1f4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <HAL_DMA_Init+0x186>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e007      	b.n	8004fda <HAL_DMA_Init+0x196>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0201 	bic.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fda:	e02f      	b.n	800503c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fdc:	f7fd fe0a 	bl	8002bf4 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d928      	bls.n	800503c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e246      	b.n	800548a <HAL_DMA_Init+0x646>
 8004ffc:	40020010 	.word	0x40020010
 8005000:	40020028 	.word	0x40020028
 8005004:	40020040 	.word	0x40020040
 8005008:	40020058 	.word	0x40020058
 800500c:	40020070 	.word	0x40020070
 8005010:	40020088 	.word	0x40020088
 8005014:	400200a0 	.word	0x400200a0
 8005018:	400200b8 	.word	0x400200b8
 800501c:	40020410 	.word	0x40020410
 8005020:	40020428 	.word	0x40020428
 8005024:	40020440 	.word	0x40020440
 8005028:	40020458 	.word	0x40020458
 800502c:	40020470 	.word	0x40020470
 8005030:	40020488 	.word	0x40020488
 8005034:	400204a0 	.word	0x400204a0
 8005038:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1c8      	bne.n	8004fdc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4b83      	ldr	r3, [pc, #524]	; (8005264 <HAL_DMA_Init+0x420>)
 8005056:	4013      	ands	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005062:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4313      	orrs	r3, r2
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80050a0:	4b71      	ldr	r3, [pc, #452]	; (8005268 <HAL_DMA_Init+0x424>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b71      	ldr	r3, [pc, #452]	; (800526c <HAL_DMA_Init+0x428>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ac:	d328      	bcc.n	8005100 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b28      	cmp	r3, #40	; 0x28
 80050b4:	d903      	bls.n	80050be <HAL_DMA_Init+0x27a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b2e      	cmp	r3, #46	; 0x2e
 80050bc:	d917      	bls.n	80050ee <HAL_DMA_Init+0x2aa>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b3e      	cmp	r3, #62	; 0x3e
 80050c4:	d903      	bls.n	80050ce <HAL_DMA_Init+0x28a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b42      	cmp	r3, #66	; 0x42
 80050cc:	d90f      	bls.n	80050ee <HAL_DMA_Init+0x2aa>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b46      	cmp	r3, #70	; 0x46
 80050d4:	d903      	bls.n	80050de <HAL_DMA_Init+0x29a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b48      	cmp	r3, #72	; 0x48
 80050dc:	d907      	bls.n	80050ee <HAL_DMA_Init+0x2aa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b4e      	cmp	r3, #78	; 0x4e
 80050e4:	d905      	bls.n	80050f2 <HAL_DMA_Init+0x2ae>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b52      	cmp	r3, #82	; 0x52
 80050ec:	d801      	bhi.n	80050f2 <HAL_DMA_Init+0x2ae>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <HAL_DMA_Init+0x2b0>
 80050f2:	2300      	movs	r3, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050fe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0307 	bic.w	r3, r3, #7
 8005116:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b04      	cmp	r3, #4
 8005128:	d117      	bne.n	800515a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00e      	beq.n	800515a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f002 fb33 	bl	80077a8 <DMA_CheckFifoParam>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2240      	movs	r2, #64	; 0x40
 800514c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e197      	b.n	800548a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f002 fa6e 	bl	8007644 <DMA_CalcBaseAndBitshift>
 8005168:	4603      	mov	r3, r0
 800516a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	223f      	movs	r2, #63	; 0x3f
 8005176:	409a      	lsls	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	e0cd      	b.n	800531a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a3b      	ldr	r2, [pc, #236]	; (8005270 <HAL_DMA_Init+0x42c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d022      	beq.n	80051ce <HAL_DMA_Init+0x38a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a39      	ldr	r2, [pc, #228]	; (8005274 <HAL_DMA_Init+0x430>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01d      	beq.n	80051ce <HAL_DMA_Init+0x38a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a38      	ldr	r2, [pc, #224]	; (8005278 <HAL_DMA_Init+0x434>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d018      	beq.n	80051ce <HAL_DMA_Init+0x38a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a36      	ldr	r2, [pc, #216]	; (800527c <HAL_DMA_Init+0x438>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_DMA_Init+0x38a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a35      	ldr	r2, [pc, #212]	; (8005280 <HAL_DMA_Init+0x43c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00e      	beq.n	80051ce <HAL_DMA_Init+0x38a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a33      	ldr	r2, [pc, #204]	; (8005284 <HAL_DMA_Init+0x440>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_DMA_Init+0x38a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a32      	ldr	r2, [pc, #200]	; (8005288 <HAL_DMA_Init+0x444>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_DMA_Init+0x38a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a30      	ldr	r2, [pc, #192]	; (800528c <HAL_DMA_Init+0x448>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_DMA_Init+0x38e>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_DMA_Init+0x390>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8097 	beq.w	8005308 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a24      	ldr	r2, [pc, #144]	; (8005270 <HAL_DMA_Init+0x42c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d021      	beq.n	8005228 <HAL_DMA_Init+0x3e4>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a22      	ldr	r2, [pc, #136]	; (8005274 <HAL_DMA_Init+0x430>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01c      	beq.n	8005228 <HAL_DMA_Init+0x3e4>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a21      	ldr	r2, [pc, #132]	; (8005278 <HAL_DMA_Init+0x434>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d017      	beq.n	8005228 <HAL_DMA_Init+0x3e4>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1f      	ldr	r2, [pc, #124]	; (800527c <HAL_DMA_Init+0x438>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d012      	beq.n	8005228 <HAL_DMA_Init+0x3e4>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <HAL_DMA_Init+0x43c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00d      	beq.n	8005228 <HAL_DMA_Init+0x3e4>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <HAL_DMA_Init+0x440>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d008      	beq.n	8005228 <HAL_DMA_Init+0x3e4>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <HAL_DMA_Init+0x444>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <HAL_DMA_Init+0x3e4>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <HAL_DMA_Init+0x448>)
 8005226:	4293      	cmp	r3, r2
 8005228:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_DMA_Init+0x44c>)
 8005246:	4013      	ands	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d020      	beq.n	8005294 <HAL_DMA_Init+0x450>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d102      	bne.n	8005260 <HAL_DMA_Init+0x41c>
 800525a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800525e:	e01a      	b.n	8005296 <HAL_DMA_Init+0x452>
 8005260:	2300      	movs	r3, #0
 8005262:	e018      	b.n	8005296 <HAL_DMA_Init+0x452>
 8005264:	fe10803f 	.word	0xfe10803f
 8005268:	5c001000 	.word	0x5c001000
 800526c:	ffff0000 	.word	0xffff0000
 8005270:	58025408 	.word	0x58025408
 8005274:	5802541c 	.word	0x5802541c
 8005278:	58025430 	.word	0x58025430
 800527c:	58025444 	.word	0x58025444
 8005280:	58025458 	.word	0x58025458
 8005284:	5802546c 	.word	0x5802546c
 8005288:	58025480 	.word	0x58025480
 800528c:	58025494 	.word	0x58025494
 8005290:	fffe000f 	.word	0xfffe000f
 8005294:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800529c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	4b6e      	ldr	r3, [pc, #440]	; (8005494 <HAL_DMA_Init+0x650>)
 80052dc:	4413      	add	r3, r2
 80052de:	4a6e      	ldr	r2, [pc, #440]	; (8005498 <HAL_DMA_Init+0x654>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	009a      	lsls	r2, r3, #2
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f002 f9a9 	bl	8007644 <DMA_CalcBaseAndBitshift>
 80052f2:	4603      	mov	r3, r0
 80052f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2201      	movs	r2, #1
 8005300:	409a      	lsls	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	e008      	b.n	800531a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2240      	movs	r2, #64	; 0x40
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2203      	movs	r2, #3
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0b7      	b.n	800548a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a5f      	ldr	r2, [pc, #380]	; (800549c <HAL_DMA_Init+0x658>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d072      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a5d      	ldr	r2, [pc, #372]	; (80054a0 <HAL_DMA_Init+0x65c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d06d      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a5c      	ldr	r2, [pc, #368]	; (80054a4 <HAL_DMA_Init+0x660>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d068      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5a      	ldr	r2, [pc, #360]	; (80054a8 <HAL_DMA_Init+0x664>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d063      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a59      	ldr	r2, [pc, #356]	; (80054ac <HAL_DMA_Init+0x668>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d05e      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a57      	ldr	r2, [pc, #348]	; (80054b0 <HAL_DMA_Init+0x66c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d059      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a56      	ldr	r2, [pc, #344]	; (80054b4 <HAL_DMA_Init+0x670>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d054      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a54      	ldr	r2, [pc, #336]	; (80054b8 <HAL_DMA_Init+0x674>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04f      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a53      	ldr	r2, [pc, #332]	; (80054bc <HAL_DMA_Init+0x678>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04a      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a51      	ldr	r2, [pc, #324]	; (80054c0 <HAL_DMA_Init+0x67c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d045      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a50      	ldr	r2, [pc, #320]	; (80054c4 <HAL_DMA_Init+0x680>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d040      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a4e      	ldr	r2, [pc, #312]	; (80054c8 <HAL_DMA_Init+0x684>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4d      	ldr	r2, [pc, #308]	; (80054cc <HAL_DMA_Init+0x688>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d036      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4b      	ldr	r2, [pc, #300]	; (80054d0 <HAL_DMA_Init+0x68c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a4a      	ldr	r2, [pc, #296]	; (80054d4 <HAL_DMA_Init+0x690>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02c      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a48      	ldr	r2, [pc, #288]	; (80054d8 <HAL_DMA_Init+0x694>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d027      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a47      	ldr	r2, [pc, #284]	; (80054dc <HAL_DMA_Init+0x698>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a45      	ldr	r2, [pc, #276]	; (80054e0 <HAL_DMA_Init+0x69c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <HAL_DMA_Init+0x6a0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a42      	ldr	r2, [pc, #264]	; (80054e8 <HAL_DMA_Init+0x6a4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a41      	ldr	r2, [pc, #260]	; (80054ec <HAL_DMA_Init+0x6a8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <HAL_DMA_Init+0x6ac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3e      	ldr	r2, [pc, #248]	; (80054f4 <HAL_DMA_Init+0x6b0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_DMA_Init+0x5c6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <HAL_DMA_Init+0x6b4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <HAL_DMA_Init+0x5ca>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_DMA_Init+0x5cc>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d032      	beq.n	800547a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f002 fa43 	bl	80078a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d102      	bne.n	8005428 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800543c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_DMA_Init+0x624>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b08      	cmp	r3, #8
 800544c:	d80c      	bhi.n	8005468 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f002 fac0 	bl	80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	e008      	b.n	800547a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	a7fdabf8 	.word	0xa7fdabf8
 8005498:	cccccccd 	.word	0xcccccccd
 800549c:	40020010 	.word	0x40020010
 80054a0:	40020028 	.word	0x40020028
 80054a4:	40020040 	.word	0x40020040
 80054a8:	40020058 	.word	0x40020058
 80054ac:	40020070 	.word	0x40020070
 80054b0:	40020088 	.word	0x40020088
 80054b4:	400200a0 	.word	0x400200a0
 80054b8:	400200b8 	.word	0x400200b8
 80054bc:	40020410 	.word	0x40020410
 80054c0:	40020428 	.word	0x40020428
 80054c4:	40020440 	.word	0x40020440
 80054c8:	40020458 	.word	0x40020458
 80054cc:	40020470 	.word	0x40020470
 80054d0:	40020488 	.word	0x40020488
 80054d4:	400204a0 	.word	0x400204a0
 80054d8:	400204b8 	.word	0x400204b8
 80054dc:	58025408 	.word	0x58025408
 80054e0:	5802541c 	.word	0x5802541c
 80054e4:	58025430 	.word	0x58025430
 80054e8:	58025444 	.word	0x58025444
 80054ec:	58025458 	.word	0x58025458
 80054f0:	5802546c 	.word	0x5802546c
 80054f4:	58025480 	.word	0x58025480
 80054f8:	58025494 	.word	0x58025494

080054fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e226      	b.n	8005966 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_DMA_Start_IT+0x2a>
 8005522:	2302      	movs	r3, #2
 8005524:	e21f      	b.n	8005966 <HAL_DMA_Start_IT+0x46a>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	f040 820a 	bne.w	8005950 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a68      	ldr	r2, [pc, #416]	; (80056f0 <HAL_DMA_Start_IT+0x1f4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d04a      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a66      	ldr	r2, [pc, #408]	; (80056f4 <HAL_DMA_Start_IT+0x1f8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d045      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a65      	ldr	r2, [pc, #404]	; (80056f8 <HAL_DMA_Start_IT+0x1fc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d040      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a63      	ldr	r2, [pc, #396]	; (80056fc <HAL_DMA_Start_IT+0x200>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d03b      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a62      	ldr	r2, [pc, #392]	; (8005700 <HAL_DMA_Start_IT+0x204>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d036      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a60      	ldr	r2, [pc, #384]	; (8005704 <HAL_DMA_Start_IT+0x208>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d031      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5f      	ldr	r2, [pc, #380]	; (8005708 <HAL_DMA_Start_IT+0x20c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d02c      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a5d      	ldr	r2, [pc, #372]	; (800570c <HAL_DMA_Start_IT+0x210>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d027      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a5c      	ldr	r2, [pc, #368]	; (8005710 <HAL_DMA_Start_IT+0x214>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d022      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a5a      	ldr	r2, [pc, #360]	; (8005714 <HAL_DMA_Start_IT+0x218>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01d      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a59      	ldr	r2, [pc, #356]	; (8005718 <HAL_DMA_Start_IT+0x21c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d018      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a57      	ldr	r2, [pc, #348]	; (800571c <HAL_DMA_Start_IT+0x220>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a56      	ldr	r2, [pc, #344]	; (8005720 <HAL_DMA_Start_IT+0x224>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00e      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a54      	ldr	r2, [pc, #336]	; (8005724 <HAL_DMA_Start_IT+0x228>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a53      	ldr	r2, [pc, #332]	; (8005728 <HAL_DMA_Start_IT+0x22c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a51      	ldr	r2, [pc, #324]	; (800572c <HAL_DMA_Start_IT+0x230>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d108      	bne.n	80055fc <HAL_DMA_Start_IT+0x100>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e007      	b.n	800560c <HAL_DMA_Start_IT+0x110>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f001 fe6a 	bl	80072ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a34      	ldr	r2, [pc, #208]	; (80056f0 <HAL_DMA_Start_IT+0x1f4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a33      	ldr	r2, [pc, #204]	; (80056f4 <HAL_DMA_Start_IT+0x1f8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a31      	ldr	r2, [pc, #196]	; (80056f8 <HAL_DMA_Start_IT+0x1fc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a30      	ldr	r2, [pc, #192]	; (80056fc <HAL_DMA_Start_IT+0x200>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <HAL_DMA_Start_IT+0x204>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2d      	ldr	r2, [pc, #180]	; (8005704 <HAL_DMA_Start_IT+0x208>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2b      	ldr	r2, [pc, #172]	; (8005708 <HAL_DMA_Start_IT+0x20c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <HAL_DMA_Start_IT+0x210>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <HAL_DMA_Start_IT+0x214>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a27      	ldr	r2, [pc, #156]	; (8005714 <HAL_DMA_Start_IT+0x218>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a25      	ldr	r2, [pc, #148]	; (8005718 <HAL_DMA_Start_IT+0x21c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a24      	ldr	r2, [pc, #144]	; (800571c <HAL_DMA_Start_IT+0x220>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <HAL_DMA_Start_IT+0x224>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <HAL_DMA_Start_IT+0x228>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <HAL_DMA_Start_IT+0x22c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	; (800572c <HAL_DMA_Start_IT+0x230>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_Start_IT+0x1c0>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_DMA_Start_IT+0x1c2>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d036      	beq.n	8005730 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 021e 	bic.w	r2, r3, #30
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0216 	orr.w	r2, r2, #22
 80056d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d03e      	beq.n	800575c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0208 	orr.w	r2, r2, #8
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e035      	b.n	800575c <HAL_DMA_Start_IT+0x260>
 80056f0:	40020010 	.word	0x40020010
 80056f4:	40020028 	.word	0x40020028
 80056f8:	40020040 	.word	0x40020040
 80056fc:	40020058 	.word	0x40020058
 8005700:	40020070 	.word	0x40020070
 8005704:	40020088 	.word	0x40020088
 8005708:	400200a0 	.word	0x400200a0
 800570c:	400200b8 	.word	0x400200b8
 8005710:	40020410 	.word	0x40020410
 8005714:	40020428 	.word	0x40020428
 8005718:	40020440 	.word	0x40020440
 800571c:	40020458 	.word	0x40020458
 8005720:	40020470 	.word	0x40020470
 8005724:	40020488 	.word	0x40020488
 8005728:	400204a0 	.word	0x400204a0
 800572c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 020e 	bic.w	r2, r3, #14
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 020a 	orr.w	r2, r2, #10
 8005742:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0204 	orr.w	r2, r2, #4
 800575a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a83      	ldr	r2, [pc, #524]	; (8005970 <HAL_DMA_Start_IT+0x474>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d072      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a82      	ldr	r2, [pc, #520]	; (8005974 <HAL_DMA_Start_IT+0x478>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d06d      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a80      	ldr	r2, [pc, #512]	; (8005978 <HAL_DMA_Start_IT+0x47c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d068      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a7f      	ldr	r2, [pc, #508]	; (800597c <HAL_DMA_Start_IT+0x480>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d063      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a7d      	ldr	r2, [pc, #500]	; (8005980 <HAL_DMA_Start_IT+0x484>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d05e      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a7c      	ldr	r2, [pc, #496]	; (8005984 <HAL_DMA_Start_IT+0x488>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d059      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a7a      	ldr	r2, [pc, #488]	; (8005988 <HAL_DMA_Start_IT+0x48c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d054      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a79      	ldr	r2, [pc, #484]	; (800598c <HAL_DMA_Start_IT+0x490>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d04f      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a77      	ldr	r2, [pc, #476]	; (8005990 <HAL_DMA_Start_IT+0x494>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d04a      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a76      	ldr	r2, [pc, #472]	; (8005994 <HAL_DMA_Start_IT+0x498>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d045      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a74      	ldr	r2, [pc, #464]	; (8005998 <HAL_DMA_Start_IT+0x49c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d040      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a73      	ldr	r2, [pc, #460]	; (800599c <HAL_DMA_Start_IT+0x4a0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d03b      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a71      	ldr	r2, [pc, #452]	; (80059a0 <HAL_DMA_Start_IT+0x4a4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d036      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a70      	ldr	r2, [pc, #448]	; (80059a4 <HAL_DMA_Start_IT+0x4a8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d031      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6e      	ldr	r2, [pc, #440]	; (80059a8 <HAL_DMA_Start_IT+0x4ac>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02c      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6d      	ldr	r2, [pc, #436]	; (80059ac <HAL_DMA_Start_IT+0x4b0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d027      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6b      	ldr	r2, [pc, #428]	; (80059b0 <HAL_DMA_Start_IT+0x4b4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d022      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6a      	ldr	r2, [pc, #424]	; (80059b4 <HAL_DMA_Start_IT+0x4b8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d01d      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a68      	ldr	r2, [pc, #416]	; (80059b8 <HAL_DMA_Start_IT+0x4bc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a67      	ldr	r2, [pc, #412]	; (80059bc <HAL_DMA_Start_IT+0x4c0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	; (80059c0 <HAL_DMA_Start_IT+0x4c4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a64      	ldr	r2, [pc, #400]	; (80059c4 <HAL_DMA_Start_IT+0x4c8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a62      	ldr	r2, [pc, #392]	; (80059c8 <HAL_DMA_Start_IT+0x4cc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a61      	ldr	r2, [pc, #388]	; (80059cc <HAL_DMA_Start_IT+0x4d0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d101      	bne.n	8005850 <HAL_DMA_Start_IT+0x354>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_DMA_Start_IT+0x356>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01a      	beq.n	800588c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005872:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a37      	ldr	r2, [pc, #220]	; (8005970 <HAL_DMA_Start_IT+0x474>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d04a      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a36      	ldr	r2, [pc, #216]	; (8005974 <HAL_DMA_Start_IT+0x478>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d045      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a34      	ldr	r2, [pc, #208]	; (8005978 <HAL_DMA_Start_IT+0x47c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d040      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a33      	ldr	r2, [pc, #204]	; (800597c <HAL_DMA_Start_IT+0x480>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d03b      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a31      	ldr	r2, [pc, #196]	; (8005980 <HAL_DMA_Start_IT+0x484>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d036      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a30      	ldr	r2, [pc, #192]	; (8005984 <HAL_DMA_Start_IT+0x488>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d031      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2e      	ldr	r2, [pc, #184]	; (8005988 <HAL_DMA_Start_IT+0x48c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02c      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a2d      	ldr	r2, [pc, #180]	; (800598c <HAL_DMA_Start_IT+0x490>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d027      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <HAL_DMA_Start_IT+0x494>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d022      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a2a      	ldr	r2, [pc, #168]	; (8005994 <HAL_DMA_Start_IT+0x498>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d01d      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a28      	ldr	r2, [pc, #160]	; (8005998 <HAL_DMA_Start_IT+0x49c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a27      	ldr	r2, [pc, #156]	; (800599c <HAL_DMA_Start_IT+0x4a0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <HAL_DMA_Start_IT+0x4a4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <HAL_DMA_Start_IT+0x4a8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a22      	ldr	r2, [pc, #136]	; (80059a8 <HAL_DMA_Start_IT+0x4ac>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a21      	ldr	r2, [pc, #132]	; (80059ac <HAL_DMA_Start_IT+0x4b0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d108      	bne.n	800593e <HAL_DMA_Start_IT+0x442>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e012      	b.n	8005964 <HAL_DMA_Start_IT+0x468>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e009      	b.n	8005964 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005956:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40020010 	.word	0x40020010
 8005974:	40020028 	.word	0x40020028
 8005978:	40020040 	.word	0x40020040
 800597c:	40020058 	.word	0x40020058
 8005980:	40020070 	.word	0x40020070
 8005984:	40020088 	.word	0x40020088
 8005988:	400200a0 	.word	0x400200a0
 800598c:	400200b8 	.word	0x400200b8
 8005990:	40020410 	.word	0x40020410
 8005994:	40020428 	.word	0x40020428
 8005998:	40020440 	.word	0x40020440
 800599c:	40020458 	.word	0x40020458
 80059a0:	40020470 	.word	0x40020470
 80059a4:	40020488 	.word	0x40020488
 80059a8:	400204a0 	.word	0x400204a0
 80059ac:	400204b8 	.word	0x400204b8
 80059b0:	58025408 	.word	0x58025408
 80059b4:	5802541c 	.word	0x5802541c
 80059b8:	58025430 	.word	0x58025430
 80059bc:	58025444 	.word	0x58025444
 80059c0:	58025458 	.word	0x58025458
 80059c4:	5802546c 	.word	0x5802546c
 80059c8:	58025480 	.word	0x58025480
 80059cc:	58025494 	.word	0x58025494

080059d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80059d8:	f7fd f90c 	bl	8002bf4 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e2dc      	b.n	8005fa2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d008      	beq.n	8005a06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2280      	movs	r2, #128	; 0x80
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e2cd      	b.n	8005fa2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a76      	ldr	r2, [pc, #472]	; (8005be4 <HAL_DMA_Abort+0x214>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d04a      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a74      	ldr	r2, [pc, #464]	; (8005be8 <HAL_DMA_Abort+0x218>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d045      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a73      	ldr	r2, [pc, #460]	; (8005bec <HAL_DMA_Abort+0x21c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d040      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a71      	ldr	r2, [pc, #452]	; (8005bf0 <HAL_DMA_Abort+0x220>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d03b      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a70      	ldr	r2, [pc, #448]	; (8005bf4 <HAL_DMA_Abort+0x224>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d036      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a6e      	ldr	r2, [pc, #440]	; (8005bf8 <HAL_DMA_Abort+0x228>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d031      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a6d      	ldr	r2, [pc, #436]	; (8005bfc <HAL_DMA_Abort+0x22c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d02c      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a6b      	ldr	r2, [pc, #428]	; (8005c00 <HAL_DMA_Abort+0x230>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d027      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6a      	ldr	r2, [pc, #424]	; (8005c04 <HAL_DMA_Abort+0x234>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a68      	ldr	r2, [pc, #416]	; (8005c08 <HAL_DMA_Abort+0x238>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a67      	ldr	r2, [pc, #412]	; (8005c0c <HAL_DMA_Abort+0x23c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a65      	ldr	r2, [pc, #404]	; (8005c10 <HAL_DMA_Abort+0x240>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a64      	ldr	r2, [pc, #400]	; (8005c14 <HAL_DMA_Abort+0x244>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a62      	ldr	r2, [pc, #392]	; (8005c18 <HAL_DMA_Abort+0x248>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a61      	ldr	r2, [pc, #388]	; (8005c1c <HAL_DMA_Abort+0x24c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_DMA_Abort+0xd6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5f      	ldr	r2, [pc, #380]	; (8005c20 <HAL_DMA_Abort+0x250>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_DMA_Abort+0xda>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_DMA_Abort+0xdc>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d013      	beq.n	8005ad8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 021e 	bic.w	r2, r2, #30
 8005abe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ace:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e00a      	b.n	8005aee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 020e 	bic.w	r2, r2, #14
 8005ae6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a3c      	ldr	r2, [pc, #240]	; (8005be4 <HAL_DMA_Abort+0x214>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d072      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a3a      	ldr	r2, [pc, #232]	; (8005be8 <HAL_DMA_Abort+0x218>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d06d      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a39      	ldr	r2, [pc, #228]	; (8005bec <HAL_DMA_Abort+0x21c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d068      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a37      	ldr	r2, [pc, #220]	; (8005bf0 <HAL_DMA_Abort+0x220>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d063      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a36      	ldr	r2, [pc, #216]	; (8005bf4 <HAL_DMA_Abort+0x224>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d05e      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a34      	ldr	r2, [pc, #208]	; (8005bf8 <HAL_DMA_Abort+0x228>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d059      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a33      	ldr	r2, [pc, #204]	; (8005bfc <HAL_DMA_Abort+0x22c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d054      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a31      	ldr	r2, [pc, #196]	; (8005c00 <HAL_DMA_Abort+0x230>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d04f      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a30      	ldr	r2, [pc, #192]	; (8005c04 <HAL_DMA_Abort+0x234>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d04a      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2e      	ldr	r2, [pc, #184]	; (8005c08 <HAL_DMA_Abort+0x238>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d045      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a2d      	ldr	r2, [pc, #180]	; (8005c0c <HAL_DMA_Abort+0x23c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d040      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <HAL_DMA_Abort+0x240>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d03b      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <HAL_DMA_Abort+0x244>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d036      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a28      	ldr	r2, [pc, #160]	; (8005c18 <HAL_DMA_Abort+0x248>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d031      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <HAL_DMA_Abort+0x24c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d02c      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <HAL_DMA_Abort+0x250>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d027      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a24      	ldr	r2, [pc, #144]	; (8005c24 <HAL_DMA_Abort+0x254>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a22      	ldr	r2, [pc, #136]	; (8005c28 <HAL_DMA_Abort+0x258>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a21      	ldr	r2, [pc, #132]	; (8005c2c <HAL_DMA_Abort+0x25c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <HAL_DMA_Abort+0x260>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1e      	ldr	r2, [pc, #120]	; (8005c34 <HAL_DMA_Abort+0x264>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <HAL_DMA_Abort+0x268>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1b      	ldr	r2, [pc, #108]	; (8005c3c <HAL_DMA_Abort+0x26c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_DMA_Abort+0x20e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <HAL_DMA_Abort+0x270>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d132      	bne.n	8005c44 <HAL_DMA_Abort+0x274>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e031      	b.n	8005c46 <HAL_DMA_Abort+0x276>
 8005be2:	bf00      	nop
 8005be4:	40020010 	.word	0x40020010
 8005be8:	40020028 	.word	0x40020028
 8005bec:	40020040 	.word	0x40020040
 8005bf0:	40020058 	.word	0x40020058
 8005bf4:	40020070 	.word	0x40020070
 8005bf8:	40020088 	.word	0x40020088
 8005bfc:	400200a0 	.word	0x400200a0
 8005c00:	400200b8 	.word	0x400200b8
 8005c04:	40020410 	.word	0x40020410
 8005c08:	40020428 	.word	0x40020428
 8005c0c:	40020440 	.word	0x40020440
 8005c10:	40020458 	.word	0x40020458
 8005c14:	40020470 	.word	0x40020470
 8005c18:	40020488 	.word	0x40020488
 8005c1c:	400204a0 	.word	0x400204a0
 8005c20:	400204b8 	.word	0x400204b8
 8005c24:	58025408 	.word	0x58025408
 8005c28:	5802541c 	.word	0x5802541c
 8005c2c:	58025430 	.word	0x58025430
 8005c30:	58025444 	.word	0x58025444
 8005c34:	58025458 	.word	0x58025458
 8005c38:	5802546c 	.word	0x5802546c
 8005c3c:	58025480 	.word	0x58025480
 8005c40:	58025494 	.word	0x58025494
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a6d      	ldr	r2, [pc, #436]	; (8005e14 <HAL_DMA_Abort+0x444>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d04a      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a6b      	ldr	r2, [pc, #428]	; (8005e18 <HAL_DMA_Abort+0x448>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d045      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6a      	ldr	r2, [pc, #424]	; (8005e1c <HAL_DMA_Abort+0x44c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d040      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a68      	ldr	r2, [pc, #416]	; (8005e20 <HAL_DMA_Abort+0x450>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d03b      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a67      	ldr	r2, [pc, #412]	; (8005e24 <HAL_DMA_Abort+0x454>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d036      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a65      	ldr	r2, [pc, #404]	; (8005e28 <HAL_DMA_Abort+0x458>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d031      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a64      	ldr	r2, [pc, #400]	; (8005e2c <HAL_DMA_Abort+0x45c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d02c      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a62      	ldr	r2, [pc, #392]	; (8005e30 <HAL_DMA_Abort+0x460>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d027      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a61      	ldr	r2, [pc, #388]	; (8005e34 <HAL_DMA_Abort+0x464>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a5f      	ldr	r2, [pc, #380]	; (8005e38 <HAL_DMA_Abort+0x468>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01d      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a5e      	ldr	r2, [pc, #376]	; (8005e3c <HAL_DMA_Abort+0x46c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a5c      	ldr	r2, [pc, #368]	; (8005e40 <HAL_DMA_Abort+0x470>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a5b      	ldr	r2, [pc, #364]	; (8005e44 <HAL_DMA_Abort+0x474>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a59      	ldr	r2, [pc, #356]	; (8005e48 <HAL_DMA_Abort+0x478>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <HAL_DMA_Abort+0x47c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_DMA_Abort+0x32a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a56      	ldr	r2, [pc, #344]	; (8005e50 <HAL_DMA_Abort+0x480>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d108      	bne.n	8005d0c <HAL_DMA_Abort+0x33c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e007      	b.n	8005d1c <HAL_DMA_Abort+0x34c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d1c:	e013      	b.n	8005d46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d1e:	f7fc ff69 	bl	8002bf4 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d90c      	bls.n	8005d46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2203      	movs	r2, #3
 8005d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e12d      	b.n	8005fa2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2f      	ldr	r2, [pc, #188]	; (8005e14 <HAL_DMA_Abort+0x444>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d04a      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2d      	ldr	r2, [pc, #180]	; (8005e18 <HAL_DMA_Abort+0x448>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d045      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <HAL_DMA_Abort+0x44c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d040      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <HAL_DMA_Abort+0x450>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d03b      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a29      	ldr	r2, [pc, #164]	; (8005e24 <HAL_DMA_Abort+0x454>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d036      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <HAL_DMA_Abort+0x458>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d031      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <HAL_DMA_Abort+0x45c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d02c      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <HAL_DMA_Abort+0x460>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d027      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a23      	ldr	r2, [pc, #140]	; (8005e34 <HAL_DMA_Abort+0x464>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d022      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <HAL_DMA_Abort+0x468>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01d      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <HAL_DMA_Abort+0x46c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d018      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <HAL_DMA_Abort+0x470>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_DMA_Abort+0x474>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_DMA_Abort+0x478>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <HAL_DMA_Abort+0x47c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_DMA_Abort+0x422>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <HAL_DMA_Abort+0x480>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <HAL_DMA_Abort+0x426>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_DMA_Abort+0x428>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d02b      	beq.n	8005e54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	223f      	movs	r2, #63	; 0x3f
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	609a      	str	r2, [r3, #8]
 8005e12:	e02a      	b.n	8005e6a <HAL_DMA_Abort+0x49a>
 8005e14:	40020010 	.word	0x40020010
 8005e18:	40020028 	.word	0x40020028
 8005e1c:	40020040 	.word	0x40020040
 8005e20:	40020058 	.word	0x40020058
 8005e24:	40020070 	.word	0x40020070
 8005e28:	40020088 	.word	0x40020088
 8005e2c:	400200a0 	.word	0x400200a0
 8005e30:	400200b8 	.word	0x400200b8
 8005e34:	40020410 	.word	0x40020410
 8005e38:	40020428 	.word	0x40020428
 8005e3c:	40020440 	.word	0x40020440
 8005e40:	40020458 	.word	0x40020458
 8005e44:	40020470 	.word	0x40020470
 8005e48:	40020488 	.word	0x40020488
 8005e4c:	400204a0 	.word	0x400204a0
 8005e50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5e:	f003 031f 	and.w	r3, r3, #31
 8005e62:	2201      	movs	r2, #1
 8005e64:	409a      	lsls	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a4f      	ldr	r2, [pc, #316]	; (8005fac <HAL_DMA_Abort+0x5dc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d072      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a4d      	ldr	r2, [pc, #308]	; (8005fb0 <HAL_DMA_Abort+0x5e0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d06d      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a4c      	ldr	r2, [pc, #304]	; (8005fb4 <HAL_DMA_Abort+0x5e4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d068      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a4a      	ldr	r2, [pc, #296]	; (8005fb8 <HAL_DMA_Abort+0x5e8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d063      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a49      	ldr	r2, [pc, #292]	; (8005fbc <HAL_DMA_Abort+0x5ec>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d05e      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a47      	ldr	r2, [pc, #284]	; (8005fc0 <HAL_DMA_Abort+0x5f0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d059      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a46      	ldr	r2, [pc, #280]	; (8005fc4 <HAL_DMA_Abort+0x5f4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d054      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a44      	ldr	r2, [pc, #272]	; (8005fc8 <HAL_DMA_Abort+0x5f8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d04f      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a43      	ldr	r2, [pc, #268]	; (8005fcc <HAL_DMA_Abort+0x5fc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d04a      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a41      	ldr	r2, [pc, #260]	; (8005fd0 <HAL_DMA_Abort+0x600>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d045      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a40      	ldr	r2, [pc, #256]	; (8005fd4 <HAL_DMA_Abort+0x604>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d040      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a3e      	ldr	r2, [pc, #248]	; (8005fd8 <HAL_DMA_Abort+0x608>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d03b      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a3d      	ldr	r2, [pc, #244]	; (8005fdc <HAL_DMA_Abort+0x60c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d036      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a3b      	ldr	r2, [pc, #236]	; (8005fe0 <HAL_DMA_Abort+0x610>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d031      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3a      	ldr	r2, [pc, #232]	; (8005fe4 <HAL_DMA_Abort+0x614>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d02c      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a38      	ldr	r2, [pc, #224]	; (8005fe8 <HAL_DMA_Abort+0x618>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d027      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a37      	ldr	r2, [pc, #220]	; (8005fec <HAL_DMA_Abort+0x61c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d022      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a35      	ldr	r2, [pc, #212]	; (8005ff0 <HAL_DMA_Abort+0x620>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01d      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a34      	ldr	r2, [pc, #208]	; (8005ff4 <HAL_DMA_Abort+0x624>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d018      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a32      	ldr	r2, [pc, #200]	; (8005ff8 <HAL_DMA_Abort+0x628>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d013      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a31      	ldr	r2, [pc, #196]	; (8005ffc <HAL_DMA_Abort+0x62c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00e      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a2f      	ldr	r2, [pc, #188]	; (8006000 <HAL_DMA_Abort+0x630>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2e      	ldr	r2, [pc, #184]	; (8006004 <HAL_DMA_Abort+0x634>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_DMA_Abort+0x58a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <HAL_DMA_Abort+0x638>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d101      	bne.n	8005f5e <HAL_DMA_Abort+0x58e>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <HAL_DMA_Abort+0x590>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d015      	beq.n	8005f90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40020010 	.word	0x40020010
 8005fb0:	40020028 	.word	0x40020028
 8005fb4:	40020040 	.word	0x40020040
 8005fb8:	40020058 	.word	0x40020058
 8005fbc:	40020070 	.word	0x40020070
 8005fc0:	40020088 	.word	0x40020088
 8005fc4:	400200a0 	.word	0x400200a0
 8005fc8:	400200b8 	.word	0x400200b8
 8005fcc:	40020410 	.word	0x40020410
 8005fd0:	40020428 	.word	0x40020428
 8005fd4:	40020440 	.word	0x40020440
 8005fd8:	40020458 	.word	0x40020458
 8005fdc:	40020470 	.word	0x40020470
 8005fe0:	40020488 	.word	0x40020488
 8005fe4:	400204a0 	.word	0x400204a0
 8005fe8:	400204b8 	.word	0x400204b8
 8005fec:	58025408 	.word	0x58025408
 8005ff0:	5802541c 	.word	0x5802541c
 8005ff4:	58025430 	.word	0x58025430
 8005ff8:	58025444 	.word	0x58025444
 8005ffc:	58025458 	.word	0x58025458
 8006000:	5802546c 	.word	0x5802546c
 8006004:	58025480 	.word	0x58025480
 8006008:	58025494 	.word	0x58025494

0800600c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e237      	b.n	800648e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d004      	beq.n	8006034 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2280      	movs	r2, #128	; 0x80
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e22c      	b.n	800648e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a5c      	ldr	r2, [pc, #368]	; (80061ac <HAL_DMA_Abort_IT+0x1a0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d04a      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5b      	ldr	r2, [pc, #364]	; (80061b0 <HAL_DMA_Abort_IT+0x1a4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d045      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a59      	ldr	r2, [pc, #356]	; (80061b4 <HAL_DMA_Abort_IT+0x1a8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d040      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a58      	ldr	r2, [pc, #352]	; (80061b8 <HAL_DMA_Abort_IT+0x1ac>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d03b      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a56      	ldr	r2, [pc, #344]	; (80061bc <HAL_DMA_Abort_IT+0x1b0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d036      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a55      	ldr	r2, [pc, #340]	; (80061c0 <HAL_DMA_Abort_IT+0x1b4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d031      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a53      	ldr	r2, [pc, #332]	; (80061c4 <HAL_DMA_Abort_IT+0x1b8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d02c      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a52      	ldr	r2, [pc, #328]	; (80061c8 <HAL_DMA_Abort_IT+0x1bc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d027      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a50      	ldr	r2, [pc, #320]	; (80061cc <HAL_DMA_Abort_IT+0x1c0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a4f      	ldr	r2, [pc, #316]	; (80061d0 <HAL_DMA_Abort_IT+0x1c4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d01d      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a4d      	ldr	r2, [pc, #308]	; (80061d4 <HAL_DMA_Abort_IT+0x1c8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a4c      	ldr	r2, [pc, #304]	; (80061d8 <HAL_DMA_Abort_IT+0x1cc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a4a      	ldr	r2, [pc, #296]	; (80061dc <HAL_DMA_Abort_IT+0x1d0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a49      	ldr	r2, [pc, #292]	; (80061e0 <HAL_DMA_Abort_IT+0x1d4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a47      	ldr	r2, [pc, #284]	; (80061e4 <HAL_DMA_Abort_IT+0x1d8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_DMA_Abort_IT+0xc8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a46      	ldr	r2, [pc, #280]	; (80061e8 <HAL_DMA_Abort_IT+0x1dc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d101      	bne.n	80060d8 <HAL_DMA_Abort_IT+0xcc>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <HAL_DMA_Abort_IT+0xce>
 80060d8:	2300      	movs	r3, #0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8086 	beq.w	80061ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2204      	movs	r2, #4
 80060e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2f      	ldr	r2, [pc, #188]	; (80061ac <HAL_DMA_Abort_IT+0x1a0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d04a      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2e      	ldr	r2, [pc, #184]	; (80061b0 <HAL_DMA_Abort_IT+0x1a4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d045      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a2c      	ldr	r2, [pc, #176]	; (80061b4 <HAL_DMA_Abort_IT+0x1a8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d040      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2b      	ldr	r2, [pc, #172]	; (80061b8 <HAL_DMA_Abort_IT+0x1ac>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d03b      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a29      	ldr	r2, [pc, #164]	; (80061bc <HAL_DMA_Abort_IT+0x1b0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d036      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a28      	ldr	r2, [pc, #160]	; (80061c0 <HAL_DMA_Abort_IT+0x1b4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d031      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a26      	ldr	r2, [pc, #152]	; (80061c4 <HAL_DMA_Abort_IT+0x1b8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d02c      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a25      	ldr	r2, [pc, #148]	; (80061c8 <HAL_DMA_Abort_IT+0x1bc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d027      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a23      	ldr	r2, [pc, #140]	; (80061cc <HAL_DMA_Abort_IT+0x1c0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d022      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <HAL_DMA_Abort_IT+0x1c4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d01d      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <HAL_DMA_Abort_IT+0x1c8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d018      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <HAL_DMA_Abort_IT+0x1cc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_DMA_Abort_IT+0x1d0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00e      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1c      	ldr	r2, [pc, #112]	; (80061e0 <HAL_DMA_Abort_IT+0x1d4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <HAL_DMA_Abort_IT+0x1d8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <HAL_DMA_Abort_IT+0x17c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <HAL_DMA_Abort_IT+0x1dc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d108      	bne.n	800619a <HAL_DMA_Abort_IT+0x18e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	e178      	b.n	800648c <HAL_DMA_Abort_IT+0x480>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e16f      	b.n	800648c <HAL_DMA_Abort_IT+0x480>
 80061ac:	40020010 	.word	0x40020010
 80061b0:	40020028 	.word	0x40020028
 80061b4:	40020040 	.word	0x40020040
 80061b8:	40020058 	.word	0x40020058
 80061bc:	40020070 	.word	0x40020070
 80061c0:	40020088 	.word	0x40020088
 80061c4:	400200a0 	.word	0x400200a0
 80061c8:	400200b8 	.word	0x400200b8
 80061cc:	40020410 	.word	0x40020410
 80061d0:	40020428 	.word	0x40020428
 80061d4:	40020440 	.word	0x40020440
 80061d8:	40020458 	.word	0x40020458
 80061dc:	40020470 	.word	0x40020470
 80061e0:	40020488 	.word	0x40020488
 80061e4:	400204a0 	.word	0x400204a0
 80061e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 020e 	bic.w	r2, r2, #14
 80061fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a6c      	ldr	r2, [pc, #432]	; (80063b4 <HAL_DMA_Abort_IT+0x3a8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d04a      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a6b      	ldr	r2, [pc, #428]	; (80063b8 <HAL_DMA_Abort_IT+0x3ac>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d045      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a69      	ldr	r2, [pc, #420]	; (80063bc <HAL_DMA_Abort_IT+0x3b0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d040      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a68      	ldr	r2, [pc, #416]	; (80063c0 <HAL_DMA_Abort_IT+0x3b4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d03b      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a66      	ldr	r2, [pc, #408]	; (80063c4 <HAL_DMA_Abort_IT+0x3b8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d036      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a65      	ldr	r2, [pc, #404]	; (80063c8 <HAL_DMA_Abort_IT+0x3bc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d031      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a63      	ldr	r2, [pc, #396]	; (80063cc <HAL_DMA_Abort_IT+0x3c0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d02c      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a62      	ldr	r2, [pc, #392]	; (80063d0 <HAL_DMA_Abort_IT+0x3c4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d027      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a60      	ldr	r2, [pc, #384]	; (80063d4 <HAL_DMA_Abort_IT+0x3c8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d022      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a5f      	ldr	r2, [pc, #380]	; (80063d8 <HAL_DMA_Abort_IT+0x3cc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d01d      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5d      	ldr	r2, [pc, #372]	; (80063dc <HAL_DMA_Abort_IT+0x3d0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d018      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5c      	ldr	r2, [pc, #368]	; (80063e0 <HAL_DMA_Abort_IT+0x3d4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a5a      	ldr	r2, [pc, #360]	; (80063e4 <HAL_DMA_Abort_IT+0x3d8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a59      	ldr	r2, [pc, #356]	; (80063e8 <HAL_DMA_Abort_IT+0x3dc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d009      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a57      	ldr	r2, [pc, #348]	; (80063ec <HAL_DMA_Abort_IT+0x3e0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_DMA_Abort_IT+0x290>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a56      	ldr	r2, [pc, #344]	; (80063f0 <HAL_DMA_Abort_IT+0x3e4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <HAL_DMA_Abort_IT+0x2a2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e007      	b.n	80062be <HAL_DMA_Abort_IT+0x2b2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a3c      	ldr	r2, [pc, #240]	; (80063b4 <HAL_DMA_Abort_IT+0x3a8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d072      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3a      	ldr	r2, [pc, #232]	; (80063b8 <HAL_DMA_Abort_IT+0x3ac>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d06d      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a39      	ldr	r2, [pc, #228]	; (80063bc <HAL_DMA_Abort_IT+0x3b0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d068      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a37      	ldr	r2, [pc, #220]	; (80063c0 <HAL_DMA_Abort_IT+0x3b4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d063      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a36      	ldr	r2, [pc, #216]	; (80063c4 <HAL_DMA_Abort_IT+0x3b8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d05e      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a34      	ldr	r2, [pc, #208]	; (80063c8 <HAL_DMA_Abort_IT+0x3bc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d059      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a33      	ldr	r2, [pc, #204]	; (80063cc <HAL_DMA_Abort_IT+0x3c0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d054      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a31      	ldr	r2, [pc, #196]	; (80063d0 <HAL_DMA_Abort_IT+0x3c4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d04f      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a30      	ldr	r2, [pc, #192]	; (80063d4 <HAL_DMA_Abort_IT+0x3c8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d04a      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2e      	ldr	r2, [pc, #184]	; (80063d8 <HAL_DMA_Abort_IT+0x3cc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d045      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2d      	ldr	r2, [pc, #180]	; (80063dc <HAL_DMA_Abort_IT+0x3d0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d040      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2b      	ldr	r2, [pc, #172]	; (80063e0 <HAL_DMA_Abort_IT+0x3d4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d03b      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2a      	ldr	r2, [pc, #168]	; (80063e4 <HAL_DMA_Abort_IT+0x3d8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d036      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a28      	ldr	r2, [pc, #160]	; (80063e8 <HAL_DMA_Abort_IT+0x3dc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d031      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a27      	ldr	r2, [pc, #156]	; (80063ec <HAL_DMA_Abort_IT+0x3e0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d02c      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <HAL_DMA_Abort_IT+0x3e4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d027      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a24      	ldr	r2, [pc, #144]	; (80063f4 <HAL_DMA_Abort_IT+0x3e8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d022      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a22      	ldr	r2, [pc, #136]	; (80063f8 <HAL_DMA_Abort_IT+0x3ec>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01d      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a21      	ldr	r2, [pc, #132]	; (80063fc <HAL_DMA_Abort_IT+0x3f0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d018      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <HAL_DMA_Abort_IT+0x3f4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1e      	ldr	r2, [pc, #120]	; (8006404 <HAL_DMA_Abort_IT+0x3f8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00e      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <HAL_DMA_Abort_IT+0x3fc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1b      	ldr	r2, [pc, #108]	; (800640c <HAL_DMA_Abort_IT+0x400>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_DMA_Abort_IT+0x3a2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <HAL_DMA_Abort_IT+0x404>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d132      	bne.n	8006414 <HAL_DMA_Abort_IT+0x408>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e031      	b.n	8006416 <HAL_DMA_Abort_IT+0x40a>
 80063b2:	bf00      	nop
 80063b4:	40020010 	.word	0x40020010
 80063b8:	40020028 	.word	0x40020028
 80063bc:	40020040 	.word	0x40020040
 80063c0:	40020058 	.word	0x40020058
 80063c4:	40020070 	.word	0x40020070
 80063c8:	40020088 	.word	0x40020088
 80063cc:	400200a0 	.word	0x400200a0
 80063d0:	400200b8 	.word	0x400200b8
 80063d4:	40020410 	.word	0x40020410
 80063d8:	40020428 	.word	0x40020428
 80063dc:	40020440 	.word	0x40020440
 80063e0:	40020458 	.word	0x40020458
 80063e4:	40020470 	.word	0x40020470
 80063e8:	40020488 	.word	0x40020488
 80063ec:	400204a0 	.word	0x400204a0
 80063f0:	400204b8 	.word	0x400204b8
 80063f4:	58025408 	.word	0x58025408
 80063f8:	5802541c 	.word	0x5802541c
 80063fc:	58025430 	.word	0x58025430
 8006400:	58025444 	.word	0x58025444
 8006404:	58025458 	.word	0x58025458
 8006408:	5802546c 	.word	0x5802546c
 800640c:	58025480 	.word	0x58025480
 8006410:	58025494 	.word	0x58025494
 8006414:	2300      	movs	r3, #0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d028      	beq.n	800646c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006428:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2201      	movs	r2, #1
 800643a:	409a      	lsls	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006448:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006460:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800646a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop

08006498 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064a4:	4b67      	ldr	r3, [pc, #412]	; (8006644 <HAL_DMA_IRQHandler+0x1ac>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a67      	ldr	r2, [pc, #412]	; (8006648 <HAL_DMA_IRQHandler+0x1b0>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	0a9b      	lsrs	r3, r3, #10
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a5f      	ldr	r2, [pc, #380]	; (800664c <HAL_DMA_IRQHandler+0x1b4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d04a      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a5d      	ldr	r2, [pc, #372]	; (8006650 <HAL_DMA_IRQHandler+0x1b8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d045      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a5c      	ldr	r2, [pc, #368]	; (8006654 <HAL_DMA_IRQHandler+0x1bc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d040      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a5a      	ldr	r2, [pc, #360]	; (8006658 <HAL_DMA_IRQHandler+0x1c0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d03b      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a59      	ldr	r2, [pc, #356]	; (800665c <HAL_DMA_IRQHandler+0x1c4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d036      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a57      	ldr	r2, [pc, #348]	; (8006660 <HAL_DMA_IRQHandler+0x1c8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d031      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a56      	ldr	r2, [pc, #344]	; (8006664 <HAL_DMA_IRQHandler+0x1cc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d02c      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a54      	ldr	r2, [pc, #336]	; (8006668 <HAL_DMA_IRQHandler+0x1d0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d027      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a53      	ldr	r2, [pc, #332]	; (800666c <HAL_DMA_IRQHandler+0x1d4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a51      	ldr	r2, [pc, #324]	; (8006670 <HAL_DMA_IRQHandler+0x1d8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01d      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a50      	ldr	r2, [pc, #320]	; (8006674 <HAL_DMA_IRQHandler+0x1dc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a4e      	ldr	r2, [pc, #312]	; (8006678 <HAL_DMA_IRQHandler+0x1e0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a4d      	ldr	r2, [pc, #308]	; (800667c <HAL_DMA_IRQHandler+0x1e4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a4b      	ldr	r2, [pc, #300]	; (8006680 <HAL_DMA_IRQHandler+0x1e8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a4a      	ldr	r2, [pc, #296]	; (8006684 <HAL_DMA_IRQHandler+0x1ec>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_DMA_IRQHandler+0xd2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a48      	ldr	r2, [pc, #288]	; (8006688 <HAL_DMA_IRQHandler+0x1f0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <HAL_DMA_IRQHandler+0xd6>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <HAL_DMA_IRQHandler+0xd8>
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 842b 	beq.w	8006dcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2208      	movs	r2, #8
 8006580:	409a      	lsls	r2, r3
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	4013      	ands	r3, r2
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80a2 	beq.w	80066d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2e      	ldr	r2, [pc, #184]	; (800664c <HAL_DMA_IRQHandler+0x1b4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d04a      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a2d      	ldr	r2, [pc, #180]	; (8006650 <HAL_DMA_IRQHandler+0x1b8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d045      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a2b      	ldr	r2, [pc, #172]	; (8006654 <HAL_DMA_IRQHandler+0x1bc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d040      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a2a      	ldr	r2, [pc, #168]	; (8006658 <HAL_DMA_IRQHandler+0x1c0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d03b      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a28      	ldr	r2, [pc, #160]	; (800665c <HAL_DMA_IRQHandler+0x1c4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d036      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a27      	ldr	r2, [pc, #156]	; (8006660 <HAL_DMA_IRQHandler+0x1c8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d031      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a25      	ldr	r2, [pc, #148]	; (8006664 <HAL_DMA_IRQHandler+0x1cc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d02c      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a24      	ldr	r2, [pc, #144]	; (8006668 <HAL_DMA_IRQHandler+0x1d0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d027      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a22      	ldr	r2, [pc, #136]	; (800666c <HAL_DMA_IRQHandler+0x1d4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a21      	ldr	r2, [pc, #132]	; (8006670 <HAL_DMA_IRQHandler+0x1d8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01d      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1f      	ldr	r2, [pc, #124]	; (8006674 <HAL_DMA_IRQHandler+0x1dc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1e      	ldr	r2, [pc, #120]	; (8006678 <HAL_DMA_IRQHandler+0x1e0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1c      	ldr	r2, [pc, #112]	; (800667c <HAL_DMA_IRQHandler+0x1e4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a1b      	ldr	r2, [pc, #108]	; (8006680 <HAL_DMA_IRQHandler+0x1e8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <HAL_DMA_IRQHandler+0x1ec>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_DMA_IRQHandler+0x194>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <HAL_DMA_IRQHandler+0x1f0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d12f      	bne.n	800668c <HAL_DMA_IRQHandler+0x1f4>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	bf14      	ite	ne
 800663a:	2301      	movne	r3, #1
 800663c:	2300      	moveq	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	e02e      	b.n	80066a0 <HAL_DMA_IRQHandler+0x208>
 8006642:	bf00      	nop
 8006644:	24000088 	.word	0x24000088
 8006648:	1b4e81b5 	.word	0x1b4e81b5
 800664c:	40020010 	.word	0x40020010
 8006650:	40020028 	.word	0x40020028
 8006654:	40020040 	.word	0x40020040
 8006658:	40020058 	.word	0x40020058
 800665c:	40020070 	.word	0x40020070
 8006660:	40020088 	.word	0x40020088
 8006664:	400200a0 	.word	0x400200a0
 8006668:	400200b8 	.word	0x400200b8
 800666c:	40020410 	.word	0x40020410
 8006670:	40020428 	.word	0x40020428
 8006674:	40020440 	.word	0x40020440
 8006678:	40020458 	.word	0x40020458
 800667c:	40020470 	.word	0x40020470
 8006680:	40020488 	.word	0x40020488
 8006684:	400204a0 	.word	0x400204a0
 8006688:	400204b8 	.word	0x400204b8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	bf14      	ite	ne
 800669a:	2301      	movne	r3, #1
 800669c:	2300      	moveq	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d015      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0204 	bic.w	r2, r2, #4
 80066b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2208      	movs	r2, #8
 80066be:	409a      	lsls	r2, r3
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	f043 0201 	orr.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d4:	f003 031f 	and.w	r3, r3, #31
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06e      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a69      	ldr	r2, [pc, #420]	; (8006890 <HAL_DMA_IRQHandler+0x3f8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d04a      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a67      	ldr	r2, [pc, #412]	; (8006894 <HAL_DMA_IRQHandler+0x3fc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d045      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a66      	ldr	r2, [pc, #408]	; (8006898 <HAL_DMA_IRQHandler+0x400>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d040      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a64      	ldr	r2, [pc, #400]	; (800689c <HAL_DMA_IRQHandler+0x404>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d03b      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a63      	ldr	r2, [pc, #396]	; (80068a0 <HAL_DMA_IRQHandler+0x408>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d036      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a61      	ldr	r2, [pc, #388]	; (80068a4 <HAL_DMA_IRQHandler+0x40c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d031      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a60      	ldr	r2, [pc, #384]	; (80068a8 <HAL_DMA_IRQHandler+0x410>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d02c      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a5e      	ldr	r2, [pc, #376]	; (80068ac <HAL_DMA_IRQHandler+0x414>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d027      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a5d      	ldr	r2, [pc, #372]	; (80068b0 <HAL_DMA_IRQHandler+0x418>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d022      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a5b      	ldr	r2, [pc, #364]	; (80068b4 <HAL_DMA_IRQHandler+0x41c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01d      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a5a      	ldr	r2, [pc, #360]	; (80068b8 <HAL_DMA_IRQHandler+0x420>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d018      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a58      	ldr	r2, [pc, #352]	; (80068bc <HAL_DMA_IRQHandler+0x424>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a57      	ldr	r2, [pc, #348]	; (80068c0 <HAL_DMA_IRQHandler+0x428>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00e      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a55      	ldr	r2, [pc, #340]	; (80068c4 <HAL_DMA_IRQHandler+0x42c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a54      	ldr	r2, [pc, #336]	; (80068c8 <HAL_DMA_IRQHandler+0x430>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_DMA_IRQHandler+0x2ee>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a52      	ldr	r2, [pc, #328]	; (80068cc <HAL_DMA_IRQHandler+0x434>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d10a      	bne.n	800679c <HAL_DMA_IRQHandler+0x304>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	e003      	b.n	80067a4 <HAL_DMA_IRQHandler+0x30c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00d      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2201      	movs	r2, #1
 80067b2:	409a      	lsls	r2, r3
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	f043 0202 	orr.w	r2, r3, #2
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c8:	f003 031f 	and.w	r3, r3, #31
 80067cc:	2204      	movs	r2, #4
 80067ce:	409a      	lsls	r2, r3
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 808f 	beq.w	80068f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2c      	ldr	r2, [pc, #176]	; (8006890 <HAL_DMA_IRQHandler+0x3f8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <HAL_DMA_IRQHandler+0x3fc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a29      	ldr	r2, [pc, #164]	; (8006898 <HAL_DMA_IRQHandler+0x400>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a27      	ldr	r2, [pc, #156]	; (800689c <HAL_DMA_IRQHandler+0x404>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a26      	ldr	r2, [pc, #152]	; (80068a0 <HAL_DMA_IRQHandler+0x408>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a24      	ldr	r2, [pc, #144]	; (80068a4 <HAL_DMA_IRQHandler+0x40c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a23      	ldr	r2, [pc, #140]	; (80068a8 <HAL_DMA_IRQHandler+0x410>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a21      	ldr	r2, [pc, #132]	; (80068ac <HAL_DMA_IRQHandler+0x414>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <HAL_DMA_IRQHandler+0x418>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1e      	ldr	r2, [pc, #120]	; (80068b4 <HAL_DMA_IRQHandler+0x41c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <HAL_DMA_IRQHandler+0x420>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <HAL_DMA_IRQHandler+0x424>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_DMA_IRQHandler+0x428>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <HAL_DMA_IRQHandler+0x42c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <HAL_DMA_IRQHandler+0x430>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_IRQHandler+0x3e2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_DMA_IRQHandler+0x434>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d12a      	bne.n	80068d0 <HAL_DMA_IRQHandler+0x438>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	bf14      	ite	ne
 8006888:	2301      	movne	r3, #1
 800688a:	2300      	moveq	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	e023      	b.n	80068d8 <HAL_DMA_IRQHandler+0x440>
 8006890:	40020010 	.word	0x40020010
 8006894:	40020028 	.word	0x40020028
 8006898:	40020040 	.word	0x40020040
 800689c:	40020058 	.word	0x40020058
 80068a0:	40020070 	.word	0x40020070
 80068a4:	40020088 	.word	0x40020088
 80068a8:	400200a0 	.word	0x400200a0
 80068ac:	400200b8 	.word	0x400200b8
 80068b0:	40020410 	.word	0x40020410
 80068b4:	40020428 	.word	0x40020428
 80068b8:	40020440 	.word	0x40020440
 80068bc:	40020458 	.word	0x40020458
 80068c0:	40020470 	.word	0x40020470
 80068c4:	40020488 	.word	0x40020488
 80068c8:	400204a0 	.word	0x400204a0
 80068cc:	400204b8 	.word	0x400204b8
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00d      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2204      	movs	r2, #4
 80068e6:	409a      	lsls	r2, r3
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	f043 0204 	orr.w	r2, r3, #4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2210      	movs	r2, #16
 8006902:	409a      	lsls	r2, r3
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	4013      	ands	r3, r2
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80a6 	beq.w	8006a5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a85      	ldr	r2, [pc, #532]	; (8006b28 <HAL_DMA_IRQHandler+0x690>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d04a      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a83      	ldr	r2, [pc, #524]	; (8006b2c <HAL_DMA_IRQHandler+0x694>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d045      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a82      	ldr	r2, [pc, #520]	; (8006b30 <HAL_DMA_IRQHandler+0x698>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d040      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a80      	ldr	r2, [pc, #512]	; (8006b34 <HAL_DMA_IRQHandler+0x69c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d03b      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7f      	ldr	r2, [pc, #508]	; (8006b38 <HAL_DMA_IRQHandler+0x6a0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d036      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a7d      	ldr	r2, [pc, #500]	; (8006b3c <HAL_DMA_IRQHandler+0x6a4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d031      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7c      	ldr	r2, [pc, #496]	; (8006b40 <HAL_DMA_IRQHandler+0x6a8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d02c      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a7a      	ldr	r2, [pc, #488]	; (8006b44 <HAL_DMA_IRQHandler+0x6ac>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d027      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a79      	ldr	r2, [pc, #484]	; (8006b48 <HAL_DMA_IRQHandler+0x6b0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d022      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a77      	ldr	r2, [pc, #476]	; (8006b4c <HAL_DMA_IRQHandler+0x6b4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01d      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a76      	ldr	r2, [pc, #472]	; (8006b50 <HAL_DMA_IRQHandler+0x6b8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d018      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	; (8006b54 <HAL_DMA_IRQHandler+0x6bc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a73      	ldr	r2, [pc, #460]	; (8006b58 <HAL_DMA_IRQHandler+0x6c0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00e      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a71      	ldr	r2, [pc, #452]	; (8006b5c <HAL_DMA_IRQHandler+0x6c4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a70      	ldr	r2, [pc, #448]	; (8006b60 <HAL_DMA_IRQHandler+0x6c8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_DMA_IRQHandler+0x516>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a6e      	ldr	r2, [pc, #440]	; (8006b64 <HAL_DMA_IRQHandler+0x6cc>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d10a      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x52c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	e009      	b.n	80069d8 <HAL_DMA_IRQHandler+0x540>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bf14      	ite	ne
 80069d2:	2301      	movne	r3, #1
 80069d4:	2300      	moveq	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d03e      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2210      	movs	r2, #16
 80069e6:	409a      	lsls	r2, r3
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d018      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d108      	bne.n	8006a1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d024      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
 8006a18:	e01f      	b.n	8006a5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01b      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	4798      	blx	r3
 8006a2a:	e016      	b.n	8006a5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d107      	bne.n	8006a4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0208 	bic.w	r2, r2, #8
 8006a48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2220      	movs	r2, #32
 8006a64:	409a      	lsls	r2, r3
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8110 	beq.w	8006c90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <HAL_DMA_IRQHandler+0x690>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d04a      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2b      	ldr	r2, [pc, #172]	; (8006b2c <HAL_DMA_IRQHandler+0x694>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d045      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <HAL_DMA_IRQHandler+0x698>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d040      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a28      	ldr	r2, [pc, #160]	; (8006b34 <HAL_DMA_IRQHandler+0x69c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d03b      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a26      	ldr	r2, [pc, #152]	; (8006b38 <HAL_DMA_IRQHandler+0x6a0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d036      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a25      	ldr	r2, [pc, #148]	; (8006b3c <HAL_DMA_IRQHandler+0x6a4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d031      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a23      	ldr	r2, [pc, #140]	; (8006b40 <HAL_DMA_IRQHandler+0x6a8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d02c      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a22      	ldr	r2, [pc, #136]	; (8006b44 <HAL_DMA_IRQHandler+0x6ac>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d027      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a20      	ldr	r2, [pc, #128]	; (8006b48 <HAL_DMA_IRQHandler+0x6b0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d022      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1f      	ldr	r2, [pc, #124]	; (8006b4c <HAL_DMA_IRQHandler+0x6b4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d01d      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1d      	ldr	r2, [pc, #116]	; (8006b50 <HAL_DMA_IRQHandler+0x6b8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d018      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1c      	ldr	r2, [pc, #112]	; (8006b54 <HAL_DMA_IRQHandler+0x6bc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1a      	ldr	r2, [pc, #104]	; (8006b58 <HAL_DMA_IRQHandler+0x6c0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00e      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a19      	ldr	r2, [pc, #100]	; (8006b5c <HAL_DMA_IRQHandler+0x6c4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d009      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <HAL_DMA_IRQHandler+0x6c8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_DMA_IRQHandler+0x678>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a16      	ldr	r2, [pc, #88]	; (8006b64 <HAL_DMA_IRQHandler+0x6cc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d12b      	bne.n	8006b68 <HAL_DMA_IRQHandler+0x6d0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bf14      	ite	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	2300      	moveq	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	e02a      	b.n	8006b7c <HAL_DMA_IRQHandler+0x6e4>
 8006b26:	bf00      	nop
 8006b28:	40020010 	.word	0x40020010
 8006b2c:	40020028 	.word	0x40020028
 8006b30:	40020040 	.word	0x40020040
 8006b34:	40020058 	.word	0x40020058
 8006b38:	40020070 	.word	0x40020070
 8006b3c:	40020088 	.word	0x40020088
 8006b40:	400200a0 	.word	0x400200a0
 8006b44:	400200b8 	.word	0x400200b8
 8006b48:	40020410 	.word	0x40020410
 8006b4c:	40020428 	.word	0x40020428
 8006b50:	40020440 	.word	0x40020440
 8006b54:	40020458 	.word	0x40020458
 8006b58:	40020470 	.word	0x40020470
 8006b5c:	40020488 	.word	0x40020488
 8006b60:	400204a0 	.word	0x400204a0
 8006b64:	400204b8 	.word	0x400204b8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bf14      	ite	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	2300      	moveq	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8087 	beq.w	8006c90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d139      	bne.n	8006c12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0216 	bic.w	r2, r2, #22
 8006bac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695a      	ldr	r2, [r3, #20]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <HAL_DMA_IRQHandler+0x736>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0208 	bic.w	r2, r2, #8
 8006bdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be2:	f003 031f 	and.w	r3, r3, #31
 8006be6:	223f      	movs	r2, #63	; 0x3f
 8006be8:	409a      	lsls	r2, r3
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 834a 	beq.w	800729c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
          }
          return;
 8006c10:	e344      	b.n	800729c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d018      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d108      	bne.n	8006c40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d02c      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	4798      	blx	r3
 8006c3e:	e027      	b.n	8006c90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d023      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	4798      	blx	r3
 8006c50:	e01e      	b.n	8006c90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10f      	bne.n	8006c80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0210 	bic.w	r2, r2, #16
 8006c6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8306 	beq.w	80072a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8088 	beq.w	8006db8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2204      	movs	r2, #4
 8006cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a7a      	ldr	r2, [pc, #488]	; (8006ea0 <HAL_DMA_IRQHandler+0xa08>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d04a      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a79      	ldr	r2, [pc, #484]	; (8006ea4 <HAL_DMA_IRQHandler+0xa0c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d045      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a77      	ldr	r2, [pc, #476]	; (8006ea8 <HAL_DMA_IRQHandler+0xa10>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d040      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a76      	ldr	r2, [pc, #472]	; (8006eac <HAL_DMA_IRQHandler+0xa14>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d03b      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a74      	ldr	r2, [pc, #464]	; (8006eb0 <HAL_DMA_IRQHandler+0xa18>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d036      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a73      	ldr	r2, [pc, #460]	; (8006eb4 <HAL_DMA_IRQHandler+0xa1c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d031      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a71      	ldr	r2, [pc, #452]	; (8006eb8 <HAL_DMA_IRQHandler+0xa20>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d02c      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a70      	ldr	r2, [pc, #448]	; (8006ebc <HAL_DMA_IRQHandler+0xa24>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d027      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a6e      	ldr	r2, [pc, #440]	; (8006ec0 <HAL_DMA_IRQHandler+0xa28>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d022      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a6d      	ldr	r2, [pc, #436]	; (8006ec4 <HAL_DMA_IRQHandler+0xa2c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d01d      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a6b      	ldr	r2, [pc, #428]	; (8006ec8 <HAL_DMA_IRQHandler+0xa30>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d018      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a6a      	ldr	r2, [pc, #424]	; (8006ecc <HAL_DMA_IRQHandler+0xa34>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a68      	ldr	r2, [pc, #416]	; (8006ed0 <HAL_DMA_IRQHandler+0xa38>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a67      	ldr	r2, [pc, #412]	; (8006ed4 <HAL_DMA_IRQHandler+0xa3c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a65      	ldr	r2, [pc, #404]	; (8006ed8 <HAL_DMA_IRQHandler+0xa40>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x8b8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a64      	ldr	r2, [pc, #400]	; (8006edc <HAL_DMA_IRQHandler+0xa44>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d108      	bne.n	8006d62 <HAL_DMA_IRQHandler+0x8ca>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e007      	b.n	8006d72 <HAL_DMA_IRQHandler+0x8da>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d307      	bcc.n	8006d8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f2      	bne.n	8006d72 <HAL_DMA_IRQHandler+0x8da>
 8006d8c:	e000      	b.n	8006d90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2203      	movs	r2, #3
 8006da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006da6:	e003      	b.n	8006db0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8272 	beq.w	80072a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
 8006dca:	e26c      	b.n	80072a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a43      	ldr	r2, [pc, #268]	; (8006ee0 <HAL_DMA_IRQHandler+0xa48>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d022      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x984>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a42      	ldr	r2, [pc, #264]	; (8006ee4 <HAL_DMA_IRQHandler+0xa4c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d01d      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x984>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a40      	ldr	r2, [pc, #256]	; (8006ee8 <HAL_DMA_IRQHandler+0xa50>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d018      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x984>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3f      	ldr	r2, [pc, #252]	; (8006eec <HAL_DMA_IRQHandler+0xa54>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x984>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a3d      	ldr	r2, [pc, #244]	; (8006ef0 <HAL_DMA_IRQHandler+0xa58>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x984>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a3c      	ldr	r2, [pc, #240]	; (8006ef4 <HAL_DMA_IRQHandler+0xa5c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x984>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a3a      	ldr	r2, [pc, #232]	; (8006ef8 <HAL_DMA_IRQHandler+0xa60>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x984>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a39      	ldr	r2, [pc, #228]	; (8006efc <HAL_DMA_IRQHandler+0xa64>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d101      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x988>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <HAL_DMA_IRQHandler+0x98a>
 8006e20:	2300      	movs	r3, #0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 823f 	beq.w	80072a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2204      	movs	r2, #4
 8006e3a:	409a      	lsls	r2, r3
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80cd 	beq.w	8006fe0 <HAL_DMA_IRQHandler+0xb48>
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80c7 	beq.w	8006fe0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	409a      	lsls	r2, r3
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d049      	beq.n	8006f00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8210 	beq.w	80072a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e88:	e20a      	b.n	80072a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8206 	beq.w	80072a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e9c:	e200      	b.n	80072a0 <HAL_DMA_IRQHandler+0xe08>
 8006e9e:	bf00      	nop
 8006ea0:	40020010 	.word	0x40020010
 8006ea4:	40020028 	.word	0x40020028
 8006ea8:	40020040 	.word	0x40020040
 8006eac:	40020058 	.word	0x40020058
 8006eb0:	40020070 	.word	0x40020070
 8006eb4:	40020088 	.word	0x40020088
 8006eb8:	400200a0 	.word	0x400200a0
 8006ebc:	400200b8 	.word	0x400200b8
 8006ec0:	40020410 	.word	0x40020410
 8006ec4:	40020428 	.word	0x40020428
 8006ec8:	40020440 	.word	0x40020440
 8006ecc:	40020458 	.word	0x40020458
 8006ed0:	40020470 	.word	0x40020470
 8006ed4:	40020488 	.word	0x40020488
 8006ed8:	400204a0 	.word	0x400204a0
 8006edc:	400204b8 	.word	0x400204b8
 8006ee0:	58025408 	.word	0x58025408
 8006ee4:	5802541c 	.word	0x5802541c
 8006ee8:	58025430 	.word	0x58025430
 8006eec:	58025444 	.word	0x58025444
 8006ef0:	58025458 	.word	0x58025458
 8006ef4:	5802546c 	.word	0x5802546c
 8006ef8:	58025480 	.word	0x58025480
 8006efc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d160      	bne.n	8006fcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7f      	ldr	r2, [pc, #508]	; (800710c <HAL_DMA_IRQHandler+0xc74>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d04a      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a7d      	ldr	r2, [pc, #500]	; (8007110 <HAL_DMA_IRQHandler+0xc78>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d045      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a7c      	ldr	r2, [pc, #496]	; (8007114 <HAL_DMA_IRQHandler+0xc7c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d040      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a7a      	ldr	r2, [pc, #488]	; (8007118 <HAL_DMA_IRQHandler+0xc80>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d03b      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a79      	ldr	r2, [pc, #484]	; (800711c <HAL_DMA_IRQHandler+0xc84>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d036      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a77      	ldr	r2, [pc, #476]	; (8007120 <HAL_DMA_IRQHandler+0xc88>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d031      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a76      	ldr	r2, [pc, #472]	; (8007124 <HAL_DMA_IRQHandler+0xc8c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d02c      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a74      	ldr	r2, [pc, #464]	; (8007128 <HAL_DMA_IRQHandler+0xc90>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d027      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a73      	ldr	r2, [pc, #460]	; (800712c <HAL_DMA_IRQHandler+0xc94>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d022      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a71      	ldr	r2, [pc, #452]	; (8007130 <HAL_DMA_IRQHandler+0xc98>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01d      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a70      	ldr	r2, [pc, #448]	; (8007134 <HAL_DMA_IRQHandler+0xc9c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d018      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6e      	ldr	r2, [pc, #440]	; (8007138 <HAL_DMA_IRQHandler+0xca0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a6d      	ldr	r2, [pc, #436]	; (800713c <HAL_DMA_IRQHandler+0xca4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00e      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6b      	ldr	r2, [pc, #428]	; (8007140 <HAL_DMA_IRQHandler+0xca8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d009      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a6a      	ldr	r2, [pc, #424]	; (8007144 <HAL_DMA_IRQHandler+0xcac>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d004      	beq.n	8006faa <HAL_DMA_IRQHandler+0xb12>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a68      	ldr	r2, [pc, #416]	; (8007148 <HAL_DMA_IRQHandler+0xcb0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d108      	bne.n	8006fbc <HAL_DMA_IRQHandler+0xb24>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0208 	bic.w	r2, r2, #8
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	e007      	b.n	8006fcc <HAL_DMA_IRQHandler+0xb34>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0204 	bic.w	r2, r2, #4
 8006fca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8165 	beq.w	80072a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fde:	e15f      	b.n	80072a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	2202      	movs	r2, #2
 8006fea:	409a      	lsls	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80c5 	beq.w	8007180 <HAL_DMA_IRQHandler+0xce8>
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80bf 	beq.w	8007180 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2202      	movs	r2, #2
 800700c:	409a      	lsls	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d018      	beq.n	800704e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d109      	bne.n	800703a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 813a 	beq.w	80072a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007038:	e134      	b.n	80072a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8130 	beq.w	80072a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800704c:	e12a      	b.n	80072a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 8089 	bne.w	800716c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2b      	ldr	r2, [pc, #172]	; (800710c <HAL_DMA_IRQHandler+0xc74>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d04a      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a29      	ldr	r2, [pc, #164]	; (8007110 <HAL_DMA_IRQHandler+0xc78>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d045      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a28      	ldr	r2, [pc, #160]	; (8007114 <HAL_DMA_IRQHandler+0xc7c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d040      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a26      	ldr	r2, [pc, #152]	; (8007118 <HAL_DMA_IRQHandler+0xc80>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d03b      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a25      	ldr	r2, [pc, #148]	; (800711c <HAL_DMA_IRQHandler+0xc84>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d036      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a23      	ldr	r2, [pc, #140]	; (8007120 <HAL_DMA_IRQHandler+0xc88>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d031      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a22      	ldr	r2, [pc, #136]	; (8007124 <HAL_DMA_IRQHandler+0xc8c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d02c      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a20      	ldr	r2, [pc, #128]	; (8007128 <HAL_DMA_IRQHandler+0xc90>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d027      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1f      	ldr	r2, [pc, #124]	; (800712c <HAL_DMA_IRQHandler+0xc94>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d022      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1d      	ldr	r2, [pc, #116]	; (8007130 <HAL_DMA_IRQHandler+0xc98>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d01d      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1c      	ldr	r2, [pc, #112]	; (8007134 <HAL_DMA_IRQHandler+0xc9c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d018      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1a      	ldr	r2, [pc, #104]	; (8007138 <HAL_DMA_IRQHandler+0xca0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d013      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a19      	ldr	r2, [pc, #100]	; (800713c <HAL_DMA_IRQHandler+0xca4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00e      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a17      	ldr	r2, [pc, #92]	; (8007140 <HAL_DMA_IRQHandler+0xca8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d009      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a16      	ldr	r2, [pc, #88]	; (8007144 <HAL_DMA_IRQHandler+0xcac>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d004      	beq.n	80070fa <HAL_DMA_IRQHandler+0xc62>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a14      	ldr	r2, [pc, #80]	; (8007148 <HAL_DMA_IRQHandler+0xcb0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d128      	bne.n	800714c <HAL_DMA_IRQHandler+0xcb4>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0214 	bic.w	r2, r2, #20
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	e027      	b.n	800715c <HAL_DMA_IRQHandler+0xcc4>
 800710c:	40020010 	.word	0x40020010
 8007110:	40020028 	.word	0x40020028
 8007114:	40020040 	.word	0x40020040
 8007118:	40020058 	.word	0x40020058
 800711c:	40020070 	.word	0x40020070
 8007120:	40020088 	.word	0x40020088
 8007124:	400200a0 	.word	0x400200a0
 8007128:	400200b8 	.word	0x400200b8
 800712c:	40020410 	.word	0x40020410
 8007130:	40020428 	.word	0x40020428
 8007134:	40020440 	.word	0x40020440
 8007138:	40020458 	.word	0x40020458
 800713c:	40020470 	.word	0x40020470
 8007140:	40020488 	.word	0x40020488
 8007144:	400204a0 	.word	0x400204a0
 8007148:	400204b8 	.word	0x400204b8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 020a 	bic.w	r2, r2, #10
 800715a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8097 	beq.w	80072a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800717e:	e091      	b.n	80072a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	2208      	movs	r2, #8
 800718a:	409a      	lsls	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8088 	beq.w	80072a6 <HAL_DMA_IRQHandler+0xe0e>
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8082 	beq.w	80072a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a41      	ldr	r2, [pc, #260]	; (80072ac <HAL_DMA_IRQHandler+0xe14>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d04a      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a3f      	ldr	r2, [pc, #252]	; (80072b0 <HAL_DMA_IRQHandler+0xe18>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d045      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a3e      	ldr	r2, [pc, #248]	; (80072b4 <HAL_DMA_IRQHandler+0xe1c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d040      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a3c      	ldr	r2, [pc, #240]	; (80072b8 <HAL_DMA_IRQHandler+0xe20>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d03b      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a3b      	ldr	r2, [pc, #236]	; (80072bc <HAL_DMA_IRQHandler+0xe24>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d036      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a39      	ldr	r2, [pc, #228]	; (80072c0 <HAL_DMA_IRQHandler+0xe28>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d031      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a38      	ldr	r2, [pc, #224]	; (80072c4 <HAL_DMA_IRQHandler+0xe2c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d02c      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a36      	ldr	r2, [pc, #216]	; (80072c8 <HAL_DMA_IRQHandler+0xe30>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d027      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a35      	ldr	r2, [pc, #212]	; (80072cc <HAL_DMA_IRQHandler+0xe34>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d022      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a33      	ldr	r2, [pc, #204]	; (80072d0 <HAL_DMA_IRQHandler+0xe38>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01d      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a32      	ldr	r2, [pc, #200]	; (80072d4 <HAL_DMA_IRQHandler+0xe3c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d018      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a30      	ldr	r2, [pc, #192]	; (80072d8 <HAL_DMA_IRQHandler+0xe40>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2f      	ldr	r2, [pc, #188]	; (80072dc <HAL_DMA_IRQHandler+0xe44>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00e      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a2d      	ldr	r2, [pc, #180]	; (80072e0 <HAL_DMA_IRQHandler+0xe48>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d009      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <HAL_DMA_IRQHandler+0xe4c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_DMA_IRQHandler+0xdaa>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <HAL_DMA_IRQHandler+0xe50>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d108      	bne.n	8007254 <HAL_DMA_IRQHandler+0xdbc>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 021c 	bic.w	r2, r2, #28
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	e007      	b.n	8007264 <HAL_DMA_IRQHandler+0xdcc>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 020e 	bic.w	r2, r2, #14
 8007262:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2201      	movs	r2, #1
 800726e:	409a      	lsls	r2, r3
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
 800729a:	e004      	b.n	80072a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800729c:	bf00      	nop
 800729e:	e002      	b.n	80072a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072a0:	bf00      	nop
 80072a2:	e000      	b.n	80072a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072a6:	3728      	adds	r7, #40	; 0x28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40020010 	.word	0x40020010
 80072b0:	40020028 	.word	0x40020028
 80072b4:	40020040 	.word	0x40020040
 80072b8:	40020058 	.word	0x40020058
 80072bc:	40020070 	.word	0x40020070
 80072c0:	40020088 	.word	0x40020088
 80072c4:	400200a0 	.word	0x400200a0
 80072c8:	400200b8 	.word	0x400200b8
 80072cc:	40020410 	.word	0x40020410
 80072d0:	40020428 	.word	0x40020428
 80072d4:	40020440 	.word	0x40020440
 80072d8:	40020458 	.word	0x40020458
 80072dc:	40020470 	.word	0x40020470
 80072e0:	40020488 	.word	0x40020488
 80072e4:	400204a0 	.word	0x400204a0
 80072e8:	400204b8 	.word	0x400204b8

080072ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007304:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7f      	ldr	r2, [pc, #508]	; (8007508 <DMA_SetConfig+0x21c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d072      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a7d      	ldr	r2, [pc, #500]	; (800750c <DMA_SetConfig+0x220>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d06d      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a7c      	ldr	r2, [pc, #496]	; (8007510 <DMA_SetConfig+0x224>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d068      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a7a      	ldr	r2, [pc, #488]	; (8007514 <DMA_SetConfig+0x228>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d063      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a79      	ldr	r2, [pc, #484]	; (8007518 <DMA_SetConfig+0x22c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d05e      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a77      	ldr	r2, [pc, #476]	; (800751c <DMA_SetConfig+0x230>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d059      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a76      	ldr	r2, [pc, #472]	; (8007520 <DMA_SetConfig+0x234>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d054      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a74      	ldr	r2, [pc, #464]	; (8007524 <DMA_SetConfig+0x238>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d04f      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a73      	ldr	r2, [pc, #460]	; (8007528 <DMA_SetConfig+0x23c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d04a      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a71      	ldr	r2, [pc, #452]	; (800752c <DMA_SetConfig+0x240>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d045      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a70      	ldr	r2, [pc, #448]	; (8007530 <DMA_SetConfig+0x244>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d040      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a6e      	ldr	r2, [pc, #440]	; (8007534 <DMA_SetConfig+0x248>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d03b      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a6d      	ldr	r2, [pc, #436]	; (8007538 <DMA_SetConfig+0x24c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d036      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a6b      	ldr	r2, [pc, #428]	; (800753c <DMA_SetConfig+0x250>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d031      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a6a      	ldr	r2, [pc, #424]	; (8007540 <DMA_SetConfig+0x254>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d02c      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a68      	ldr	r2, [pc, #416]	; (8007544 <DMA_SetConfig+0x258>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d027      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a67      	ldr	r2, [pc, #412]	; (8007548 <DMA_SetConfig+0x25c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d022      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a65      	ldr	r2, [pc, #404]	; (800754c <DMA_SetConfig+0x260>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01d      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a64      	ldr	r2, [pc, #400]	; (8007550 <DMA_SetConfig+0x264>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d018      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a62      	ldr	r2, [pc, #392]	; (8007554 <DMA_SetConfig+0x268>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a61      	ldr	r2, [pc, #388]	; (8007558 <DMA_SetConfig+0x26c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00e      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a5f      	ldr	r2, [pc, #380]	; (800755c <DMA_SetConfig+0x270>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d009      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a5e      	ldr	r2, [pc, #376]	; (8007560 <DMA_SetConfig+0x274>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <DMA_SetConfig+0x10a>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a5c      	ldr	r2, [pc, #368]	; (8007564 <DMA_SetConfig+0x278>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d101      	bne.n	80073fa <DMA_SetConfig+0x10e>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <DMA_SetConfig+0x110>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00d      	beq.n	800741c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007408:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800741a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a39      	ldr	r2, [pc, #228]	; (8007508 <DMA_SetConfig+0x21c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d04a      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a38      	ldr	r2, [pc, #224]	; (800750c <DMA_SetConfig+0x220>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d045      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a36      	ldr	r2, [pc, #216]	; (8007510 <DMA_SetConfig+0x224>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d040      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a35      	ldr	r2, [pc, #212]	; (8007514 <DMA_SetConfig+0x228>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d03b      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a33      	ldr	r2, [pc, #204]	; (8007518 <DMA_SetConfig+0x22c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d036      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a32      	ldr	r2, [pc, #200]	; (800751c <DMA_SetConfig+0x230>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d031      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a30      	ldr	r2, [pc, #192]	; (8007520 <DMA_SetConfig+0x234>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d02c      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2f      	ldr	r2, [pc, #188]	; (8007524 <DMA_SetConfig+0x238>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d027      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2d      	ldr	r2, [pc, #180]	; (8007528 <DMA_SetConfig+0x23c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d022      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2c      	ldr	r2, [pc, #176]	; (800752c <DMA_SetConfig+0x240>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d01d      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <DMA_SetConfig+0x244>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d018      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a29      	ldr	r2, [pc, #164]	; (8007534 <DMA_SetConfig+0x248>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a27      	ldr	r2, [pc, #156]	; (8007538 <DMA_SetConfig+0x24c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00e      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a26      	ldr	r2, [pc, #152]	; (800753c <DMA_SetConfig+0x250>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a24      	ldr	r2, [pc, #144]	; (8007540 <DMA_SetConfig+0x254>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <DMA_SetConfig+0x1d0>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a23      	ldr	r2, [pc, #140]	; (8007544 <DMA_SetConfig+0x258>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d101      	bne.n	80074c0 <DMA_SetConfig+0x1d4>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <DMA_SetConfig+0x1d6>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d059      	beq.n	800757a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	223f      	movs	r2, #63	; 0x3f
 80074d0:	409a      	lsls	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d138      	bne.n	8007568 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007506:	e086      	b.n	8007616 <DMA_SetConfig+0x32a>
 8007508:	40020010 	.word	0x40020010
 800750c:	40020028 	.word	0x40020028
 8007510:	40020040 	.word	0x40020040
 8007514:	40020058 	.word	0x40020058
 8007518:	40020070 	.word	0x40020070
 800751c:	40020088 	.word	0x40020088
 8007520:	400200a0 	.word	0x400200a0
 8007524:	400200b8 	.word	0x400200b8
 8007528:	40020410 	.word	0x40020410
 800752c:	40020428 	.word	0x40020428
 8007530:	40020440 	.word	0x40020440
 8007534:	40020458 	.word	0x40020458
 8007538:	40020470 	.word	0x40020470
 800753c:	40020488 	.word	0x40020488
 8007540:	400204a0 	.word	0x400204a0
 8007544:	400204b8 	.word	0x400204b8
 8007548:	58025408 	.word	0x58025408
 800754c:	5802541c 	.word	0x5802541c
 8007550:	58025430 	.word	0x58025430
 8007554:	58025444 	.word	0x58025444
 8007558:	58025458 	.word	0x58025458
 800755c:	5802546c 	.word	0x5802546c
 8007560:	58025480 	.word	0x58025480
 8007564:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	60da      	str	r2, [r3, #12]
}
 8007578:	e04d      	b.n	8007616 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a29      	ldr	r2, [pc, #164]	; (8007624 <DMA_SetConfig+0x338>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <DMA_SetConfig+0x2de>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a27      	ldr	r2, [pc, #156]	; (8007628 <DMA_SetConfig+0x33c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01d      	beq.n	80075ca <DMA_SetConfig+0x2de>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a26      	ldr	r2, [pc, #152]	; (800762c <DMA_SetConfig+0x340>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <DMA_SetConfig+0x2de>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a24      	ldr	r2, [pc, #144]	; (8007630 <DMA_SetConfig+0x344>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <DMA_SetConfig+0x2de>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a23      	ldr	r2, [pc, #140]	; (8007634 <DMA_SetConfig+0x348>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <DMA_SetConfig+0x2de>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a21      	ldr	r2, [pc, #132]	; (8007638 <DMA_SetConfig+0x34c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <DMA_SetConfig+0x2de>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a20      	ldr	r2, [pc, #128]	; (800763c <DMA_SetConfig+0x350>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <DMA_SetConfig+0x2de>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <DMA_SetConfig+0x354>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d101      	bne.n	80075ce <DMA_SetConfig+0x2e2>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <DMA_SetConfig+0x2e4>
 80075ce:	2300      	movs	r3, #0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d020      	beq.n	8007616 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	2201      	movs	r2, #1
 80075de:	409a      	lsls	r2, r3
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	d108      	bne.n	8007606 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	60da      	str	r2, [r3, #12]
}
 8007604:	e007      	b.n	8007616 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	58025408 	.word	0x58025408
 8007628:	5802541c 	.word	0x5802541c
 800762c:	58025430 	.word	0x58025430
 8007630:	58025444 	.word	0x58025444
 8007634:	58025458 	.word	0x58025458
 8007638:	5802546c 	.word	0x5802546c
 800763c:	58025480 	.word	0x58025480
 8007640:	58025494 	.word	0x58025494

08007644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a42      	ldr	r2, [pc, #264]	; (800775c <DMA_CalcBaseAndBitshift+0x118>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d04a      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a41      	ldr	r2, [pc, #260]	; (8007760 <DMA_CalcBaseAndBitshift+0x11c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d045      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a3f      	ldr	r2, [pc, #252]	; (8007764 <DMA_CalcBaseAndBitshift+0x120>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d040      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a3e      	ldr	r2, [pc, #248]	; (8007768 <DMA_CalcBaseAndBitshift+0x124>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d03b      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a3c      	ldr	r2, [pc, #240]	; (800776c <DMA_CalcBaseAndBitshift+0x128>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d036      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a3b      	ldr	r2, [pc, #236]	; (8007770 <DMA_CalcBaseAndBitshift+0x12c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d031      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a39      	ldr	r2, [pc, #228]	; (8007774 <DMA_CalcBaseAndBitshift+0x130>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02c      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a38      	ldr	r2, [pc, #224]	; (8007778 <DMA_CalcBaseAndBitshift+0x134>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d027      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a36      	ldr	r2, [pc, #216]	; (800777c <DMA_CalcBaseAndBitshift+0x138>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d022      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a35      	ldr	r2, [pc, #212]	; (8007780 <DMA_CalcBaseAndBitshift+0x13c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d01d      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a33      	ldr	r2, [pc, #204]	; (8007784 <DMA_CalcBaseAndBitshift+0x140>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d018      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a32      	ldr	r2, [pc, #200]	; (8007788 <DMA_CalcBaseAndBitshift+0x144>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d013      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a30      	ldr	r2, [pc, #192]	; (800778c <DMA_CalcBaseAndBitshift+0x148>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00e      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a2f      	ldr	r2, [pc, #188]	; (8007790 <DMA_CalcBaseAndBitshift+0x14c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d009      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a2d      	ldr	r2, [pc, #180]	; (8007794 <DMA_CalcBaseAndBitshift+0x150>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d004      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xa8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <DMA_CalcBaseAndBitshift+0x154>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d101      	bne.n	80076f0 <DMA_CalcBaseAndBitshift+0xac>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <DMA_CalcBaseAndBitshift+0xae>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d024      	beq.n	8007740 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	3b10      	subs	r3, #16
 80076fe:	4a27      	ldr	r2, [pc, #156]	; (800779c <DMA_CalcBaseAndBitshift+0x158>)
 8007700:	fba2 2303 	umull	r2, r3, r2, r3
 8007704:	091b      	lsrs	r3, r3, #4
 8007706:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	4a24      	ldr	r2, [pc, #144]	; (80077a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007710:	5cd3      	ldrb	r3, [r2, r3]
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b03      	cmp	r3, #3
 800771c:	d908      	bls.n	8007730 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	4b1f      	ldr	r3, [pc, #124]	; (80077a4 <DMA_CalcBaseAndBitshift+0x160>)
 8007726:	4013      	ands	r3, r2
 8007728:	1d1a      	adds	r2, r3, #4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	659a      	str	r2, [r3, #88]	; 0x58
 800772e:	e00d      	b.n	800774c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <DMA_CalcBaseAndBitshift+0x160>)
 8007738:	4013      	ands	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6593      	str	r3, [r2, #88]	; 0x58
 800773e:	e005      	b.n	800774c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	40020010 	.word	0x40020010
 8007760:	40020028 	.word	0x40020028
 8007764:	40020040 	.word	0x40020040
 8007768:	40020058 	.word	0x40020058
 800776c:	40020070 	.word	0x40020070
 8007770:	40020088 	.word	0x40020088
 8007774:	400200a0 	.word	0x400200a0
 8007778:	400200b8 	.word	0x400200b8
 800777c:	40020410 	.word	0x40020410
 8007780:	40020428 	.word	0x40020428
 8007784:	40020440 	.word	0x40020440
 8007788:	40020458 	.word	0x40020458
 800778c:	40020470 	.word	0x40020470
 8007790:	40020488 	.word	0x40020488
 8007794:	400204a0 	.word	0x400204a0
 8007798:	400204b8 	.word	0x400204b8
 800779c:	aaaaaaab 	.word	0xaaaaaaab
 80077a0:	08014ae4 	.word	0x08014ae4
 80077a4:	fffffc00 	.word	0xfffffc00

080077a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d120      	bne.n	80077fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d858      	bhi.n	8007876 <DMA_CheckFifoParam+0xce>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <DMA_CheckFifoParam+0x24>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	080077ef 	.word	0x080077ef
 80077d4:	080077dd 	.word	0x080077dd
 80077d8:	08007877 	.word	0x08007877
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d048      	beq.n	800787a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077ec:	e045      	b.n	800787a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077f6:	d142      	bne.n	800787e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077fc:	e03f      	b.n	800787e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007806:	d123      	bne.n	8007850 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	2b03      	cmp	r3, #3
 800780e:	d838      	bhi.n	8007882 <DMA_CheckFifoParam+0xda>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <DMA_CheckFifoParam+0x70>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	08007829 	.word	0x08007829
 800781c:	0800782f 	.word	0x0800782f
 8007820:	08007829 	.word	0x08007829
 8007824:	08007841 	.word	0x08007841
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]
        break;
 800782c:	e030      	b.n	8007890 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d025      	beq.n	8007886 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800783e:	e022      	b.n	8007886 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007848:	d11f      	bne.n	800788a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800784e:	e01c      	b.n	800788a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	2b02      	cmp	r3, #2
 8007856:	d902      	bls.n	800785e <DMA_CheckFifoParam+0xb6>
 8007858:	2b03      	cmp	r3, #3
 800785a:	d003      	beq.n	8007864 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800785c:	e018      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]
        break;
 8007862:	e015      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00e      	beq.n	800788e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
    break;
 8007874:	e00b      	b.n	800788e <DMA_CheckFifoParam+0xe6>
        break;
 8007876:	bf00      	nop
 8007878:	e00a      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
        break;
 800787a:	bf00      	nop
 800787c:	e008      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
        break;
 800787e:	bf00      	nop
 8007880:	e006      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
        break;
 8007882:	bf00      	nop
 8007884:	e004      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
        break;
 8007886:	bf00      	nop
 8007888:	e002      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
        break;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <DMA_CheckFifoParam+0xe8>
    break;
 800788e:	bf00      	nop
    }
  }

  return status;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop

080078a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a38      	ldr	r2, [pc, #224]	; (8007994 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d022      	beq.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a36      	ldr	r2, [pc, #216]	; (8007998 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d01d      	beq.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a35      	ldr	r2, [pc, #212]	; (800799c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d018      	beq.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a33      	ldr	r2, [pc, #204]	; (80079a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a32      	ldr	r2, [pc, #200]	; (80079a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00e      	beq.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a30      	ldr	r2, [pc, #192]	; (80079a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d009      	beq.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a2f      	ldr	r2, [pc, #188]	; (80079ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d004      	beq.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a2d      	ldr	r2, [pc, #180]	; (80079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d101      	bne.n	8007902 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007902:	2300      	movs	r3, #0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01a      	beq.n	800793e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	3b08      	subs	r3, #8
 8007910:	4a28      	ldr	r2, [pc, #160]	; (80079b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	091b      	lsrs	r3, r3, #4
 8007918:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4b26      	ldr	r3, [pc, #152]	; (80079b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800792c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2201      	movs	r2, #1
 8007936:	409a      	lsls	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800793c:	e024      	b.n	8007988 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	3b10      	subs	r3, #16
 8007946:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	091b      	lsrs	r3, r3, #4
 800794e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4a1c      	ldr	r2, [pc, #112]	; (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d806      	bhi.n	8007966 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4a1b      	ldr	r2, [pc, #108]	; (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d902      	bls.n	8007966 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3308      	adds	r3, #8
 8007964:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4b18      	ldr	r3, [pc, #96]	; (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a16      	ldr	r2, [pc, #88]	; (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007978:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	2201      	movs	r2, #1
 8007982:	409a      	lsls	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	58025408 	.word	0x58025408
 8007998:	5802541c 	.word	0x5802541c
 800799c:	58025430 	.word	0x58025430
 80079a0:	58025444 	.word	0x58025444
 80079a4:	58025458 	.word	0x58025458
 80079a8:	5802546c 	.word	0x5802546c
 80079ac:	58025480 	.word	0x58025480
 80079b0:	58025494 	.word	0x58025494
 80079b4:	cccccccd 	.word	0xcccccccd
 80079b8:	16009600 	.word	0x16009600
 80079bc:	58025880 	.word	0x58025880
 80079c0:	aaaaaaab 	.word	0xaaaaaaab
 80079c4:	400204b8 	.word	0x400204b8
 80079c8:	4002040f 	.word	0x4002040f
 80079cc:	10008200 	.word	0x10008200
 80079d0:	40020880 	.word	0x40020880

080079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d04a      	beq.n	8007a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d847      	bhi.n	8007a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a25      	ldr	r2, [pc, #148]	; (8007a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d022      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a24      	ldr	r2, [pc, #144]	; (8007a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d01d      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a22      	ldr	r2, [pc, #136]	; (8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d018      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d013      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a1f      	ldr	r2, [pc, #124]	; (8007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00e      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a1e      	ldr	r2, [pc, #120]	; (8007aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d009      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a1c      	ldr	r2, [pc, #112]	; (8007aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1b      	ldr	r2, [pc, #108]	; (8007aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d101      	bne.n	8007a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a44:	2300      	movs	r3, #0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4b17      	ldr	r3, [pc, #92]	; (8007aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a5c:	671a      	str	r2, [r3, #112]	; 0x70
 8007a5e:	e009      	b.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a11      	ldr	r2, [pc, #68]	; (8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	2201      	movs	r2, #1
 8007a7a:	409a      	lsls	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a80:	bf00      	nop
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	58025408 	.word	0x58025408
 8007a90:	5802541c 	.word	0x5802541c
 8007a94:	58025430 	.word	0x58025430
 8007a98:	58025444 	.word	0x58025444
 8007a9c:	58025458 	.word	0x58025458
 8007aa0:	5802546c 	.word	0x5802546c
 8007aa4:	58025480 	.word	0x58025480
 8007aa8:	58025494 	.word	0x58025494
 8007aac:	1600963f 	.word	0x1600963f
 8007ab0:	58025940 	.word	0x58025940
 8007ab4:	1000823f 	.word	0x1000823f
 8007ab8:	40020940 	.word	0x40020940

08007abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b089      	sub	sp, #36	; 0x24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007aca:	4b89      	ldr	r3, [pc, #548]	; (8007cf0 <HAL_GPIO_Init+0x234>)
 8007acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ace:	e194      	b.n	8007dfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8007adc:	4013      	ands	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 8186 	beq.w	8007df4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d005      	beq.n	8007b00 <HAL_GPIO_Init+0x44>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d130      	bne.n	8007b62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	43db      	mvns	r3, r3
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	4013      	ands	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b36:	2201      	movs	r2, #1
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	4013      	ands	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	091b      	lsrs	r3, r3, #4
 8007b4c:	f003 0201 	and.w	r2, r3, #1
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d017      	beq.n	8007b9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	2203      	movs	r2, #3
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	4013      	ands	r3, r2
 8007b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d123      	bne.n	8007bf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	08da      	lsrs	r2, r3, #3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3208      	adds	r2, #8
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	220f      	movs	r2, #15
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	43db      	mvns	r3, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	08da      	lsrs	r2, r3, #3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3208      	adds	r2, #8
 8007bec:	69b9      	ldr	r1, [r7, #24]
 8007bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f003 0203 	and.w	r2, r3, #3
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 80e0 	beq.w	8007df4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c34:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <HAL_GPIO_Init+0x238>)
 8007c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c3a:	4a2e      	ldr	r2, [pc, #184]	; (8007cf4 <HAL_GPIO_Init+0x238>)
 8007c3c:	f043 0302 	orr.w	r3, r3, #2
 8007c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c44:	4b2b      	ldr	r3, [pc, #172]	; (8007cf4 <HAL_GPIO_Init+0x238>)
 8007c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c52:	4a29      	ldr	r2, [pc, #164]	; (8007cf8 <HAL_GPIO_Init+0x23c>)
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	089b      	lsrs	r3, r3, #2
 8007c58:	3302      	adds	r3, #2
 8007c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	220f      	movs	r2, #15
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	43db      	mvns	r3, r3
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	4013      	ands	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a20      	ldr	r2, [pc, #128]	; (8007cfc <HAL_GPIO_Init+0x240>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d052      	beq.n	8007d24 <HAL_GPIO_Init+0x268>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a1f      	ldr	r2, [pc, #124]	; (8007d00 <HAL_GPIO_Init+0x244>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d031      	beq.n	8007cea <HAL_GPIO_Init+0x22e>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <HAL_GPIO_Init+0x248>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d02b      	beq.n	8007ce6 <HAL_GPIO_Init+0x22a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <HAL_GPIO_Init+0x24c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d025      	beq.n	8007ce2 <HAL_GPIO_Init+0x226>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a1c      	ldr	r2, [pc, #112]	; (8007d0c <HAL_GPIO_Init+0x250>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d01f      	beq.n	8007cde <HAL_GPIO_Init+0x222>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1b      	ldr	r2, [pc, #108]	; (8007d10 <HAL_GPIO_Init+0x254>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d019      	beq.n	8007cda <HAL_GPIO_Init+0x21e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1a      	ldr	r2, [pc, #104]	; (8007d14 <HAL_GPIO_Init+0x258>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d013      	beq.n	8007cd6 <HAL_GPIO_Init+0x21a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a19      	ldr	r2, [pc, #100]	; (8007d18 <HAL_GPIO_Init+0x25c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00d      	beq.n	8007cd2 <HAL_GPIO_Init+0x216>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <HAL_GPIO_Init+0x260>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d007      	beq.n	8007cce <HAL_GPIO_Init+0x212>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <HAL_GPIO_Init+0x264>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d101      	bne.n	8007cca <HAL_GPIO_Init+0x20e>
 8007cc6:	2309      	movs	r3, #9
 8007cc8:	e02d      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cca:	230a      	movs	r3, #10
 8007ccc:	e02b      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cce:	2308      	movs	r3, #8
 8007cd0:	e029      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cd2:	2307      	movs	r3, #7
 8007cd4:	e027      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cd6:	2306      	movs	r3, #6
 8007cd8:	e025      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cda:	2305      	movs	r3, #5
 8007cdc:	e023      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cde:	2304      	movs	r3, #4
 8007ce0:	e021      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e01f      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e01d      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e01b      	b.n	8007d26 <HAL_GPIO_Init+0x26a>
 8007cee:	bf00      	nop
 8007cf0:	58000080 	.word	0x58000080
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	58000400 	.word	0x58000400
 8007cfc:	58020000 	.word	0x58020000
 8007d00:	58020400 	.word	0x58020400
 8007d04:	58020800 	.word	0x58020800
 8007d08:	58020c00 	.word	0x58020c00
 8007d0c:	58021000 	.word	0x58021000
 8007d10:	58021400 	.word	0x58021400
 8007d14:	58021800 	.word	0x58021800
 8007d18:	58021c00 	.word	0x58021c00
 8007d1c:	58022000 	.word	0x58022000
 8007d20:	58022400 	.word	0x58022400
 8007d24:	2300      	movs	r3, #0
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	f002 0203 	and.w	r2, r2, #3
 8007d2c:	0092      	lsls	r2, r2, #2
 8007d2e:	4093      	lsls	r3, r2
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d36:	4938      	ldr	r1, [pc, #224]	; (8007e18 <HAL_GPIO_Init+0x35c>)
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	089b      	lsrs	r3, r3, #2
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4013      	ands	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	43db      	mvns	r3, r3
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	4013      	ands	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	43db      	mvns	r3, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4013      	ands	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	3301      	adds	r3, #1
 8007df8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f47f ae63 	bne.w	8007ad0 <HAL_GPIO_Init+0x14>
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	bf00      	nop
 8007e0e:	3724      	adds	r7, #36	; 0x24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	58000400 	.word	0x58000400

08007e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	807b      	strh	r3, [r7, #2]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e2c:	787b      	ldrb	r3, [r7, #1]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e32:	887a      	ldrh	r2, [r7, #2]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e38:	e003      	b.n	8007e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e3a:	887b      	ldrh	r3, [r7, #2]
 8007e3c:	041a      	lsls	r2, r3, #16
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	619a      	str	r2, [r3, #24]
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e08b      	b.n	8007f7a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fa f9d0 	bl	800221c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2224      	movs	r2, #36	; 0x24
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0201 	bic.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d107      	bne.n	8007eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ec6:	609a      	str	r2, [r3, #8]
 8007ec8:	e006      	b.n	8007ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d108      	bne.n	8007ef2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eee:	605a      	str	r2, [r3, #4]
 8007ef0:	e007      	b.n	8007f02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6859      	ldr	r1, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	4b1d      	ldr	r3, [pc, #116]	; (8007f84 <HAL_I2C_Init+0x134>)
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691a      	ldr	r2, [r3, #16]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1a      	ldr	r2, [r3, #32]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	02008000 	.word	0x02008000

08007f88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d138      	bne.n	8008010 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e032      	b.n	8008012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2224      	movs	r2, #36	; 0x24
 8007fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0201 	bic.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6819      	ldr	r1, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	e000      	b.n	8008012 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008010:	2302      	movs	r3, #2
  }
}
 8008012:	4618      	mov	r0, r3
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800801e:	b480      	push	{r7}
 8008020:	b085      	sub	sp, #20
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b20      	cmp	r3, #32
 8008032:	d139      	bne.n	80080a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800803e:	2302      	movs	r3, #2
 8008040:	e033      	b.n	80080aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2224      	movs	r2, #36	; 0x24
 800804e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008070:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0201 	orr.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	e000      	b.n	80080aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080a8:	2302      	movs	r3, #2
  }
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80080c0:	4b19      	ldr	r3, [pc, #100]	; (8008128 <HAL_PWREx_ConfigSupply+0x70>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d00a      	beq.n	80080e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80080cc:	4b16      	ldr	r3, [pc, #88]	; (8008128 <HAL_PWREx_ConfigSupply+0x70>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d001      	beq.n	80080de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e01f      	b.n	800811e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e01d      	b.n	800811e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80080e2:	4b11      	ldr	r3, [pc, #68]	; (8008128 <HAL_PWREx_ConfigSupply+0x70>)
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f023 0207 	bic.w	r2, r3, #7
 80080ea:	490f      	ldr	r1, [pc, #60]	; (8008128 <HAL_PWREx_ConfigSupply+0x70>)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80080f2:	f7fa fd7f 	bl	8002bf4 <HAL_GetTick>
 80080f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80080f8:	e009      	b.n	800810e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80080fa:	f7fa fd7b 	bl	8002bf4 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008108:	d901      	bls.n	800810e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e007      	b.n	800811e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_PWREx_ConfigSupply+0x70>)
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811a:	d1ee      	bne.n	80080fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	58024800 	.word	0x58024800

0800812c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	; 0x30
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f000 bc48 	b.w	80089d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8088 	beq.w	800825e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800814e:	4b99      	ldr	r3, [pc, #612]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008158:	4b96      	ldr	r3, [pc, #600]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	2b10      	cmp	r3, #16
 8008162:	d007      	beq.n	8008174 <HAL_RCC_OscConfig+0x48>
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	2b18      	cmp	r3, #24
 8008168:	d111      	bne.n	800818e <HAL_RCC_OscConfig+0x62>
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d10c      	bne.n	800818e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008174:	4b8f      	ldr	r3, [pc, #572]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d06d      	beq.n	800825c <HAL_RCC_OscConfig+0x130>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d169      	bne.n	800825c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	f000 bc21 	b.w	80089d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008196:	d106      	bne.n	80081a6 <HAL_RCC_OscConfig+0x7a>
 8008198:	4b86      	ldr	r3, [pc, #536]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a85      	ldr	r2, [pc, #532]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800819e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	e02e      	b.n	8008204 <HAL_RCC_OscConfig+0xd8>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10c      	bne.n	80081c8 <HAL_RCC_OscConfig+0x9c>
 80081ae:	4b81      	ldr	r3, [pc, #516]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a80      	ldr	r2, [pc, #512]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4b7e      	ldr	r3, [pc, #504]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a7d      	ldr	r2, [pc, #500]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	e01d      	b.n	8008204 <HAL_RCC_OscConfig+0xd8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081d0:	d10c      	bne.n	80081ec <HAL_RCC_OscConfig+0xc0>
 80081d2:	4b78      	ldr	r3, [pc, #480]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a77      	ldr	r2, [pc, #476]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	4b75      	ldr	r3, [pc, #468]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a74      	ldr	r2, [pc, #464]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	e00b      	b.n	8008204 <HAL_RCC_OscConfig+0xd8>
 80081ec:	4b71      	ldr	r3, [pc, #452]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a70      	ldr	r2, [pc, #448]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	4b6e      	ldr	r3, [pc, #440]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a6d      	ldr	r2, [pc, #436]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80081fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d013      	beq.n	8008234 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fa fcf2 	bl	8002bf4 <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008214:	f7fa fcee 	bl	8002bf4 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b64      	cmp	r3, #100	; 0x64
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e3d4      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008226:	4b63      	ldr	r3, [pc, #396]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f0      	beq.n	8008214 <HAL_RCC_OscConfig+0xe8>
 8008232:	e014      	b.n	800825e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008234:	f7fa fcde 	bl	8002bf4 <HAL_GetTick>
 8008238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800823c:	f7fa fcda 	bl	8002bf4 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b64      	cmp	r3, #100	; 0x64
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e3c0      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800824e:	4b59      	ldr	r3, [pc, #356]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f0      	bne.n	800823c <HAL_RCC_OscConfig+0x110>
 800825a:	e000      	b.n	800825e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800825c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 80ca 	beq.w	8008400 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800826c:	4b51      	ldr	r3, [pc, #324]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008274:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008276:	4b4f      	ldr	r3, [pc, #316]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_RCC_OscConfig+0x166>
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	2b18      	cmp	r3, #24
 8008286:	d156      	bne.n	8008336 <HAL_RCC_OscConfig+0x20a>
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d151      	bne.n	8008336 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008292:	4b48      	ldr	r3, [pc, #288]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <HAL_RCC_OscConfig+0x17e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e392      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082aa:	4b42      	ldr	r3, [pc, #264]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f023 0219 	bic.w	r2, r3, #25
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	493f      	ldr	r1, [pc, #252]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fa fc9a 	bl	8002bf4 <HAL_GetTick>
 80082c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c4:	f7fa fc96 	bl	8002bf4 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e37c      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082d6:	4b37      	ldr	r3, [pc, #220]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f0      	beq.n	80082c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082e2:	f7fa fc93 	bl	8002c0c <HAL_GetREVID>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d817      	bhi.n	8008320 <HAL_RCC_OscConfig+0x1f4>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d108      	bne.n	800830a <HAL_RCC_OscConfig+0x1de>
 80082f8:	4b2e      	ldr	r3, [pc, #184]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008300:	4a2c      	ldr	r2, [pc, #176]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008306:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008308:	e07a      	b.n	8008400 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800830a:	4b2a      	ldr	r3, [pc, #168]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	031b      	lsls	r3, r3, #12
 8008318:	4926      	ldr	r1, [pc, #152]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800831a:	4313      	orrs	r3, r2
 800831c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800831e:	e06f      	b.n	8008400 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008320:	4b24      	ldr	r3, [pc, #144]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	4921      	ldr	r1, [pc, #132]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008330:	4313      	orrs	r3, r2
 8008332:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008334:	e064      	b.n	8008400 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d047      	beq.n	80083ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800833e:	4b1d      	ldr	r3, [pc, #116]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f023 0219 	bic.w	r2, r3, #25
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	491a      	ldr	r1, [pc, #104]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800834c:	4313      	orrs	r3, r2
 800834e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008350:	f7fa fc50 	bl	8002bf4 <HAL_GetTick>
 8008354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008358:	f7fa fc4c 	bl	8002bf4 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e332      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800836a:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f0      	beq.n	8008358 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008376:	f7fa fc49 	bl	8002c0c <HAL_GetREVID>
 800837a:	4603      	mov	r3, r0
 800837c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008380:	4293      	cmp	r3, r2
 8008382:	d819      	bhi.n	80083b8 <HAL_RCC_OscConfig+0x28c>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b40      	cmp	r3, #64	; 0x40
 800838a:	d108      	bne.n	800839e <HAL_RCC_OscConfig+0x272>
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008394:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 8008396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800839a:	6053      	str	r3, [r2, #4]
 800839c:	e030      	b.n	8008400 <HAL_RCC_OscConfig+0x2d4>
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	031b      	lsls	r3, r3, #12
 80083ac:	4901      	ldr	r1, [pc, #4]	; (80083b4 <HAL_RCC_OscConfig+0x288>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	604b      	str	r3, [r1, #4]
 80083b2:	e025      	b.n	8008400 <HAL_RCC_OscConfig+0x2d4>
 80083b4:	58024400 	.word	0x58024400
 80083b8:	4b9a      	ldr	r3, [pc, #616]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	061b      	lsls	r3, r3, #24
 80083c6:	4997      	ldr	r1, [pc, #604]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	604b      	str	r3, [r1, #4]
 80083cc:	e018      	b.n	8008400 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083ce:	4b95      	ldr	r3, [pc, #596]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a94      	ldr	r2, [pc, #592]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80083d4:	f023 0301 	bic.w	r3, r3, #1
 80083d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083da:	f7fa fc0b 	bl	8002bf4 <HAL_GetTick>
 80083de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083e0:	e008      	b.n	80083f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083e2:	f7fa fc07 	bl	8002bf4 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e2ed      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083f4:	4b8b      	ldr	r3, [pc, #556]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1f0      	bne.n	80083e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80a9 	beq.w	8008560 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800840e:	4b85      	ldr	r3, [pc, #532]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008416:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008418:	4b82      	ldr	r3, [pc, #520]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b08      	cmp	r3, #8
 8008422:	d007      	beq.n	8008434 <HAL_RCC_OscConfig+0x308>
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	2b18      	cmp	r3, #24
 8008428:	d13a      	bne.n	80084a0 <HAL_RCC_OscConfig+0x374>
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	2b01      	cmp	r3, #1
 8008432:	d135      	bne.n	80084a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008434:	4b7b      	ldr	r3, [pc, #492]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_RCC_OscConfig+0x320>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d001      	beq.n	800844c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e2c1      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800844c:	f7fa fbde 	bl	8002c0c <HAL_GetREVID>
 8008450:	4603      	mov	r3, r0
 8008452:	f241 0203 	movw	r2, #4099	; 0x1003
 8008456:	4293      	cmp	r3, r2
 8008458:	d817      	bhi.n	800848a <HAL_RCC_OscConfig+0x35e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	2b20      	cmp	r3, #32
 8008460:	d108      	bne.n	8008474 <HAL_RCC_OscConfig+0x348>
 8008462:	4b70      	ldr	r3, [pc, #448]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800846a:	4a6e      	ldr	r2, [pc, #440]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 800846c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008470:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008472:	e075      	b.n	8008560 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008474:	4b6b      	ldr	r3, [pc, #428]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	069b      	lsls	r3, r3, #26
 8008482:	4968      	ldr	r1, [pc, #416]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008484:	4313      	orrs	r3, r2
 8008486:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008488:	e06a      	b.n	8008560 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800848a:	4b66      	ldr	r3, [pc, #408]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	061b      	lsls	r3, r3, #24
 8008498:	4962      	ldr	r1, [pc, #392]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 800849a:	4313      	orrs	r3, r2
 800849c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800849e:	e05f      	b.n	8008560 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d042      	beq.n	800852e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80084a8:	4b5e      	ldr	r3, [pc, #376]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a5d      	ldr	r2, [pc, #372]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b4:	f7fa fb9e 	bl	8002bf4 <HAL_GetTick>
 80084b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084ba:	e008      	b.n	80084ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084bc:	f7fa fb9a 	bl	8002bf4 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d901      	bls.n	80084ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e280      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084ce:	4b55      	ldr	r3, [pc, #340]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0f0      	beq.n	80084bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084da:	f7fa fb97 	bl	8002c0c <HAL_GetREVID>
 80084de:	4603      	mov	r3, r0
 80084e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d817      	bhi.n	8008518 <HAL_RCC_OscConfig+0x3ec>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d108      	bne.n	8008502 <HAL_RCC_OscConfig+0x3d6>
 80084f0:	4b4c      	ldr	r3, [pc, #304]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80084f8:	4a4a      	ldr	r2, [pc, #296]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80084fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084fe:	6053      	str	r3, [r2, #4]
 8008500:	e02e      	b.n	8008560 <HAL_RCC_OscConfig+0x434>
 8008502:	4b48      	ldr	r3, [pc, #288]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	069b      	lsls	r3, r3, #26
 8008510:	4944      	ldr	r1, [pc, #272]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008512:	4313      	orrs	r3, r2
 8008514:	604b      	str	r3, [r1, #4]
 8008516:	e023      	b.n	8008560 <HAL_RCC_OscConfig+0x434>
 8008518:	4b42      	ldr	r3, [pc, #264]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	493f      	ldr	r1, [pc, #252]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008528:	4313      	orrs	r3, r2
 800852a:	60cb      	str	r3, [r1, #12]
 800852c:	e018      	b.n	8008560 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800852e:	4b3d      	ldr	r3, [pc, #244]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a3c      	ldr	r2, [pc, #240]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853a:	f7fa fb5b 	bl	8002bf4 <HAL_GetTick>
 800853e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008540:	e008      	b.n	8008554 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008542:	f7fa fb57 	bl	8002bf4 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e23d      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008554:	4b33      	ldr	r3, [pc, #204]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1f0      	bne.n	8008542 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d036      	beq.n	80085da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d019      	beq.n	80085a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008574:	4b2b      	ldr	r3, [pc, #172]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008578:	4a2a      	ldr	r2, [pc, #168]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008580:	f7fa fb38 	bl	8002bf4 <HAL_GetTick>
 8008584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008588:	f7fa fb34 	bl	8002bf4 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e21a      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800859a:	4b22      	ldr	r3, [pc, #136]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 800859c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0f0      	beq.n	8008588 <HAL_RCC_OscConfig+0x45c>
 80085a6:	e018      	b.n	80085da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085a8:	4b1e      	ldr	r3, [pc, #120]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80085aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ac:	4a1d      	ldr	r2, [pc, #116]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80085ae:	f023 0301 	bic.w	r3, r3, #1
 80085b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b4:	f7fa fb1e 	bl	8002bf4 <HAL_GetTick>
 80085b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085ba:	e008      	b.n	80085ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085bc:	f7fa fb1a 	bl	8002bf4 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d901      	bls.n	80085ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e200      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085ce:	4b15      	ldr	r3, [pc, #84]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80085d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f0      	bne.n	80085bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d039      	beq.n	800865a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01c      	beq.n	8008628 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085ee:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a0c      	ldr	r2, [pc, #48]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 80085f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085fa:	f7fa fafb 	bl	8002bf4 <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008602:	f7fa faf7 	bl	8002bf4 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e1dd      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008614:	4b03      	ldr	r3, [pc, #12]	; (8008624 <HAL_RCC_OscConfig+0x4f8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0f0      	beq.n	8008602 <HAL_RCC_OscConfig+0x4d6>
 8008620:	e01b      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
 8008622:	bf00      	nop
 8008624:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008628:	4b9b      	ldr	r3, [pc, #620]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a9a      	ldr	r2, [pc, #616]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800862e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008632:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008634:	f7fa fade 	bl	8002bf4 <HAL_GetTick>
 8008638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800863c:	f7fa fada 	bl	8002bf4 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e1c0      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800864e:	4b92      	ldr	r3, [pc, #584]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1f0      	bne.n	800863c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 8081 	beq.w	800876a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008668:	4b8c      	ldr	r3, [pc, #560]	; (800889c <HAL_RCC_OscConfig+0x770>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a8b      	ldr	r2, [pc, #556]	; (800889c <HAL_RCC_OscConfig+0x770>)
 800866e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008674:	f7fa fabe 	bl	8002bf4 <HAL_GetTick>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800867c:	f7fa faba 	bl	8002bf4 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b64      	cmp	r3, #100	; 0x64
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e1a0      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800868e:	4b83      	ldr	r3, [pc, #524]	; (800889c <HAL_RCC_OscConfig+0x770>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0f0      	beq.n	800867c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d106      	bne.n	80086b0 <HAL_RCC_OscConfig+0x584>
 80086a2:	4b7d      	ldr	r3, [pc, #500]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	4a7c      	ldr	r2, [pc, #496]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086a8:	f043 0301 	orr.w	r3, r3, #1
 80086ac:	6713      	str	r3, [r2, #112]	; 0x70
 80086ae:	e02d      	b.n	800870c <HAL_RCC_OscConfig+0x5e0>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10c      	bne.n	80086d2 <HAL_RCC_OscConfig+0x5a6>
 80086b8:	4b77      	ldr	r3, [pc, #476]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086bc:	4a76      	ldr	r2, [pc, #472]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086be:	f023 0301 	bic.w	r3, r3, #1
 80086c2:	6713      	str	r3, [r2, #112]	; 0x70
 80086c4:	4b74      	ldr	r3, [pc, #464]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c8:	4a73      	ldr	r2, [pc, #460]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086ca:	f023 0304 	bic.w	r3, r3, #4
 80086ce:	6713      	str	r3, [r2, #112]	; 0x70
 80086d0:	e01c      	b.n	800870c <HAL_RCC_OscConfig+0x5e0>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d10c      	bne.n	80086f4 <HAL_RCC_OscConfig+0x5c8>
 80086da:	4b6f      	ldr	r3, [pc, #444]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086de:	4a6e      	ldr	r2, [pc, #440]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086e0:	f043 0304 	orr.w	r3, r3, #4
 80086e4:	6713      	str	r3, [r2, #112]	; 0x70
 80086e6:	4b6c      	ldr	r3, [pc, #432]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ea:	4a6b      	ldr	r2, [pc, #428]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6713      	str	r3, [r2, #112]	; 0x70
 80086f2:	e00b      	b.n	800870c <HAL_RCC_OscConfig+0x5e0>
 80086f4:	4b68      	ldr	r3, [pc, #416]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f8:	4a67      	ldr	r2, [pc, #412]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80086fa:	f023 0301 	bic.w	r3, r3, #1
 80086fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008700:	4b65      	ldr	r3, [pc, #404]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008704:	4a64      	ldr	r2, [pc, #400]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008706:	f023 0304 	bic.w	r3, r3, #4
 800870a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d015      	beq.n	8008740 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008714:	f7fa fa6e 	bl	8002bf4 <HAL_GetTick>
 8008718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800871a:	e00a      	b.n	8008732 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871c:	f7fa fa6a 	bl	8002bf4 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	f241 3288 	movw	r2, #5000	; 0x1388
 800872a:	4293      	cmp	r3, r2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e14e      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008732:	4b59      	ldr	r3, [pc, #356]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0ee      	beq.n	800871c <HAL_RCC_OscConfig+0x5f0>
 800873e:	e014      	b.n	800876a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008740:	f7fa fa58 	bl	8002bf4 <HAL_GetTick>
 8008744:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008746:	e00a      	b.n	800875e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008748:	f7fa fa54 	bl	8002bf4 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	f241 3288 	movw	r2, #5000	; 0x1388
 8008756:	4293      	cmp	r3, r2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e138      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800875e:	4b4e      	ldr	r3, [pc, #312]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1ee      	bne.n	8008748 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 812d 	beq.w	80089ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008774:	4b48      	ldr	r3, [pc, #288]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800877c:	2b18      	cmp	r3, #24
 800877e:	f000 80bd 	beq.w	80088fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2b02      	cmp	r3, #2
 8008788:	f040 809e 	bne.w	80088c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800878c:	4b42      	ldr	r3, [pc, #264]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a41      	ldr	r2, [pc, #260]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008798:	f7fa fa2c 	bl	8002bf4 <HAL_GetTick>
 800879c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a0:	f7fa fa28 	bl	8002bf4 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e10e      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087b2:	4b39      	ldr	r3, [pc, #228]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f0      	bne.n	80087a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087be:	4b36      	ldr	r3, [pc, #216]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80087c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c2:	4b37      	ldr	r3, [pc, #220]	; (80088a0 <HAL_RCC_OscConfig+0x774>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80087ce:	0112      	lsls	r2, r2, #4
 80087d0:	430a      	orrs	r2, r1
 80087d2:	4931      	ldr	r1, [pc, #196]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	628b      	str	r3, [r1, #40]	; 0x28
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	3b01      	subs	r3, #1
 80087de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e6:	3b01      	subs	r3, #1
 80087e8:	025b      	lsls	r3, r3, #9
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	431a      	orrs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	3b01      	subs	r3, #1
 80087f4:	041b      	lsls	r3, r3, #16
 80087f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087fa:	431a      	orrs	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008800:	3b01      	subs	r3, #1
 8008802:	061b      	lsls	r3, r3, #24
 8008804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008808:	4923      	ldr	r1, [pc, #140]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800880a:	4313      	orrs	r3, r2
 800880c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800880e:	4b22      	ldr	r3, [pc, #136]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	4a21      	ldr	r2, [pc, #132]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008814:	f023 0301 	bic.w	r3, r3, #1
 8008818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800881a:	4b1f      	ldr	r3, [pc, #124]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800881c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800881e:	4b21      	ldr	r3, [pc, #132]	; (80088a4 <HAL_RCC_OscConfig+0x778>)
 8008820:	4013      	ands	r3, r2
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008826:	00d2      	lsls	r2, r2, #3
 8008828:	491b      	ldr	r1, [pc, #108]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800882e:	4b1a      	ldr	r3, [pc, #104]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	f023 020c 	bic.w	r2, r3, #12
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	4917      	ldr	r1, [pc, #92]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800883c:	4313      	orrs	r3, r2
 800883e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008840:	4b15      	ldr	r3, [pc, #84]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f023 0202 	bic.w	r2, r3, #2
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884c:	4912      	ldr	r1, [pc, #72]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008852:	4b11      	ldr	r3, [pc, #68]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	4a10      	ldr	r2, [pc, #64]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800885c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885e:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	4a0d      	ldr	r2, [pc, #52]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800886a:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008876:	4b08      	ldr	r3, [pc, #32]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	4a07      	ldr	r2, [pc, #28]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 800887c:	f043 0301 	orr.w	r3, r3, #1
 8008880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a04      	ldr	r2, [pc, #16]	; (8008898 <HAL_RCC_OscConfig+0x76c>)
 8008888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800888c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888e:	f7fa f9b1 	bl	8002bf4 <HAL_GetTick>
 8008892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008894:	e011      	b.n	80088ba <HAL_RCC_OscConfig+0x78e>
 8008896:	bf00      	nop
 8008898:	58024400 	.word	0x58024400
 800889c:	58024800 	.word	0x58024800
 80088a0:	fffffc0c 	.word	0xfffffc0c
 80088a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088a8:	f7fa f9a4 	bl	8002bf4 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e08a      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088ba:	4b47      	ldr	r3, [pc, #284]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f0      	beq.n	80088a8 <HAL_RCC_OscConfig+0x77c>
 80088c6:	e082      	b.n	80089ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088c8:	4b43      	ldr	r3, [pc, #268]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a42      	ldr	r2, [pc, #264]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80088ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d4:	f7fa f98e 	bl	8002bf4 <HAL_GetTick>
 80088d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088dc:	f7fa f98a 	bl	8002bf4 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e070      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088ee:	4b3a      	ldr	r3, [pc, #232]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x7b0>
 80088fa:	e068      	b.n	80089ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80088fc:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008902:	4b35      	ldr	r3, [pc, #212]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b01      	cmp	r3, #1
 800890e:	d031      	beq.n	8008974 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f003 0203 	and.w	r2, r3, #3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800891a:	429a      	cmp	r2, r3
 800891c:	d12a      	bne.n	8008974 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	091b      	lsrs	r3, r3, #4
 8008922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800892a:	429a      	cmp	r2, r3
 800892c:	d122      	bne.n	8008974 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800893a:	429a      	cmp	r2, r3
 800893c:	d11a      	bne.n	8008974 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	0a5b      	lsrs	r3, r3, #9
 8008942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800894c:	429a      	cmp	r2, r3
 800894e:	d111      	bne.n	8008974 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	0c1b      	lsrs	r3, r3, #16
 8008954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800895e:	429a      	cmp	r2, r3
 8008960:	d108      	bne.n	8008974 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	0e1b      	lsrs	r3, r3, #24
 8008966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008970:	429a      	cmp	r2, r3
 8008972:	d001      	beq.n	8008978 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e02b      	b.n	80089d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008978:	4b17      	ldr	r3, [pc, #92]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 800897a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897c:	08db      	lsrs	r3, r3, #3
 800897e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008982:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	429a      	cmp	r2, r3
 800898c:	d01f      	beq.n	80089ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800898e:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	4a11      	ldr	r2, [pc, #68]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 8008994:	f023 0301 	bic.w	r3, r3, #1
 8008998:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800899a:	f7fa f92b 	bl	8002bf4 <HAL_GetTick>
 800899e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80089a0:	bf00      	nop
 80089a2:	f7fa f927 	bl	8002bf4 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d0f9      	beq.n	80089a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089ae:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80089b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <HAL_RCC_OscConfig+0x8b0>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089ba:	00d2      	lsls	r2, r2, #3
 80089bc:	4906      	ldr	r1, [pc, #24]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <HAL_RCC_OscConfig+0x8ac>)
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3730      	adds	r7, #48	; 0x30
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	58024400 	.word	0x58024400
 80089dc:	ffff0007 	.word	0xffff0007

080089e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e19c      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089f4:	4b8a      	ldr	r3, [pc, #552]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d910      	bls.n	8008a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a02:	4b87      	ldr	r3, [pc, #540]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f023 020f 	bic.w	r2, r3, #15
 8008a0a:	4985      	ldr	r1, [pc, #532]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a12:	4b83      	ldr	r3, [pc, #524]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e184      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d010      	beq.n	8008a52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	4b7b      	ldr	r3, [pc, #492]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d908      	bls.n	8008a52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a40:	4b78      	ldr	r3, [pc, #480]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	4975      	ldr	r1, [pc, #468]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d010      	beq.n	8008a80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	4b70      	ldr	r3, [pc, #448]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d908      	bls.n	8008a80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a6e:	4b6d      	ldr	r3, [pc, #436]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	496a      	ldr	r1, [pc, #424]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d010      	beq.n	8008aae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699a      	ldr	r2, [r3, #24]
 8008a90:	4b64      	ldr	r3, [pc, #400]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d908      	bls.n	8008aae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a9c:	4b61      	ldr	r3, [pc, #388]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	495e      	ldr	r1, [pc, #376]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d010      	beq.n	8008adc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69da      	ldr	r2, [r3, #28]
 8008abe:	4b59      	ldr	r3, [pc, #356]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d908      	bls.n	8008adc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008aca:	4b56      	ldr	r3, [pc, #344]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	4953      	ldr	r1, [pc, #332]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d010      	beq.n	8008b0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	4b4d      	ldr	r3, [pc, #308]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d908      	bls.n	8008b0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008af8:	4b4a      	ldr	r3, [pc, #296]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f023 020f 	bic.w	r2, r3, #15
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	4947      	ldr	r1, [pc, #284]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d055      	beq.n	8008bc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b16:	4b43      	ldr	r3, [pc, #268]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	4940      	ldr	r1, [pc, #256]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d107      	bne.n	8008b40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b30:	4b3c      	ldr	r3, [pc, #240]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d121      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e0f6      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d107      	bne.n	8008b58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b48:	4b36      	ldr	r3, [pc, #216]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d115      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e0ea      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d107      	bne.n	8008b70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b60:	4b30      	ldr	r3, [pc, #192]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e0de      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b70:	4b2c      	ldr	r3, [pc, #176]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e0d6      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b80:	4b28      	ldr	r3, [pc, #160]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f023 0207 	bic.w	r2, r3, #7
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	4925      	ldr	r1, [pc, #148]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b92:	f7fa f82f 	bl	8002bf4 <HAL_GetTick>
 8008b96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b98:	e00a      	b.n	8008bb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b9a:	f7fa f82b 	bl	8002bf4 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d901      	bls.n	8008bb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e0be      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d1eb      	bne.n	8008b9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d010      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d208      	bcs.n	8008bf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bde:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	f023 020f 	bic.w	r2, r3, #15
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	490e      	ldr	r1, [pc, #56]	; (8008c24 <HAL_RCC_ClockConfig+0x244>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d214      	bcs.n	8008c28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bfe:	4b08      	ldr	r3, [pc, #32]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f023 020f 	bic.w	r2, r3, #15
 8008c06:	4906      	ldr	r1, [pc, #24]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0e:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <HAL_RCC_ClockConfig+0x240>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d005      	beq.n	8008c28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e086      	b.n	8008d2e <HAL_RCC_ClockConfig+0x34e>
 8008c20:	52002000 	.word	0x52002000
 8008c24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d010      	beq.n	8008c56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691a      	ldr	r2, [r3, #16]
 8008c38:	4b3f      	ldr	r3, [pc, #252]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d208      	bcs.n	8008c56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c44:	4b3c      	ldr	r3, [pc, #240]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	4939      	ldr	r1, [pc, #228]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d010      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695a      	ldr	r2, [r3, #20]
 8008c66:	4b34      	ldr	r3, [pc, #208]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d208      	bcs.n	8008c84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c72:	4b31      	ldr	r3, [pc, #196]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	492e      	ldr	r1, [pc, #184]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0310 	and.w	r3, r3, #16
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d010      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	699a      	ldr	r2, [r3, #24]
 8008c94:	4b28      	ldr	r3, [pc, #160]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d208      	bcs.n	8008cb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ca0:	4b25      	ldr	r3, [pc, #148]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	4922      	ldr	r1, [pc, #136]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d010      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69da      	ldr	r2, [r3, #28]
 8008cc2:	4b1d      	ldr	r3, [pc, #116]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d208      	bcs.n	8008ce0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cce:	4b1a      	ldr	r3, [pc, #104]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	4917      	ldr	r1, [pc, #92]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ce0:	f000 f834 	bl	8008d4c <HAL_RCC_GetSysClockFreq>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	4912      	ldr	r1, [pc, #72]	; (8008d3c <HAL_RCC_ClockConfig+0x35c>)
 8008cf2:	5ccb      	ldrb	r3, [r1, r3]
 8008cf4:	f003 031f 	and.w	r3, r3, #31
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <HAL_RCC_ClockConfig+0x358>)
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	4a0d      	ldr	r2, [pc, #52]	; (8008d3c <HAL_RCC_ClockConfig+0x35c>)
 8008d08:	5cd3      	ldrb	r3, [r2, r3]
 8008d0a:	f003 031f 	and.w	r3, r3, #31
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	4a0a      	ldr	r2, [pc, #40]	; (8008d40 <HAL_RCC_ClockConfig+0x360>)
 8008d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d18:	4a0a      	ldr	r2, [pc, #40]	; (8008d44 <HAL_RCC_ClockConfig+0x364>)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008d1e:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <HAL_RCC_ClockConfig+0x368>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7f9 fc9e 	bl	8002664 <HAL_InitTick>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	58024400 	.word	0x58024400
 8008d3c:	08014ad4 	.word	0x08014ad4
 8008d40:	2400008c 	.word	0x2400008c
 8008d44:	24000088 	.word	0x24000088
 8008d48:	24000090 	.word	0x24000090

08008d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b089      	sub	sp, #36	; 0x24
 8008d50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d52:	4bb3      	ldr	r3, [pc, #716]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d5a:	2b18      	cmp	r3, #24
 8008d5c:	f200 8155 	bhi.w	800900a <HAL_RCC_GetSysClockFreq+0x2be>
 8008d60:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008dcd 	.word	0x08008dcd
 8008d6c:	0800900b 	.word	0x0800900b
 8008d70:	0800900b 	.word	0x0800900b
 8008d74:	0800900b 	.word	0x0800900b
 8008d78:	0800900b 	.word	0x0800900b
 8008d7c:	0800900b 	.word	0x0800900b
 8008d80:	0800900b 	.word	0x0800900b
 8008d84:	0800900b 	.word	0x0800900b
 8008d88:	08008df3 	.word	0x08008df3
 8008d8c:	0800900b 	.word	0x0800900b
 8008d90:	0800900b 	.word	0x0800900b
 8008d94:	0800900b 	.word	0x0800900b
 8008d98:	0800900b 	.word	0x0800900b
 8008d9c:	0800900b 	.word	0x0800900b
 8008da0:	0800900b 	.word	0x0800900b
 8008da4:	0800900b 	.word	0x0800900b
 8008da8:	08008df9 	.word	0x08008df9
 8008dac:	0800900b 	.word	0x0800900b
 8008db0:	0800900b 	.word	0x0800900b
 8008db4:	0800900b 	.word	0x0800900b
 8008db8:	0800900b 	.word	0x0800900b
 8008dbc:	0800900b 	.word	0x0800900b
 8008dc0:	0800900b 	.word	0x0800900b
 8008dc4:	0800900b 	.word	0x0800900b
 8008dc8:	08008dff 	.word	0x08008dff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dcc:	4b94      	ldr	r3, [pc, #592]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0320 	and.w	r3, r3, #32
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d009      	beq.n	8008dec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dd8:	4b91      	ldr	r3, [pc, #580]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	08db      	lsrs	r3, r3, #3
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	4a90      	ldr	r2, [pc, #576]	; (8009024 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008de4:	fa22 f303 	lsr.w	r3, r2, r3
 8008de8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008dea:	e111      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008dec:	4b8d      	ldr	r3, [pc, #564]	; (8009024 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008dee:	61bb      	str	r3, [r7, #24]
      break;
 8008df0:	e10e      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008df2:	4b8d      	ldr	r3, [pc, #564]	; (8009028 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008df4:	61bb      	str	r3, [r7, #24]
      break;
 8008df6:	e10b      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008df8:	4b8c      	ldr	r3, [pc, #560]	; (800902c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008dfa:	61bb      	str	r3, [r7, #24]
      break;
 8008dfc:	e108      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dfe:	4b88      	ldr	r3, [pc, #544]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008e08:	4b85      	ldr	r3, [pc, #532]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e14:	4b82      	ldr	r3, [pc, #520]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e1e:	4b80      	ldr	r3, [pc, #512]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	08db      	lsrs	r3, r3, #3
 8008e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	fb02 f303 	mul.w	r3, r2, r3
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 80e1 	beq.w	8009004 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	f000 8083 	beq.w	8008f50 <HAL_RCC_GetSysClockFreq+0x204>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	f200 80a1 	bhi.w	8008f94 <HAL_RCC_GetSysClockFreq+0x248>
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_RCC_GetSysClockFreq+0x114>
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d056      	beq.n	8008f0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e5e:	e099      	b.n	8008f94 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e60:	4b6f      	ldr	r3, [pc, #444]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d02d      	beq.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e6c:	4b6c      	ldr	r3, [pc, #432]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	08db      	lsrs	r3, r3, #3
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	4a6b      	ldr	r2, [pc, #428]	; (8009024 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e78:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e96:	4b62      	ldr	r3, [pc, #392]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eaa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008ec6:	e087      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009034 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eda:	4b51      	ldr	r3, [pc, #324]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f0a:	e065      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009038 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1e:	4b40      	ldr	r3, [pc, #256]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f4e:	e043      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800903c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f62:	4b2f      	ldr	r3, [pc, #188]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f92:	e021      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009038 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa6:	4b1e      	ldr	r3, [pc, #120]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009030 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fd6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	0a5b      	lsrs	r3, r3, #9
 8008fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	ee07 3a90 	vmov	s15, r3
 8008fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ffc:	ee17 3a90 	vmov	r3, s15
 8009000:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009002:	e005      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	61bb      	str	r3, [r7, #24]
      break;
 8009008:	e002      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800900c:	61bb      	str	r3, [r7, #24]
      break;
 800900e:	bf00      	nop
  }

  return sysclockfreq;
 8009010:	69bb      	ldr	r3, [r7, #24]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3724      	adds	r7, #36	; 0x24
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	58024400 	.word	0x58024400
 8009024:	03d09000 	.word	0x03d09000
 8009028:	003d0900 	.word	0x003d0900
 800902c:	017d7840 	.word	0x017d7840
 8009030:	46000000 	.word	0x46000000
 8009034:	4c742400 	.word	0x4c742400
 8009038:	4a742400 	.word	0x4a742400
 800903c:	4bbebc20 	.word	0x4bbebc20

08009040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009046:	f7ff fe81 	bl	8008d4c <HAL_RCC_GetSysClockFreq>
 800904a:	4602      	mov	r2, r0
 800904c:	4b10      	ldr	r3, [pc, #64]	; (8009090 <HAL_RCC_GetHCLKFreq+0x50>)
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	0a1b      	lsrs	r3, r3, #8
 8009052:	f003 030f 	and.w	r3, r3, #15
 8009056:	490f      	ldr	r1, [pc, #60]	; (8009094 <HAL_RCC_GetHCLKFreq+0x54>)
 8009058:	5ccb      	ldrb	r3, [r1, r3]
 800905a:	f003 031f 	and.w	r3, r3, #31
 800905e:	fa22 f303 	lsr.w	r3, r2, r3
 8009062:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009064:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <HAL_RCC_GetHCLKFreq+0x50>)
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	4a09      	ldr	r2, [pc, #36]	; (8009094 <HAL_RCC_GetHCLKFreq+0x54>)
 800906e:	5cd3      	ldrb	r3, [r2, r3]
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	fa22 f303 	lsr.w	r3, r2, r3
 800907a:	4a07      	ldr	r2, [pc, #28]	; (8009098 <HAL_RCC_GetHCLKFreq+0x58>)
 800907c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800907e:	4a07      	ldr	r2, [pc, #28]	; (800909c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009084:	4b04      	ldr	r3, [pc, #16]	; (8009098 <HAL_RCC_GetHCLKFreq+0x58>)
 8009086:	681b      	ldr	r3, [r3, #0]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	58024400 	.word	0x58024400
 8009094:	08014ad4 	.word	0x08014ad4
 8009098:	2400008c 	.word	0x2400008c
 800909c:	24000088 	.word	0x24000088

080090a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80090a4:	f7ff ffcc 	bl	8009040 <HAL_RCC_GetHCLKFreq>
 80090a8:	4602      	mov	r2, r0
 80090aa:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	091b      	lsrs	r3, r3, #4
 80090b0:	f003 0307 	and.w	r3, r3, #7
 80090b4:	4904      	ldr	r1, [pc, #16]	; (80090c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090b6:	5ccb      	ldrb	r3, [r1, r3]
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	58024400 	.word	0x58024400
 80090c8:	08014ad4 	.word	0x08014ad4

080090cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80090d0:	f7ff ffb6 	bl	8009040 <HAL_RCC_GetHCLKFreq>
 80090d4:	4602      	mov	r2, r0
 80090d6:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	4904      	ldr	r1, [pc, #16]	; (80090f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80090e2:	5ccb      	ldrb	r3, [r1, r3]
 80090e4:	f003 031f 	and.w	r3, r3, #31
 80090e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	58024400 	.word	0x58024400
 80090f4:	08014ad4 	.word	0x08014ad4

080090f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	223f      	movs	r2, #63	; 0x3f
 8009106:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009108:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <HAL_RCC_GetClockConfig+0x7c>)
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f003 0207 	and.w	r2, r3, #7
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009114:	4b17      	ldr	r3, [pc, #92]	; (8009174 <HAL_RCC_GetClockConfig+0x7c>)
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009120:	4b14      	ldr	r3, [pc, #80]	; (8009174 <HAL_RCC_GetClockConfig+0x7c>)
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f003 020f 	and.w	r2, r3, #15
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800912c:	4b11      	ldr	r3, [pc, #68]	; (8009174 <HAL_RCC_GetClockConfig+0x7c>)
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009138:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <HAL_RCC_GetClockConfig+0x7c>)
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009144:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <HAL_RCC_GetClockConfig+0x7c>)
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009150:	4b08      	ldr	r3, [pc, #32]	; (8009174 <HAL_RCC_GetClockConfig+0x7c>)
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <HAL_RCC_GetClockConfig+0x80>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 020f 	and.w	r2, r3, #15
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	601a      	str	r2, [r3, #0]
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	58024400 	.word	0x58024400
 8009178:	52002000 	.word	0x52002000

0800917c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800917c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009180:	b0ca      	sub	sp, #296	; 0x128
 8009182:	af00      	add	r7, sp, #0
 8009184:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009188:	2300      	movs	r3, #0
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800918e:	2300      	movs	r3, #0
 8009190:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80091a0:	2500      	movs	r5, #0
 80091a2:	ea54 0305 	orrs.w	r3, r4, r5
 80091a6:	d049      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091b2:	d02f      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80091b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091b8:	d828      	bhi.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091be:	d01a      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80091c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091c4:	d822      	bhi.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80091ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ce:	d007      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091d0:	e01c      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d2:	4bb8      	ldr	r3, [pc, #736]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d6:	4ab7      	ldr	r2, [pc, #732]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091de:	e01a      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e4:	3308      	adds	r3, #8
 80091e6:	2102      	movs	r1, #2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 fb61 	bl	800b8b0 <RCCEx_PLL2_Config>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091f4:	e00f      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fa:	3328      	adds	r3, #40	; 0x28
 80091fc:	2102      	movs	r1, #2
 80091fe:	4618      	mov	r0, r3
 8009200:	f002 fc08 	bl	800ba14 <RCCEx_PLL3_Config>
 8009204:	4603      	mov	r3, r0
 8009206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800920a:	e004      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009212:	e000      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800921e:	4ba5      	ldr	r3, [pc, #660]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009222:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800922a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800922c:	4aa1      	ldr	r2, [pc, #644]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800922e:	430b      	orrs	r3, r1
 8009230:	6513      	str	r3, [r2, #80]	; 0x50
 8009232:	e003      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800923c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009248:	f04f 0900 	mov.w	r9, #0
 800924c:	ea58 0309 	orrs.w	r3, r8, r9
 8009250:	d047      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009258:	2b04      	cmp	r3, #4
 800925a:	d82a      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	08009279 	.word	0x08009279
 8009268:	08009287 	.word	0x08009287
 800926c:	0800929d 	.word	0x0800929d
 8009270:	080092bb 	.word	0x080092bb
 8009274:	080092bb 	.word	0x080092bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009278:	4b8e      	ldr	r3, [pc, #568]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	4a8d      	ldr	r2, [pc, #564]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800927e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009284:	e01a      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928a:	3308      	adds	r3, #8
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f002 fb0e 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800929a:	e00f      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800929c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a0:	3328      	adds	r3, #40	; 0x28
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f002 fbb5 	bl	800ba14 <RCCEx_PLL3_Config>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092b0:	e004      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092b8:	e000      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80092ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10a      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092c4:	4b7b      	ldr	r3, [pc, #492]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c8:	f023 0107 	bic.w	r1, r3, #7
 80092cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d2:	4a78      	ldr	r2, [pc, #480]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6513      	str	r3, [r2, #80]	; 0x50
 80092d8:	e003      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80092e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80092ee:	f04f 0b00 	mov.w	fp, #0
 80092f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80092f6:	d04c      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009302:	d030      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009308:	d829      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800930a:	2bc0      	cmp	r3, #192	; 0xc0
 800930c:	d02d      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800930e:	2bc0      	cmp	r3, #192	; 0xc0
 8009310:	d825      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009312:	2b80      	cmp	r3, #128	; 0x80
 8009314:	d018      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009316:	2b80      	cmp	r3, #128	; 0x80
 8009318:	d821      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800931e:	2b40      	cmp	r3, #64	; 0x40
 8009320:	d007      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009322:	e01c      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009324:	4b63      	ldr	r3, [pc, #396]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	4a62      	ldr	r2, [pc, #392]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800932a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800932e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009330:	e01c      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009336:	3308      	adds	r3, #8
 8009338:	2100      	movs	r1, #0
 800933a:	4618      	mov	r0, r3
 800933c:	f002 fab8 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009340:	4603      	mov	r3, r0
 8009342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009346:	e011      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934c:	3328      	adds	r3, #40	; 0x28
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f002 fb5f 	bl	800ba14 <RCCEx_PLL3_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800935c:	e006      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009364:	e002      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009366:	bf00      	nop
 8009368:	e000      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800936a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800936c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009374:	4b4f      	ldr	r3, [pc, #316]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009378:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009382:	4a4c      	ldr	r2, [pc, #304]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009384:	430b      	orrs	r3, r1
 8009386:	6513      	str	r3, [r2, #80]	; 0x50
 8009388:	e003      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800938e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800939e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80093a2:	2300      	movs	r3, #0
 80093a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80093a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80093ac:	460b      	mov	r3, r1
 80093ae:	4313      	orrs	r3, r2
 80093b0:	d053      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093be:	d035      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80093c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093c4:	d82e      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80093c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093ca:	d031      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80093cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093d0:	d828      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80093d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093d6:	d01a      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80093d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093dc:	d822      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80093e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093e6:	d007      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80093e8:	e01c      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ea:	4b32      	ldr	r3, [pc, #200]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	4a31      	ldr	r2, [pc, #196]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093f6:	e01c      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fc:	3308      	adds	r3, #8
 80093fe:	2100      	movs	r1, #0
 8009400:	4618      	mov	r0, r3
 8009402:	f002 fa55 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800940c:	e011      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009412:	3328      	adds	r3, #40	; 0x28
 8009414:	2100      	movs	r1, #0
 8009416:	4618      	mov	r0, r3
 8009418:	f002 fafc 	bl	800ba14 <RCCEx_PLL3_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009422:	e006      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800942a:	e002      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800942c:	bf00      	nop
 800942e:	e000      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10b      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800943a:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800943c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800944a:	4a1a      	ldr	r2, [pc, #104]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800944c:	430b      	orrs	r3, r1
 800944e:	6593      	str	r3, [r2, #88]	; 0x58
 8009450:	e003      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800945a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009466:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800946a:	2300      	movs	r3, #0
 800946c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009470:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009474:	460b      	mov	r3, r1
 8009476:	4313      	orrs	r3, r2
 8009478:	d056      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800947a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009486:	d038      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800948c:	d831      	bhi.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800948e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009492:	d034      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009494:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009498:	d82b      	bhi.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800949a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800949e:	d01d      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80094a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094a4:	d825      	bhi.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d006      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80094aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094ae:	d00a      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80094b0:	e01f      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094b2:	bf00      	nop
 80094b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b8:	4ba2      	ldr	r3, [pc, #648]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	4aa1      	ldr	r2, [pc, #644]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094c4:	e01c      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ca:	3308      	adds	r3, #8
 80094cc:	2100      	movs	r1, #0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f002 f9ee 	bl	800b8b0 <RCCEx_PLL2_Config>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80094da:	e011      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e0:	3328      	adds	r3, #40	; 0x28
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f002 fa95 	bl	800ba14 <RCCEx_PLL3_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094f0:	e006      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094f8:	e002      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80094fa:	bf00      	nop
 80094fc:	e000      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80094fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10b      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009508:	4b8e      	ldr	r3, [pc, #568]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800950a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009514:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009518:	4a8a      	ldr	r2, [pc, #552]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800951a:	430b      	orrs	r3, r1
 800951c:	6593      	str	r3, [r2, #88]	; 0x58
 800951e:	e003      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009524:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009538:	2300      	movs	r3, #0
 800953a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800953e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009542:	460b      	mov	r3, r1
 8009544:	4313      	orrs	r3, r2
 8009546:	d03a      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954e:	2b30      	cmp	r3, #48	; 0x30
 8009550:	d01f      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009552:	2b30      	cmp	r3, #48	; 0x30
 8009554:	d819      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009556:	2b20      	cmp	r3, #32
 8009558:	d00c      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800955a:	2b20      	cmp	r3, #32
 800955c:	d815      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d019      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009562:	2b10      	cmp	r3, #16
 8009564:	d111      	bne.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009566:	4b77      	ldr	r3, [pc, #476]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	4a76      	ldr	r2, [pc, #472]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800956c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009572:	e011      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009578:	3308      	adds	r3, #8
 800957a:	2102      	movs	r1, #2
 800957c:	4618      	mov	r0, r3
 800957e:	f002 f997 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009588:	e006      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009590:	e002      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009592:	bf00      	nop
 8009594:	e000      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80095a0:	4b68      	ldr	r3, [pc, #416]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80095a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ae:	4a65      	ldr	r2, [pc, #404]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095b0:	430b      	orrs	r3, r1
 80095b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80095b4:	e003      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80095be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80095ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095ce:	2300      	movs	r3, #0
 80095d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80095d8:	460b      	mov	r3, r1
 80095da:	4313      	orrs	r3, r2
 80095dc:	d051      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095e8:	d035      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80095ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095ee:	d82e      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80095f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095f4:	d031      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80095f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095fa:	d828      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80095fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009600:	d01a      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009606:	d822      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d003      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800960c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009610:	d007      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009612:	e01c      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009614:	4b4b      	ldr	r3, [pc, #300]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	4a4a      	ldr	r2, [pc, #296]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800961a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800961e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009620:	e01c      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009626:	3308      	adds	r3, #8
 8009628:	2100      	movs	r1, #0
 800962a:	4618      	mov	r0, r3
 800962c:	f002 f940 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009636:	e011      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800963c:	3328      	adds	r3, #40	; 0x28
 800963e:	2100      	movs	r1, #0
 8009640:	4618      	mov	r0, r3
 8009642:	f002 f9e7 	bl	800ba14 <RCCEx_PLL3_Config>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800964c:	e006      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009654:	e002      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009656:	bf00      	nop
 8009658:	e000      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800965a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800965c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009664:	4b37      	ldr	r3, [pc, #220]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009668:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800966c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009672:	4a34      	ldr	r2, [pc, #208]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009674:	430b      	orrs	r3, r1
 8009676:	6513      	str	r3, [r2, #80]	; 0x50
 8009678:	e003      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800967e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800968e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009692:	2300      	movs	r3, #0
 8009694:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009698:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800969c:	460b      	mov	r3, r1
 800969e:	4313      	orrs	r3, r2
 80096a0:	d056      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80096a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096ac:	d033      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80096ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096b2:	d82c      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096b8:	d02f      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80096ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096be:	d826      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096c4:	d02b      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80096c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096ca:	d820      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d0:	d012      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80096d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d6:	d81a      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d022      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80096dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e0:	d115      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e6:	3308      	adds	r3, #8
 80096e8:	2101      	movs	r1, #1
 80096ea:	4618      	mov	r0, r3
 80096ec:	f002 f8e0 	bl	800b8b0 <RCCEx_PLL2_Config>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80096f6:	e015      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fc:	3328      	adds	r3, #40	; 0x28
 80096fe:	2101      	movs	r1, #1
 8009700:	4618      	mov	r0, r3
 8009702:	f002 f987 	bl	800ba14 <RCCEx_PLL3_Config>
 8009706:	4603      	mov	r3, r0
 8009708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800970c:	e00a      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009714:	e006      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009716:	bf00      	nop
 8009718:	e004      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800971a:	bf00      	nop
 800971c:	e002      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800971e:	bf00      	nop
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10d      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800972e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009730:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800973a:	4a02      	ldr	r2, [pc, #8]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800973c:	430b      	orrs	r3, r1
 800973e:	6513      	str	r3, [r2, #80]	; 0x50
 8009740:	e006      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009742:	bf00      	nop
 8009744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800974c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800975c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009760:	2300      	movs	r3, #0
 8009762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009766:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800976a:	460b      	mov	r3, r1
 800976c:	4313      	orrs	r3, r2
 800976e:	d055      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800977c:	d033      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800977e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009782:	d82c      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009788:	d02f      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800978a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978e:	d826      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009790:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009794:	d02b      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800979a:	d820      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800979c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a0:	d012      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80097a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a6:	d81a      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d022      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80097ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b0:	d115      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b6:	3308      	adds	r3, #8
 80097b8:	2101      	movs	r1, #1
 80097ba:	4618      	mov	r0, r3
 80097bc:	f002 f878 	bl	800b8b0 <RCCEx_PLL2_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80097c6:	e015      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097cc:	3328      	adds	r3, #40	; 0x28
 80097ce:	2101      	movs	r1, #1
 80097d0:	4618      	mov	r0, r3
 80097d2:	f002 f91f 	bl	800ba14 <RCCEx_PLL3_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80097dc:	e00a      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097e4:	e006      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80097e6:	bf00      	nop
 80097e8:	e004      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80097ea:	bf00      	nop
 80097ec:	e002      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80097ee:	bf00      	nop
 80097f0:	e000      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80097f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10b      	bne.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80097fc:	4ba3      	ldr	r3, [pc, #652]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009800:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800980c:	4a9f      	ldr	r2, [pc, #636]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800980e:	430b      	orrs	r3, r1
 8009810:	6593      	str	r3, [r2, #88]	; 0x58
 8009812:	e003      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009818:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800981c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800982c:	2300      	movs	r3, #0
 800982e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009832:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009836:	460b      	mov	r3, r1
 8009838:	4313      	orrs	r3, r2
 800983a:	d037      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800983c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009846:	d00e      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984c:	d816      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d018      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009856:	d111      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009858:	4b8c      	ldr	r3, [pc, #560]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a8b      	ldr	r2, [pc, #556]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800985e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009864:	e00f      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986a:	3308      	adds	r3, #8
 800986c:	2101      	movs	r1, #1
 800986e:	4618      	mov	r0, r3
 8009870:	f002 f81e 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800987a:	e004      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009882:	e000      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800988e:	4b7f      	ldr	r3, [pc, #508]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009892:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989c:	4a7b      	ldr	r2, [pc, #492]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800989e:	430b      	orrs	r3, r1
 80098a0:	6513      	str	r3, [r2, #80]	; 0x50
 80098a2:	e003      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80098b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80098c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d039      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d81c      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	08009919 	.word	0x08009919
 80098e0:	080098ed 	.word	0x080098ed
 80098e4:	080098fb 	.word	0x080098fb
 80098e8:	08009919 	.word	0x08009919
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ec:	4b67      	ldr	r3, [pc, #412]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f0:	4a66      	ldr	r2, [pc, #408]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80098f8:	e00f      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fe:	3308      	adds	r3, #8
 8009900:	2102      	movs	r1, #2
 8009902:	4618      	mov	r0, r3
 8009904:	f001 ffd4 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800990e:	e004      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009916:	e000      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800991a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009922:	4b5a      	ldr	r3, [pc, #360]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009926:	f023 0103 	bic.w	r1, r3, #3
 800992a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009930:	4a56      	ldr	r2, [pc, #344]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009932:	430b      	orrs	r3, r1
 8009934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009936:	e003      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800993c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800994c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009950:	2300      	movs	r3, #0
 8009952:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009956:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800995a:	460b      	mov	r3, r1
 800995c:	4313      	orrs	r3, r2
 800995e:	f000 809f 	beq.w	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009962:	4b4b      	ldr	r3, [pc, #300]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a4a      	ldr	r2, [pc, #296]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800996c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800996e:	f7f9 f941 	bl	8002bf4 <HAL_GetTick>
 8009972:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009976:	e00b      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009978:	f7f9 f93c 	bl	8002bf4 <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	2b64      	cmp	r3, #100	; 0x64
 8009986:	d903      	bls.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800998e:	e005      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009990:	4b3f      	ldr	r3, [pc, #252]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0ed      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800999c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d179      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099a4:	4b39      	ldr	r3, [pc, #228]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099b0:	4053      	eors	r3, r2
 80099b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d015      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099ba:	4b34      	ldr	r3, [pc, #208]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099c6:	4b31      	ldr	r3, [pc, #196]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ca:	4a30      	ldr	r2, [pc, #192]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099d2:	4b2e      	ldr	r3, [pc, #184]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d6:	4a2d      	ldr	r2, [pc, #180]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80099de:	4a2b      	ldr	r2, [pc, #172]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f2:	d118      	bne.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f4:	f7f9 f8fe 	bl	8002bf4 <HAL_GetTick>
 80099f8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099fc:	e00d      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099fe:	f7f9 f8f9 	bl	8002bf4 <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009a08:	1ad2      	subs	r2, r2, r3
 8009a0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d903      	bls.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009a18:	e005      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a1a:	4b1c      	ldr	r3, [pc, #112]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0eb      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d129      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a3e:	d10e      	bne.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009a40:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a50:	091a      	lsrs	r2, r3, #4
 8009a52:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	4a0d      	ldr	r2, [pc, #52]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	6113      	str	r3, [r2, #16]
 8009a5c:	e005      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009a5e:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	4a0a      	ldr	r2, [pc, #40]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a68:	6113      	str	r3, [r2, #16]
 8009a6a:	4b08      	ldr	r3, [pc, #32]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a7a:	4a04      	ldr	r2, [pc, #16]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009a80:	e00e      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009a8a:	e009      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	58024800 	.word	0x58024800
 8009a94:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f002 0301 	and.w	r3, r2, #1
 8009aac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ab6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4313      	orrs	r3, r2
 8009abe:	f000 8089 	beq.w	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac8:	2b28      	cmp	r3, #40	; 0x28
 8009aca:	d86b      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009acc:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009bad 	.word	0x08009bad
 8009ad8:	08009ba5 	.word	0x08009ba5
 8009adc:	08009ba5 	.word	0x08009ba5
 8009ae0:	08009ba5 	.word	0x08009ba5
 8009ae4:	08009ba5 	.word	0x08009ba5
 8009ae8:	08009ba5 	.word	0x08009ba5
 8009aec:	08009ba5 	.word	0x08009ba5
 8009af0:	08009ba5 	.word	0x08009ba5
 8009af4:	08009b79 	.word	0x08009b79
 8009af8:	08009ba5 	.word	0x08009ba5
 8009afc:	08009ba5 	.word	0x08009ba5
 8009b00:	08009ba5 	.word	0x08009ba5
 8009b04:	08009ba5 	.word	0x08009ba5
 8009b08:	08009ba5 	.word	0x08009ba5
 8009b0c:	08009ba5 	.word	0x08009ba5
 8009b10:	08009ba5 	.word	0x08009ba5
 8009b14:	08009b8f 	.word	0x08009b8f
 8009b18:	08009ba5 	.word	0x08009ba5
 8009b1c:	08009ba5 	.word	0x08009ba5
 8009b20:	08009ba5 	.word	0x08009ba5
 8009b24:	08009ba5 	.word	0x08009ba5
 8009b28:	08009ba5 	.word	0x08009ba5
 8009b2c:	08009ba5 	.word	0x08009ba5
 8009b30:	08009ba5 	.word	0x08009ba5
 8009b34:	08009bad 	.word	0x08009bad
 8009b38:	08009ba5 	.word	0x08009ba5
 8009b3c:	08009ba5 	.word	0x08009ba5
 8009b40:	08009ba5 	.word	0x08009ba5
 8009b44:	08009ba5 	.word	0x08009ba5
 8009b48:	08009ba5 	.word	0x08009ba5
 8009b4c:	08009ba5 	.word	0x08009ba5
 8009b50:	08009ba5 	.word	0x08009ba5
 8009b54:	08009bad 	.word	0x08009bad
 8009b58:	08009ba5 	.word	0x08009ba5
 8009b5c:	08009ba5 	.word	0x08009ba5
 8009b60:	08009ba5 	.word	0x08009ba5
 8009b64:	08009ba5 	.word	0x08009ba5
 8009b68:	08009ba5 	.word	0x08009ba5
 8009b6c:	08009ba5 	.word	0x08009ba5
 8009b70:	08009ba5 	.word	0x08009ba5
 8009b74:	08009bad 	.word	0x08009bad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	2101      	movs	r1, #1
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fe95 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009b8c:	e00f      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b92:	3328      	adds	r3, #40	; 0x28
 8009b94:	2101      	movs	r1, #1
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 ff3c 	bl	800ba14 <RCCEx_PLL3_Config>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ba2:	e004      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009baa:	e000      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009bb6:	4bbf      	ldr	r3, [pc, #764]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bc4:	4abb      	ldr	r2, [pc, #748]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bc6:	430b      	orrs	r3, r1
 8009bc8:	6553      	str	r3, [r2, #84]	; 0x54
 8009bca:	e003      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f002 0302 	and.w	r3, r2, #2
 8009be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009bea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	d041      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	d824      	bhi.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009bfe:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009c51 	.word	0x08009c51
 8009c08:	08009c1d 	.word	0x08009c1d
 8009c0c:	08009c33 	.word	0x08009c33
 8009c10:	08009c51 	.word	0x08009c51
 8009c14:	08009c51 	.word	0x08009c51
 8009c18:	08009c51 	.word	0x08009c51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c20:	3308      	adds	r3, #8
 8009c22:	2101      	movs	r1, #1
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 fe43 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c30:	e00f      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c36:	3328      	adds	r3, #40	; 0x28
 8009c38:	2101      	movs	r1, #1
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 feea 	bl	800ba14 <RCCEx_PLL3_Config>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c46:	e004      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c4e:	e000      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c5a:	4b96      	ldr	r3, [pc, #600]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	f023 0107 	bic.w	r1, r3, #7
 8009c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c68:	4a92      	ldr	r2, [pc, #584]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	6553      	str	r3, [r2, #84]	; 0x54
 8009c6e:	e003      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f002 0304 	and.w	r3, r2, #4
 8009c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4313      	orrs	r3, r2
 8009c96:	d044      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ca0:	2b05      	cmp	r3, #5
 8009ca2:	d825      	bhi.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009ca4:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009cf9 	.word	0x08009cf9
 8009cb0:	08009cc5 	.word	0x08009cc5
 8009cb4:	08009cdb 	.word	0x08009cdb
 8009cb8:	08009cf9 	.word	0x08009cf9
 8009cbc:	08009cf9 	.word	0x08009cf9
 8009cc0:	08009cf9 	.word	0x08009cf9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc8:	3308      	adds	r3, #8
 8009cca:	2101      	movs	r1, #1
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fdef 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009cd8:	e00f      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cde:	3328      	adds	r3, #40	; 0x28
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fe96 	bl	800ba14 <RCCEx_PLL3_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009cee:	e004      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cf6:	e000      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10b      	bne.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d02:	4b6c      	ldr	r3, [pc, #432]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d06:	f023 0107 	bic.w	r1, r3, #7
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d12:	4a68      	ldr	r2, [pc, #416]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6593      	str	r3, [r2, #88]	; 0x58
 8009d18:	e003      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f002 0320 	and.w	r3, r2, #32
 8009d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d32:	2300      	movs	r3, #0
 8009d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	d055      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d4e:	d033      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d54:	d82c      	bhi.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d5a:	d02f      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d60:	d826      	bhi.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d66:	d02b      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d6c:	d820      	bhi.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d72:	d012      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d78:	d81a      	bhi.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d022      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d82:	d115      	bne.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d88:	3308      	adds	r3, #8
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 fd8f 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009d98:	e015      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9e:	3328      	adds	r3, #40	; 0x28
 8009da0:	2102      	movs	r1, #2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 fe36 	bl	800ba14 <RCCEx_PLL3_Config>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009dae:	e00a      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009db6:	e006      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009db8:	bf00      	nop
 8009dba:	e004      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009dbc:	bf00      	nop
 8009dbe:	e002      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009dc0:	bf00      	nop
 8009dc2:	e000      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10b      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009dce:	4b39      	ldr	r3, [pc, #228]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dde:	4a35      	ldr	r2, [pc, #212]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009de0:	430b      	orrs	r3, r1
 8009de2:	6553      	str	r3, [r2, #84]	; 0x54
 8009de4:	e003      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	d058      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009e1a:	d033      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009e1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009e20:	d82c      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e26:	d02f      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e2c:	d826      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e32:	d02b      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e38:	d820      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e3e:	d012      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e44:	d81a      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d022      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e4e:	d115      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e54:	3308      	adds	r3, #8
 8009e56:	2100      	movs	r1, #0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 fd29 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009e64:	e015      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	3328      	adds	r3, #40	; 0x28
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fdd0 	bl	800ba14 <RCCEx_PLL3_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009e7a:	e00a      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e82:	e006      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009e84:	bf00      	nop
 8009e86:	e004      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009e88:	bf00      	nop
 8009e8a:	e002      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009e8c:	bf00      	nop
 8009e8e:	e000      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10e      	bne.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009e9a:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eaa:	4a02      	ldr	r2, [pc, #8]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6593      	str	r3, [r2, #88]	; 0x58
 8009eb0:	e006      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009eb2:	bf00      	nop
 8009eb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ebc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ed6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009eda:	460b      	mov	r3, r1
 8009edc:	4313      	orrs	r3, r2
 8009ede:	d055      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ee8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009eec:	d033      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009eee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ef2:	d82c      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ef8:	d02f      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009efe:	d826      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009f04:	d02b      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009f06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009f0a:	d820      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f10:	d012      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f16:	d81a      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d022      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f20:	d115      	bne.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f26:	3308      	adds	r3, #8
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 fcc0 	bl	800b8b0 <RCCEx_PLL2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f36:	e015      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3c:	3328      	adds	r3, #40	; 0x28
 8009f3e:	2102      	movs	r1, #2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f001 fd67 	bl	800ba14 <RCCEx_PLL3_Config>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f4c:	e00a      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f54:	e006      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f56:	bf00      	nop
 8009f58:	e004      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f5a:	bf00      	nop
 8009f5c:	e002      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f5e:	bf00      	nop
 8009f60:	e000      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10b      	bne.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009f6c:	4ba1      	ldr	r3, [pc, #644]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f70:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f7c:	4a9d      	ldr	r2, [pc, #628]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f7e:	430b      	orrs	r3, r1
 8009f80:	6593      	str	r3, [r2, #88]	; 0x58
 8009f82:	e003      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f002 0308 	and.w	r3, r2, #8
 8009f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009fa2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	d01e      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb8:	d10c      	bne.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbe:	3328      	adds	r3, #40	; 0x28
 8009fc0:	2102      	movs	r1, #2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fd26 	bl	800ba14 <RCCEx_PLL3_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009fd4:	4b87      	ldr	r3, [pc, #540]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fe4:	4a83      	ldr	r2, [pc, #524]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f002 0310 	and.w	r3, r2, #16
 8009ff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a000:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a004:	460b      	mov	r3, r1
 800a006:	4313      	orrs	r3, r2
 800a008:	d01e      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a00e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a016:	d10c      	bne.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01c:	3328      	adds	r3, #40	; 0x28
 800a01e:	2102      	movs	r1, #2
 800a020:	4618      	mov	r0, r3
 800a022:	f001 fcf7 	bl	800ba14 <RCCEx_PLL3_Config>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a032:	4b70      	ldr	r3, [pc, #448]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a036:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a042:	4a6c      	ldr	r2, [pc, #432]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a044:	430b      	orrs	r3, r1
 800a046:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a058:	2300      	movs	r3, #0
 800a05a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a05e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a062:	460b      	mov	r3, r1
 800a064:	4313      	orrs	r3, r2
 800a066:	d03e      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a074:	d022      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a07a:	d81b      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a084:	d00b      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a086:	e015      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a08c:	3308      	adds	r3, #8
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f001 fc0d 	bl	800b8b0 <RCCEx_PLL2_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a09c:	e00f      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a2:	3328      	adds	r3, #40	; 0x28
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 fcb4 	bl	800ba14 <RCCEx_PLL3_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a0b2:	e004      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0ba:	e000      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10b      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a0c6:	4b4b      	ldr	r3, [pc, #300]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a0d6:	4a47      	ldr	r2, [pc, #284]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	6593      	str	r3, [r2, #88]	; 0x58
 800a0dc:	e003      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a0f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a0f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4313      	orrs	r3, r2
 800a100:	d03b      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a10e:	d01f      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a110:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a114:	d818      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a11a:	d003      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a11c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a120:	d007      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a122:	e011      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a124:	4b33      	ldr	r3, [pc, #204]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4a32      	ldr	r2, [pc, #200]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a12a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a12e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a130:	e00f      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a136:	3328      	adds	r3, #40	; 0x28
 800a138:	2101      	movs	r1, #1
 800a13a:	4618      	mov	r0, r3
 800a13c:	f001 fc6a 	bl	800ba14 <RCCEx_PLL3_Config>
 800a140:	4603      	mov	r3, r0
 800a142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a146:	e004      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a14e:	e000      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a150:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10b      	bne.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a15a:	4b26      	ldr	r3, [pc, #152]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16a:	4a22      	ldr	r2, [pc, #136]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a16c:	430b      	orrs	r3, r1
 800a16e:	6553      	str	r3, [r2, #84]	; 0x54
 800a170:	e003      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a186:	673b      	str	r3, [r7, #112]	; 0x70
 800a188:	2300      	movs	r3, #0
 800a18a:	677b      	str	r3, [r7, #116]	; 0x74
 800a18c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a190:	460b      	mov	r3, r1
 800a192:	4313      	orrs	r3, r2
 800a194:	d034      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1a4:	d007      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a1a6:	e011      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a8:	4b12      	ldr	r3, [pc, #72]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	4a11      	ldr	r2, [pc, #68]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a1b4:	e00e      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	2102      	movs	r1, #2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f001 fb76 	bl	800b8b0 <RCCEx_PLL2_Config>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a1ca:	e003      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10d      	bne.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a1dc:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ea:	4a02      	ldr	r2, [pc, #8]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1f0:	e006      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a1f2:	bf00      	nop
 800a1f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a20c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a20e:	2300      	movs	r3, #0
 800a210:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a212:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a216:	460b      	mov	r3, r1
 800a218:	4313      	orrs	r3, r2
 800a21a:	d00c      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a220:	3328      	adds	r3, #40	; 0x28
 800a222:	2102      	movs	r1, #2
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fbf5 	bl	800ba14 <RCCEx_PLL3_Config>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a242:	663b      	str	r3, [r7, #96]	; 0x60
 800a244:	2300      	movs	r3, #0
 800a246:	667b      	str	r3, [r7, #100]	; 0x64
 800a248:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a24c:	460b      	mov	r3, r1
 800a24e:	4313      	orrs	r3, r2
 800a250:	d038      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a25a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a25e:	d018      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a264:	d811      	bhi.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a26a:	d014      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a270:	d80b      	bhi.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d011      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27a:	d106      	bne.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a27c:	4bc3      	ldr	r3, [pc, #780]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	4ac2      	ldr	r2, [pc, #776]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a288:	e008      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a290:	e004      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a292:	bf00      	nop
 800a294:	e002      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a296:	bf00      	nop
 800a298:	e000      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10b      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a2a4:	4bb9      	ldr	r3, [pc, #740]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2b4:	4ab5      	ldr	r2, [pc, #724]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	6553      	str	r3, [r2, #84]	; 0x54
 800a2ba:	e003      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a2d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	d009      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a2e0:	4baa      	ldr	r3, [pc, #680]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ee:	4aa7      	ldr	r2, [pc, #668]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a300:	653b      	str	r3, [r7, #80]	; 0x50
 800a302:	2300      	movs	r3, #0
 800a304:	657b      	str	r3, [r7, #84]	; 0x54
 800a306:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a30a:	460b      	mov	r3, r1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	d00a      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a310:	4b9e      	ldr	r3, [pc, #632]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a320:	4a9a      	ldr	r2, [pc, #616]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a322:	430b      	orrs	r3, r1
 800a324:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a332:	64bb      	str	r3, [r7, #72]	; 0x48
 800a334:	2300      	movs	r3, #0
 800a336:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a338:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a33c:	460b      	mov	r3, r1
 800a33e:	4313      	orrs	r3, r2
 800a340:	d009      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a342:	4b92      	ldr	r3, [pc, #584]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a346:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a350:	4a8e      	ldr	r2, [pc, #568]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a352:	430b      	orrs	r3, r1
 800a354:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a362:	643b      	str	r3, [r7, #64]	; 0x40
 800a364:	2300      	movs	r3, #0
 800a366:	647b      	str	r3, [r7, #68]	; 0x44
 800a368:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a36c:	460b      	mov	r3, r1
 800a36e:	4313      	orrs	r3, r2
 800a370:	d00e      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a372:	4b86      	ldr	r3, [pc, #536]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	4a85      	ldr	r2, [pc, #532]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a37c:	6113      	str	r3, [r2, #16]
 800a37e:	4b83      	ldr	r3, [pc, #524]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a380:	6919      	ldr	r1, [r3, #16]
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a386:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a38a:	4a80      	ldr	r2, [pc, #512]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a39c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	d009      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3ac:	4b77      	ldr	r3, [pc, #476]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ba:	4a74      	ldr	r2, [pc, #464]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a3cc:	633b      	str	r3, [r7, #48]	; 0x30
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	d00a      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a3dc:	4b6b      	ldr	r3, [pc, #428]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ec:	4a67      	ldr	r2, [pc, #412]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	62b9      	str	r1, [r7, #40]	; 0x28
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a404:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a408:	460b      	mov	r3, r1
 800a40a:	4313      	orrs	r3, r2
 800a40c:	d011      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a412:	3308      	adds	r3, #8
 800a414:	2100      	movs	r1, #0
 800a416:	4618      	mov	r0, r3
 800a418:	f001 fa4a 	bl	800b8b0 <RCCEx_PLL2_Config>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a42e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	2100      	movs	r1, #0
 800a43c:	6239      	str	r1, [r7, #32]
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
 800a444:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a448:	460b      	mov	r3, r1
 800a44a:	4313      	orrs	r3, r2
 800a44c:	d011      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a452:	3308      	adds	r3, #8
 800a454:	2101      	movs	r1, #1
 800a456:	4618      	mov	r0, r3
 800a458:	f001 fa2a 	bl	800b8b0 <RCCEx_PLL2_Config>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a46a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a46e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	2100      	movs	r1, #0
 800a47c:	61b9      	str	r1, [r7, #24]
 800a47e:	f003 0304 	and.w	r3, r3, #4
 800a482:	61fb      	str	r3, [r7, #28]
 800a484:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a488:	460b      	mov	r3, r1
 800a48a:	4313      	orrs	r3, r2
 800a48c:	d011      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a492:	3308      	adds	r3, #8
 800a494:	2102      	movs	r1, #2
 800a496:	4618      	mov	r0, r3
 800a498:	f001 fa0a 	bl	800b8b0 <RCCEx_PLL2_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a4a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	6139      	str	r1, [r7, #16]
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	d011      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d2:	3328      	adds	r3, #40	; 0x28
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f001 fa9c 	bl	800ba14 <RCCEx_PLL3_Config>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a508:	460b      	mov	r3, r1
 800a50a:	4313      	orrs	r3, r2
 800a50c:	d011      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a512:	3328      	adds	r3, #40	; 0x28
 800a514:	2101      	movs	r1, #1
 800a516:	4618      	mov	r0, r3
 800a518:	f001 fa7c 	bl	800ba14 <RCCEx_PLL3_Config>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a52a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a52e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	2100      	movs	r1, #0
 800a53c:	6039      	str	r1, [r7, #0]
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	607b      	str	r3, [r7, #4]
 800a544:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a548:	460b      	mov	r3, r1
 800a54a:	4313      	orrs	r3, r2
 800a54c:	d011      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a552:	3328      	adds	r3, #40	; 0x28
 800a554:	2102      	movs	r1, #2
 800a556:	4618      	mov	r0, r3
 800a558:	f001 fa5c 	bl	800ba14 <RCCEx_PLL3_Config>
 800a55c:	4603      	mov	r3, r0
 800a55e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a56e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a572:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	e000      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
}
 800a580:	4618      	mov	r0, r3
 800a582:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a586:	46bd      	mov	sp, r7
 800a588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a58c:	58024400 	.word	0x58024400

0800a590 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b090      	sub	sp, #64	; 0x40
 800a594:	af00      	add	r7, sp, #0
 800a596:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a59a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a59e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	f040 8094 	bne.w	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a5a8:	4b9e      	ldr	r3, [pc, #632]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ac:	f003 0307 	and.w	r3, r3, #7
 800a5b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	f200 8087 	bhi.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a5ba:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a5d5 	.word	0x0800a5d5
 800a5c4:	0800a5fd 	.word	0x0800a5fd
 800a5c8:	0800a625 	.word	0x0800a625
 800a5cc:	0800a6c1 	.word	0x0800a6c1
 800a5d0:	0800a64d 	.word	0x0800a64d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5d4:	4b93      	ldr	r3, [pc, #588]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e0:	d108      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f001 f810 	bl	800b60c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f0:	f000 bd45 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5f8:	f000 bd41 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5fc:	4b89      	ldr	r3, [pc, #548]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a608:	d108      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a60a:	f107 0318 	add.w	r3, r7, #24
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 fd54 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a618:	f000 bd31 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a620:	f000 bd2d 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a624:	4b7f      	ldr	r3, [pc, #508]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a62c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a630:	d108      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a632:	f107 030c 	add.w	r3, r7, #12
 800a636:	4618      	mov	r0, r3
 800a638:	f000 fe94 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a640:	f000 bd1d 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a648:	f000 bd19 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a64c:	4b75      	ldr	r3, [pc, #468]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a64e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a654:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a656:	4b73      	ldr	r3, [pc, #460]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d10c      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a664:	2b00      	cmp	r3, #0
 800a666:	d109      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a668:	4b6e      	ldr	r3, [pc, #440]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	08db      	lsrs	r3, r3, #3
 800a66e:	f003 0303 	and.w	r3, r3, #3
 800a672:	4a6d      	ldr	r2, [pc, #436]	; (800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a674:	fa22 f303 	lsr.w	r3, r2, r3
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67a:	e01f      	b.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a67c:	4b69      	ldr	r3, [pc, #420]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a688:	d106      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a690:	d102      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a692:	4b66      	ldr	r3, [pc, #408]	; (800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a696:	e011      	b.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a698:	4b62      	ldr	r3, [pc, #392]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6a4:	d106      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ac:	d102      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6ae:	4b60      	ldr	r3, [pc, #384]	; (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6b2:	e003      	b.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a6b8:	f000 bce1 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6bc:	f000 bcdf 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6c0:	4b5c      	ldr	r3, [pc, #368]	; (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c4:	f000 bcdb 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6cc:	f000 bcd7 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a6d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6d4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a6d8:	430b      	orrs	r3, r1
 800a6da:	f040 80ad 	bne.w	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a6de:	4b51      	ldr	r3, [pc, #324]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a6e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ee:	d056      	beq.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6f6:	f200 8090 	bhi.w	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	2bc0      	cmp	r3, #192	; 0xc0
 800a6fe:	f000 8088 	beq.w	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	2bc0      	cmp	r3, #192	; 0xc0
 800a706:	f200 8088 	bhi.w	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	2b80      	cmp	r3, #128	; 0x80
 800a70e:	d032      	beq.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	f200 8081 	bhi.w	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	2b40      	cmp	r3, #64	; 0x40
 800a722:	d014      	beq.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a724:	e079      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a726:	4b3f      	ldr	r3, [pc, #252]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a72e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a732:	d108      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 ff67 	bl	800b60c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a742:	f000 bc9c 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a74a:	f000 bc98 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a74e:	4b35      	ldr	r3, [pc, #212]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a75a:	d108      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a75c:	f107 0318 	add.w	r3, r7, #24
 800a760:	4618      	mov	r0, r3
 800a762:	f000 fcab 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a76a:	f000 bc88 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a772:	f000 bc84 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a776:	4b2b      	ldr	r3, [pc, #172]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a77e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a782:	d108      	bne.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a784:	f107 030c 	add.w	r3, r7, #12
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fdeb 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a792:	f000 bc74 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a79a:	f000 bc70 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a79e:	4b21      	ldr	r3, [pc, #132]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7a8:	4b1e      	ldr	r3, [pc, #120]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d10c      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7ba:	4b1a      	ldr	r3, [pc, #104]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	08db      	lsrs	r3, r3, #3
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	4a18      	ldr	r2, [pc, #96]	; (800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7cc:	e01f      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7ce:	4b15      	ldr	r3, [pc, #84]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7da:	d106      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7e2:	d102      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7e4:	4b11      	ldr	r3, [pc, #68]	; (800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7e8:	e011      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7ea:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7f6:	d106      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7fe:	d102      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a800:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a804:	e003      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a80a:	f000 bc38 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a80e:	f000 bc36 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a812:	4b08      	ldr	r3, [pc, #32]	; (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a816:	f000 bc32 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a81e:	f000 bc2e 	b.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a822:	bf00      	nop
 800a824:	58024400 	.word	0x58024400
 800a828:	03d09000 	.word	0x03d09000
 800a82c:	003d0900 	.word	0x003d0900
 800a830:	017d7840 	.word	0x017d7840
 800a834:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a83c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a840:	430b      	orrs	r3, r1
 800a842:	f040 809c 	bne.w	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a846:	4b9e      	ldr	r3, [pc, #632]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a84a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a84e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a856:	d054      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a85e:	f200 808b 	bhi.w	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a868:	f000 8083 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a872:	f200 8081 	bhi.w	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a87c:	d02f      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a884:	d878      	bhi.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a892:	d012      	beq.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a894:	e070      	b.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a896:	4b8a      	ldr	r3, [pc, #552]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a89e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8a2:	d107      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 feaf 	bl	800b60c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b2:	e3e4      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8b8:	e3e1      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ba:	4b81      	ldr	r3, [pc, #516]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8c6:	d107      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c8:	f107 0318 	add.w	r3, r7, #24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fbf5 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d6:	e3d2      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8dc:	e3cf      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8de:	4b78      	ldr	r3, [pc, #480]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ea:	d107      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ec:	f107 030c 	add.w	r3, r7, #12
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fd37 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fa:	e3c0      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a900:	e3bd      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a902:	4b6f      	ldr	r3, [pc, #444]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a90a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a90c:	4b6c      	ldr	r3, [pc, #432]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b04      	cmp	r3, #4
 800a916:	d10c      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d109      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a91e:	4b68      	ldr	r3, [pc, #416]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	08db      	lsrs	r3, r3, #3
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	4a66      	ldr	r2, [pc, #408]	; (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a92a:	fa22 f303 	lsr.w	r3, r2, r3
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a930:	e01e      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a932:	4b63      	ldr	r3, [pc, #396]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93e:	d106      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a946:	d102      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a948:	4b5f      	ldr	r3, [pc, #380]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a94c:	e010      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a94e:	4b5c      	ldr	r3, [pc, #368]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a95a:	d106      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a962:	d102      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a964:	4b59      	ldr	r3, [pc, #356]	; (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a968:	e002      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a96e:	e386      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a970:	e385      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a972:	4b57      	ldr	r3, [pc, #348]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a976:	e382      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a97c:	e37f      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a97e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a982:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a986:	430b      	orrs	r3, r1
 800a988:	f040 80a7 	bne.w	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a98c:	4b4c      	ldr	r3, [pc, #304]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a98e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a990:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a994:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99c:	d055      	beq.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9a4:	f200 8096 	bhi.w	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9ae:	f000 8084 	beq.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9b8:	f200 808c 	bhi.w	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9c2:	d030      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ca:	f200 8083 	bhi.w	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9da:	d012      	beq.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a9dc:	e07a      	b.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9de:	4b38      	ldr	r3, [pc, #224]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ea:	d107      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fe0b 	bl	800b60c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fa:	e340      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa00:	e33d      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa02:	4b2f      	ldr	r3, [pc, #188]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa0e:	d107      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa10:	f107 0318 	add.w	r3, r7, #24
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fb51 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1e:	e32e      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa24:	e32b      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa26:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa32:	d107      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa34:	f107 030c 	add.w	r3, r7, #12
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fc93 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa42:	e31c      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa48:	e319      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa4a:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa54:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d10c      	bne.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800aa60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d109      	bne.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa66:	4b16      	ldr	r3, [pc, #88]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	08db      	lsrs	r3, r3, #3
 800aa6c:	f003 0303 	and.w	r3, r3, #3
 800aa70:	4a14      	ldr	r2, [pc, #80]	; (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aa72:	fa22 f303 	lsr.w	r3, r2, r3
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa78:	e01e      	b.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa7a:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa86:	d106      	bne.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa8e:	d102      	bne.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa90:	4b0d      	ldr	r3, [pc, #52]	; (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa94:	e010      	b.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa96:	4b0a      	ldr	r3, [pc, #40]	; (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa2:	d106      	bne.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaaa:	d102      	bne.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaac:	4b07      	ldr	r3, [pc, #28]	; (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aaae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab0:	e002      	b.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aab6:	e2e2      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aab8:	e2e1      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aaba:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aabe:	e2de      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aac0:	58024400 	.word	0x58024400
 800aac4:	03d09000 	.word	0x03d09000
 800aac8:	003d0900 	.word	0x003d0900
 800aacc:	017d7840 	.word	0x017d7840
 800aad0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad8:	e2d1      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aade:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800aae2:	430b      	orrs	r3, r1
 800aae4:	f040 809c 	bne.w	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aae8:	4b93      	ldr	r3, [pc, #588]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aaf0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaf8:	d054      	beq.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab00:	f200 808b 	bhi.w	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab0a:	f000 8083 	beq.w	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab14:	f200 8081 	bhi.w	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1e:	d02f      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab26:	d878      	bhi.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d004      	beq.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab34:	d012      	beq.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ab36:	e070      	b.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab38:	4b7f      	ldr	r3, [pc, #508]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab44:	d107      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 fd5e 	bl	800b60c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab54:	e293      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5a:	e290      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab5c:	4b76      	ldr	r3, [pc, #472]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab68:	d107      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6a:	f107 0318 	add.w	r3, r7, #24
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 faa4 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab78:	e281      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab7e:	e27e      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab80:	4b6d      	ldr	r3, [pc, #436]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab8c:	d107      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab8e:	f107 030c 	add.w	r3, r7, #12
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fbe6 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9c:	e26f      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba2:	e26c      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aba4:	4b64      	ldr	r3, [pc, #400]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abae:	4b62      	ldr	r3, [pc, #392]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d10c      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc0:	4b5d      	ldr	r3, [pc, #372]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a5c      	ldr	r2, [pc, #368]	; (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd2:	e01e      	b.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abd4:	4b58      	ldr	r3, [pc, #352]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe0:	d106      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abe8:	d102      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abea:	4b55      	ldr	r3, [pc, #340]	; (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abee:	e010      	b.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abf0:	4b51      	ldr	r3, [pc, #324]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abfc:	d106      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac04:	d102      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac06:	4b4f      	ldr	r3, [pc, #316]	; (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac0a:	e002      	b.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac10:	e235      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac12:	e234      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac14:	4b4c      	ldr	r3, [pc, #304]	; (800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ac16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac18:	e231      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac1e:	e22e      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac24:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	f040 808f 	bne.w	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac2e:	4b42      	ldr	r3, [pc, #264]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac32:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ac36:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac3e:	d06b      	beq.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac46:	d874      	bhi.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac4e:	d056      	beq.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ac50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac56:	d86c      	bhi.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac5e:	d03b      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ac60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac66:	d864      	bhi.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac6e:	d021      	beq.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac76:	d85c      	bhi.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d004      	beq.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac84:	d004      	beq.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ac86:	e054      	b.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ac88:	f7fe fa0a 	bl	80090a0 <HAL_RCC_GetPCLK1Freq>
 800ac8c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac8e:	e1f6      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac90:	4b29      	ldr	r3, [pc, #164]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac9c:	d107      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9e:	f107 0318 	add.w	r3, r7, #24
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 fa0a 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acac:	e1e7      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb2:	e1e4      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acb4:	4b20      	ldr	r3, [pc, #128]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acc0:	d107      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fb4c 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd0:	e1d5      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd6:	e1d2      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acd8:	4b17      	ldr	r3, [pc, #92]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d109      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace4:	4b14      	ldr	r3, [pc, #80]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	08db      	lsrs	r3, r3, #3
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800acf0:	fa22 f303 	lsr.w	r3, r2, r3
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf6:	e1c2      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfc:	e1bf      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acfe:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad0a:	d102      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ad0c:	4b0c      	ldr	r3, [pc, #48]	; (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad10:	e1b5      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad16:	e1b2      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad18:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad24:	d102      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ad26:	4b07      	ldr	r3, [pc, #28]	; (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad2a:	e1a8      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad30:	e1a5      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad36:	e1a2      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad38:	58024400 	.word	0x58024400
 800ad3c:	03d09000 	.word	0x03d09000
 800ad40:	003d0900 	.word	0x003d0900
 800ad44:	017d7840 	.word	0x017d7840
 800ad48:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ad4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad50:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ad54:	430b      	orrs	r3, r1
 800ad56:	d173      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ad58:	4b9c      	ldr	r3, [pc, #624]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad68:	d02f      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad70:	d863      	bhi.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d004      	beq.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad7e:	d012      	beq.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ad80:	e05b      	b.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad82:	4b92      	ldr	r3, [pc, #584]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad8e:	d107      	bne.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad90:	f107 0318 	add.w	r3, r7, #24
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f991 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad9e:	e16e      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ada4:	e16b      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ada6:	4b89      	ldr	r3, [pc, #548]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb2:	d107      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb4:	f107 030c 	add.w	r3, r7, #12
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fad3 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc2:	e15c      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc8:	e159      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adca:	4b80      	ldr	r3, [pc, #512]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800add2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800add4:	4b7d      	ldr	r3, [pc, #500]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b04      	cmp	r3, #4
 800adde:	d10c      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ade0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ade6:	4b79      	ldr	r3, [pc, #484]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	08db      	lsrs	r3, r3, #3
 800adec:	f003 0303 	and.w	r3, r3, #3
 800adf0:	4a77      	ldr	r2, [pc, #476]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800adf2:	fa22 f303 	lsr.w	r3, r2, r3
 800adf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adf8:	e01e      	b.n	800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adfa:	4b74      	ldr	r3, [pc, #464]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae06:	d106      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ae08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae0e:	d102      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae10:	4b70      	ldr	r3, [pc, #448]	; (800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae14:	e010      	b.n	800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae16:	4b6d      	ldr	r3, [pc, #436]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae22:	d106      	bne.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ae24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2a:	d102      	bne.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae2c:	4b6a      	ldr	r3, [pc, #424]	; (800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae30:	e002      	b.n	800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae36:	e122      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae38:	e121      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae3e:	e11e      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae44:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	d133      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae4c:	4b5f      	ldr	r3, [pc, #380]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d004      	beq.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae62:	d012      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ae64:	e023      	b.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae66:	4b59      	ldr	r3, [pc, #356]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae72:	d107      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fbc7 	bl	800b60c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae82:	e0fc      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae88:	e0f9      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae8a:	4b50      	ldr	r3, [pc, #320]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae96:	d107      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae98:	f107 0318 	add.w	r3, r7, #24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 f90d 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea6:	e0ea      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeac:	e0e7      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb2:	e0e4      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aeb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800aebc:	430b      	orrs	r3, r1
 800aebe:	f040 808d 	bne.w	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aec2:	4b42      	ldr	r3, [pc, #264]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800aeca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aed2:	d06b      	beq.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeda:	d874      	bhi.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee2:	d056      	beq.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeea:	d86c      	bhi.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aef2:	d03b      	beq.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aefa:	d864      	bhi.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af02:	d021      	beq.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af0a:	d85c      	bhi.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af18:	d004      	beq.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800af1a:	e054      	b.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af1c:	f000 f8b8 	bl	800b090 <HAL_RCCEx_GetD3PCLK1Freq>
 800af20:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af22:	e0ac      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af24:	4b29      	ldr	r3, [pc, #164]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af30:	d107      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af32:	f107 0318 	add.w	r3, r7, #24
 800af36:	4618      	mov	r0, r3
 800af38:	f000 f8c0 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af40:	e09d      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af46:	e09a      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af48:	4b20      	ldr	r3, [pc, #128]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af54:	d107      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fa02 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af64:	e08b      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af6a:	e088      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af6c:	4b17      	ldr	r3, [pc, #92]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	2b04      	cmp	r3, #4
 800af76:	d109      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af78:	4b14      	ldr	r3, [pc, #80]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	08db      	lsrs	r3, r3, #3
 800af7e:	f003 0303 	and.w	r3, r3, #3
 800af82:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800af84:	fa22 f303 	lsr.w	r3, r2, r3
 800af88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af8a:	e078      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af90:	e075      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af92:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af9e:	d102      	bne.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afa4:	e06b      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afaa:	e068      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afac:	4b07      	ldr	r3, [pc, #28]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb8:	d102      	bne.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800afba:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800afbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afbe:	e05e      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc4:	e05b      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afca:	e058      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afcc:	58024400 	.word	0x58024400
 800afd0:	03d09000 	.word	0x03d09000
 800afd4:	003d0900 	.word	0x003d0900
 800afd8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800afdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800afe4:	430b      	orrs	r3, r1
 800afe6:	d148      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800afe8:	4b27      	ldr	r3, [pc, #156]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800afea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aff0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aff8:	d02a      	beq.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b000:	d838      	bhi.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	2b00      	cmp	r3, #0
 800b006:	d004      	beq.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b00e:	d00d      	beq.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b010:	e030      	b.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b012:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b01e:	d102      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b020:	4b1a      	ldr	r3, [pc, #104]	; (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b024:	e02b      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02a:	e028      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b02c:	4b16      	ldr	r3, [pc, #88]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b038:	d107      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b03a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fae4 	bl	800b60c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b048:	e019      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b04e:	e016      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b050:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b05c:	d107      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b05e:	f107 0318 	add.w	r3, r7, #24
 800b062:	4618      	mov	r0, r3
 800b064:	f000 f82a 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b06c:	e007      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b072:	e004      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b078:	e001      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b080:	4618      	mov	r0, r3
 800b082:	3740      	adds	r7, #64	; 0x40
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	58024400 	.word	0x58024400
 800b08c:	017d7840 	.word	0x017d7840

0800b090 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b094:	f7fd ffd4 	bl	8009040 <HAL_RCC_GetHCLKFreq>
 800b098:	4602      	mov	r2, r0
 800b09a:	4b06      	ldr	r3, [pc, #24]	; (800b0b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	091b      	lsrs	r3, r3, #4
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	4904      	ldr	r1, [pc, #16]	; (800b0b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b0a6:	5ccb      	ldrb	r3, [r1, r3]
 800b0a8:	f003 031f 	and.w	r3, r3, #31
 800b0ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	58024400 	.word	0x58024400
 800b0b8:	08014ad4 	.word	0x08014ad4

0800b0bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b089      	sub	sp, #36	; 0x24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0c4:	4ba1      	ldr	r3, [pc, #644]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c8:	f003 0303 	and.w	r3, r3, #3
 800b0cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b0ce:	4b9f      	ldr	r3, [pc, #636]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d2:	0b1b      	lsrs	r3, r3, #12
 800b0d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b0da:	4b9c      	ldr	r3, [pc, #624]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0de:	091b      	lsrs	r3, r3, #4
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b0e6:	4b99      	ldr	r3, [pc, #612]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ea:	08db      	lsrs	r3, r3, #3
 800b0ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	fb02 f303 	mul.w	r3, r2, r3
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 8111 	beq.w	800b32c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	f000 8083 	beq.w	800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2b02      	cmp	r3, #2
 800b116:	f200 80a1 	bhi.w	800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d056      	beq.n	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b126:	e099      	b.n	800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b128:	4b88      	ldr	r3, [pc, #544]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0320 	and.w	r3, r3, #32
 800b130:	2b00      	cmp	r3, #0
 800b132:	d02d      	beq.n	800b190 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b134:	4b85      	ldr	r3, [pc, #532]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	08db      	lsrs	r3, r3, #3
 800b13a:	f003 0303 	and.w	r3, r3, #3
 800b13e:	4a84      	ldr	r2, [pc, #528]	; (800b350 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b140:	fa22 f303 	lsr.w	r3, r2, r3
 800b144:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b15e:	4b7b      	ldr	r3, [pc, #492]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b172:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b18e:	e087      	b.n	800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	ee07 3a90 	vmov	s15, r3
 800b196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b358 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a2:	4b6a      	ldr	r3, [pc, #424]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1d2:	e065      	b.n	800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e6:	4b59      	ldr	r3, [pc, #356]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ee:	ee07 3a90 	vmov	s15, r3
 800b1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b216:	e043      	b.n	800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	ee07 3a90 	vmov	s15, r3
 800b21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b222:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22a:	4b48      	ldr	r3, [pc, #288]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b23e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b25a:	e021      	b.n	800b2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b266:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b26e:	4b37      	ldr	r3, [pc, #220]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b276:	ee07 3a90 	vmov	s15, r3
 800b27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b27e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b282:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b354 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b29a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b29e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b2a0:	4b2a      	ldr	r3, [pc, #168]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a4:	0a5b      	lsrs	r3, r3, #9
 800b2a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c6:	ee17 2a90 	vmov	r2, s15
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b2ce:	4b1f      	ldr	r3, [pc, #124]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	0c1b      	lsrs	r3, r3, #16
 800b2d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d8:	ee07 3a90 	vmov	s15, r3
 800b2dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f4:	ee17 2a90 	vmov	r2, s15
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b300:	0e1b      	lsrs	r3, r3, #24
 800b302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b312:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b316:	edd7 6a07 	vldr	s13, [r7, #28]
 800b31a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b31e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b322:	ee17 2a90 	vmov	r2, s15
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b32a:	e008      	b.n	800b33e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	609a      	str	r2, [r3, #8]
}
 800b33e:	bf00      	nop
 800b340:	3724      	adds	r7, #36	; 0x24
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	58024400 	.word	0x58024400
 800b350:	03d09000 	.word	0x03d09000
 800b354:	46000000 	.word	0x46000000
 800b358:	4c742400 	.word	0x4c742400
 800b35c:	4a742400 	.word	0x4a742400
 800b360:	4bbebc20 	.word	0x4bbebc20

0800b364 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b364:	b480      	push	{r7}
 800b366:	b089      	sub	sp, #36	; 0x24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b36c:	4ba1      	ldr	r3, [pc, #644]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b370:	f003 0303 	and.w	r3, r3, #3
 800b374:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b376:	4b9f      	ldr	r3, [pc, #636]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37a:	0d1b      	lsrs	r3, r3, #20
 800b37c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b380:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b382:	4b9c      	ldr	r3, [pc, #624]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b386:	0a1b      	lsrs	r3, r3, #8
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b38e:	4b99      	ldr	r3, [pc, #612]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b392:	08db      	lsrs	r3, r3, #3
 800b394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	fb02 f303 	mul.w	r3, r2, r3
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 8111 	beq.w	800b5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	f000 8083 	beq.w	800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	f200 80a1 	bhi.w	800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d003      	beq.n	800b3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d056      	beq.n	800b47c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b3ce:	e099      	b.n	800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3d0:	4b88      	ldr	r3, [pc, #544]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0320 	and.w	r3, r3, #32
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d02d      	beq.n	800b438 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3dc:	4b85      	ldr	r3, [pc, #532]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	08db      	lsrs	r3, r3, #3
 800b3e2:	f003 0303 	and.w	r3, r3, #3
 800b3e6:	4a84      	ldr	r2, [pc, #528]	; (800b5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b3e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	ee07 3a90 	vmov	s15, r3
 800b3f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b406:	4b7b      	ldr	r3, [pc, #492]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b416:	ed97 6a03 	vldr	s12, [r7, #12]
 800b41a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b5fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b432:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b436:	e087      	b.n	800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b600 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44a:	4b6a      	ldr	r3, [pc, #424]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b5fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b47a:	e065      	b.n	800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48e:	4b59      	ldr	r3, [pc, #356]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b5fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4be:	e043      	b.n	800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	ee07 3a90 	vmov	s15, r3
 800b4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d2:	4b48      	ldr	r3, [pc, #288]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b5fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b502:	e021      	b.n	800b548 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	ee07 3a90 	vmov	s15, r3
 800b50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b50e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b516:	4b37      	ldr	r3, [pc, #220]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b51e:	ee07 3a90 	vmov	s15, r3
 800b522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b526:	ed97 6a03 	vldr	s12, [r7, #12]
 800b52a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b5fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b546:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b548:	4b2a      	ldr	r3, [pc, #168]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54c:	0a5b      	lsrs	r3, r3, #9
 800b54e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b55e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b562:	edd7 6a07 	vldr	s13, [r7, #28]
 800b566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b56a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b56e:	ee17 2a90 	vmov	r2, s15
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b576:	4b1f      	ldr	r3, [pc, #124]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	0c1b      	lsrs	r3, r3, #16
 800b57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b590:	edd7 6a07 	vldr	s13, [r7, #28]
 800b594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b59c:	ee17 2a90 	vmov	r2, s15
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5a4:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a8:	0e1b      	lsrs	r3, r3, #24
 800b5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ca:	ee17 2a90 	vmov	r2, s15
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b5d2:	e008      	b.n	800b5e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	609a      	str	r2, [r3, #8]
}
 800b5e6:	bf00      	nop
 800b5e8:	3724      	adds	r7, #36	; 0x24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	58024400 	.word	0x58024400
 800b5f8:	03d09000 	.word	0x03d09000
 800b5fc:	46000000 	.word	0x46000000
 800b600:	4c742400 	.word	0x4c742400
 800b604:	4a742400 	.word	0x4a742400
 800b608:	4bbebc20 	.word	0x4bbebc20

0800b60c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b089      	sub	sp, #36	; 0x24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b614:	4ba0      	ldr	r3, [pc, #640]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b618:	f003 0303 	and.w	r3, r3, #3
 800b61c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b61e:	4b9e      	ldr	r3, [pc, #632]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b622:	091b      	lsrs	r3, r3, #4
 800b624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b628:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b62a:	4b9b      	ldr	r3, [pc, #620]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b634:	4b98      	ldr	r3, [pc, #608]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b638:	08db      	lsrs	r3, r3, #3
 800b63a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	fb02 f303 	mul.w	r3, r2, r3
 800b644:	ee07 3a90 	vmov	s15, r3
 800b648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 8111 	beq.w	800b87a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	f000 8083 	beq.w	800b766 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	2b02      	cmp	r3, #2
 800b664:	f200 80a1 	bhi.w	800b7aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d056      	beq.n	800b722 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b674:	e099      	b.n	800b7aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b676:	4b88      	ldr	r3, [pc, #544]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 0320 	and.w	r3, r3, #32
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d02d      	beq.n	800b6de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b682:	4b85      	ldr	r3, [pc, #532]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	08db      	lsrs	r3, r3, #3
 800b688:	f003 0303 	and.w	r3, r3, #3
 800b68c:	4a83      	ldr	r2, [pc, #524]	; (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b68e:	fa22 f303 	lsr.w	r3, r2, r3
 800b692:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	ee07 3a90 	vmov	s15, r3
 800b6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ac:	4b7a      	ldr	r3, [pc, #488]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b4:	ee07 3a90 	vmov	s15, r3
 800b6b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6dc:	e087      	b.n	800b7ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	ee07 3a90 	vmov	s15, r3
 800b6e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f0:	4b69      	ldr	r3, [pc, #420]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f8:	ee07 3a90 	vmov	s15, r3
 800b6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b700:	ed97 6a03 	vldr	s12, [r7, #12]
 800b704:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b70c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b71c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b720:	e065      	b.n	800b7ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	ee07 3a90 	vmov	s15, r3
 800b728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b734:	4b58      	ldr	r3, [pc, #352]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73c:	ee07 3a90 	vmov	s15, r3
 800b740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b744:	ed97 6a03 	vldr	s12, [r7, #12]
 800b748:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b74c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b760:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b764:	e043      	b.n	800b7ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	ee07 3a90 	vmov	s15, r3
 800b76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b770:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b778:	4b47      	ldr	r3, [pc, #284]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b780:	ee07 3a90 	vmov	s15, r3
 800b784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b788:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b79c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7a8:	e021      	b.n	800b7ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	ee07 3a90 	vmov	s15, r3
 800b7b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7bc:	4b36      	ldr	r3, [pc, #216]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c4:	ee07 3a90 	vmov	s15, r3
 800b7c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b7ee:	4b2a      	ldr	r3, [pc, #168]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f2:	0a5b      	lsrs	r3, r3, #9
 800b7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f8:	ee07 3a90 	vmov	s15, r3
 800b7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b804:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b808:	edd7 6a07 	vldr	s13, [r7, #28]
 800b80c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b814:	ee17 2a90 	vmov	r2, s15
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b81c:	4b1e      	ldr	r3, [pc, #120]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b820:	0c1b      	lsrs	r3, r3, #16
 800b822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b826:	ee07 3a90 	vmov	s15, r3
 800b82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b82e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b832:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b836:	edd7 6a07 	vldr	s13, [r7, #28]
 800b83a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b83e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b842:	ee17 2a90 	vmov	r2, s15
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b84a:	4b13      	ldr	r3, [pc, #76]	; (800b898 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84e:	0e1b      	lsrs	r3, r3, #24
 800b850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b854:	ee07 3a90 	vmov	s15, r3
 800b858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b860:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b864:	edd7 6a07 	vldr	s13, [r7, #28]
 800b868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b86c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b870:	ee17 2a90 	vmov	r2, s15
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b878:	e008      	b.n	800b88c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	609a      	str	r2, [r3, #8]
}
 800b88c:	bf00      	nop
 800b88e:	3724      	adds	r7, #36	; 0x24
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	58024400 	.word	0x58024400
 800b89c:	03d09000 	.word	0x03d09000
 800b8a0:	46000000 	.word	0x46000000
 800b8a4:	4c742400 	.word	0x4c742400
 800b8a8:	4a742400 	.word	0x4a742400
 800b8ac:	4bbebc20 	.word	0x4bbebc20

0800b8b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8be:	4b53      	ldr	r3, [pc, #332]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c2:	f003 0303 	and.w	r3, r3, #3
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d101      	bne.n	800b8ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e099      	b.n	800ba02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b8ce:	4b4f      	ldr	r3, [pc, #316]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a4e      	ldr	r2, [pc, #312]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b8d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b8d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8da:	f7f7 f98b 	bl	8002bf4 <HAL_GetTick>
 800b8de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8e0:	e008      	b.n	800b8f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8e2:	f7f7 f987 	bl	8002bf4 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d901      	bls.n	800b8f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	e086      	b.n	800ba02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8f4:	4b45      	ldr	r3, [pc, #276]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1f0      	bne.n	800b8e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b900:	4b42      	ldr	r3, [pc, #264]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b904:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	031b      	lsls	r3, r3, #12
 800b90e:	493f      	ldr	r1, [pc, #252]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b910:	4313      	orrs	r3, r2
 800b912:	628b      	str	r3, [r1, #40]	; 0x28
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	3b01      	subs	r3, #1
 800b91a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	3b01      	subs	r3, #1
 800b924:	025b      	lsls	r3, r3, #9
 800b926:	b29b      	uxth	r3, r3
 800b928:	431a      	orrs	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	3b01      	subs	r3, #1
 800b930:	041b      	lsls	r3, r3, #16
 800b932:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b936:	431a      	orrs	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	061b      	lsls	r3, r3, #24
 800b940:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b944:	4931      	ldr	r1, [pc, #196]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b946:	4313      	orrs	r3, r2
 800b948:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b94a:	4b30      	ldr	r3, [pc, #192]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	492d      	ldr	r1, [pc, #180]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b95c:	4b2b      	ldr	r3, [pc, #172]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	f023 0220 	bic.w	r2, r3, #32
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	4928      	ldr	r1, [pc, #160]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b96e:	4b27      	ldr	r3, [pc, #156]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b972:	4a26      	ldr	r2, [pc, #152]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b974:	f023 0310 	bic.w	r3, r3, #16
 800b978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b97a:	4b24      	ldr	r3, [pc, #144]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b97c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b97e:	4b24      	ldr	r3, [pc, #144]	; (800ba10 <RCCEx_PLL2_Config+0x160>)
 800b980:	4013      	ands	r3, r2
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	69d2      	ldr	r2, [r2, #28]
 800b986:	00d2      	lsls	r2, r2, #3
 800b988:	4920      	ldr	r1, [pc, #128]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b98e:	4b1f      	ldr	r3, [pc, #124]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b992:	4a1e      	ldr	r2, [pc, #120]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b994:	f043 0310 	orr.w	r3, r3, #16
 800b998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d106      	bne.n	800b9ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9a0:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	4a19      	ldr	r2, [pc, #100]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9ac:	e00f      	b.n	800b9ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d106      	bne.n	800b9c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b9b4:	4b15      	ldr	r3, [pc, #84]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	4a14      	ldr	r2, [pc, #80]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9c0:	e005      	b.n	800b9ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c6:	4a11      	ldr	r2, [pc, #68]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a0e      	ldr	r2, [pc, #56]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9da:	f7f7 f90b 	bl	8002bf4 <HAL_GetTick>
 800b9de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9e0:	e008      	b.n	800b9f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9e2:	f7f7 f907 	bl	8002bf4 <HAL_GetTick>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d901      	bls.n	800b9f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e006      	b.n	800ba02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <RCCEx_PLL2_Config+0x15c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0f0      	beq.n	800b9e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	58024400 	.word	0x58024400
 800ba10:	ffff0007 	.word	0xffff0007

0800ba14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba22:	4b53      	ldr	r3, [pc, #332]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d101      	bne.n	800ba32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e099      	b.n	800bb66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba32:	4b4f      	ldr	r3, [pc, #316]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a4e      	ldr	r2, [pc, #312]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800ba38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba3e:	f7f7 f8d9 	bl	8002bf4 <HAL_GetTick>
 800ba42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba44:	e008      	b.n	800ba58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba46:	f7f7 f8d5 	bl	8002bf4 <HAL_GetTick>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d901      	bls.n	800ba58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e086      	b.n	800bb66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba58:	4b45      	ldr	r3, [pc, #276]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1f0      	bne.n	800ba46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ba64:	4b42      	ldr	r3, [pc, #264]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	051b      	lsls	r3, r3, #20
 800ba72:	493f      	ldr	r1, [pc, #252]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800ba74:	4313      	orrs	r3, r2
 800ba76:	628b      	str	r3, [r1, #40]	; 0x28
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	025b      	lsls	r3, r3, #9
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	061b      	lsls	r3, r3, #24
 800baa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800baa8:	4931      	ldr	r1, [pc, #196]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800baae:	4b30      	ldr	r3, [pc, #192]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	492d      	ldr	r1, [pc, #180]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800babc:	4313      	orrs	r3, r2
 800babe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bac0:	4b2b      	ldr	r3, [pc, #172]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	4928      	ldr	r1, [pc, #160]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bad2:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	4a26      	ldr	r2, [pc, #152]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800badc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bade:	4b24      	ldr	r3, [pc, #144]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bae2:	4b24      	ldr	r3, [pc, #144]	; (800bb74 <RCCEx_PLL3_Config+0x160>)
 800bae4:	4013      	ands	r3, r2
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	69d2      	ldr	r2, [r2, #28]
 800baea:	00d2      	lsls	r2, r2, #3
 800baec:	4920      	ldr	r1, [pc, #128]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800baee:	4313      	orrs	r3, r2
 800baf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800baf2:	4b1f      	ldr	r3, [pc, #124]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800baf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf6:	4a1e      	ldr	r2, [pc, #120]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800baf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bafc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d106      	bne.n	800bb12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb04:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb08:	4a19      	ldr	r2, [pc, #100]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bb0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb10:	e00f      	b.n	800bb32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d106      	bne.n	800bb26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb18:	4b15      	ldr	r3, [pc, #84]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	4a14      	ldr	r2, [pc, #80]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb24:	e005      	b.n	800bb32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bb26:	4b12      	ldr	r3, [pc, #72]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	4a11      	ldr	r2, [pc, #68]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bb32:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a0e      	ldr	r2, [pc, #56]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb3e:	f7f7 f859 	bl	8002bf4 <HAL_GetTick>
 800bb42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb44:	e008      	b.n	800bb58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb46:	f7f7 f855 	bl	8002bf4 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d901      	bls.n	800bb58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e006      	b.n	800bb66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <RCCEx_PLL3_Config+0x15c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d0f0      	beq.n	800bb46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	58024400 	.word	0x58024400
 800bb74:	ffff0007 	.word	0xffff0007

0800bb78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e10f      	b.n	800bdaa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a87      	ldr	r2, [pc, #540]	; (800bdb4 <HAL_SPI_Init+0x23c>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d00f      	beq.n	800bbba <HAL_SPI_Init+0x42>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a86      	ldr	r2, [pc, #536]	; (800bdb8 <HAL_SPI_Init+0x240>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d00a      	beq.n	800bbba <HAL_SPI_Init+0x42>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a84      	ldr	r2, [pc, #528]	; (800bdbc <HAL_SPI_Init+0x244>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d005      	beq.n	800bbba <HAL_SPI_Init+0x42>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	2b0f      	cmp	r3, #15
 800bbb4:	d901      	bls.n	800bbba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e0f7      	b.n	800bdaa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f900 	bl	800bdc0 <SPI_GetPacketSize>
 800bbc0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a7b      	ldr	r2, [pc, #492]	; (800bdb4 <HAL_SPI_Init+0x23c>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d00c      	beq.n	800bbe6 <HAL_SPI_Init+0x6e>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a79      	ldr	r2, [pc, #484]	; (800bdb8 <HAL_SPI_Init+0x240>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d007      	beq.n	800bbe6 <HAL_SPI_Init+0x6e>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a78      	ldr	r2, [pc, #480]	; (800bdbc <HAL_SPI_Init+0x244>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d002      	beq.n	800bbe6 <HAL_SPI_Init+0x6e>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b08      	cmp	r3, #8
 800bbe4:	d811      	bhi.n	800bc0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bbea:	4a72      	ldr	r2, [pc, #456]	; (800bdb4 <HAL_SPI_Init+0x23c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d009      	beq.n	800bc04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a70      	ldr	r2, [pc, #448]	; (800bdb8 <HAL_SPI_Init+0x240>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d004      	beq.n	800bc04 <HAL_SPI_Init+0x8c>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a6f      	ldr	r2, [pc, #444]	; (800bdbc <HAL_SPI_Init+0x244>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d104      	bne.n	800bc0e <HAL_SPI_Init+0x96>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b10      	cmp	r3, #16
 800bc08:	d901      	bls.n	800bc0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e0cd      	b.n	800bdaa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7f6 fb64 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f022 0201 	bic.w	r2, r2, #1
 800bc3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bc4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc54:	d119      	bne.n	800bc8a <HAL_SPI_Init+0x112>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc5e:	d103      	bne.n	800bc68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d008      	beq.n	800bc7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10c      	bne.n	800bc8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc78:	d107      	bne.n	800bc8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00f      	beq.n	800bcb6 <HAL_SPI_Init+0x13e>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	2b06      	cmp	r3, #6
 800bc9c:	d90b      	bls.n	800bcb6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	430a      	orrs	r2, r1
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	e007      	b.n	800bcc6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	69da      	ldr	r2, [r3, #28]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcce:	431a      	orrs	r2, r3
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd8:	ea42 0103 	orr.w	r1, r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68da      	ldr	r2, [r3, #12]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	430a      	orrs	r2, r1
 800bce6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	431a      	orrs	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	431a      	orrs	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	431a      	orrs	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd26:	ea42 0103 	orr.w	r1, r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d113      	bne.n	800bd66 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0201 	bic.w	r2, r2, #1
 800bd74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	40013000 	.word	0x40013000
 800bdb8:	40003800 	.word	0x40003800
 800bdbc:	40003c00 	.word	0x40003c00

0800bdc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdcc:	095b      	lsrs	r3, r3, #5
 800bdce:	3301      	adds	r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	3307      	adds	r3, #7
 800bdde:	08db      	lsrs	r3, r3, #3
 800bde0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	fb02 f303 	mul.w	r3, r2, r3
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	e049      	b.n	800be9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d106      	bne.n	800be22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7f6 facf 	bl	80023c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2202      	movs	r2, #2
 800be26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f000 ff41 	bl	800ccbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d001      	beq.n	800bebc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e04c      	b.n	800bf56 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2202      	movs	r2, #2
 800bec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a26      	ldr	r2, [pc, #152]	; (800bf64 <HAL_TIM_Base_Start+0xc0>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d022      	beq.n	800bf14 <HAL_TIM_Base_Start+0x70>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bed6:	d01d      	beq.n	800bf14 <HAL_TIM_Base_Start+0x70>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a22      	ldr	r2, [pc, #136]	; (800bf68 <HAL_TIM_Base_Start+0xc4>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d018      	beq.n	800bf14 <HAL_TIM_Base_Start+0x70>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a21      	ldr	r2, [pc, #132]	; (800bf6c <HAL_TIM_Base_Start+0xc8>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d013      	beq.n	800bf14 <HAL_TIM_Base_Start+0x70>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a1f      	ldr	r2, [pc, #124]	; (800bf70 <HAL_TIM_Base_Start+0xcc>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d00e      	beq.n	800bf14 <HAL_TIM_Base_Start+0x70>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a1e      	ldr	r2, [pc, #120]	; (800bf74 <HAL_TIM_Base_Start+0xd0>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d009      	beq.n	800bf14 <HAL_TIM_Base_Start+0x70>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a1c      	ldr	r2, [pc, #112]	; (800bf78 <HAL_TIM_Base_Start+0xd4>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d004      	beq.n	800bf14 <HAL_TIM_Base_Start+0x70>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a1b      	ldr	r2, [pc, #108]	; (800bf7c <HAL_TIM_Base_Start+0xd8>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d115      	bne.n	800bf40 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689a      	ldr	r2, [r3, #8]
 800bf1a:	4b19      	ldr	r3, [pc, #100]	; (800bf80 <HAL_TIM_Base_Start+0xdc>)
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b06      	cmp	r3, #6
 800bf24:	d015      	beq.n	800bf52 <HAL_TIM_Base_Start+0xae>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2c:	d011      	beq.n	800bf52 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f042 0201 	orr.w	r2, r2, #1
 800bf3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf3e:	e008      	b.n	800bf52 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f042 0201 	orr.w	r2, r2, #1
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	e000      	b.n	800bf54 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	40010000 	.word	0x40010000
 800bf68:	40000400 	.word	0x40000400
 800bf6c:	40000800 	.word	0x40000800
 800bf70:	40000c00 	.word	0x40000c00
 800bf74:	40010400 	.word	0x40010400
 800bf78:	40001800 	.word	0x40001800
 800bf7c:	40014000 	.word	0x40014000
 800bf80:	00010007 	.word	0x00010007

0800bf84 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6a1a      	ldr	r2, [r3, #32]
 800bf92:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf96:	4013      	ands	r3, r2
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10f      	bne.n	800bfbc <HAL_TIM_Base_Stop+0x38>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6a1a      	ldr	r2, [r3, #32]
 800bfa2:	f240 4344 	movw	r3, #1092	; 0x444
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d107      	bne.n	800bfbc <HAL_TIM_Base_Stop+0x38>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f022 0201 	bic.w	r2, r2, #1
 800bfba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d001      	beq.n	800bfec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e054      	b.n	800c096 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2202      	movs	r2, #2
 800bff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68da      	ldr	r2, [r3, #12]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f042 0201 	orr.w	r2, r2, #1
 800c002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a26      	ldr	r2, [pc, #152]	; (800c0a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d022      	beq.n	800c054 <HAL_TIM_Base_Start_IT+0x80>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c016:	d01d      	beq.n	800c054 <HAL_TIM_Base_Start_IT+0x80>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a22      	ldr	r2, [pc, #136]	; (800c0a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d018      	beq.n	800c054 <HAL_TIM_Base_Start_IT+0x80>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a21      	ldr	r2, [pc, #132]	; (800c0ac <HAL_TIM_Base_Start_IT+0xd8>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d013      	beq.n	800c054 <HAL_TIM_Base_Start_IT+0x80>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a1f      	ldr	r2, [pc, #124]	; (800c0b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d00e      	beq.n	800c054 <HAL_TIM_Base_Start_IT+0x80>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a1e      	ldr	r2, [pc, #120]	; (800c0b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d009      	beq.n	800c054 <HAL_TIM_Base_Start_IT+0x80>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a1c      	ldr	r2, [pc, #112]	; (800c0b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d004      	beq.n	800c054 <HAL_TIM_Base_Start_IT+0x80>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a1b      	ldr	r2, [pc, #108]	; (800c0bc <HAL_TIM_Base_Start_IT+0xe8>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d115      	bne.n	800c080 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689a      	ldr	r2, [r3, #8]
 800c05a:	4b19      	ldr	r3, [pc, #100]	; (800c0c0 <HAL_TIM_Base_Start_IT+0xec>)
 800c05c:	4013      	ands	r3, r2
 800c05e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2b06      	cmp	r3, #6
 800c064:	d015      	beq.n	800c092 <HAL_TIM_Base_Start_IT+0xbe>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06c:	d011      	beq.n	800c092 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f042 0201 	orr.w	r2, r2, #1
 800c07c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c07e:	e008      	b.n	800c092 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0201 	orr.w	r2, r2, #1
 800c08e:	601a      	str	r2, [r3, #0]
 800c090:	e000      	b.n	800c094 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	40010000 	.word	0x40010000
 800c0a8:	40000400 	.word	0x40000400
 800c0ac:	40000800 	.word	0x40000800
 800c0b0:	40000c00 	.word	0x40000c00
 800c0b4:	40010400 	.word	0x40010400
 800c0b8:	40001800 	.word	0x40001800
 800c0bc:	40014000 	.word	0x40014000
 800c0c0:	00010007 	.word	0x00010007

0800c0c4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d109      	bne.n	800c0ec <HAL_TIM_OC_Start_IT+0x28>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	bf14      	ite	ne
 800c0e4:	2301      	movne	r3, #1
 800c0e6:	2300      	moveq	r3, #0
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	e03c      	b.n	800c166 <HAL_TIM_OC_Start_IT+0xa2>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	d109      	bne.n	800c106 <HAL_TIM_OC_Start_IT+0x42>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	bf14      	ite	ne
 800c0fe:	2301      	movne	r3, #1
 800c100:	2300      	moveq	r3, #0
 800c102:	b2db      	uxtb	r3, r3
 800c104:	e02f      	b.n	800c166 <HAL_TIM_OC_Start_IT+0xa2>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	2b08      	cmp	r3, #8
 800c10a:	d109      	bne.n	800c120 <HAL_TIM_OC_Start_IT+0x5c>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b01      	cmp	r3, #1
 800c116:	bf14      	ite	ne
 800c118:	2301      	movne	r3, #1
 800c11a:	2300      	moveq	r3, #0
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	e022      	b.n	800c166 <HAL_TIM_OC_Start_IT+0xa2>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b0c      	cmp	r3, #12
 800c124:	d109      	bne.n	800c13a <HAL_TIM_OC_Start_IT+0x76>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b01      	cmp	r3, #1
 800c130:	bf14      	ite	ne
 800c132:	2301      	movne	r3, #1
 800c134:	2300      	moveq	r3, #0
 800c136:	b2db      	uxtb	r3, r3
 800c138:	e015      	b.n	800c166 <HAL_TIM_OC_Start_IT+0xa2>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b10      	cmp	r3, #16
 800c13e:	d109      	bne.n	800c154 <HAL_TIM_OC_Start_IT+0x90>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b01      	cmp	r3, #1
 800c14a:	bf14      	ite	ne
 800c14c:	2301      	movne	r3, #1
 800c14e:	2300      	moveq	r3, #0
 800c150:	b2db      	uxtb	r3, r3
 800c152:	e008      	b.n	800c166 <HAL_TIM_OC_Start_IT+0xa2>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	bf14      	ite	ne
 800c160:	2301      	movne	r3, #1
 800c162:	2300      	moveq	r3, #0
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e0ec      	b.n	800c348 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d104      	bne.n	800c17e <HAL_TIM_OC_Start_IT+0xba>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c17c:	e023      	b.n	800c1c6 <HAL_TIM_OC_Start_IT+0x102>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b04      	cmp	r3, #4
 800c182:	d104      	bne.n	800c18e <HAL_TIM_OC_Start_IT+0xca>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2202      	movs	r2, #2
 800c188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c18c:	e01b      	b.n	800c1c6 <HAL_TIM_OC_Start_IT+0x102>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b08      	cmp	r3, #8
 800c192:	d104      	bne.n	800c19e <HAL_TIM_OC_Start_IT+0xda>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2202      	movs	r2, #2
 800c198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c19c:	e013      	b.n	800c1c6 <HAL_TIM_OC_Start_IT+0x102>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b0c      	cmp	r3, #12
 800c1a2:	d104      	bne.n	800c1ae <HAL_TIM_OC_Start_IT+0xea>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1ac:	e00b      	b.n	800c1c6 <HAL_TIM_OC_Start_IT+0x102>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b10      	cmp	r3, #16
 800c1b2:	d104      	bne.n	800c1be <HAL_TIM_OC_Start_IT+0xfa>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1bc:	e003      	b.n	800c1c6 <HAL_TIM_OC_Start_IT+0x102>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b0c      	cmp	r3, #12
 800c1ca:	d841      	bhi.n	800c250 <HAL_TIM_OC_Start_IT+0x18c>
 800c1cc:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <HAL_TIM_OC_Start_IT+0x110>)
 800c1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d2:	bf00      	nop
 800c1d4:	0800c209 	.word	0x0800c209
 800c1d8:	0800c251 	.word	0x0800c251
 800c1dc:	0800c251 	.word	0x0800c251
 800c1e0:	0800c251 	.word	0x0800c251
 800c1e4:	0800c21b 	.word	0x0800c21b
 800c1e8:	0800c251 	.word	0x0800c251
 800c1ec:	0800c251 	.word	0x0800c251
 800c1f0:	0800c251 	.word	0x0800c251
 800c1f4:	0800c22d 	.word	0x0800c22d
 800c1f8:	0800c251 	.word	0x0800c251
 800c1fc:	0800c251 	.word	0x0800c251
 800c200:	0800c251 	.word	0x0800c251
 800c204:	0800c23f 	.word	0x0800c23f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68da      	ldr	r2, [r3, #12]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f042 0202 	orr.w	r2, r2, #2
 800c216:	60da      	str	r2, [r3, #12]
      break;
 800c218:	e01d      	b.n	800c256 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68da      	ldr	r2, [r3, #12]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f042 0204 	orr.w	r2, r2, #4
 800c228:	60da      	str	r2, [r3, #12]
      break;
 800c22a:	e014      	b.n	800c256 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68da      	ldr	r2, [r3, #12]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 0208 	orr.w	r2, r2, #8
 800c23a:	60da      	str	r2, [r3, #12]
      break;
 800c23c:	e00b      	b.n	800c256 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68da      	ldr	r2, [r3, #12]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f042 0210 	orr.w	r2, r2, #16
 800c24c:	60da      	str	r2, [r3, #12]
      break;
 800c24e:	e002      	b.n	800c256 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	73fb      	strb	r3, [r7, #15]
      break;
 800c254:	bf00      	nop
  }

  if (status == HAL_OK)
 800c256:	7bfb      	ldrb	r3, [r7, #15]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d174      	bne.n	800c346 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2201      	movs	r2, #1
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	4618      	mov	r0, r3
 800c266:	f001 f943 	bl	800d4f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a38      	ldr	r2, [pc, #224]	; (800c350 <HAL_TIM_OC_Start_IT+0x28c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d013      	beq.n	800c29c <HAL_TIM_OC_Start_IT+0x1d8>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a36      	ldr	r2, [pc, #216]	; (800c354 <HAL_TIM_OC_Start_IT+0x290>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d00e      	beq.n	800c29c <HAL_TIM_OC_Start_IT+0x1d8>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a35      	ldr	r2, [pc, #212]	; (800c358 <HAL_TIM_OC_Start_IT+0x294>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d009      	beq.n	800c29c <HAL_TIM_OC_Start_IT+0x1d8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a33      	ldr	r2, [pc, #204]	; (800c35c <HAL_TIM_OC_Start_IT+0x298>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d004      	beq.n	800c29c <HAL_TIM_OC_Start_IT+0x1d8>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a32      	ldr	r2, [pc, #200]	; (800c360 <HAL_TIM_OC_Start_IT+0x29c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d101      	bne.n	800c2a0 <HAL_TIM_OC_Start_IT+0x1dc>
 800c29c:	2301      	movs	r3, #1
 800c29e:	e000      	b.n	800c2a2 <HAL_TIM_OC_Start_IT+0x1de>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d007      	beq.n	800c2b6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a25      	ldr	r2, [pc, #148]	; (800c350 <HAL_TIM_OC_Start_IT+0x28c>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d022      	beq.n	800c306 <HAL_TIM_OC_Start_IT+0x242>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2c8:	d01d      	beq.n	800c306 <HAL_TIM_OC_Start_IT+0x242>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a25      	ldr	r2, [pc, #148]	; (800c364 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d018      	beq.n	800c306 <HAL_TIM_OC_Start_IT+0x242>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a23      	ldr	r2, [pc, #140]	; (800c368 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d013      	beq.n	800c306 <HAL_TIM_OC_Start_IT+0x242>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a22      	ldr	r2, [pc, #136]	; (800c36c <HAL_TIM_OC_Start_IT+0x2a8>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d00e      	beq.n	800c306 <HAL_TIM_OC_Start_IT+0x242>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a19      	ldr	r2, [pc, #100]	; (800c354 <HAL_TIM_OC_Start_IT+0x290>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d009      	beq.n	800c306 <HAL_TIM_OC_Start_IT+0x242>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a1e      	ldr	r2, [pc, #120]	; (800c370 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d004      	beq.n	800c306 <HAL_TIM_OC_Start_IT+0x242>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a15      	ldr	r2, [pc, #84]	; (800c358 <HAL_TIM_OC_Start_IT+0x294>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d115      	bne.n	800c332 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	689a      	ldr	r2, [r3, #8]
 800c30c:	4b19      	ldr	r3, [pc, #100]	; (800c374 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c30e:	4013      	ands	r3, r2
 800c310:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b06      	cmp	r3, #6
 800c316:	d015      	beq.n	800c344 <HAL_TIM_OC_Start_IT+0x280>
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c31e:	d011      	beq.n	800c344 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f042 0201 	orr.w	r2, r2, #1
 800c32e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c330:	e008      	b.n	800c344 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f042 0201 	orr.w	r2, r2, #1
 800c340:	601a      	str	r2, [r3, #0]
 800c342:	e000      	b.n	800c346 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c344:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c346:	7bfb      	ldrb	r3, [r7, #15]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	40010000 	.word	0x40010000
 800c354:	40010400 	.word	0x40010400
 800c358:	40014000 	.word	0x40014000
 800c35c:	40014400 	.word	0x40014400
 800c360:	40014800 	.word	0x40014800
 800c364:	40000400 	.word	0x40000400
 800c368:	40000800 	.word	0x40000800
 800c36c:	40000c00 	.word	0x40000c00
 800c370:	40001800 	.word	0x40001800
 800c374:	00010007 	.word	0x00010007

0800c378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e049      	b.n	800c41e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d106      	bne.n	800c3a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f841 	bl	800c426 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	f000 fc80 	bl	800ccbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c426:	b480      	push	{r7}
 800c428:	b083      	sub	sp, #12
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c42e:	bf00      	nop
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
	...

0800c43c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d109      	bne.n	800c460 <HAL_TIM_PWM_Start+0x24>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b01      	cmp	r3, #1
 800c456:	bf14      	ite	ne
 800c458:	2301      	movne	r3, #1
 800c45a:	2300      	moveq	r3, #0
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	e03c      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b04      	cmp	r3, #4
 800c464:	d109      	bne.n	800c47a <HAL_TIM_PWM_Start+0x3e>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b01      	cmp	r3, #1
 800c470:	bf14      	ite	ne
 800c472:	2301      	movne	r3, #1
 800c474:	2300      	moveq	r3, #0
 800c476:	b2db      	uxtb	r3, r3
 800c478:	e02f      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d109      	bne.n	800c494 <HAL_TIM_PWM_Start+0x58>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b01      	cmp	r3, #1
 800c48a:	bf14      	ite	ne
 800c48c:	2301      	movne	r3, #1
 800c48e:	2300      	moveq	r3, #0
 800c490:	b2db      	uxtb	r3, r3
 800c492:	e022      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b0c      	cmp	r3, #12
 800c498:	d109      	bne.n	800c4ae <HAL_TIM_PWM_Start+0x72>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	bf14      	ite	ne
 800c4a6:	2301      	movne	r3, #1
 800c4a8:	2300      	moveq	r3, #0
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	e015      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b10      	cmp	r3, #16
 800c4b2:	d109      	bne.n	800c4c8 <HAL_TIM_PWM_Start+0x8c>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	bf14      	ite	ne
 800c4c0:	2301      	movne	r3, #1
 800c4c2:	2300      	moveq	r3, #0
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	e008      	b.n	800c4da <HAL_TIM_PWM_Start+0x9e>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	bf14      	ite	ne
 800c4d4:	2301      	movne	r3, #1
 800c4d6:	2300      	moveq	r3, #0
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e0a1      	b.n	800c626 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <HAL_TIM_PWM_Start+0xb6>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4f0:	e023      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b04      	cmp	r3, #4
 800c4f6:	d104      	bne.n	800c502 <HAL_TIM_PWM_Start+0xc6>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c500:	e01b      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b08      	cmp	r3, #8
 800c506:	d104      	bne.n	800c512 <HAL_TIM_PWM_Start+0xd6>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2202      	movs	r2, #2
 800c50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c510:	e013      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b0c      	cmp	r3, #12
 800c516:	d104      	bne.n	800c522 <HAL_TIM_PWM_Start+0xe6>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2202      	movs	r2, #2
 800c51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c520:	e00b      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b10      	cmp	r3, #16
 800c526:	d104      	bne.n	800c532 <HAL_TIM_PWM_Start+0xf6>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c530:	e003      	b.n	800c53a <HAL_TIM_PWM_Start+0xfe>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2202      	movs	r2, #2
 800c536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2201      	movs	r2, #1
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	4618      	mov	r0, r3
 800c544:	f000 ffd4 	bl	800d4f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a38      	ldr	r2, [pc, #224]	; (800c630 <HAL_TIM_PWM_Start+0x1f4>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d013      	beq.n	800c57a <HAL_TIM_PWM_Start+0x13e>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a37      	ldr	r2, [pc, #220]	; (800c634 <HAL_TIM_PWM_Start+0x1f8>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00e      	beq.n	800c57a <HAL_TIM_PWM_Start+0x13e>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a35      	ldr	r2, [pc, #212]	; (800c638 <HAL_TIM_PWM_Start+0x1fc>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d009      	beq.n	800c57a <HAL_TIM_PWM_Start+0x13e>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a34      	ldr	r2, [pc, #208]	; (800c63c <HAL_TIM_PWM_Start+0x200>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d004      	beq.n	800c57a <HAL_TIM_PWM_Start+0x13e>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a32      	ldr	r2, [pc, #200]	; (800c640 <HAL_TIM_PWM_Start+0x204>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d101      	bne.n	800c57e <HAL_TIM_PWM_Start+0x142>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <HAL_TIM_PWM_Start+0x144>
 800c57e:	2300      	movs	r3, #0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d007      	beq.n	800c594 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c592:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a25      	ldr	r2, [pc, #148]	; (800c630 <HAL_TIM_PWM_Start+0x1f4>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d022      	beq.n	800c5e4 <HAL_TIM_PWM_Start+0x1a8>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5a6:	d01d      	beq.n	800c5e4 <HAL_TIM_PWM_Start+0x1a8>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a25      	ldr	r2, [pc, #148]	; (800c644 <HAL_TIM_PWM_Start+0x208>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d018      	beq.n	800c5e4 <HAL_TIM_PWM_Start+0x1a8>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a24      	ldr	r2, [pc, #144]	; (800c648 <HAL_TIM_PWM_Start+0x20c>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d013      	beq.n	800c5e4 <HAL_TIM_PWM_Start+0x1a8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a22      	ldr	r2, [pc, #136]	; (800c64c <HAL_TIM_PWM_Start+0x210>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d00e      	beq.n	800c5e4 <HAL_TIM_PWM_Start+0x1a8>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a1a      	ldr	r2, [pc, #104]	; (800c634 <HAL_TIM_PWM_Start+0x1f8>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d009      	beq.n	800c5e4 <HAL_TIM_PWM_Start+0x1a8>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a1e      	ldr	r2, [pc, #120]	; (800c650 <HAL_TIM_PWM_Start+0x214>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d004      	beq.n	800c5e4 <HAL_TIM_PWM_Start+0x1a8>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a16      	ldr	r2, [pc, #88]	; (800c638 <HAL_TIM_PWM_Start+0x1fc>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d115      	bne.n	800c610 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	4b1a      	ldr	r3, [pc, #104]	; (800c654 <HAL_TIM_PWM_Start+0x218>)
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2b06      	cmp	r3, #6
 800c5f4:	d015      	beq.n	800c622 <HAL_TIM_PWM_Start+0x1e6>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5fc:	d011      	beq.n	800c622 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f042 0201 	orr.w	r2, r2, #1
 800c60c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c60e:	e008      	b.n	800c622 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f042 0201 	orr.w	r2, r2, #1
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	e000      	b.n	800c624 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	40010000 	.word	0x40010000
 800c634:	40010400 	.word	0x40010400
 800c638:	40014000 	.word	0x40014000
 800c63c:	40014400 	.word	0x40014400
 800c640:	40014800 	.word	0x40014800
 800c644:	40000400 	.word	0x40000400
 800c648:	40000800 	.word	0x40000800
 800c64c:	40000c00 	.word	0x40000c00
 800c650:	40001800 	.word	0x40001800
 800c654:	00010007 	.word	0x00010007

0800c658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f003 0302 	and.w	r3, r3, #2
 800c676:	2b00      	cmp	r3, #0
 800c678:	d020      	beq.n	800c6bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f003 0302 	and.w	r3, r3, #2
 800c680:	2b00      	cmp	r3, #0
 800c682:	d01b      	beq.n	800c6bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f06f 0202 	mvn.w	r2, #2
 800c68c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	f003 0303 	and.w	r3, r3, #3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 faec 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800c6a8:	e005      	b.n	800c6b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7f3 ffea 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 faef 	bl	800cc94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f003 0304 	and.w	r3, r3, #4
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d020      	beq.n	800c708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f003 0304 	and.w	r3, r3, #4
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d01b      	beq.n	800c708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f06f 0204 	mvn.w	r2, #4
 800c6d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d003      	beq.n	800c6f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fac6 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800c6f4:	e005      	b.n	800c702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7f3 ffc4 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fac9 	bl	800cc94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	f003 0308 	and.w	r3, r3, #8
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d020      	beq.n	800c754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f003 0308 	and.w	r3, r3, #8
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01b      	beq.n	800c754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f06f 0208 	mvn.w	r2, #8
 800c724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2204      	movs	r2, #4
 800c72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	f003 0303 	and.w	r3, r3, #3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 faa0 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800c740:	e005      	b.n	800c74e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7f3 ff9e 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 faa3 	bl	800cc94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f003 0310 	and.w	r3, r3, #16
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d020      	beq.n	800c7a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f003 0310 	and.w	r3, r3, #16
 800c764:	2b00      	cmp	r3, #0
 800c766:	d01b      	beq.n	800c7a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f06f 0210 	mvn.w	r2, #16
 800c770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2208      	movs	r2, #8
 800c776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fa7a 	bl	800cc80 <HAL_TIM_IC_CaptureCallback>
 800c78c:	e005      	b.n	800c79a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7f3 ff78 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fa7d 	bl	800cc94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00c      	beq.n	800c7c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d007      	beq.n	800c7c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f06f 0201 	mvn.w	r2, #1
 800c7bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7f5 fb5a 	bl	8001e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d104      	bne.n	800c7d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00c      	beq.n	800c7f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 ffbb 	bl	800d768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00c      	beq.n	800c816 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c802:	2b00      	cmp	r3, #0
 800c804:	d007      	beq.n	800c816 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 ffb3 	bl	800d77c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00c      	beq.n	800c83a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c826:	2b00      	cmp	r3, #0
 800c828:	d007      	beq.n	800c83a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fa37 	bl	800cca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f003 0320 	and.w	r3, r3, #32
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00c      	beq.n	800c85e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d007      	beq.n	800c85e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f06f 0220 	mvn.w	r2, #32
 800c856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 ff7b 	bl	800d754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c85e:	bf00      	nop
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c882:	2302      	movs	r3, #2
 800c884:	e0ff      	b.n	800ca86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b14      	cmp	r3, #20
 800c892:	f200 80f0 	bhi.w	800ca76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c896:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c8f1 	.word	0x0800c8f1
 800c8a0:	0800ca77 	.word	0x0800ca77
 800c8a4:	0800ca77 	.word	0x0800ca77
 800c8a8:	0800ca77 	.word	0x0800ca77
 800c8ac:	0800c931 	.word	0x0800c931
 800c8b0:	0800ca77 	.word	0x0800ca77
 800c8b4:	0800ca77 	.word	0x0800ca77
 800c8b8:	0800ca77 	.word	0x0800ca77
 800c8bc:	0800c973 	.word	0x0800c973
 800c8c0:	0800ca77 	.word	0x0800ca77
 800c8c4:	0800ca77 	.word	0x0800ca77
 800c8c8:	0800ca77 	.word	0x0800ca77
 800c8cc:	0800c9b3 	.word	0x0800c9b3
 800c8d0:	0800ca77 	.word	0x0800ca77
 800c8d4:	0800ca77 	.word	0x0800ca77
 800c8d8:	0800ca77 	.word	0x0800ca77
 800c8dc:	0800c9f5 	.word	0x0800c9f5
 800c8e0:	0800ca77 	.word	0x0800ca77
 800c8e4:	0800ca77 	.word	0x0800ca77
 800c8e8:	0800ca77 	.word	0x0800ca77
 800c8ec:	0800ca35 	.word	0x0800ca35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fa86 	bl	800ce08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	699a      	ldr	r2, [r3, #24]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f042 0208 	orr.w	r2, r2, #8
 800c90a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	699a      	ldr	r2, [r3, #24]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f022 0204 	bic.w	r2, r2, #4
 800c91a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6999      	ldr	r1, [r3, #24]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	691a      	ldr	r2, [r3, #16]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	430a      	orrs	r2, r1
 800c92c:	619a      	str	r2, [r3, #24]
      break;
 800c92e:	e0a5      	b.n	800ca7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68b9      	ldr	r1, [r7, #8]
 800c936:	4618      	mov	r0, r3
 800c938:	f000 faf6 	bl	800cf28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	699a      	ldr	r2, [r3, #24]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c94a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	699a      	ldr	r2, [r3, #24]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c95a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6999      	ldr	r1, [r3, #24]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	021a      	lsls	r2, r3, #8
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	430a      	orrs	r2, r1
 800c96e:	619a      	str	r2, [r3, #24]
      break;
 800c970:	e084      	b.n	800ca7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68b9      	ldr	r1, [r7, #8]
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 fb5f 	bl	800d03c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	69da      	ldr	r2, [r3, #28]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f042 0208 	orr.w	r2, r2, #8
 800c98c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69da      	ldr	r2, [r3, #28]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f022 0204 	bic.w	r2, r2, #4
 800c99c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	69d9      	ldr	r1, [r3, #28]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	691a      	ldr	r2, [r3, #16]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	61da      	str	r2, [r3, #28]
      break;
 800c9b0:	e064      	b.n	800ca7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68b9      	ldr	r1, [r7, #8]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 fbc7 	bl	800d14c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	69da      	ldr	r2, [r3, #28]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	69da      	ldr	r2, [r3, #28]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	69d9      	ldr	r1, [r3, #28]
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	021a      	lsls	r2, r3, #8
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	61da      	str	r2, [r3, #28]
      break;
 800c9f2:	e043      	b.n	800ca7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68b9      	ldr	r1, [r7, #8]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 fc10 	bl	800d220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f042 0208 	orr.w	r2, r2, #8
 800ca0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f022 0204 	bic.w	r2, r2, #4
 800ca1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	691a      	ldr	r2, [r3, #16]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca32:	e023      	b.n	800ca7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68b9      	ldr	r1, [r7, #8]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fc54 	bl	800d2e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	021a      	lsls	r2, r3, #8
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca74:	e002      	b.n	800ca7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	75fb      	strb	r3, [r7, #23]
      break;
 800ca7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop

0800ca90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d101      	bne.n	800caac <HAL_TIM_ConfigClockSource+0x1c>
 800caa8:	2302      	movs	r3, #2
 800caaa:	e0dc      	b.n	800cc66 <HAL_TIM_ConfigClockSource+0x1d6>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	4b6a      	ldr	r3, [pc, #424]	; (800cc70 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cac8:	4013      	ands	r3, r2
 800caca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a64      	ldr	r2, [pc, #400]	; (800cc74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	f000 80a9 	beq.w	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cae8:	4a62      	ldr	r2, [pc, #392]	; (800cc74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	f200 80ae 	bhi.w	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800caf0:	4a61      	ldr	r2, [pc, #388]	; (800cc78 <HAL_TIM_ConfigClockSource+0x1e8>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	f000 80a1 	beq.w	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800caf8:	4a5f      	ldr	r2, [pc, #380]	; (800cc78 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	f200 80a6 	bhi.w	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb00:	4a5e      	ldr	r2, [pc, #376]	; (800cc7c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	f000 8099 	beq.w	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb08:	4a5c      	ldr	r2, [pc, #368]	; (800cc7c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	f200 809e 	bhi.w	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb14:	f000 8091 	beq.w	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb1c:	f200 8096 	bhi.w	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb24:	f000 8089 	beq.w	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb2c:	f200 808e 	bhi.w	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb34:	d03e      	beq.n	800cbb4 <HAL_TIM_ConfigClockSource+0x124>
 800cb36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb3a:	f200 8087 	bhi.w	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb42:	f000 8086 	beq.w	800cc52 <HAL_TIM_ConfigClockSource+0x1c2>
 800cb46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb4a:	d87f      	bhi.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb4c:	2b70      	cmp	r3, #112	; 0x70
 800cb4e:	d01a      	beq.n	800cb86 <HAL_TIM_ConfigClockSource+0xf6>
 800cb50:	2b70      	cmp	r3, #112	; 0x70
 800cb52:	d87b      	bhi.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb54:	2b60      	cmp	r3, #96	; 0x60
 800cb56:	d050      	beq.n	800cbfa <HAL_TIM_ConfigClockSource+0x16a>
 800cb58:	2b60      	cmp	r3, #96	; 0x60
 800cb5a:	d877      	bhi.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb5c:	2b50      	cmp	r3, #80	; 0x50
 800cb5e:	d03c      	beq.n	800cbda <HAL_TIM_ConfigClockSource+0x14a>
 800cb60:	2b50      	cmp	r3, #80	; 0x50
 800cb62:	d873      	bhi.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb64:	2b40      	cmp	r3, #64	; 0x40
 800cb66:	d058      	beq.n	800cc1a <HAL_TIM_ConfigClockSource+0x18a>
 800cb68:	2b40      	cmp	r3, #64	; 0x40
 800cb6a:	d86f      	bhi.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb6c:	2b30      	cmp	r3, #48	; 0x30
 800cb6e:	d064      	beq.n	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb70:	2b30      	cmp	r3, #48	; 0x30
 800cb72:	d86b      	bhi.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb74:	2b20      	cmp	r3, #32
 800cb76:	d060      	beq.n	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb78:	2b20      	cmp	r3, #32
 800cb7a:	d867      	bhi.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d05c      	beq.n	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb80:	2b10      	cmp	r3, #16
 800cb82:	d05a      	beq.n	800cc3a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb84:	e062      	b.n	800cc4c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6818      	ldr	r0, [r3, #0]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	6899      	ldr	r1, [r3, #8]
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	f000 fc8b 	bl	800d4b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	609a      	str	r2, [r3, #8]
      break;
 800cbb2:	e04f      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6818      	ldr	r0, [r3, #0]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	6899      	ldr	r1, [r3, #8]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	f000 fc74 	bl	800d4b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689a      	ldr	r2, [r3, #8]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbd6:	609a      	str	r2, [r3, #8]
      break;
 800cbd8:	e03c      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6818      	ldr	r0, [r3, #0]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	6859      	ldr	r1, [r3, #4]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	f000 fbe4 	bl	800d3b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2150      	movs	r1, #80	; 0x50
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 fc3e 	bl	800d474 <TIM_ITRx_SetConfig>
      break;
 800cbf8:	e02c      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6818      	ldr	r0, [r3, #0]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	6859      	ldr	r1, [r3, #4]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f000 fc03 	bl	800d412 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2160      	movs	r1, #96	; 0x60
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 fc2e 	bl	800d474 <TIM_ITRx_SetConfig>
      break;
 800cc18:	e01c      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	6859      	ldr	r1, [r3, #4]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	461a      	mov	r2, r3
 800cc28:	f000 fbc4 	bl	800d3b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2140      	movs	r1, #64	; 0x40
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 fc1e 	bl	800d474 <TIM_ITRx_SetConfig>
      break;
 800cc38:	e00c      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f000 fc15 	bl	800d474 <TIM_ITRx_SetConfig>
      break;
 800cc4a:	e003      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc50:	e000      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cc52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	ffceff88 	.word	0xffceff88
 800cc74:	00100040 	.word	0x00100040
 800cc78:	00100030 	.word	0x00100030
 800cc7c:	00100020 	.word	0x00100020

0800cc80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a46      	ldr	r2, [pc, #280]	; (800cde8 <TIM_Base_SetConfig+0x12c>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d013      	beq.n	800ccfc <TIM_Base_SetConfig+0x40>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccda:	d00f      	beq.n	800ccfc <TIM_Base_SetConfig+0x40>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a43      	ldr	r2, [pc, #268]	; (800cdec <TIM_Base_SetConfig+0x130>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d00b      	beq.n	800ccfc <TIM_Base_SetConfig+0x40>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a42      	ldr	r2, [pc, #264]	; (800cdf0 <TIM_Base_SetConfig+0x134>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d007      	beq.n	800ccfc <TIM_Base_SetConfig+0x40>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a41      	ldr	r2, [pc, #260]	; (800cdf4 <TIM_Base_SetConfig+0x138>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d003      	beq.n	800ccfc <TIM_Base_SetConfig+0x40>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a40      	ldr	r2, [pc, #256]	; (800cdf8 <TIM_Base_SetConfig+0x13c>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d108      	bne.n	800cd0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	4a35      	ldr	r2, [pc, #212]	; (800cde8 <TIM_Base_SetConfig+0x12c>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d01f      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd1c:	d01b      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a32      	ldr	r2, [pc, #200]	; (800cdec <TIM_Base_SetConfig+0x130>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d017      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a31      	ldr	r2, [pc, #196]	; (800cdf0 <TIM_Base_SetConfig+0x134>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d013      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a30      	ldr	r2, [pc, #192]	; (800cdf4 <TIM_Base_SetConfig+0x138>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d00f      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a2f      	ldr	r2, [pc, #188]	; (800cdf8 <TIM_Base_SetConfig+0x13c>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d00b      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a2e      	ldr	r2, [pc, #184]	; (800cdfc <TIM_Base_SetConfig+0x140>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d007      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a2d      	ldr	r2, [pc, #180]	; (800ce00 <TIM_Base_SetConfig+0x144>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d003      	beq.n	800cd56 <TIM_Base_SetConfig+0x9a>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a2c      	ldr	r2, [pc, #176]	; (800ce04 <TIM_Base_SetConfig+0x148>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d108      	bne.n	800cd68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	689a      	ldr	r2, [r3, #8]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a16      	ldr	r2, [pc, #88]	; (800cde8 <TIM_Base_SetConfig+0x12c>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d00f      	beq.n	800cdb4 <TIM_Base_SetConfig+0xf8>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a18      	ldr	r2, [pc, #96]	; (800cdf8 <TIM_Base_SetConfig+0x13c>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d00b      	beq.n	800cdb4 <TIM_Base_SetConfig+0xf8>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a17      	ldr	r2, [pc, #92]	; (800cdfc <TIM_Base_SetConfig+0x140>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d007      	beq.n	800cdb4 <TIM_Base_SetConfig+0xf8>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a16      	ldr	r2, [pc, #88]	; (800ce00 <TIM_Base_SetConfig+0x144>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d003      	beq.n	800cdb4 <TIM_Base_SetConfig+0xf8>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4a15      	ldr	r2, [pc, #84]	; (800ce04 <TIM_Base_SetConfig+0x148>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d103      	bne.n	800cdbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	691a      	ldr	r2, [r3, #16]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d105      	bne.n	800cdda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	f023 0201 	bic.w	r2, r3, #1
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	611a      	str	r2, [r3, #16]
  }
}
 800cdda:	bf00      	nop
 800cddc:	3714      	adds	r7, #20
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	40010000 	.word	0x40010000
 800cdec:	40000400 	.word	0x40000400
 800cdf0:	40000800 	.word	0x40000800
 800cdf4:	40000c00 	.word	0x40000c00
 800cdf8:	40010400 	.word	0x40010400
 800cdfc:	40014000 	.word	0x40014000
 800ce00:	40014400 	.word	0x40014400
 800ce04:	40014800 	.word	0x40014800

0800ce08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a1b      	ldr	r3, [r3, #32]
 800ce1c:	f023 0201 	bic.w	r2, r3, #1
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	4b37      	ldr	r3, [pc, #220]	; (800cf10 <TIM_OC1_SetConfig+0x108>)
 800ce34:	4013      	ands	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f023 0303 	bic.w	r3, r3, #3
 800ce3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	f023 0302 	bic.w	r3, r3, #2
 800ce50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a2d      	ldr	r2, [pc, #180]	; (800cf14 <TIM_OC1_SetConfig+0x10c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d00f      	beq.n	800ce84 <TIM_OC1_SetConfig+0x7c>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a2c      	ldr	r2, [pc, #176]	; (800cf18 <TIM_OC1_SetConfig+0x110>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d00b      	beq.n	800ce84 <TIM_OC1_SetConfig+0x7c>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	4a2b      	ldr	r2, [pc, #172]	; (800cf1c <TIM_OC1_SetConfig+0x114>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d007      	beq.n	800ce84 <TIM_OC1_SetConfig+0x7c>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	4a2a      	ldr	r2, [pc, #168]	; (800cf20 <TIM_OC1_SetConfig+0x118>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d003      	beq.n	800ce84 <TIM_OC1_SetConfig+0x7c>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a29      	ldr	r2, [pc, #164]	; (800cf24 <TIM_OC1_SetConfig+0x11c>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d10c      	bne.n	800ce9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f023 0308 	bic.w	r3, r3, #8
 800ce8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	697a      	ldr	r2, [r7, #20]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f023 0304 	bic.w	r3, r3, #4
 800ce9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4a1c      	ldr	r2, [pc, #112]	; (800cf14 <TIM_OC1_SetConfig+0x10c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d00f      	beq.n	800cec6 <TIM_OC1_SetConfig+0xbe>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a1b      	ldr	r2, [pc, #108]	; (800cf18 <TIM_OC1_SetConfig+0x110>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d00b      	beq.n	800cec6 <TIM_OC1_SetConfig+0xbe>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a1a      	ldr	r2, [pc, #104]	; (800cf1c <TIM_OC1_SetConfig+0x114>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d007      	beq.n	800cec6 <TIM_OC1_SetConfig+0xbe>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a19      	ldr	r2, [pc, #100]	; (800cf20 <TIM_OC1_SetConfig+0x118>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d003      	beq.n	800cec6 <TIM_OC1_SetConfig+0xbe>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a18      	ldr	r2, [pc, #96]	; (800cf24 <TIM_OC1_SetConfig+0x11c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d111      	bne.n	800ceea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ced4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	695b      	ldr	r3, [r3, #20]
 800ceda:	693a      	ldr	r2, [r7, #16]
 800cedc:	4313      	orrs	r3, r2
 800cede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	699b      	ldr	r3, [r3, #24]
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	621a      	str	r2, [r3, #32]
}
 800cf04:	bf00      	nop
 800cf06:	371c      	adds	r7, #28
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	fffeff8f 	.word	0xfffeff8f
 800cf14:	40010000 	.word	0x40010000
 800cf18:	40010400 	.word	0x40010400
 800cf1c:	40014000 	.word	0x40014000
 800cf20:	40014400 	.word	0x40014400
 800cf24:	40014800 	.word	0x40014800

0800cf28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b087      	sub	sp, #28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	f023 0210 	bic.w	r2, r3, #16
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	4b34      	ldr	r3, [pc, #208]	; (800d024 <TIM_OC2_SetConfig+0xfc>)
 800cf54:	4013      	ands	r3, r2
 800cf56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	021b      	lsls	r3, r3, #8
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	f023 0320 	bic.w	r3, r3, #32
 800cf72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	011b      	lsls	r3, r3, #4
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4a29      	ldr	r2, [pc, #164]	; (800d028 <TIM_OC2_SetConfig+0x100>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d003      	beq.n	800cf90 <TIM_OC2_SetConfig+0x68>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a28      	ldr	r2, [pc, #160]	; (800d02c <TIM_OC2_SetConfig+0x104>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d10d      	bne.n	800cfac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a1e      	ldr	r2, [pc, #120]	; (800d028 <TIM_OC2_SetConfig+0x100>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d00f      	beq.n	800cfd4 <TIM_OC2_SetConfig+0xac>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4a1d      	ldr	r2, [pc, #116]	; (800d02c <TIM_OC2_SetConfig+0x104>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d00b      	beq.n	800cfd4 <TIM_OC2_SetConfig+0xac>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a1c      	ldr	r2, [pc, #112]	; (800d030 <TIM_OC2_SetConfig+0x108>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d007      	beq.n	800cfd4 <TIM_OC2_SetConfig+0xac>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4a1b      	ldr	r2, [pc, #108]	; (800d034 <TIM_OC2_SetConfig+0x10c>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d003      	beq.n	800cfd4 <TIM_OC2_SetConfig+0xac>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4a1a      	ldr	r2, [pc, #104]	; (800d038 <TIM_OC2_SetConfig+0x110>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d113      	bne.n	800cffc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	695b      	ldr	r3, [r3, #20]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	693a      	ldr	r2, [r7, #16]
 800cfec:	4313      	orrs	r3, r2
 800cfee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	693a      	ldr	r2, [r7, #16]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	685a      	ldr	r2, [r3, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	621a      	str	r2, [r3, #32]
}
 800d016:	bf00      	nop
 800d018:	371c      	adds	r7, #28
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	feff8fff 	.word	0xfeff8fff
 800d028:	40010000 	.word	0x40010000
 800d02c:	40010400 	.word	0x40010400
 800d030:	40014000 	.word	0x40014000
 800d034:	40014400 	.word	0x40014400
 800d038:	40014800 	.word	0x40014800

0800d03c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b087      	sub	sp, #28
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6a1b      	ldr	r3, [r3, #32]
 800d050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	69db      	ldr	r3, [r3, #28]
 800d062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	4b33      	ldr	r3, [pc, #204]	; (800d134 <TIM_OC3_SetConfig+0xf8>)
 800d068:	4013      	ands	r3, r2
 800d06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f023 0303 	bic.w	r3, r3, #3
 800d072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	021b      	lsls	r3, r3, #8
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	4313      	orrs	r3, r2
 800d090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a28      	ldr	r2, [pc, #160]	; (800d138 <TIM_OC3_SetConfig+0xfc>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d003      	beq.n	800d0a2 <TIM_OC3_SetConfig+0x66>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a27      	ldr	r2, [pc, #156]	; (800d13c <TIM_OC3_SetConfig+0x100>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d10d      	bne.n	800d0be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	021b      	lsls	r3, r3, #8
 800d0b0:	697a      	ldr	r2, [r7, #20]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d0bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a1d      	ldr	r2, [pc, #116]	; (800d138 <TIM_OC3_SetConfig+0xfc>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d00f      	beq.n	800d0e6 <TIM_OC3_SetConfig+0xaa>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a1c      	ldr	r2, [pc, #112]	; (800d13c <TIM_OC3_SetConfig+0x100>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d00b      	beq.n	800d0e6 <TIM_OC3_SetConfig+0xaa>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a1b      	ldr	r2, [pc, #108]	; (800d140 <TIM_OC3_SetConfig+0x104>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d007      	beq.n	800d0e6 <TIM_OC3_SetConfig+0xaa>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a1a      	ldr	r2, [pc, #104]	; (800d144 <TIM_OC3_SetConfig+0x108>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d003      	beq.n	800d0e6 <TIM_OC3_SetConfig+0xaa>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a19      	ldr	r2, [pc, #100]	; (800d148 <TIM_OC3_SetConfig+0x10c>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d113      	bne.n	800d10e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	011b      	lsls	r3, r3, #4
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	011b      	lsls	r3, r3, #4
 800d108:	693a      	ldr	r2, [r7, #16]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	693a      	ldr	r2, [r7, #16]
 800d112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	685a      	ldr	r2, [r3, #4]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	621a      	str	r2, [r3, #32]
}
 800d128:	bf00      	nop
 800d12a:	371c      	adds	r7, #28
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	fffeff8f 	.word	0xfffeff8f
 800d138:	40010000 	.word	0x40010000
 800d13c:	40010400 	.word	0x40010400
 800d140:	40014000 	.word	0x40014000
 800d144:	40014400 	.word	0x40014400
 800d148:	40014800 	.word	0x40014800

0800d14c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a1b      	ldr	r3, [r3, #32]
 800d15a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a1b      	ldr	r3, [r3, #32]
 800d160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	69db      	ldr	r3, [r3, #28]
 800d172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	4b24      	ldr	r3, [pc, #144]	; (800d208 <TIM_OC4_SetConfig+0xbc>)
 800d178:	4013      	ands	r3, r2
 800d17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	021b      	lsls	r3, r3, #8
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	031b      	lsls	r3, r3, #12
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a19      	ldr	r2, [pc, #100]	; (800d20c <TIM_OC4_SetConfig+0xc0>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d00f      	beq.n	800d1cc <TIM_OC4_SetConfig+0x80>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a18      	ldr	r2, [pc, #96]	; (800d210 <TIM_OC4_SetConfig+0xc4>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d00b      	beq.n	800d1cc <TIM_OC4_SetConfig+0x80>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a17      	ldr	r2, [pc, #92]	; (800d214 <TIM_OC4_SetConfig+0xc8>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d007      	beq.n	800d1cc <TIM_OC4_SetConfig+0x80>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a16      	ldr	r2, [pc, #88]	; (800d218 <TIM_OC4_SetConfig+0xcc>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d003      	beq.n	800d1cc <TIM_OC4_SetConfig+0x80>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a15      	ldr	r2, [pc, #84]	; (800d21c <TIM_OC4_SetConfig+0xd0>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d109      	bne.n	800d1e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d1d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	695b      	ldr	r3, [r3, #20]
 800d1d8:	019b      	lsls	r3, r3, #6
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	621a      	str	r2, [r3, #32]
}
 800d1fa:	bf00      	nop
 800d1fc:	371c      	adds	r7, #28
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	feff8fff 	.word	0xfeff8fff
 800d20c:	40010000 	.word	0x40010000
 800d210:	40010400 	.word	0x40010400
 800d214:	40014000 	.word	0x40014000
 800d218:	40014400 	.word	0x40014400
 800d21c:	40014800 	.word	0x40014800

0800d220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d220:	b480      	push	{r7}
 800d222:	b087      	sub	sp, #28
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	4b21      	ldr	r3, [pc, #132]	; (800d2d0 <TIM_OC5_SetConfig+0xb0>)
 800d24c:	4013      	ands	r3, r2
 800d24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	4313      	orrs	r3, r2
 800d258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	041b      	lsls	r3, r3, #16
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a18      	ldr	r2, [pc, #96]	; (800d2d4 <TIM_OC5_SetConfig+0xb4>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d00f      	beq.n	800d296 <TIM_OC5_SetConfig+0x76>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a17      	ldr	r2, [pc, #92]	; (800d2d8 <TIM_OC5_SetConfig+0xb8>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d00b      	beq.n	800d296 <TIM_OC5_SetConfig+0x76>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4a16      	ldr	r2, [pc, #88]	; (800d2dc <TIM_OC5_SetConfig+0xbc>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d007      	beq.n	800d296 <TIM_OC5_SetConfig+0x76>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a15      	ldr	r2, [pc, #84]	; (800d2e0 <TIM_OC5_SetConfig+0xc0>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d003      	beq.n	800d296 <TIM_OC5_SetConfig+0x76>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a14      	ldr	r2, [pc, #80]	; (800d2e4 <TIM_OC5_SetConfig+0xc4>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d109      	bne.n	800d2aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d29c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	021b      	lsls	r3, r3, #8
 800d2a4:	697a      	ldr	r2, [r7, #20]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	685a      	ldr	r2, [r3, #4]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	621a      	str	r2, [r3, #32]
}
 800d2c4:	bf00      	nop
 800d2c6:	371c      	adds	r7, #28
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	fffeff8f 	.word	0xfffeff8f
 800d2d4:	40010000 	.word	0x40010000
 800d2d8:	40010400 	.word	0x40010400
 800d2dc:	40014000 	.word	0x40014000
 800d2e0:	40014400 	.word	0x40014400
 800d2e4:	40014800 	.word	0x40014800

0800d2e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b087      	sub	sp, #28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a1b      	ldr	r3, [r3, #32]
 800d2f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a1b      	ldr	r3, [r3, #32]
 800d2fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	4b22      	ldr	r3, [pc, #136]	; (800d39c <TIM_OC6_SetConfig+0xb4>)
 800d314:	4013      	ands	r3, r2
 800d316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	021b      	lsls	r3, r3, #8
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	4313      	orrs	r3, r2
 800d322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d32a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	051b      	lsls	r3, r3, #20
 800d332:	693a      	ldr	r2, [r7, #16]
 800d334:	4313      	orrs	r3, r2
 800d336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a19      	ldr	r2, [pc, #100]	; (800d3a0 <TIM_OC6_SetConfig+0xb8>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d00f      	beq.n	800d360 <TIM_OC6_SetConfig+0x78>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a18      	ldr	r2, [pc, #96]	; (800d3a4 <TIM_OC6_SetConfig+0xbc>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d00b      	beq.n	800d360 <TIM_OC6_SetConfig+0x78>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a17      	ldr	r2, [pc, #92]	; (800d3a8 <TIM_OC6_SetConfig+0xc0>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d007      	beq.n	800d360 <TIM_OC6_SetConfig+0x78>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a16      	ldr	r2, [pc, #88]	; (800d3ac <TIM_OC6_SetConfig+0xc4>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d003      	beq.n	800d360 <TIM_OC6_SetConfig+0x78>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a15      	ldr	r2, [pc, #84]	; (800d3b0 <TIM_OC6_SetConfig+0xc8>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d109      	bne.n	800d374 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	695b      	ldr	r3, [r3, #20]
 800d36c:	029b      	lsls	r3, r3, #10
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	4313      	orrs	r3, r2
 800d372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	621a      	str	r2, [r3, #32]
}
 800d38e:	bf00      	nop
 800d390:	371c      	adds	r7, #28
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	feff8fff 	.word	0xfeff8fff
 800d3a0:	40010000 	.word	0x40010000
 800d3a4:	40010400 	.word	0x40010400
 800d3a8:	40014000 	.word	0x40014000
 800d3ac:	40014400 	.word	0x40014400
 800d3b0:	40014800 	.word	0x40014800

0800d3b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6a1b      	ldr	r3, [r3, #32]
 800d3c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	f023 0201 	bic.w	r2, r3, #1
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	011b      	lsls	r3, r3, #4
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	f023 030a 	bic.w	r3, r3, #10
 800d3f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	621a      	str	r2, [r3, #32]
}
 800d406:	bf00      	nop
 800d408:	371c      	adds	r7, #28
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d412:	b480      	push	{r7}
 800d414:	b087      	sub	sp, #28
 800d416:	af00      	add	r7, sp, #0
 800d418:	60f8      	str	r0, [r7, #12]
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6a1b      	ldr	r3, [r3, #32]
 800d428:	f023 0210 	bic.w	r2, r3, #16
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d43c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	031b      	lsls	r3, r3, #12
 800d442:	693a      	ldr	r2, [r7, #16]
 800d444:	4313      	orrs	r3, r2
 800d446:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d44e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	011b      	lsls	r3, r3, #4
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	4313      	orrs	r3, r2
 800d458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	621a      	str	r2, [r3, #32]
}
 800d466:	bf00      	nop
 800d468:	371c      	adds	r7, #28
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
	...

0800d474 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	4b09      	ldr	r3, [pc, #36]	; (800d4ac <TIM_ITRx_SetConfig+0x38>)
 800d488:	4013      	ands	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	4313      	orrs	r3, r2
 800d492:	f043 0307 	orr.w	r3, r3, #7
 800d496:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	609a      	str	r2, [r3, #8]
}
 800d49e:	bf00      	nop
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	ffcfff8f 	.word	0xffcfff8f

0800d4b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b087      	sub	sp, #28
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
 800d4bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	021a      	lsls	r2, r3, #8
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	697a      	ldr	r2, [r7, #20]
 800d4e2:	609a      	str	r2, [r3, #8]
}
 800d4e4:	bf00      	nop
 800d4e6:	371c      	adds	r7, #28
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f003 031f 	and.w	r3, r3, #31
 800d502:	2201      	movs	r2, #1
 800d504:	fa02 f303 	lsl.w	r3, r2, r3
 800d508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	6a1a      	ldr	r2, [r3, #32]
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	43db      	mvns	r3, r3
 800d512:	401a      	ands	r2, r3
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6a1a      	ldr	r2, [r3, #32]
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	f003 031f 	and.w	r3, r3, #31
 800d522:	6879      	ldr	r1, [r7, #4]
 800d524:	fa01 f303 	lsl.w	r3, r1, r3
 800d528:	431a      	orrs	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	621a      	str	r2, [r3, #32]
}
 800d52e:	bf00      	nop
 800d530:	371c      	adds	r7, #28
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
	...

0800d53c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d101      	bne.n	800d554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d550:	2302      	movs	r3, #2
 800d552:	e06d      	b.n	800d630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2202      	movs	r2, #2
 800d560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a30      	ldr	r2, [pc, #192]	; (800d63c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d004      	beq.n	800d588 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a2f      	ldr	r2, [pc, #188]	; (800d640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d108      	bne.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d58e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	4313      	orrs	r3, r2
 800d598:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a20      	ldr	r2, [pc, #128]	; (800d63c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d022      	beq.n	800d604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5c6:	d01d      	beq.n	800d604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a1d      	ldr	r2, [pc, #116]	; (800d644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d018      	beq.n	800d604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a1c      	ldr	r2, [pc, #112]	; (800d648 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d013      	beq.n	800d604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a1a      	ldr	r2, [pc, #104]	; (800d64c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d00e      	beq.n	800d604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a15      	ldr	r2, [pc, #84]	; (800d640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d009      	beq.n	800d604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a16      	ldr	r2, [pc, #88]	; (800d650 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d004      	beq.n	800d604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a15      	ldr	r2, [pc, #84]	; (800d654 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d10c      	bne.n	800d61e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d60a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	4313      	orrs	r3, r2
 800d614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	40010000 	.word	0x40010000
 800d640:	40010400 	.word	0x40010400
 800d644:	40000400 	.word	0x40000400
 800d648:	40000800 	.word	0x40000800
 800d64c:	40000c00 	.word	0x40000c00
 800d650:	40001800 	.word	0x40001800
 800d654:	40014000 	.word	0x40014000

0800d658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d662:	2300      	movs	r3, #0
 800d664:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d101      	bne.n	800d674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d670:	2302      	movs	r3, #2
 800d672:	e065      	b.n	800d740 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	4313      	orrs	r3, r2
 800d688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	4313      	orrs	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	695b      	ldr	r3, [r3, #20]
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	699b      	ldr	r3, [r3, #24]
 800d6e8:	041b      	lsls	r3, r3, #16
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a16      	ldr	r2, [pc, #88]	; (800d74c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d004      	beq.n	800d702 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a14      	ldr	r2, [pc, #80]	; (800d750 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d115      	bne.n	800d72e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	051b      	lsls	r3, r3, #20
 800d70e:	4313      	orrs	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	69db      	ldr	r3, [r3, #28]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	4313      	orrs	r3, r2
 800d72c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3714      	adds	r7, #20
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	40010000 	.word	0x40010000
 800d750:	40010400 	.word	0x40010400

0800d754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d101      	bne.n	800d7a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e042      	b.n	800d828 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7f4 fee3 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2224      	movs	r2, #36	; 0x24
 800d7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f022 0201 	bic.w	r2, r2, #1
 800d7d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f001 fa44 	bl	800ec68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fcd9 	bl	800e198 <UART_SetConfig>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d101      	bne.n	800d7f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e01b      	b.n	800d828 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d80e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f042 0201 	orr.w	r2, r2, #1
 800d81e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f001 fac3 	bl	800edac <UART_CheckIdleState>
 800d826:	4603      	mov	r3, r0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08a      	sub	sp, #40	; 0x28
 800d834:	af02      	add	r7, sp, #8
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	603b      	str	r3, [r7, #0]
 800d83c:	4613      	mov	r3, r2
 800d83e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d846:	2b20      	cmp	r3, #32
 800d848:	d17b      	bne.n	800d942 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <HAL_UART_Transmit+0x26>
 800d850:	88fb      	ldrh	r3, [r7, #6]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e074      	b.n	800d944 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2221      	movs	r2, #33	; 0x21
 800d866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d86a:	f7f5 f9c3 	bl	8002bf4 <HAL_GetTick>
 800d86e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	88fa      	ldrh	r2, [r7, #6]
 800d874:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	88fa      	ldrh	r2, [r7, #6]
 800d87c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d888:	d108      	bne.n	800d89c <HAL_UART_Transmit+0x6c>
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d104      	bne.n	800d89c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d892:	2300      	movs	r3, #0
 800d894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	61bb      	str	r3, [r7, #24]
 800d89a:	e003      	b.n	800d8a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d8a4:	e030      	b.n	800d908 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	9300      	str	r3, [sp, #0]
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	2180      	movs	r1, #128	; 0x80
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f001 fb25 	bl	800ef00 <UART_WaitOnFlagUntilTimeout>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d005      	beq.n	800d8c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2220      	movs	r2, #32
 800d8c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	e03d      	b.n	800d944 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d8dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	3302      	adds	r3, #2
 800d8e2:	61bb      	str	r3, [r7, #24]
 800d8e4:	e007      	b.n	800d8f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d8e6:	69fb      	ldr	r3, [r7, #28]
 800d8e8:	781a      	ldrb	r2, [r3, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	3b01      	subs	r3, #1
 800d900:	b29a      	uxth	r2, r3
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d90e:	b29b      	uxth	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1c8      	bne.n	800d8a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2200      	movs	r2, #0
 800d91c:	2140      	movs	r1, #64	; 0x40
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f001 faee 	bl	800ef00 <UART_WaitOnFlagUntilTimeout>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d005      	beq.n	800d936 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2220      	movs	r2, #32
 800d92e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d932:	2303      	movs	r3, #3
 800d934:	e006      	b.n	800d944 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2220      	movs	r2, #32
 800d93a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	e000      	b.n	800d944 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d942:	2302      	movs	r3, #2
  }
}
 800d944:	4618      	mov	r0, r3
 800d946:	3720      	adds	r7, #32
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08a      	sub	sp, #40	; 0x28
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	4613      	mov	r3, r2
 800d958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d960:	2b20      	cmp	r3, #32
 800d962:	d137      	bne.n	800d9d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d002      	beq.n	800d970 <HAL_UART_Receive_IT+0x24>
 800d96a:	88fb      	ldrh	r3, [r7, #6]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	e030      	b.n	800d9d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a18      	ldr	r2, [pc, #96]	; (800d9e0 <HAL_UART_Receive_IT+0x94>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d01f      	beq.n	800d9c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d018      	beq.n	800d9c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	e853 3f00 	ldrex	r3, [r3]
 800d99e:	613b      	str	r3, [r7, #16]
   return(result);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	623b      	str	r3, [r7, #32]
 800d9b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b4:	69f9      	ldr	r1, [r7, #28]
 800d9b6:	6a3a      	ldr	r2, [r7, #32]
 800d9b8:	e841 2300 	strex	r3, r2, [r1]
 800d9bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d1e6      	bne.n	800d992 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d9c4:	88fb      	ldrh	r3, [r7, #6]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	68b9      	ldr	r1, [r7, #8]
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f001 fb06 	bl	800efdc <UART_Start_Receive_IT>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	e000      	b.n	800d9d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d9d4:	2302      	movs	r3, #2
  }
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3728      	adds	r7, #40	; 0x28
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	58000c00 	.word	0x58000c00

0800d9e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b0ba      	sub	sp, #232	; 0xe8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	69db      	ldr	r3, [r3, #28]
 800d9f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800da0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800da12:	4013      	ands	r3, r2
 800da14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800da18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d11b      	bne.n	800da58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800da20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da24:	f003 0320 	and.w	r3, r3, #32
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d015      	beq.n	800da58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800da2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da30:	f003 0320 	and.w	r3, r3, #32
 800da34:	2b00      	cmp	r3, #0
 800da36:	d105      	bne.n	800da44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800da38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d009      	beq.n	800da58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 8377 	beq.w	800e13c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	4798      	blx	r3
      }
      return;
 800da56:	e371      	b.n	800e13c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800da58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f000 8123 	beq.w	800dca8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800da62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800da66:	4b8d      	ldr	r3, [pc, #564]	; (800dc9c <HAL_UART_IRQHandler+0x2b8>)
 800da68:	4013      	ands	r3, r2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d106      	bne.n	800da7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800da72:	4b8b      	ldr	r3, [pc, #556]	; (800dca0 <HAL_UART_IRQHandler+0x2bc>)
 800da74:	4013      	ands	r3, r2
 800da76:	2b00      	cmp	r3, #0
 800da78:	f000 8116 	beq.w	800dca8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da80:	f003 0301 	and.w	r3, r3, #1
 800da84:	2b00      	cmp	r3, #0
 800da86:	d011      	beq.n	800daac <HAL_UART_IRQHandler+0xc8>
 800da88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00b      	beq.n	800daac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2201      	movs	r2, #1
 800da9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daa2:	f043 0201 	orr.w	r2, r3, #1
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800daac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dab0:	f003 0302 	and.w	r3, r3, #2
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d011      	beq.n	800dadc <HAL_UART_IRQHandler+0xf8>
 800dab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dabc:	f003 0301 	and.w	r3, r3, #1
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00b      	beq.n	800dadc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2202      	movs	r2, #2
 800daca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dad2:	f043 0204 	orr.w	r2, r3, #4
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dadc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dae0:	f003 0304 	and.w	r3, r3, #4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d011      	beq.n	800db0c <HAL_UART_IRQHandler+0x128>
 800dae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00b      	beq.n	800db0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2204      	movs	r2, #4
 800dafa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db02:	f043 0202 	orr.w	r2, r3, #2
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db10:	f003 0308 	and.w	r3, r3, #8
 800db14:	2b00      	cmp	r3, #0
 800db16:	d017      	beq.n	800db48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db1c:	f003 0320 	and.w	r3, r3, #32
 800db20:	2b00      	cmp	r3, #0
 800db22:	d105      	bne.n	800db30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800db24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800db28:	4b5c      	ldr	r3, [pc, #368]	; (800dc9c <HAL_UART_IRQHandler+0x2b8>)
 800db2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2208      	movs	r2, #8
 800db36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db3e:	f043 0208 	orr.w	r2, r3, #8
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800db48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db50:	2b00      	cmp	r3, #0
 800db52:	d012      	beq.n	800db7a <HAL_UART_IRQHandler+0x196>
 800db54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00c      	beq.n	800db7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db70:	f043 0220 	orr.w	r2, r3, #32
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 82dd 	beq.w	800e140 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800db86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db8a:	f003 0320 	and.w	r3, r3, #32
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d013      	beq.n	800dbba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800db92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db96:	f003 0320 	and.w	r3, r3, #32
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d105      	bne.n	800dbaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800db9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d007      	beq.n	800dbba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	689b      	ldr	r3, [r3, #8]
 800dbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbce:	2b40      	cmp	r3, #64	; 0x40
 800dbd0:	d005      	beq.n	800dbde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dbd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d054      	beq.n	800dc88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f001 fb1e 	bl	800f220 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbee:	2b40      	cmp	r3, #64	; 0x40
 800dbf0:	d146      	bne.n	800dc80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	3308      	adds	r3, #8
 800dbf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc00:	e853 3f00 	ldrex	r3, [r3]
 800dc04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dc08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	3308      	adds	r3, #8
 800dc1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dc1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dc22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dc2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dc2e:	e841 2300 	strex	r3, r2, [r1]
 800dc32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dc36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1d9      	bne.n	800dbf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d017      	beq.n	800dc78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc4e:	4a15      	ldr	r2, [pc, #84]	; (800dca4 <HAL_UART_IRQHandler+0x2c0>)
 800dc50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7f8 f9d7 	bl	800600c <HAL_DMA_Abort_IT>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d019      	beq.n	800dc98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dc72:	4610      	mov	r0, r2
 800dc74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc76:	e00f      	b.n	800dc98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fa77 	bl	800e16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc7e:	e00b      	b.n	800dc98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fa73 	bl	800e16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc86:	e007      	b.n	800dc98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 fa6f 	bl	800e16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800dc96:	e253      	b.n	800e140 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc98:	bf00      	nop
    return;
 800dc9a:	e251      	b.n	800e140 <HAL_UART_IRQHandler+0x75c>
 800dc9c:	10000001 	.word	0x10000001
 800dca0:	04000120 	.word	0x04000120
 800dca4:	0800f2ed 	.word	0x0800f2ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	f040 81e7 	bne.w	800e080 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dcb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcb6:	f003 0310 	and.w	r3, r3, #16
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 81e0 	beq.w	800e080 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dcc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcc4:	f003 0310 	and.w	r3, r3, #16
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f000 81d9 	beq.w	800e080 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2210      	movs	r2, #16
 800dcd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce0:	2b40      	cmp	r3, #64	; 0x40
 800dce2:	f040 8151 	bne.w	800df88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a96      	ldr	r2, [pc, #600]	; (800df48 <HAL_UART_IRQHandler+0x564>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d068      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a93      	ldr	r2, [pc, #588]	; (800df4c <HAL_UART_IRQHandler+0x568>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d061      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a91      	ldr	r2, [pc, #580]	; (800df50 <HAL_UART_IRQHandler+0x56c>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d05a      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a8e      	ldr	r2, [pc, #568]	; (800df54 <HAL_UART_IRQHandler+0x570>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d053      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a8c      	ldr	r2, [pc, #560]	; (800df58 <HAL_UART_IRQHandler+0x574>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d04c      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a89      	ldr	r2, [pc, #548]	; (800df5c <HAL_UART_IRQHandler+0x578>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d045      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a87      	ldr	r2, [pc, #540]	; (800df60 <HAL_UART_IRQHandler+0x57c>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d03e      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a84      	ldr	r2, [pc, #528]	; (800df64 <HAL_UART_IRQHandler+0x580>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d037      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a82      	ldr	r2, [pc, #520]	; (800df68 <HAL_UART_IRQHandler+0x584>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d030      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a7f      	ldr	r2, [pc, #508]	; (800df6c <HAL_UART_IRQHandler+0x588>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d029      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a7d      	ldr	r2, [pc, #500]	; (800df70 <HAL_UART_IRQHandler+0x58c>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d022      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a7a      	ldr	r2, [pc, #488]	; (800df74 <HAL_UART_IRQHandler+0x590>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d01b      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a78      	ldr	r2, [pc, #480]	; (800df78 <HAL_UART_IRQHandler+0x594>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d014      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a75      	ldr	r2, [pc, #468]	; (800df7c <HAL_UART_IRQHandler+0x598>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d00d      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a73      	ldr	r2, [pc, #460]	; (800df80 <HAL_UART_IRQHandler+0x59c>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d006      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x3e2>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a70      	ldr	r2, [pc, #448]	; (800df84 <HAL_UART_IRQHandler+0x5a0>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d106      	bne.n	800ddd4 <HAL_UART_IRQHandler+0x3f0>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	e005      	b.n	800dde0 <HAL_UART_IRQHandler+0x3fc>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dde4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 81ab 	beq.w	800e144 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ddf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	f080 81a3 	bcs.w	800e144 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de0e:	69db      	ldr	r3, [r3, #28]
 800de10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de14:	f000 8087 	beq.w	800df26 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de24:	e853 3f00 	ldrex	r3, [r3]
 800de28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800de2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	461a      	mov	r2, r3
 800de3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800de42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800de4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800de52:	e841 2300 	strex	r3, r2, [r1]
 800de56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800de5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1da      	bne.n	800de18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3308      	adds	r3, #8
 800de68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de6c:	e853 3f00 	ldrex	r3, [r3]
 800de70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800de72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de74:	f023 0301 	bic.w	r3, r3, #1
 800de78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	3308      	adds	r3, #8
 800de82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800de86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800de8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800de8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de92:	e841 2300 	strex	r3, r2, [r1]
 800de96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800de98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1e1      	bne.n	800de62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3308      	adds	r3, #8
 800dea4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dea8:	e853 3f00 	ldrex	r3, [r3]
 800deac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800deae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800deb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	3308      	adds	r3, #8
 800debe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dec4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dec8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800deca:	e841 2300 	strex	r3, r2, [r1]
 800dece:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ded0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1e3      	bne.n	800de9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2220      	movs	r2, #32
 800deda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deec:	e853 3f00 	ldrex	r3, [r3]
 800def0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800def2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def4:	f023 0310 	bic.w	r3, r3, #16
 800def8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	461a      	mov	r2, r3
 800df02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df06:	65bb      	str	r3, [r7, #88]	; 0x58
 800df08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df0e:	e841 2300 	strex	r3, r2, [r1]
 800df12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df16:	2b00      	cmp	r3, #0
 800df18:	d1e4      	bne.n	800dee4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df20:	4618      	mov	r0, r3
 800df22:	f7f7 fd55 	bl	80059d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2202      	movs	r2, #2
 800df2a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df38:	b29b      	uxth	r3, r3
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f91d 	bl	800e180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df46:	e0fd      	b.n	800e144 <HAL_UART_IRQHandler+0x760>
 800df48:	40020010 	.word	0x40020010
 800df4c:	40020028 	.word	0x40020028
 800df50:	40020040 	.word	0x40020040
 800df54:	40020058 	.word	0x40020058
 800df58:	40020070 	.word	0x40020070
 800df5c:	40020088 	.word	0x40020088
 800df60:	400200a0 	.word	0x400200a0
 800df64:	400200b8 	.word	0x400200b8
 800df68:	40020410 	.word	0x40020410
 800df6c:	40020428 	.word	0x40020428
 800df70:	40020440 	.word	0x40020440
 800df74:	40020458 	.word	0x40020458
 800df78:	40020470 	.word	0x40020470
 800df7c:	40020488 	.word	0x40020488
 800df80:	400204a0 	.word	0x400204a0
 800df84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df94:	b29b      	uxth	r3, r3
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 80cf 	beq.w	800e148 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dfaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f000 80ca 	beq.w	800e148 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbc:	e853 3f00 	ldrex	r3, [r3]
 800dfc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dfd6:	647b      	str	r3, [r7, #68]	; 0x44
 800dfd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfde:	e841 2300 	strex	r3, r2, [r1]
 800dfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1e4      	bne.n	800dfb4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3308      	adds	r3, #8
 800dff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff4:	e853 3f00 	ldrex	r3, [r3]
 800dff8:	623b      	str	r3, [r7, #32]
   return(result);
 800dffa:	6a3a      	ldr	r2, [r7, #32]
 800dffc:	4b55      	ldr	r3, [pc, #340]	; (800e154 <HAL_UART_IRQHandler+0x770>)
 800dffe:	4013      	ands	r3, r2
 800e000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3308      	adds	r3, #8
 800e00a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e00e:	633a      	str	r2, [r7, #48]	; 0x30
 800e010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e016:	e841 2300 	strex	r3, r2, [r1]
 800e01a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1e3      	bne.n	800dfea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2220      	movs	r2, #32
 800e026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	e853 3f00 	ldrex	r3, [r3]
 800e042:	60fb      	str	r3, [r7, #12]
   return(result);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f023 0310 	bic.w	r3, r3, #16
 800e04a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	461a      	mov	r2, r3
 800e054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e058:	61fb      	str	r3, [r7, #28]
 800e05a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05c:	69b9      	ldr	r1, [r7, #24]
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	e841 2300 	strex	r3, r2, [r1]
 800e064:	617b      	str	r3, [r7, #20]
   return(result);
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1e4      	bne.n	800e036 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2202      	movs	r2, #2
 800e070:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 f881 	bl	800e180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e07e:	e063      	b.n	800e148 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00e      	beq.n	800e0aa <HAL_UART_IRQHandler+0x6c6>
 800e08c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d008      	beq.n	800e0aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e0a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f001 fe80 	bl	800fda8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0a8:	e051      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d014      	beq.n	800e0e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d105      	bne.n	800e0ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d008      	beq.n	800e0e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d03a      	beq.n	800e14c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	4798      	blx	r3
    }
    return;
 800e0de:	e035      	b.n	800e14c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d009      	beq.n	800e100 <HAL_UART_IRQHandler+0x71c>
 800e0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d003      	beq.n	800e100 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f001 f90d 	bl	800f318 <UART_EndTransmit_IT>
    return;
 800e0fe:	e026      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d009      	beq.n	800e120 <HAL_UART_IRQHandler+0x73c>
 800e10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e110:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d003      	beq.n	800e120 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f001 fe59 	bl	800fdd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e11e:	e016      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d010      	beq.n	800e14e <HAL_UART_IRQHandler+0x76a>
 800e12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e130:	2b00      	cmp	r3, #0
 800e132:	da0c      	bge.n	800e14e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f001 fe41 	bl	800fdbc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e13a:	e008      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
      return;
 800e13c:	bf00      	nop
 800e13e:	e006      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
    return;
 800e140:	bf00      	nop
 800e142:	e004      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
      return;
 800e144:	bf00      	nop
 800e146:	e002      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
      return;
 800e148:	bf00      	nop
 800e14a:	e000      	b.n	800e14e <HAL_UART_IRQHandler+0x76a>
    return;
 800e14c:	bf00      	nop
  }
}
 800e14e:	37e8      	adds	r7, #232	; 0xe8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	effffffe 	.word	0xeffffffe

0800e158 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e19c:	b092      	sub	sp, #72	; 0x48
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	689a      	ldr	r2, [r3, #8]
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	431a      	orrs	r2, r3
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	69db      	ldr	r3, [r3, #28]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	4bbe      	ldr	r3, [pc, #760]	; (800e4c0 <UART_SetConfig+0x328>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	6812      	ldr	r2, [r2, #0]
 800e1ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1d0:	430b      	orrs	r3, r1
 800e1d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	68da      	ldr	r2, [r3, #12]
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	430a      	orrs	r2, r1
 800e1e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	699b      	ldr	r3, [r3, #24]
 800e1ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4ab3      	ldr	r2, [pc, #716]	; (800e4c4 <UART_SetConfig+0x32c>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d004      	beq.n	800e204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e200:	4313      	orrs	r3, r2
 800e202:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	689a      	ldr	r2, [r3, #8]
 800e20a:	4baf      	ldr	r3, [pc, #700]	; (800e4c8 <UART_SetConfig+0x330>)
 800e20c:	4013      	ands	r3, r2
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	6812      	ldr	r2, [r2, #0]
 800e212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e214:	430b      	orrs	r3, r1
 800e216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21e:	f023 010f 	bic.w	r1, r3, #15
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	430a      	orrs	r2, r1
 800e22c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4aa6      	ldr	r2, [pc, #664]	; (800e4cc <UART_SetConfig+0x334>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d177      	bne.n	800e328 <UART_SetConfig+0x190>
 800e238:	4ba5      	ldr	r3, [pc, #660]	; (800e4d0 <UART_SetConfig+0x338>)
 800e23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e23c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e240:	2b28      	cmp	r3, #40	; 0x28
 800e242:	d86d      	bhi.n	800e320 <UART_SetConfig+0x188>
 800e244:	a201      	add	r2, pc, #4	; (adr r2, 800e24c <UART_SetConfig+0xb4>)
 800e246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24a:	bf00      	nop
 800e24c:	0800e2f1 	.word	0x0800e2f1
 800e250:	0800e321 	.word	0x0800e321
 800e254:	0800e321 	.word	0x0800e321
 800e258:	0800e321 	.word	0x0800e321
 800e25c:	0800e321 	.word	0x0800e321
 800e260:	0800e321 	.word	0x0800e321
 800e264:	0800e321 	.word	0x0800e321
 800e268:	0800e321 	.word	0x0800e321
 800e26c:	0800e2f9 	.word	0x0800e2f9
 800e270:	0800e321 	.word	0x0800e321
 800e274:	0800e321 	.word	0x0800e321
 800e278:	0800e321 	.word	0x0800e321
 800e27c:	0800e321 	.word	0x0800e321
 800e280:	0800e321 	.word	0x0800e321
 800e284:	0800e321 	.word	0x0800e321
 800e288:	0800e321 	.word	0x0800e321
 800e28c:	0800e301 	.word	0x0800e301
 800e290:	0800e321 	.word	0x0800e321
 800e294:	0800e321 	.word	0x0800e321
 800e298:	0800e321 	.word	0x0800e321
 800e29c:	0800e321 	.word	0x0800e321
 800e2a0:	0800e321 	.word	0x0800e321
 800e2a4:	0800e321 	.word	0x0800e321
 800e2a8:	0800e321 	.word	0x0800e321
 800e2ac:	0800e309 	.word	0x0800e309
 800e2b0:	0800e321 	.word	0x0800e321
 800e2b4:	0800e321 	.word	0x0800e321
 800e2b8:	0800e321 	.word	0x0800e321
 800e2bc:	0800e321 	.word	0x0800e321
 800e2c0:	0800e321 	.word	0x0800e321
 800e2c4:	0800e321 	.word	0x0800e321
 800e2c8:	0800e321 	.word	0x0800e321
 800e2cc:	0800e311 	.word	0x0800e311
 800e2d0:	0800e321 	.word	0x0800e321
 800e2d4:	0800e321 	.word	0x0800e321
 800e2d8:	0800e321 	.word	0x0800e321
 800e2dc:	0800e321 	.word	0x0800e321
 800e2e0:	0800e321 	.word	0x0800e321
 800e2e4:	0800e321 	.word	0x0800e321
 800e2e8:	0800e321 	.word	0x0800e321
 800e2ec:	0800e319 	.word	0x0800e319
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e222      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e2f8:	2304      	movs	r3, #4
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e21e      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e300:	2308      	movs	r3, #8
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e21a      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e308:	2310      	movs	r3, #16
 800e30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30e:	e216      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e310:	2320      	movs	r3, #32
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e316:	e212      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e318:	2340      	movs	r3, #64	; 0x40
 800e31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31e:	e20e      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e320:	2380      	movs	r3, #128	; 0x80
 800e322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e326:	e20a      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a69      	ldr	r2, [pc, #420]	; (800e4d4 <UART_SetConfig+0x33c>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d130      	bne.n	800e394 <UART_SetConfig+0x1fc>
 800e332:	4b67      	ldr	r3, [pc, #412]	; (800e4d0 <UART_SetConfig+0x338>)
 800e334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e336:	f003 0307 	and.w	r3, r3, #7
 800e33a:	2b05      	cmp	r3, #5
 800e33c:	d826      	bhi.n	800e38c <UART_SetConfig+0x1f4>
 800e33e:	a201      	add	r2, pc, #4	; (adr r2, 800e344 <UART_SetConfig+0x1ac>)
 800e340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e344:	0800e35d 	.word	0x0800e35d
 800e348:	0800e365 	.word	0x0800e365
 800e34c:	0800e36d 	.word	0x0800e36d
 800e350:	0800e375 	.word	0x0800e375
 800e354:	0800e37d 	.word	0x0800e37d
 800e358:	0800e385 	.word	0x0800e385
 800e35c:	2300      	movs	r3, #0
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e1ec      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e364:	2304      	movs	r3, #4
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36a:	e1e8      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e36c:	2308      	movs	r3, #8
 800e36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e372:	e1e4      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e374:	2310      	movs	r3, #16
 800e376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37a:	e1e0      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e37c:	2320      	movs	r3, #32
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e382:	e1dc      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e384:	2340      	movs	r3, #64	; 0x40
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38a:	e1d8      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e38c:	2380      	movs	r3, #128	; 0x80
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e392:	e1d4      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a4f      	ldr	r2, [pc, #316]	; (800e4d8 <UART_SetConfig+0x340>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d130      	bne.n	800e400 <UART_SetConfig+0x268>
 800e39e:	4b4c      	ldr	r3, [pc, #304]	; (800e4d0 <UART_SetConfig+0x338>)
 800e3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3a2:	f003 0307 	and.w	r3, r3, #7
 800e3a6:	2b05      	cmp	r3, #5
 800e3a8:	d826      	bhi.n	800e3f8 <UART_SetConfig+0x260>
 800e3aa:	a201      	add	r2, pc, #4	; (adr r2, 800e3b0 <UART_SetConfig+0x218>)
 800e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b0:	0800e3c9 	.word	0x0800e3c9
 800e3b4:	0800e3d1 	.word	0x0800e3d1
 800e3b8:	0800e3d9 	.word	0x0800e3d9
 800e3bc:	0800e3e1 	.word	0x0800e3e1
 800e3c0:	0800e3e9 	.word	0x0800e3e9
 800e3c4:	0800e3f1 	.word	0x0800e3f1
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e1b6      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e3d0:	2304      	movs	r3, #4
 800e3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d6:	e1b2      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e3d8:	2308      	movs	r3, #8
 800e3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3de:	e1ae      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e3e0:	2310      	movs	r3, #16
 800e3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e6:	e1aa      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e3e8:	2320      	movs	r3, #32
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ee:	e1a6      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e3f0:	2340      	movs	r3, #64	; 0x40
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f6:	e1a2      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e3f8:	2380      	movs	r3, #128	; 0x80
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e19e      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a35      	ldr	r2, [pc, #212]	; (800e4dc <UART_SetConfig+0x344>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d130      	bne.n	800e46c <UART_SetConfig+0x2d4>
 800e40a:	4b31      	ldr	r3, [pc, #196]	; (800e4d0 <UART_SetConfig+0x338>)
 800e40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e40e:	f003 0307 	and.w	r3, r3, #7
 800e412:	2b05      	cmp	r3, #5
 800e414:	d826      	bhi.n	800e464 <UART_SetConfig+0x2cc>
 800e416:	a201      	add	r2, pc, #4	; (adr r2, 800e41c <UART_SetConfig+0x284>)
 800e418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41c:	0800e435 	.word	0x0800e435
 800e420:	0800e43d 	.word	0x0800e43d
 800e424:	0800e445 	.word	0x0800e445
 800e428:	0800e44d 	.word	0x0800e44d
 800e42c:	0800e455 	.word	0x0800e455
 800e430:	0800e45d 	.word	0x0800e45d
 800e434:	2300      	movs	r3, #0
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43a:	e180      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e43c:	2304      	movs	r3, #4
 800e43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e442:	e17c      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e444:	2308      	movs	r3, #8
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44a:	e178      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e44c:	2310      	movs	r3, #16
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e452:	e174      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e454:	2320      	movs	r3, #32
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45a:	e170      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e45c:	2340      	movs	r3, #64	; 0x40
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e462:	e16c      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e464:	2380      	movs	r3, #128	; 0x80
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46a:	e168      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a1b      	ldr	r2, [pc, #108]	; (800e4e0 <UART_SetConfig+0x348>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d142      	bne.n	800e4fc <UART_SetConfig+0x364>
 800e476:	4b16      	ldr	r3, [pc, #88]	; (800e4d0 <UART_SetConfig+0x338>)
 800e478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e47a:	f003 0307 	and.w	r3, r3, #7
 800e47e:	2b05      	cmp	r3, #5
 800e480:	d838      	bhi.n	800e4f4 <UART_SetConfig+0x35c>
 800e482:	a201      	add	r2, pc, #4	; (adr r2, 800e488 <UART_SetConfig+0x2f0>)
 800e484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e488:	0800e4a1 	.word	0x0800e4a1
 800e48c:	0800e4a9 	.word	0x0800e4a9
 800e490:	0800e4b1 	.word	0x0800e4b1
 800e494:	0800e4b9 	.word	0x0800e4b9
 800e498:	0800e4e5 	.word	0x0800e4e5
 800e49c:	0800e4ed 	.word	0x0800e4ed
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a6:	e14a      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e4a8:	2304      	movs	r3, #4
 800e4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ae:	e146      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e4b0:	2308      	movs	r3, #8
 800e4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b6:	e142      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e4b8:	2310      	movs	r3, #16
 800e4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4be:	e13e      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e4c0:	cfff69f3 	.word	0xcfff69f3
 800e4c4:	58000c00 	.word	0x58000c00
 800e4c8:	11fff4ff 	.word	0x11fff4ff
 800e4cc:	40011000 	.word	0x40011000
 800e4d0:	58024400 	.word	0x58024400
 800e4d4:	40004400 	.word	0x40004400
 800e4d8:	40004800 	.word	0x40004800
 800e4dc:	40004c00 	.word	0x40004c00
 800e4e0:	40005000 	.word	0x40005000
 800e4e4:	2320      	movs	r3, #32
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ea:	e128      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e4ec:	2340      	movs	r3, #64	; 0x40
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f2:	e124      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e4f4:	2380      	movs	r3, #128	; 0x80
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fa:	e120      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4acb      	ldr	r2, [pc, #812]	; (800e830 <UART_SetConfig+0x698>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d176      	bne.n	800e5f4 <UART_SetConfig+0x45c>
 800e506:	4bcb      	ldr	r3, [pc, #812]	; (800e834 <UART_SetConfig+0x69c>)
 800e508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e50a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e50e:	2b28      	cmp	r3, #40	; 0x28
 800e510:	d86c      	bhi.n	800e5ec <UART_SetConfig+0x454>
 800e512:	a201      	add	r2, pc, #4	; (adr r2, 800e518 <UART_SetConfig+0x380>)
 800e514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e518:	0800e5bd 	.word	0x0800e5bd
 800e51c:	0800e5ed 	.word	0x0800e5ed
 800e520:	0800e5ed 	.word	0x0800e5ed
 800e524:	0800e5ed 	.word	0x0800e5ed
 800e528:	0800e5ed 	.word	0x0800e5ed
 800e52c:	0800e5ed 	.word	0x0800e5ed
 800e530:	0800e5ed 	.word	0x0800e5ed
 800e534:	0800e5ed 	.word	0x0800e5ed
 800e538:	0800e5c5 	.word	0x0800e5c5
 800e53c:	0800e5ed 	.word	0x0800e5ed
 800e540:	0800e5ed 	.word	0x0800e5ed
 800e544:	0800e5ed 	.word	0x0800e5ed
 800e548:	0800e5ed 	.word	0x0800e5ed
 800e54c:	0800e5ed 	.word	0x0800e5ed
 800e550:	0800e5ed 	.word	0x0800e5ed
 800e554:	0800e5ed 	.word	0x0800e5ed
 800e558:	0800e5cd 	.word	0x0800e5cd
 800e55c:	0800e5ed 	.word	0x0800e5ed
 800e560:	0800e5ed 	.word	0x0800e5ed
 800e564:	0800e5ed 	.word	0x0800e5ed
 800e568:	0800e5ed 	.word	0x0800e5ed
 800e56c:	0800e5ed 	.word	0x0800e5ed
 800e570:	0800e5ed 	.word	0x0800e5ed
 800e574:	0800e5ed 	.word	0x0800e5ed
 800e578:	0800e5d5 	.word	0x0800e5d5
 800e57c:	0800e5ed 	.word	0x0800e5ed
 800e580:	0800e5ed 	.word	0x0800e5ed
 800e584:	0800e5ed 	.word	0x0800e5ed
 800e588:	0800e5ed 	.word	0x0800e5ed
 800e58c:	0800e5ed 	.word	0x0800e5ed
 800e590:	0800e5ed 	.word	0x0800e5ed
 800e594:	0800e5ed 	.word	0x0800e5ed
 800e598:	0800e5dd 	.word	0x0800e5dd
 800e59c:	0800e5ed 	.word	0x0800e5ed
 800e5a0:	0800e5ed 	.word	0x0800e5ed
 800e5a4:	0800e5ed 	.word	0x0800e5ed
 800e5a8:	0800e5ed 	.word	0x0800e5ed
 800e5ac:	0800e5ed 	.word	0x0800e5ed
 800e5b0:	0800e5ed 	.word	0x0800e5ed
 800e5b4:	0800e5ed 	.word	0x0800e5ed
 800e5b8:	0800e5e5 	.word	0x0800e5e5
 800e5bc:	2301      	movs	r3, #1
 800e5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c2:	e0bc      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e5c4:	2304      	movs	r3, #4
 800e5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ca:	e0b8      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e5cc:	2308      	movs	r3, #8
 800e5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d2:	e0b4      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e5d4:	2310      	movs	r3, #16
 800e5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5da:	e0b0      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e5dc:	2320      	movs	r3, #32
 800e5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e2:	e0ac      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e5e4:	2340      	movs	r3, #64	; 0x40
 800e5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ea:	e0a8      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e5ec:	2380      	movs	r3, #128	; 0x80
 800e5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f2:	e0a4      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a8f      	ldr	r2, [pc, #572]	; (800e838 <UART_SetConfig+0x6a0>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d130      	bne.n	800e660 <UART_SetConfig+0x4c8>
 800e5fe:	4b8d      	ldr	r3, [pc, #564]	; (800e834 <UART_SetConfig+0x69c>)
 800e600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e602:	f003 0307 	and.w	r3, r3, #7
 800e606:	2b05      	cmp	r3, #5
 800e608:	d826      	bhi.n	800e658 <UART_SetConfig+0x4c0>
 800e60a:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <UART_SetConfig+0x478>)
 800e60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e610:	0800e629 	.word	0x0800e629
 800e614:	0800e631 	.word	0x0800e631
 800e618:	0800e639 	.word	0x0800e639
 800e61c:	0800e641 	.word	0x0800e641
 800e620:	0800e649 	.word	0x0800e649
 800e624:	0800e651 	.word	0x0800e651
 800e628:	2300      	movs	r3, #0
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62e:	e086      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e630:	2304      	movs	r3, #4
 800e632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e636:	e082      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e638:	2308      	movs	r3, #8
 800e63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63e:	e07e      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e640:	2310      	movs	r3, #16
 800e642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e646:	e07a      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e648:	2320      	movs	r3, #32
 800e64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64e:	e076      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e650:	2340      	movs	r3, #64	; 0x40
 800e652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e656:	e072      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e658:	2380      	movs	r3, #128	; 0x80
 800e65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65e:	e06e      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a75      	ldr	r2, [pc, #468]	; (800e83c <UART_SetConfig+0x6a4>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d130      	bne.n	800e6cc <UART_SetConfig+0x534>
 800e66a:	4b72      	ldr	r3, [pc, #456]	; (800e834 <UART_SetConfig+0x69c>)
 800e66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e66e:	f003 0307 	and.w	r3, r3, #7
 800e672:	2b05      	cmp	r3, #5
 800e674:	d826      	bhi.n	800e6c4 <UART_SetConfig+0x52c>
 800e676:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <UART_SetConfig+0x4e4>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e695 	.word	0x0800e695
 800e680:	0800e69d 	.word	0x0800e69d
 800e684:	0800e6a5 	.word	0x0800e6a5
 800e688:	0800e6ad 	.word	0x0800e6ad
 800e68c:	0800e6b5 	.word	0x0800e6b5
 800e690:	0800e6bd 	.word	0x0800e6bd
 800e694:	2300      	movs	r3, #0
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e050      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e69c:	2304      	movs	r3, #4
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a2:	e04c      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e6a4:	2308      	movs	r3, #8
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6aa:	e048      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e6ac:	2310      	movs	r3, #16
 800e6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b2:	e044      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e6b4:	2320      	movs	r3, #32
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e040      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e6bc:	2340      	movs	r3, #64	; 0x40
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e03c      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e6c4:	2380      	movs	r3, #128	; 0x80
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e038      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a5b      	ldr	r2, [pc, #364]	; (800e840 <UART_SetConfig+0x6a8>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d130      	bne.n	800e738 <UART_SetConfig+0x5a0>
 800e6d6:	4b57      	ldr	r3, [pc, #348]	; (800e834 <UART_SetConfig+0x69c>)
 800e6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6da:	f003 0307 	and.w	r3, r3, #7
 800e6de:	2b05      	cmp	r3, #5
 800e6e0:	d826      	bhi.n	800e730 <UART_SetConfig+0x598>
 800e6e2:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <UART_SetConfig+0x550>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e701 	.word	0x0800e701
 800e6ec:	0800e709 	.word	0x0800e709
 800e6f0:	0800e711 	.word	0x0800e711
 800e6f4:	0800e719 	.word	0x0800e719
 800e6f8:	0800e721 	.word	0x0800e721
 800e6fc:	0800e729 	.word	0x0800e729
 800e700:	2302      	movs	r3, #2
 800e702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e706:	e01a      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e708:	2304      	movs	r3, #4
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e016      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e710:	2308      	movs	r3, #8
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e012      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e718:	2310      	movs	r3, #16
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71e:	e00e      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e720:	2320      	movs	r3, #32
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e00a      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e728:	2340      	movs	r3, #64	; 0x40
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e006      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e730:	2380      	movs	r3, #128	; 0x80
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e002      	b.n	800e73e <UART_SetConfig+0x5a6>
 800e738:	2380      	movs	r3, #128	; 0x80
 800e73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a3f      	ldr	r2, [pc, #252]	; (800e840 <UART_SetConfig+0x6a8>)
 800e744:	4293      	cmp	r3, r2
 800e746:	f040 80f8 	bne.w	800e93a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e74a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e74e:	2b20      	cmp	r3, #32
 800e750:	dc46      	bgt.n	800e7e0 <UART_SetConfig+0x648>
 800e752:	2b02      	cmp	r3, #2
 800e754:	f2c0 8082 	blt.w	800e85c <UART_SetConfig+0x6c4>
 800e758:	3b02      	subs	r3, #2
 800e75a:	2b1e      	cmp	r3, #30
 800e75c:	d87e      	bhi.n	800e85c <UART_SetConfig+0x6c4>
 800e75e:	a201      	add	r2, pc, #4	; (adr r2, 800e764 <UART_SetConfig+0x5cc>)
 800e760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e764:	0800e7e7 	.word	0x0800e7e7
 800e768:	0800e85d 	.word	0x0800e85d
 800e76c:	0800e7ef 	.word	0x0800e7ef
 800e770:	0800e85d 	.word	0x0800e85d
 800e774:	0800e85d 	.word	0x0800e85d
 800e778:	0800e85d 	.word	0x0800e85d
 800e77c:	0800e7ff 	.word	0x0800e7ff
 800e780:	0800e85d 	.word	0x0800e85d
 800e784:	0800e85d 	.word	0x0800e85d
 800e788:	0800e85d 	.word	0x0800e85d
 800e78c:	0800e85d 	.word	0x0800e85d
 800e790:	0800e85d 	.word	0x0800e85d
 800e794:	0800e85d 	.word	0x0800e85d
 800e798:	0800e85d 	.word	0x0800e85d
 800e79c:	0800e80f 	.word	0x0800e80f
 800e7a0:	0800e85d 	.word	0x0800e85d
 800e7a4:	0800e85d 	.word	0x0800e85d
 800e7a8:	0800e85d 	.word	0x0800e85d
 800e7ac:	0800e85d 	.word	0x0800e85d
 800e7b0:	0800e85d 	.word	0x0800e85d
 800e7b4:	0800e85d 	.word	0x0800e85d
 800e7b8:	0800e85d 	.word	0x0800e85d
 800e7bc:	0800e85d 	.word	0x0800e85d
 800e7c0:	0800e85d 	.word	0x0800e85d
 800e7c4:	0800e85d 	.word	0x0800e85d
 800e7c8:	0800e85d 	.word	0x0800e85d
 800e7cc:	0800e85d 	.word	0x0800e85d
 800e7d0:	0800e85d 	.word	0x0800e85d
 800e7d4:	0800e85d 	.word	0x0800e85d
 800e7d8:	0800e85d 	.word	0x0800e85d
 800e7dc:	0800e84f 	.word	0x0800e84f
 800e7e0:	2b40      	cmp	r3, #64	; 0x40
 800e7e2:	d037      	beq.n	800e854 <UART_SetConfig+0x6bc>
 800e7e4:	e03a      	b.n	800e85c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e7e6:	f7fc fc53 	bl	800b090 <HAL_RCCEx_GetD3PCLK1Freq>
 800e7ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7ec:	e03c      	b.n	800e868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fc fc62 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7fc:	e034      	b.n	800e868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7fe:	f107 0318 	add.w	r3, r7, #24
 800e802:	4618      	mov	r0, r3
 800e804:	f7fc fdae 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e80c:	e02c      	b.n	800e868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e80e:	4b09      	ldr	r3, [pc, #36]	; (800e834 <UART_SetConfig+0x69c>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 0320 	and.w	r3, r3, #32
 800e816:	2b00      	cmp	r3, #0
 800e818:	d016      	beq.n	800e848 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e81a:	4b06      	ldr	r3, [pc, #24]	; (800e834 <UART_SetConfig+0x69c>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	08db      	lsrs	r3, r3, #3
 800e820:	f003 0303 	and.w	r3, r3, #3
 800e824:	4a07      	ldr	r2, [pc, #28]	; (800e844 <UART_SetConfig+0x6ac>)
 800e826:	fa22 f303 	lsr.w	r3, r2, r3
 800e82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e82c:	e01c      	b.n	800e868 <UART_SetConfig+0x6d0>
 800e82e:	bf00      	nop
 800e830:	40011400 	.word	0x40011400
 800e834:	58024400 	.word	0x58024400
 800e838:	40007800 	.word	0x40007800
 800e83c:	40007c00 	.word	0x40007c00
 800e840:	58000c00 	.word	0x58000c00
 800e844:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e848:	4b9d      	ldr	r3, [pc, #628]	; (800eac0 <UART_SetConfig+0x928>)
 800e84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e84c:	e00c      	b.n	800e868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e84e:	4b9d      	ldr	r3, [pc, #628]	; (800eac4 <UART_SetConfig+0x92c>)
 800e850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e852:	e009      	b.n	800e868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e85a:	e005      	b.n	800e868 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e85c:	2300      	movs	r3, #0
 800e85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e866:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 81de 	beq.w	800ec2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e874:	4a94      	ldr	r2, [pc, #592]	; (800eac8 <UART_SetConfig+0x930>)
 800e876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e87a:	461a      	mov	r2, r3
 800e87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e882:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	685a      	ldr	r2, [r3, #4]
 800e888:	4613      	mov	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e890:	429a      	cmp	r2, r3
 800e892:	d305      	bcc.n	800e8a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e89a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d903      	bls.n	800e8a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8a6:	e1c1      	b.n	800ec2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	60bb      	str	r3, [r7, #8]
 800e8ae:	60fa      	str	r2, [r7, #12]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	4a84      	ldr	r2, [pc, #528]	; (800eac8 <UART_SetConfig+0x930>)
 800e8b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	2200      	movs	r2, #0
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e8ca:	f7f1 fd59 	bl	8000380 <__aeabi_uldivmod>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	f04f 0200 	mov.w	r2, #0
 800e8da:	f04f 0300 	mov.w	r3, #0
 800e8de:	020b      	lsls	r3, r1, #8
 800e8e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e8e4:	0202      	lsls	r2, r0, #8
 800e8e6:	6979      	ldr	r1, [r7, #20]
 800e8e8:	6849      	ldr	r1, [r1, #4]
 800e8ea:	0849      	lsrs	r1, r1, #1
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	4605      	mov	r5, r0
 800e8f2:	eb12 0804 	adds.w	r8, r2, r4
 800e8f6:	eb43 0905 	adc.w	r9, r3, r5
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	469a      	mov	sl, r3
 800e902:	4693      	mov	fp, r2
 800e904:	4652      	mov	r2, sl
 800e906:	465b      	mov	r3, fp
 800e908:	4640      	mov	r0, r8
 800e90a:	4649      	mov	r1, r9
 800e90c:	f7f1 fd38 	bl	8000380 <__aeabi_uldivmod>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	4613      	mov	r3, r2
 800e916:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e91e:	d308      	bcc.n	800e932 <UART_SetConfig+0x79a>
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e926:	d204      	bcs.n	800e932 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e92e:	60da      	str	r2, [r3, #12]
 800e930:	e17c      	b.n	800ec2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e932:	2301      	movs	r3, #1
 800e934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e938:	e178      	b.n	800ec2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	69db      	ldr	r3, [r3, #28]
 800e93e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e942:	f040 80c5 	bne.w	800ead0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e946:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e94a:	2b20      	cmp	r3, #32
 800e94c:	dc48      	bgt.n	800e9e0 <UART_SetConfig+0x848>
 800e94e:	2b00      	cmp	r3, #0
 800e950:	db7b      	blt.n	800ea4a <UART_SetConfig+0x8b2>
 800e952:	2b20      	cmp	r3, #32
 800e954:	d879      	bhi.n	800ea4a <UART_SetConfig+0x8b2>
 800e956:	a201      	add	r2, pc, #4	; (adr r2, 800e95c <UART_SetConfig+0x7c4>)
 800e958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e95c:	0800e9e7 	.word	0x0800e9e7
 800e960:	0800e9ef 	.word	0x0800e9ef
 800e964:	0800ea4b 	.word	0x0800ea4b
 800e968:	0800ea4b 	.word	0x0800ea4b
 800e96c:	0800e9f7 	.word	0x0800e9f7
 800e970:	0800ea4b 	.word	0x0800ea4b
 800e974:	0800ea4b 	.word	0x0800ea4b
 800e978:	0800ea4b 	.word	0x0800ea4b
 800e97c:	0800ea07 	.word	0x0800ea07
 800e980:	0800ea4b 	.word	0x0800ea4b
 800e984:	0800ea4b 	.word	0x0800ea4b
 800e988:	0800ea4b 	.word	0x0800ea4b
 800e98c:	0800ea4b 	.word	0x0800ea4b
 800e990:	0800ea4b 	.word	0x0800ea4b
 800e994:	0800ea4b 	.word	0x0800ea4b
 800e998:	0800ea4b 	.word	0x0800ea4b
 800e99c:	0800ea17 	.word	0x0800ea17
 800e9a0:	0800ea4b 	.word	0x0800ea4b
 800e9a4:	0800ea4b 	.word	0x0800ea4b
 800e9a8:	0800ea4b 	.word	0x0800ea4b
 800e9ac:	0800ea4b 	.word	0x0800ea4b
 800e9b0:	0800ea4b 	.word	0x0800ea4b
 800e9b4:	0800ea4b 	.word	0x0800ea4b
 800e9b8:	0800ea4b 	.word	0x0800ea4b
 800e9bc:	0800ea4b 	.word	0x0800ea4b
 800e9c0:	0800ea4b 	.word	0x0800ea4b
 800e9c4:	0800ea4b 	.word	0x0800ea4b
 800e9c8:	0800ea4b 	.word	0x0800ea4b
 800e9cc:	0800ea4b 	.word	0x0800ea4b
 800e9d0:	0800ea4b 	.word	0x0800ea4b
 800e9d4:	0800ea4b 	.word	0x0800ea4b
 800e9d8:	0800ea4b 	.word	0x0800ea4b
 800e9dc:	0800ea3d 	.word	0x0800ea3d
 800e9e0:	2b40      	cmp	r3, #64	; 0x40
 800e9e2:	d02e      	beq.n	800ea42 <UART_SetConfig+0x8aa>
 800e9e4:	e031      	b.n	800ea4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9e6:	f7fa fb5b 	bl	80090a0 <HAL_RCC_GetPCLK1Freq>
 800e9ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9ec:	e033      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9ee:	f7fa fb6d 	bl	80090cc <HAL_RCC_GetPCLK2Freq>
 800e9f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9f4:	e02f      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fc fb5e 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea04:	e027      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea06:	f107 0318 	add.w	r3, r7, #24
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fc fcaa 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea14:	e01f      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea16:	4b2d      	ldr	r3, [pc, #180]	; (800eacc <UART_SetConfig+0x934>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f003 0320 	and.w	r3, r3, #32
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea22:	4b2a      	ldr	r3, [pc, #168]	; (800eacc <UART_SetConfig+0x934>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	08db      	lsrs	r3, r3, #3
 800ea28:	f003 0303 	and.w	r3, r3, #3
 800ea2c:	4a24      	ldr	r2, [pc, #144]	; (800eac0 <UART_SetConfig+0x928>)
 800ea2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea34:	e00f      	b.n	800ea56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ea36:	4b22      	ldr	r3, [pc, #136]	; (800eac0 <UART_SetConfig+0x928>)
 800ea38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea3a:	e00c      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea3c:	4b21      	ldr	r3, [pc, #132]	; (800eac4 <UART_SetConfig+0x92c>)
 800ea3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea40:	e009      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea48:	e005      	b.n	800ea56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f000 80e7 	beq.w	800ec2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea62:	4a19      	ldr	r2, [pc, #100]	; (800eac8 <UART_SetConfig+0x930>)
 800ea64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea70:	005a      	lsls	r2, r3, #1
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	085b      	lsrs	r3, r3, #1
 800ea78:	441a      	add	r2, r3
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea86:	2b0f      	cmp	r3, #15
 800ea88:	d916      	bls.n	800eab8 <UART_SetConfig+0x920>
 800ea8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea90:	d212      	bcs.n	800eab8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	f023 030f 	bic.w	r3, r3, #15
 800ea9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	085b      	lsrs	r3, r3, #1
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	f003 0307 	and.w	r3, r3, #7
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eab4:	60da      	str	r2, [r3, #12]
 800eab6:	e0b9      	b.n	800ec2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eab8:	2301      	movs	r3, #1
 800eaba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eabe:	e0b5      	b.n	800ec2c <UART_SetConfig+0xa94>
 800eac0:	03d09000 	.word	0x03d09000
 800eac4:	003d0900 	.word	0x003d0900
 800eac8:	08014aec 	.word	0x08014aec
 800eacc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ead0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ead4:	2b20      	cmp	r3, #32
 800ead6:	dc49      	bgt.n	800eb6c <UART_SetConfig+0x9d4>
 800ead8:	2b00      	cmp	r3, #0
 800eada:	db7c      	blt.n	800ebd6 <UART_SetConfig+0xa3e>
 800eadc:	2b20      	cmp	r3, #32
 800eade:	d87a      	bhi.n	800ebd6 <UART_SetConfig+0xa3e>
 800eae0:	a201      	add	r2, pc, #4	; (adr r2, 800eae8 <UART_SetConfig+0x950>)
 800eae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae6:	bf00      	nop
 800eae8:	0800eb73 	.word	0x0800eb73
 800eaec:	0800eb7b 	.word	0x0800eb7b
 800eaf0:	0800ebd7 	.word	0x0800ebd7
 800eaf4:	0800ebd7 	.word	0x0800ebd7
 800eaf8:	0800eb83 	.word	0x0800eb83
 800eafc:	0800ebd7 	.word	0x0800ebd7
 800eb00:	0800ebd7 	.word	0x0800ebd7
 800eb04:	0800ebd7 	.word	0x0800ebd7
 800eb08:	0800eb93 	.word	0x0800eb93
 800eb0c:	0800ebd7 	.word	0x0800ebd7
 800eb10:	0800ebd7 	.word	0x0800ebd7
 800eb14:	0800ebd7 	.word	0x0800ebd7
 800eb18:	0800ebd7 	.word	0x0800ebd7
 800eb1c:	0800ebd7 	.word	0x0800ebd7
 800eb20:	0800ebd7 	.word	0x0800ebd7
 800eb24:	0800ebd7 	.word	0x0800ebd7
 800eb28:	0800eba3 	.word	0x0800eba3
 800eb2c:	0800ebd7 	.word	0x0800ebd7
 800eb30:	0800ebd7 	.word	0x0800ebd7
 800eb34:	0800ebd7 	.word	0x0800ebd7
 800eb38:	0800ebd7 	.word	0x0800ebd7
 800eb3c:	0800ebd7 	.word	0x0800ebd7
 800eb40:	0800ebd7 	.word	0x0800ebd7
 800eb44:	0800ebd7 	.word	0x0800ebd7
 800eb48:	0800ebd7 	.word	0x0800ebd7
 800eb4c:	0800ebd7 	.word	0x0800ebd7
 800eb50:	0800ebd7 	.word	0x0800ebd7
 800eb54:	0800ebd7 	.word	0x0800ebd7
 800eb58:	0800ebd7 	.word	0x0800ebd7
 800eb5c:	0800ebd7 	.word	0x0800ebd7
 800eb60:	0800ebd7 	.word	0x0800ebd7
 800eb64:	0800ebd7 	.word	0x0800ebd7
 800eb68:	0800ebc9 	.word	0x0800ebc9
 800eb6c:	2b40      	cmp	r3, #64	; 0x40
 800eb6e:	d02e      	beq.n	800ebce <UART_SetConfig+0xa36>
 800eb70:	e031      	b.n	800ebd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb72:	f7fa fa95 	bl	80090a0 <HAL_RCC_GetPCLK1Freq>
 800eb76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb78:	e033      	b.n	800ebe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb7a:	f7fa faa7 	bl	80090cc <HAL_RCC_GetPCLK2Freq>
 800eb7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb80:	e02f      	b.n	800ebe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fc fa98 	bl	800b0bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb90:	e027      	b.n	800ebe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb92:	f107 0318 	add.w	r3, r7, #24
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fc fbe4 	bl	800b364 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eba0:	e01f      	b.n	800ebe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eba2:	4b2d      	ldr	r3, [pc, #180]	; (800ec58 <UART_SetConfig+0xac0>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f003 0320 	and.w	r3, r3, #32
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d009      	beq.n	800ebc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebae:	4b2a      	ldr	r3, [pc, #168]	; (800ec58 <UART_SetConfig+0xac0>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	08db      	lsrs	r3, r3, #3
 800ebb4:	f003 0303 	and.w	r3, r3, #3
 800ebb8:	4a28      	ldr	r2, [pc, #160]	; (800ec5c <UART_SetConfig+0xac4>)
 800ebba:	fa22 f303 	lsr.w	r3, r2, r3
 800ebbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebc0:	e00f      	b.n	800ebe2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ebc2:	4b26      	ldr	r3, [pc, #152]	; (800ec5c <UART_SetConfig+0xac4>)
 800ebc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebc6:	e00c      	b.n	800ebe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebc8:	4b25      	ldr	r3, [pc, #148]	; (800ec60 <UART_SetConfig+0xac8>)
 800ebca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebcc:	e009      	b.n	800ebe2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd4:	e005      	b.n	800ebe2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebe0:	bf00      	nop
    }

    if (pclk != 0U)
 800ebe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d021      	beq.n	800ec2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebec:	4a1d      	ldr	r2, [pc, #116]	; (800ec64 <UART_SetConfig+0xacc>)
 800ebee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	085b      	lsrs	r3, r3, #1
 800ec00:	441a      	add	r2, r3
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0e:	2b0f      	cmp	r3, #15
 800ec10:	d909      	bls.n	800ec26 <UART_SetConfig+0xa8e>
 800ec12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec18:	d205      	bcs.n	800ec26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60da      	str	r2, [r3, #12]
 800ec24:	e002      	b.n	800ec2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec26:	2301      	movs	r3, #1
 800ec28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	2200      	movs	r2, #0
 800ec46:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ec48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3748      	adds	r7, #72	; 0x48
 800ec50:	46bd      	mov	sp, r7
 800ec52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec56:	bf00      	nop
 800ec58:	58024400 	.word	0x58024400
 800ec5c:	03d09000 	.word	0x03d09000
 800ec60:	003d0900 	.word	0x003d0900
 800ec64:	08014aec 	.word	0x08014aec

0800ec68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec74:	f003 0308 	and.w	r3, r3, #8
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00a      	beq.n	800ec92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec96:	f003 0301 	and.w	r3, r3, #1
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb8:	f003 0302 	and.w	r3, r3, #2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00a      	beq.n	800ecd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	430a      	orrs	r2, r1
 800ecd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecda:	f003 0304 	and.w	r3, r3, #4
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00a      	beq.n	800ecf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfc:	f003 0310 	and.w	r3, r3, #16
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00a      	beq.n	800ed1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	430a      	orrs	r2, r1
 800ed18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1e:	f003 0320 	and.w	r3, r3, #32
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00a      	beq.n	800ed3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	430a      	orrs	r2, r1
 800ed3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d01a      	beq.n	800ed7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	430a      	orrs	r2, r1
 800ed5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed66:	d10a      	bne.n	800ed7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	430a      	orrs	r2, r1
 800ed7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00a      	beq.n	800eda0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	430a      	orrs	r2, r1
 800ed9e:	605a      	str	r2, [r3, #4]
  }
}
 800eda0:	bf00      	nop
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b098      	sub	sp, #96	; 0x60
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edbc:	f7f3 ff1a 	bl	8002bf4 <HAL_GetTick>
 800edc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f003 0308 	and.w	r3, r3, #8
 800edcc:	2b08      	cmp	r3, #8
 800edce:	d12f      	bne.n	800ee30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edd8:	2200      	movs	r2, #0
 800edda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f88e 	bl	800ef00 <UART_WaitOnFlagUntilTimeout>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d022      	beq.n	800ee30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf2:	e853 3f00 	ldrex	r3, [r3]
 800edf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800edf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edfe:	653b      	str	r3, [r7, #80]	; 0x50
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	461a      	mov	r2, r3
 800ee06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee08:	647b      	str	r3, [r7, #68]	; 0x44
 800ee0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee10:	e841 2300 	strex	r3, r2, [r1]
 800ee14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1e6      	bne.n	800edea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2220      	movs	r2, #32
 800ee20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee2c:	2303      	movs	r3, #3
 800ee2e:	e063      	b.n	800eef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f003 0304 	and.w	r3, r3, #4
 800ee3a:	2b04      	cmp	r3, #4
 800ee3c:	d149      	bne.n	800eed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee46:	2200      	movs	r2, #0
 800ee48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f857 	bl	800ef00 <UART_WaitOnFlagUntilTimeout>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d03c      	beq.n	800eed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	e853 3f00 	ldrex	r3, [r3]
 800ee64:	623b      	str	r3, [r7, #32]
   return(result);
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee76:	633b      	str	r3, [r7, #48]	; 0x30
 800ee78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee7e:	e841 2300 	strex	r3, r2, [r1]
 800ee82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1e6      	bne.n	800ee58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	3308      	adds	r3, #8
 800ee90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	e853 3f00 	ldrex	r3, [r3]
 800ee98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f023 0301 	bic.w	r3, r3, #1
 800eea0:	64bb      	str	r3, [r7, #72]	; 0x48
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3308      	adds	r3, #8
 800eea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeaa:	61fa      	str	r2, [r7, #28]
 800eeac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeae:	69b9      	ldr	r1, [r7, #24]
 800eeb0:	69fa      	ldr	r2, [r7, #28]
 800eeb2:	e841 2300 	strex	r3, r2, [r1]
 800eeb6:	617b      	str	r3, [r7, #20]
   return(result);
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1e5      	bne.n	800ee8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2220      	movs	r2, #32
 800eec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eece:	2303      	movs	r3, #3
 800eed0:	e012      	b.n	800eef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2220      	movs	r2, #32
 800eed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2220      	movs	r2, #32
 800eede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3758      	adds	r7, #88	; 0x58
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	603b      	str	r3, [r7, #0]
 800ef0c:	4613      	mov	r3, r2
 800ef0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef10:	e04f      	b.n	800efb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef18:	d04b      	beq.n	800efb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef1a:	f7f3 fe6b 	bl	8002bf4 <HAL_GetTick>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	69ba      	ldr	r2, [r7, #24]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d302      	bcc.n	800ef30 <UART_WaitOnFlagUntilTimeout+0x30>
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d101      	bne.n	800ef34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef30:	2303      	movs	r3, #3
 800ef32:	e04e      	b.n	800efd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f003 0304 	and.w	r3, r3, #4
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d037      	beq.n	800efb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	2b80      	cmp	r3, #128	; 0x80
 800ef46:	d034      	beq.n	800efb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2b40      	cmp	r3, #64	; 0x40
 800ef4c:	d031      	beq.n	800efb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	69db      	ldr	r3, [r3, #28]
 800ef54:	f003 0308 	and.w	r3, r3, #8
 800ef58:	2b08      	cmp	r3, #8
 800ef5a:	d110      	bne.n	800ef7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2208      	movs	r2, #8
 800ef62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f000 f95b 	bl	800f220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2208      	movs	r2, #8
 800ef6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e029      	b.n	800efd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	69db      	ldr	r3, [r3, #28]
 800ef84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef8c:	d111      	bne.n	800efb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f000 f941 	bl	800f220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2220      	movs	r2, #32
 800efa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2200      	movs	r2, #0
 800efaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e00f      	b.n	800efd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	69da      	ldr	r2, [r3, #28]
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	4013      	ands	r3, r2
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	bf0c      	ite	eq
 800efc2:	2301      	moveq	r3, #1
 800efc4:	2300      	movne	r3, #0
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	461a      	mov	r2, r3
 800efca:	79fb      	ldrb	r3, [r7, #7]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d0a0      	beq.n	800ef12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
	...

0800efdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800efdc:	b480      	push	{r7}
 800efde:	b0a3      	sub	sp, #140	; 0x8c
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	4613      	mov	r3, r2
 800efe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	68ba      	ldr	r2, [r7, #8]
 800efee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	88fa      	ldrh	r2, [r7, #6]
 800eff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	88fa      	ldrh	r2, [r7, #6]
 800effc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f00e:	d10e      	bne.n	800f02e <UART_Start_Receive_IT+0x52>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	691b      	ldr	r3, [r3, #16]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d105      	bne.n	800f024 <UART_Start_Receive_IT+0x48>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f01e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f022:	e02d      	b.n	800f080 <UART_Start_Receive_IT+0xa4>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	22ff      	movs	r2, #255	; 0xff
 800f028:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f02c:	e028      	b.n	800f080 <UART_Start_Receive_IT+0xa4>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10d      	bne.n	800f052 <UART_Start_Receive_IT+0x76>
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d104      	bne.n	800f048 <UART_Start_Receive_IT+0x6c>
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	22ff      	movs	r2, #255	; 0xff
 800f042:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f046:	e01b      	b.n	800f080 <UART_Start_Receive_IT+0xa4>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	227f      	movs	r2, #127	; 0x7f
 800f04c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f050:	e016      	b.n	800f080 <UART_Start_Receive_IT+0xa4>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f05a:	d10d      	bne.n	800f078 <UART_Start_Receive_IT+0x9c>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d104      	bne.n	800f06e <UART_Start_Receive_IT+0x92>
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	227f      	movs	r2, #127	; 0x7f
 800f068:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f06c:	e008      	b.n	800f080 <UART_Start_Receive_IT+0xa4>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	223f      	movs	r2, #63	; 0x3f
 800f072:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f076:	e003      	b.n	800f080 <UART_Start_Receive_IT+0xa4>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2222      	movs	r2, #34	; 0x22
 800f08c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	3308      	adds	r3, #8
 800f096:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f09a:	e853 3f00 	ldrex	r3, [r3]
 800f09e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f0a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0a2:	f043 0301 	orr.w	r3, r3, #1
 800f0a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	3308      	adds	r3, #8
 800f0b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f0b4:	673a      	str	r2, [r7, #112]	; 0x70
 800f0b6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f0ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f0bc:	e841 2300 	strex	r3, r2, [r1]
 800f0c0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f0c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1e3      	bne.n	800f090 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0d0:	d14f      	bne.n	800f172 <UART_Start_Receive_IT+0x196>
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f0d8:	88fa      	ldrh	r2, [r7, #6]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d349      	bcc.n	800f172 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	689b      	ldr	r3, [r3, #8]
 800f0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0e6:	d107      	bne.n	800f0f8 <UART_Start_Receive_IT+0x11c>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d103      	bne.n	800f0f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	4a47      	ldr	r2, [pc, #284]	; (800f210 <UART_Start_Receive_IT+0x234>)
 800f0f4:	675a      	str	r2, [r3, #116]	; 0x74
 800f0f6:	e002      	b.n	800f0fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	4a46      	ldr	r2, [pc, #280]	; (800f214 <UART_Start_Receive_IT+0x238>)
 800f0fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d01a      	beq.n	800f13c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f10e:	e853 3f00 	ldrex	r3, [r3]
 800f112:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f11a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f12a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f12e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f130:	e841 2300 	strex	r3, r2, [r1]
 800f134:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1e4      	bne.n	800f106 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3308      	adds	r3, #8
 800f142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f146:	e853 3f00 	ldrex	r3, [r3]
 800f14a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f152:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	3308      	adds	r3, #8
 800f15a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f15c:	64ba      	str	r2, [r7, #72]	; 0x48
 800f15e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f160:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f164:	e841 2300 	strex	r3, r2, [r1]
 800f168:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d1e5      	bne.n	800f13c <UART_Start_Receive_IT+0x160>
 800f170:	e046      	b.n	800f200 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f17a:	d107      	bne.n	800f18c <UART_Start_Receive_IT+0x1b0>
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	691b      	ldr	r3, [r3, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d103      	bne.n	800f18c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	4a24      	ldr	r2, [pc, #144]	; (800f218 <UART_Start_Receive_IT+0x23c>)
 800f188:	675a      	str	r2, [r3, #116]	; 0x74
 800f18a:	e002      	b.n	800f192 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	4a23      	ldr	r2, [pc, #140]	; (800f21c <UART_Start_Receive_IT+0x240>)
 800f190:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	691b      	ldr	r3, [r3, #16]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d019      	beq.n	800f1ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a2:	e853 3f00 	ldrex	r3, [r3]
 800f1a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f1ae:	677b      	str	r3, [r7, #116]	; 0x74
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800f1ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1c0:	e841 2300 	strex	r3, r2, [r1]
 800f1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e6      	bne.n	800f19a <UART_Start_Receive_IT+0x1be>
 800f1cc:	e018      	b.n	800f200 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	e853 3f00 	ldrex	r3, [r3]
 800f1da:	613b      	str	r3, [r7, #16]
   return(result);
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	f043 0320 	orr.w	r3, r3, #32
 800f1e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1ec:	623b      	str	r3, [r7, #32]
 800f1ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f0:	69f9      	ldr	r1, [r7, #28]
 800f1f2:	6a3a      	ldr	r2, [r7, #32]
 800f1f4:	e841 2300 	strex	r3, r2, [r1]
 800f1f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d1e6      	bne.n	800f1ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	378c      	adds	r7, #140	; 0x8c
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	0800fa41 	.word	0x0800fa41
 800f214:	0800f6e1 	.word	0x0800f6e1
 800f218:	0800f529 	.word	0x0800f529
 800f21c:	0800f371 	.word	0x0800f371

0800f220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f220:	b480      	push	{r7}
 800f222:	b095      	sub	sp, #84	; 0x54
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f230:	e853 3f00 	ldrex	r3, [r3]
 800f234:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f23c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f246:	643b      	str	r3, [r7, #64]	; 0x40
 800f248:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f24c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f24e:	e841 2300 	strex	r3, r2, [r1]
 800f252:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1e6      	bne.n	800f228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3308      	adds	r3, #8
 800f260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	e853 3f00 	ldrex	r3, [r3]
 800f268:	61fb      	str	r3, [r7, #28]
   return(result);
 800f26a:	69fa      	ldr	r2, [r7, #28]
 800f26c:	4b1e      	ldr	r3, [pc, #120]	; (800f2e8 <UART_EndRxTransfer+0xc8>)
 800f26e:	4013      	ands	r3, r2
 800f270:	64bb      	str	r3, [r7, #72]	; 0x48
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	3308      	adds	r3, #8
 800f278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f27a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f27c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f27e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f282:	e841 2300 	strex	r3, r2, [r1]
 800f286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1e5      	bne.n	800f25a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f292:	2b01      	cmp	r3, #1
 800f294:	d118      	bne.n	800f2c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	e853 3f00 	ldrex	r3, [r3]
 800f2a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	f023 0310 	bic.w	r3, r3, #16
 800f2aa:	647b      	str	r3, [r7, #68]	; 0x44
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2b4:	61bb      	str	r3, [r7, #24]
 800f2b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b8:	6979      	ldr	r1, [r7, #20]
 800f2ba:	69ba      	ldr	r2, [r7, #24]
 800f2bc:	e841 2300 	strex	r3, r2, [r1]
 800f2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1e6      	bne.n	800f296 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2220      	movs	r2, #32
 800f2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f2dc:	bf00      	nop
 800f2de:	3754      	adds	r7, #84	; 0x54
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	effffffe 	.word	0xeffffffe

0800f2ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2200      	movs	r2, #0
 800f306:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f7fe ff2e 	bl	800e16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f310:	bf00      	nop
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b088      	sub	sp, #32
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	e853 3f00 	ldrex	r3, [r3]
 800f32c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f334:	61fb      	str	r3, [r7, #28]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	61bb      	str	r3, [r7, #24]
 800f340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f342:	6979      	ldr	r1, [r7, #20]
 800f344:	69ba      	ldr	r2, [r7, #24]
 800f346:	e841 2300 	strex	r3, r2, [r1]
 800f34a:	613b      	str	r3, [r7, #16]
   return(result);
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1e6      	bne.n	800f320 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2220      	movs	r2, #32
 800f356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2200      	movs	r2, #0
 800f35e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7fe fef9 	bl	800e158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f366:	bf00      	nop
 800f368:	3720      	adds	r7, #32
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b09c      	sub	sp, #112	; 0x70
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f37e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f388:	2b22      	cmp	r3, #34	; 0x22
 800f38a:	f040 80be 	bne.w	800f50a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f394:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f398:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f39c:	b2d9      	uxtb	r1, r3
 800f39e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3a8:	400a      	ands	r2, r1
 800f3aa:	b2d2      	uxtb	r2, r2
 800f3ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b2:	1c5a      	adds	r2, r3, #1
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f040 80a1 	bne.w	800f51a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3e0:	e853 3f00 	ldrex	r3, [r3]
 800f3e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3fe:	e841 2300 	strex	r3, r2, [r1]
 800f402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1e6      	bne.n	800f3d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	3308      	adds	r3, #8
 800f410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f414:	e853 3f00 	ldrex	r3, [r3]
 800f418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41c:	f023 0301 	bic.w	r3, r3, #1
 800f420:	667b      	str	r3, [r7, #100]	; 0x64
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	3308      	adds	r3, #8
 800f428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f42a:	647a      	str	r2, [r7, #68]	; 0x44
 800f42c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f42e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f432:	e841 2300 	strex	r3, r2, [r1]
 800f436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1e5      	bne.n	800f40a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2220      	movs	r2, #32
 800f442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a33      	ldr	r2, [pc, #204]	; (800f524 <UART_RxISR_8BIT+0x1b4>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d01f      	beq.n	800f49c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f466:	2b00      	cmp	r3, #0
 800f468:	d018      	beq.n	800f49c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f472:	e853 3f00 	ldrex	r3, [r3]
 800f476:	623b      	str	r3, [r7, #32]
   return(result);
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f47e:	663b      	str	r3, [r7, #96]	; 0x60
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	461a      	mov	r2, r3
 800f486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f488:	633b      	str	r3, [r7, #48]	; 0x30
 800f48a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f48e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f490:	e841 2300 	strex	r3, r2, [r1]
 800f494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d1e6      	bne.n	800f46a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d12e      	bne.n	800f502 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	e853 3f00 	ldrex	r3, [r3]
 800f4b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f023 0310 	bic.w	r3, r3, #16
 800f4be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4c8:	61fb      	str	r3, [r7, #28]
 800f4ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4cc:	69b9      	ldr	r1, [r7, #24]
 800f4ce:	69fa      	ldr	r2, [r7, #28]
 800f4d0:	e841 2300 	strex	r3, r2, [r1]
 800f4d4:	617b      	str	r3, [r7, #20]
   return(result);
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1e6      	bne.n	800f4aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	f003 0310 	and.w	r3, r3, #16
 800f4e6:	2b10      	cmp	r3, #16
 800f4e8:	d103      	bne.n	800f4f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2210      	movs	r2, #16
 800f4f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7fe fe40 	bl	800e180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f500:	e00b      	b.n	800f51a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f7f1 f8f4 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800f508:	e007      	b.n	800f51a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	699a      	ldr	r2, [r3, #24]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f042 0208 	orr.w	r2, r2, #8
 800f518:	619a      	str	r2, [r3, #24]
}
 800f51a:	bf00      	nop
 800f51c:	3770      	adds	r7, #112	; 0x70
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	58000c00 	.word	0x58000c00

0800f528 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b09c      	sub	sp, #112	; 0x70
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f536:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f540:	2b22      	cmp	r3, #34	; 0x22
 800f542:	f040 80be 	bne.w	800f6c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f554:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f556:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f55a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f55e:	4013      	ands	r3, r2
 800f560:	b29a      	uxth	r2, r3
 800f562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f564:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f56a:	1c9a      	adds	r2, r3, #2
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f576:	b29b      	uxth	r3, r3
 800f578:	3b01      	subs	r3, #1
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f588:	b29b      	uxth	r3, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f040 80a1 	bne.w	800f6d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f598:	e853 3f00 	ldrex	r3, [r3]
 800f59c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f59e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5a4:	667b      	str	r3, [r7, #100]	; 0x64
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5ae:	657b      	str	r3, [r7, #84]	; 0x54
 800f5b0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5b6:	e841 2300 	strex	r3, r2, [r1]
 800f5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1e6      	bne.n	800f590 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3308      	adds	r3, #8
 800f5c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5cc:	e853 3f00 	ldrex	r3, [r3]
 800f5d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	f023 0301 	bic.w	r3, r3, #1
 800f5d8:	663b      	str	r3, [r7, #96]	; 0x60
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	3308      	adds	r3, #8
 800f5e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5e2:	643a      	str	r2, [r7, #64]	; 0x40
 800f5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5ea:	e841 2300 	strex	r3, r2, [r1]
 800f5ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1e5      	bne.n	800f5c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2220      	movs	r2, #32
 800f5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a33      	ldr	r2, [pc, #204]	; (800f6dc <UART_RxISR_16BIT+0x1b4>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d01f      	beq.n	800f654 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d018      	beq.n	800f654 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f628:	6a3b      	ldr	r3, [r7, #32]
 800f62a:	e853 3f00 	ldrex	r3, [r3]
 800f62e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f636:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	461a      	mov	r2, r3
 800f63e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f640:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f642:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f648:	e841 2300 	strex	r3, r2, [r1]
 800f64c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1e6      	bne.n	800f622 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d12e      	bne.n	800f6ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	e853 3f00 	ldrex	r3, [r3]
 800f66e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	f023 0310 	bic.w	r3, r3, #16
 800f676:	65bb      	str	r3, [r7, #88]	; 0x58
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	461a      	mov	r2, r3
 800f67e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f680:	61bb      	str	r3, [r7, #24]
 800f682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f684:	6979      	ldr	r1, [r7, #20]
 800f686:	69ba      	ldr	r2, [r7, #24]
 800f688:	e841 2300 	strex	r3, r2, [r1]
 800f68c:	613b      	str	r3, [r7, #16]
   return(result);
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1e6      	bne.n	800f662 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	69db      	ldr	r3, [r3, #28]
 800f69a:	f003 0310 	and.w	r3, r3, #16
 800f69e:	2b10      	cmp	r3, #16
 800f6a0:	d103      	bne.n	800f6aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	2210      	movs	r2, #16
 800f6a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7fe fd64 	bl	800e180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6b8:	e00b      	b.n	800f6d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7f1 f818 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800f6c0:	e007      	b.n	800f6d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	699a      	ldr	r2, [r3, #24]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f042 0208 	orr.w	r2, r2, #8
 800f6d0:	619a      	str	r2, [r3, #24]
}
 800f6d2:	bf00      	nop
 800f6d4:	3770      	adds	r7, #112	; 0x70
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	58000c00 	.word	0x58000c00

0800f6e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b0ac      	sub	sp, #176	; 0xb0
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	69db      	ldr	r3, [r3, #28]
 800f6f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f716:	2b22      	cmp	r3, #34	; 0x22
 800f718:	f040 8180 	bne.w	800fa1c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f722:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f726:	e123      	b.n	800f970 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f72e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f732:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f736:	b2d9      	uxtb	r1, r3
 800f738:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f73c:	b2da      	uxtb	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f742:	400a      	ands	r2, r1
 800f744:	b2d2      	uxtb	r2, r2
 800f746:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f74c:	1c5a      	adds	r2, r3, #1
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f758:	b29b      	uxth	r3, r3
 800f75a:	3b01      	subs	r3, #1
 800f75c:	b29a      	uxth	r2, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	69db      	ldr	r3, [r3, #28]
 800f76a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f76e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f772:	f003 0307 	and.w	r3, r3, #7
 800f776:	2b00      	cmp	r3, #0
 800f778:	d053      	beq.n	800f822 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f77a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f77e:	f003 0301 	and.w	r3, r3, #1
 800f782:	2b00      	cmp	r3, #0
 800f784:	d011      	beq.n	800f7aa <UART_RxISR_8BIT_FIFOEN+0xca>
 800f786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00b      	beq.n	800f7aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2201      	movs	r2, #1
 800f798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7a0:	f043 0201 	orr.w	r2, r3, #1
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7ae:	f003 0302 	and.w	r3, r3, #2
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d011      	beq.n	800f7da <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f7b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7ba:	f003 0301 	and.w	r3, r3, #1
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00b      	beq.n	800f7da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2202      	movs	r2, #2
 800f7c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7d0:	f043 0204 	orr.w	r2, r3, #4
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7de:	f003 0304 	and.w	r3, r3, #4
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d011      	beq.n	800f80a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f7e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7ea:	f003 0301 	and.w	r3, r3, #1
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00b      	beq.n	800f80a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2204      	movs	r2, #4
 800f7f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f800:	f043 0202 	orr.w	r2, r3, #2
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f810:	2b00      	cmp	r3, #0
 800f812:	d006      	beq.n	800f822 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7fe fca9 	bl	800e16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f828:	b29b      	uxth	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f040 80a0 	bne.w	800f970 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f838:	e853 3f00 	ldrex	r3, [r3]
 800f83c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f852:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f854:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f856:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f858:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f85a:	e841 2300 	strex	r3, r2, [r1]
 800f85e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e4      	bne.n	800f830 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3308      	adds	r3, #8
 800f86c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f86e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f870:	e853 3f00 	ldrex	r3, [r3]
 800f874:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f878:	4b6e      	ldr	r3, [pc, #440]	; (800fa34 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f87a:	4013      	ands	r3, r2
 800f87c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	3308      	adds	r3, #8
 800f886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f88a:	66ba      	str	r2, [r7, #104]	; 0x68
 800f88c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f890:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f892:	e841 2300 	strex	r3, r2, [r1]
 800f896:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d1e3      	bne.n	800f866 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2220      	movs	r2, #32
 800f8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a60      	ldr	r2, [pc, #384]	; (800fa38 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d021      	beq.n	800f900 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d01a      	beq.n	800f900 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d2:	e853 3f00 	ldrex	r3, [r3]
 800f8d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f8de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8ec:	657b      	str	r3, [r7, #84]	; 0x54
 800f8ee:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f8f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8f4:	e841 2300 	strex	r3, r2, [r1]
 800f8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1e4      	bne.n	800f8ca <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f904:	2b01      	cmp	r3, #1
 800f906:	d130      	bne.n	800f96a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f916:	e853 3f00 	ldrex	r3, [r3]
 800f91a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91e:	f023 0310 	bic.w	r3, r3, #16
 800f922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	461a      	mov	r2, r3
 800f92c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f930:	643b      	str	r3, [r7, #64]	; 0x40
 800f932:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f934:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f938:	e841 2300 	strex	r3, r2, [r1]
 800f93c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f940:	2b00      	cmp	r3, #0
 800f942:	d1e4      	bne.n	800f90e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	69db      	ldr	r3, [r3, #28]
 800f94a:	f003 0310 	and.w	r3, r3, #16
 800f94e:	2b10      	cmp	r3, #16
 800f950:	d103      	bne.n	800f95a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2210      	movs	r2, #16
 800f958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f960:	4619      	mov	r1, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7fe fc0c 	bl	800e180 <HAL_UARTEx_RxEventCallback>
 800f968:	e002      	b.n	800f970 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f7f0 fec0 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f970:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f974:	2b00      	cmp	r3, #0
 800f976:	d006      	beq.n	800f986 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f97c:	f003 0320 	and.w	r3, r3, #32
 800f980:	2b00      	cmp	r3, #0
 800f982:	f47f aed1 	bne.w	800f728 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f98c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f990:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f994:	2b00      	cmp	r3, #0
 800f996:	d049      	beq.n	800fa2c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f99e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d242      	bcs.n	800fa2c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3308      	adds	r3, #8
 800f9ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	e853 3f00 	ldrex	r3, [r3]
 800f9b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f9bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	3308      	adds	r3, #8
 800f9c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f9ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f9cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9d2:	e841 2300 	strex	r3, r2, [r1]
 800f9d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1e3      	bne.n	800f9a6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4a16      	ldr	r2, [pc, #88]	; (800fa3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f9e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	e853 3f00 	ldrex	r3, [r3]
 800f9f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	f043 0320 	orr.w	r3, r3, #32
 800f9f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	461a      	mov	r2, r3
 800fa02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa06:	61bb      	str	r3, [r7, #24]
 800fa08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0a:	6979      	ldr	r1, [r7, #20]
 800fa0c:	69ba      	ldr	r2, [r7, #24]
 800fa0e:	e841 2300 	strex	r3, r2, [r1]
 800fa12:	613b      	str	r3, [r7, #16]
   return(result);
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1e4      	bne.n	800f9e4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa1a:	e007      	b.n	800fa2c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	699a      	ldr	r2, [r3, #24]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f042 0208 	orr.w	r2, r2, #8
 800fa2a:	619a      	str	r2, [r3, #24]
}
 800fa2c:	bf00      	nop
 800fa2e:	37b0      	adds	r7, #176	; 0xb0
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	effffffe 	.word	0xeffffffe
 800fa38:	58000c00 	.word	0x58000c00
 800fa3c:	0800f371 	.word	0x0800f371

0800fa40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b0ae      	sub	sp, #184	; 0xb8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	69db      	ldr	r3, [r3, #28]
 800fa58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa76:	2b22      	cmp	r3, #34	; 0x22
 800fa78:	f040 8184 	bne.w	800fd84 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fa82:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa86:	e127      	b.n	800fcd8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fa9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fa9e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800faa2:	4013      	ands	r3, r2
 800faa4:	b29a      	uxth	r2, r3
 800faa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800faaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fab0:	1c9a      	adds	r2, r3, #2
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	3b01      	subs	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	69db      	ldr	r3, [r3, #28]
 800face:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fad6:	f003 0307 	and.w	r3, r3, #7
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d053      	beq.n	800fb86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d011      	beq.n	800fb0e <UART_RxISR_16BIT_FIFOEN+0xce>
 800faea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800faee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00b      	beq.n	800fb0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2201      	movs	r2, #1
 800fafc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb04:	f043 0201 	orr.w	r2, r3, #1
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb12:	f003 0302 	and.w	r3, r3, #2
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d011      	beq.n	800fb3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fb1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb1e:	f003 0301 	and.w	r3, r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00b      	beq.n	800fb3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb34:	f043 0204 	orr.w	r2, r3, #4
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb42:	f003 0304 	and.w	r3, r3, #4
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d011      	beq.n	800fb6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fb4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb4e:	f003 0301 	and.w	r3, r3, #1
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00b      	beq.n	800fb6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2204      	movs	r2, #4
 800fb5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb64:	f043 0202 	orr.w	r2, r3, #2
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d006      	beq.n	800fb86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f7fe faf7 	bl	800e16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f040 80a2 	bne.w	800fcd8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb9c:	e853 3f00 	ldrex	r3, [r3]
 800fba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fbb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fbba:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fbbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fbc2:	e841 2300 	strex	r3, r2, [r1]
 800fbc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fbc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1e2      	bne.n	800fb94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbd8:	e853 3f00 	ldrex	r3, [r3]
 800fbdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fbde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fbe0:	4b6e      	ldr	r3, [pc, #440]	; (800fd9c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800fbe2:	4013      	ands	r3, r2
 800fbe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	3308      	adds	r3, #8
 800fbee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fbf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fbf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fbf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbfa:	e841 2300 	strex	r3, r2, [r1]
 800fbfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fc00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1e3      	bne.n	800fbce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2220      	movs	r2, #32
 800fc0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a60      	ldr	r2, [pc, #384]	; (800fda0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d021      	beq.n	800fc68 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d01a      	beq.n	800fc68 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3a:	e853 3f00 	ldrex	r3, [r3]
 800fc3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fc46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc54:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc5c:	e841 2300 	strex	r3, r2, [r1]
 800fc60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1e4      	bne.n	800fc32 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d130      	bne.n	800fcd2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7e:	e853 3f00 	ldrex	r3, [r3]
 800fc82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc86:	f023 0310 	bic.w	r3, r3, #16
 800fc8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc98:	647b      	str	r3, [r7, #68]	; 0x44
 800fc9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fca0:	e841 2300 	strex	r3, r2, [r1]
 800fca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1e4      	bne.n	800fc76 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	f003 0310 	and.w	r3, r3, #16
 800fcb6:	2b10      	cmp	r3, #16
 800fcb8:	d103      	bne.n	800fcc2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2210      	movs	r2, #16
 800fcc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcc8:	4619      	mov	r1, r3
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f7fe fa58 	bl	800e180 <HAL_UARTEx_RxEventCallback>
 800fcd0:	e002      	b.n	800fcd8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7f0 fd0c 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fcd8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d006      	beq.n	800fcee <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800fce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fce4:	f003 0320 	and.w	r3, r3, #32
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f47f aecd 	bne.w	800fa88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcf4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fcf8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d049      	beq.n	800fd94 <UART_RxISR_16BIT_FIFOEN+0x354>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd06:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d242      	bcs.n	800fd94 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	3308      	adds	r3, #8
 800fd14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd18:	e853 3f00 	ldrex	r3, [r3]
 800fd1c:	623b      	str	r3, [r7, #32]
   return(result);
 800fd1e:	6a3b      	ldr	r3, [r7, #32]
 800fd20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd32:	633a      	str	r2, [r7, #48]	; 0x30
 800fd34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd3a:	e841 2300 	strex	r3, r2, [r1]
 800fd3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1e3      	bne.n	800fd0e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a16      	ldr	r2, [pc, #88]	; (800fda4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800fd4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	e853 3f00 	ldrex	r3, [r3]
 800fd58:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f043 0320 	orr.w	r3, r3, #32
 800fd60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	461a      	mov	r2, r3
 800fd6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd6e:	61fb      	str	r3, [r7, #28]
 800fd70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd72:	69b9      	ldr	r1, [r7, #24]
 800fd74:	69fa      	ldr	r2, [r7, #28]
 800fd76:	e841 2300 	strex	r3, r2, [r1]
 800fd7a:	617b      	str	r3, [r7, #20]
   return(result);
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d1e4      	bne.n	800fd4c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fd82:	e007      	b.n	800fd94 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	699a      	ldr	r2, [r3, #24]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f042 0208 	orr.w	r2, r2, #8
 800fd92:	619a      	str	r2, [r3, #24]
}
 800fd94:	bf00      	nop
 800fd96:	37b8      	adds	r7, #184	; 0xb8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	effffffe 	.word	0xeffffffe
 800fda0:	58000c00 	.word	0x58000c00
 800fda4:	0800f529 	.word	0x0800f529

0800fda8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fdb0:	bf00      	nop
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fdc4:	bf00      	nop
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fdd8:	bf00      	nop
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b085      	sub	sp, #20
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d101      	bne.n	800fdfa <HAL_UARTEx_DisableFifoMode+0x16>
 800fdf6:	2302      	movs	r3, #2
 800fdf8:	e027      	b.n	800fe4a <HAL_UARTEx_DisableFifoMode+0x66>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2224      	movs	r2, #36	; 0x24
 800fe06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f022 0201 	bic.w	r2, r2, #1
 800fe20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fe28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2220      	movs	r2, #32
 800fe3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fe48:	2300      	movs	r3, #0
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3714      	adds	r7, #20
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe54:	4770      	bx	lr

0800fe56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe56:	b580      	push	{r7, lr}
 800fe58:	b084      	sub	sp, #16
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
 800fe5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d101      	bne.n	800fe6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fe6a:	2302      	movs	r3, #2
 800fe6c:	e02d      	b.n	800feca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2201      	movs	r2, #1
 800fe72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2224      	movs	r2, #36	; 0x24
 800fe7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f022 0201 	bic.w	r2, r2, #1
 800fe94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	430a      	orrs	r2, r1
 800fea8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 f850 	bl	800ff50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	68fa      	ldr	r2, [r7, #12]
 800feb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2220      	movs	r2, #32
 800febc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b084      	sub	sp, #16
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d101      	bne.n	800feea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fee6:	2302      	movs	r3, #2
 800fee8:	e02d      	b.n	800ff46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2201      	movs	r2, #1
 800feee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2224      	movs	r2, #36	; 0x24
 800fef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f022 0201 	bic.w	r2, r2, #1
 800ff10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 f812 	bl	800ff50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2220      	movs	r2, #32
 800ff38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
	...

0800ff50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d108      	bne.n	800ff72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2201      	movs	r2, #1
 800ff64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ff70:	e031      	b.n	800ffd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ff72:	2310      	movs	r3, #16
 800ff74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff76:	2310      	movs	r3, #16
 800ff78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	0e5b      	lsrs	r3, r3, #25
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	f003 0307 	and.w	r3, r3, #7
 800ff88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	0f5b      	lsrs	r3, r3, #29
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	f003 0307 	and.w	r3, r3, #7
 800ff98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff9a:	7bbb      	ldrb	r3, [r7, #14]
 800ff9c:	7b3a      	ldrb	r2, [r7, #12]
 800ff9e:	4911      	ldr	r1, [pc, #68]	; (800ffe4 <UARTEx_SetNbDataToProcess+0x94>)
 800ffa0:	5c8a      	ldrb	r2, [r1, r2]
 800ffa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ffa6:	7b3a      	ldrb	r2, [r7, #12]
 800ffa8:	490f      	ldr	r1, [pc, #60]	; (800ffe8 <UARTEx_SetNbDataToProcess+0x98>)
 800ffaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffac:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
 800ffba:	7b7a      	ldrb	r2, [r7, #13]
 800ffbc:	4909      	ldr	r1, [pc, #36]	; (800ffe4 <UARTEx_SetNbDataToProcess+0x94>)
 800ffbe:	5c8a      	ldrb	r2, [r1, r2]
 800ffc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ffc4:	7b7a      	ldrb	r2, [r7, #13]
 800ffc6:	4908      	ldr	r1, [pc, #32]	; (800ffe8 <UARTEx_SetNbDataToProcess+0x98>)
 800ffc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffca:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffce:	b29a      	uxth	r2, r3
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ffd6:	bf00      	nop
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	08014b04 	.word	0x08014b04
 800ffe8:	08014b0c 	.word	0x08014b0c

0800ffec <__NVIC_SetPriority>:
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	4603      	mov	r3, r0
 800fff4:	6039      	str	r1, [r7, #0]
 800fff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	db0a      	blt.n	8010016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	b2da      	uxtb	r2, r3
 8010004:	490c      	ldr	r1, [pc, #48]	; (8010038 <__NVIC_SetPriority+0x4c>)
 8010006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801000a:	0112      	lsls	r2, r2, #4
 801000c:	b2d2      	uxtb	r2, r2
 801000e:	440b      	add	r3, r1
 8010010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010014:	e00a      	b.n	801002c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	b2da      	uxtb	r2, r3
 801001a:	4908      	ldr	r1, [pc, #32]	; (801003c <__NVIC_SetPriority+0x50>)
 801001c:	88fb      	ldrh	r3, [r7, #6]
 801001e:	f003 030f 	and.w	r3, r3, #15
 8010022:	3b04      	subs	r3, #4
 8010024:	0112      	lsls	r2, r2, #4
 8010026:	b2d2      	uxtb	r2, r2
 8010028:	440b      	add	r3, r1
 801002a:	761a      	strb	r2, [r3, #24]
}
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr
 8010038:	e000e100 	.word	0xe000e100
 801003c:	e000ed00 	.word	0xe000ed00

08010040 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010040:	b580      	push	{r7, lr}
 8010042:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010044:	4b05      	ldr	r3, [pc, #20]	; (801005c <SysTick_Handler+0x1c>)
 8010046:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010048:	f002 fada 	bl	8012600 <xTaskGetSchedulerState>
 801004c:	4603      	mov	r3, r0
 801004e:	2b01      	cmp	r3, #1
 8010050:	d001      	beq.n	8010056 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010052:	f003 f8f9 	bl	8013248 <xPortSysTickHandler>
  }
}
 8010056:	bf00      	nop
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	e000e010 	.word	0xe000e010

08010060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010060:	b580      	push	{r7, lr}
 8010062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010064:	2100      	movs	r1, #0
 8010066:	f06f 0004 	mvn.w	r0, #4
 801006a:	f7ff ffbf 	bl	800ffec <__NVIC_SetPriority>
#endif
}
 801006e:	bf00      	nop
 8010070:	bd80      	pop	{r7, pc}
	...

08010074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801007a:	f3ef 8305 	mrs	r3, IPSR
 801007e:	603b      	str	r3, [r7, #0]
  return(result);
 8010080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010082:	2b00      	cmp	r3, #0
 8010084:	d003      	beq.n	801008e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010086:	f06f 0305 	mvn.w	r3, #5
 801008a:	607b      	str	r3, [r7, #4]
 801008c:	e00c      	b.n	80100a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801008e:	4b0a      	ldr	r3, [pc, #40]	; (80100b8 <osKernelInitialize+0x44>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d105      	bne.n	80100a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010096:	4b08      	ldr	r3, [pc, #32]	; (80100b8 <osKernelInitialize+0x44>)
 8010098:	2201      	movs	r2, #1
 801009a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801009c:	2300      	movs	r3, #0
 801009e:	607b      	str	r3, [r7, #4]
 80100a0:	e002      	b.n	80100a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80100a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80100a8:	687b      	ldr	r3, [r7, #4]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	240006bc 	.word	0x240006bc

080100bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100c2:	f3ef 8305 	mrs	r3, IPSR
 80100c6:	603b      	str	r3, [r7, #0]
  return(result);
 80100c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d003      	beq.n	80100d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80100ce:	f06f 0305 	mvn.w	r3, #5
 80100d2:	607b      	str	r3, [r7, #4]
 80100d4:	e010      	b.n	80100f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80100d6:	4b0b      	ldr	r3, [pc, #44]	; (8010104 <osKernelStart+0x48>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d109      	bne.n	80100f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80100de:	f7ff ffbf 	bl	8010060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80100e2:	4b08      	ldr	r3, [pc, #32]	; (8010104 <osKernelStart+0x48>)
 80100e4:	2202      	movs	r2, #2
 80100e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80100e8:	f001 fda4 	bl	8011c34 <vTaskStartScheduler>
      stat = osOK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	607b      	str	r3, [r7, #4]
 80100f0:	e002      	b.n	80100f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80100f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80100f8:	687b      	ldr	r3, [r7, #4]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3708      	adds	r7, #8
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	240006bc 	.word	0x240006bc

08010108 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010108:	b580      	push	{r7, lr}
 801010a:	b08e      	sub	sp, #56	; 0x38
 801010c:	af04      	add	r7, sp, #16
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010114:	2300      	movs	r3, #0
 8010116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010118:	f3ef 8305 	mrs	r3, IPSR
 801011c:	617b      	str	r3, [r7, #20]
  return(result);
 801011e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010120:	2b00      	cmp	r3, #0
 8010122:	d17e      	bne.n	8010222 <osThreadNew+0x11a>
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d07b      	beq.n	8010222 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801012a:	2380      	movs	r3, #128	; 0x80
 801012c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801012e:	2318      	movs	r3, #24
 8010130:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010132:	2300      	movs	r3, #0
 8010134:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801013a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d045      	beq.n	80101ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d002      	beq.n	8010150 <osThreadNew+0x48>
        name = attr->name;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	699b      	ldr	r3, [r3, #24]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	699b      	ldr	r3, [r3, #24]
 801015c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d008      	beq.n	8010176 <osThreadNew+0x6e>
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	2b38      	cmp	r3, #56	; 0x38
 8010168:	d805      	bhi.n	8010176 <osThreadNew+0x6e>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <osThreadNew+0x72>
        return (NULL);
 8010176:	2300      	movs	r3, #0
 8010178:	e054      	b.n	8010224 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	695b      	ldr	r3, [r3, #20]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d003      	beq.n	801018a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	695b      	ldr	r3, [r3, #20]
 8010186:	089b      	lsrs	r3, r3, #2
 8010188:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d00e      	beq.n	80101b0 <osThreadNew+0xa8>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	68db      	ldr	r3, [r3, #12]
 8010196:	2b5b      	cmp	r3, #91	; 0x5b
 8010198:	d90a      	bls.n	80101b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d006      	beq.n	80101b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	695b      	ldr	r3, [r3, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d002      	beq.n	80101b0 <osThreadNew+0xa8>
        mem = 1;
 80101aa:	2301      	movs	r3, #1
 80101ac:	61bb      	str	r3, [r7, #24]
 80101ae:	e010      	b.n	80101d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10c      	bne.n	80101d2 <osThreadNew+0xca>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d108      	bne.n	80101d2 <osThreadNew+0xca>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d104      	bne.n	80101d2 <osThreadNew+0xca>
          mem = 0;
 80101c8:	2300      	movs	r3, #0
 80101ca:	61bb      	str	r3, [r7, #24]
 80101cc:	e001      	b.n	80101d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80101ce:	2300      	movs	r3, #0
 80101d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d110      	bne.n	80101fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80101e0:	9202      	str	r2, [sp, #8]
 80101e2:	9301      	str	r3, [sp, #4]
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	6a3a      	ldr	r2, [r7, #32]
 80101ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f001 fb4a 	bl	8011888 <xTaskCreateStatic>
 80101f4:	4603      	mov	r3, r0
 80101f6:	613b      	str	r3, [r7, #16]
 80101f8:	e013      	b.n	8010222 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d110      	bne.n	8010222 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	b29a      	uxth	r2, r3
 8010204:	f107 0310 	add.w	r3, r7, #16
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f001 fb95 	bl	8011942 <xTaskCreate>
 8010218:	4603      	mov	r3, r0
 801021a:	2b01      	cmp	r3, #1
 801021c:	d001      	beq.n	8010222 <osThreadNew+0x11a>
            hTask = NULL;
 801021e:	2300      	movs	r3, #0
 8010220:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010222:	693b      	ldr	r3, [r7, #16]
}
 8010224:	4618      	mov	r0, r3
 8010226:	3728      	adds	r7, #40	; 0x28
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010232:	f3ef 8305 	mrs	r3, IPSR
 8010236:	603b      	str	r3, [r7, #0]
  return(result);
 8010238:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801023a:	2b00      	cmp	r3, #0
 801023c:	d003      	beq.n	8010246 <osThreadYield+0x1a>
    stat = osErrorISR;
 801023e:	f06f 0305 	mvn.w	r3, #5
 8010242:	607b      	str	r3, [r7, #4]
 8010244:	e009      	b.n	801025a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010246:	2300      	movs	r3, #0
 8010248:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801024a:	4b07      	ldr	r3, [pc, #28]	; (8010268 <osThreadYield+0x3c>)
 801024c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	f3bf 8f4f 	dsb	sy
 8010256:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801025a:	687b      	ldr	r3, [r7, #4]
}
 801025c:	4618      	mov	r0, r3
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	e000ed04 	.word	0xe000ed04

0801026c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010274:	f3ef 8305 	mrs	r3, IPSR
 8010278:	60bb      	str	r3, [r7, #8]
  return(result);
 801027a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801027c:	2b00      	cmp	r3, #0
 801027e:	d003      	beq.n	8010288 <osDelay+0x1c>
    stat = osErrorISR;
 8010280:	f06f 0305 	mvn.w	r3, #5
 8010284:	60fb      	str	r3, [r7, #12]
 8010286:	e007      	b.n	8010298 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010288:	2300      	movs	r3, #0
 801028a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d002      	beq.n	8010298 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f001 fc9a 	bl	8011bcc <vTaskDelay>
    }
  }

  return (stat);
 8010298:	68fb      	ldr	r3, [r7, #12]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b086      	sub	sp, #24
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80102aa:	2300      	movs	r3, #0
 80102ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102ae:	f3ef 8305 	mrs	r3, IPSR
 80102b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80102b4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d12d      	bne.n	8010316 <osEventFlagsNew+0x74>
    mem = -1;
 80102ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102be:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d015      	beq.n	80102f2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d006      	beq.n	80102dc <osEventFlagsNew+0x3a>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68db      	ldr	r3, [r3, #12]
 80102d2:	2b1f      	cmp	r3, #31
 80102d4:	d902      	bls.n	80102dc <osEventFlagsNew+0x3a>
        mem = 1;
 80102d6:	2301      	movs	r3, #1
 80102d8:	613b      	str	r3, [r7, #16]
 80102da:	e00c      	b.n	80102f6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d108      	bne.n	80102f6 <osEventFlagsNew+0x54>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d104      	bne.n	80102f6 <osEventFlagsNew+0x54>
          mem = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	613b      	str	r3, [r7, #16]
 80102f0:	e001      	b.n	80102f6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d106      	bne.n	801030a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	4618      	mov	r0, r3
 8010302:	f000 fa3d 	bl	8010780 <xEventGroupCreateStatic>
 8010306:	6178      	str	r0, [r7, #20]
 8010308:	e005      	b.n	8010316 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d102      	bne.n	8010316 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8010310:	f000 fa6d 	bl	80107ee <xEventGroupCreate>
 8010314:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010316:	697b      	ldr	r3, [r7, #20]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3718      	adds	r7, #24
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d004      	beq.n	801033e <osEventFlagsSet+0x1e>
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801033a:	2b00      	cmp	r3, #0
 801033c:	d003      	beq.n	8010346 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801033e:	f06f 0303 	mvn.w	r3, #3
 8010342:	617b      	str	r3, [r7, #20]
 8010344:	e028      	b.n	8010398 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010346:	f3ef 8305 	mrs	r3, IPSR
 801034a:	60fb      	str	r3, [r7, #12]
  return(result);
 801034c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801034e:	2b00      	cmp	r3, #0
 8010350:	d01d      	beq.n	801038e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010352:	2300      	movs	r3, #0
 8010354:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010356:	f107 0308 	add.w	r3, r7, #8
 801035a:	461a      	mov	r2, r3
 801035c:	6839      	ldr	r1, [r7, #0]
 801035e:	6938      	ldr	r0, [r7, #16]
 8010360:	f000 fbe8 	bl	8010b34 <xEventGroupSetBitsFromISR>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d103      	bne.n	8010372 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801036a:	f06f 0302 	mvn.w	r3, #2
 801036e:	617b      	str	r3, [r7, #20]
 8010370:	e012      	b.n	8010398 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00d      	beq.n	8010398 <osEventFlagsSet+0x78>
 801037c:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <osEventFlagsSet+0x84>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	e004      	b.n	8010398 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	6938      	ldr	r0, [r7, #16]
 8010392:	f000 fb15 	bl	80109c0 <xEventGroupSetBits>
 8010396:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010398:	697b      	ldr	r3, [r7, #20]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	e000ed04 	.word	0xe000ed04

080103a8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b08c      	sub	sp, #48	; 0x30
 80103ac:	af02      	add	r7, sp, #8
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
 80103b4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d004      	beq.n	80103ca <osEventFlagsWait+0x22>
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d003      	beq.n	80103d2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80103ca:	f06f 0303 	mvn.w	r3, #3
 80103ce:	61fb      	str	r3, [r7, #28]
 80103d0:	e04b      	b.n	801046a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103d2:	f3ef 8305 	mrs	r3, IPSR
 80103d6:	617b      	str	r3, [r7, #20]
  return(result);
 80103d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d003      	beq.n	80103e6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80103de:	f06f 0305 	mvn.w	r3, #5
 80103e2:	61fb      	str	r3, [r7, #28]
 80103e4:	e041      	b.n	801046a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f003 0301 	and.w	r3, r3, #1
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d002      	beq.n	80103f6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80103f0:	2301      	movs	r3, #1
 80103f2:	627b      	str	r3, [r7, #36]	; 0x24
 80103f4:	e001      	b.n	80103fa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80103f6:	2300      	movs	r3, #0
 80103f8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f003 0302 	and.w	r3, r3, #2
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8010404:	2300      	movs	r3, #0
 8010406:	623b      	str	r3, [r7, #32]
 8010408:	e001      	b.n	801040e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801040a:	2301      	movs	r3, #1
 801040c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010414:	6a3a      	ldr	r2, [r7, #32]
 8010416:	68b9      	ldr	r1, [r7, #8]
 8010418:	69b8      	ldr	r0, [r7, #24]
 801041a:	f000 fa03 	bl	8010824 <xEventGroupWaitBits>
 801041e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f003 0301 	and.w	r3, r3, #1
 8010426:	2b00      	cmp	r3, #0
 8010428:	d010      	beq.n	801044c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801042a:	68ba      	ldr	r2, [r7, #8]
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	4013      	ands	r3, r2
 8010430:	68ba      	ldr	r2, [r7, #8]
 8010432:	429a      	cmp	r2, r3
 8010434:	d019      	beq.n	801046a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d003      	beq.n	8010444 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801043c:	f06f 0301 	mvn.w	r3, #1
 8010440:	61fb      	str	r3, [r7, #28]
 8010442:	e012      	b.n	801046a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010444:	f06f 0302 	mvn.w	r3, #2
 8010448:	61fb      	str	r3, [r7, #28]
 801044a:	e00e      	b.n	801046a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	4013      	ands	r3, r2
 8010452:	2b00      	cmp	r3, #0
 8010454:	d109      	bne.n	801046a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d003      	beq.n	8010464 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801045c:	f06f 0301 	mvn.w	r3, #1
 8010460:	61fb      	str	r3, [r7, #28]
 8010462:	e002      	b.n	801046a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010464:	f06f 0302 	mvn.w	r3, #2
 8010468:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801046a:	69fb      	ldr	r3, [r7, #28]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3728      	adds	r7, #40	; 0x28
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010474:	b580      	push	{r7, lr}
 8010476:	b08a      	sub	sp, #40	; 0x28
 8010478:	af02      	add	r7, sp, #8
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010480:	2300      	movs	r3, #0
 8010482:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010484:	f3ef 8305 	mrs	r3, IPSR
 8010488:	613b      	str	r3, [r7, #16]
  return(result);
 801048a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801048c:	2b00      	cmp	r3, #0
 801048e:	d15f      	bne.n	8010550 <osMessageQueueNew+0xdc>
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d05c      	beq.n	8010550 <osMessageQueueNew+0xdc>
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d059      	beq.n	8010550 <osMessageQueueNew+0xdc>
    mem = -1;
 801049c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d029      	beq.n	80104fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	689b      	ldr	r3, [r3, #8]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d012      	beq.n	80104d6 <osMessageQueueNew+0x62>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	2b4f      	cmp	r3, #79	; 0x4f
 80104b6:	d90e      	bls.n	80104d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00a      	beq.n	80104d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	695a      	ldr	r2, [r3, #20]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	68b9      	ldr	r1, [r7, #8]
 80104c8:	fb01 f303 	mul.w	r3, r1, r3
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d302      	bcc.n	80104d6 <osMessageQueueNew+0x62>
        mem = 1;
 80104d0:	2301      	movs	r3, #1
 80104d2:	61bb      	str	r3, [r7, #24]
 80104d4:	e014      	b.n	8010500 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d110      	bne.n	8010500 <osMessageQueueNew+0x8c>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d10c      	bne.n	8010500 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d108      	bne.n	8010500 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d104      	bne.n	8010500 <osMessageQueueNew+0x8c>
          mem = 0;
 80104f6:	2300      	movs	r3, #0
 80104f8:	61bb      	str	r3, [r7, #24]
 80104fa:	e001      	b.n	8010500 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80104fc:	2300      	movs	r3, #0
 80104fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	2b01      	cmp	r3, #1
 8010504:	d10b      	bne.n	801051e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	691a      	ldr	r2, [r3, #16]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	689b      	ldr	r3, [r3, #8]
 801050e:	2100      	movs	r1, #0
 8010510:	9100      	str	r1, [sp, #0]
 8010512:	68b9      	ldr	r1, [r7, #8]
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	f000 fc3d 	bl	8010d94 <xQueueGenericCreateStatic>
 801051a:	61f8      	str	r0, [r7, #28]
 801051c:	e008      	b.n	8010530 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d105      	bne.n	8010530 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010524:	2200      	movs	r2, #0
 8010526:	68b9      	ldr	r1, [r7, #8]
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f000 fcab 	bl	8010e84 <xQueueGenericCreate>
 801052e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00c      	beq.n	8010550 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d003      	beq.n	8010544 <osMessageQueueNew+0xd0>
        name = attr->name;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	e001      	b.n	8010548 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010544:	2300      	movs	r3, #0
 8010546:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010548:	6979      	ldr	r1, [r7, #20]
 801054a:	69f8      	ldr	r0, [r7, #28]
 801054c:	f001 f93e 	bl	80117cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010550:	69fb      	ldr	r3, [r7, #28]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3720      	adds	r7, #32
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
	...

0801055c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801055c:	b580      	push	{r7, lr}
 801055e:	b088      	sub	sp, #32
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	603b      	str	r3, [r7, #0]
 8010568:	4613      	mov	r3, r2
 801056a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010570:	2300      	movs	r3, #0
 8010572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010574:	f3ef 8305 	mrs	r3, IPSR
 8010578:	617b      	str	r3, [r7, #20]
  return(result);
 801057a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801057c:	2b00      	cmp	r3, #0
 801057e:	d028      	beq.n	80105d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d005      	beq.n	8010592 <osMessageQueuePut+0x36>
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d002      	beq.n	8010592 <osMessageQueuePut+0x36>
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d003      	beq.n	801059a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010592:	f06f 0303 	mvn.w	r3, #3
 8010596:	61fb      	str	r3, [r7, #28]
 8010598:	e038      	b.n	801060c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801059a:	2300      	movs	r3, #0
 801059c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801059e:	f107 0210 	add.w	r2, r7, #16
 80105a2:	2300      	movs	r3, #0
 80105a4:	68b9      	ldr	r1, [r7, #8]
 80105a6:	69b8      	ldr	r0, [r7, #24]
 80105a8:	f000 fdc8 	bl	801113c <xQueueGenericSendFromISR>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d003      	beq.n	80105ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80105b2:	f06f 0302 	mvn.w	r3, #2
 80105b6:	61fb      	str	r3, [r7, #28]
 80105b8:	e028      	b.n	801060c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d025      	beq.n	801060c <osMessageQueuePut+0xb0>
 80105c0:	4b15      	ldr	r3, [pc, #84]	; (8010618 <osMessageQueuePut+0xbc>)
 80105c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105c6:	601a      	str	r2, [r3, #0]
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	e01c      	b.n	801060c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d002      	beq.n	80105de <osMessageQueuePut+0x82>
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d103      	bne.n	80105e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80105de:	f06f 0303 	mvn.w	r3, #3
 80105e2:	61fb      	str	r3, [r7, #28]
 80105e4:	e012      	b.n	801060c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80105e6:	2300      	movs	r3, #0
 80105e8:	683a      	ldr	r2, [r7, #0]
 80105ea:	68b9      	ldr	r1, [r7, #8]
 80105ec:	69b8      	ldr	r0, [r7, #24]
 80105ee:	f000 fca7 	bl	8010f40 <xQueueGenericSend>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d009      	beq.n	801060c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d003      	beq.n	8010606 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80105fe:	f06f 0301 	mvn.w	r3, #1
 8010602:	61fb      	str	r3, [r7, #28]
 8010604:	e002      	b.n	801060c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010606:	f06f 0302 	mvn.w	r3, #2
 801060a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801060c:	69fb      	ldr	r3, [r7, #28]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3720      	adds	r7, #32
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	e000ed04 	.word	0xe000ed04

0801061c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801061c:	b580      	push	{r7, lr}
 801061e:	b088      	sub	sp, #32
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	607a      	str	r2, [r7, #4]
 8010628:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801062e:	2300      	movs	r3, #0
 8010630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010632:	f3ef 8305 	mrs	r3, IPSR
 8010636:	617b      	str	r3, [r7, #20]
  return(result);
 8010638:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801063a:	2b00      	cmp	r3, #0
 801063c:	d028      	beq.n	8010690 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d005      	beq.n	8010650 <osMessageQueueGet+0x34>
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <osMessageQueueGet+0x34>
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d003      	beq.n	8010658 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010650:	f06f 0303 	mvn.w	r3, #3
 8010654:	61fb      	str	r3, [r7, #28]
 8010656:	e037      	b.n	80106c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010658:	2300      	movs	r3, #0
 801065a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801065c:	f107 0310 	add.w	r3, r7, #16
 8010660:	461a      	mov	r2, r3
 8010662:	68b9      	ldr	r1, [r7, #8]
 8010664:	69b8      	ldr	r0, [r7, #24]
 8010666:	f000 fee5 	bl	8011434 <xQueueReceiveFromISR>
 801066a:	4603      	mov	r3, r0
 801066c:	2b01      	cmp	r3, #1
 801066e:	d003      	beq.n	8010678 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010670:	f06f 0302 	mvn.w	r3, #2
 8010674:	61fb      	str	r3, [r7, #28]
 8010676:	e027      	b.n	80106c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d024      	beq.n	80106c8 <osMessageQueueGet+0xac>
 801067e:	4b15      	ldr	r3, [pc, #84]	; (80106d4 <osMessageQueueGet+0xb8>)
 8010680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010684:	601a      	str	r2, [r3, #0]
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	f3bf 8f6f 	isb	sy
 801068e:	e01b      	b.n	80106c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d002      	beq.n	801069c <osMessageQueueGet+0x80>
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d103      	bne.n	80106a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801069c:	f06f 0303 	mvn.w	r3, #3
 80106a0:	61fb      	str	r3, [r7, #28]
 80106a2:	e011      	b.n	80106c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	68b9      	ldr	r1, [r7, #8]
 80106a8:	69b8      	ldr	r0, [r7, #24]
 80106aa:	f000 fde3 	bl	8011274 <xQueueReceive>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d009      	beq.n	80106c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d003      	beq.n	80106c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80106ba:	f06f 0301 	mvn.w	r3, #1
 80106be:	61fb      	str	r3, [r7, #28]
 80106c0:	e002      	b.n	80106c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80106c2:	f06f 0302 	mvn.w	r3, #2
 80106c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80106c8:	69fb      	ldr	r3, [r7, #28]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3720      	adds	r7, #32
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	e000ed04 	.word	0xe000ed04

080106d8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d102      	bne.n	80106f0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80106ea:	2300      	movs	r3, #0
 80106ec:	617b      	str	r3, [r7, #20]
 80106ee:	e00e      	b.n	801070e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106f0:	f3ef 8305 	mrs	r3, IPSR
 80106f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80106f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d004      	beq.n	8010706 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80106fc:	6938      	ldr	r0, [r7, #16]
 80106fe:	f000 ff37 	bl	8011570 <uxQueueMessagesWaitingFromISR>
 8010702:	6178      	str	r0, [r7, #20]
 8010704:	e003      	b.n	801070e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8010706:	6938      	ldr	r0, [r7, #16]
 8010708:	f000 ff14 	bl	8011534 <uxQueueMessagesWaiting>
 801070c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 801070e:	697b      	ldr	r3, [r7, #20]
}
 8010710:	4618      	mov	r0, r3
 8010712:	3718      	adds	r7, #24
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010718:	b480      	push	{r7}
 801071a:	b085      	sub	sp, #20
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	4a07      	ldr	r2, [pc, #28]	; (8010744 <vApplicationGetIdleTaskMemory+0x2c>)
 8010728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	4a06      	ldr	r2, [pc, #24]	; (8010748 <vApplicationGetIdleTaskMemory+0x30>)
 801072e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2280      	movs	r2, #128	; 0x80
 8010734:	601a      	str	r2, [r3, #0]
}
 8010736:	bf00      	nop
 8010738:	3714      	adds	r7, #20
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	240006c0 	.word	0x240006c0
 8010748:	2400071c 	.word	0x2400071c

0801074c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801074c:	b480      	push	{r7}
 801074e:	b085      	sub	sp, #20
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	4a07      	ldr	r2, [pc, #28]	; (8010778 <vApplicationGetTimerTaskMemory+0x2c>)
 801075c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	4a06      	ldr	r2, [pc, #24]	; (801077c <vApplicationGetTimerTaskMemory+0x30>)
 8010762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f44f 7280 	mov.w	r2, #256	; 0x100
 801076a:	601a      	str	r2, [r3, #0]
}
 801076c:	bf00      	nop
 801076e:	3714      	adds	r7, #20
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr
 8010778:	2400091c 	.word	0x2400091c
 801077c:	24000978 	.word	0x24000978

08010780 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8010780:	b580      	push	{r7, lr}
 8010782:	b086      	sub	sp, #24
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d10a      	bne.n	80107a4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80107a0:	bf00      	nop
 80107a2:	e7fe      	b.n	80107a2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80107a4:	2320      	movs	r3, #32
 80107a6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b20      	cmp	r3, #32
 80107ac:	d00a      	beq.n	80107c4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80107ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b2:	f383 8811 	msr	BASEPRI, r3
 80107b6:	f3bf 8f6f 	isb	sy
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	60fb      	str	r3, [r7, #12]
}
 80107c0:	bf00      	nop
 80107c2:	e7fe      	b.n	80107c2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00a      	beq.n	80107e4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2200      	movs	r2, #0
 80107d2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	3304      	adds	r3, #4
 80107d8:	4618      	mov	r0, r3
 80107da:	f000 f9bf 	bl	8010b5c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	2201      	movs	r2, #1
 80107e2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80107e4:	697b      	ldr	r3, [r7, #20]
	}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b082      	sub	sp, #8
 80107f2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80107f4:	2020      	movs	r0, #32
 80107f6:	f002 fdb7 	bl	8013368 <pvPortMalloc>
 80107fa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00a      	beq.n	8010818 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	3304      	adds	r3, #4
 801080c:	4618      	mov	r0, r3
 801080e:	f000 f9a5 	bl	8010b5c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010818:	687b      	ldr	r3, [r7, #4]
	}
 801081a:	4618      	mov	r0, r3
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
	...

08010824 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b090      	sub	sp, #64	; 0x40
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8010836:	2300      	movs	r3, #0
 8010838:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801083a:	2300      	movs	r3, #0
 801083c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10a      	bne.n	801085a <xEventGroupWaitBits+0x36>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	623b      	str	r3, [r7, #32]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00a      	beq.n	801087a <xEventGroupWaitBits+0x56>
	__asm volatile
 8010864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010868:	f383 8811 	msr	BASEPRI, r3
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f3bf 8f4f 	dsb	sy
 8010874:	61fb      	str	r3, [r7, #28]
}
 8010876:	bf00      	nop
 8010878:	e7fe      	b.n	8010878 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d10a      	bne.n	8010896 <xEventGroupWaitBits+0x72>
	__asm volatile
 8010880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010884:	f383 8811 	msr	BASEPRI, r3
 8010888:	f3bf 8f6f 	isb	sy
 801088c:	f3bf 8f4f 	dsb	sy
 8010890:	61bb      	str	r3, [r7, #24]
}
 8010892:	bf00      	nop
 8010894:	e7fe      	b.n	8010894 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010896:	f001 feb3 	bl	8012600 <xTaskGetSchedulerState>
 801089a:	4603      	mov	r3, r0
 801089c:	2b00      	cmp	r3, #0
 801089e:	d102      	bne.n	80108a6 <xEventGroupWaitBits+0x82>
 80108a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d101      	bne.n	80108aa <xEventGroupWaitBits+0x86>
 80108a6:	2301      	movs	r3, #1
 80108a8:	e000      	b.n	80108ac <xEventGroupWaitBits+0x88>
 80108aa:	2300      	movs	r3, #0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10a      	bne.n	80108c6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80108b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	617b      	str	r3, [r7, #20]
}
 80108c2:	bf00      	nop
 80108c4:	e7fe      	b.n	80108c4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80108c6:	f001 fa1b 	bl	8011d00 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80108ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80108d0:	683a      	ldr	r2, [r7, #0]
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108d6:	f000 f90b 	bl	8010af0 <prvTestWaitCondition>
 80108da:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80108dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00e      	beq.n	8010900 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80108e6:	2300      	movs	r3, #0
 80108e8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d028      	beq.n	8010942 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80108f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	43db      	mvns	r3, r3
 80108f8:	401a      	ands	r2, r3
 80108fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	e020      	b.n	8010942 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010902:	2b00      	cmp	r3, #0
 8010904:	d104      	bne.n	8010910 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8010906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010908:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801090a:	2301      	movs	r3, #1
 801090c:	633b      	str	r3, [r7, #48]	; 0x30
 801090e:	e018      	b.n	8010942 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d003      	beq.n	801091e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8010916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801091c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d003      	beq.n	801092c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8010924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801092a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092e:	1d18      	adds	r0, r3, #4
 8010930:	68ba      	ldr	r2, [r7, #8]
 8010932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010934:	4313      	orrs	r3, r2
 8010936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010938:	4619      	mov	r1, r3
 801093a:	f001 fbd9 	bl	80120f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801093e:	2300      	movs	r3, #0
 8010940:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8010942:	f001 f9eb 	bl	8011d1c <xTaskResumeAll>
 8010946:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801094a:	2b00      	cmp	r3, #0
 801094c:	d031      	beq.n	80109b2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	2b00      	cmp	r3, #0
 8010952:	d107      	bne.n	8010964 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8010954:	4b19      	ldr	r3, [pc, #100]	; (80109bc <xEventGroupWaitBits+0x198>)
 8010956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801095a:	601a      	str	r2, [r3, #0]
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8010964:	f001 fed8 	bl	8012718 <uxTaskResetEventItemValue>
 8010968:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801096a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010970:	2b00      	cmp	r3, #0
 8010972:	d11a      	bne.n	80109aa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8010974:	f002 fbd6 	bl	8013124 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8010978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801097e:	683a      	ldr	r2, [r7, #0]
 8010980:	68b9      	ldr	r1, [r7, #8]
 8010982:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010984:	f000 f8b4 	bl	8010af0 <prvTestWaitCondition>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d009      	beq.n	80109a2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d006      	beq.n	80109a2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	43db      	mvns	r3, r3
 801099c:	401a      	ands	r2, r3
 801099e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80109a2:	2301      	movs	r3, #1
 80109a4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80109a6:	f002 fbed 	bl	8013184 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80109aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80109b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80109b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3740      	adds	r7, #64	; 0x40
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	e000ed04 	.word	0xe000ed04

080109c0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08e      	sub	sp, #56	; 0x38
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80109ca:	2300      	movs	r3, #0
 80109cc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80109d2:	2300      	movs	r3, #0
 80109d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d10a      	bne.n	80109f2 <xEventGroupSetBits+0x32>
	__asm volatile
 80109dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e0:	f383 8811 	msr	BASEPRI, r3
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	613b      	str	r3, [r7, #16]
}
 80109ee:	bf00      	nop
 80109f0:	e7fe      	b.n	80109f0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00a      	beq.n	8010a12 <xEventGroupSetBits+0x52>
	__asm volatile
 80109fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a00:	f383 8811 	msr	BASEPRI, r3
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	60fb      	str	r3, [r7, #12]
}
 8010a0e:	bf00      	nop
 8010a10:	e7fe      	b.n	8010a10 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a14:	3304      	adds	r3, #4
 8010a16:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1a:	3308      	adds	r3, #8
 8010a1c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010a1e:	f001 f96f 	bl	8011d00 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	431a      	orrs	r2, r3
 8010a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a32:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010a34:	e03c      	b.n	8010ab0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010a42:	2300      	movs	r3, #0
 8010a44:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010a4c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010a54:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d108      	bne.n	8010a72 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	4013      	ands	r3, r2
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00b      	beq.n	8010a84 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a70:	e008      	b.n	8010a84 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8010a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	4013      	ands	r3, r2
 8010a7a:	69ba      	ldr	r2, [r7, #24]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d101      	bne.n	8010a84 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8010a80:	2301      	movs	r3, #1
 8010a82:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8010a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d010      	beq.n	8010aac <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d003      	beq.n	8010a9c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8010a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	4313      	orrs	r3, r2
 8010a9a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010aa8:	f001 fbee 	bl	8012288 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ab2:	6a3b      	ldr	r3, [r7, #32]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d1be      	bne.n	8010a36 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abe:	43db      	mvns	r3, r3
 8010ac0:	401a      	ands	r2, r3
 8010ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010ac6:	f001 f929 	bl	8011d1c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010acc:	681b      	ldr	r3, [r3, #0]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3738      	adds	r7, #56	; 0x38
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b082      	sub	sp, #8
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010ae0:	6839      	ldr	r1, [r7, #0]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7ff ff6c 	bl	80109c0 <xEventGroupSetBits>
}
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010af0:	b480      	push	{r7}
 8010af2:	b087      	sub	sp, #28
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010afc:	2300      	movs	r3, #0
 8010afe:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d107      	bne.n	8010b16 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	4013      	ands	r3, r2
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d00a      	beq.n	8010b26 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010b10:	2301      	movs	r3, #1
 8010b12:	617b      	str	r3, [r7, #20]
 8010b14:	e007      	b.n	8010b26 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	4013      	ands	r3, r2
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d101      	bne.n	8010b26 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010b22:	2301      	movs	r3, #1
 8010b24:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010b26:	697b      	ldr	r3, [r7, #20]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	371c      	adds	r7, #28
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68ba      	ldr	r2, [r7, #8]
 8010b44:	68f9      	ldr	r1, [r7, #12]
 8010b46:	4804      	ldr	r0, [pc, #16]	; (8010b58 <xEventGroupSetBitsFromISR+0x24>)
 8010b48:	f002 f9a0 	bl	8012e8c <xTimerPendFunctionCallFromISR>
 8010b4c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8010b4e:	697b      	ldr	r3, [r7, #20]
	}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3718      	adds	r7, #24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	08010ad7 	.word	0x08010ad7

08010b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f103 0208 	add.w	r2, r3, #8
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f103 0208 	add.w	r2, r3, #8
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f103 0208 	add.w	r2, r3, #8
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010b90:	bf00      	nop
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010baa:	bf00      	nop
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr

08010bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010bb6:	b480      	push	{r7}
 8010bb8:	b085      	sub	sp, #20
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	689a      	ldr	r2, [r3, #8]
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	683a      	ldr	r2, [r7, #0]
 8010be0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	601a      	str	r2, [r3, #0]
}
 8010bf2:	bf00      	nop
 8010bf4:	3714      	adds	r7, #20
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr

08010bfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010bfe:	b480      	push	{r7}
 8010c00:	b085      	sub	sp, #20
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c14:	d103      	bne.n	8010c1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	691b      	ldr	r3, [r3, #16]
 8010c1a:	60fb      	str	r3, [r7, #12]
 8010c1c:	e00c      	b.n	8010c38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	3308      	adds	r3, #8
 8010c22:	60fb      	str	r3, [r7, #12]
 8010c24:	e002      	b.n	8010c2c <vListInsert+0x2e>
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	60fb      	str	r3, [r7, #12]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	68ba      	ldr	r2, [r7, #8]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d2f6      	bcs.n	8010c26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	685a      	ldr	r2, [r3, #4]
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	683a      	ldr	r2, [r7, #0]
 8010c46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	683a      	ldr	r2, [r7, #0]
 8010c52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	1c5a      	adds	r2, r3, #1
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	601a      	str	r2, [r3, #0]
}
 8010c64:	bf00      	nop
 8010c66:	3714      	adds	r7, #20
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	691b      	ldr	r3, [r3, #16]
 8010c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	6892      	ldr	r2, [r2, #8]
 8010c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	6852      	ldr	r2, [r2, #4]
 8010c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d103      	bne.n	8010ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	689a      	ldr	r2, [r3, #8]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	1e5a      	subs	r2, r3, #1
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10a      	bne.n	8010cee <xQueueGenericReset+0x2a>
	__asm volatile
 8010cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	60bb      	str	r3, [r7, #8]
}
 8010cea:	bf00      	nop
 8010cec:	e7fe      	b.n	8010cec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010cee:	f002 fa19 	bl	8013124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cfa:	68f9      	ldr	r1, [r7, #12]
 8010cfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010cfe:	fb01 f303 	mul.w	r3, r1, r3
 8010d02:	441a      	add	r2, r3
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	68f9      	ldr	r1, [r7, #12]
 8010d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d24:	fb01 f303 	mul.w	r3, r1, r3
 8010d28:	441a      	add	r2, r3
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	22ff      	movs	r2, #255	; 0xff
 8010d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	22ff      	movs	r2, #255	; 0xff
 8010d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d114      	bne.n	8010d6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d01a      	beq.n	8010d82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	3310      	adds	r3, #16
 8010d50:	4618      	mov	r0, r3
 8010d52:	f001 fa35 	bl	80121c0 <xTaskRemoveFromEventList>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d012      	beq.n	8010d82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010d5c:	4b0c      	ldr	r3, [pc, #48]	; (8010d90 <xQueueGenericReset+0xcc>)
 8010d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d62:	601a      	str	r2, [r3, #0]
 8010d64:	f3bf 8f4f 	dsb	sy
 8010d68:	f3bf 8f6f 	isb	sy
 8010d6c:	e009      	b.n	8010d82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	3310      	adds	r3, #16
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7ff fef2 	bl	8010b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	3324      	adds	r3, #36	; 0x24
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff feed 	bl	8010b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010d82:	f002 f9ff 	bl	8013184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010d86:	2301      	movs	r3, #1
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3710      	adds	r7, #16
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	e000ed04 	.word	0xe000ed04

08010d94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08e      	sub	sp, #56	; 0x38
 8010d98:	af02      	add	r7, sp, #8
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	607a      	str	r2, [r7, #4]
 8010da0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d10a      	bne.n	8010dbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dac:	f383 8811 	msr	BASEPRI, r3
 8010db0:	f3bf 8f6f 	isb	sy
 8010db4:	f3bf 8f4f 	dsb	sy
 8010db8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010dba:	bf00      	nop
 8010dbc:	e7fe      	b.n	8010dbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d10a      	bne.n	8010dda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc8:	f383 8811 	msr	BASEPRI, r3
 8010dcc:	f3bf 8f6f 	isb	sy
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010dd6:	bf00      	nop
 8010dd8:	e7fe      	b.n	8010dd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <xQueueGenericCreateStatic+0x52>
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d001      	beq.n	8010dea <xQueueGenericCreateStatic+0x56>
 8010de6:	2301      	movs	r3, #1
 8010de8:	e000      	b.n	8010dec <xQueueGenericCreateStatic+0x58>
 8010dea:	2300      	movs	r3, #0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10a      	bne.n	8010e06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	623b      	str	r3, [r7, #32]
}
 8010e02:	bf00      	nop
 8010e04:	e7fe      	b.n	8010e04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <xQueueGenericCreateStatic+0x7e>
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d101      	bne.n	8010e16 <xQueueGenericCreateStatic+0x82>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e000      	b.n	8010e18 <xQueueGenericCreateStatic+0x84>
 8010e16:	2300      	movs	r3, #0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10a      	bne.n	8010e32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	61fb      	str	r3, [r7, #28]
}
 8010e2e:	bf00      	nop
 8010e30:	e7fe      	b.n	8010e30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010e32:	2350      	movs	r3, #80	; 0x50
 8010e34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	2b50      	cmp	r3, #80	; 0x50
 8010e3a:	d00a      	beq.n	8010e52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e40:	f383 8811 	msr	BASEPRI, r3
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	61bb      	str	r3, [r7, #24]
}
 8010e4e:	bf00      	nop
 8010e50:	e7fe      	b.n	8010e50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010e52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00d      	beq.n	8010e7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e60:	2201      	movs	r2, #1
 8010e62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6c:	9300      	str	r3, [sp, #0]
 8010e6e:	4613      	mov	r3, r2
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	68b9      	ldr	r1, [r7, #8]
 8010e74:	68f8      	ldr	r0, [r7, #12]
 8010e76:	f000 f83f 	bl	8010ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3730      	adds	r7, #48	; 0x30
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b08a      	sub	sp, #40	; 0x28
 8010e88:	af02      	add	r7, sp, #8
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	4613      	mov	r3, r2
 8010e90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d10a      	bne.n	8010eae <xQueueGenericCreate+0x2a>
	__asm volatile
 8010e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9c:	f383 8811 	msr	BASEPRI, r3
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	613b      	str	r3, [r7, #16]
}
 8010eaa:	bf00      	nop
 8010eac:	e7fe      	b.n	8010eac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	fb02 f303 	mul.w	r3, r2, r3
 8010eb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	3350      	adds	r3, #80	; 0x50
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f002 fa53 	bl	8013368 <pvPortMalloc>
 8010ec2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d011      	beq.n	8010eee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	3350      	adds	r3, #80	; 0x50
 8010ed2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010ed4:	69bb      	ldr	r3, [r7, #24]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010edc:	79fa      	ldrb	r2, [r7, #7]
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	697a      	ldr	r2, [r7, #20]
 8010ee6:	68b9      	ldr	r1, [r7, #8]
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f000 f805 	bl	8010ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010eee:	69bb      	ldr	r3, [r7, #24]
	}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3720      	adds	r7, #32
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d103      	bne.n	8010f14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010f0c:	69bb      	ldr	r3, [r7, #24]
 8010f0e:	69ba      	ldr	r2, [r7, #24]
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	e002      	b.n	8010f1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	68fa      	ldr	r2, [r7, #12]
 8010f1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	68ba      	ldr	r2, [r7, #8]
 8010f24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010f26:	2101      	movs	r1, #1
 8010f28:	69b8      	ldr	r0, [r7, #24]
 8010f2a:	f7ff fecb 	bl	8010cc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	78fa      	ldrb	r2, [r7, #3]
 8010f32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010f36:	bf00      	nop
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
	...

08010f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b08e      	sub	sp, #56	; 0x38
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
 8010f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10a      	bne.n	8010f72 <xQueueGenericSend+0x32>
	__asm volatile
 8010f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f60:	f383 8811 	msr	BASEPRI, r3
 8010f64:	f3bf 8f6f 	isb	sy
 8010f68:	f3bf 8f4f 	dsb	sy
 8010f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010f6e:	bf00      	nop
 8010f70:	e7fe      	b.n	8010f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d103      	bne.n	8010f80 <xQueueGenericSend+0x40>
 8010f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d101      	bne.n	8010f84 <xQueueGenericSend+0x44>
 8010f80:	2301      	movs	r3, #1
 8010f82:	e000      	b.n	8010f86 <xQueueGenericSend+0x46>
 8010f84:	2300      	movs	r3, #0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10a      	bne.n	8010fa0 <xQueueGenericSend+0x60>
	__asm volatile
 8010f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8e:	f383 8811 	msr	BASEPRI, r3
 8010f92:	f3bf 8f6f 	isb	sy
 8010f96:	f3bf 8f4f 	dsb	sy
 8010f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010f9c:	bf00      	nop
 8010f9e:	e7fe      	b.n	8010f9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	d103      	bne.n	8010fae <xQueueGenericSend+0x6e>
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d101      	bne.n	8010fb2 <xQueueGenericSend+0x72>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e000      	b.n	8010fb4 <xQueueGenericSend+0x74>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d10a      	bne.n	8010fce <xQueueGenericSend+0x8e>
	__asm volatile
 8010fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbc:	f383 8811 	msr	BASEPRI, r3
 8010fc0:	f3bf 8f6f 	isb	sy
 8010fc4:	f3bf 8f4f 	dsb	sy
 8010fc8:	623b      	str	r3, [r7, #32]
}
 8010fca:	bf00      	nop
 8010fcc:	e7fe      	b.n	8010fcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fce:	f001 fb17 	bl	8012600 <xTaskGetSchedulerState>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d102      	bne.n	8010fde <xQueueGenericSend+0x9e>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d101      	bne.n	8010fe2 <xQueueGenericSend+0xa2>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e000      	b.n	8010fe4 <xQueueGenericSend+0xa4>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d10a      	bne.n	8010ffe <xQueueGenericSend+0xbe>
	__asm volatile
 8010fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fec:	f383 8811 	msr	BASEPRI, r3
 8010ff0:	f3bf 8f6f 	isb	sy
 8010ff4:	f3bf 8f4f 	dsb	sy
 8010ff8:	61fb      	str	r3, [r7, #28]
}
 8010ffa:	bf00      	nop
 8010ffc:	e7fe      	b.n	8010ffc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ffe:	f002 f891 	bl	8013124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801100a:	429a      	cmp	r2, r3
 801100c:	d302      	bcc.n	8011014 <xQueueGenericSend+0xd4>
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	2b02      	cmp	r3, #2
 8011012:	d129      	bne.n	8011068 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011014:	683a      	ldr	r2, [r7, #0]
 8011016:	68b9      	ldr	r1, [r7, #8]
 8011018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801101a:	f000 fac7 	bl	80115ac <prvCopyDataToQueue>
 801101e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011024:	2b00      	cmp	r3, #0
 8011026:	d010      	beq.n	801104a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102a:	3324      	adds	r3, #36	; 0x24
 801102c:	4618      	mov	r0, r3
 801102e:	f001 f8c7 	bl	80121c0 <xTaskRemoveFromEventList>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d013      	beq.n	8011060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011038:	4b3f      	ldr	r3, [pc, #252]	; (8011138 <xQueueGenericSend+0x1f8>)
 801103a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801103e:	601a      	str	r2, [r3, #0]
 8011040:	f3bf 8f4f 	dsb	sy
 8011044:	f3bf 8f6f 	isb	sy
 8011048:	e00a      	b.n	8011060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104c:	2b00      	cmp	r3, #0
 801104e:	d007      	beq.n	8011060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011050:	4b39      	ldr	r3, [pc, #228]	; (8011138 <xQueueGenericSend+0x1f8>)
 8011052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011056:	601a      	str	r2, [r3, #0]
 8011058:	f3bf 8f4f 	dsb	sy
 801105c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011060:	f002 f890 	bl	8013184 <vPortExitCritical>
				return pdPASS;
 8011064:	2301      	movs	r3, #1
 8011066:	e063      	b.n	8011130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d103      	bne.n	8011076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801106e:	f002 f889 	bl	8013184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011072:	2300      	movs	r3, #0
 8011074:	e05c      	b.n	8011130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011078:	2b00      	cmp	r3, #0
 801107a:	d106      	bne.n	801108a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801107c:	f107 0314 	add.w	r3, r7, #20
 8011080:	4618      	mov	r0, r3
 8011082:	f001 f963 	bl	801234c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011086:	2301      	movs	r3, #1
 8011088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801108a:	f002 f87b 	bl	8013184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801108e:	f000 fe37 	bl	8011d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011092:	f002 f847 	bl	8013124 <vPortEnterCritical>
 8011096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801109c:	b25b      	sxtb	r3, r3
 801109e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110a2:	d103      	bne.n	80110ac <xQueueGenericSend+0x16c>
 80110a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a6:	2200      	movs	r2, #0
 80110a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110b2:	b25b      	sxtb	r3, r3
 80110b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110b8:	d103      	bne.n	80110c2 <xQueueGenericSend+0x182>
 80110ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110bc:	2200      	movs	r2, #0
 80110be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110c2:	f002 f85f 	bl	8013184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110c6:	1d3a      	adds	r2, r7, #4
 80110c8:	f107 0314 	add.w	r3, r7, #20
 80110cc:	4611      	mov	r1, r2
 80110ce:	4618      	mov	r0, r3
 80110d0:	f001 f952 	bl	8012378 <xTaskCheckForTimeOut>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d124      	bne.n	8011124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80110da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110dc:	f000 fb5e 	bl	801179c <prvIsQueueFull>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d018      	beq.n	8011118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80110e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e8:	3310      	adds	r3, #16
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	4611      	mov	r1, r2
 80110ee:	4618      	mov	r0, r3
 80110f0:	f000 ffda 	bl	80120a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80110f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110f6:	f000 fae9 	bl	80116cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80110fa:	f000 fe0f 	bl	8011d1c <xTaskResumeAll>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	f47f af7c 	bne.w	8010ffe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011106:	4b0c      	ldr	r3, [pc, #48]	; (8011138 <xQueueGenericSend+0x1f8>)
 8011108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801110c:	601a      	str	r2, [r3, #0]
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	e772      	b.n	8010ffe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801111a:	f000 fad7 	bl	80116cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801111e:	f000 fdfd 	bl	8011d1c <xTaskResumeAll>
 8011122:	e76c      	b.n	8010ffe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011126:	f000 fad1 	bl	80116cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801112a:	f000 fdf7 	bl	8011d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801112e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011130:	4618      	mov	r0, r3
 8011132:	3738      	adds	r7, #56	; 0x38
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	e000ed04 	.word	0xe000ed04

0801113c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b090      	sub	sp, #64	; 0x40
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
 8011148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011150:	2b00      	cmp	r3, #0
 8011152:	d10a      	bne.n	801116a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011158:	f383 8811 	msr	BASEPRI, r3
 801115c:	f3bf 8f6f 	isb	sy
 8011160:	f3bf 8f4f 	dsb	sy
 8011164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011166:	bf00      	nop
 8011168:	e7fe      	b.n	8011168 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d103      	bne.n	8011178 <xQueueGenericSendFromISR+0x3c>
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011174:	2b00      	cmp	r3, #0
 8011176:	d101      	bne.n	801117c <xQueueGenericSendFromISR+0x40>
 8011178:	2301      	movs	r3, #1
 801117a:	e000      	b.n	801117e <xQueueGenericSendFromISR+0x42>
 801117c:	2300      	movs	r3, #0
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10a      	bne.n	8011198 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011186:	f383 8811 	msr	BASEPRI, r3
 801118a:	f3bf 8f6f 	isb	sy
 801118e:	f3bf 8f4f 	dsb	sy
 8011192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011194:	bf00      	nop
 8011196:	e7fe      	b.n	8011196 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	2b02      	cmp	r3, #2
 801119c:	d103      	bne.n	80111a6 <xQueueGenericSendFromISR+0x6a>
 801119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d101      	bne.n	80111aa <xQueueGenericSendFromISR+0x6e>
 80111a6:	2301      	movs	r3, #1
 80111a8:	e000      	b.n	80111ac <xQueueGenericSendFromISR+0x70>
 80111aa:	2300      	movs	r3, #0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d10a      	bne.n	80111c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80111b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b4:	f383 8811 	msr	BASEPRI, r3
 80111b8:	f3bf 8f6f 	isb	sy
 80111bc:	f3bf 8f4f 	dsb	sy
 80111c0:	623b      	str	r3, [r7, #32]
}
 80111c2:	bf00      	nop
 80111c4:	e7fe      	b.n	80111c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111c6:	f002 f88f 	bl	80132e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80111ca:	f3ef 8211 	mrs	r2, BASEPRI
 80111ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d2:	f383 8811 	msr	BASEPRI, r3
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	61fa      	str	r2, [r7, #28]
 80111e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80111e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80111e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80111e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d302      	bcc.n	80111f8 <xQueueGenericSendFromISR+0xbc>
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	d12f      	bne.n	8011258 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011206:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011208:	683a      	ldr	r2, [r7, #0]
 801120a:	68b9      	ldr	r1, [r7, #8]
 801120c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801120e:	f000 f9cd 	bl	80115ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011212:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801121a:	d112      	bne.n	8011242 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011220:	2b00      	cmp	r3, #0
 8011222:	d016      	beq.n	8011252 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	3324      	adds	r3, #36	; 0x24
 8011228:	4618      	mov	r0, r3
 801122a:	f000 ffc9 	bl	80121c0 <xTaskRemoveFromEventList>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00e      	beq.n	8011252 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00b      	beq.n	8011252 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2201      	movs	r2, #1
 801123e:	601a      	str	r2, [r3, #0]
 8011240:	e007      	b.n	8011252 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011246:	3301      	adds	r3, #1
 8011248:	b2db      	uxtb	r3, r3
 801124a:	b25a      	sxtb	r2, r3
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011252:	2301      	movs	r3, #1
 8011254:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011256:	e001      	b.n	801125c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011258:	2300      	movs	r3, #0
 801125a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801125e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801126a:	4618      	mov	r0, r3
 801126c:	3740      	adds	r7, #64	; 0x40
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
	...

08011274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b08c      	sub	sp, #48	; 0x30
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011280:	2300      	movs	r3, #0
 8011282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128a:	2b00      	cmp	r3, #0
 801128c:	d10a      	bne.n	80112a4 <xQueueReceive+0x30>
	__asm volatile
 801128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011292:	f383 8811 	msr	BASEPRI, r3
 8011296:	f3bf 8f6f 	isb	sy
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	623b      	str	r3, [r7, #32]
}
 80112a0:	bf00      	nop
 80112a2:	e7fe      	b.n	80112a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d103      	bne.n	80112b2 <xQueueReceive+0x3e>
 80112aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d101      	bne.n	80112b6 <xQueueReceive+0x42>
 80112b2:	2301      	movs	r3, #1
 80112b4:	e000      	b.n	80112b8 <xQueueReceive+0x44>
 80112b6:	2300      	movs	r3, #0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d10a      	bne.n	80112d2 <xQueueReceive+0x5e>
	__asm volatile
 80112bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c0:	f383 8811 	msr	BASEPRI, r3
 80112c4:	f3bf 8f6f 	isb	sy
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	61fb      	str	r3, [r7, #28]
}
 80112ce:	bf00      	nop
 80112d0:	e7fe      	b.n	80112d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80112d2:	f001 f995 	bl	8012600 <xTaskGetSchedulerState>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d102      	bne.n	80112e2 <xQueueReceive+0x6e>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d101      	bne.n	80112e6 <xQueueReceive+0x72>
 80112e2:	2301      	movs	r3, #1
 80112e4:	e000      	b.n	80112e8 <xQueueReceive+0x74>
 80112e6:	2300      	movs	r3, #0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d10a      	bne.n	8011302 <xQueueReceive+0x8e>
	__asm volatile
 80112ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f0:	f383 8811 	msr	BASEPRI, r3
 80112f4:	f3bf 8f6f 	isb	sy
 80112f8:	f3bf 8f4f 	dsb	sy
 80112fc:	61bb      	str	r3, [r7, #24]
}
 80112fe:	bf00      	nop
 8011300:	e7fe      	b.n	8011300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011302:	f001 ff0f 	bl	8013124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801130a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	2b00      	cmp	r3, #0
 8011310:	d01f      	beq.n	8011352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011312:	68b9      	ldr	r1, [r7, #8]
 8011314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011316:	f000 f9b3 	bl	8011680 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131c:	1e5a      	subs	r2, r3, #1
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011324:	691b      	ldr	r3, [r3, #16]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00f      	beq.n	801134a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132c:	3310      	adds	r3, #16
 801132e:	4618      	mov	r0, r3
 8011330:	f000 ff46 	bl	80121c0 <xTaskRemoveFromEventList>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d007      	beq.n	801134a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801133a:	4b3d      	ldr	r3, [pc, #244]	; (8011430 <xQueueReceive+0x1bc>)
 801133c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011340:	601a      	str	r2, [r3, #0]
 8011342:	f3bf 8f4f 	dsb	sy
 8011346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801134a:	f001 ff1b 	bl	8013184 <vPortExitCritical>
				return pdPASS;
 801134e:	2301      	movs	r3, #1
 8011350:	e069      	b.n	8011426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d103      	bne.n	8011360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011358:	f001 ff14 	bl	8013184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801135c:	2300      	movs	r3, #0
 801135e:	e062      	b.n	8011426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011366:	f107 0310 	add.w	r3, r7, #16
 801136a:	4618      	mov	r0, r3
 801136c:	f000 ffee 	bl	801234c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011370:	2301      	movs	r3, #1
 8011372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011374:	f001 ff06 	bl	8013184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011378:	f000 fcc2 	bl	8011d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801137c:	f001 fed2 	bl	8013124 <vPortEnterCritical>
 8011380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011386:	b25b      	sxtb	r3, r3
 8011388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801138c:	d103      	bne.n	8011396 <xQueueReceive+0x122>
 801138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011390:	2200      	movs	r2, #0
 8011392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801139c:	b25b      	sxtb	r3, r3
 801139e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113a2:	d103      	bne.n	80113ac <xQueueReceive+0x138>
 80113a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a6:	2200      	movs	r2, #0
 80113a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80113ac:	f001 feea 	bl	8013184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80113b0:	1d3a      	adds	r2, r7, #4
 80113b2:	f107 0310 	add.w	r3, r7, #16
 80113b6:	4611      	mov	r1, r2
 80113b8:	4618      	mov	r0, r3
 80113ba:	f000 ffdd 	bl	8012378 <xTaskCheckForTimeOut>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d123      	bne.n	801140c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80113c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113c6:	f000 f9d3 	bl	8011770 <prvIsQueueEmpty>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d017      	beq.n	8011400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80113d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d2:	3324      	adds	r3, #36	; 0x24
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	4611      	mov	r1, r2
 80113d8:	4618      	mov	r0, r3
 80113da:	f000 fe65 	bl	80120a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80113de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113e0:	f000 f974 	bl	80116cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80113e4:	f000 fc9a 	bl	8011d1c <xTaskResumeAll>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d189      	bne.n	8011302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80113ee:	4b10      	ldr	r3, [pc, #64]	; (8011430 <xQueueReceive+0x1bc>)
 80113f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113f4:	601a      	str	r2, [r3, #0]
 80113f6:	f3bf 8f4f 	dsb	sy
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	e780      	b.n	8011302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011402:	f000 f963 	bl	80116cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011406:	f000 fc89 	bl	8011d1c <xTaskResumeAll>
 801140a:	e77a      	b.n	8011302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801140c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801140e:	f000 f95d 	bl	80116cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011412:	f000 fc83 	bl	8011d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011418:	f000 f9aa 	bl	8011770 <prvIsQueueEmpty>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	f43f af6f 	beq.w	8011302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011426:	4618      	mov	r0, r3
 8011428:	3730      	adds	r7, #48	; 0x30
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	e000ed04 	.word	0xe000ed04

08011434 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b08e      	sub	sp, #56	; 0x38
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	2b00      	cmp	r3, #0
 8011448:	d10a      	bne.n	8011460 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801144a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144e:	f383 8811 	msr	BASEPRI, r3
 8011452:	f3bf 8f6f 	isb	sy
 8011456:	f3bf 8f4f 	dsb	sy
 801145a:	623b      	str	r3, [r7, #32]
}
 801145c:	bf00      	nop
 801145e:	e7fe      	b.n	801145e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d103      	bne.n	801146e <xQueueReceiveFromISR+0x3a>
 8011466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <xQueueReceiveFromISR+0x3e>
 801146e:	2301      	movs	r3, #1
 8011470:	e000      	b.n	8011474 <xQueueReceiveFromISR+0x40>
 8011472:	2300      	movs	r3, #0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d10a      	bne.n	801148e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147c:	f383 8811 	msr	BASEPRI, r3
 8011480:	f3bf 8f6f 	isb	sy
 8011484:	f3bf 8f4f 	dsb	sy
 8011488:	61fb      	str	r3, [r7, #28]
}
 801148a:	bf00      	nop
 801148c:	e7fe      	b.n	801148c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801148e:	f001 ff2b 	bl	80132e8 <vPortValidateInterruptPriority>
	__asm volatile
 8011492:	f3ef 8211 	mrs	r2, BASEPRI
 8011496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149a:	f383 8811 	msr	BASEPRI, r3
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f3bf 8f4f 	dsb	sy
 80114a6:	61ba      	str	r2, [r7, #24]
 80114a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80114aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80114ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80114b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d02f      	beq.n	801151a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80114ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80114c4:	68b9      	ldr	r1, [r7, #8]
 80114c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114c8:	f000 f8da 	bl	8011680 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80114cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ce:	1e5a      	subs	r2, r3, #1
 80114d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80114d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80114d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114dc:	d112      	bne.n	8011504 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e0:	691b      	ldr	r3, [r3, #16]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d016      	beq.n	8011514 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e8:	3310      	adds	r3, #16
 80114ea:	4618      	mov	r0, r3
 80114ec:	f000 fe68 	bl	80121c0 <xTaskRemoveFromEventList>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00e      	beq.n	8011514 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00b      	beq.n	8011514 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2201      	movs	r2, #1
 8011500:	601a      	str	r2, [r3, #0]
 8011502:	e007      	b.n	8011514 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011508:	3301      	adds	r3, #1
 801150a:	b2db      	uxtb	r3, r3
 801150c:	b25a      	sxtb	r2, r3
 801150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011514:	2301      	movs	r3, #1
 8011516:	637b      	str	r3, [r7, #52]	; 0x34
 8011518:	e001      	b.n	801151e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801151a:	2300      	movs	r3, #0
 801151c:	637b      	str	r3, [r7, #52]	; 0x34
 801151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011520:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	f383 8811 	msr	BASEPRI, r3
}
 8011528:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801152c:	4618      	mov	r0, r3
 801152e:	3738      	adds	r7, #56	; 0x38
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d10a      	bne.n	8011558 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8011542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011546:	f383 8811 	msr	BASEPRI, r3
 801154a:	f3bf 8f6f 	isb	sy
 801154e:	f3bf 8f4f 	dsb	sy
 8011552:	60bb      	str	r3, [r7, #8]
}
 8011554:	bf00      	nop
 8011556:	e7fe      	b.n	8011556 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8011558:	f001 fde4 	bl	8013124 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011560:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011562:	f001 fe0f 	bl	8013184 <vPortExitCritical>

	return uxReturn;
 8011566:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011568:	4618      	mov	r0, r3
 801156a:	3710      	adds	r7, #16
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011570:	b480      	push	{r7}
 8011572:	b087      	sub	sp, #28
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10a      	bne.n	8011598 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8011582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011586:	f383 8811 	msr	BASEPRI, r3
 801158a:	f3bf 8f6f 	isb	sy
 801158e:	f3bf 8f4f 	dsb	sy
 8011592:	60fb      	str	r3, [r7, #12]
}
 8011594:	bf00      	nop
 8011596:	e7fe      	b.n	8011596 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801159c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801159e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80115a0:	4618      	mov	r0, r3
 80115a2:	371c      	adds	r7, #28
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b086      	sub	sp, #24
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80115b8:	2300      	movs	r3, #0
 80115ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d10d      	bne.n	80115e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d14d      	bne.n	801166e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	689b      	ldr	r3, [r3, #8]
 80115d6:	4618      	mov	r0, r3
 80115d8:	f001 f830 	bl	801263c <xTaskPriorityDisinherit>
 80115dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2200      	movs	r2, #0
 80115e2:	609a      	str	r2, [r3, #8]
 80115e4:	e043      	b.n	801166e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d119      	bne.n	8011620 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	6858      	ldr	r0, [r3, #4]
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115f4:	461a      	mov	r2, r3
 80115f6:	68b9      	ldr	r1, [r7, #8]
 80115f8:	f002 f8da 	bl	80137b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	685a      	ldr	r2, [r3, #4]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011604:	441a      	add	r2, r3
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	685a      	ldr	r2, [r3, #4]
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	689b      	ldr	r3, [r3, #8]
 8011612:	429a      	cmp	r2, r3
 8011614:	d32b      	bcc.n	801166e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	605a      	str	r2, [r3, #4]
 801161e:	e026      	b.n	801166e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	68d8      	ldr	r0, [r3, #12]
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011628:	461a      	mov	r2, r3
 801162a:	68b9      	ldr	r1, [r7, #8]
 801162c:	f002 f8c0 	bl	80137b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	68da      	ldr	r2, [r3, #12]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011638:	425b      	negs	r3, r3
 801163a:	441a      	add	r2, r3
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	68da      	ldr	r2, [r3, #12]
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	429a      	cmp	r2, r3
 801164a:	d207      	bcs.n	801165c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	689a      	ldr	r2, [r3, #8]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011654:	425b      	negs	r3, r3
 8011656:	441a      	add	r2, r3
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b02      	cmp	r3, #2
 8011660:	d105      	bne.n	801166e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d002      	beq.n	801166e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	3b01      	subs	r3, #1
 801166c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011676:	697b      	ldr	r3, [r7, #20]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3718      	adds	r7, #24
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801168e:	2b00      	cmp	r3, #0
 8011690:	d018      	beq.n	80116c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	68da      	ldr	r2, [r3, #12]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801169a:	441a      	add	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	68da      	ldr	r2, [r3, #12]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	689b      	ldr	r3, [r3, #8]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d303      	bcc.n	80116b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	68d9      	ldr	r1, [r3, #12]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116bc:	461a      	mov	r2, r3
 80116be:	6838      	ldr	r0, [r7, #0]
 80116c0:	f002 f876 	bl	80137b0 <memcpy>
	}
}
 80116c4:	bf00      	nop
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80116d4:	f001 fd26 	bl	8013124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80116e0:	e011      	b.n	8011706 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d012      	beq.n	8011710 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	3324      	adds	r3, #36	; 0x24
 80116ee:	4618      	mov	r0, r3
 80116f0:	f000 fd66 	bl	80121c0 <xTaskRemoveFromEventList>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d001      	beq.n	80116fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80116fa:	f000 fe9f 	bl	801243c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80116fe:	7bfb      	ldrb	r3, [r7, #15]
 8011700:	3b01      	subs	r3, #1
 8011702:	b2db      	uxtb	r3, r3
 8011704:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801170a:	2b00      	cmp	r3, #0
 801170c:	dce9      	bgt.n	80116e2 <prvUnlockQueue+0x16>
 801170e:	e000      	b.n	8011712 <prvUnlockQueue+0x46>
					break;
 8011710:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	22ff      	movs	r2, #255	; 0xff
 8011716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801171a:	f001 fd33 	bl	8013184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801171e:	f001 fd01 	bl	8013124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011728:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801172a:	e011      	b.n	8011750 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	691b      	ldr	r3, [r3, #16]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d012      	beq.n	801175a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	3310      	adds	r3, #16
 8011738:	4618      	mov	r0, r3
 801173a:	f000 fd41 	bl	80121c0 <xTaskRemoveFromEventList>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d001      	beq.n	8011748 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011744:	f000 fe7a 	bl	801243c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011748:	7bbb      	ldrb	r3, [r7, #14]
 801174a:	3b01      	subs	r3, #1
 801174c:	b2db      	uxtb	r3, r3
 801174e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011754:	2b00      	cmp	r3, #0
 8011756:	dce9      	bgt.n	801172c <prvUnlockQueue+0x60>
 8011758:	e000      	b.n	801175c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801175a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	22ff      	movs	r2, #255	; 0xff
 8011760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011764:	f001 fd0e 	bl	8013184 <vPortExitCritical>
}
 8011768:	bf00      	nop
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011778:	f001 fcd4 	bl	8013124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011780:	2b00      	cmp	r3, #0
 8011782:	d102      	bne.n	801178a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011784:	2301      	movs	r3, #1
 8011786:	60fb      	str	r3, [r7, #12]
 8011788:	e001      	b.n	801178e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801178a:	2300      	movs	r3, #0
 801178c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801178e:	f001 fcf9 	bl	8013184 <vPortExitCritical>

	return xReturn;
 8011792:	68fb      	ldr	r3, [r7, #12]
}
 8011794:	4618      	mov	r0, r3
 8011796:	3710      	adds	r7, #16
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b084      	sub	sp, #16
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80117a4:	f001 fcbe 	bl	8013124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d102      	bne.n	80117ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80117b4:	2301      	movs	r3, #1
 80117b6:	60fb      	str	r3, [r7, #12]
 80117b8:	e001      	b.n	80117be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80117ba:	2300      	movs	r3, #0
 80117bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80117be:	f001 fce1 	bl	8013184 <vPortExitCritical>

	return xReturn;
 80117c2:	68fb      	ldr	r3, [r7, #12]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3710      	adds	r7, #16
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80117cc:	b480      	push	{r7}
 80117ce:	b085      	sub	sp, #20
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80117d6:	2300      	movs	r3, #0
 80117d8:	60fb      	str	r3, [r7, #12]
 80117da:	e014      	b.n	8011806 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80117dc:	4a0f      	ldr	r2, [pc, #60]	; (801181c <vQueueAddToRegistry+0x50>)
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10b      	bne.n	8011800 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80117e8:	490c      	ldr	r1, [pc, #48]	; (801181c <vQueueAddToRegistry+0x50>)
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80117f2:	4a0a      	ldr	r2, [pc, #40]	; (801181c <vQueueAddToRegistry+0x50>)
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	00db      	lsls	r3, r3, #3
 80117f8:	4413      	add	r3, r2
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80117fe:	e006      	b.n	801180e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	3301      	adds	r3, #1
 8011804:	60fb      	str	r3, [r7, #12]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2b07      	cmp	r3, #7
 801180a:	d9e7      	bls.n	80117dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801180c:	bf00      	nop
 801180e:	bf00      	nop
 8011810:	3714      	adds	r7, #20
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	24000d78 	.word	0x24000d78

08011820 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011820:	b580      	push	{r7, lr}
 8011822:	b086      	sub	sp, #24
 8011824:	af00      	add	r7, sp, #0
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	60b9      	str	r1, [r7, #8]
 801182a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011830:	f001 fc78 	bl	8013124 <vPortEnterCritical>
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801183a:	b25b      	sxtb	r3, r3
 801183c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011840:	d103      	bne.n	801184a <vQueueWaitForMessageRestricted+0x2a>
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	2200      	movs	r2, #0
 8011846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011850:	b25b      	sxtb	r3, r3
 8011852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011856:	d103      	bne.n	8011860 <vQueueWaitForMessageRestricted+0x40>
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	2200      	movs	r2, #0
 801185c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011860:	f001 fc90 	bl	8013184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011868:	2b00      	cmp	r3, #0
 801186a:	d106      	bne.n	801187a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	3324      	adds	r3, #36	; 0x24
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	68b9      	ldr	r1, [r7, #8]
 8011874:	4618      	mov	r0, r3
 8011876:	f000 fc77 	bl	8012168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801187a:	6978      	ldr	r0, [r7, #20]
 801187c:	f7ff ff26 	bl	80116cc <prvUnlockQueue>
	}
 8011880:	bf00      	nop
 8011882:	3718      	adds	r7, #24
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011888:	b580      	push	{r7, lr}
 801188a:	b08e      	sub	sp, #56	; 0x38
 801188c:	af04      	add	r7, sp, #16
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
 8011894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10a      	bne.n	80118b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 801189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a0:	f383 8811 	msr	BASEPRI, r3
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	623b      	str	r3, [r7, #32]
}
 80118ae:	bf00      	nop
 80118b0:	e7fe      	b.n	80118b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80118b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d10a      	bne.n	80118ce <xTaskCreateStatic+0x46>
	__asm volatile
 80118b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118bc:	f383 8811 	msr	BASEPRI, r3
 80118c0:	f3bf 8f6f 	isb	sy
 80118c4:	f3bf 8f4f 	dsb	sy
 80118c8:	61fb      	str	r3, [r7, #28]
}
 80118ca:	bf00      	nop
 80118cc:	e7fe      	b.n	80118cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80118ce:	235c      	movs	r3, #92	; 0x5c
 80118d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	2b5c      	cmp	r3, #92	; 0x5c
 80118d6:	d00a      	beq.n	80118ee <xTaskCreateStatic+0x66>
	__asm volatile
 80118d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118dc:	f383 8811 	msr	BASEPRI, r3
 80118e0:	f3bf 8f6f 	isb	sy
 80118e4:	f3bf 8f4f 	dsb	sy
 80118e8:	61bb      	str	r3, [r7, #24]
}
 80118ea:	bf00      	nop
 80118ec:	e7fe      	b.n	80118ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80118ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80118f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d01e      	beq.n	8011934 <xTaskCreateStatic+0xac>
 80118f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d01b      	beq.n	8011934 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80118fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011904:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011908:	2202      	movs	r2, #2
 801190a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801190e:	2300      	movs	r3, #0
 8011910:	9303      	str	r3, [sp, #12]
 8011912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011914:	9302      	str	r3, [sp, #8]
 8011916:	f107 0314 	add.w	r3, r7, #20
 801191a:	9301      	str	r3, [sp, #4]
 801191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191e:	9300      	str	r3, [sp, #0]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	68b9      	ldr	r1, [r7, #8]
 8011926:	68f8      	ldr	r0, [r7, #12]
 8011928:	f000 f850 	bl	80119cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801192c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801192e:	f000 f8dd 	bl	8011aec <prvAddNewTaskToReadyList>
 8011932:	e001      	b.n	8011938 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011934:	2300      	movs	r3, #0
 8011936:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011938:	697b      	ldr	r3, [r7, #20]
	}
 801193a:	4618      	mov	r0, r3
 801193c:	3728      	adds	r7, #40	; 0x28
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011942:	b580      	push	{r7, lr}
 8011944:	b08c      	sub	sp, #48	; 0x30
 8011946:	af04      	add	r7, sp, #16
 8011948:	60f8      	str	r0, [r7, #12]
 801194a:	60b9      	str	r1, [r7, #8]
 801194c:	603b      	str	r3, [r7, #0]
 801194e:	4613      	mov	r3, r2
 8011950:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011952:	88fb      	ldrh	r3, [r7, #6]
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	4618      	mov	r0, r3
 8011958:	f001 fd06 	bl	8013368 <pvPortMalloc>
 801195c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d00e      	beq.n	8011982 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011964:	205c      	movs	r0, #92	; 0x5c
 8011966:	f001 fcff 	bl	8013368 <pvPortMalloc>
 801196a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801196c:	69fb      	ldr	r3, [r7, #28]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d003      	beq.n	801197a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011972:	69fb      	ldr	r3, [r7, #28]
 8011974:	697a      	ldr	r2, [r7, #20]
 8011976:	631a      	str	r2, [r3, #48]	; 0x30
 8011978:	e005      	b.n	8011986 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801197a:	6978      	ldr	r0, [r7, #20]
 801197c:	f001 fdc0 	bl	8013500 <vPortFree>
 8011980:	e001      	b.n	8011986 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011982:	2300      	movs	r3, #0
 8011984:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d017      	beq.n	80119bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801198c:	69fb      	ldr	r3, [r7, #28]
 801198e:	2200      	movs	r2, #0
 8011990:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011994:	88fa      	ldrh	r2, [r7, #6]
 8011996:	2300      	movs	r3, #0
 8011998:	9303      	str	r3, [sp, #12]
 801199a:	69fb      	ldr	r3, [r7, #28]
 801199c:	9302      	str	r3, [sp, #8]
 801199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a0:	9301      	str	r3, [sp, #4]
 80119a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	68b9      	ldr	r1, [r7, #8]
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f000 f80e 	bl	80119cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80119b0:	69f8      	ldr	r0, [r7, #28]
 80119b2:	f000 f89b 	bl	8011aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80119b6:	2301      	movs	r3, #1
 80119b8:	61bb      	str	r3, [r7, #24]
 80119ba:	e002      	b.n	80119c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80119bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80119c2:	69bb      	ldr	r3, [r7, #24]
	}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3720      	adds	r7, #32
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b088      	sub	sp, #32
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80119da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	461a      	mov	r2, r3
 80119e4:	21a5      	movs	r1, #165	; 0xa5
 80119e6:	f001 fef1 	bl	80137cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80119ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119ee:	6879      	ldr	r1, [r7, #4]
 80119f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80119f4:	440b      	add	r3, r1
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	f023 0307 	bic.w	r3, r3, #7
 8011a02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	f003 0307 	and.w	r3, r3, #7
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d00a      	beq.n	8011a24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a12:	f383 8811 	msr	BASEPRI, r3
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	f3bf 8f4f 	dsb	sy
 8011a1e:	617b      	str	r3, [r7, #20]
}
 8011a20:	bf00      	nop
 8011a22:	e7fe      	b.n	8011a22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d01f      	beq.n	8011a6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	61fb      	str	r3, [r7, #28]
 8011a2e:	e012      	b.n	8011a56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011a30:	68ba      	ldr	r2, [r7, #8]
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	4413      	add	r3, r2
 8011a36:	7819      	ldrb	r1, [r3, #0]
 8011a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	3334      	adds	r3, #52	; 0x34
 8011a40:	460a      	mov	r2, r1
 8011a42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011a44:	68ba      	ldr	r2, [r7, #8]
 8011a46:	69fb      	ldr	r3, [r7, #28]
 8011a48:	4413      	add	r3, r2
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d006      	beq.n	8011a5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	3301      	adds	r3, #1
 8011a54:	61fb      	str	r3, [r7, #28]
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	2b0f      	cmp	r3, #15
 8011a5a:	d9e9      	bls.n	8011a30 <prvInitialiseNewTask+0x64>
 8011a5c:	e000      	b.n	8011a60 <prvInitialiseNewTask+0x94>
			{
				break;
 8011a5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a62:	2200      	movs	r2, #0
 8011a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011a68:	e003      	b.n	8011a72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a74:	2b37      	cmp	r3, #55	; 0x37
 8011a76:	d901      	bls.n	8011a7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011a78:	2337      	movs	r3, #55	; 0x37
 8011a7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a90:	3304      	adds	r3, #4
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7ff f882 	bl	8010b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9a:	3318      	adds	r3, #24
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7ff f87d 	bl	8010b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ab6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aba:	2200      	movs	r2, #0
 8011abc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011ac6:	683a      	ldr	r2, [r7, #0]
 8011ac8:	68f9      	ldr	r1, [r7, #12]
 8011aca:	69b8      	ldr	r0, [r7, #24]
 8011acc:	f001 f9fe 	bl	8012ecc <pxPortInitialiseStack>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d002      	beq.n	8011ae2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ae0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ae2:	bf00      	nop
 8011ae4:	3720      	adds	r7, #32
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
	...

08011aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011af4:	f001 fb16 	bl	8013124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011af8:	4b2d      	ldr	r3, [pc, #180]	; (8011bb0 <prvAddNewTaskToReadyList+0xc4>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	3301      	adds	r3, #1
 8011afe:	4a2c      	ldr	r2, [pc, #176]	; (8011bb0 <prvAddNewTaskToReadyList+0xc4>)
 8011b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011b02:	4b2c      	ldr	r3, [pc, #176]	; (8011bb4 <prvAddNewTaskToReadyList+0xc8>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d109      	bne.n	8011b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011b0a:	4a2a      	ldr	r2, [pc, #168]	; (8011bb4 <prvAddNewTaskToReadyList+0xc8>)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011b10:	4b27      	ldr	r3, [pc, #156]	; (8011bb0 <prvAddNewTaskToReadyList+0xc4>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d110      	bne.n	8011b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011b18:	f000 fcb4 	bl	8012484 <prvInitialiseTaskLists>
 8011b1c:	e00d      	b.n	8011b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011b1e:	4b26      	ldr	r3, [pc, #152]	; (8011bb8 <prvAddNewTaskToReadyList+0xcc>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d109      	bne.n	8011b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011b26:	4b23      	ldr	r3, [pc, #140]	; (8011bb4 <prvAddNewTaskToReadyList+0xc8>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d802      	bhi.n	8011b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011b34:	4a1f      	ldr	r2, [pc, #124]	; (8011bb4 <prvAddNewTaskToReadyList+0xc8>)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011b3a:	4b20      	ldr	r3, [pc, #128]	; (8011bbc <prvAddNewTaskToReadyList+0xd0>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	3301      	adds	r3, #1
 8011b40:	4a1e      	ldr	r2, [pc, #120]	; (8011bbc <prvAddNewTaskToReadyList+0xd0>)
 8011b42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011b44:	4b1d      	ldr	r3, [pc, #116]	; (8011bbc <prvAddNewTaskToReadyList+0xd0>)
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b50:	4b1b      	ldr	r3, [pc, #108]	; (8011bc0 <prvAddNewTaskToReadyList+0xd4>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d903      	bls.n	8011b60 <prvAddNewTaskToReadyList+0x74>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b5c:	4a18      	ldr	r2, [pc, #96]	; (8011bc0 <prvAddNewTaskToReadyList+0xd4>)
 8011b5e:	6013      	str	r3, [r2, #0]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b64:	4613      	mov	r3, r2
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	4413      	add	r3, r2
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4a15      	ldr	r2, [pc, #84]	; (8011bc4 <prvAddNewTaskToReadyList+0xd8>)
 8011b6e:	441a      	add	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	3304      	adds	r3, #4
 8011b74:	4619      	mov	r1, r3
 8011b76:	4610      	mov	r0, r2
 8011b78:	f7ff f81d 	bl	8010bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011b7c:	f001 fb02 	bl	8013184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011b80:	4b0d      	ldr	r3, [pc, #52]	; (8011bb8 <prvAddNewTaskToReadyList+0xcc>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00e      	beq.n	8011ba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011b88:	4b0a      	ldr	r3, [pc, #40]	; (8011bb4 <prvAddNewTaskToReadyList+0xc8>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d207      	bcs.n	8011ba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011b96:	4b0c      	ldr	r3, [pc, #48]	; (8011bc8 <prvAddNewTaskToReadyList+0xdc>)
 8011b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b9c:	601a      	str	r2, [r3, #0]
 8011b9e:	f3bf 8f4f 	dsb	sy
 8011ba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ba6:	bf00      	nop
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	2400128c 	.word	0x2400128c
 8011bb4:	24000db8 	.word	0x24000db8
 8011bb8:	24001298 	.word	0x24001298
 8011bbc:	240012a8 	.word	0x240012a8
 8011bc0:	24001294 	.word	0x24001294
 8011bc4:	24000dbc 	.word	0x24000dbc
 8011bc8:	e000ed04 	.word	0xe000ed04

08011bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d017      	beq.n	8011c0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011bde:	4b13      	ldr	r3, [pc, #76]	; (8011c2c <vTaskDelay+0x60>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00a      	beq.n	8011bfc <vTaskDelay+0x30>
	__asm volatile
 8011be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bea:	f383 8811 	msr	BASEPRI, r3
 8011bee:	f3bf 8f6f 	isb	sy
 8011bf2:	f3bf 8f4f 	dsb	sy
 8011bf6:	60bb      	str	r3, [r7, #8]
}
 8011bf8:	bf00      	nop
 8011bfa:	e7fe      	b.n	8011bfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011bfc:	f000 f880 	bl	8011d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011c00:	2100      	movs	r1, #0
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 fda0 	bl	8012748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011c08:	f000 f888 	bl	8011d1c <xTaskResumeAll>
 8011c0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d107      	bne.n	8011c24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011c14:	4b06      	ldr	r3, [pc, #24]	; (8011c30 <vTaskDelay+0x64>)
 8011c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c1a:	601a      	str	r2, [r3, #0]
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c24:	bf00      	nop
 8011c26:	3710      	adds	r7, #16
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	240012b4 	.word	0x240012b4
 8011c30:	e000ed04 	.word	0xe000ed04

08011c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b08a      	sub	sp, #40	; 0x28
 8011c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011c42:	463a      	mov	r2, r7
 8011c44:	1d39      	adds	r1, r7, #4
 8011c46:	f107 0308 	add.w	r3, r7, #8
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7fe fd64 	bl	8010718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011c50:	6839      	ldr	r1, [r7, #0]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	9202      	str	r2, [sp, #8]
 8011c58:	9301      	str	r3, [sp, #4]
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	2300      	movs	r3, #0
 8011c60:	460a      	mov	r2, r1
 8011c62:	4921      	ldr	r1, [pc, #132]	; (8011ce8 <vTaskStartScheduler+0xb4>)
 8011c64:	4821      	ldr	r0, [pc, #132]	; (8011cec <vTaskStartScheduler+0xb8>)
 8011c66:	f7ff fe0f 	bl	8011888 <xTaskCreateStatic>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	4a20      	ldr	r2, [pc, #128]	; (8011cf0 <vTaskStartScheduler+0xbc>)
 8011c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011c70:	4b1f      	ldr	r3, [pc, #124]	; (8011cf0 <vTaskStartScheduler+0xbc>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011c78:	2301      	movs	r3, #1
 8011c7a:	617b      	str	r3, [r7, #20]
 8011c7c:	e001      	b.n	8011c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d102      	bne.n	8011c8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011c88:	f000 fdb2 	bl	80127f0 <xTimerCreateTimerTask>
 8011c8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d116      	bne.n	8011cc2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	613b      	str	r3, [r7, #16]
}
 8011ca6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011ca8:	4b12      	ldr	r3, [pc, #72]	; (8011cf4 <vTaskStartScheduler+0xc0>)
 8011caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011cae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011cb0:	4b11      	ldr	r3, [pc, #68]	; (8011cf8 <vTaskStartScheduler+0xc4>)
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011cb6:	4b11      	ldr	r3, [pc, #68]	; (8011cfc <vTaskStartScheduler+0xc8>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011cbc:	f001 f990 	bl	8012fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011cc0:	e00e      	b.n	8011ce0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cc8:	d10a      	bne.n	8011ce0 <vTaskStartScheduler+0xac>
	__asm volatile
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	f383 8811 	msr	BASEPRI, r3
 8011cd2:	f3bf 8f6f 	isb	sy
 8011cd6:	f3bf 8f4f 	dsb	sy
 8011cda:	60fb      	str	r3, [r7, #12]
}
 8011cdc:	bf00      	nop
 8011cde:	e7fe      	b.n	8011cde <vTaskStartScheduler+0xaa>
}
 8011ce0:	bf00      	nop
 8011ce2:	3718      	adds	r7, #24
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	08014a08 	.word	0x08014a08
 8011cec:	08012455 	.word	0x08012455
 8011cf0:	240012b0 	.word	0x240012b0
 8011cf4:	240012ac 	.word	0x240012ac
 8011cf8:	24001298 	.word	0x24001298
 8011cfc:	24001290 	.word	0x24001290

08011d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011d00:	b480      	push	{r7}
 8011d02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011d04:	4b04      	ldr	r3, [pc, #16]	; (8011d18 <vTaskSuspendAll+0x18>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	4a03      	ldr	r2, [pc, #12]	; (8011d18 <vTaskSuspendAll+0x18>)
 8011d0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011d0e:	bf00      	nop
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	240012b4 	.word	0x240012b4

08011d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011d22:	2300      	movs	r3, #0
 8011d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011d26:	2300      	movs	r3, #0
 8011d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011d2a:	4b42      	ldr	r3, [pc, #264]	; (8011e34 <xTaskResumeAll+0x118>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d10a      	bne.n	8011d48 <xTaskResumeAll+0x2c>
	__asm volatile
 8011d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d36:	f383 8811 	msr	BASEPRI, r3
 8011d3a:	f3bf 8f6f 	isb	sy
 8011d3e:	f3bf 8f4f 	dsb	sy
 8011d42:	603b      	str	r3, [r7, #0]
}
 8011d44:	bf00      	nop
 8011d46:	e7fe      	b.n	8011d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011d48:	f001 f9ec 	bl	8013124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011d4c:	4b39      	ldr	r3, [pc, #228]	; (8011e34 <xTaskResumeAll+0x118>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	3b01      	subs	r3, #1
 8011d52:	4a38      	ldr	r2, [pc, #224]	; (8011e34 <xTaskResumeAll+0x118>)
 8011d54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d56:	4b37      	ldr	r3, [pc, #220]	; (8011e34 <xTaskResumeAll+0x118>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d162      	bne.n	8011e24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011d5e:	4b36      	ldr	r3, [pc, #216]	; (8011e38 <xTaskResumeAll+0x11c>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d05e      	beq.n	8011e24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d66:	e02f      	b.n	8011dc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d68:	4b34      	ldr	r3, [pc, #208]	; (8011e3c <xTaskResumeAll+0x120>)
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	3318      	adds	r3, #24
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fe ff7b 	bl	8010c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	3304      	adds	r3, #4
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fe ff76 	bl	8010c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d88:	4b2d      	ldr	r3, [pc, #180]	; (8011e40 <xTaskResumeAll+0x124>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d903      	bls.n	8011d98 <xTaskResumeAll+0x7c>
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d94:	4a2a      	ldr	r2, [pc, #168]	; (8011e40 <xTaskResumeAll+0x124>)
 8011d96:	6013      	str	r3, [r2, #0]
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	4413      	add	r3, r2
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	4a27      	ldr	r2, [pc, #156]	; (8011e44 <xTaskResumeAll+0x128>)
 8011da6:	441a      	add	r2, r3
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	3304      	adds	r3, #4
 8011dac:	4619      	mov	r1, r3
 8011dae:	4610      	mov	r0, r2
 8011db0:	f7fe ff01 	bl	8010bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db8:	4b23      	ldr	r3, [pc, #140]	; (8011e48 <xTaskResumeAll+0x12c>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d302      	bcc.n	8011dc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011dc2:	4b22      	ldr	r3, [pc, #136]	; (8011e4c <xTaskResumeAll+0x130>)
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011dc8:	4b1c      	ldr	r3, [pc, #112]	; (8011e3c <xTaskResumeAll+0x120>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d1cb      	bne.n	8011d68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d001      	beq.n	8011dda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011dd6:	f000 fbf3 	bl	80125c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011dda:	4b1d      	ldr	r3, [pc, #116]	; (8011e50 <xTaskResumeAll+0x134>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d010      	beq.n	8011e08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011de6:	f000 f847 	bl	8011e78 <xTaskIncrementTick>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d002      	beq.n	8011df6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011df0:	4b16      	ldr	r3, [pc, #88]	; (8011e4c <xTaskResumeAll+0x130>)
 8011df2:	2201      	movs	r2, #1
 8011df4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	3b01      	subs	r3, #1
 8011dfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1f1      	bne.n	8011de6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011e02:	4b13      	ldr	r3, [pc, #76]	; (8011e50 <xTaskResumeAll+0x134>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011e08:	4b10      	ldr	r3, [pc, #64]	; (8011e4c <xTaskResumeAll+0x130>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d009      	beq.n	8011e24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011e10:	2301      	movs	r3, #1
 8011e12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011e14:	4b0f      	ldr	r3, [pc, #60]	; (8011e54 <xTaskResumeAll+0x138>)
 8011e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	f3bf 8f4f 	dsb	sy
 8011e20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e24:	f001 f9ae 	bl	8013184 <vPortExitCritical>

	return xAlreadyYielded;
 8011e28:	68bb      	ldr	r3, [r7, #8]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	240012b4 	.word	0x240012b4
 8011e38:	2400128c 	.word	0x2400128c
 8011e3c:	2400124c 	.word	0x2400124c
 8011e40:	24001294 	.word	0x24001294
 8011e44:	24000dbc 	.word	0x24000dbc
 8011e48:	24000db8 	.word	0x24000db8
 8011e4c:	240012a0 	.word	0x240012a0
 8011e50:	2400129c 	.word	0x2400129c
 8011e54:	e000ed04 	.word	0xe000ed04

08011e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011e5e:	4b05      	ldr	r3, [pc, #20]	; (8011e74 <xTaskGetTickCount+0x1c>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011e64:	687b      	ldr	r3, [r7, #4]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	370c      	adds	r7, #12
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	24001290 	.word	0x24001290

08011e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b086      	sub	sp, #24
 8011e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e82:	4b4f      	ldr	r3, [pc, #316]	; (8011fc0 <xTaskIncrementTick+0x148>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	f040 808f 	bne.w	8011faa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011e8c:	4b4d      	ldr	r3, [pc, #308]	; (8011fc4 <xTaskIncrementTick+0x14c>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	3301      	adds	r3, #1
 8011e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011e94:	4a4b      	ldr	r2, [pc, #300]	; (8011fc4 <xTaskIncrementTick+0x14c>)
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d120      	bne.n	8011ee2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011ea0:	4b49      	ldr	r3, [pc, #292]	; (8011fc8 <xTaskIncrementTick+0x150>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00a      	beq.n	8011ec0 <xTaskIncrementTick+0x48>
	__asm volatile
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	603b      	str	r3, [r7, #0]
}
 8011ebc:	bf00      	nop
 8011ebe:	e7fe      	b.n	8011ebe <xTaskIncrementTick+0x46>
 8011ec0:	4b41      	ldr	r3, [pc, #260]	; (8011fc8 <xTaskIncrementTick+0x150>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	60fb      	str	r3, [r7, #12]
 8011ec6:	4b41      	ldr	r3, [pc, #260]	; (8011fcc <xTaskIncrementTick+0x154>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4a3f      	ldr	r2, [pc, #252]	; (8011fc8 <xTaskIncrementTick+0x150>)
 8011ecc:	6013      	str	r3, [r2, #0]
 8011ece:	4a3f      	ldr	r2, [pc, #252]	; (8011fcc <xTaskIncrementTick+0x154>)
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	6013      	str	r3, [r2, #0]
 8011ed4:	4b3e      	ldr	r3, [pc, #248]	; (8011fd0 <xTaskIncrementTick+0x158>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	3301      	adds	r3, #1
 8011eda:	4a3d      	ldr	r2, [pc, #244]	; (8011fd0 <xTaskIncrementTick+0x158>)
 8011edc:	6013      	str	r3, [r2, #0]
 8011ede:	f000 fb6f 	bl	80125c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011ee2:	4b3c      	ldr	r3, [pc, #240]	; (8011fd4 <xTaskIncrementTick+0x15c>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	693a      	ldr	r2, [r7, #16]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d349      	bcc.n	8011f80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011eec:	4b36      	ldr	r3, [pc, #216]	; (8011fc8 <xTaskIncrementTick+0x150>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d104      	bne.n	8011f00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ef6:	4b37      	ldr	r3, [pc, #220]	; (8011fd4 <xTaskIncrementTick+0x15c>)
 8011ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011efc:	601a      	str	r2, [r3, #0]
					break;
 8011efe:	e03f      	b.n	8011f80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f00:	4b31      	ldr	r3, [pc, #196]	; (8011fc8 <xTaskIncrementTick+0x150>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	68db      	ldr	r3, [r3, #12]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011f10:	693a      	ldr	r2, [r7, #16]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d203      	bcs.n	8011f20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011f18:	4a2e      	ldr	r2, [pc, #184]	; (8011fd4 <xTaskIncrementTick+0x15c>)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011f1e:	e02f      	b.n	8011f80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	3304      	adds	r3, #4
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7fe fea3 	bl	8010c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d004      	beq.n	8011f3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	3318      	adds	r3, #24
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7fe fe9a 	bl	8010c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f40:	4b25      	ldr	r3, [pc, #148]	; (8011fd8 <xTaskIncrementTick+0x160>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d903      	bls.n	8011f50 <xTaskIncrementTick+0xd8>
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4c:	4a22      	ldr	r2, [pc, #136]	; (8011fd8 <xTaskIncrementTick+0x160>)
 8011f4e:	6013      	str	r3, [r2, #0]
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f54:	4613      	mov	r3, r2
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4413      	add	r3, r2
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	4a1f      	ldr	r2, [pc, #124]	; (8011fdc <xTaskIncrementTick+0x164>)
 8011f5e:	441a      	add	r2, r3
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	3304      	adds	r3, #4
 8011f64:	4619      	mov	r1, r3
 8011f66:	4610      	mov	r0, r2
 8011f68:	f7fe fe25 	bl	8010bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f70:	4b1b      	ldr	r3, [pc, #108]	; (8011fe0 <xTaskIncrementTick+0x168>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d3b8      	bcc.n	8011eec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f7e:	e7b5      	b.n	8011eec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011f80:	4b17      	ldr	r3, [pc, #92]	; (8011fe0 <xTaskIncrementTick+0x168>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f86:	4915      	ldr	r1, [pc, #84]	; (8011fdc <xTaskIncrementTick+0x164>)
 8011f88:	4613      	mov	r3, r2
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	4413      	add	r3, r2
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	440b      	add	r3, r1
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d901      	bls.n	8011f9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011f98:	2301      	movs	r3, #1
 8011f9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011f9c:	4b11      	ldr	r3, [pc, #68]	; (8011fe4 <xTaskIncrementTick+0x16c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d007      	beq.n	8011fb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	617b      	str	r3, [r7, #20]
 8011fa8:	e004      	b.n	8011fb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011faa:	4b0f      	ldr	r3, [pc, #60]	; (8011fe8 <xTaskIncrementTick+0x170>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	4a0d      	ldr	r2, [pc, #52]	; (8011fe8 <xTaskIncrementTick+0x170>)
 8011fb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011fb4:	697b      	ldr	r3, [r7, #20]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3718      	adds	r7, #24
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	240012b4 	.word	0x240012b4
 8011fc4:	24001290 	.word	0x24001290
 8011fc8:	24001244 	.word	0x24001244
 8011fcc:	24001248 	.word	0x24001248
 8011fd0:	240012a4 	.word	0x240012a4
 8011fd4:	240012ac 	.word	0x240012ac
 8011fd8:	24001294 	.word	0x24001294
 8011fdc:	24000dbc 	.word	0x24000dbc
 8011fe0:	24000db8 	.word	0x24000db8
 8011fe4:	240012a0 	.word	0x240012a0
 8011fe8:	2400129c 	.word	0x2400129c

08011fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011fec:	b480      	push	{r7}
 8011fee:	b085      	sub	sp, #20
 8011ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011ff2:	4b28      	ldr	r3, [pc, #160]	; (8012094 <vTaskSwitchContext+0xa8>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d003      	beq.n	8012002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011ffa:	4b27      	ldr	r3, [pc, #156]	; (8012098 <vTaskSwitchContext+0xac>)
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012000:	e041      	b.n	8012086 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012002:	4b25      	ldr	r3, [pc, #148]	; (8012098 <vTaskSwitchContext+0xac>)
 8012004:	2200      	movs	r2, #0
 8012006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012008:	4b24      	ldr	r3, [pc, #144]	; (801209c <vTaskSwitchContext+0xb0>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	60fb      	str	r3, [r7, #12]
 801200e:	e010      	b.n	8012032 <vTaskSwitchContext+0x46>
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d10a      	bne.n	801202c <vTaskSwitchContext+0x40>
	__asm volatile
 8012016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201a:	f383 8811 	msr	BASEPRI, r3
 801201e:	f3bf 8f6f 	isb	sy
 8012022:	f3bf 8f4f 	dsb	sy
 8012026:	607b      	str	r3, [r7, #4]
}
 8012028:	bf00      	nop
 801202a:	e7fe      	b.n	801202a <vTaskSwitchContext+0x3e>
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	3b01      	subs	r3, #1
 8012030:	60fb      	str	r3, [r7, #12]
 8012032:	491b      	ldr	r1, [pc, #108]	; (80120a0 <vTaskSwitchContext+0xb4>)
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	4613      	mov	r3, r2
 8012038:	009b      	lsls	r3, r3, #2
 801203a:	4413      	add	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	440b      	add	r3, r1
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d0e4      	beq.n	8012010 <vTaskSwitchContext+0x24>
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	4613      	mov	r3, r2
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	4413      	add	r3, r2
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	4a13      	ldr	r2, [pc, #76]	; (80120a0 <vTaskSwitchContext+0xb4>)
 8012052:	4413      	add	r3, r2
 8012054:	60bb      	str	r3, [r7, #8]
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	685a      	ldr	r2, [r3, #4]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	605a      	str	r2, [r3, #4]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	685a      	ldr	r2, [r3, #4]
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	3308      	adds	r3, #8
 8012068:	429a      	cmp	r2, r3
 801206a:	d104      	bne.n	8012076 <vTaskSwitchContext+0x8a>
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	605a      	str	r2, [r3, #4]
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	68db      	ldr	r3, [r3, #12]
 801207c:	4a09      	ldr	r2, [pc, #36]	; (80120a4 <vTaskSwitchContext+0xb8>)
 801207e:	6013      	str	r3, [r2, #0]
 8012080:	4a06      	ldr	r2, [pc, #24]	; (801209c <vTaskSwitchContext+0xb0>)
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	6013      	str	r3, [r2, #0]
}
 8012086:	bf00      	nop
 8012088:	3714      	adds	r7, #20
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	240012b4 	.word	0x240012b4
 8012098:	240012a0 	.word	0x240012a0
 801209c:	24001294 	.word	0x24001294
 80120a0:	24000dbc 	.word	0x24000dbc
 80120a4:	24000db8 	.word	0x24000db8

080120a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b084      	sub	sp, #16
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d10a      	bne.n	80120ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80120b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120bc:	f383 8811 	msr	BASEPRI, r3
 80120c0:	f3bf 8f6f 	isb	sy
 80120c4:	f3bf 8f4f 	dsb	sy
 80120c8:	60fb      	str	r3, [r7, #12]
}
 80120ca:	bf00      	nop
 80120cc:	e7fe      	b.n	80120cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80120ce:	4b07      	ldr	r3, [pc, #28]	; (80120ec <vTaskPlaceOnEventList+0x44>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	3318      	adds	r3, #24
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7fe fd91 	bl	8010bfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80120dc:	2101      	movs	r1, #1
 80120de:	6838      	ldr	r0, [r7, #0]
 80120e0:	f000 fb32 	bl	8012748 <prvAddCurrentTaskToDelayedList>
}
 80120e4:	bf00      	nop
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	24000db8 	.word	0x24000db8

080120f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b086      	sub	sp, #24
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10a      	bne.n	8012118 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012106:	f383 8811 	msr	BASEPRI, r3
 801210a:	f3bf 8f6f 	isb	sy
 801210e:	f3bf 8f4f 	dsb	sy
 8012112:	617b      	str	r3, [r7, #20]
}
 8012114:	bf00      	nop
 8012116:	e7fe      	b.n	8012116 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8012118:	4b11      	ldr	r3, [pc, #68]	; (8012160 <vTaskPlaceOnUnorderedEventList+0x70>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10a      	bne.n	8012136 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012124:	f383 8811 	msr	BASEPRI, r3
 8012128:	f3bf 8f6f 	isb	sy
 801212c:	f3bf 8f4f 	dsb	sy
 8012130:	613b      	str	r3, [r7, #16]
}
 8012132:	bf00      	nop
 8012134:	e7fe      	b.n	8012134 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012136:	4b0b      	ldr	r3, [pc, #44]	; (8012164 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	68ba      	ldr	r2, [r7, #8]
 801213c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012140:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012142:	4b08      	ldr	r3, [pc, #32]	; (8012164 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	3318      	adds	r3, #24
 8012148:	4619      	mov	r1, r3
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f7fe fd33 	bl	8010bb6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012150:	2101      	movs	r1, #1
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 faf8 	bl	8012748 <prvAddCurrentTaskToDelayedList>
}
 8012158:	bf00      	nop
 801215a:	3718      	adds	r7, #24
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	240012b4 	.word	0x240012b4
 8012164:	24000db8 	.word	0x24000db8

08012168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012168:	b580      	push	{r7, lr}
 801216a:	b086      	sub	sp, #24
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d10a      	bne.n	8012190 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217e:	f383 8811 	msr	BASEPRI, r3
 8012182:	f3bf 8f6f 	isb	sy
 8012186:	f3bf 8f4f 	dsb	sy
 801218a:	617b      	str	r3, [r7, #20]
}
 801218c:	bf00      	nop
 801218e:	e7fe      	b.n	801218e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012190:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <vTaskPlaceOnEventListRestricted+0x54>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	3318      	adds	r3, #24
 8012196:	4619      	mov	r1, r3
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f7fe fd0c 	bl	8010bb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80121a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80121aa:	6879      	ldr	r1, [r7, #4]
 80121ac:	68b8      	ldr	r0, [r7, #8]
 80121ae:	f000 facb 	bl	8012748 <prvAddCurrentTaskToDelayedList>
	}
 80121b2:	bf00      	nop
 80121b4:	3718      	adds	r7, #24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	24000db8 	.word	0x24000db8

080121c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	68db      	ldr	r3, [r3, #12]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d10a      	bne.n	80121ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80121d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121da:	f383 8811 	msr	BASEPRI, r3
 80121de:	f3bf 8f6f 	isb	sy
 80121e2:	f3bf 8f4f 	dsb	sy
 80121e6:	60fb      	str	r3, [r7, #12]
}
 80121e8:	bf00      	nop
 80121ea:	e7fe      	b.n	80121ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	3318      	adds	r3, #24
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7fe fd3d 	bl	8010c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80121f6:	4b1e      	ldr	r3, [pc, #120]	; (8012270 <xTaskRemoveFromEventList+0xb0>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d11d      	bne.n	801223a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	3304      	adds	r3, #4
 8012202:	4618      	mov	r0, r3
 8012204:	f7fe fd34 	bl	8010c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801220c:	4b19      	ldr	r3, [pc, #100]	; (8012274 <xTaskRemoveFromEventList+0xb4>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	429a      	cmp	r2, r3
 8012212:	d903      	bls.n	801221c <xTaskRemoveFromEventList+0x5c>
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012218:	4a16      	ldr	r2, [pc, #88]	; (8012274 <xTaskRemoveFromEventList+0xb4>)
 801221a:	6013      	str	r3, [r2, #0]
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012220:	4613      	mov	r3, r2
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	4413      	add	r3, r2
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	4a13      	ldr	r2, [pc, #76]	; (8012278 <xTaskRemoveFromEventList+0xb8>)
 801222a:	441a      	add	r2, r3
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	3304      	adds	r3, #4
 8012230:	4619      	mov	r1, r3
 8012232:	4610      	mov	r0, r2
 8012234:	f7fe fcbf 	bl	8010bb6 <vListInsertEnd>
 8012238:	e005      	b.n	8012246 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	3318      	adds	r3, #24
 801223e:	4619      	mov	r1, r3
 8012240:	480e      	ldr	r0, [pc, #56]	; (801227c <xTaskRemoveFromEventList+0xbc>)
 8012242:	f7fe fcb8 	bl	8010bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801224a:	4b0d      	ldr	r3, [pc, #52]	; (8012280 <xTaskRemoveFromEventList+0xc0>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012250:	429a      	cmp	r2, r3
 8012252:	d905      	bls.n	8012260 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012254:	2301      	movs	r3, #1
 8012256:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012258:	4b0a      	ldr	r3, [pc, #40]	; (8012284 <xTaskRemoveFromEventList+0xc4>)
 801225a:	2201      	movs	r2, #1
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	e001      	b.n	8012264 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012260:	2300      	movs	r3, #0
 8012262:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012264:	697b      	ldr	r3, [r7, #20]
}
 8012266:	4618      	mov	r0, r3
 8012268:	3718      	adds	r7, #24
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	240012b4 	.word	0x240012b4
 8012274:	24001294 	.word	0x24001294
 8012278:	24000dbc 	.word	0x24000dbc
 801227c:	2400124c 	.word	0x2400124c
 8012280:	24000db8 	.word	0x24000db8
 8012284:	240012a0 	.word	0x240012a0

08012288 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012292:	4b29      	ldr	r3, [pc, #164]	; (8012338 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d10a      	bne.n	80122b0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801229e:	f383 8811 	msr	BASEPRI, r3
 80122a2:	f3bf 8f6f 	isb	sy
 80122a6:	f3bf 8f4f 	dsb	sy
 80122aa:	613b      	str	r3, [r7, #16]
}
 80122ac:	bf00      	nop
 80122ae:	e7fe      	b.n	80122ae <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	68db      	ldr	r3, [r3, #12]
 80122be:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d10a      	bne.n	80122dc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80122c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ca:	f383 8811 	msr	BASEPRI, r3
 80122ce:	f3bf 8f6f 	isb	sy
 80122d2:	f3bf 8f4f 	dsb	sy
 80122d6:	60fb      	str	r3, [r7, #12]
}
 80122d8:	bf00      	nop
 80122da:	e7fe      	b.n	80122da <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7fe fcc7 	bl	8010c70 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	3304      	adds	r3, #4
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7fe fcc2 	bl	8010c70 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122f0:	4b12      	ldr	r3, [pc, #72]	; (801233c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d903      	bls.n	8012300 <vTaskRemoveFromUnorderedEventList+0x78>
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fc:	4a0f      	ldr	r2, [pc, #60]	; (801233c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80122fe:	6013      	str	r3, [r2, #0]
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012304:	4613      	mov	r3, r2
 8012306:	009b      	lsls	r3, r3, #2
 8012308:	4413      	add	r3, r2
 801230a:	009b      	lsls	r3, r3, #2
 801230c:	4a0c      	ldr	r2, [pc, #48]	; (8012340 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801230e:	441a      	add	r2, r3
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	3304      	adds	r3, #4
 8012314:	4619      	mov	r1, r3
 8012316:	4610      	mov	r0, r2
 8012318:	f7fe fc4d 	bl	8010bb6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012320:	4b08      	ldr	r3, [pc, #32]	; (8012344 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012326:	429a      	cmp	r2, r3
 8012328:	d902      	bls.n	8012330 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801232a:	4b07      	ldr	r3, [pc, #28]	; (8012348 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801232c:	2201      	movs	r2, #1
 801232e:	601a      	str	r2, [r3, #0]
	}
}
 8012330:	bf00      	nop
 8012332:	3718      	adds	r7, #24
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	240012b4 	.word	0x240012b4
 801233c:	24001294 	.word	0x24001294
 8012340:	24000dbc 	.word	0x24000dbc
 8012344:	24000db8 	.word	0x24000db8
 8012348:	240012a0 	.word	0x240012a0

0801234c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012354:	4b06      	ldr	r3, [pc, #24]	; (8012370 <vTaskInternalSetTimeOutState+0x24>)
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801235c:	4b05      	ldr	r3, [pc, #20]	; (8012374 <vTaskInternalSetTimeOutState+0x28>)
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	605a      	str	r2, [r3, #4]
}
 8012364:	bf00      	nop
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	240012a4 	.word	0x240012a4
 8012374:	24001290 	.word	0x24001290

08012378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b088      	sub	sp, #32
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10a      	bne.n	801239e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238c:	f383 8811 	msr	BASEPRI, r3
 8012390:	f3bf 8f6f 	isb	sy
 8012394:	f3bf 8f4f 	dsb	sy
 8012398:	613b      	str	r3, [r7, #16]
}
 801239a:	bf00      	nop
 801239c:	e7fe      	b.n	801239c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d10a      	bne.n	80123ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80123a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a8:	f383 8811 	msr	BASEPRI, r3
 80123ac:	f3bf 8f6f 	isb	sy
 80123b0:	f3bf 8f4f 	dsb	sy
 80123b4:	60fb      	str	r3, [r7, #12]
}
 80123b6:	bf00      	nop
 80123b8:	e7fe      	b.n	80123b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80123ba:	f000 feb3 	bl	8013124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80123be:	4b1d      	ldr	r3, [pc, #116]	; (8012434 <xTaskCheckForTimeOut+0xbc>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	69ba      	ldr	r2, [r7, #24]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123d6:	d102      	bne.n	80123de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80123d8:	2300      	movs	r3, #0
 80123da:	61fb      	str	r3, [r7, #28]
 80123dc:	e023      	b.n	8012426 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	4b15      	ldr	r3, [pc, #84]	; (8012438 <xTaskCheckForTimeOut+0xc0>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d007      	beq.n	80123fa <xTaskCheckForTimeOut+0x82>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	69ba      	ldr	r2, [r7, #24]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d302      	bcc.n	80123fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80123f4:	2301      	movs	r3, #1
 80123f6:	61fb      	str	r3, [r7, #28]
 80123f8:	e015      	b.n	8012426 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	697a      	ldr	r2, [r7, #20]
 8012400:	429a      	cmp	r2, r3
 8012402:	d20b      	bcs.n	801241c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	1ad2      	subs	r2, r2, r3
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7ff ff9b 	bl	801234c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012416:	2300      	movs	r3, #0
 8012418:	61fb      	str	r3, [r7, #28]
 801241a:	e004      	b.n	8012426 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	2200      	movs	r2, #0
 8012420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012422:	2301      	movs	r3, #1
 8012424:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012426:	f000 fead 	bl	8013184 <vPortExitCritical>

	return xReturn;
 801242a:	69fb      	ldr	r3, [r7, #28]
}
 801242c:	4618      	mov	r0, r3
 801242e:	3720      	adds	r7, #32
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	24001290 	.word	0x24001290
 8012438:	240012a4 	.word	0x240012a4

0801243c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801243c:	b480      	push	{r7}
 801243e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012440:	4b03      	ldr	r3, [pc, #12]	; (8012450 <vTaskMissedYield+0x14>)
 8012442:	2201      	movs	r2, #1
 8012444:	601a      	str	r2, [r3, #0]
}
 8012446:	bf00      	nop
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr
 8012450:	240012a0 	.word	0x240012a0

08012454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801245c:	f000 f852 	bl	8012504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012460:	4b06      	ldr	r3, [pc, #24]	; (801247c <prvIdleTask+0x28>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d9f9      	bls.n	801245c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012468:	4b05      	ldr	r3, [pc, #20]	; (8012480 <prvIdleTask+0x2c>)
 801246a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801246e:	601a      	str	r2, [r3, #0]
 8012470:	f3bf 8f4f 	dsb	sy
 8012474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012478:	e7f0      	b.n	801245c <prvIdleTask+0x8>
 801247a:	bf00      	nop
 801247c:	24000dbc 	.word	0x24000dbc
 8012480:	e000ed04 	.word	0xe000ed04

08012484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801248a:	2300      	movs	r3, #0
 801248c:	607b      	str	r3, [r7, #4]
 801248e:	e00c      	b.n	80124aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	4613      	mov	r3, r2
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4a12      	ldr	r2, [pc, #72]	; (80124e4 <prvInitialiseTaskLists+0x60>)
 801249c:	4413      	add	r3, r2
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fe fb5c 	bl	8010b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	3301      	adds	r3, #1
 80124a8:	607b      	str	r3, [r7, #4]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2b37      	cmp	r3, #55	; 0x37
 80124ae:	d9ef      	bls.n	8012490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80124b0:	480d      	ldr	r0, [pc, #52]	; (80124e8 <prvInitialiseTaskLists+0x64>)
 80124b2:	f7fe fb53 	bl	8010b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80124b6:	480d      	ldr	r0, [pc, #52]	; (80124ec <prvInitialiseTaskLists+0x68>)
 80124b8:	f7fe fb50 	bl	8010b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80124bc:	480c      	ldr	r0, [pc, #48]	; (80124f0 <prvInitialiseTaskLists+0x6c>)
 80124be:	f7fe fb4d 	bl	8010b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80124c2:	480c      	ldr	r0, [pc, #48]	; (80124f4 <prvInitialiseTaskLists+0x70>)
 80124c4:	f7fe fb4a 	bl	8010b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80124c8:	480b      	ldr	r0, [pc, #44]	; (80124f8 <prvInitialiseTaskLists+0x74>)
 80124ca:	f7fe fb47 	bl	8010b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80124ce:	4b0b      	ldr	r3, [pc, #44]	; (80124fc <prvInitialiseTaskLists+0x78>)
 80124d0:	4a05      	ldr	r2, [pc, #20]	; (80124e8 <prvInitialiseTaskLists+0x64>)
 80124d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80124d4:	4b0a      	ldr	r3, [pc, #40]	; (8012500 <prvInitialiseTaskLists+0x7c>)
 80124d6:	4a05      	ldr	r2, [pc, #20]	; (80124ec <prvInitialiseTaskLists+0x68>)
 80124d8:	601a      	str	r2, [r3, #0]
}
 80124da:	bf00      	nop
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	24000dbc 	.word	0x24000dbc
 80124e8:	2400121c 	.word	0x2400121c
 80124ec:	24001230 	.word	0x24001230
 80124f0:	2400124c 	.word	0x2400124c
 80124f4:	24001260 	.word	0x24001260
 80124f8:	24001278 	.word	0x24001278
 80124fc:	24001244 	.word	0x24001244
 8012500:	24001248 	.word	0x24001248

08012504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801250a:	e019      	b.n	8012540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801250c:	f000 fe0a 	bl	8013124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012510:	4b10      	ldr	r3, [pc, #64]	; (8012554 <prvCheckTasksWaitingTermination+0x50>)
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	3304      	adds	r3, #4
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe fba7 	bl	8010c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012522:	4b0d      	ldr	r3, [pc, #52]	; (8012558 <prvCheckTasksWaitingTermination+0x54>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	3b01      	subs	r3, #1
 8012528:	4a0b      	ldr	r2, [pc, #44]	; (8012558 <prvCheckTasksWaitingTermination+0x54>)
 801252a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801252c:	4b0b      	ldr	r3, [pc, #44]	; (801255c <prvCheckTasksWaitingTermination+0x58>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	3b01      	subs	r3, #1
 8012532:	4a0a      	ldr	r2, [pc, #40]	; (801255c <prvCheckTasksWaitingTermination+0x58>)
 8012534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012536:	f000 fe25 	bl	8013184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f810 	bl	8012560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012540:	4b06      	ldr	r3, [pc, #24]	; (801255c <prvCheckTasksWaitingTermination+0x58>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d1e1      	bne.n	801250c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012548:	bf00      	nop
 801254a:	bf00      	nop
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	24001260 	.word	0x24001260
 8012558:	2400128c 	.word	0x2400128c
 801255c:	24001274 	.word	0x24001274

08012560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012560:	b580      	push	{r7, lr}
 8012562:	b084      	sub	sp, #16
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801256e:	2b00      	cmp	r3, #0
 8012570:	d108      	bne.n	8012584 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012576:	4618      	mov	r0, r3
 8012578:	f000 ffc2 	bl	8013500 <vPortFree>
				vPortFree( pxTCB );
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f000 ffbf 	bl	8013500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012582:	e018      	b.n	80125b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801258a:	2b01      	cmp	r3, #1
 801258c:	d103      	bne.n	8012596 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 ffb6 	bl	8013500 <vPortFree>
	}
 8012594:	e00f      	b.n	80125b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801259c:	2b02      	cmp	r3, #2
 801259e:	d00a      	beq.n	80125b6 <prvDeleteTCB+0x56>
	__asm volatile
 80125a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	60fb      	str	r3, [r7, #12]
}
 80125b2:	bf00      	nop
 80125b4:	e7fe      	b.n	80125b4 <prvDeleteTCB+0x54>
	}
 80125b6:	bf00      	nop
 80125b8:	3710      	adds	r7, #16
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
	...

080125c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80125c6:	4b0c      	ldr	r3, [pc, #48]	; (80125f8 <prvResetNextTaskUnblockTime+0x38>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d104      	bne.n	80125da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80125d0:	4b0a      	ldr	r3, [pc, #40]	; (80125fc <prvResetNextTaskUnblockTime+0x3c>)
 80125d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80125d8:	e008      	b.n	80125ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125da:	4b07      	ldr	r3, [pc, #28]	; (80125f8 <prvResetNextTaskUnblockTime+0x38>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	4a04      	ldr	r2, [pc, #16]	; (80125fc <prvResetNextTaskUnblockTime+0x3c>)
 80125ea:	6013      	str	r3, [r2, #0]
}
 80125ec:	bf00      	nop
 80125ee:	370c      	adds	r7, #12
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr
 80125f8:	24001244 	.word	0x24001244
 80125fc:	240012ac 	.word	0x240012ac

08012600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012606:	4b0b      	ldr	r3, [pc, #44]	; (8012634 <xTaskGetSchedulerState+0x34>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d102      	bne.n	8012614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801260e:	2301      	movs	r3, #1
 8012610:	607b      	str	r3, [r7, #4]
 8012612:	e008      	b.n	8012626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012614:	4b08      	ldr	r3, [pc, #32]	; (8012638 <xTaskGetSchedulerState+0x38>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d102      	bne.n	8012622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801261c:	2302      	movs	r3, #2
 801261e:	607b      	str	r3, [r7, #4]
 8012620:	e001      	b.n	8012626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012622:	2300      	movs	r3, #0
 8012624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012626:	687b      	ldr	r3, [r7, #4]
	}
 8012628:	4618      	mov	r0, r3
 801262a:	370c      	adds	r7, #12
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr
 8012634:	24001298 	.word	0x24001298
 8012638:	240012b4 	.word	0x240012b4

0801263c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012648:	2300      	movs	r3, #0
 801264a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d056      	beq.n	8012700 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012652:	4b2e      	ldr	r3, [pc, #184]	; (801270c <xTaskPriorityDisinherit+0xd0>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	693a      	ldr	r2, [r7, #16]
 8012658:	429a      	cmp	r2, r3
 801265a:	d00a      	beq.n	8012672 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012660:	f383 8811 	msr	BASEPRI, r3
 8012664:	f3bf 8f6f 	isb	sy
 8012668:	f3bf 8f4f 	dsb	sy
 801266c:	60fb      	str	r3, [r7, #12]
}
 801266e:	bf00      	nop
 8012670:	e7fe      	b.n	8012670 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012676:	2b00      	cmp	r3, #0
 8012678:	d10a      	bne.n	8012690 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267e:	f383 8811 	msr	BASEPRI, r3
 8012682:	f3bf 8f6f 	isb	sy
 8012686:	f3bf 8f4f 	dsb	sy
 801268a:	60bb      	str	r3, [r7, #8]
}
 801268c:	bf00      	nop
 801268e:	e7fe      	b.n	801268e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012694:	1e5a      	subs	r2, r3, #1
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d02c      	beq.n	8012700 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d128      	bne.n	8012700 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	3304      	adds	r3, #4
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fe fadc 	bl	8010c70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80126b8:	693b      	ldr	r3, [r7, #16]
 80126ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126d0:	4b0f      	ldr	r3, [pc, #60]	; (8012710 <xTaskPriorityDisinherit+0xd4>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d903      	bls.n	80126e0 <xTaskPriorityDisinherit+0xa4>
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126dc:	4a0c      	ldr	r2, [pc, #48]	; (8012710 <xTaskPriorityDisinherit+0xd4>)
 80126de:	6013      	str	r3, [r2, #0]
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126e4:	4613      	mov	r3, r2
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	4413      	add	r3, r2
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4a09      	ldr	r2, [pc, #36]	; (8012714 <xTaskPriorityDisinherit+0xd8>)
 80126ee:	441a      	add	r2, r3
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	3304      	adds	r3, #4
 80126f4:	4619      	mov	r1, r3
 80126f6:	4610      	mov	r0, r2
 80126f8:	f7fe fa5d 	bl	8010bb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80126fc:	2301      	movs	r3, #1
 80126fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012700:	697b      	ldr	r3, [r7, #20]
	}
 8012702:	4618      	mov	r0, r3
 8012704:	3718      	adds	r7, #24
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	24000db8 	.word	0x24000db8
 8012710:	24001294 	.word	0x24001294
 8012714:	24000dbc 	.word	0x24000dbc

08012718 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8012718:	b480      	push	{r7}
 801271a:	b083      	sub	sp, #12
 801271c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801271e:	4b09      	ldr	r3, [pc, #36]	; (8012744 <uxTaskResetEventItemValue+0x2c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	699b      	ldr	r3, [r3, #24]
 8012724:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012726:	4b07      	ldr	r3, [pc, #28]	; (8012744 <uxTaskResetEventItemValue+0x2c>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272c:	4b05      	ldr	r3, [pc, #20]	; (8012744 <uxTaskResetEventItemValue+0x2c>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012734:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8012736:	687b      	ldr	r3, [r7, #4]
}
 8012738:	4618      	mov	r0, r3
 801273a:	370c      	adds	r7, #12
 801273c:	46bd      	mov	sp, r7
 801273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012742:	4770      	bx	lr
 8012744:	24000db8 	.word	0x24000db8

08012748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012752:	4b21      	ldr	r3, [pc, #132]	; (80127d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012758:	4b20      	ldr	r3, [pc, #128]	; (80127dc <prvAddCurrentTaskToDelayedList+0x94>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	3304      	adds	r3, #4
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe fa86 	bl	8010c70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801276a:	d10a      	bne.n	8012782 <prvAddCurrentTaskToDelayedList+0x3a>
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d007      	beq.n	8012782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012772:	4b1a      	ldr	r3, [pc, #104]	; (80127dc <prvAddCurrentTaskToDelayedList+0x94>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	3304      	adds	r3, #4
 8012778:	4619      	mov	r1, r3
 801277a:	4819      	ldr	r0, [pc, #100]	; (80127e0 <prvAddCurrentTaskToDelayedList+0x98>)
 801277c:	f7fe fa1b 	bl	8010bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012780:	e026      	b.n	80127d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012782:	68fa      	ldr	r2, [r7, #12]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4413      	add	r3, r2
 8012788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801278a:	4b14      	ldr	r3, [pc, #80]	; (80127dc <prvAddCurrentTaskToDelayedList+0x94>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	68ba      	ldr	r2, [r7, #8]
 8012790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012792:	68ba      	ldr	r2, [r7, #8]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	429a      	cmp	r2, r3
 8012798:	d209      	bcs.n	80127ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801279a:	4b12      	ldr	r3, [pc, #72]	; (80127e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	4b0f      	ldr	r3, [pc, #60]	; (80127dc <prvAddCurrentTaskToDelayedList+0x94>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	3304      	adds	r3, #4
 80127a4:	4619      	mov	r1, r3
 80127a6:	4610      	mov	r0, r2
 80127a8:	f7fe fa29 	bl	8010bfe <vListInsert>
}
 80127ac:	e010      	b.n	80127d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80127ae:	4b0e      	ldr	r3, [pc, #56]	; (80127e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	4b0a      	ldr	r3, [pc, #40]	; (80127dc <prvAddCurrentTaskToDelayedList+0x94>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	3304      	adds	r3, #4
 80127b8:	4619      	mov	r1, r3
 80127ba:	4610      	mov	r0, r2
 80127bc:	f7fe fa1f 	bl	8010bfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80127c0:	4b0a      	ldr	r3, [pc, #40]	; (80127ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d202      	bcs.n	80127d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80127ca:	4a08      	ldr	r2, [pc, #32]	; (80127ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	6013      	str	r3, [r2, #0]
}
 80127d0:	bf00      	nop
 80127d2:	3710      	adds	r7, #16
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	24001290 	.word	0x24001290
 80127dc:	24000db8 	.word	0x24000db8
 80127e0:	24001278 	.word	0x24001278
 80127e4:	24001248 	.word	0x24001248
 80127e8:	24001244 	.word	0x24001244
 80127ec:	240012ac 	.word	0x240012ac

080127f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08a      	sub	sp, #40	; 0x28
 80127f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80127f6:	2300      	movs	r3, #0
 80127f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80127fa:	f000 fb07 	bl	8012e0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80127fe:	4b1c      	ldr	r3, [pc, #112]	; (8012870 <xTimerCreateTimerTask+0x80>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d021      	beq.n	801284a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012806:	2300      	movs	r3, #0
 8012808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801280a:	2300      	movs	r3, #0
 801280c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801280e:	1d3a      	adds	r2, r7, #4
 8012810:	f107 0108 	add.w	r1, r7, #8
 8012814:	f107 030c 	add.w	r3, r7, #12
 8012818:	4618      	mov	r0, r3
 801281a:	f7fd ff97 	bl	801074c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801281e:	6879      	ldr	r1, [r7, #4]
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	9202      	str	r2, [sp, #8]
 8012826:	9301      	str	r3, [sp, #4]
 8012828:	2302      	movs	r3, #2
 801282a:	9300      	str	r3, [sp, #0]
 801282c:	2300      	movs	r3, #0
 801282e:	460a      	mov	r2, r1
 8012830:	4910      	ldr	r1, [pc, #64]	; (8012874 <xTimerCreateTimerTask+0x84>)
 8012832:	4811      	ldr	r0, [pc, #68]	; (8012878 <xTimerCreateTimerTask+0x88>)
 8012834:	f7ff f828 	bl	8011888 <xTaskCreateStatic>
 8012838:	4603      	mov	r3, r0
 801283a:	4a10      	ldr	r2, [pc, #64]	; (801287c <xTimerCreateTimerTask+0x8c>)
 801283c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801283e:	4b0f      	ldr	r3, [pc, #60]	; (801287c <xTimerCreateTimerTask+0x8c>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d001      	beq.n	801284a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012846:	2301      	movs	r3, #1
 8012848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d10a      	bne.n	8012866 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012854:	f383 8811 	msr	BASEPRI, r3
 8012858:	f3bf 8f6f 	isb	sy
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	613b      	str	r3, [r7, #16]
}
 8012862:	bf00      	nop
 8012864:	e7fe      	b.n	8012864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012866:	697b      	ldr	r3, [r7, #20]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3718      	adds	r7, #24
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	240012e8 	.word	0x240012e8
 8012874:	08014a10 	.word	0x08014a10
 8012878:	080129b5 	.word	0x080129b5
 801287c:	240012ec 	.word	0x240012ec

08012880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b08a      	sub	sp, #40	; 0x28
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
 801288c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801288e:	2300      	movs	r3, #0
 8012890:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d10a      	bne.n	80128ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8012898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289c:	f383 8811 	msr	BASEPRI, r3
 80128a0:	f3bf 8f6f 	isb	sy
 80128a4:	f3bf 8f4f 	dsb	sy
 80128a8:	623b      	str	r3, [r7, #32]
}
 80128aa:	bf00      	nop
 80128ac:	e7fe      	b.n	80128ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80128ae:	4b1a      	ldr	r3, [pc, #104]	; (8012918 <xTimerGenericCommand+0x98>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d02a      	beq.n	801290c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	2b05      	cmp	r3, #5
 80128c6:	dc18      	bgt.n	80128fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80128c8:	f7ff fe9a 	bl	8012600 <xTaskGetSchedulerState>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b02      	cmp	r3, #2
 80128d0:	d109      	bne.n	80128e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80128d2:	4b11      	ldr	r3, [pc, #68]	; (8012918 <xTimerGenericCommand+0x98>)
 80128d4:	6818      	ldr	r0, [r3, #0]
 80128d6:	f107 0110 	add.w	r1, r7, #16
 80128da:	2300      	movs	r3, #0
 80128dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128de:	f7fe fb2f 	bl	8010f40 <xQueueGenericSend>
 80128e2:	6278      	str	r0, [r7, #36]	; 0x24
 80128e4:	e012      	b.n	801290c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80128e6:	4b0c      	ldr	r3, [pc, #48]	; (8012918 <xTimerGenericCommand+0x98>)
 80128e8:	6818      	ldr	r0, [r3, #0]
 80128ea:	f107 0110 	add.w	r1, r7, #16
 80128ee:	2300      	movs	r3, #0
 80128f0:	2200      	movs	r2, #0
 80128f2:	f7fe fb25 	bl	8010f40 <xQueueGenericSend>
 80128f6:	6278      	str	r0, [r7, #36]	; 0x24
 80128f8:	e008      	b.n	801290c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80128fa:	4b07      	ldr	r3, [pc, #28]	; (8012918 <xTimerGenericCommand+0x98>)
 80128fc:	6818      	ldr	r0, [r3, #0]
 80128fe:	f107 0110 	add.w	r1, r7, #16
 8012902:	2300      	movs	r3, #0
 8012904:	683a      	ldr	r2, [r7, #0]
 8012906:	f7fe fc19 	bl	801113c <xQueueGenericSendFromISR>
 801290a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801290e:	4618      	mov	r0, r3
 8012910:	3728      	adds	r7, #40	; 0x28
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	240012e8 	.word	0x240012e8

0801291c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b088      	sub	sp, #32
 8012920:	af02      	add	r7, sp, #8
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012926:	4b22      	ldr	r3, [pc, #136]	; (80129b0 <prvProcessExpiredTimer+0x94>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	68db      	ldr	r3, [r3, #12]
 801292c:	68db      	ldr	r3, [r3, #12]
 801292e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	3304      	adds	r3, #4
 8012934:	4618      	mov	r0, r3
 8012936:	f7fe f99b 	bl	8010c70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012940:	f003 0304 	and.w	r3, r3, #4
 8012944:	2b00      	cmp	r3, #0
 8012946:	d022      	beq.n	801298e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	699a      	ldr	r2, [r3, #24]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	18d1      	adds	r1, r2, r3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	683a      	ldr	r2, [r7, #0]
 8012954:	6978      	ldr	r0, [r7, #20]
 8012956:	f000 f8d1 	bl	8012afc <prvInsertTimerInActiveList>
 801295a:	4603      	mov	r3, r0
 801295c:	2b00      	cmp	r3, #0
 801295e:	d01f      	beq.n	80129a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012960:	2300      	movs	r3, #0
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	2300      	movs	r3, #0
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	2100      	movs	r1, #0
 801296a:	6978      	ldr	r0, [r7, #20]
 801296c:	f7ff ff88 	bl	8012880 <xTimerGenericCommand>
 8012970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d113      	bne.n	80129a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297c:	f383 8811 	msr	BASEPRI, r3
 8012980:	f3bf 8f6f 	isb	sy
 8012984:	f3bf 8f4f 	dsb	sy
 8012988:	60fb      	str	r3, [r7, #12]
}
 801298a:	bf00      	nop
 801298c:	e7fe      	b.n	801298c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012994:	f023 0301 	bic.w	r3, r3, #1
 8012998:	b2da      	uxtb	r2, r3
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	6a1b      	ldr	r3, [r3, #32]
 80129a4:	6978      	ldr	r0, [r7, #20]
 80129a6:	4798      	blx	r3
}
 80129a8:	bf00      	nop
 80129aa:	3718      	adds	r7, #24
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	240012e0 	.word	0x240012e0

080129b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80129bc:	f107 0308 	add.w	r3, r7, #8
 80129c0:	4618      	mov	r0, r3
 80129c2:	f000 f857 	bl	8012a74 <prvGetNextExpireTime>
 80129c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	4619      	mov	r1, r3
 80129cc:	68f8      	ldr	r0, [r7, #12]
 80129ce:	f000 f803 	bl	80129d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80129d2:	f000 f8d5 	bl	8012b80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80129d6:	e7f1      	b.n	80129bc <prvTimerTask+0x8>

080129d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80129e2:	f7ff f98d 	bl	8011d00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80129e6:	f107 0308 	add.w	r3, r7, #8
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 f866 	bl	8012abc <prvSampleTimeNow>
 80129f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d130      	bne.n	8012a5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d10a      	bne.n	8012a14 <prvProcessTimerOrBlockTask+0x3c>
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d806      	bhi.n	8012a14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012a06:	f7ff f989 	bl	8011d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012a0a:	68f9      	ldr	r1, [r7, #12]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7ff ff85 	bl	801291c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012a12:	e024      	b.n	8012a5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d008      	beq.n	8012a2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012a1a:	4b13      	ldr	r3, [pc, #76]	; (8012a68 <prvProcessTimerOrBlockTask+0x90>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d101      	bne.n	8012a28 <prvProcessTimerOrBlockTask+0x50>
 8012a24:	2301      	movs	r3, #1
 8012a26:	e000      	b.n	8012a2a <prvProcessTimerOrBlockTask+0x52>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012a2c:	4b0f      	ldr	r3, [pc, #60]	; (8012a6c <prvProcessTimerOrBlockTask+0x94>)
 8012a2e:	6818      	ldr	r0, [r3, #0]
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	1ad3      	subs	r3, r2, r3
 8012a36:	683a      	ldr	r2, [r7, #0]
 8012a38:	4619      	mov	r1, r3
 8012a3a:	f7fe fef1 	bl	8011820 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012a3e:	f7ff f96d 	bl	8011d1c <xTaskResumeAll>
 8012a42:	4603      	mov	r3, r0
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d10a      	bne.n	8012a5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012a48:	4b09      	ldr	r3, [pc, #36]	; (8012a70 <prvProcessTimerOrBlockTask+0x98>)
 8012a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a4e:	601a      	str	r2, [r3, #0]
 8012a50:	f3bf 8f4f 	dsb	sy
 8012a54:	f3bf 8f6f 	isb	sy
}
 8012a58:	e001      	b.n	8012a5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012a5a:	f7ff f95f 	bl	8011d1c <xTaskResumeAll>
}
 8012a5e:	bf00      	nop
 8012a60:	3710      	adds	r7, #16
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	240012e4 	.word	0x240012e4
 8012a6c:	240012e8 	.word	0x240012e8
 8012a70:	e000ed04 	.word	0xe000ed04

08012a74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012a74:	b480      	push	{r7}
 8012a76:	b085      	sub	sp, #20
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012a7c:	4b0e      	ldr	r3, [pc, #56]	; (8012ab8 <prvGetNextExpireTime+0x44>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d101      	bne.n	8012a8a <prvGetNextExpireTime+0x16>
 8012a86:	2201      	movs	r2, #1
 8012a88:	e000      	b.n	8012a8c <prvGetNextExpireTime+0x18>
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d105      	bne.n	8012aa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012a98:	4b07      	ldr	r3, [pc, #28]	; (8012ab8 <prvGetNextExpireTime+0x44>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	60fb      	str	r3, [r7, #12]
 8012aa2:	e001      	b.n	8012aa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3714      	adds	r7, #20
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop
 8012ab8:	240012e0 	.word	0x240012e0

08012abc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012ac4:	f7ff f9c8 	bl	8011e58 <xTaskGetTickCount>
 8012ac8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012aca:	4b0b      	ldr	r3, [pc, #44]	; (8012af8 <prvSampleTimeNow+0x3c>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	68fa      	ldr	r2, [r7, #12]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d205      	bcs.n	8012ae0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012ad4:	f000 f936 	bl	8012d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2201      	movs	r2, #1
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	e002      	b.n	8012ae6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012ae6:	4a04      	ldr	r2, [pc, #16]	; (8012af8 <prvSampleTimeNow+0x3c>)
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012aec:	68fb      	ldr	r3, [r7, #12]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	240012f0 	.word	0x240012f0

08012afc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	607a      	str	r2, [r7, #4]
 8012b08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	68ba      	ldr	r2, [r7, #8]
 8012b12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d812      	bhi.n	8012b48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	1ad2      	subs	r2, r2, r3
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	699b      	ldr	r3, [r3, #24]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d302      	bcc.n	8012b36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012b30:	2301      	movs	r3, #1
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	e01b      	b.n	8012b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012b36:	4b10      	ldr	r3, [pc, #64]	; (8012b78 <prvInsertTimerInActiveList+0x7c>)
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	3304      	adds	r3, #4
 8012b3e:	4619      	mov	r1, r3
 8012b40:	4610      	mov	r0, r2
 8012b42:	f7fe f85c 	bl	8010bfe <vListInsert>
 8012b46:	e012      	b.n	8012b6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d206      	bcs.n	8012b5e <prvInsertTimerInActiveList+0x62>
 8012b50:	68ba      	ldr	r2, [r7, #8]
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d302      	bcc.n	8012b5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012b58:	2301      	movs	r3, #1
 8012b5a:	617b      	str	r3, [r7, #20]
 8012b5c:	e007      	b.n	8012b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012b5e:	4b07      	ldr	r3, [pc, #28]	; (8012b7c <prvInsertTimerInActiveList+0x80>)
 8012b60:	681a      	ldr	r2, [r3, #0]
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	3304      	adds	r3, #4
 8012b66:	4619      	mov	r1, r3
 8012b68:	4610      	mov	r0, r2
 8012b6a:	f7fe f848 	bl	8010bfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012b6e:	697b      	ldr	r3, [r7, #20]
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3718      	adds	r7, #24
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	240012e4 	.word	0x240012e4
 8012b7c:	240012e0 	.word	0x240012e0

08012b80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b08e      	sub	sp, #56	; 0x38
 8012b84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012b86:	e0ca      	b.n	8012d1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	da18      	bge.n	8012bc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012b8e:	1d3b      	adds	r3, r7, #4
 8012b90:	3304      	adds	r3, #4
 8012b92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10a      	bne.n	8012bb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9e:	f383 8811 	msr	BASEPRI, r3
 8012ba2:	f3bf 8f6f 	isb	sy
 8012ba6:	f3bf 8f4f 	dsb	sy
 8012baa:	61fb      	str	r3, [r7, #28]
}
 8012bac:	bf00      	nop
 8012bae:	e7fe      	b.n	8012bae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bb6:	6850      	ldr	r0, [r2, #4]
 8012bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bba:	6892      	ldr	r2, [r2, #8]
 8012bbc:	4611      	mov	r1, r2
 8012bbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	f2c0 80aa 	blt.w	8012d1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bce:	695b      	ldr	r3, [r3, #20]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d004      	beq.n	8012bde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe f849 	bl	8010c70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012bde:	463b      	mov	r3, r7
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7ff ff6b 	bl	8012abc <prvSampleTimeNow>
 8012be6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b09      	cmp	r3, #9
 8012bec:	f200 8097 	bhi.w	8012d1e <prvProcessReceivedCommands+0x19e>
 8012bf0:	a201      	add	r2, pc, #4	; (adr r2, 8012bf8 <prvProcessReceivedCommands+0x78>)
 8012bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bf6:	bf00      	nop
 8012bf8:	08012c21 	.word	0x08012c21
 8012bfc:	08012c21 	.word	0x08012c21
 8012c00:	08012c21 	.word	0x08012c21
 8012c04:	08012c95 	.word	0x08012c95
 8012c08:	08012ca9 	.word	0x08012ca9
 8012c0c:	08012cf3 	.word	0x08012cf3
 8012c10:	08012c21 	.word	0x08012c21
 8012c14:	08012c21 	.word	0x08012c21
 8012c18:	08012c95 	.word	0x08012c95
 8012c1c:	08012ca9 	.word	0x08012ca9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c26:	f043 0301 	orr.w	r3, r3, #1
 8012c2a:	b2da      	uxtb	r2, r3
 8012c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012c32:	68ba      	ldr	r2, [r7, #8]
 8012c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c36:	699b      	ldr	r3, [r3, #24]
 8012c38:	18d1      	adds	r1, r2, r3
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c40:	f7ff ff5c 	bl	8012afc <prvInsertTimerInActiveList>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d069      	beq.n	8012d1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c4c:	6a1b      	ldr	r3, [r3, #32]
 8012c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c58:	f003 0304 	and.w	r3, r3, #4
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d05e      	beq.n	8012d1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012c60:	68ba      	ldr	r2, [r7, #8]
 8012c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c64:	699b      	ldr	r3, [r3, #24]
 8012c66:	441a      	add	r2, r3
 8012c68:	2300      	movs	r3, #0
 8012c6a:	9300      	str	r3, [sp, #0]
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	2100      	movs	r1, #0
 8012c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c72:	f7ff fe05 	bl	8012880 <xTimerGenericCommand>
 8012c76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d14f      	bne.n	8012d1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c82:	f383 8811 	msr	BASEPRI, r3
 8012c86:	f3bf 8f6f 	isb	sy
 8012c8a:	f3bf 8f4f 	dsb	sy
 8012c8e:	61bb      	str	r3, [r7, #24]
}
 8012c90:	bf00      	nop
 8012c92:	e7fe      	b.n	8012c92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c9a:	f023 0301 	bic.w	r3, r3, #1
 8012c9e:	b2da      	uxtb	r2, r3
 8012ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012ca6:	e03a      	b.n	8012d1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cae:	f043 0301 	orr.w	r3, r3, #1
 8012cb2:	b2da      	uxtb	r2, r3
 8012cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012cba:	68ba      	ldr	r2, [r7, #8]
 8012cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc2:	699b      	ldr	r3, [r3, #24]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d10a      	bne.n	8012cde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ccc:	f383 8811 	msr	BASEPRI, r3
 8012cd0:	f3bf 8f6f 	isb	sy
 8012cd4:	f3bf 8f4f 	dsb	sy
 8012cd8:	617b      	str	r3, [r7, #20]
}
 8012cda:	bf00      	nop
 8012cdc:	e7fe      	b.n	8012cdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce0:	699a      	ldr	r2, [r3, #24]
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce4:	18d1      	adds	r1, r2, r3
 8012ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cec:	f7ff ff06 	bl	8012afc <prvInsertTimerInActiveList>
					break;
 8012cf0:	e015      	b.n	8012d1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cf8:	f003 0302 	and.w	r3, r3, #2
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d103      	bne.n	8012d08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d02:	f000 fbfd 	bl	8013500 <vPortFree>
 8012d06:	e00a      	b.n	8012d1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d0e:	f023 0301 	bic.w	r3, r3, #1
 8012d12:	b2da      	uxtb	r2, r3
 8012d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012d1a:	e000      	b.n	8012d1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012d1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012d1e:	4b08      	ldr	r3, [pc, #32]	; (8012d40 <prvProcessReceivedCommands+0x1c0>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	1d39      	adds	r1, r7, #4
 8012d24:	2200      	movs	r2, #0
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7fe faa4 	bl	8011274 <xQueueReceive>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	f47f af2a 	bne.w	8012b88 <prvProcessReceivedCommands+0x8>
	}
}
 8012d34:	bf00      	nop
 8012d36:	bf00      	nop
 8012d38:	3730      	adds	r7, #48	; 0x30
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	240012e8 	.word	0x240012e8

08012d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b088      	sub	sp, #32
 8012d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012d4a:	e048      	b.n	8012dde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012d4c:	4b2d      	ldr	r3, [pc, #180]	; (8012e04 <prvSwitchTimerLists+0xc0>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d56:	4b2b      	ldr	r3, [pc, #172]	; (8012e04 <prvSwitchTimerLists+0xc0>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	3304      	adds	r3, #4
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fd ff83 	bl	8010c70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6a1b      	ldr	r3, [r3, #32]
 8012d6e:	68f8      	ldr	r0, [r7, #12]
 8012d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d78:	f003 0304 	and.w	r3, r3, #4
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d02e      	beq.n	8012dde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	699b      	ldr	r3, [r3, #24]
 8012d84:	693a      	ldr	r2, [r7, #16]
 8012d86:	4413      	add	r3, r2
 8012d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	693b      	ldr	r3, [r7, #16]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d90e      	bls.n	8012db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	68ba      	ldr	r2, [r7, #8]
 8012d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	68fa      	ldr	r2, [r7, #12]
 8012d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d9e:	4b19      	ldr	r3, [pc, #100]	; (8012e04 <prvSwitchTimerLists+0xc0>)
 8012da0:	681a      	ldr	r2, [r3, #0]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	3304      	adds	r3, #4
 8012da6:	4619      	mov	r1, r3
 8012da8:	4610      	mov	r0, r2
 8012daa:	f7fd ff28 	bl	8010bfe <vListInsert>
 8012dae:	e016      	b.n	8012dde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012db0:	2300      	movs	r3, #0
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	2300      	movs	r3, #0
 8012db6:	693a      	ldr	r2, [r7, #16]
 8012db8:	2100      	movs	r1, #0
 8012dba:	68f8      	ldr	r0, [r7, #12]
 8012dbc:	f7ff fd60 	bl	8012880 <xTimerGenericCommand>
 8012dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d10a      	bne.n	8012dde <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dcc:	f383 8811 	msr	BASEPRI, r3
 8012dd0:	f3bf 8f6f 	isb	sy
 8012dd4:	f3bf 8f4f 	dsb	sy
 8012dd8:	603b      	str	r3, [r7, #0]
}
 8012dda:	bf00      	nop
 8012ddc:	e7fe      	b.n	8012ddc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012dde:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <prvSwitchTimerLists+0xc0>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1b1      	bne.n	8012d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012de8:	4b06      	ldr	r3, [pc, #24]	; (8012e04 <prvSwitchTimerLists+0xc0>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012dee:	4b06      	ldr	r3, [pc, #24]	; (8012e08 <prvSwitchTimerLists+0xc4>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4a04      	ldr	r2, [pc, #16]	; (8012e04 <prvSwitchTimerLists+0xc0>)
 8012df4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012df6:	4a04      	ldr	r2, [pc, #16]	; (8012e08 <prvSwitchTimerLists+0xc4>)
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	6013      	str	r3, [r2, #0]
}
 8012dfc:	bf00      	nop
 8012dfe:	3718      	adds	r7, #24
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}
 8012e04:	240012e0 	.word	0x240012e0
 8012e08:	240012e4 	.word	0x240012e4

08012e0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012e12:	f000 f987 	bl	8013124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012e16:	4b15      	ldr	r3, [pc, #84]	; (8012e6c <prvCheckForValidListAndQueue+0x60>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d120      	bne.n	8012e60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012e1e:	4814      	ldr	r0, [pc, #80]	; (8012e70 <prvCheckForValidListAndQueue+0x64>)
 8012e20:	f7fd fe9c 	bl	8010b5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012e24:	4813      	ldr	r0, [pc, #76]	; (8012e74 <prvCheckForValidListAndQueue+0x68>)
 8012e26:	f7fd fe99 	bl	8010b5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012e2a:	4b13      	ldr	r3, [pc, #76]	; (8012e78 <prvCheckForValidListAndQueue+0x6c>)
 8012e2c:	4a10      	ldr	r2, [pc, #64]	; (8012e70 <prvCheckForValidListAndQueue+0x64>)
 8012e2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012e30:	4b12      	ldr	r3, [pc, #72]	; (8012e7c <prvCheckForValidListAndQueue+0x70>)
 8012e32:	4a10      	ldr	r2, [pc, #64]	; (8012e74 <prvCheckForValidListAndQueue+0x68>)
 8012e34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012e36:	2300      	movs	r3, #0
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	4b11      	ldr	r3, [pc, #68]	; (8012e80 <prvCheckForValidListAndQueue+0x74>)
 8012e3c:	4a11      	ldr	r2, [pc, #68]	; (8012e84 <prvCheckForValidListAndQueue+0x78>)
 8012e3e:	2110      	movs	r1, #16
 8012e40:	200a      	movs	r0, #10
 8012e42:	f7fd ffa7 	bl	8010d94 <xQueueGenericCreateStatic>
 8012e46:	4603      	mov	r3, r0
 8012e48:	4a08      	ldr	r2, [pc, #32]	; (8012e6c <prvCheckForValidListAndQueue+0x60>)
 8012e4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012e4c:	4b07      	ldr	r3, [pc, #28]	; (8012e6c <prvCheckForValidListAndQueue+0x60>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d005      	beq.n	8012e60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012e54:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <prvCheckForValidListAndQueue+0x60>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	490b      	ldr	r1, [pc, #44]	; (8012e88 <prvCheckForValidListAndQueue+0x7c>)
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fe fcb6 	bl	80117cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012e60:	f000 f990 	bl	8013184 <vPortExitCritical>
}
 8012e64:	bf00      	nop
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	240012e8 	.word	0x240012e8
 8012e70:	240012b8 	.word	0x240012b8
 8012e74:	240012cc 	.word	0x240012cc
 8012e78:	240012e0 	.word	0x240012e0
 8012e7c:	240012e4 	.word	0x240012e4
 8012e80:	24001394 	.word	0x24001394
 8012e84:	240012f4 	.word	0x240012f4
 8012e88:	08014a18 	.word	0x08014a18

08012e8c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b08a      	sub	sp, #40	; 0x28
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
 8012e98:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012e9a:	f06f 0301 	mvn.w	r3, #1
 8012e9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012eac:	4b06      	ldr	r3, [pc, #24]	; (8012ec8 <xTimerPendFunctionCallFromISR+0x3c>)
 8012eae:	6818      	ldr	r0, [r3, #0]
 8012eb0:	f107 0114 	add.w	r1, r7, #20
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	683a      	ldr	r2, [r7, #0]
 8012eb8:	f7fe f940 	bl	801113c <xQueueGenericSendFromISR>
 8012ebc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8012ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3728      	adds	r7, #40	; 0x28
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}
 8012ec8:	240012e8 	.word	0x240012e8

08012ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b085      	sub	sp, #20
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	3b04      	subs	r3, #4
 8012edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	3b04      	subs	r3, #4
 8012eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	f023 0201 	bic.w	r2, r3, #1
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	3b04      	subs	r3, #4
 8012efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012efc:	4a0c      	ldr	r2, [pc, #48]	; (8012f30 <pxPortInitialiseStack+0x64>)
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	3b14      	subs	r3, #20
 8012f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	3b04      	subs	r3, #4
 8012f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f06f 0202 	mvn.w	r2, #2
 8012f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	3b20      	subs	r3, #32
 8012f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012f22:	68fb      	ldr	r3, [r7, #12]
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3714      	adds	r7, #20
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr
 8012f30:	08012f35 	.word	0x08012f35

08012f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012f34:	b480      	push	{r7}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012f3e:	4b12      	ldr	r3, [pc, #72]	; (8012f88 <prvTaskExitError+0x54>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f46:	d00a      	beq.n	8012f5e <prvTaskExitError+0x2a>
	__asm volatile
 8012f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f4c:	f383 8811 	msr	BASEPRI, r3
 8012f50:	f3bf 8f6f 	isb	sy
 8012f54:	f3bf 8f4f 	dsb	sy
 8012f58:	60fb      	str	r3, [r7, #12]
}
 8012f5a:	bf00      	nop
 8012f5c:	e7fe      	b.n	8012f5c <prvTaskExitError+0x28>
	__asm volatile
 8012f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f62:	f383 8811 	msr	BASEPRI, r3
 8012f66:	f3bf 8f6f 	isb	sy
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	60bb      	str	r3, [r7, #8]
}
 8012f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012f72:	bf00      	nop
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d0fc      	beq.n	8012f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012f7a:	bf00      	nop
 8012f7c:	bf00      	nop
 8012f7e:	3714      	adds	r7, #20
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	24000098 	.word	0x24000098
 8012f8c:	00000000 	.word	0x00000000

08012f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <pxCurrentTCBConst2>)
 8012f92:	6819      	ldr	r1, [r3, #0]
 8012f94:	6808      	ldr	r0, [r1, #0]
 8012f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f9a:	f380 8809 	msr	PSP, r0
 8012f9e:	f3bf 8f6f 	isb	sy
 8012fa2:	f04f 0000 	mov.w	r0, #0
 8012fa6:	f380 8811 	msr	BASEPRI, r0
 8012faa:	4770      	bx	lr
 8012fac:	f3af 8000 	nop.w

08012fb0 <pxCurrentTCBConst2>:
 8012fb0:	24000db8 	.word	0x24000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012fb4:	bf00      	nop
 8012fb6:	bf00      	nop

08012fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012fb8:	4808      	ldr	r0, [pc, #32]	; (8012fdc <prvPortStartFirstTask+0x24>)
 8012fba:	6800      	ldr	r0, [r0, #0]
 8012fbc:	6800      	ldr	r0, [r0, #0]
 8012fbe:	f380 8808 	msr	MSP, r0
 8012fc2:	f04f 0000 	mov.w	r0, #0
 8012fc6:	f380 8814 	msr	CONTROL, r0
 8012fca:	b662      	cpsie	i
 8012fcc:	b661      	cpsie	f
 8012fce:	f3bf 8f4f 	dsb	sy
 8012fd2:	f3bf 8f6f 	isb	sy
 8012fd6:	df00      	svc	0
 8012fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012fda:	bf00      	nop
 8012fdc:	e000ed08 	.word	0xe000ed08

08012fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012fe6:	4b46      	ldr	r3, [pc, #280]	; (8013100 <xPortStartScheduler+0x120>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	4a46      	ldr	r2, [pc, #280]	; (8013104 <xPortStartScheduler+0x124>)
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d10a      	bne.n	8013006 <xPortStartScheduler+0x26>
	__asm volatile
 8012ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff4:	f383 8811 	msr	BASEPRI, r3
 8012ff8:	f3bf 8f6f 	isb	sy
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	613b      	str	r3, [r7, #16]
}
 8013002:	bf00      	nop
 8013004:	e7fe      	b.n	8013004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013006:	4b3e      	ldr	r3, [pc, #248]	; (8013100 <xPortStartScheduler+0x120>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	4a3f      	ldr	r2, [pc, #252]	; (8013108 <xPortStartScheduler+0x128>)
 801300c:	4293      	cmp	r3, r2
 801300e:	d10a      	bne.n	8013026 <xPortStartScheduler+0x46>
	__asm volatile
 8013010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013014:	f383 8811 	msr	BASEPRI, r3
 8013018:	f3bf 8f6f 	isb	sy
 801301c:	f3bf 8f4f 	dsb	sy
 8013020:	60fb      	str	r3, [r7, #12]
}
 8013022:	bf00      	nop
 8013024:	e7fe      	b.n	8013024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013026:	4b39      	ldr	r3, [pc, #228]	; (801310c <xPortStartScheduler+0x12c>)
 8013028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	b2db      	uxtb	r3, r3
 8013030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	22ff      	movs	r2, #255	; 0xff
 8013036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	b2db      	uxtb	r3, r3
 801303e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013040:	78fb      	ldrb	r3, [r7, #3]
 8013042:	b2db      	uxtb	r3, r3
 8013044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013048:	b2da      	uxtb	r2, r3
 801304a:	4b31      	ldr	r3, [pc, #196]	; (8013110 <xPortStartScheduler+0x130>)
 801304c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801304e:	4b31      	ldr	r3, [pc, #196]	; (8013114 <xPortStartScheduler+0x134>)
 8013050:	2207      	movs	r2, #7
 8013052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013054:	e009      	b.n	801306a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013056:	4b2f      	ldr	r3, [pc, #188]	; (8013114 <xPortStartScheduler+0x134>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	3b01      	subs	r3, #1
 801305c:	4a2d      	ldr	r2, [pc, #180]	; (8013114 <xPortStartScheduler+0x134>)
 801305e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013060:	78fb      	ldrb	r3, [r7, #3]
 8013062:	b2db      	uxtb	r3, r3
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	b2db      	uxtb	r3, r3
 8013068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801306a:	78fb      	ldrb	r3, [r7, #3]
 801306c:	b2db      	uxtb	r3, r3
 801306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013072:	2b80      	cmp	r3, #128	; 0x80
 8013074:	d0ef      	beq.n	8013056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013076:	4b27      	ldr	r3, [pc, #156]	; (8013114 <xPortStartScheduler+0x134>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f1c3 0307 	rsb	r3, r3, #7
 801307e:	2b04      	cmp	r3, #4
 8013080:	d00a      	beq.n	8013098 <xPortStartScheduler+0xb8>
	__asm volatile
 8013082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013086:	f383 8811 	msr	BASEPRI, r3
 801308a:	f3bf 8f6f 	isb	sy
 801308e:	f3bf 8f4f 	dsb	sy
 8013092:	60bb      	str	r3, [r7, #8]
}
 8013094:	bf00      	nop
 8013096:	e7fe      	b.n	8013096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013098:	4b1e      	ldr	r3, [pc, #120]	; (8013114 <xPortStartScheduler+0x134>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	021b      	lsls	r3, r3, #8
 801309e:	4a1d      	ldr	r2, [pc, #116]	; (8013114 <xPortStartScheduler+0x134>)
 80130a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80130a2:	4b1c      	ldr	r3, [pc, #112]	; (8013114 <xPortStartScheduler+0x134>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80130aa:	4a1a      	ldr	r2, [pc, #104]	; (8013114 <xPortStartScheduler+0x134>)
 80130ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	b2da      	uxtb	r2, r3
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80130b6:	4b18      	ldr	r3, [pc, #96]	; (8013118 <xPortStartScheduler+0x138>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a17      	ldr	r2, [pc, #92]	; (8013118 <xPortStartScheduler+0x138>)
 80130bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80130c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80130c2:	4b15      	ldr	r3, [pc, #84]	; (8013118 <xPortStartScheduler+0x138>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4a14      	ldr	r2, [pc, #80]	; (8013118 <xPortStartScheduler+0x138>)
 80130c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80130cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80130ce:	f000 f8dd 	bl	801328c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80130d2:	4b12      	ldr	r3, [pc, #72]	; (801311c <xPortStartScheduler+0x13c>)
 80130d4:	2200      	movs	r2, #0
 80130d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80130d8:	f000 f8fc 	bl	80132d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80130dc:	4b10      	ldr	r3, [pc, #64]	; (8013120 <xPortStartScheduler+0x140>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4a0f      	ldr	r2, [pc, #60]	; (8013120 <xPortStartScheduler+0x140>)
 80130e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80130e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80130e8:	f7ff ff66 	bl	8012fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80130ec:	f7fe ff7e 	bl	8011fec <vTaskSwitchContext>
	prvTaskExitError();
 80130f0:	f7ff ff20 	bl	8012f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80130f4:	2300      	movs	r3, #0
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3718      	adds	r7, #24
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	e000ed00 	.word	0xe000ed00
 8013104:	410fc271 	.word	0x410fc271
 8013108:	410fc270 	.word	0x410fc270
 801310c:	e000e400 	.word	0xe000e400
 8013110:	240013e4 	.word	0x240013e4
 8013114:	240013e8 	.word	0x240013e8
 8013118:	e000ed20 	.word	0xe000ed20
 801311c:	24000098 	.word	0x24000098
 8013120:	e000ef34 	.word	0xe000ef34

08013124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013124:	b480      	push	{r7}
 8013126:	b083      	sub	sp, #12
 8013128:	af00      	add	r7, sp, #0
	__asm volatile
 801312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801312e:	f383 8811 	msr	BASEPRI, r3
 8013132:	f3bf 8f6f 	isb	sy
 8013136:	f3bf 8f4f 	dsb	sy
 801313a:	607b      	str	r3, [r7, #4]
}
 801313c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801313e:	4b0f      	ldr	r3, [pc, #60]	; (801317c <vPortEnterCritical+0x58>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	3301      	adds	r3, #1
 8013144:	4a0d      	ldr	r2, [pc, #52]	; (801317c <vPortEnterCritical+0x58>)
 8013146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013148:	4b0c      	ldr	r3, [pc, #48]	; (801317c <vPortEnterCritical+0x58>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	2b01      	cmp	r3, #1
 801314e:	d10f      	bne.n	8013170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013150:	4b0b      	ldr	r3, [pc, #44]	; (8013180 <vPortEnterCritical+0x5c>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	b2db      	uxtb	r3, r3
 8013156:	2b00      	cmp	r3, #0
 8013158:	d00a      	beq.n	8013170 <vPortEnterCritical+0x4c>
	__asm volatile
 801315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315e:	f383 8811 	msr	BASEPRI, r3
 8013162:	f3bf 8f6f 	isb	sy
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	603b      	str	r3, [r7, #0]
}
 801316c:	bf00      	nop
 801316e:	e7fe      	b.n	801316e <vPortEnterCritical+0x4a>
	}
}
 8013170:	bf00      	nop
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr
 801317c:	24000098 	.word	0x24000098
 8013180:	e000ed04 	.word	0xe000ed04

08013184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013184:	b480      	push	{r7}
 8013186:	b083      	sub	sp, #12
 8013188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801318a:	4b12      	ldr	r3, [pc, #72]	; (80131d4 <vPortExitCritical+0x50>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d10a      	bne.n	80131a8 <vPortExitCritical+0x24>
	__asm volatile
 8013192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013196:	f383 8811 	msr	BASEPRI, r3
 801319a:	f3bf 8f6f 	isb	sy
 801319e:	f3bf 8f4f 	dsb	sy
 80131a2:	607b      	str	r3, [r7, #4]
}
 80131a4:	bf00      	nop
 80131a6:	e7fe      	b.n	80131a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80131a8:	4b0a      	ldr	r3, [pc, #40]	; (80131d4 <vPortExitCritical+0x50>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	3b01      	subs	r3, #1
 80131ae:	4a09      	ldr	r2, [pc, #36]	; (80131d4 <vPortExitCritical+0x50>)
 80131b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80131b2:	4b08      	ldr	r3, [pc, #32]	; (80131d4 <vPortExitCritical+0x50>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d105      	bne.n	80131c6 <vPortExitCritical+0x42>
 80131ba:	2300      	movs	r3, #0
 80131bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	f383 8811 	msr	BASEPRI, r3
}
 80131c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80131c6:	bf00      	nop
 80131c8:	370c      	adds	r7, #12
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	24000098 	.word	0x24000098
	...

080131e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80131e0:	f3ef 8009 	mrs	r0, PSP
 80131e4:	f3bf 8f6f 	isb	sy
 80131e8:	4b15      	ldr	r3, [pc, #84]	; (8013240 <pxCurrentTCBConst>)
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	f01e 0f10 	tst.w	lr, #16
 80131f0:	bf08      	it	eq
 80131f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80131f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fa:	6010      	str	r0, [r2, #0]
 80131fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013204:	f380 8811 	msr	BASEPRI, r0
 8013208:	f3bf 8f4f 	dsb	sy
 801320c:	f3bf 8f6f 	isb	sy
 8013210:	f7fe feec 	bl	8011fec <vTaskSwitchContext>
 8013214:	f04f 0000 	mov.w	r0, #0
 8013218:	f380 8811 	msr	BASEPRI, r0
 801321c:	bc09      	pop	{r0, r3}
 801321e:	6819      	ldr	r1, [r3, #0]
 8013220:	6808      	ldr	r0, [r1, #0]
 8013222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013226:	f01e 0f10 	tst.w	lr, #16
 801322a:	bf08      	it	eq
 801322c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013230:	f380 8809 	msr	PSP, r0
 8013234:	f3bf 8f6f 	isb	sy
 8013238:	4770      	bx	lr
 801323a:	bf00      	nop
 801323c:	f3af 8000 	nop.w

08013240 <pxCurrentTCBConst>:
 8013240:	24000db8 	.word	0x24000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013244:	bf00      	nop
 8013246:	bf00      	nop

08013248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b082      	sub	sp, #8
 801324c:	af00      	add	r7, sp, #0
	__asm volatile
 801324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013252:	f383 8811 	msr	BASEPRI, r3
 8013256:	f3bf 8f6f 	isb	sy
 801325a:	f3bf 8f4f 	dsb	sy
 801325e:	607b      	str	r3, [r7, #4]
}
 8013260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013262:	f7fe fe09 	bl	8011e78 <xTaskIncrementTick>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d003      	beq.n	8013274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801326c:	4b06      	ldr	r3, [pc, #24]	; (8013288 <xPortSysTickHandler+0x40>)
 801326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013272:	601a      	str	r2, [r3, #0]
 8013274:	2300      	movs	r3, #0
 8013276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	f383 8811 	msr	BASEPRI, r3
}
 801327e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013280:	bf00      	nop
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	e000ed04 	.word	0xe000ed04

0801328c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801328c:	b480      	push	{r7}
 801328e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013290:	4b0b      	ldr	r3, [pc, #44]	; (80132c0 <vPortSetupTimerInterrupt+0x34>)
 8013292:	2200      	movs	r2, #0
 8013294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013296:	4b0b      	ldr	r3, [pc, #44]	; (80132c4 <vPortSetupTimerInterrupt+0x38>)
 8013298:	2200      	movs	r2, #0
 801329a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801329c:	4b0a      	ldr	r3, [pc, #40]	; (80132c8 <vPortSetupTimerInterrupt+0x3c>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4a0a      	ldr	r2, [pc, #40]	; (80132cc <vPortSetupTimerInterrupt+0x40>)
 80132a2:	fba2 2303 	umull	r2, r3, r2, r3
 80132a6:	099b      	lsrs	r3, r3, #6
 80132a8:	4a09      	ldr	r2, [pc, #36]	; (80132d0 <vPortSetupTimerInterrupt+0x44>)
 80132aa:	3b01      	subs	r3, #1
 80132ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80132ae:	4b04      	ldr	r3, [pc, #16]	; (80132c0 <vPortSetupTimerInterrupt+0x34>)
 80132b0:	2207      	movs	r2, #7
 80132b2:	601a      	str	r2, [r3, #0]
}
 80132b4:	bf00      	nop
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	e000e010 	.word	0xe000e010
 80132c4:	e000e018 	.word	0xe000e018
 80132c8:	24000088 	.word	0x24000088
 80132cc:	10624dd3 	.word	0x10624dd3
 80132d0:	e000e014 	.word	0xe000e014

080132d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80132d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80132e4 <vPortEnableVFP+0x10>
 80132d8:	6801      	ldr	r1, [r0, #0]
 80132da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80132de:	6001      	str	r1, [r0, #0]
 80132e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80132e2:	bf00      	nop
 80132e4:	e000ed88 	.word	0xe000ed88

080132e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80132e8:	b480      	push	{r7}
 80132ea:	b085      	sub	sp, #20
 80132ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80132ee:	f3ef 8305 	mrs	r3, IPSR
 80132f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2b0f      	cmp	r3, #15
 80132f8:	d914      	bls.n	8013324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80132fa:	4a17      	ldr	r2, [pc, #92]	; (8013358 <vPortValidateInterruptPriority+0x70>)
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	4413      	add	r3, r2
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013304:	4b15      	ldr	r3, [pc, #84]	; (801335c <vPortValidateInterruptPriority+0x74>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	7afa      	ldrb	r2, [r7, #11]
 801330a:	429a      	cmp	r2, r3
 801330c:	d20a      	bcs.n	8013324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013312:	f383 8811 	msr	BASEPRI, r3
 8013316:	f3bf 8f6f 	isb	sy
 801331a:	f3bf 8f4f 	dsb	sy
 801331e:	607b      	str	r3, [r7, #4]
}
 8013320:	bf00      	nop
 8013322:	e7fe      	b.n	8013322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013324:	4b0e      	ldr	r3, [pc, #56]	; (8013360 <vPortValidateInterruptPriority+0x78>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801332c:	4b0d      	ldr	r3, [pc, #52]	; (8013364 <vPortValidateInterruptPriority+0x7c>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	429a      	cmp	r2, r3
 8013332:	d90a      	bls.n	801334a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013338:	f383 8811 	msr	BASEPRI, r3
 801333c:	f3bf 8f6f 	isb	sy
 8013340:	f3bf 8f4f 	dsb	sy
 8013344:	603b      	str	r3, [r7, #0]
}
 8013346:	bf00      	nop
 8013348:	e7fe      	b.n	8013348 <vPortValidateInterruptPriority+0x60>
	}
 801334a:	bf00      	nop
 801334c:	3714      	adds	r7, #20
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	e000e3f0 	.word	0xe000e3f0
 801335c:	240013e4 	.word	0x240013e4
 8013360:	e000ed0c 	.word	0xe000ed0c
 8013364:	240013e8 	.word	0x240013e8

08013368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b08a      	sub	sp, #40	; 0x28
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013370:	2300      	movs	r3, #0
 8013372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013374:	f7fe fcc4 	bl	8011d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013378:	4b5b      	ldr	r3, [pc, #364]	; (80134e8 <pvPortMalloc+0x180>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d101      	bne.n	8013384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013380:	f000 f920 	bl	80135c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013384:	4b59      	ldr	r3, [pc, #356]	; (80134ec <pvPortMalloc+0x184>)
 8013386:	681a      	ldr	r2, [r3, #0]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	4013      	ands	r3, r2
 801338c:	2b00      	cmp	r3, #0
 801338e:	f040 8093 	bne.w	80134b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d01d      	beq.n	80133d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013398:	2208      	movs	r2, #8
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	4413      	add	r3, r2
 801339e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f003 0307 	and.w	r3, r3, #7
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d014      	beq.n	80133d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f023 0307 	bic.w	r3, r3, #7
 80133b0:	3308      	adds	r3, #8
 80133b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f003 0307 	and.w	r3, r3, #7
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d00a      	beq.n	80133d4 <pvPortMalloc+0x6c>
	__asm volatile
 80133be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	617b      	str	r3, [r7, #20]
}
 80133d0:	bf00      	nop
 80133d2:	e7fe      	b.n	80133d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d06e      	beq.n	80134b8 <pvPortMalloc+0x150>
 80133da:	4b45      	ldr	r3, [pc, #276]	; (80134f0 <pvPortMalloc+0x188>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d869      	bhi.n	80134b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80133e4:	4b43      	ldr	r3, [pc, #268]	; (80134f4 <pvPortMalloc+0x18c>)
 80133e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80133e8:	4b42      	ldr	r3, [pc, #264]	; (80134f4 <pvPortMalloc+0x18c>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80133ee:	e004      	b.n	80133fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80133f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80133f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80133fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	429a      	cmp	r2, r3
 8013402:	d903      	bls.n	801340c <pvPortMalloc+0xa4>
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1f1      	bne.n	80133f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801340c:	4b36      	ldr	r3, [pc, #216]	; (80134e8 <pvPortMalloc+0x180>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013412:	429a      	cmp	r2, r3
 8013414:	d050      	beq.n	80134b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013416:	6a3b      	ldr	r3, [r7, #32]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2208      	movs	r2, #8
 801341c:	4413      	add	r3, r2
 801341e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	6a3b      	ldr	r3, [r7, #32]
 8013426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	1ad2      	subs	r2, r2, r3
 8013430:	2308      	movs	r3, #8
 8013432:	005b      	lsls	r3, r3, #1
 8013434:	429a      	cmp	r2, r3
 8013436:	d91f      	bls.n	8013478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4413      	add	r3, r2
 801343e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013440:	69bb      	ldr	r3, [r7, #24]
 8013442:	f003 0307 	and.w	r3, r3, #7
 8013446:	2b00      	cmp	r3, #0
 8013448:	d00a      	beq.n	8013460 <pvPortMalloc+0xf8>
	__asm volatile
 801344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344e:	f383 8811 	msr	BASEPRI, r3
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	613b      	str	r3, [r7, #16]
}
 801345c:	bf00      	nop
 801345e:	e7fe      	b.n	801345e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013462:	685a      	ldr	r2, [r3, #4]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	1ad2      	subs	r2, r2, r3
 8013468:	69bb      	ldr	r3, [r7, #24]
 801346a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013472:	69b8      	ldr	r0, [r7, #24]
 8013474:	f000 f908 	bl	8013688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013478:	4b1d      	ldr	r3, [pc, #116]	; (80134f0 <pvPortMalloc+0x188>)
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347e:	685b      	ldr	r3, [r3, #4]
 8013480:	1ad3      	subs	r3, r2, r3
 8013482:	4a1b      	ldr	r2, [pc, #108]	; (80134f0 <pvPortMalloc+0x188>)
 8013484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013486:	4b1a      	ldr	r3, [pc, #104]	; (80134f0 <pvPortMalloc+0x188>)
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	4b1b      	ldr	r3, [pc, #108]	; (80134f8 <pvPortMalloc+0x190>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	429a      	cmp	r2, r3
 8013490:	d203      	bcs.n	801349a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013492:	4b17      	ldr	r3, [pc, #92]	; (80134f0 <pvPortMalloc+0x188>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	4a18      	ldr	r2, [pc, #96]	; (80134f8 <pvPortMalloc+0x190>)
 8013498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349c:	685a      	ldr	r2, [r3, #4]
 801349e:	4b13      	ldr	r3, [pc, #76]	; (80134ec <pvPortMalloc+0x184>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	431a      	orrs	r2, r3
 80134a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80134a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134aa:	2200      	movs	r2, #0
 80134ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80134ae:	4b13      	ldr	r3, [pc, #76]	; (80134fc <pvPortMalloc+0x194>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	3301      	adds	r3, #1
 80134b4:	4a11      	ldr	r2, [pc, #68]	; (80134fc <pvPortMalloc+0x194>)
 80134b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80134b8:	f7fe fc30 	bl	8011d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	f003 0307 	and.w	r3, r3, #7
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00a      	beq.n	80134dc <pvPortMalloc+0x174>
	__asm volatile
 80134c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ca:	f383 8811 	msr	BASEPRI, r3
 80134ce:	f3bf 8f6f 	isb	sy
 80134d2:	f3bf 8f4f 	dsb	sy
 80134d6:	60fb      	str	r3, [r7, #12]
}
 80134d8:	bf00      	nop
 80134da:	e7fe      	b.n	80134da <pvPortMalloc+0x172>
	return pvReturn;
 80134dc:	69fb      	ldr	r3, [r7, #28]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3728      	adds	r7, #40	; 0x28
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	24004ff4 	.word	0x24004ff4
 80134ec:	24005008 	.word	0x24005008
 80134f0:	24004ff8 	.word	0x24004ff8
 80134f4:	24004fec 	.word	0x24004fec
 80134f8:	24004ffc 	.word	0x24004ffc
 80134fc:	24005000 	.word	0x24005000

08013500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b086      	sub	sp, #24
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d04d      	beq.n	80135ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013512:	2308      	movs	r3, #8
 8013514:	425b      	negs	r3, r3
 8013516:	697a      	ldr	r2, [r7, #20]
 8013518:	4413      	add	r3, r2
 801351a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	685a      	ldr	r2, [r3, #4]
 8013524:	4b24      	ldr	r3, [pc, #144]	; (80135b8 <vPortFree+0xb8>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4013      	ands	r3, r2
 801352a:	2b00      	cmp	r3, #0
 801352c:	d10a      	bne.n	8013544 <vPortFree+0x44>
	__asm volatile
 801352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013532:	f383 8811 	msr	BASEPRI, r3
 8013536:	f3bf 8f6f 	isb	sy
 801353a:	f3bf 8f4f 	dsb	sy
 801353e:	60fb      	str	r3, [r7, #12]
}
 8013540:	bf00      	nop
 8013542:	e7fe      	b.n	8013542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d00a      	beq.n	8013562 <vPortFree+0x62>
	__asm volatile
 801354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013550:	f383 8811 	msr	BASEPRI, r3
 8013554:	f3bf 8f6f 	isb	sy
 8013558:	f3bf 8f4f 	dsb	sy
 801355c:	60bb      	str	r3, [r7, #8]
}
 801355e:	bf00      	nop
 8013560:	e7fe      	b.n	8013560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	685a      	ldr	r2, [r3, #4]
 8013566:	4b14      	ldr	r3, [pc, #80]	; (80135b8 <vPortFree+0xb8>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	4013      	ands	r3, r2
 801356c:	2b00      	cmp	r3, #0
 801356e:	d01e      	beq.n	80135ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d11a      	bne.n	80135ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	685a      	ldr	r2, [r3, #4]
 801357c:	4b0e      	ldr	r3, [pc, #56]	; (80135b8 <vPortFree+0xb8>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	43db      	mvns	r3, r3
 8013582:	401a      	ands	r2, r3
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013588:	f7fe fbba 	bl	8011d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	685a      	ldr	r2, [r3, #4]
 8013590:	4b0a      	ldr	r3, [pc, #40]	; (80135bc <vPortFree+0xbc>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	4413      	add	r3, r2
 8013596:	4a09      	ldr	r2, [pc, #36]	; (80135bc <vPortFree+0xbc>)
 8013598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801359a:	6938      	ldr	r0, [r7, #16]
 801359c:	f000 f874 	bl	8013688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80135a0:	4b07      	ldr	r3, [pc, #28]	; (80135c0 <vPortFree+0xc0>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	3301      	adds	r3, #1
 80135a6:	4a06      	ldr	r2, [pc, #24]	; (80135c0 <vPortFree+0xc0>)
 80135a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80135aa:	f7fe fbb7 	bl	8011d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80135ae:	bf00      	nop
 80135b0:	3718      	adds	r7, #24
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	24005008 	.word	0x24005008
 80135bc:	24004ff8 	.word	0x24004ff8
 80135c0:	24005004 	.word	0x24005004

080135c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80135c4:	b480      	push	{r7}
 80135c6:	b085      	sub	sp, #20
 80135c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80135ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80135ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80135d0:	4b27      	ldr	r3, [pc, #156]	; (8013670 <prvHeapInit+0xac>)
 80135d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f003 0307 	and.w	r3, r3, #7
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d00c      	beq.n	80135f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	3307      	adds	r3, #7
 80135e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	f023 0307 	bic.w	r3, r3, #7
 80135ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80135ec:	68ba      	ldr	r2, [r7, #8]
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	1ad3      	subs	r3, r2, r3
 80135f2:	4a1f      	ldr	r2, [pc, #124]	; (8013670 <prvHeapInit+0xac>)
 80135f4:	4413      	add	r3, r2
 80135f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80135fc:	4a1d      	ldr	r2, [pc, #116]	; (8013674 <prvHeapInit+0xb0>)
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013602:	4b1c      	ldr	r3, [pc, #112]	; (8013674 <prvHeapInit+0xb0>)
 8013604:	2200      	movs	r2, #0
 8013606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	4413      	add	r3, r2
 801360e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013610:	2208      	movs	r2, #8
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	1a9b      	subs	r3, r3, r2
 8013616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f023 0307 	bic.w	r3, r3, #7
 801361e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	4a15      	ldr	r2, [pc, #84]	; (8013678 <prvHeapInit+0xb4>)
 8013624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013626:	4b14      	ldr	r3, [pc, #80]	; (8013678 <prvHeapInit+0xb4>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2200      	movs	r2, #0
 801362c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801362e:	4b12      	ldr	r3, [pc, #72]	; (8013678 <prvHeapInit+0xb4>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	2200      	movs	r2, #0
 8013634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	68fa      	ldr	r2, [r7, #12]
 801363e:	1ad2      	subs	r2, r2, r3
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013644:	4b0c      	ldr	r3, [pc, #48]	; (8013678 <prvHeapInit+0xb4>)
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	4a0a      	ldr	r2, [pc, #40]	; (801367c <prvHeapInit+0xb8>)
 8013652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	4a09      	ldr	r2, [pc, #36]	; (8013680 <prvHeapInit+0xbc>)
 801365a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801365c:	4b09      	ldr	r3, [pc, #36]	; (8013684 <prvHeapInit+0xc0>)
 801365e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013662:	601a      	str	r2, [r3, #0]
}
 8013664:	bf00      	nop
 8013666:	3714      	adds	r7, #20
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr
 8013670:	240013ec 	.word	0x240013ec
 8013674:	24004fec 	.word	0x24004fec
 8013678:	24004ff4 	.word	0x24004ff4
 801367c:	24004ffc 	.word	0x24004ffc
 8013680:	24004ff8 	.word	0x24004ff8
 8013684:	24005008 	.word	0x24005008

08013688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013688:	b480      	push	{r7}
 801368a:	b085      	sub	sp, #20
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013690:	4b28      	ldr	r3, [pc, #160]	; (8013734 <prvInsertBlockIntoFreeList+0xac>)
 8013692:	60fb      	str	r3, [r7, #12]
 8013694:	e002      	b.n	801369c <prvInsertBlockIntoFreeList+0x14>
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	60fb      	str	r3, [r7, #12]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d8f7      	bhi.n	8013696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	68ba      	ldr	r2, [r7, #8]
 80136b0:	4413      	add	r3, r2
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d108      	bne.n	80136ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	685a      	ldr	r2, [r3, #4]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	441a      	add	r2, r3
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	68ba      	ldr	r2, [r7, #8]
 80136d4:	441a      	add	r2, r3
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d118      	bne.n	8013710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	4b15      	ldr	r3, [pc, #84]	; (8013738 <prvInsertBlockIntoFreeList+0xb0>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d00d      	beq.n	8013706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	685a      	ldr	r2, [r3, #4]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	685b      	ldr	r3, [r3, #4]
 80136f4:	441a      	add	r2, r3
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	601a      	str	r2, [r3, #0]
 8013704:	e008      	b.n	8013718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013706:	4b0c      	ldr	r3, [pc, #48]	; (8013738 <prvInsertBlockIntoFreeList+0xb0>)
 8013708:	681a      	ldr	r2, [r3, #0]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	601a      	str	r2, [r3, #0]
 801370e:	e003      	b.n	8013718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	681a      	ldr	r2, [r3, #0]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	429a      	cmp	r2, r3
 801371e:	d002      	beq.n	8013726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	687a      	ldr	r2, [r7, #4]
 8013724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013726:	bf00      	nop
 8013728:	3714      	adds	r7, #20
 801372a:	46bd      	mov	sp, r7
 801372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013730:	4770      	bx	lr
 8013732:	bf00      	nop
 8013734:	24004fec 	.word	0x24004fec
 8013738:	24004ff4 	.word	0x24004ff4

0801373c <__errno>:
 801373c:	4b01      	ldr	r3, [pc, #4]	; (8013744 <__errno+0x8>)
 801373e:	6818      	ldr	r0, [r3, #0]
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	2400009c 	.word	0x2400009c

08013748 <__libc_init_array>:
 8013748:	b570      	push	{r4, r5, r6, lr}
 801374a:	4d0d      	ldr	r5, [pc, #52]	; (8013780 <__libc_init_array+0x38>)
 801374c:	4c0d      	ldr	r4, [pc, #52]	; (8013784 <__libc_init_array+0x3c>)
 801374e:	1b64      	subs	r4, r4, r5
 8013750:	10a4      	asrs	r4, r4, #2
 8013752:	2600      	movs	r6, #0
 8013754:	42a6      	cmp	r6, r4
 8013756:	d109      	bne.n	801376c <__libc_init_array+0x24>
 8013758:	4d0b      	ldr	r5, [pc, #44]	; (8013788 <__libc_init_array+0x40>)
 801375a:	4c0c      	ldr	r4, [pc, #48]	; (801378c <__libc_init_array+0x44>)
 801375c:	f001 f842 	bl	80147e4 <_init>
 8013760:	1b64      	subs	r4, r4, r5
 8013762:	10a4      	asrs	r4, r4, #2
 8013764:	2600      	movs	r6, #0
 8013766:	42a6      	cmp	r6, r4
 8013768:	d105      	bne.n	8013776 <__libc_init_array+0x2e>
 801376a:	bd70      	pop	{r4, r5, r6, pc}
 801376c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013770:	4798      	blx	r3
 8013772:	3601      	adds	r6, #1
 8013774:	e7ee      	b.n	8013754 <__libc_init_array+0xc>
 8013776:	f855 3b04 	ldr.w	r3, [r5], #4
 801377a:	4798      	blx	r3
 801377c:	3601      	adds	r6, #1
 801377e:	e7f2      	b.n	8013766 <__libc_init_array+0x1e>
 8013780:	08014bb4 	.word	0x08014bb4
 8013784:	08014bb4 	.word	0x08014bb4
 8013788:	08014bb4 	.word	0x08014bb4
 801378c:	08014bb8 	.word	0x08014bb8

08013790 <malloc>:
 8013790:	4b02      	ldr	r3, [pc, #8]	; (801379c <malloc+0xc>)
 8013792:	4601      	mov	r1, r0
 8013794:	6818      	ldr	r0, [r3, #0]
 8013796:	f000 b88d 	b.w	80138b4 <_malloc_r>
 801379a:	bf00      	nop
 801379c:	2400009c 	.word	0x2400009c

080137a0 <free>:
 80137a0:	4b02      	ldr	r3, [pc, #8]	; (80137ac <free+0xc>)
 80137a2:	4601      	mov	r1, r0
 80137a4:	6818      	ldr	r0, [r3, #0]
 80137a6:	f000 b819 	b.w	80137dc <_free_r>
 80137aa:	bf00      	nop
 80137ac:	2400009c 	.word	0x2400009c

080137b0 <memcpy>:
 80137b0:	440a      	add	r2, r1
 80137b2:	4291      	cmp	r1, r2
 80137b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80137b8:	d100      	bne.n	80137bc <memcpy+0xc>
 80137ba:	4770      	bx	lr
 80137bc:	b510      	push	{r4, lr}
 80137be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137c6:	4291      	cmp	r1, r2
 80137c8:	d1f9      	bne.n	80137be <memcpy+0xe>
 80137ca:	bd10      	pop	{r4, pc}

080137cc <memset>:
 80137cc:	4402      	add	r2, r0
 80137ce:	4603      	mov	r3, r0
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d100      	bne.n	80137d6 <memset+0xa>
 80137d4:	4770      	bx	lr
 80137d6:	f803 1b01 	strb.w	r1, [r3], #1
 80137da:	e7f9      	b.n	80137d0 <memset+0x4>

080137dc <_free_r>:
 80137dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137de:	2900      	cmp	r1, #0
 80137e0:	d044      	beq.n	801386c <_free_r+0x90>
 80137e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137e6:	9001      	str	r0, [sp, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	f1a1 0404 	sub.w	r4, r1, #4
 80137ee:	bfb8      	it	lt
 80137f0:	18e4      	addlt	r4, r4, r3
 80137f2:	f000 fc51 	bl	8014098 <__malloc_lock>
 80137f6:	4a1e      	ldr	r2, [pc, #120]	; (8013870 <_free_r+0x94>)
 80137f8:	9801      	ldr	r0, [sp, #4]
 80137fa:	6813      	ldr	r3, [r2, #0]
 80137fc:	b933      	cbnz	r3, 801380c <_free_r+0x30>
 80137fe:	6063      	str	r3, [r4, #4]
 8013800:	6014      	str	r4, [r2, #0]
 8013802:	b003      	add	sp, #12
 8013804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013808:	f000 bc4c 	b.w	80140a4 <__malloc_unlock>
 801380c:	42a3      	cmp	r3, r4
 801380e:	d908      	bls.n	8013822 <_free_r+0x46>
 8013810:	6825      	ldr	r5, [r4, #0]
 8013812:	1961      	adds	r1, r4, r5
 8013814:	428b      	cmp	r3, r1
 8013816:	bf01      	itttt	eq
 8013818:	6819      	ldreq	r1, [r3, #0]
 801381a:	685b      	ldreq	r3, [r3, #4]
 801381c:	1949      	addeq	r1, r1, r5
 801381e:	6021      	streq	r1, [r4, #0]
 8013820:	e7ed      	b.n	80137fe <_free_r+0x22>
 8013822:	461a      	mov	r2, r3
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	b10b      	cbz	r3, 801382c <_free_r+0x50>
 8013828:	42a3      	cmp	r3, r4
 801382a:	d9fa      	bls.n	8013822 <_free_r+0x46>
 801382c:	6811      	ldr	r1, [r2, #0]
 801382e:	1855      	adds	r5, r2, r1
 8013830:	42a5      	cmp	r5, r4
 8013832:	d10b      	bne.n	801384c <_free_r+0x70>
 8013834:	6824      	ldr	r4, [r4, #0]
 8013836:	4421      	add	r1, r4
 8013838:	1854      	adds	r4, r2, r1
 801383a:	42a3      	cmp	r3, r4
 801383c:	6011      	str	r1, [r2, #0]
 801383e:	d1e0      	bne.n	8013802 <_free_r+0x26>
 8013840:	681c      	ldr	r4, [r3, #0]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	6053      	str	r3, [r2, #4]
 8013846:	4421      	add	r1, r4
 8013848:	6011      	str	r1, [r2, #0]
 801384a:	e7da      	b.n	8013802 <_free_r+0x26>
 801384c:	d902      	bls.n	8013854 <_free_r+0x78>
 801384e:	230c      	movs	r3, #12
 8013850:	6003      	str	r3, [r0, #0]
 8013852:	e7d6      	b.n	8013802 <_free_r+0x26>
 8013854:	6825      	ldr	r5, [r4, #0]
 8013856:	1961      	adds	r1, r4, r5
 8013858:	428b      	cmp	r3, r1
 801385a:	bf04      	itt	eq
 801385c:	6819      	ldreq	r1, [r3, #0]
 801385e:	685b      	ldreq	r3, [r3, #4]
 8013860:	6063      	str	r3, [r4, #4]
 8013862:	bf04      	itt	eq
 8013864:	1949      	addeq	r1, r1, r5
 8013866:	6021      	streq	r1, [r4, #0]
 8013868:	6054      	str	r4, [r2, #4]
 801386a:	e7ca      	b.n	8013802 <_free_r+0x26>
 801386c:	b003      	add	sp, #12
 801386e:	bd30      	pop	{r4, r5, pc}
 8013870:	2400500c 	.word	0x2400500c

08013874 <sbrk_aligned>:
 8013874:	b570      	push	{r4, r5, r6, lr}
 8013876:	4e0e      	ldr	r6, [pc, #56]	; (80138b0 <sbrk_aligned+0x3c>)
 8013878:	460c      	mov	r4, r1
 801387a:	6831      	ldr	r1, [r6, #0]
 801387c:	4605      	mov	r5, r0
 801387e:	b911      	cbnz	r1, 8013886 <sbrk_aligned+0x12>
 8013880:	f000 f91a 	bl	8013ab8 <_sbrk_r>
 8013884:	6030      	str	r0, [r6, #0]
 8013886:	4621      	mov	r1, r4
 8013888:	4628      	mov	r0, r5
 801388a:	f000 f915 	bl	8013ab8 <_sbrk_r>
 801388e:	1c43      	adds	r3, r0, #1
 8013890:	d00a      	beq.n	80138a8 <sbrk_aligned+0x34>
 8013892:	1cc4      	adds	r4, r0, #3
 8013894:	f024 0403 	bic.w	r4, r4, #3
 8013898:	42a0      	cmp	r0, r4
 801389a:	d007      	beq.n	80138ac <sbrk_aligned+0x38>
 801389c:	1a21      	subs	r1, r4, r0
 801389e:	4628      	mov	r0, r5
 80138a0:	f000 f90a 	bl	8013ab8 <_sbrk_r>
 80138a4:	3001      	adds	r0, #1
 80138a6:	d101      	bne.n	80138ac <sbrk_aligned+0x38>
 80138a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80138ac:	4620      	mov	r0, r4
 80138ae:	bd70      	pop	{r4, r5, r6, pc}
 80138b0:	24005010 	.word	0x24005010

080138b4 <_malloc_r>:
 80138b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138b8:	1ccd      	adds	r5, r1, #3
 80138ba:	f025 0503 	bic.w	r5, r5, #3
 80138be:	3508      	adds	r5, #8
 80138c0:	2d0c      	cmp	r5, #12
 80138c2:	bf38      	it	cc
 80138c4:	250c      	movcc	r5, #12
 80138c6:	2d00      	cmp	r5, #0
 80138c8:	4607      	mov	r7, r0
 80138ca:	db01      	blt.n	80138d0 <_malloc_r+0x1c>
 80138cc:	42a9      	cmp	r1, r5
 80138ce:	d905      	bls.n	80138dc <_malloc_r+0x28>
 80138d0:	230c      	movs	r3, #12
 80138d2:	603b      	str	r3, [r7, #0]
 80138d4:	2600      	movs	r6, #0
 80138d6:	4630      	mov	r0, r6
 80138d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138dc:	4e2e      	ldr	r6, [pc, #184]	; (8013998 <_malloc_r+0xe4>)
 80138de:	f000 fbdb 	bl	8014098 <__malloc_lock>
 80138e2:	6833      	ldr	r3, [r6, #0]
 80138e4:	461c      	mov	r4, r3
 80138e6:	bb34      	cbnz	r4, 8013936 <_malloc_r+0x82>
 80138e8:	4629      	mov	r1, r5
 80138ea:	4638      	mov	r0, r7
 80138ec:	f7ff ffc2 	bl	8013874 <sbrk_aligned>
 80138f0:	1c43      	adds	r3, r0, #1
 80138f2:	4604      	mov	r4, r0
 80138f4:	d14d      	bne.n	8013992 <_malloc_r+0xde>
 80138f6:	6834      	ldr	r4, [r6, #0]
 80138f8:	4626      	mov	r6, r4
 80138fa:	2e00      	cmp	r6, #0
 80138fc:	d140      	bne.n	8013980 <_malloc_r+0xcc>
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	4631      	mov	r1, r6
 8013902:	4638      	mov	r0, r7
 8013904:	eb04 0803 	add.w	r8, r4, r3
 8013908:	f000 f8d6 	bl	8013ab8 <_sbrk_r>
 801390c:	4580      	cmp	r8, r0
 801390e:	d13a      	bne.n	8013986 <_malloc_r+0xd2>
 8013910:	6821      	ldr	r1, [r4, #0]
 8013912:	3503      	adds	r5, #3
 8013914:	1a6d      	subs	r5, r5, r1
 8013916:	f025 0503 	bic.w	r5, r5, #3
 801391a:	3508      	adds	r5, #8
 801391c:	2d0c      	cmp	r5, #12
 801391e:	bf38      	it	cc
 8013920:	250c      	movcc	r5, #12
 8013922:	4629      	mov	r1, r5
 8013924:	4638      	mov	r0, r7
 8013926:	f7ff ffa5 	bl	8013874 <sbrk_aligned>
 801392a:	3001      	adds	r0, #1
 801392c:	d02b      	beq.n	8013986 <_malloc_r+0xd2>
 801392e:	6823      	ldr	r3, [r4, #0]
 8013930:	442b      	add	r3, r5
 8013932:	6023      	str	r3, [r4, #0]
 8013934:	e00e      	b.n	8013954 <_malloc_r+0xa0>
 8013936:	6822      	ldr	r2, [r4, #0]
 8013938:	1b52      	subs	r2, r2, r5
 801393a:	d41e      	bmi.n	801397a <_malloc_r+0xc6>
 801393c:	2a0b      	cmp	r2, #11
 801393e:	d916      	bls.n	801396e <_malloc_r+0xba>
 8013940:	1961      	adds	r1, r4, r5
 8013942:	42a3      	cmp	r3, r4
 8013944:	6025      	str	r5, [r4, #0]
 8013946:	bf18      	it	ne
 8013948:	6059      	strne	r1, [r3, #4]
 801394a:	6863      	ldr	r3, [r4, #4]
 801394c:	bf08      	it	eq
 801394e:	6031      	streq	r1, [r6, #0]
 8013950:	5162      	str	r2, [r4, r5]
 8013952:	604b      	str	r3, [r1, #4]
 8013954:	4638      	mov	r0, r7
 8013956:	f104 060b 	add.w	r6, r4, #11
 801395a:	f000 fba3 	bl	80140a4 <__malloc_unlock>
 801395e:	f026 0607 	bic.w	r6, r6, #7
 8013962:	1d23      	adds	r3, r4, #4
 8013964:	1af2      	subs	r2, r6, r3
 8013966:	d0b6      	beq.n	80138d6 <_malloc_r+0x22>
 8013968:	1b9b      	subs	r3, r3, r6
 801396a:	50a3      	str	r3, [r4, r2]
 801396c:	e7b3      	b.n	80138d6 <_malloc_r+0x22>
 801396e:	6862      	ldr	r2, [r4, #4]
 8013970:	42a3      	cmp	r3, r4
 8013972:	bf0c      	ite	eq
 8013974:	6032      	streq	r2, [r6, #0]
 8013976:	605a      	strne	r2, [r3, #4]
 8013978:	e7ec      	b.n	8013954 <_malloc_r+0xa0>
 801397a:	4623      	mov	r3, r4
 801397c:	6864      	ldr	r4, [r4, #4]
 801397e:	e7b2      	b.n	80138e6 <_malloc_r+0x32>
 8013980:	4634      	mov	r4, r6
 8013982:	6876      	ldr	r6, [r6, #4]
 8013984:	e7b9      	b.n	80138fa <_malloc_r+0x46>
 8013986:	230c      	movs	r3, #12
 8013988:	603b      	str	r3, [r7, #0]
 801398a:	4638      	mov	r0, r7
 801398c:	f000 fb8a 	bl	80140a4 <__malloc_unlock>
 8013990:	e7a1      	b.n	80138d6 <_malloc_r+0x22>
 8013992:	6025      	str	r5, [r4, #0]
 8013994:	e7de      	b.n	8013954 <_malloc_r+0xa0>
 8013996:	bf00      	nop
 8013998:	2400500c 	.word	0x2400500c

0801399c <iprintf>:
 801399c:	b40f      	push	{r0, r1, r2, r3}
 801399e:	4b0a      	ldr	r3, [pc, #40]	; (80139c8 <iprintf+0x2c>)
 80139a0:	b513      	push	{r0, r1, r4, lr}
 80139a2:	681c      	ldr	r4, [r3, #0]
 80139a4:	b124      	cbz	r4, 80139b0 <iprintf+0x14>
 80139a6:	69a3      	ldr	r3, [r4, #24]
 80139a8:	b913      	cbnz	r3, 80139b0 <iprintf+0x14>
 80139aa:	4620      	mov	r0, r4
 80139ac:	f000 fa6e 	bl	8013e8c <__sinit>
 80139b0:	ab05      	add	r3, sp, #20
 80139b2:	9a04      	ldr	r2, [sp, #16]
 80139b4:	68a1      	ldr	r1, [r4, #8]
 80139b6:	9301      	str	r3, [sp, #4]
 80139b8:	4620      	mov	r0, r4
 80139ba:	f000 fba3 	bl	8014104 <_vfiprintf_r>
 80139be:	b002      	add	sp, #8
 80139c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139c4:	b004      	add	sp, #16
 80139c6:	4770      	bx	lr
 80139c8:	2400009c 	.word	0x2400009c

080139cc <_puts_r>:
 80139cc:	b570      	push	{r4, r5, r6, lr}
 80139ce:	460e      	mov	r6, r1
 80139d0:	4605      	mov	r5, r0
 80139d2:	b118      	cbz	r0, 80139dc <_puts_r+0x10>
 80139d4:	6983      	ldr	r3, [r0, #24]
 80139d6:	b90b      	cbnz	r3, 80139dc <_puts_r+0x10>
 80139d8:	f000 fa58 	bl	8013e8c <__sinit>
 80139dc:	69ab      	ldr	r3, [r5, #24]
 80139de:	68ac      	ldr	r4, [r5, #8]
 80139e0:	b913      	cbnz	r3, 80139e8 <_puts_r+0x1c>
 80139e2:	4628      	mov	r0, r5
 80139e4:	f000 fa52 	bl	8013e8c <__sinit>
 80139e8:	4b2c      	ldr	r3, [pc, #176]	; (8013a9c <_puts_r+0xd0>)
 80139ea:	429c      	cmp	r4, r3
 80139ec:	d120      	bne.n	8013a30 <_puts_r+0x64>
 80139ee:	686c      	ldr	r4, [r5, #4]
 80139f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80139f2:	07db      	lsls	r3, r3, #31
 80139f4:	d405      	bmi.n	8013a02 <_puts_r+0x36>
 80139f6:	89a3      	ldrh	r3, [r4, #12]
 80139f8:	0598      	lsls	r0, r3, #22
 80139fa:	d402      	bmi.n	8013a02 <_puts_r+0x36>
 80139fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139fe:	f000 fae3 	bl	8013fc8 <__retarget_lock_acquire_recursive>
 8013a02:	89a3      	ldrh	r3, [r4, #12]
 8013a04:	0719      	lsls	r1, r3, #28
 8013a06:	d51d      	bpl.n	8013a44 <_puts_r+0x78>
 8013a08:	6923      	ldr	r3, [r4, #16]
 8013a0a:	b1db      	cbz	r3, 8013a44 <_puts_r+0x78>
 8013a0c:	3e01      	subs	r6, #1
 8013a0e:	68a3      	ldr	r3, [r4, #8]
 8013a10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013a14:	3b01      	subs	r3, #1
 8013a16:	60a3      	str	r3, [r4, #8]
 8013a18:	bb39      	cbnz	r1, 8013a6a <_puts_r+0x9e>
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	da38      	bge.n	8013a90 <_puts_r+0xc4>
 8013a1e:	4622      	mov	r2, r4
 8013a20:	210a      	movs	r1, #10
 8013a22:	4628      	mov	r0, r5
 8013a24:	f000 f858 	bl	8013ad8 <__swbuf_r>
 8013a28:	3001      	adds	r0, #1
 8013a2a:	d011      	beq.n	8013a50 <_puts_r+0x84>
 8013a2c:	250a      	movs	r5, #10
 8013a2e:	e011      	b.n	8013a54 <_puts_r+0x88>
 8013a30:	4b1b      	ldr	r3, [pc, #108]	; (8013aa0 <_puts_r+0xd4>)
 8013a32:	429c      	cmp	r4, r3
 8013a34:	d101      	bne.n	8013a3a <_puts_r+0x6e>
 8013a36:	68ac      	ldr	r4, [r5, #8]
 8013a38:	e7da      	b.n	80139f0 <_puts_r+0x24>
 8013a3a:	4b1a      	ldr	r3, [pc, #104]	; (8013aa4 <_puts_r+0xd8>)
 8013a3c:	429c      	cmp	r4, r3
 8013a3e:	bf08      	it	eq
 8013a40:	68ec      	ldreq	r4, [r5, #12]
 8013a42:	e7d5      	b.n	80139f0 <_puts_r+0x24>
 8013a44:	4621      	mov	r1, r4
 8013a46:	4628      	mov	r0, r5
 8013a48:	f000 f898 	bl	8013b7c <__swsetup_r>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	d0dd      	beq.n	8013a0c <_puts_r+0x40>
 8013a50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a56:	07da      	lsls	r2, r3, #31
 8013a58:	d405      	bmi.n	8013a66 <_puts_r+0x9a>
 8013a5a:	89a3      	ldrh	r3, [r4, #12]
 8013a5c:	059b      	lsls	r3, r3, #22
 8013a5e:	d402      	bmi.n	8013a66 <_puts_r+0x9a>
 8013a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a62:	f000 fab2 	bl	8013fca <__retarget_lock_release_recursive>
 8013a66:	4628      	mov	r0, r5
 8013a68:	bd70      	pop	{r4, r5, r6, pc}
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	da04      	bge.n	8013a78 <_puts_r+0xac>
 8013a6e:	69a2      	ldr	r2, [r4, #24]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	dc06      	bgt.n	8013a82 <_puts_r+0xb6>
 8013a74:	290a      	cmp	r1, #10
 8013a76:	d004      	beq.n	8013a82 <_puts_r+0xb6>
 8013a78:	6823      	ldr	r3, [r4, #0]
 8013a7a:	1c5a      	adds	r2, r3, #1
 8013a7c:	6022      	str	r2, [r4, #0]
 8013a7e:	7019      	strb	r1, [r3, #0]
 8013a80:	e7c5      	b.n	8013a0e <_puts_r+0x42>
 8013a82:	4622      	mov	r2, r4
 8013a84:	4628      	mov	r0, r5
 8013a86:	f000 f827 	bl	8013ad8 <__swbuf_r>
 8013a8a:	3001      	adds	r0, #1
 8013a8c:	d1bf      	bne.n	8013a0e <_puts_r+0x42>
 8013a8e:	e7df      	b.n	8013a50 <_puts_r+0x84>
 8013a90:	6823      	ldr	r3, [r4, #0]
 8013a92:	250a      	movs	r5, #10
 8013a94:	1c5a      	adds	r2, r3, #1
 8013a96:	6022      	str	r2, [r4, #0]
 8013a98:	701d      	strb	r5, [r3, #0]
 8013a9a:	e7db      	b.n	8013a54 <_puts_r+0x88>
 8013a9c:	08014b38 	.word	0x08014b38
 8013aa0:	08014b58 	.word	0x08014b58
 8013aa4:	08014b18 	.word	0x08014b18

08013aa8 <puts>:
 8013aa8:	4b02      	ldr	r3, [pc, #8]	; (8013ab4 <puts+0xc>)
 8013aaa:	4601      	mov	r1, r0
 8013aac:	6818      	ldr	r0, [r3, #0]
 8013aae:	f7ff bf8d 	b.w	80139cc <_puts_r>
 8013ab2:	bf00      	nop
 8013ab4:	2400009c 	.word	0x2400009c

08013ab8 <_sbrk_r>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4d06      	ldr	r5, [pc, #24]	; (8013ad4 <_sbrk_r+0x1c>)
 8013abc:	2300      	movs	r3, #0
 8013abe:	4604      	mov	r4, r0
 8013ac0:	4608      	mov	r0, r1
 8013ac2:	602b      	str	r3, [r5, #0]
 8013ac4:	f7ee ff5e 	bl	8002984 <_sbrk>
 8013ac8:	1c43      	adds	r3, r0, #1
 8013aca:	d102      	bne.n	8013ad2 <_sbrk_r+0x1a>
 8013acc:	682b      	ldr	r3, [r5, #0]
 8013ace:	b103      	cbz	r3, 8013ad2 <_sbrk_r+0x1a>
 8013ad0:	6023      	str	r3, [r4, #0]
 8013ad2:	bd38      	pop	{r3, r4, r5, pc}
 8013ad4:	24005018 	.word	0x24005018

08013ad8 <__swbuf_r>:
 8013ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ada:	460e      	mov	r6, r1
 8013adc:	4614      	mov	r4, r2
 8013ade:	4605      	mov	r5, r0
 8013ae0:	b118      	cbz	r0, 8013aea <__swbuf_r+0x12>
 8013ae2:	6983      	ldr	r3, [r0, #24]
 8013ae4:	b90b      	cbnz	r3, 8013aea <__swbuf_r+0x12>
 8013ae6:	f000 f9d1 	bl	8013e8c <__sinit>
 8013aea:	4b21      	ldr	r3, [pc, #132]	; (8013b70 <__swbuf_r+0x98>)
 8013aec:	429c      	cmp	r4, r3
 8013aee:	d12b      	bne.n	8013b48 <__swbuf_r+0x70>
 8013af0:	686c      	ldr	r4, [r5, #4]
 8013af2:	69a3      	ldr	r3, [r4, #24]
 8013af4:	60a3      	str	r3, [r4, #8]
 8013af6:	89a3      	ldrh	r3, [r4, #12]
 8013af8:	071a      	lsls	r2, r3, #28
 8013afa:	d52f      	bpl.n	8013b5c <__swbuf_r+0x84>
 8013afc:	6923      	ldr	r3, [r4, #16]
 8013afe:	b36b      	cbz	r3, 8013b5c <__swbuf_r+0x84>
 8013b00:	6923      	ldr	r3, [r4, #16]
 8013b02:	6820      	ldr	r0, [r4, #0]
 8013b04:	1ac0      	subs	r0, r0, r3
 8013b06:	6963      	ldr	r3, [r4, #20]
 8013b08:	b2f6      	uxtb	r6, r6
 8013b0a:	4283      	cmp	r3, r0
 8013b0c:	4637      	mov	r7, r6
 8013b0e:	dc04      	bgt.n	8013b1a <__swbuf_r+0x42>
 8013b10:	4621      	mov	r1, r4
 8013b12:	4628      	mov	r0, r5
 8013b14:	f000 f926 	bl	8013d64 <_fflush_r>
 8013b18:	bb30      	cbnz	r0, 8013b68 <__swbuf_r+0x90>
 8013b1a:	68a3      	ldr	r3, [r4, #8]
 8013b1c:	3b01      	subs	r3, #1
 8013b1e:	60a3      	str	r3, [r4, #8]
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	6022      	str	r2, [r4, #0]
 8013b26:	701e      	strb	r6, [r3, #0]
 8013b28:	6963      	ldr	r3, [r4, #20]
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	4283      	cmp	r3, r0
 8013b2e:	d004      	beq.n	8013b3a <__swbuf_r+0x62>
 8013b30:	89a3      	ldrh	r3, [r4, #12]
 8013b32:	07db      	lsls	r3, r3, #31
 8013b34:	d506      	bpl.n	8013b44 <__swbuf_r+0x6c>
 8013b36:	2e0a      	cmp	r6, #10
 8013b38:	d104      	bne.n	8013b44 <__swbuf_r+0x6c>
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	f000 f911 	bl	8013d64 <_fflush_r>
 8013b42:	b988      	cbnz	r0, 8013b68 <__swbuf_r+0x90>
 8013b44:	4638      	mov	r0, r7
 8013b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b48:	4b0a      	ldr	r3, [pc, #40]	; (8013b74 <__swbuf_r+0x9c>)
 8013b4a:	429c      	cmp	r4, r3
 8013b4c:	d101      	bne.n	8013b52 <__swbuf_r+0x7a>
 8013b4e:	68ac      	ldr	r4, [r5, #8]
 8013b50:	e7cf      	b.n	8013af2 <__swbuf_r+0x1a>
 8013b52:	4b09      	ldr	r3, [pc, #36]	; (8013b78 <__swbuf_r+0xa0>)
 8013b54:	429c      	cmp	r4, r3
 8013b56:	bf08      	it	eq
 8013b58:	68ec      	ldreq	r4, [r5, #12]
 8013b5a:	e7ca      	b.n	8013af2 <__swbuf_r+0x1a>
 8013b5c:	4621      	mov	r1, r4
 8013b5e:	4628      	mov	r0, r5
 8013b60:	f000 f80c 	bl	8013b7c <__swsetup_r>
 8013b64:	2800      	cmp	r0, #0
 8013b66:	d0cb      	beq.n	8013b00 <__swbuf_r+0x28>
 8013b68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013b6c:	e7ea      	b.n	8013b44 <__swbuf_r+0x6c>
 8013b6e:	bf00      	nop
 8013b70:	08014b38 	.word	0x08014b38
 8013b74:	08014b58 	.word	0x08014b58
 8013b78:	08014b18 	.word	0x08014b18

08013b7c <__swsetup_r>:
 8013b7c:	4b32      	ldr	r3, [pc, #200]	; (8013c48 <__swsetup_r+0xcc>)
 8013b7e:	b570      	push	{r4, r5, r6, lr}
 8013b80:	681d      	ldr	r5, [r3, #0]
 8013b82:	4606      	mov	r6, r0
 8013b84:	460c      	mov	r4, r1
 8013b86:	b125      	cbz	r5, 8013b92 <__swsetup_r+0x16>
 8013b88:	69ab      	ldr	r3, [r5, #24]
 8013b8a:	b913      	cbnz	r3, 8013b92 <__swsetup_r+0x16>
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	f000 f97d 	bl	8013e8c <__sinit>
 8013b92:	4b2e      	ldr	r3, [pc, #184]	; (8013c4c <__swsetup_r+0xd0>)
 8013b94:	429c      	cmp	r4, r3
 8013b96:	d10f      	bne.n	8013bb8 <__swsetup_r+0x3c>
 8013b98:	686c      	ldr	r4, [r5, #4]
 8013b9a:	89a3      	ldrh	r3, [r4, #12]
 8013b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ba0:	0719      	lsls	r1, r3, #28
 8013ba2:	d42c      	bmi.n	8013bfe <__swsetup_r+0x82>
 8013ba4:	06dd      	lsls	r5, r3, #27
 8013ba6:	d411      	bmi.n	8013bcc <__swsetup_r+0x50>
 8013ba8:	2309      	movs	r3, #9
 8013baa:	6033      	str	r3, [r6, #0]
 8013bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bb0:	81a3      	strh	r3, [r4, #12]
 8013bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bb6:	e03e      	b.n	8013c36 <__swsetup_r+0xba>
 8013bb8:	4b25      	ldr	r3, [pc, #148]	; (8013c50 <__swsetup_r+0xd4>)
 8013bba:	429c      	cmp	r4, r3
 8013bbc:	d101      	bne.n	8013bc2 <__swsetup_r+0x46>
 8013bbe:	68ac      	ldr	r4, [r5, #8]
 8013bc0:	e7eb      	b.n	8013b9a <__swsetup_r+0x1e>
 8013bc2:	4b24      	ldr	r3, [pc, #144]	; (8013c54 <__swsetup_r+0xd8>)
 8013bc4:	429c      	cmp	r4, r3
 8013bc6:	bf08      	it	eq
 8013bc8:	68ec      	ldreq	r4, [r5, #12]
 8013bca:	e7e6      	b.n	8013b9a <__swsetup_r+0x1e>
 8013bcc:	0758      	lsls	r0, r3, #29
 8013bce:	d512      	bpl.n	8013bf6 <__swsetup_r+0x7a>
 8013bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bd2:	b141      	cbz	r1, 8013be6 <__swsetup_r+0x6a>
 8013bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013bd8:	4299      	cmp	r1, r3
 8013bda:	d002      	beq.n	8013be2 <__swsetup_r+0x66>
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7ff fdfd 	bl	80137dc <_free_r>
 8013be2:	2300      	movs	r3, #0
 8013be4:	6363      	str	r3, [r4, #52]	; 0x34
 8013be6:	89a3      	ldrh	r3, [r4, #12]
 8013be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013bec:	81a3      	strh	r3, [r4, #12]
 8013bee:	2300      	movs	r3, #0
 8013bf0:	6063      	str	r3, [r4, #4]
 8013bf2:	6923      	ldr	r3, [r4, #16]
 8013bf4:	6023      	str	r3, [r4, #0]
 8013bf6:	89a3      	ldrh	r3, [r4, #12]
 8013bf8:	f043 0308 	orr.w	r3, r3, #8
 8013bfc:	81a3      	strh	r3, [r4, #12]
 8013bfe:	6923      	ldr	r3, [r4, #16]
 8013c00:	b94b      	cbnz	r3, 8013c16 <__swsetup_r+0x9a>
 8013c02:	89a3      	ldrh	r3, [r4, #12]
 8013c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c0c:	d003      	beq.n	8013c16 <__swsetup_r+0x9a>
 8013c0e:	4621      	mov	r1, r4
 8013c10:	4630      	mov	r0, r6
 8013c12:	f000 fa01 	bl	8014018 <__smakebuf_r>
 8013c16:	89a0      	ldrh	r0, [r4, #12]
 8013c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c1c:	f010 0301 	ands.w	r3, r0, #1
 8013c20:	d00a      	beq.n	8013c38 <__swsetup_r+0xbc>
 8013c22:	2300      	movs	r3, #0
 8013c24:	60a3      	str	r3, [r4, #8]
 8013c26:	6963      	ldr	r3, [r4, #20]
 8013c28:	425b      	negs	r3, r3
 8013c2a:	61a3      	str	r3, [r4, #24]
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	b943      	cbnz	r3, 8013c42 <__swsetup_r+0xc6>
 8013c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c34:	d1ba      	bne.n	8013bac <__swsetup_r+0x30>
 8013c36:	bd70      	pop	{r4, r5, r6, pc}
 8013c38:	0781      	lsls	r1, r0, #30
 8013c3a:	bf58      	it	pl
 8013c3c:	6963      	ldrpl	r3, [r4, #20]
 8013c3e:	60a3      	str	r3, [r4, #8]
 8013c40:	e7f4      	b.n	8013c2c <__swsetup_r+0xb0>
 8013c42:	2000      	movs	r0, #0
 8013c44:	e7f7      	b.n	8013c36 <__swsetup_r+0xba>
 8013c46:	bf00      	nop
 8013c48:	2400009c 	.word	0x2400009c
 8013c4c:	08014b38 	.word	0x08014b38
 8013c50:	08014b58 	.word	0x08014b58
 8013c54:	08014b18 	.word	0x08014b18

08013c58 <__sflush_r>:
 8013c58:	898a      	ldrh	r2, [r1, #12]
 8013c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c5e:	4605      	mov	r5, r0
 8013c60:	0710      	lsls	r0, r2, #28
 8013c62:	460c      	mov	r4, r1
 8013c64:	d458      	bmi.n	8013d18 <__sflush_r+0xc0>
 8013c66:	684b      	ldr	r3, [r1, #4]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	dc05      	bgt.n	8013c78 <__sflush_r+0x20>
 8013c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	dc02      	bgt.n	8013c78 <__sflush_r+0x20>
 8013c72:	2000      	movs	r0, #0
 8013c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c7a:	2e00      	cmp	r6, #0
 8013c7c:	d0f9      	beq.n	8013c72 <__sflush_r+0x1a>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c84:	682f      	ldr	r7, [r5, #0]
 8013c86:	602b      	str	r3, [r5, #0]
 8013c88:	d032      	beq.n	8013cf0 <__sflush_r+0x98>
 8013c8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c8c:	89a3      	ldrh	r3, [r4, #12]
 8013c8e:	075a      	lsls	r2, r3, #29
 8013c90:	d505      	bpl.n	8013c9e <__sflush_r+0x46>
 8013c92:	6863      	ldr	r3, [r4, #4]
 8013c94:	1ac0      	subs	r0, r0, r3
 8013c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c98:	b10b      	cbz	r3, 8013c9e <__sflush_r+0x46>
 8013c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c9c:	1ac0      	subs	r0, r0, r3
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	4602      	mov	r2, r0
 8013ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ca4:	6a21      	ldr	r1, [r4, #32]
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	47b0      	blx	r6
 8013caa:	1c43      	adds	r3, r0, #1
 8013cac:	89a3      	ldrh	r3, [r4, #12]
 8013cae:	d106      	bne.n	8013cbe <__sflush_r+0x66>
 8013cb0:	6829      	ldr	r1, [r5, #0]
 8013cb2:	291d      	cmp	r1, #29
 8013cb4:	d82c      	bhi.n	8013d10 <__sflush_r+0xb8>
 8013cb6:	4a2a      	ldr	r2, [pc, #168]	; (8013d60 <__sflush_r+0x108>)
 8013cb8:	40ca      	lsrs	r2, r1
 8013cba:	07d6      	lsls	r6, r2, #31
 8013cbc:	d528      	bpl.n	8013d10 <__sflush_r+0xb8>
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	6062      	str	r2, [r4, #4]
 8013cc2:	04d9      	lsls	r1, r3, #19
 8013cc4:	6922      	ldr	r2, [r4, #16]
 8013cc6:	6022      	str	r2, [r4, #0]
 8013cc8:	d504      	bpl.n	8013cd4 <__sflush_r+0x7c>
 8013cca:	1c42      	adds	r2, r0, #1
 8013ccc:	d101      	bne.n	8013cd2 <__sflush_r+0x7a>
 8013cce:	682b      	ldr	r3, [r5, #0]
 8013cd0:	b903      	cbnz	r3, 8013cd4 <__sflush_r+0x7c>
 8013cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8013cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013cd6:	602f      	str	r7, [r5, #0]
 8013cd8:	2900      	cmp	r1, #0
 8013cda:	d0ca      	beq.n	8013c72 <__sflush_r+0x1a>
 8013cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ce0:	4299      	cmp	r1, r3
 8013ce2:	d002      	beq.n	8013cea <__sflush_r+0x92>
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	f7ff fd79 	bl	80137dc <_free_r>
 8013cea:	2000      	movs	r0, #0
 8013cec:	6360      	str	r0, [r4, #52]	; 0x34
 8013cee:	e7c1      	b.n	8013c74 <__sflush_r+0x1c>
 8013cf0:	6a21      	ldr	r1, [r4, #32]
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	47b0      	blx	r6
 8013cf8:	1c41      	adds	r1, r0, #1
 8013cfa:	d1c7      	bne.n	8013c8c <__sflush_r+0x34>
 8013cfc:	682b      	ldr	r3, [r5, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d0c4      	beq.n	8013c8c <__sflush_r+0x34>
 8013d02:	2b1d      	cmp	r3, #29
 8013d04:	d001      	beq.n	8013d0a <__sflush_r+0xb2>
 8013d06:	2b16      	cmp	r3, #22
 8013d08:	d101      	bne.n	8013d0e <__sflush_r+0xb6>
 8013d0a:	602f      	str	r7, [r5, #0]
 8013d0c:	e7b1      	b.n	8013c72 <__sflush_r+0x1a>
 8013d0e:	89a3      	ldrh	r3, [r4, #12]
 8013d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d14:	81a3      	strh	r3, [r4, #12]
 8013d16:	e7ad      	b.n	8013c74 <__sflush_r+0x1c>
 8013d18:	690f      	ldr	r7, [r1, #16]
 8013d1a:	2f00      	cmp	r7, #0
 8013d1c:	d0a9      	beq.n	8013c72 <__sflush_r+0x1a>
 8013d1e:	0793      	lsls	r3, r2, #30
 8013d20:	680e      	ldr	r6, [r1, #0]
 8013d22:	bf08      	it	eq
 8013d24:	694b      	ldreq	r3, [r1, #20]
 8013d26:	600f      	str	r7, [r1, #0]
 8013d28:	bf18      	it	ne
 8013d2a:	2300      	movne	r3, #0
 8013d2c:	eba6 0807 	sub.w	r8, r6, r7
 8013d30:	608b      	str	r3, [r1, #8]
 8013d32:	f1b8 0f00 	cmp.w	r8, #0
 8013d36:	dd9c      	ble.n	8013c72 <__sflush_r+0x1a>
 8013d38:	6a21      	ldr	r1, [r4, #32]
 8013d3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d3c:	4643      	mov	r3, r8
 8013d3e:	463a      	mov	r2, r7
 8013d40:	4628      	mov	r0, r5
 8013d42:	47b0      	blx	r6
 8013d44:	2800      	cmp	r0, #0
 8013d46:	dc06      	bgt.n	8013d56 <__sflush_r+0xfe>
 8013d48:	89a3      	ldrh	r3, [r4, #12]
 8013d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d4e:	81a3      	strh	r3, [r4, #12]
 8013d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d54:	e78e      	b.n	8013c74 <__sflush_r+0x1c>
 8013d56:	4407      	add	r7, r0
 8013d58:	eba8 0800 	sub.w	r8, r8, r0
 8013d5c:	e7e9      	b.n	8013d32 <__sflush_r+0xda>
 8013d5e:	bf00      	nop
 8013d60:	20400001 	.word	0x20400001

08013d64 <_fflush_r>:
 8013d64:	b538      	push	{r3, r4, r5, lr}
 8013d66:	690b      	ldr	r3, [r1, #16]
 8013d68:	4605      	mov	r5, r0
 8013d6a:	460c      	mov	r4, r1
 8013d6c:	b913      	cbnz	r3, 8013d74 <_fflush_r+0x10>
 8013d6e:	2500      	movs	r5, #0
 8013d70:	4628      	mov	r0, r5
 8013d72:	bd38      	pop	{r3, r4, r5, pc}
 8013d74:	b118      	cbz	r0, 8013d7e <_fflush_r+0x1a>
 8013d76:	6983      	ldr	r3, [r0, #24]
 8013d78:	b90b      	cbnz	r3, 8013d7e <_fflush_r+0x1a>
 8013d7a:	f000 f887 	bl	8013e8c <__sinit>
 8013d7e:	4b14      	ldr	r3, [pc, #80]	; (8013dd0 <_fflush_r+0x6c>)
 8013d80:	429c      	cmp	r4, r3
 8013d82:	d11b      	bne.n	8013dbc <_fflush_r+0x58>
 8013d84:	686c      	ldr	r4, [r5, #4]
 8013d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d0ef      	beq.n	8013d6e <_fflush_r+0xa>
 8013d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013d90:	07d0      	lsls	r0, r2, #31
 8013d92:	d404      	bmi.n	8013d9e <_fflush_r+0x3a>
 8013d94:	0599      	lsls	r1, r3, #22
 8013d96:	d402      	bmi.n	8013d9e <_fflush_r+0x3a>
 8013d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d9a:	f000 f915 	bl	8013fc8 <__retarget_lock_acquire_recursive>
 8013d9e:	4628      	mov	r0, r5
 8013da0:	4621      	mov	r1, r4
 8013da2:	f7ff ff59 	bl	8013c58 <__sflush_r>
 8013da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013da8:	07da      	lsls	r2, r3, #31
 8013daa:	4605      	mov	r5, r0
 8013dac:	d4e0      	bmi.n	8013d70 <_fflush_r+0xc>
 8013dae:	89a3      	ldrh	r3, [r4, #12]
 8013db0:	059b      	lsls	r3, r3, #22
 8013db2:	d4dd      	bmi.n	8013d70 <_fflush_r+0xc>
 8013db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013db6:	f000 f908 	bl	8013fca <__retarget_lock_release_recursive>
 8013dba:	e7d9      	b.n	8013d70 <_fflush_r+0xc>
 8013dbc:	4b05      	ldr	r3, [pc, #20]	; (8013dd4 <_fflush_r+0x70>)
 8013dbe:	429c      	cmp	r4, r3
 8013dc0:	d101      	bne.n	8013dc6 <_fflush_r+0x62>
 8013dc2:	68ac      	ldr	r4, [r5, #8]
 8013dc4:	e7df      	b.n	8013d86 <_fflush_r+0x22>
 8013dc6:	4b04      	ldr	r3, [pc, #16]	; (8013dd8 <_fflush_r+0x74>)
 8013dc8:	429c      	cmp	r4, r3
 8013dca:	bf08      	it	eq
 8013dcc:	68ec      	ldreq	r4, [r5, #12]
 8013dce:	e7da      	b.n	8013d86 <_fflush_r+0x22>
 8013dd0:	08014b38 	.word	0x08014b38
 8013dd4:	08014b58 	.word	0x08014b58
 8013dd8:	08014b18 	.word	0x08014b18

08013ddc <std>:
 8013ddc:	2300      	movs	r3, #0
 8013dde:	b510      	push	{r4, lr}
 8013de0:	4604      	mov	r4, r0
 8013de2:	e9c0 3300 	strd	r3, r3, [r0]
 8013de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013dea:	6083      	str	r3, [r0, #8]
 8013dec:	8181      	strh	r1, [r0, #12]
 8013dee:	6643      	str	r3, [r0, #100]	; 0x64
 8013df0:	81c2      	strh	r2, [r0, #14]
 8013df2:	6183      	str	r3, [r0, #24]
 8013df4:	4619      	mov	r1, r3
 8013df6:	2208      	movs	r2, #8
 8013df8:	305c      	adds	r0, #92	; 0x5c
 8013dfa:	f7ff fce7 	bl	80137cc <memset>
 8013dfe:	4b05      	ldr	r3, [pc, #20]	; (8013e14 <std+0x38>)
 8013e00:	6263      	str	r3, [r4, #36]	; 0x24
 8013e02:	4b05      	ldr	r3, [pc, #20]	; (8013e18 <std+0x3c>)
 8013e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e06:	4b05      	ldr	r3, [pc, #20]	; (8013e1c <std+0x40>)
 8013e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e0a:	4b05      	ldr	r3, [pc, #20]	; (8013e20 <std+0x44>)
 8013e0c:	6224      	str	r4, [r4, #32]
 8013e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8013e10:	bd10      	pop	{r4, pc}
 8013e12:	bf00      	nop
 8013e14:	0801468d 	.word	0x0801468d
 8013e18:	080146af 	.word	0x080146af
 8013e1c:	080146e7 	.word	0x080146e7
 8013e20:	0801470b 	.word	0x0801470b

08013e24 <_cleanup_r>:
 8013e24:	4901      	ldr	r1, [pc, #4]	; (8013e2c <_cleanup_r+0x8>)
 8013e26:	f000 b8af 	b.w	8013f88 <_fwalk_reent>
 8013e2a:	bf00      	nop
 8013e2c:	08013d65 	.word	0x08013d65

08013e30 <__sfmoreglue>:
 8013e30:	b570      	push	{r4, r5, r6, lr}
 8013e32:	2268      	movs	r2, #104	; 0x68
 8013e34:	1e4d      	subs	r5, r1, #1
 8013e36:	4355      	muls	r5, r2
 8013e38:	460e      	mov	r6, r1
 8013e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013e3e:	f7ff fd39 	bl	80138b4 <_malloc_r>
 8013e42:	4604      	mov	r4, r0
 8013e44:	b140      	cbz	r0, 8013e58 <__sfmoreglue+0x28>
 8013e46:	2100      	movs	r1, #0
 8013e48:	e9c0 1600 	strd	r1, r6, [r0]
 8013e4c:	300c      	adds	r0, #12
 8013e4e:	60a0      	str	r0, [r4, #8]
 8013e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e54:	f7ff fcba 	bl	80137cc <memset>
 8013e58:	4620      	mov	r0, r4
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}

08013e5c <__sfp_lock_acquire>:
 8013e5c:	4801      	ldr	r0, [pc, #4]	; (8013e64 <__sfp_lock_acquire+0x8>)
 8013e5e:	f000 b8b3 	b.w	8013fc8 <__retarget_lock_acquire_recursive>
 8013e62:	bf00      	nop
 8013e64:	24005015 	.word	0x24005015

08013e68 <__sfp_lock_release>:
 8013e68:	4801      	ldr	r0, [pc, #4]	; (8013e70 <__sfp_lock_release+0x8>)
 8013e6a:	f000 b8ae 	b.w	8013fca <__retarget_lock_release_recursive>
 8013e6e:	bf00      	nop
 8013e70:	24005015 	.word	0x24005015

08013e74 <__sinit_lock_acquire>:
 8013e74:	4801      	ldr	r0, [pc, #4]	; (8013e7c <__sinit_lock_acquire+0x8>)
 8013e76:	f000 b8a7 	b.w	8013fc8 <__retarget_lock_acquire_recursive>
 8013e7a:	bf00      	nop
 8013e7c:	24005016 	.word	0x24005016

08013e80 <__sinit_lock_release>:
 8013e80:	4801      	ldr	r0, [pc, #4]	; (8013e88 <__sinit_lock_release+0x8>)
 8013e82:	f000 b8a2 	b.w	8013fca <__retarget_lock_release_recursive>
 8013e86:	bf00      	nop
 8013e88:	24005016 	.word	0x24005016

08013e8c <__sinit>:
 8013e8c:	b510      	push	{r4, lr}
 8013e8e:	4604      	mov	r4, r0
 8013e90:	f7ff fff0 	bl	8013e74 <__sinit_lock_acquire>
 8013e94:	69a3      	ldr	r3, [r4, #24]
 8013e96:	b11b      	cbz	r3, 8013ea0 <__sinit+0x14>
 8013e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e9c:	f7ff bff0 	b.w	8013e80 <__sinit_lock_release>
 8013ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8013ea6:	4b13      	ldr	r3, [pc, #76]	; (8013ef4 <__sinit+0x68>)
 8013ea8:	4a13      	ldr	r2, [pc, #76]	; (8013ef8 <__sinit+0x6c>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8013eae:	42a3      	cmp	r3, r4
 8013eb0:	bf04      	itt	eq
 8013eb2:	2301      	moveq	r3, #1
 8013eb4:	61a3      	streq	r3, [r4, #24]
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f000 f820 	bl	8013efc <__sfp>
 8013ebc:	6060      	str	r0, [r4, #4]
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f000 f81c 	bl	8013efc <__sfp>
 8013ec4:	60a0      	str	r0, [r4, #8]
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f000 f818 	bl	8013efc <__sfp>
 8013ecc:	2200      	movs	r2, #0
 8013ece:	60e0      	str	r0, [r4, #12]
 8013ed0:	2104      	movs	r1, #4
 8013ed2:	6860      	ldr	r0, [r4, #4]
 8013ed4:	f7ff ff82 	bl	8013ddc <std>
 8013ed8:	68a0      	ldr	r0, [r4, #8]
 8013eda:	2201      	movs	r2, #1
 8013edc:	2109      	movs	r1, #9
 8013ede:	f7ff ff7d 	bl	8013ddc <std>
 8013ee2:	68e0      	ldr	r0, [r4, #12]
 8013ee4:	2202      	movs	r2, #2
 8013ee6:	2112      	movs	r1, #18
 8013ee8:	f7ff ff78 	bl	8013ddc <std>
 8013eec:	2301      	movs	r3, #1
 8013eee:	61a3      	str	r3, [r4, #24]
 8013ef0:	e7d2      	b.n	8013e98 <__sinit+0xc>
 8013ef2:	bf00      	nop
 8013ef4:	08014b14 	.word	0x08014b14
 8013ef8:	08013e25 	.word	0x08013e25

08013efc <__sfp>:
 8013efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013efe:	4607      	mov	r7, r0
 8013f00:	f7ff ffac 	bl	8013e5c <__sfp_lock_acquire>
 8013f04:	4b1e      	ldr	r3, [pc, #120]	; (8013f80 <__sfp+0x84>)
 8013f06:	681e      	ldr	r6, [r3, #0]
 8013f08:	69b3      	ldr	r3, [r6, #24]
 8013f0a:	b913      	cbnz	r3, 8013f12 <__sfp+0x16>
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	f7ff ffbd 	bl	8013e8c <__sinit>
 8013f12:	3648      	adds	r6, #72	; 0x48
 8013f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013f18:	3b01      	subs	r3, #1
 8013f1a:	d503      	bpl.n	8013f24 <__sfp+0x28>
 8013f1c:	6833      	ldr	r3, [r6, #0]
 8013f1e:	b30b      	cbz	r3, 8013f64 <__sfp+0x68>
 8013f20:	6836      	ldr	r6, [r6, #0]
 8013f22:	e7f7      	b.n	8013f14 <__sfp+0x18>
 8013f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013f28:	b9d5      	cbnz	r5, 8013f60 <__sfp+0x64>
 8013f2a:	4b16      	ldr	r3, [pc, #88]	; (8013f84 <__sfp+0x88>)
 8013f2c:	60e3      	str	r3, [r4, #12]
 8013f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013f32:	6665      	str	r5, [r4, #100]	; 0x64
 8013f34:	f000 f847 	bl	8013fc6 <__retarget_lock_init_recursive>
 8013f38:	f7ff ff96 	bl	8013e68 <__sfp_lock_release>
 8013f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013f44:	6025      	str	r5, [r4, #0]
 8013f46:	61a5      	str	r5, [r4, #24]
 8013f48:	2208      	movs	r2, #8
 8013f4a:	4629      	mov	r1, r5
 8013f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f50:	f7ff fc3c 	bl	80137cc <memset>
 8013f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f60:	3468      	adds	r4, #104	; 0x68
 8013f62:	e7d9      	b.n	8013f18 <__sfp+0x1c>
 8013f64:	2104      	movs	r1, #4
 8013f66:	4638      	mov	r0, r7
 8013f68:	f7ff ff62 	bl	8013e30 <__sfmoreglue>
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	6030      	str	r0, [r6, #0]
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d1d5      	bne.n	8013f20 <__sfp+0x24>
 8013f74:	f7ff ff78 	bl	8013e68 <__sfp_lock_release>
 8013f78:	230c      	movs	r3, #12
 8013f7a:	603b      	str	r3, [r7, #0]
 8013f7c:	e7ee      	b.n	8013f5c <__sfp+0x60>
 8013f7e:	bf00      	nop
 8013f80:	08014b14 	.word	0x08014b14
 8013f84:	ffff0001 	.word	0xffff0001

08013f88 <_fwalk_reent>:
 8013f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	4688      	mov	r8, r1
 8013f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f94:	2700      	movs	r7, #0
 8013f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8013f9e:	d505      	bpl.n	8013fac <_fwalk_reent+0x24>
 8013fa0:	6824      	ldr	r4, [r4, #0]
 8013fa2:	2c00      	cmp	r4, #0
 8013fa4:	d1f7      	bne.n	8013f96 <_fwalk_reent+0xe>
 8013fa6:	4638      	mov	r0, r7
 8013fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fac:	89ab      	ldrh	r3, [r5, #12]
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d907      	bls.n	8013fc2 <_fwalk_reent+0x3a>
 8013fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	d003      	beq.n	8013fc2 <_fwalk_reent+0x3a>
 8013fba:	4629      	mov	r1, r5
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	47c0      	blx	r8
 8013fc0:	4307      	orrs	r7, r0
 8013fc2:	3568      	adds	r5, #104	; 0x68
 8013fc4:	e7e9      	b.n	8013f9a <_fwalk_reent+0x12>

08013fc6 <__retarget_lock_init_recursive>:
 8013fc6:	4770      	bx	lr

08013fc8 <__retarget_lock_acquire_recursive>:
 8013fc8:	4770      	bx	lr

08013fca <__retarget_lock_release_recursive>:
 8013fca:	4770      	bx	lr

08013fcc <__swhatbuf_r>:
 8013fcc:	b570      	push	{r4, r5, r6, lr}
 8013fce:	460e      	mov	r6, r1
 8013fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fd4:	2900      	cmp	r1, #0
 8013fd6:	b096      	sub	sp, #88	; 0x58
 8013fd8:	4614      	mov	r4, r2
 8013fda:	461d      	mov	r5, r3
 8013fdc:	da08      	bge.n	8013ff0 <__swhatbuf_r+0x24>
 8013fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	602a      	str	r2, [r5, #0]
 8013fe6:	061a      	lsls	r2, r3, #24
 8013fe8:	d410      	bmi.n	801400c <__swhatbuf_r+0x40>
 8013fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fee:	e00e      	b.n	801400e <__swhatbuf_r+0x42>
 8013ff0:	466a      	mov	r2, sp
 8013ff2:	f000 fbb1 	bl	8014758 <_fstat_r>
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	dbf1      	blt.n	8013fde <__swhatbuf_r+0x12>
 8013ffa:	9a01      	ldr	r2, [sp, #4]
 8013ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014004:	425a      	negs	r2, r3
 8014006:	415a      	adcs	r2, r3
 8014008:	602a      	str	r2, [r5, #0]
 801400a:	e7ee      	b.n	8013fea <__swhatbuf_r+0x1e>
 801400c:	2340      	movs	r3, #64	; 0x40
 801400e:	2000      	movs	r0, #0
 8014010:	6023      	str	r3, [r4, #0]
 8014012:	b016      	add	sp, #88	; 0x58
 8014014:	bd70      	pop	{r4, r5, r6, pc}
	...

08014018 <__smakebuf_r>:
 8014018:	898b      	ldrh	r3, [r1, #12]
 801401a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801401c:	079d      	lsls	r5, r3, #30
 801401e:	4606      	mov	r6, r0
 8014020:	460c      	mov	r4, r1
 8014022:	d507      	bpl.n	8014034 <__smakebuf_r+0x1c>
 8014024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014028:	6023      	str	r3, [r4, #0]
 801402a:	6123      	str	r3, [r4, #16]
 801402c:	2301      	movs	r3, #1
 801402e:	6163      	str	r3, [r4, #20]
 8014030:	b002      	add	sp, #8
 8014032:	bd70      	pop	{r4, r5, r6, pc}
 8014034:	ab01      	add	r3, sp, #4
 8014036:	466a      	mov	r2, sp
 8014038:	f7ff ffc8 	bl	8013fcc <__swhatbuf_r>
 801403c:	9900      	ldr	r1, [sp, #0]
 801403e:	4605      	mov	r5, r0
 8014040:	4630      	mov	r0, r6
 8014042:	f7ff fc37 	bl	80138b4 <_malloc_r>
 8014046:	b948      	cbnz	r0, 801405c <__smakebuf_r+0x44>
 8014048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801404c:	059a      	lsls	r2, r3, #22
 801404e:	d4ef      	bmi.n	8014030 <__smakebuf_r+0x18>
 8014050:	f023 0303 	bic.w	r3, r3, #3
 8014054:	f043 0302 	orr.w	r3, r3, #2
 8014058:	81a3      	strh	r3, [r4, #12]
 801405a:	e7e3      	b.n	8014024 <__smakebuf_r+0xc>
 801405c:	4b0d      	ldr	r3, [pc, #52]	; (8014094 <__smakebuf_r+0x7c>)
 801405e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014060:	89a3      	ldrh	r3, [r4, #12]
 8014062:	6020      	str	r0, [r4, #0]
 8014064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014068:	81a3      	strh	r3, [r4, #12]
 801406a:	9b00      	ldr	r3, [sp, #0]
 801406c:	6163      	str	r3, [r4, #20]
 801406e:	9b01      	ldr	r3, [sp, #4]
 8014070:	6120      	str	r0, [r4, #16]
 8014072:	b15b      	cbz	r3, 801408c <__smakebuf_r+0x74>
 8014074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014078:	4630      	mov	r0, r6
 801407a:	f000 fb7f 	bl	801477c <_isatty_r>
 801407e:	b128      	cbz	r0, 801408c <__smakebuf_r+0x74>
 8014080:	89a3      	ldrh	r3, [r4, #12]
 8014082:	f023 0303 	bic.w	r3, r3, #3
 8014086:	f043 0301 	orr.w	r3, r3, #1
 801408a:	81a3      	strh	r3, [r4, #12]
 801408c:	89a0      	ldrh	r0, [r4, #12]
 801408e:	4305      	orrs	r5, r0
 8014090:	81a5      	strh	r5, [r4, #12]
 8014092:	e7cd      	b.n	8014030 <__smakebuf_r+0x18>
 8014094:	08013e25 	.word	0x08013e25

08014098 <__malloc_lock>:
 8014098:	4801      	ldr	r0, [pc, #4]	; (80140a0 <__malloc_lock+0x8>)
 801409a:	f7ff bf95 	b.w	8013fc8 <__retarget_lock_acquire_recursive>
 801409e:	bf00      	nop
 80140a0:	24005014 	.word	0x24005014

080140a4 <__malloc_unlock>:
 80140a4:	4801      	ldr	r0, [pc, #4]	; (80140ac <__malloc_unlock+0x8>)
 80140a6:	f7ff bf90 	b.w	8013fca <__retarget_lock_release_recursive>
 80140aa:	bf00      	nop
 80140ac:	24005014 	.word	0x24005014

080140b0 <__sfputc_r>:
 80140b0:	6893      	ldr	r3, [r2, #8]
 80140b2:	3b01      	subs	r3, #1
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	b410      	push	{r4}
 80140b8:	6093      	str	r3, [r2, #8]
 80140ba:	da08      	bge.n	80140ce <__sfputc_r+0x1e>
 80140bc:	6994      	ldr	r4, [r2, #24]
 80140be:	42a3      	cmp	r3, r4
 80140c0:	db01      	blt.n	80140c6 <__sfputc_r+0x16>
 80140c2:	290a      	cmp	r1, #10
 80140c4:	d103      	bne.n	80140ce <__sfputc_r+0x1e>
 80140c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140ca:	f7ff bd05 	b.w	8013ad8 <__swbuf_r>
 80140ce:	6813      	ldr	r3, [r2, #0]
 80140d0:	1c58      	adds	r0, r3, #1
 80140d2:	6010      	str	r0, [r2, #0]
 80140d4:	7019      	strb	r1, [r3, #0]
 80140d6:	4608      	mov	r0, r1
 80140d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140dc:	4770      	bx	lr

080140de <__sfputs_r>:
 80140de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140e0:	4606      	mov	r6, r0
 80140e2:	460f      	mov	r7, r1
 80140e4:	4614      	mov	r4, r2
 80140e6:	18d5      	adds	r5, r2, r3
 80140e8:	42ac      	cmp	r4, r5
 80140ea:	d101      	bne.n	80140f0 <__sfputs_r+0x12>
 80140ec:	2000      	movs	r0, #0
 80140ee:	e007      	b.n	8014100 <__sfputs_r+0x22>
 80140f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140f4:	463a      	mov	r2, r7
 80140f6:	4630      	mov	r0, r6
 80140f8:	f7ff ffda 	bl	80140b0 <__sfputc_r>
 80140fc:	1c43      	adds	r3, r0, #1
 80140fe:	d1f3      	bne.n	80140e8 <__sfputs_r+0xa>
 8014100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014104 <_vfiprintf_r>:
 8014104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014108:	460d      	mov	r5, r1
 801410a:	b09d      	sub	sp, #116	; 0x74
 801410c:	4614      	mov	r4, r2
 801410e:	4698      	mov	r8, r3
 8014110:	4606      	mov	r6, r0
 8014112:	b118      	cbz	r0, 801411c <_vfiprintf_r+0x18>
 8014114:	6983      	ldr	r3, [r0, #24]
 8014116:	b90b      	cbnz	r3, 801411c <_vfiprintf_r+0x18>
 8014118:	f7ff feb8 	bl	8013e8c <__sinit>
 801411c:	4b89      	ldr	r3, [pc, #548]	; (8014344 <_vfiprintf_r+0x240>)
 801411e:	429d      	cmp	r5, r3
 8014120:	d11b      	bne.n	801415a <_vfiprintf_r+0x56>
 8014122:	6875      	ldr	r5, [r6, #4]
 8014124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014126:	07d9      	lsls	r1, r3, #31
 8014128:	d405      	bmi.n	8014136 <_vfiprintf_r+0x32>
 801412a:	89ab      	ldrh	r3, [r5, #12]
 801412c:	059a      	lsls	r2, r3, #22
 801412e:	d402      	bmi.n	8014136 <_vfiprintf_r+0x32>
 8014130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014132:	f7ff ff49 	bl	8013fc8 <__retarget_lock_acquire_recursive>
 8014136:	89ab      	ldrh	r3, [r5, #12]
 8014138:	071b      	lsls	r3, r3, #28
 801413a:	d501      	bpl.n	8014140 <_vfiprintf_r+0x3c>
 801413c:	692b      	ldr	r3, [r5, #16]
 801413e:	b9eb      	cbnz	r3, 801417c <_vfiprintf_r+0x78>
 8014140:	4629      	mov	r1, r5
 8014142:	4630      	mov	r0, r6
 8014144:	f7ff fd1a 	bl	8013b7c <__swsetup_r>
 8014148:	b1c0      	cbz	r0, 801417c <_vfiprintf_r+0x78>
 801414a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801414c:	07dc      	lsls	r4, r3, #31
 801414e:	d50e      	bpl.n	801416e <_vfiprintf_r+0x6a>
 8014150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014154:	b01d      	add	sp, #116	; 0x74
 8014156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801415a:	4b7b      	ldr	r3, [pc, #492]	; (8014348 <_vfiprintf_r+0x244>)
 801415c:	429d      	cmp	r5, r3
 801415e:	d101      	bne.n	8014164 <_vfiprintf_r+0x60>
 8014160:	68b5      	ldr	r5, [r6, #8]
 8014162:	e7df      	b.n	8014124 <_vfiprintf_r+0x20>
 8014164:	4b79      	ldr	r3, [pc, #484]	; (801434c <_vfiprintf_r+0x248>)
 8014166:	429d      	cmp	r5, r3
 8014168:	bf08      	it	eq
 801416a:	68f5      	ldreq	r5, [r6, #12]
 801416c:	e7da      	b.n	8014124 <_vfiprintf_r+0x20>
 801416e:	89ab      	ldrh	r3, [r5, #12]
 8014170:	0598      	lsls	r0, r3, #22
 8014172:	d4ed      	bmi.n	8014150 <_vfiprintf_r+0x4c>
 8014174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014176:	f7ff ff28 	bl	8013fca <__retarget_lock_release_recursive>
 801417a:	e7e9      	b.n	8014150 <_vfiprintf_r+0x4c>
 801417c:	2300      	movs	r3, #0
 801417e:	9309      	str	r3, [sp, #36]	; 0x24
 8014180:	2320      	movs	r3, #32
 8014182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014186:	f8cd 800c 	str.w	r8, [sp, #12]
 801418a:	2330      	movs	r3, #48	; 0x30
 801418c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014350 <_vfiprintf_r+0x24c>
 8014190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014194:	f04f 0901 	mov.w	r9, #1
 8014198:	4623      	mov	r3, r4
 801419a:	469a      	mov	sl, r3
 801419c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141a0:	b10a      	cbz	r2, 80141a6 <_vfiprintf_r+0xa2>
 80141a2:	2a25      	cmp	r2, #37	; 0x25
 80141a4:	d1f9      	bne.n	801419a <_vfiprintf_r+0x96>
 80141a6:	ebba 0b04 	subs.w	fp, sl, r4
 80141aa:	d00b      	beq.n	80141c4 <_vfiprintf_r+0xc0>
 80141ac:	465b      	mov	r3, fp
 80141ae:	4622      	mov	r2, r4
 80141b0:	4629      	mov	r1, r5
 80141b2:	4630      	mov	r0, r6
 80141b4:	f7ff ff93 	bl	80140de <__sfputs_r>
 80141b8:	3001      	adds	r0, #1
 80141ba:	f000 80aa 	beq.w	8014312 <_vfiprintf_r+0x20e>
 80141be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141c0:	445a      	add	r2, fp
 80141c2:	9209      	str	r2, [sp, #36]	; 0x24
 80141c4:	f89a 3000 	ldrb.w	r3, [sl]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f000 80a2 	beq.w	8014312 <_vfiprintf_r+0x20e>
 80141ce:	2300      	movs	r3, #0
 80141d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141d8:	f10a 0a01 	add.w	sl, sl, #1
 80141dc:	9304      	str	r3, [sp, #16]
 80141de:	9307      	str	r3, [sp, #28]
 80141e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141e4:	931a      	str	r3, [sp, #104]	; 0x68
 80141e6:	4654      	mov	r4, sl
 80141e8:	2205      	movs	r2, #5
 80141ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ee:	4858      	ldr	r0, [pc, #352]	; (8014350 <_vfiprintf_r+0x24c>)
 80141f0:	f7ec f876 	bl	80002e0 <memchr>
 80141f4:	9a04      	ldr	r2, [sp, #16]
 80141f6:	b9d8      	cbnz	r0, 8014230 <_vfiprintf_r+0x12c>
 80141f8:	06d1      	lsls	r1, r2, #27
 80141fa:	bf44      	itt	mi
 80141fc:	2320      	movmi	r3, #32
 80141fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014202:	0713      	lsls	r3, r2, #28
 8014204:	bf44      	itt	mi
 8014206:	232b      	movmi	r3, #43	; 0x2b
 8014208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801420c:	f89a 3000 	ldrb.w	r3, [sl]
 8014210:	2b2a      	cmp	r3, #42	; 0x2a
 8014212:	d015      	beq.n	8014240 <_vfiprintf_r+0x13c>
 8014214:	9a07      	ldr	r2, [sp, #28]
 8014216:	4654      	mov	r4, sl
 8014218:	2000      	movs	r0, #0
 801421a:	f04f 0c0a 	mov.w	ip, #10
 801421e:	4621      	mov	r1, r4
 8014220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014224:	3b30      	subs	r3, #48	; 0x30
 8014226:	2b09      	cmp	r3, #9
 8014228:	d94e      	bls.n	80142c8 <_vfiprintf_r+0x1c4>
 801422a:	b1b0      	cbz	r0, 801425a <_vfiprintf_r+0x156>
 801422c:	9207      	str	r2, [sp, #28]
 801422e:	e014      	b.n	801425a <_vfiprintf_r+0x156>
 8014230:	eba0 0308 	sub.w	r3, r0, r8
 8014234:	fa09 f303 	lsl.w	r3, r9, r3
 8014238:	4313      	orrs	r3, r2
 801423a:	9304      	str	r3, [sp, #16]
 801423c:	46a2      	mov	sl, r4
 801423e:	e7d2      	b.n	80141e6 <_vfiprintf_r+0xe2>
 8014240:	9b03      	ldr	r3, [sp, #12]
 8014242:	1d19      	adds	r1, r3, #4
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	9103      	str	r1, [sp, #12]
 8014248:	2b00      	cmp	r3, #0
 801424a:	bfbb      	ittet	lt
 801424c:	425b      	neglt	r3, r3
 801424e:	f042 0202 	orrlt.w	r2, r2, #2
 8014252:	9307      	strge	r3, [sp, #28]
 8014254:	9307      	strlt	r3, [sp, #28]
 8014256:	bfb8      	it	lt
 8014258:	9204      	strlt	r2, [sp, #16]
 801425a:	7823      	ldrb	r3, [r4, #0]
 801425c:	2b2e      	cmp	r3, #46	; 0x2e
 801425e:	d10c      	bne.n	801427a <_vfiprintf_r+0x176>
 8014260:	7863      	ldrb	r3, [r4, #1]
 8014262:	2b2a      	cmp	r3, #42	; 0x2a
 8014264:	d135      	bne.n	80142d2 <_vfiprintf_r+0x1ce>
 8014266:	9b03      	ldr	r3, [sp, #12]
 8014268:	1d1a      	adds	r2, r3, #4
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	9203      	str	r2, [sp, #12]
 801426e:	2b00      	cmp	r3, #0
 8014270:	bfb8      	it	lt
 8014272:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014276:	3402      	adds	r4, #2
 8014278:	9305      	str	r3, [sp, #20]
 801427a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014360 <_vfiprintf_r+0x25c>
 801427e:	7821      	ldrb	r1, [r4, #0]
 8014280:	2203      	movs	r2, #3
 8014282:	4650      	mov	r0, sl
 8014284:	f7ec f82c 	bl	80002e0 <memchr>
 8014288:	b140      	cbz	r0, 801429c <_vfiprintf_r+0x198>
 801428a:	2340      	movs	r3, #64	; 0x40
 801428c:	eba0 000a 	sub.w	r0, r0, sl
 8014290:	fa03 f000 	lsl.w	r0, r3, r0
 8014294:	9b04      	ldr	r3, [sp, #16]
 8014296:	4303      	orrs	r3, r0
 8014298:	3401      	adds	r4, #1
 801429a:	9304      	str	r3, [sp, #16]
 801429c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142a0:	482c      	ldr	r0, [pc, #176]	; (8014354 <_vfiprintf_r+0x250>)
 80142a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80142a6:	2206      	movs	r2, #6
 80142a8:	f7ec f81a 	bl	80002e0 <memchr>
 80142ac:	2800      	cmp	r0, #0
 80142ae:	d03f      	beq.n	8014330 <_vfiprintf_r+0x22c>
 80142b0:	4b29      	ldr	r3, [pc, #164]	; (8014358 <_vfiprintf_r+0x254>)
 80142b2:	bb1b      	cbnz	r3, 80142fc <_vfiprintf_r+0x1f8>
 80142b4:	9b03      	ldr	r3, [sp, #12]
 80142b6:	3307      	adds	r3, #7
 80142b8:	f023 0307 	bic.w	r3, r3, #7
 80142bc:	3308      	adds	r3, #8
 80142be:	9303      	str	r3, [sp, #12]
 80142c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142c2:	443b      	add	r3, r7
 80142c4:	9309      	str	r3, [sp, #36]	; 0x24
 80142c6:	e767      	b.n	8014198 <_vfiprintf_r+0x94>
 80142c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80142cc:	460c      	mov	r4, r1
 80142ce:	2001      	movs	r0, #1
 80142d0:	e7a5      	b.n	801421e <_vfiprintf_r+0x11a>
 80142d2:	2300      	movs	r3, #0
 80142d4:	3401      	adds	r4, #1
 80142d6:	9305      	str	r3, [sp, #20]
 80142d8:	4619      	mov	r1, r3
 80142da:	f04f 0c0a 	mov.w	ip, #10
 80142de:	4620      	mov	r0, r4
 80142e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142e4:	3a30      	subs	r2, #48	; 0x30
 80142e6:	2a09      	cmp	r2, #9
 80142e8:	d903      	bls.n	80142f2 <_vfiprintf_r+0x1ee>
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d0c5      	beq.n	801427a <_vfiprintf_r+0x176>
 80142ee:	9105      	str	r1, [sp, #20]
 80142f0:	e7c3      	b.n	801427a <_vfiprintf_r+0x176>
 80142f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80142f6:	4604      	mov	r4, r0
 80142f8:	2301      	movs	r3, #1
 80142fa:	e7f0      	b.n	80142de <_vfiprintf_r+0x1da>
 80142fc:	ab03      	add	r3, sp, #12
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	462a      	mov	r2, r5
 8014302:	4b16      	ldr	r3, [pc, #88]	; (801435c <_vfiprintf_r+0x258>)
 8014304:	a904      	add	r1, sp, #16
 8014306:	4630      	mov	r0, r6
 8014308:	f3af 8000 	nop.w
 801430c:	4607      	mov	r7, r0
 801430e:	1c78      	adds	r0, r7, #1
 8014310:	d1d6      	bne.n	80142c0 <_vfiprintf_r+0x1bc>
 8014312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014314:	07d9      	lsls	r1, r3, #31
 8014316:	d405      	bmi.n	8014324 <_vfiprintf_r+0x220>
 8014318:	89ab      	ldrh	r3, [r5, #12]
 801431a:	059a      	lsls	r2, r3, #22
 801431c:	d402      	bmi.n	8014324 <_vfiprintf_r+0x220>
 801431e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014320:	f7ff fe53 	bl	8013fca <__retarget_lock_release_recursive>
 8014324:	89ab      	ldrh	r3, [r5, #12]
 8014326:	065b      	lsls	r3, r3, #25
 8014328:	f53f af12 	bmi.w	8014150 <_vfiprintf_r+0x4c>
 801432c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801432e:	e711      	b.n	8014154 <_vfiprintf_r+0x50>
 8014330:	ab03      	add	r3, sp, #12
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	462a      	mov	r2, r5
 8014336:	4b09      	ldr	r3, [pc, #36]	; (801435c <_vfiprintf_r+0x258>)
 8014338:	a904      	add	r1, sp, #16
 801433a:	4630      	mov	r0, r6
 801433c:	f000 f880 	bl	8014440 <_printf_i>
 8014340:	e7e4      	b.n	801430c <_vfiprintf_r+0x208>
 8014342:	bf00      	nop
 8014344:	08014b38 	.word	0x08014b38
 8014348:	08014b58 	.word	0x08014b58
 801434c:	08014b18 	.word	0x08014b18
 8014350:	08014b78 	.word	0x08014b78
 8014354:	08014b82 	.word	0x08014b82
 8014358:	00000000 	.word	0x00000000
 801435c:	080140df 	.word	0x080140df
 8014360:	08014b7e 	.word	0x08014b7e

08014364 <_printf_common>:
 8014364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014368:	4616      	mov	r6, r2
 801436a:	4699      	mov	r9, r3
 801436c:	688a      	ldr	r2, [r1, #8]
 801436e:	690b      	ldr	r3, [r1, #16]
 8014370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014374:	4293      	cmp	r3, r2
 8014376:	bfb8      	it	lt
 8014378:	4613      	movlt	r3, r2
 801437a:	6033      	str	r3, [r6, #0]
 801437c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014380:	4607      	mov	r7, r0
 8014382:	460c      	mov	r4, r1
 8014384:	b10a      	cbz	r2, 801438a <_printf_common+0x26>
 8014386:	3301      	adds	r3, #1
 8014388:	6033      	str	r3, [r6, #0]
 801438a:	6823      	ldr	r3, [r4, #0]
 801438c:	0699      	lsls	r1, r3, #26
 801438e:	bf42      	ittt	mi
 8014390:	6833      	ldrmi	r3, [r6, #0]
 8014392:	3302      	addmi	r3, #2
 8014394:	6033      	strmi	r3, [r6, #0]
 8014396:	6825      	ldr	r5, [r4, #0]
 8014398:	f015 0506 	ands.w	r5, r5, #6
 801439c:	d106      	bne.n	80143ac <_printf_common+0x48>
 801439e:	f104 0a19 	add.w	sl, r4, #25
 80143a2:	68e3      	ldr	r3, [r4, #12]
 80143a4:	6832      	ldr	r2, [r6, #0]
 80143a6:	1a9b      	subs	r3, r3, r2
 80143a8:	42ab      	cmp	r3, r5
 80143aa:	dc26      	bgt.n	80143fa <_printf_common+0x96>
 80143ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80143b0:	1e13      	subs	r3, r2, #0
 80143b2:	6822      	ldr	r2, [r4, #0]
 80143b4:	bf18      	it	ne
 80143b6:	2301      	movne	r3, #1
 80143b8:	0692      	lsls	r2, r2, #26
 80143ba:	d42b      	bmi.n	8014414 <_printf_common+0xb0>
 80143bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143c0:	4649      	mov	r1, r9
 80143c2:	4638      	mov	r0, r7
 80143c4:	47c0      	blx	r8
 80143c6:	3001      	adds	r0, #1
 80143c8:	d01e      	beq.n	8014408 <_printf_common+0xa4>
 80143ca:	6823      	ldr	r3, [r4, #0]
 80143cc:	68e5      	ldr	r5, [r4, #12]
 80143ce:	6832      	ldr	r2, [r6, #0]
 80143d0:	f003 0306 	and.w	r3, r3, #6
 80143d4:	2b04      	cmp	r3, #4
 80143d6:	bf08      	it	eq
 80143d8:	1aad      	subeq	r5, r5, r2
 80143da:	68a3      	ldr	r3, [r4, #8]
 80143dc:	6922      	ldr	r2, [r4, #16]
 80143de:	bf0c      	ite	eq
 80143e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80143e4:	2500      	movne	r5, #0
 80143e6:	4293      	cmp	r3, r2
 80143e8:	bfc4      	itt	gt
 80143ea:	1a9b      	subgt	r3, r3, r2
 80143ec:	18ed      	addgt	r5, r5, r3
 80143ee:	2600      	movs	r6, #0
 80143f0:	341a      	adds	r4, #26
 80143f2:	42b5      	cmp	r5, r6
 80143f4:	d11a      	bne.n	801442c <_printf_common+0xc8>
 80143f6:	2000      	movs	r0, #0
 80143f8:	e008      	b.n	801440c <_printf_common+0xa8>
 80143fa:	2301      	movs	r3, #1
 80143fc:	4652      	mov	r2, sl
 80143fe:	4649      	mov	r1, r9
 8014400:	4638      	mov	r0, r7
 8014402:	47c0      	blx	r8
 8014404:	3001      	adds	r0, #1
 8014406:	d103      	bne.n	8014410 <_printf_common+0xac>
 8014408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014410:	3501      	adds	r5, #1
 8014412:	e7c6      	b.n	80143a2 <_printf_common+0x3e>
 8014414:	18e1      	adds	r1, r4, r3
 8014416:	1c5a      	adds	r2, r3, #1
 8014418:	2030      	movs	r0, #48	; 0x30
 801441a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801441e:	4422      	add	r2, r4
 8014420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014428:	3302      	adds	r3, #2
 801442a:	e7c7      	b.n	80143bc <_printf_common+0x58>
 801442c:	2301      	movs	r3, #1
 801442e:	4622      	mov	r2, r4
 8014430:	4649      	mov	r1, r9
 8014432:	4638      	mov	r0, r7
 8014434:	47c0      	blx	r8
 8014436:	3001      	adds	r0, #1
 8014438:	d0e6      	beq.n	8014408 <_printf_common+0xa4>
 801443a:	3601      	adds	r6, #1
 801443c:	e7d9      	b.n	80143f2 <_printf_common+0x8e>
	...

08014440 <_printf_i>:
 8014440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014444:	7e0f      	ldrb	r7, [r1, #24]
 8014446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014448:	2f78      	cmp	r7, #120	; 0x78
 801444a:	4691      	mov	r9, r2
 801444c:	4680      	mov	r8, r0
 801444e:	460c      	mov	r4, r1
 8014450:	469a      	mov	sl, r3
 8014452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014456:	d807      	bhi.n	8014468 <_printf_i+0x28>
 8014458:	2f62      	cmp	r7, #98	; 0x62
 801445a:	d80a      	bhi.n	8014472 <_printf_i+0x32>
 801445c:	2f00      	cmp	r7, #0
 801445e:	f000 80d8 	beq.w	8014612 <_printf_i+0x1d2>
 8014462:	2f58      	cmp	r7, #88	; 0x58
 8014464:	f000 80a3 	beq.w	80145ae <_printf_i+0x16e>
 8014468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801446c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014470:	e03a      	b.n	80144e8 <_printf_i+0xa8>
 8014472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014476:	2b15      	cmp	r3, #21
 8014478:	d8f6      	bhi.n	8014468 <_printf_i+0x28>
 801447a:	a101      	add	r1, pc, #4	; (adr r1, 8014480 <_printf_i+0x40>)
 801447c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014480:	080144d9 	.word	0x080144d9
 8014484:	080144ed 	.word	0x080144ed
 8014488:	08014469 	.word	0x08014469
 801448c:	08014469 	.word	0x08014469
 8014490:	08014469 	.word	0x08014469
 8014494:	08014469 	.word	0x08014469
 8014498:	080144ed 	.word	0x080144ed
 801449c:	08014469 	.word	0x08014469
 80144a0:	08014469 	.word	0x08014469
 80144a4:	08014469 	.word	0x08014469
 80144a8:	08014469 	.word	0x08014469
 80144ac:	080145f9 	.word	0x080145f9
 80144b0:	0801451d 	.word	0x0801451d
 80144b4:	080145db 	.word	0x080145db
 80144b8:	08014469 	.word	0x08014469
 80144bc:	08014469 	.word	0x08014469
 80144c0:	0801461b 	.word	0x0801461b
 80144c4:	08014469 	.word	0x08014469
 80144c8:	0801451d 	.word	0x0801451d
 80144cc:	08014469 	.word	0x08014469
 80144d0:	08014469 	.word	0x08014469
 80144d4:	080145e3 	.word	0x080145e3
 80144d8:	682b      	ldr	r3, [r5, #0]
 80144da:	1d1a      	adds	r2, r3, #4
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	602a      	str	r2, [r5, #0]
 80144e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80144e8:	2301      	movs	r3, #1
 80144ea:	e0a3      	b.n	8014634 <_printf_i+0x1f4>
 80144ec:	6820      	ldr	r0, [r4, #0]
 80144ee:	6829      	ldr	r1, [r5, #0]
 80144f0:	0606      	lsls	r6, r0, #24
 80144f2:	f101 0304 	add.w	r3, r1, #4
 80144f6:	d50a      	bpl.n	801450e <_printf_i+0xce>
 80144f8:	680e      	ldr	r6, [r1, #0]
 80144fa:	602b      	str	r3, [r5, #0]
 80144fc:	2e00      	cmp	r6, #0
 80144fe:	da03      	bge.n	8014508 <_printf_i+0xc8>
 8014500:	232d      	movs	r3, #45	; 0x2d
 8014502:	4276      	negs	r6, r6
 8014504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014508:	485e      	ldr	r0, [pc, #376]	; (8014684 <_printf_i+0x244>)
 801450a:	230a      	movs	r3, #10
 801450c:	e019      	b.n	8014542 <_printf_i+0x102>
 801450e:	680e      	ldr	r6, [r1, #0]
 8014510:	602b      	str	r3, [r5, #0]
 8014512:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014516:	bf18      	it	ne
 8014518:	b236      	sxthne	r6, r6
 801451a:	e7ef      	b.n	80144fc <_printf_i+0xbc>
 801451c:	682b      	ldr	r3, [r5, #0]
 801451e:	6820      	ldr	r0, [r4, #0]
 8014520:	1d19      	adds	r1, r3, #4
 8014522:	6029      	str	r1, [r5, #0]
 8014524:	0601      	lsls	r1, r0, #24
 8014526:	d501      	bpl.n	801452c <_printf_i+0xec>
 8014528:	681e      	ldr	r6, [r3, #0]
 801452a:	e002      	b.n	8014532 <_printf_i+0xf2>
 801452c:	0646      	lsls	r6, r0, #25
 801452e:	d5fb      	bpl.n	8014528 <_printf_i+0xe8>
 8014530:	881e      	ldrh	r6, [r3, #0]
 8014532:	4854      	ldr	r0, [pc, #336]	; (8014684 <_printf_i+0x244>)
 8014534:	2f6f      	cmp	r7, #111	; 0x6f
 8014536:	bf0c      	ite	eq
 8014538:	2308      	moveq	r3, #8
 801453a:	230a      	movne	r3, #10
 801453c:	2100      	movs	r1, #0
 801453e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014542:	6865      	ldr	r5, [r4, #4]
 8014544:	60a5      	str	r5, [r4, #8]
 8014546:	2d00      	cmp	r5, #0
 8014548:	bfa2      	ittt	ge
 801454a:	6821      	ldrge	r1, [r4, #0]
 801454c:	f021 0104 	bicge.w	r1, r1, #4
 8014550:	6021      	strge	r1, [r4, #0]
 8014552:	b90e      	cbnz	r6, 8014558 <_printf_i+0x118>
 8014554:	2d00      	cmp	r5, #0
 8014556:	d04d      	beq.n	80145f4 <_printf_i+0x1b4>
 8014558:	4615      	mov	r5, r2
 801455a:	fbb6 f1f3 	udiv	r1, r6, r3
 801455e:	fb03 6711 	mls	r7, r3, r1, r6
 8014562:	5dc7      	ldrb	r7, [r0, r7]
 8014564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014568:	4637      	mov	r7, r6
 801456a:	42bb      	cmp	r3, r7
 801456c:	460e      	mov	r6, r1
 801456e:	d9f4      	bls.n	801455a <_printf_i+0x11a>
 8014570:	2b08      	cmp	r3, #8
 8014572:	d10b      	bne.n	801458c <_printf_i+0x14c>
 8014574:	6823      	ldr	r3, [r4, #0]
 8014576:	07de      	lsls	r6, r3, #31
 8014578:	d508      	bpl.n	801458c <_printf_i+0x14c>
 801457a:	6923      	ldr	r3, [r4, #16]
 801457c:	6861      	ldr	r1, [r4, #4]
 801457e:	4299      	cmp	r1, r3
 8014580:	bfde      	ittt	le
 8014582:	2330      	movle	r3, #48	; 0x30
 8014584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014588:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801458c:	1b52      	subs	r2, r2, r5
 801458e:	6122      	str	r2, [r4, #16]
 8014590:	f8cd a000 	str.w	sl, [sp]
 8014594:	464b      	mov	r3, r9
 8014596:	aa03      	add	r2, sp, #12
 8014598:	4621      	mov	r1, r4
 801459a:	4640      	mov	r0, r8
 801459c:	f7ff fee2 	bl	8014364 <_printf_common>
 80145a0:	3001      	adds	r0, #1
 80145a2:	d14c      	bne.n	801463e <_printf_i+0x1fe>
 80145a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145a8:	b004      	add	sp, #16
 80145aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ae:	4835      	ldr	r0, [pc, #212]	; (8014684 <_printf_i+0x244>)
 80145b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80145b4:	6829      	ldr	r1, [r5, #0]
 80145b6:	6823      	ldr	r3, [r4, #0]
 80145b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80145bc:	6029      	str	r1, [r5, #0]
 80145be:	061d      	lsls	r5, r3, #24
 80145c0:	d514      	bpl.n	80145ec <_printf_i+0x1ac>
 80145c2:	07df      	lsls	r7, r3, #31
 80145c4:	bf44      	itt	mi
 80145c6:	f043 0320 	orrmi.w	r3, r3, #32
 80145ca:	6023      	strmi	r3, [r4, #0]
 80145cc:	b91e      	cbnz	r6, 80145d6 <_printf_i+0x196>
 80145ce:	6823      	ldr	r3, [r4, #0]
 80145d0:	f023 0320 	bic.w	r3, r3, #32
 80145d4:	6023      	str	r3, [r4, #0]
 80145d6:	2310      	movs	r3, #16
 80145d8:	e7b0      	b.n	801453c <_printf_i+0xfc>
 80145da:	6823      	ldr	r3, [r4, #0]
 80145dc:	f043 0320 	orr.w	r3, r3, #32
 80145e0:	6023      	str	r3, [r4, #0]
 80145e2:	2378      	movs	r3, #120	; 0x78
 80145e4:	4828      	ldr	r0, [pc, #160]	; (8014688 <_printf_i+0x248>)
 80145e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80145ea:	e7e3      	b.n	80145b4 <_printf_i+0x174>
 80145ec:	0659      	lsls	r1, r3, #25
 80145ee:	bf48      	it	mi
 80145f0:	b2b6      	uxthmi	r6, r6
 80145f2:	e7e6      	b.n	80145c2 <_printf_i+0x182>
 80145f4:	4615      	mov	r5, r2
 80145f6:	e7bb      	b.n	8014570 <_printf_i+0x130>
 80145f8:	682b      	ldr	r3, [r5, #0]
 80145fa:	6826      	ldr	r6, [r4, #0]
 80145fc:	6961      	ldr	r1, [r4, #20]
 80145fe:	1d18      	adds	r0, r3, #4
 8014600:	6028      	str	r0, [r5, #0]
 8014602:	0635      	lsls	r5, r6, #24
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	d501      	bpl.n	801460c <_printf_i+0x1cc>
 8014608:	6019      	str	r1, [r3, #0]
 801460a:	e002      	b.n	8014612 <_printf_i+0x1d2>
 801460c:	0670      	lsls	r0, r6, #25
 801460e:	d5fb      	bpl.n	8014608 <_printf_i+0x1c8>
 8014610:	8019      	strh	r1, [r3, #0]
 8014612:	2300      	movs	r3, #0
 8014614:	6123      	str	r3, [r4, #16]
 8014616:	4615      	mov	r5, r2
 8014618:	e7ba      	b.n	8014590 <_printf_i+0x150>
 801461a:	682b      	ldr	r3, [r5, #0]
 801461c:	1d1a      	adds	r2, r3, #4
 801461e:	602a      	str	r2, [r5, #0]
 8014620:	681d      	ldr	r5, [r3, #0]
 8014622:	6862      	ldr	r2, [r4, #4]
 8014624:	2100      	movs	r1, #0
 8014626:	4628      	mov	r0, r5
 8014628:	f7eb fe5a 	bl	80002e0 <memchr>
 801462c:	b108      	cbz	r0, 8014632 <_printf_i+0x1f2>
 801462e:	1b40      	subs	r0, r0, r5
 8014630:	6060      	str	r0, [r4, #4]
 8014632:	6863      	ldr	r3, [r4, #4]
 8014634:	6123      	str	r3, [r4, #16]
 8014636:	2300      	movs	r3, #0
 8014638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801463c:	e7a8      	b.n	8014590 <_printf_i+0x150>
 801463e:	6923      	ldr	r3, [r4, #16]
 8014640:	462a      	mov	r2, r5
 8014642:	4649      	mov	r1, r9
 8014644:	4640      	mov	r0, r8
 8014646:	47d0      	blx	sl
 8014648:	3001      	adds	r0, #1
 801464a:	d0ab      	beq.n	80145a4 <_printf_i+0x164>
 801464c:	6823      	ldr	r3, [r4, #0]
 801464e:	079b      	lsls	r3, r3, #30
 8014650:	d413      	bmi.n	801467a <_printf_i+0x23a>
 8014652:	68e0      	ldr	r0, [r4, #12]
 8014654:	9b03      	ldr	r3, [sp, #12]
 8014656:	4298      	cmp	r0, r3
 8014658:	bfb8      	it	lt
 801465a:	4618      	movlt	r0, r3
 801465c:	e7a4      	b.n	80145a8 <_printf_i+0x168>
 801465e:	2301      	movs	r3, #1
 8014660:	4632      	mov	r2, r6
 8014662:	4649      	mov	r1, r9
 8014664:	4640      	mov	r0, r8
 8014666:	47d0      	blx	sl
 8014668:	3001      	adds	r0, #1
 801466a:	d09b      	beq.n	80145a4 <_printf_i+0x164>
 801466c:	3501      	adds	r5, #1
 801466e:	68e3      	ldr	r3, [r4, #12]
 8014670:	9903      	ldr	r1, [sp, #12]
 8014672:	1a5b      	subs	r3, r3, r1
 8014674:	42ab      	cmp	r3, r5
 8014676:	dcf2      	bgt.n	801465e <_printf_i+0x21e>
 8014678:	e7eb      	b.n	8014652 <_printf_i+0x212>
 801467a:	2500      	movs	r5, #0
 801467c:	f104 0619 	add.w	r6, r4, #25
 8014680:	e7f5      	b.n	801466e <_printf_i+0x22e>
 8014682:	bf00      	nop
 8014684:	08014b89 	.word	0x08014b89
 8014688:	08014b9a 	.word	0x08014b9a

0801468c <__sread>:
 801468c:	b510      	push	{r4, lr}
 801468e:	460c      	mov	r4, r1
 8014690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014694:	f000 f894 	bl	80147c0 <_read_r>
 8014698:	2800      	cmp	r0, #0
 801469a:	bfab      	itete	ge
 801469c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801469e:	89a3      	ldrhlt	r3, [r4, #12]
 80146a0:	181b      	addge	r3, r3, r0
 80146a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146a6:	bfac      	ite	ge
 80146a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80146aa:	81a3      	strhlt	r3, [r4, #12]
 80146ac:	bd10      	pop	{r4, pc}

080146ae <__swrite>:
 80146ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b2:	461f      	mov	r7, r3
 80146b4:	898b      	ldrh	r3, [r1, #12]
 80146b6:	05db      	lsls	r3, r3, #23
 80146b8:	4605      	mov	r5, r0
 80146ba:	460c      	mov	r4, r1
 80146bc:	4616      	mov	r6, r2
 80146be:	d505      	bpl.n	80146cc <__swrite+0x1e>
 80146c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c4:	2302      	movs	r3, #2
 80146c6:	2200      	movs	r2, #0
 80146c8:	f000 f868 	bl	801479c <_lseek_r>
 80146cc:	89a3      	ldrh	r3, [r4, #12]
 80146ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146d6:	81a3      	strh	r3, [r4, #12]
 80146d8:	4632      	mov	r2, r6
 80146da:	463b      	mov	r3, r7
 80146dc:	4628      	mov	r0, r5
 80146de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146e2:	f000 b817 	b.w	8014714 <_write_r>

080146e6 <__sseek>:
 80146e6:	b510      	push	{r4, lr}
 80146e8:	460c      	mov	r4, r1
 80146ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146ee:	f000 f855 	bl	801479c <_lseek_r>
 80146f2:	1c43      	adds	r3, r0, #1
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	bf15      	itete	ne
 80146f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80146fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014702:	81a3      	strheq	r3, [r4, #12]
 8014704:	bf18      	it	ne
 8014706:	81a3      	strhne	r3, [r4, #12]
 8014708:	bd10      	pop	{r4, pc}

0801470a <__sclose>:
 801470a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801470e:	f000 b813 	b.w	8014738 <_close_r>
	...

08014714 <_write_r>:
 8014714:	b538      	push	{r3, r4, r5, lr}
 8014716:	4d07      	ldr	r5, [pc, #28]	; (8014734 <_write_r+0x20>)
 8014718:	4604      	mov	r4, r0
 801471a:	4608      	mov	r0, r1
 801471c:	4611      	mov	r1, r2
 801471e:	2200      	movs	r2, #0
 8014720:	602a      	str	r2, [r5, #0]
 8014722:	461a      	mov	r2, r3
 8014724:	f7ee f8dd 	bl	80028e2 <_write>
 8014728:	1c43      	adds	r3, r0, #1
 801472a:	d102      	bne.n	8014732 <_write_r+0x1e>
 801472c:	682b      	ldr	r3, [r5, #0]
 801472e:	b103      	cbz	r3, 8014732 <_write_r+0x1e>
 8014730:	6023      	str	r3, [r4, #0]
 8014732:	bd38      	pop	{r3, r4, r5, pc}
 8014734:	24005018 	.word	0x24005018

08014738 <_close_r>:
 8014738:	b538      	push	{r3, r4, r5, lr}
 801473a:	4d06      	ldr	r5, [pc, #24]	; (8014754 <_close_r+0x1c>)
 801473c:	2300      	movs	r3, #0
 801473e:	4604      	mov	r4, r0
 8014740:	4608      	mov	r0, r1
 8014742:	602b      	str	r3, [r5, #0]
 8014744:	f7ee f8e9 	bl	800291a <_close>
 8014748:	1c43      	adds	r3, r0, #1
 801474a:	d102      	bne.n	8014752 <_close_r+0x1a>
 801474c:	682b      	ldr	r3, [r5, #0]
 801474e:	b103      	cbz	r3, 8014752 <_close_r+0x1a>
 8014750:	6023      	str	r3, [r4, #0]
 8014752:	bd38      	pop	{r3, r4, r5, pc}
 8014754:	24005018 	.word	0x24005018

08014758 <_fstat_r>:
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	4d07      	ldr	r5, [pc, #28]	; (8014778 <_fstat_r+0x20>)
 801475c:	2300      	movs	r3, #0
 801475e:	4604      	mov	r4, r0
 8014760:	4608      	mov	r0, r1
 8014762:	4611      	mov	r1, r2
 8014764:	602b      	str	r3, [r5, #0]
 8014766:	f7ee f8e4 	bl	8002932 <_fstat>
 801476a:	1c43      	adds	r3, r0, #1
 801476c:	d102      	bne.n	8014774 <_fstat_r+0x1c>
 801476e:	682b      	ldr	r3, [r5, #0]
 8014770:	b103      	cbz	r3, 8014774 <_fstat_r+0x1c>
 8014772:	6023      	str	r3, [r4, #0]
 8014774:	bd38      	pop	{r3, r4, r5, pc}
 8014776:	bf00      	nop
 8014778:	24005018 	.word	0x24005018

0801477c <_isatty_r>:
 801477c:	b538      	push	{r3, r4, r5, lr}
 801477e:	4d06      	ldr	r5, [pc, #24]	; (8014798 <_isatty_r+0x1c>)
 8014780:	2300      	movs	r3, #0
 8014782:	4604      	mov	r4, r0
 8014784:	4608      	mov	r0, r1
 8014786:	602b      	str	r3, [r5, #0]
 8014788:	f7ee f8e3 	bl	8002952 <_isatty>
 801478c:	1c43      	adds	r3, r0, #1
 801478e:	d102      	bne.n	8014796 <_isatty_r+0x1a>
 8014790:	682b      	ldr	r3, [r5, #0]
 8014792:	b103      	cbz	r3, 8014796 <_isatty_r+0x1a>
 8014794:	6023      	str	r3, [r4, #0]
 8014796:	bd38      	pop	{r3, r4, r5, pc}
 8014798:	24005018 	.word	0x24005018

0801479c <_lseek_r>:
 801479c:	b538      	push	{r3, r4, r5, lr}
 801479e:	4d07      	ldr	r5, [pc, #28]	; (80147bc <_lseek_r+0x20>)
 80147a0:	4604      	mov	r4, r0
 80147a2:	4608      	mov	r0, r1
 80147a4:	4611      	mov	r1, r2
 80147a6:	2200      	movs	r2, #0
 80147a8:	602a      	str	r2, [r5, #0]
 80147aa:	461a      	mov	r2, r3
 80147ac:	f7ee f8dc 	bl	8002968 <_lseek>
 80147b0:	1c43      	adds	r3, r0, #1
 80147b2:	d102      	bne.n	80147ba <_lseek_r+0x1e>
 80147b4:	682b      	ldr	r3, [r5, #0]
 80147b6:	b103      	cbz	r3, 80147ba <_lseek_r+0x1e>
 80147b8:	6023      	str	r3, [r4, #0]
 80147ba:	bd38      	pop	{r3, r4, r5, pc}
 80147bc:	24005018 	.word	0x24005018

080147c0 <_read_r>:
 80147c0:	b538      	push	{r3, r4, r5, lr}
 80147c2:	4d07      	ldr	r5, [pc, #28]	; (80147e0 <_read_r+0x20>)
 80147c4:	4604      	mov	r4, r0
 80147c6:	4608      	mov	r0, r1
 80147c8:	4611      	mov	r1, r2
 80147ca:	2200      	movs	r2, #0
 80147cc:	602a      	str	r2, [r5, #0]
 80147ce:	461a      	mov	r2, r3
 80147d0:	f7ee f86a 	bl	80028a8 <_read>
 80147d4:	1c43      	adds	r3, r0, #1
 80147d6:	d102      	bne.n	80147de <_read_r+0x1e>
 80147d8:	682b      	ldr	r3, [r5, #0]
 80147da:	b103      	cbz	r3, 80147de <_read_r+0x1e>
 80147dc:	6023      	str	r3, [r4, #0]
 80147de:	bd38      	pop	{r3, r4, r5, pc}
 80147e0:	24005018 	.word	0x24005018

080147e4 <_init>:
 80147e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e6:	bf00      	nop
 80147e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ea:	bc08      	pop	{r3}
 80147ec:	469e      	mov	lr, r3
 80147ee:	4770      	bx	lr

080147f0 <_fini>:
 80147f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f2:	bf00      	nop
 80147f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147f6:	bc08      	pop	{r3}
 80147f8:	469e      	mov	lr, r3
 80147fa:	4770      	bx	lr
